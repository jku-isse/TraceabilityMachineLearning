-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: databaseitrust
-- ------------------------------------------------------
-- Server version	8.0.11

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `parameters`
--

DROP TABLE IF EXISTS `parameters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameters` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parametername` varchar(200) DEFAULT NULL,
  `parametertype` varchar(200) DEFAULT NULL,
  `parameterclass` int(11) DEFAULT NULL,
  `classid` int(11) DEFAULT NULL,
  `classname` varchar(200) DEFAULT NULL,
  `methodid` int(11) DEFAULT NULL,
  `methodname` longtext,
  `isreturn` tinyint(4) NOT NULL,
  `sourcecode` longtext,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2198 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameters`
--

LOCK TABLES `parameters` WRITE;
/*!40000 ALTER TABLE `parameters` DISABLE KEYS */;
INSERT INTO `parameters` VALUES (1,'Map map','java.util.Map',0,1,'edu.ncsu.csc.itrust.BeanBuilder',2,'edu.ncsu.csc.itrust.BeanBuilder.build(java.util.Map,java.lang.Object)',0,'/**\r\n * The code here is not obvious, but this method should not need rewriting unless a bug is found\r\n *\r\n * @param map\r\n * 		-\r\n * 		typically a request.getParameterMap; also can be a HashMap\r\n * @param bean\r\n * 		-\r\n * 		an instantiated bean to be loaded. Loaded bean is returned.\r\n * @return a loaded \"bean\"\r\n * @throws Exception\r\n * 		-\r\n * 		Several exceptions are thrown here, so promotion seemed fitting\r\n */\r\n// this warning is only suppressed because Map isnt parameterized (old JSP)\r\npublic T build(Map map, T bean) throws Exception {\r\n    // JavaBeans should not have overloaded methods, according to their API\r\n    // (a stupid limitation!)\r\n    // Nevertheless, we should check for it\r\n    checkOverloadedMethods(bean);\r\n    // Use an introspector to find all of the getXXX or setXXX, we only want\r\n    // the setXXX\r\n    PropertyDescriptor[] propertyDescriptors = Introspector.getBeanInfo(bean.getClass()).getPropertyDescriptors();\r\n    for (PropertyDescriptor descriptor : propertyDescriptors) {\r\n        // if object is null, either it was ignored or empty - just go with\r\n        // beans default\r\n        String[] value = ((String[]) (map.get(descriptor.getName())));\r\n        Method writeMethod = descriptor.getWriteMethod();\r\n        if (((!(\"class\".equals(descriptor.getName()))) && (value != null)) && (writeMethod != null)) {\r\n            // descriptors name is the name of your property; like\r\n            // firstName\r\n            // only take the first string\r\n            try {\r\n                // Skip the setters for enumerations\r\n                if ((writeMethod.getParameterTypes()[0].getEnumConstants()) == null)\r\n                    writeMethod.invoke(bean, new Object[]{ value[0] });\r\n\r\n            } catch (IllegalArgumentException e) {\r\n                // Throw a more informative exception\r\n                throw new IllegalArgumentException((((((e.getMessage()) + \" with \") + (writeMethod.getName())) + \" and \") + (value[0])));\r\n            }\r\n        }\r\n    }\r\n    return bean;\r\n}'),(2,'T bean','T',0,1,'edu.ncsu.csc.itrust.BeanBuilder',2,'edu.ncsu.csc.itrust.BeanBuilder.build(java.util.Map,java.lang.Object)',0,'/**\r\n * The code here is not obvious, but this method should not need rewriting unless a bug is found\r\n *\r\n * @param map\r\n * 		-\r\n * 		typically a request.getParameterMap; also can be a HashMap\r\n * @param bean\r\n * 		-\r\n * 		an instantiated bean to be loaded. Loaded bean is returned.\r\n * @return a loaded \"bean\"\r\n * @throws Exception\r\n * 		-\r\n * 		Several exceptions are thrown here, so promotion seemed fitting\r\n */\r\n// this warning is only suppressed because Map isnt parameterized (old JSP)\r\npublic T build(Map map, T bean) throws Exception {\r\n    // JavaBeans should not have overloaded methods, according to their API\r\n    // (a stupid limitation!)\r\n    // Nevertheless, we should check for it\r\n    checkOverloadedMethods(bean);\r\n    // Use an introspector to find all of the getXXX or setXXX, we only want\r\n    // the setXXX\r\n    PropertyDescriptor[] propertyDescriptors = Introspector.getBeanInfo(bean.getClass()).getPropertyDescriptors();\r\n    for (PropertyDescriptor descriptor : propertyDescriptors) {\r\n        // if object is null, either it was ignored or empty - just go with\r\n        // beans default\r\n        String[] value = ((String[]) (map.get(descriptor.getName())));\r\n        Method writeMethod = descriptor.getWriteMethod();\r\n        if (((!(\"class\".equals(descriptor.getName()))) && (value != null)) && (writeMethod != null)) {\r\n            // descriptors name is the name of your property; like\r\n            // firstName\r\n            // only take the first string\r\n            try {\r\n                // Skip the setters for enumerations\r\n                if ((writeMethod.getParameterTypes()[0].getEnumConstants()) == null)\r\n                    writeMethod.invoke(bean, new Object[]{ value[0] });\r\n\r\n            } catch (IllegalArgumentException e) {\r\n                // Throw a more informative exception\r\n                throw new IllegalArgumentException((((((e.getMessage()) + \" with \") + (writeMethod.getName())) + \" and \") + (value[0])));\r\n            }\r\n        }\r\n    }\r\n    return bean;\r\n}'),(3,'T bean','T',0,1,'edu.ncsu.csc.itrust.BeanBuilder',3,'edu.ncsu.csc.itrust.BeanBuilder.checkOverloadedMethods(java.lang.Object)',0,'/**\r\n * Checks for overloaded methods\r\n *\r\n * @param bean\r\n * 		item to check\r\n */\r\nprivate void checkOverloadedMethods(T bean) {\r\n    Method[] methods = bean.getClass().getDeclaredMethods();\r\n    HashMap<String, String> nameMap = new HashMap<String, String>(methods.length);\r\n    for (Method method : methods) {\r\n        if ((nameMap.get(method.getName())) != null)\r\n            throw new IllegalArgumentException((((bean.getClass().getName()) + \" should not have any overloaded methods, like \") + (method.getName())));\r\n\r\n        // allow an equals, compareTo override\r\n        if (!((\"equals\".equals(method.getName())) || (\"compareTo\".equals(method.getName()))))\r\n            nameMap.put(method.getName(), \"exists\");\r\n\r\n    }\r\n}'),(4,'InputStream csvstream','java.io.InputStream',0,3,'edu.ncsu.csc.itrust.CSVParser',11,'edu.ncsu.csc.itrust.CSVParser.-init-(java.io.InputStream)',0,'/**\r\n * Main method used to manually test functionality.\r\n *\r\n * @param args\r\n * 		\r\n * @throws FileNotFoundException\r\n * 		\r\n * @throws CSVFormatException\r\n * 		\r\n */\r\n/* public static void main(String args[]) throws FileNotFoundException, CSVFormatException{\nCSVParser parser=new CSVParser(new File(\"/home/michael/Source/workspace/iTrust/testing-files/sample_patientupload/HCPPatientUploadValidData.csv\"));\nfor(int i=0;i<parser.getHeader().size();i++){\nSystem.out.println(parser.getHeader().get(i));\n}\n}\n */\r\n/**\r\n * Constructor taking a File object (for debugging purposes)\r\n *\r\n * @param csvfile\r\n * 		The CSV file to parse.\r\n * @throws FileNotFoundException\r\n * 		\r\n * @throws CSVFormatException\r\n * 		\r\n */\r\n/* CSVParser(File csvfile) throws FileNotFoundException, CSVFormatException{\nScanner CSVScanner = new Scanner(csvfile);\nparseCSV(CSVScanner);\n}\n */\r\n/**\r\n * Constructor taking an InputStream\r\n *\r\n * @param csvstream\r\n * 		\r\n * @throws CSVFormatException\r\n * 		\r\n */\r\npublic CSVParser(InputStream csvstream) throws CSVFormatException {\r\n    Scanner CSVScanner = new Scanner(new InputStreamReader(csvstream));\r\n    parseCSV(CSVScanner);\r\n}'),(5,'Scanner CSVScanner','java.util.Scanner',0,3,'edu.ncsu.csc.itrust.CSVParser',12,'edu.ncsu.csc.itrust.CSVParser.-init-(java.util.Scanner)',0,'/**\r\n * Constructor taking an already-prepared Scanner\r\n * (For testing purposes)\r\n *\r\n * @param csvstream\r\n * 		\r\n * @throws CSVFormatException\r\n * 		\r\n */\r\nCSVParser(Scanner CSVScanner) throws CSVFormatException {\r\n    parseCSV(CSVScanner);\r\n}'),(6,'Scanner CSVScanner','java.util.Scanner',0,3,'edu.ncsu.csc.itrust.CSVParser',16,'edu.ncsu.csc.itrust.CSVParser.parseCSV(java.util.Scanner)',0,'/**\r\n * Parses the CSV file line-by-line.\r\n *\r\n * @param CSVScanner\r\n * 		A scanner to a CSV stream.\r\n * @throws CSVFormatException\r\n * 		\r\n */\r\nprivate void parseCSV(Scanner CSVScanner) throws CSVFormatException {\r\n    String currentLine;\r\n    ArrayList<String> parsedLine = null;\r\n    // The number of fields (columns) in the CSV file as determined by the number of headers\r\n    int numFields = 0;\r\n    // The current line number being processed (Used to report the line number of errors)\r\n    int currentLineNumber = 1;\r\n    // Attempt to read the first line (the header) from the file\r\n    if (CSVScanner.hasNextLine()) {\r\n        currentLine = CSVScanner.nextLine();\r\n        CSVHeader = parseCSVLine(currentLine);\r\n        numFields = CSVHeader.size();\r\n        // If it does not exist (or if the file isnt a text file at all), the entire process fails\r\n    } else {\r\n        throw new CSVFormatException(\"File is not valid CSV file.\");\r\n    }\r\n    // Read the file line-by-line and call the line parser for each line\r\n    while (CSVScanner.hasNextLine()) {\r\n        currentLineNumber++;\r\n        currentLine = CSVScanner.nextLine();\r\n        try {\r\n            parsedLine = parseCSVLine(currentLine);\r\n            // If the line doesnt have the right number of fields, it is ignored\r\n            if ((parsedLine.size()) == numFields) {\r\n                CSVData.add(parsedLine);\r\n            } else {\r\n                errors.addIfNotNull((\"Field number mismatch on line \" + currentLineNumber));\r\n            }\r\n            // If the line is otherwise invalid, it is also ignored\r\n        } catch (CSVFormatException e) {\r\n            errors.addIfNotNull((((e.getMessage()) + \" on line \") + currentLineNumber));\r\n        }\r\n    } \r\n}'),(7,'String line','java.lang.String',0,3,'edu.ncsu.csc.itrust.CSVParser',17,'edu.ncsu.csc.itrust.CSVParser.parseCSVLine(java.lang.String)',0,'/**\r\n * Parses the passed line character-by-character\r\n *\r\n * @param line\r\n * 		Line from the CSV file to parse\r\n * @return ArrayList of Strings, each containing the data from one field\r\n * @throws CSVFormatException\r\n * 		\r\n */\r\nprivate ArrayList<String> parseCSVLine(String line) throws CSVFormatException {\r\n    // Contains the fields from each line parsed\r\n    ArrayList<String> aLine = new ArrayList<String>();\r\n    // Contains the data from the current field being read\r\n    String currentField = \"\";\r\n    // Contains the status of whether or not the parser is inside a quoted area\r\n    // Used to handle commas and other special characters within the field.\r\n    boolean insideQuotes = false;\r\n    // Read the line character-by-character\r\n    for (int i = 0; i < (line.length()); i++) {\r\n        // Comma denotes the end of the current field unless it is quoted\r\n        if (((line.charAt(i)) == ,) && (!insideQuotes)) {\r\n            aLine.add(currentField);\r\n            currentField = \"\";\r\n            // If the field is not ending\r\n        } else {\r\n            // If the character is a \", ignore it and flip the quote status\r\n            if ((line.charAt(i)) == \") {\r\n                insideQuotes = !insideQuotes;\r\n                // Otherwise, add the character to the string\r\n            } else {\r\n                currentField = currentField + (line.substring(i, (i + 1)));\r\n            }\r\n        }\r\n    }\r\n    // If the line parser ends while still inside a quoted section, the input line was invalid\r\n    if (insideQuotes) {\r\n        throw new CSVFormatException(\"Line ended while inside quotes\");\r\n    }\r\n    // Grab text from last field too, since the last field does not end with a comma\r\n    aLine.add(currentField);\r\n    return aLine;\r\n}'),(8,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,5,'edu.ncsu.csc.itrust.DBBuilder',26,'edu.ncsu.csc.itrust.DBBuilder.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public DBBuilder(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(9,'String[] args','java.lang.String[]',0,5,'edu.ncsu.csc.itrust.DBBuilder',31,'edu.ncsu.csc.itrust.DBBuilder.main(java.lang.String[])',0,'public static void main(String[] args) throws Exception {\r\n    DBBuilder.rebuildAll();\r\n}'),(10,'List<String> queries','java.util.List',0,5,'edu.ncsu.csc.itrust.DBBuilder',29,'edu.ncsu.csc.itrust.DBBuilder.executeSQL(java.util.List)',0,'public void executeSQL(List<String> queries) throws SQLException {\r\n    Connection conn = factory.getConnection();\r\n    long start = System.currentTimeMillis();\r\n    for (String sql : queries) {\r\n        System.out.println((\"Executing: \" + sql));\r\n        // System.out.println(\"\"\" + sql.replace(\"\"\", \"\\\") + \"\",\");\r\n        (DBBuilder.numExecuted)++;\r\n        Statement stmt = conn.createStatement();\r\n        try {\r\n            stmt.execute(sql);\r\n        } catch (SQLException e) {\r\n            throw new SQLException((((e.getMessage()) + \" from executing: \") + sql), e.getSQLState(), e.getErrorCode());\r\n        } finally {\r\n            stmt.close();\r\n        }\r\n    }\r\n    DBBuilder.queryTimeTaken += (System.currentTimeMillis()) - start;\r\n    System.out.println(((((\"Queries executed: \" + (DBBuilder.numExecuted)) + \"\nTime executing queries: \") + (DBBuilder.queryTimeTaken)) + \"ms\"));\r\n    conn.close();\r\n}'),(11,'String filepath','java.lang.String',0,5,'edu.ncsu.csc.itrust.DBBuilder',30,'edu.ncsu.csc.itrust.DBBuilder.executeSQLFile(java.lang.String)',0,'public void executeSQLFile(String filepath) throws FileNotFoundException, IOException, SQLException {\r\n    executeSQL(SQLFileCache.getInstance().getQueries(filepath));\r\n}'),(12,'Connection conn','java.sql.Connection',0,6,'edu.ncsu.csc.itrust.DBUtil',35,'edu.ncsu.csc.itrust.DBUtil.closeConnection(java.sql.Connection,java.sql.PreparedStatement)',0,'/**\r\n * Close the prepared statement and the connection in a proper way\r\n *\r\n * @param conn\r\n * 		\r\n * @param ps\r\n * 		\r\n */\r\npublic static void closeConnection(Connection conn, PreparedStatement ps) {\r\n    try {\r\n        if (ps != null)\r\n            ps.close();\r\n\r\n        if (conn != null)\r\n            conn.close();\r\n\r\n    } catch (SQLException e) {\r\n        System.err.println(\"Error closing connections\");\r\n        e.printStackTrace();\r\n    }\r\n}'),(13,'PreparedStatement ps','java.sql.PreparedStatement',0,6,'edu.ncsu.csc.itrust.DBUtil',35,'edu.ncsu.csc.itrust.DBUtil.closeConnection(java.sql.Connection,java.sql.PreparedStatement)',0,'/**\r\n * Close the prepared statement and the connection in a proper way\r\n *\r\n * @param conn\r\n * 		\r\n * @param ps\r\n * 		\r\n */\r\npublic static void closeConnection(Connection conn, PreparedStatement ps) {\r\n    try {\r\n        if (ps != null)\r\n            ps.close();\r\n\r\n        if (conn != null)\r\n            conn.close();\r\n\r\n    } catch (SQLException e) {\r\n        System.err.println(\"Error closing connections\");\r\n        e.printStackTrace();\r\n    }\r\n}'),(14,'Connection conn','java.sql.Connection',0,6,'edu.ncsu.csc.itrust.DBUtil',36,'edu.ncsu.csc.itrust.DBUtil.getLastInsert(java.sql.Connection)',0,'/**\r\n * Returns the last ID that was generated for an auto-increment column. Please note that this does NOT\r\n * cause transaction problems! last_insert_id() returns the last generated ID on a per-connection basis.\r\n * See the MySQL documentation at the following location to confirm this:\r\n * {@link http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html}\r\n *\r\n * Dont believe me? see {@link AutoIncrementTest}\r\n *\r\n * @param conn\r\n * 		\r\n * @return last generated id\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic static long getLastInsert(Connection conn) throws SQLException {\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT LAST_INSERT_ID()\");\r\n    rs.next();\r\n    return rs.getLong(1);\r\n}'),(15,'long years','long',0,7,'edu.ncsu.csc.itrust.DateUtil',45,'edu.ncsu.csc.itrust.DateUtil.yearsAgo(long)',0,'/**\r\n * Returns a MM/dd/yyyy format of the date for the given years ago\r\n *\r\n * @param years\r\n * 		\r\n * @return \r\n */\r\npublic static String yearsAgo(long years) {\r\n    long time = System.currentTimeMillis();\r\n    return new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date((time - (years * (DateUtil.YEAR_IN_MS)))));\r\n}'),(16,'Date date','java.util.Date',0,7,'edu.ncsu.csc.itrust.DateUtil',43,'edu.ncsu.csc.itrust.DateUtil.isInMonthRange(java.util.Date,int,int)',0,'/**\r\n * Checks to see if a given date is within a range of months <strong>INCLUSIVELY</strong>, agnostic of\r\n * the year. <br />\r\n * <br />\r\n *\r\n * The range \"wraps\" so that if the first month is after the second month, then the definition of \"is in\r\n * month range\" is:<br />\r\n * the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth.\r\n *\r\n * Modular arithmetic is used to adjust month values into the valid range.\r\n *\r\n * @param date\r\n * 		\r\n * @param firstMonth\r\n * 		\r\n * @param secondMonth\r\n * 		\r\n * @return \r\n */\r\npublic static boolean isInMonthRange(Date date, int firstMonth, int secondMonth) {\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.setTime(date);\r\n    firstMonth %= 12;\r\n    secondMonth %= 12;\r\n    if (secondMonth >= firstMonth) {\r\n        return ((cal.get(Calendar.MONTH)) >= firstMonth) && ((cal.get(Calendar.MONTH)) <= secondMonth);\r\n    }\r\n    return ((cal.get(Calendar.MONTH)) >= firstMonth) || ((cal.get(Calendar.MONTH)) <= secondMonth);\r\n}'),(17,'int firstMonth','int',0,7,'edu.ncsu.csc.itrust.DateUtil',43,'edu.ncsu.csc.itrust.DateUtil.isInMonthRange(java.util.Date,int,int)',0,'/**\r\n * Checks to see if a given date is within a range of months <strong>INCLUSIVELY</strong>, agnostic of\r\n * the year. <br />\r\n * <br />\r\n *\r\n * The range \"wraps\" so that if the first month is after the second month, then the definition of \"is in\r\n * month range\" is:<br />\r\n * the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth.\r\n *\r\n * Modular arithmetic is used to adjust month values into the valid range.\r\n *\r\n * @param date\r\n * 		\r\n * @param firstMonth\r\n * 		\r\n * @param secondMonth\r\n * 		\r\n * @return \r\n */\r\npublic static boolean isInMonthRange(Date date, int firstMonth, int secondMonth) {\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.setTime(date);\r\n    firstMonth %= 12;\r\n    secondMonth %= 12;\r\n    if (secondMonth >= firstMonth) {\r\n        return ((cal.get(Calendar.MONTH)) >= firstMonth) && ((cal.get(Calendar.MONTH)) <= secondMonth);\r\n    }\r\n    return ((cal.get(Calendar.MONTH)) >= firstMonth) || ((cal.get(Calendar.MONTH)) <= secondMonth);\r\n}'),(18,'int secondMonth','int',0,7,'edu.ncsu.csc.itrust.DateUtil',43,'edu.ncsu.csc.itrust.DateUtil.isInMonthRange(java.util.Date,int,int)',0,'/**\r\n * Checks to see if a given date is within a range of months <strong>INCLUSIVELY</strong>, agnostic of\r\n * the year. <br />\r\n * <br />\r\n *\r\n * The range \"wraps\" so that if the first month is after the second month, then the definition of \"is in\r\n * month range\" is:<br />\r\n * the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth.\r\n *\r\n * Modular arithmetic is used to adjust month values into the valid range.\r\n *\r\n * @param date\r\n * 		\r\n * @param firstMonth\r\n * 		\r\n * @param secondMonth\r\n * 		\r\n * @return \r\n */\r\npublic static boolean isInMonthRange(Date date, int firstMonth, int secondMonth) {\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.setTime(date);\r\n    firstMonth %= 12;\r\n    secondMonth %= 12;\r\n    if (secondMonth >= firstMonth) {\r\n        return ((cal.get(Calendar.MONTH)) >= firstMonth) && ((cal.get(Calendar.MONTH)) <= secondMonth);\r\n    }\r\n    return ((cal.get(Calendar.MONTH)) >= firstMonth) || ((cal.get(Calendar.MONTH)) <= secondMonth);\r\n}'),(19,'int firstMonth','int',0,7,'edu.ncsu.csc.itrust.DateUtil',38,'edu.ncsu.csc.itrust.DateUtil.currentlyInMonthRange(int,int)',0,'/**\r\n * Same as isInMonthRange but uses the current date as the date value.\r\n *\r\n * @see DateUtil#isInMonthRange(Date, int, int)\r\n * @param firstMonth\r\n * 		\r\n * @param secondMonth\r\n * 		\r\n * @return \r\n */\r\npublic static boolean currentlyInMonthRange(int firstMonth, int secondMonth) {\r\n    return DateUtil.isInMonthRange(new Date(), firstMonth, secondMonth);\r\n}'),(20,'int secondMonth','int',0,7,'edu.ncsu.csc.itrust.DateUtil',38,'edu.ncsu.csc.itrust.DateUtil.currentlyInMonthRange(int,int)',0,'/**\r\n * Same as isInMonthRange but uses the current date as the date value.\r\n *\r\n * @see DateUtil#isInMonthRange(Date, int, int)\r\n * @param firstMonth\r\n * 		\r\n * @param secondMonth\r\n * 		\r\n * @return \r\n */\r\npublic static boolean currentlyInMonthRange(int firstMonth, int secondMonth) {\r\n    return DateUtil.isInMonthRange(new Date(), firstMonth, secondMonth);\r\n}'),(21,'int years','int',0,7,'edu.ncsu.csc.itrust.DateUtil',40,'edu.ncsu.csc.itrust.DateUtil.getDateXyearsAgoFromNow(int)',0,'/**\r\n * Returns the date a certain number of years ago\r\n *\r\n * @param years\r\n * 		how many years ago\r\n * @return the date it was however many years ago\r\n */\r\npublic static Date getDateXyearsAgoFromNow(int years) {\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-years));\r\n    return cal.getTime();\r\n}'),(22,'int years','int',0,7,'edu.ncsu.csc.itrust.DateUtil',42,'edu.ncsu.csc.itrust.DateUtil.getSQLdateXyearsAgoFromNow(int)',0,'/**\r\n * Returns the date a certain number of years ago\r\n *\r\n * @param years\r\n * 		how many years ago\r\n * @return the date it was however many years ago\r\n */\r\npublic static Date getSQLdateXyearsAgoFromNow(int years) {\r\n    return new Date(DateUtil.getDateXyearsAgoFromNow(years).getTime());\r\n}'),(23,'int days','int',0,7,'edu.ncsu.csc.itrust.DateUtil',39,'edu.ncsu.csc.itrust.DateUtil.getDateXDaysAgoFromNow(int)',0,'/**\r\n * Returns the date a certain number of days ago\r\n *\r\n * @param days\r\n * 		how many days ago\r\n * @return the date it was however many days ago\r\n */\r\npublic static Date getDateXDaysAgoFromNow(int days) {\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.DAY_OF_YEAR, (-days));\r\n    return cal.getTime();\r\n}'),(24,'int days','int',0,7,'edu.ncsu.csc.itrust.DateUtil',41,'edu.ncsu.csc.itrust.DateUtil.getSQLdateXDaysAgoFromNow(int)',0,'/**\r\n * Returns the date a certain number of days ago\r\n *\r\n * @param days\r\n * 		how many days ago\r\n * @return the date it was however many days ago\r\n */\r\npublic static Date getSQLdateXDaysAgoFromNow(int days) {\r\n    return new Date(DateUtil.getDateXDaysAgoFromNow(days).getTime());\r\n}'),(25,'Date month1','java.sql.Date',0,7,'edu.ncsu.csc.itrust.DateUtil',44,'edu.ncsu.csc.itrust.DateUtil.setSQLMonthRange(java.sql.Date,int,int,java.sql.Date,int,int)',0,'/**\r\n * <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of\r\n * month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -\r\n * yearsAgo2/monthValue2/&lt;last day of month2&gt;\r\n *\r\n * @param month1\r\n * 		First sql.Date object to be set\r\n * @param monthValue1\r\n * 		\r\n * @param yearsAgo1\r\n * 		\r\n * @param month2\r\n * 		Second sql.Date object to be set\r\n * @param monthValue2\r\n * 		\r\n * @param yearsAgo2\r\n * 		\r\n */\r\npublic static void setSQLMonthRange(Date month1, int monthValue1, int yearsAgo1, Date month2, int monthValue2, int yearsAgo2) {\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-yearsAgo1));\r\n    cal.set(Calendar.MONTH, monthValue1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 1);\r\n    month1.setTime(cal.getTimeInMillis());\r\n    cal.add(Calendar.YEAR, yearsAgo1);\r\n    cal.add(Calendar.YEAR, (-yearsAgo2));\r\n    cal.set(Calendar.MONTH, monthValue2);\r\n    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\r\n    month2.setTime(cal.getTimeInMillis());\r\n}'),(26,'int monthValue1','int',0,7,'edu.ncsu.csc.itrust.DateUtil',44,'edu.ncsu.csc.itrust.DateUtil.setSQLMonthRange(java.sql.Date,int,int,java.sql.Date,int,int)',0,'/**\r\n * <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of\r\n * month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -\r\n * yearsAgo2/monthValue2/&lt;last day of month2&gt;\r\n *\r\n * @param month1\r\n * 		First sql.Date object to be set\r\n * @param monthValue1\r\n * 		\r\n * @param yearsAgo1\r\n * 		\r\n * @param month2\r\n * 		Second sql.Date object to be set\r\n * @param monthValue2\r\n * 		\r\n * @param yearsAgo2\r\n * 		\r\n */\r\npublic static void setSQLMonthRange(Date month1, int monthValue1, int yearsAgo1, Date month2, int monthValue2, int yearsAgo2) {\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-yearsAgo1));\r\n    cal.set(Calendar.MONTH, monthValue1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 1);\r\n    month1.setTime(cal.getTimeInMillis());\r\n    cal.add(Calendar.YEAR, yearsAgo1);\r\n    cal.add(Calendar.YEAR, (-yearsAgo2));\r\n    cal.set(Calendar.MONTH, monthValue2);\r\n    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\r\n    month2.setTime(cal.getTimeInMillis());\r\n}'),(27,'int yearsAgo1','int',0,7,'edu.ncsu.csc.itrust.DateUtil',44,'edu.ncsu.csc.itrust.DateUtil.setSQLMonthRange(java.sql.Date,int,int,java.sql.Date,int,int)',0,'/**\r\n * <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of\r\n * month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -\r\n * yearsAgo2/monthValue2/&lt;last day of month2&gt;\r\n *\r\n * @param month1\r\n * 		First sql.Date object to be set\r\n * @param monthValue1\r\n * 		\r\n * @param yearsAgo1\r\n * 		\r\n * @param month2\r\n * 		Second sql.Date object to be set\r\n * @param monthValue2\r\n * 		\r\n * @param yearsAgo2\r\n * 		\r\n */\r\npublic static void setSQLMonthRange(Date month1, int monthValue1, int yearsAgo1, Date month2, int monthValue2, int yearsAgo2) {\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-yearsAgo1));\r\n    cal.set(Calendar.MONTH, monthValue1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 1);\r\n    month1.setTime(cal.getTimeInMillis());\r\n    cal.add(Calendar.YEAR, yearsAgo1);\r\n    cal.add(Calendar.YEAR, (-yearsAgo2));\r\n    cal.set(Calendar.MONTH, monthValue2);\r\n    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\r\n    month2.setTime(cal.getTimeInMillis());\r\n}'),(28,'Date month2','java.sql.Date',0,7,'edu.ncsu.csc.itrust.DateUtil',44,'edu.ncsu.csc.itrust.DateUtil.setSQLMonthRange(java.sql.Date,int,int,java.sql.Date,int,int)',0,'/**\r\n * <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of\r\n * month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -\r\n * yearsAgo2/monthValue2/&lt;last day of month2&gt;\r\n *\r\n * @param month1\r\n * 		First sql.Date object to be set\r\n * @param monthValue1\r\n * 		\r\n * @param yearsAgo1\r\n * 		\r\n * @param month2\r\n * 		Second sql.Date object to be set\r\n * @param monthValue2\r\n * 		\r\n * @param yearsAgo2\r\n * 		\r\n */\r\npublic static void setSQLMonthRange(Date month1, int monthValue1, int yearsAgo1, Date month2, int monthValue2, int yearsAgo2) {\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-yearsAgo1));\r\n    cal.set(Calendar.MONTH, monthValue1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 1);\r\n    month1.setTime(cal.getTimeInMillis());\r\n    cal.add(Calendar.YEAR, yearsAgo1);\r\n    cal.add(Calendar.YEAR, (-yearsAgo2));\r\n    cal.set(Calendar.MONTH, monthValue2);\r\n    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\r\n    month2.setTime(cal.getTimeInMillis());\r\n}'),(29,'int monthValue2','int',0,7,'edu.ncsu.csc.itrust.DateUtil',44,'edu.ncsu.csc.itrust.DateUtil.setSQLMonthRange(java.sql.Date,int,int,java.sql.Date,int,int)',0,'/**\r\n * <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of\r\n * month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -\r\n * yearsAgo2/monthValue2/&lt;last day of month2&gt;\r\n *\r\n * @param month1\r\n * 		First sql.Date object to be set\r\n * @param monthValue1\r\n * 		\r\n * @param yearsAgo1\r\n * 		\r\n * @param month2\r\n * 		Second sql.Date object to be set\r\n * @param monthValue2\r\n * 		\r\n * @param yearsAgo2\r\n * 		\r\n */\r\npublic static void setSQLMonthRange(Date month1, int monthValue1, int yearsAgo1, Date month2, int monthValue2, int yearsAgo2) {\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-yearsAgo1));\r\n    cal.set(Calendar.MONTH, monthValue1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 1);\r\n    month1.setTime(cal.getTimeInMillis());\r\n    cal.add(Calendar.YEAR, yearsAgo1);\r\n    cal.add(Calendar.YEAR, (-yearsAgo2));\r\n    cal.set(Calendar.MONTH, monthValue2);\r\n    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\r\n    month2.setTime(cal.getTimeInMillis());\r\n}'),(30,'int yearsAgo2','int',0,7,'edu.ncsu.csc.itrust.DateUtil',44,'edu.ncsu.csc.itrust.DateUtil.setSQLMonthRange(java.sql.Date,int,int,java.sql.Date,int,int)',0,'/**\r\n * <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of\r\n * month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -\r\n * yearsAgo2/monthValue2/&lt;last day of month2&gt;\r\n *\r\n * @param month1\r\n * 		First sql.Date object to be set\r\n * @param monthValue1\r\n * 		\r\n * @param yearsAgo1\r\n * 		\r\n * @param month2\r\n * 		Second sql.Date object to be set\r\n * @param monthValue2\r\n * 		\r\n * @param yearsAgo2\r\n * 		\r\n */\r\npublic static void setSQLMonthRange(Date month1, int monthValue1, int yearsAgo1, Date month2, int monthValue2, int yearsAgo2) {\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-yearsAgo1));\r\n    cal.set(Calendar.MONTH, monthValue1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 1);\r\n    month1.setTime(cal.getTimeInMillis());\r\n    cal.add(Calendar.YEAR, yearsAgo1);\r\n    cal.add(Calendar.YEAR, (-yearsAgo2));\r\n    cal.set(Calendar.MONTH, monthValue2);\r\n    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\r\n    month2.setTime(cal.getTimeInMillis());\r\n}'),(31,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,9,'edu.ncsu.csc.itrust.EmailUtil',51,'edu.ncsu.csc.itrust.EmailUtil.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public EmailUtil(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(32,'Email email','edu.ncsu.csc.itrust.beans.Email',251,9,'edu.ncsu.csc.itrust.EmailUtil',52,'edu.ncsu.csc.itrust.EmailUtil.sendEmail(edu.ncsu.csc.itrust.beans.Email)',0,'// DO NOT SEND REAL EMAILS!!!!!\r\n// Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious.\r\n// If you want to know how to send emails from Java, just Google it on your own time.\r\npublic void sendEmail(Email email) throws DBException {\r\n    factory.getFakeEmailDAO().sendEmailRecord(email);\r\n}'),(33,'String input','java.lang.String',0,12,'edu.ncsu.csc.itrust.HtmlEncoder',59,'edu.ncsu.csc.itrust.HtmlEncoder.encode(java.lang.String)',0,'/**\r\n * Escapes a few key HTML characters\r\n *\r\n * @param input\r\n * 		String to check and escape\r\n * @return \r\n */\r\npublic static String encode(String input) {\r\n    if (input == null)\r\n        return input;\r\n\r\n    String str = input.replaceAll(\"<\", \"&lt;\");\r\n    str = str.replaceAll(\">\", \"&gt;\");\r\n    str = str.replaceAll(\"\n\", \"<br />\");\r\n    return str;\r\n}'),(34,'String input','java.lang.String',0,12,'edu.ncsu.csc.itrust.HtmlEncoder',58,'edu.ncsu.csc.itrust.HtmlEncoder.URLOnSite(java.lang.String)',0,'/**\r\n * Checks URL\r\n *\r\n * @param input\r\n * 		URL to check\r\n * @return false if the input contains http://, true otherwise\r\n */\r\npublic static boolean URLOnSite(String input) {\r\n    return !(input.contains(\"http://\"));\r\n}'),(35,'String key','java.lang.String',0,16,'edu.ncsu.csc.itrust.Messages',69,'edu.ncsu.csc.itrust.Messages.getString(java.lang.String)',0,'public static String getString(String key) {\r\n    try {\r\n        return Messages.RESOURCE_BUNDLE.getString(key);\r\n    } catch (MissingResourceException e) {\r\n        return (! + key) + !;\r\n    }\r\n}'),(36,'Map params','java.util.Map',0,18,'edu.ncsu.csc.itrust.ParameterUtil',73,'edu.ncsu.csc.itrust.ParameterUtil.convertMap(java.util.Map)',0,'/**\r\n * Provides a utility method that converts the \"Map\" from the JSP container to a type-checked hashmap\r\n *\r\n * @param params\r\n * 		Map to convert\r\n * @return converted Map\r\n */\r\npublic static HashMap<String, String> convertMap(Map params) {\r\n    HashMap<String, String> myMap = new HashMap<String, String>();\r\n    for (Object key : params.keySet()) {\r\n        String[] value = ((String[]) (params.get(key)));\r\n        if (value != null)\r\n            myMap.put(key.toString(), value[0]);\r\n        else\r\n            myMap.put(key.toString(), null);\r\n\r\n    }\r\n    return myMap;\r\n}'),(37,'ArrayList<String> headers','java.util.ArrayList',0,21,'edu.ncsu.csc.itrust.XmlGenerator',79,'edu.ncsu.csc.itrust.XmlGenerator.generateXml(java.util.ArrayList,java.util.ArrayList)',0,'/* public XmlGenerator(){\n\n\n}\n */\r\n/**\r\n * generateXml converts the headers and data into a xml file\r\n *\r\n * @param headers\r\n * 		- Column names\r\n * @param Data\r\n * 		- Data for columns\r\n * @return - Xml document\r\n */\r\npublic static Document generateXml(ArrayList<String> headers, ArrayList<ArrayList<String>> Data) {\r\n    Document report;\r\n    try {\r\n        // sorced from http://stackoverflow.com/questions/8865099/xml-file-generator-in-java\r\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n        DocumentBuilder builder = factory.newDocumentBuilder();\r\n        // new document\r\n        report = builder.newDocument();\r\n        // head element\r\n        Element head = report.createElement(\"PatientReport\");\r\n        report.appendChild(head);\r\n        // assumed has document builder and factory\r\n        // for each top level element\r\n        for (int x = 0; x < (Data.size()); x++) {\r\n            // makes format <Patient name=\"blah\" age=\"xx\" birthdate=\"\"/> etc...\r\n            Element patient = report.createElement(\"Patient\");\r\n            for (int y = 0; (y < (Data.get(x).size())) && (y < (headers.size())); y++) {\r\n                patient.setAttribute(XmlGenerator.parse(headers.get(y)), XmlGenerator.parse(Data.get(x).get(y)));\r\n            }\r\n            head.appendChild(patient);\r\n        }\r\n        // for each first level element, loop through second level and\r\n    } catch (ParserConfigurationException e) {\r\n        // TODO log error\r\n        return null;\r\n    }\r\n    return report;\r\n}'),(38,'ArrayList<ArrayList<String>> Data','java.util.ArrayList',0,21,'edu.ncsu.csc.itrust.XmlGenerator',79,'edu.ncsu.csc.itrust.XmlGenerator.generateXml(java.util.ArrayList,java.util.ArrayList)',0,'/* public XmlGenerator(){\n\n\n}\n */\r\n/**\r\n * generateXml converts the headers and data into a xml file\r\n *\r\n * @param headers\r\n * 		- Column names\r\n * @param Data\r\n * 		- Data for columns\r\n * @return - Xml document\r\n */\r\npublic static Document generateXml(ArrayList<String> headers, ArrayList<ArrayList<String>> Data) {\r\n    Document report;\r\n    try {\r\n        // sorced from http://stackoverflow.com/questions/8865099/xml-file-generator-in-java\r\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n        DocumentBuilder builder = factory.newDocumentBuilder();\r\n        // new document\r\n        report = builder.newDocument();\r\n        // head element\r\n        Element head = report.createElement(\"PatientReport\");\r\n        report.appendChild(head);\r\n        // assumed has document builder and factory\r\n        // for each top level element\r\n        for (int x = 0; x < (Data.size()); x++) {\r\n            // makes format <Patient name=\"blah\" age=\"xx\" birthdate=\"\"/> etc...\r\n            Element patient = report.createElement(\"Patient\");\r\n            for (int y = 0; (y < (Data.get(x).size())) && (y < (headers.size())); y++) {\r\n                patient.setAttribute(XmlGenerator.parse(headers.get(y)), XmlGenerator.parse(Data.get(x).get(y)));\r\n            }\r\n            head.appendChild(patient);\r\n        }\r\n        // for each first level element, loop through second level and\r\n    } catch (ParserConfigurationException e) {\r\n        // TODO log error\r\n        return null;\r\n    }\r\n    return report;\r\n}'),(39,'String s','java.lang.String',0,21,'edu.ncsu.csc.itrust.XmlGenerator',80,'edu.ncsu.csc.itrust.XmlGenerator.parse(java.lang.String)',0,'/**\r\n * Parses the string for a xml compliant one\r\n *\r\n * @param s\r\n * 		- The string to be fixed\r\n * @return - The xml compliant string\r\n */\r\nprivate static String parse(String s) {\r\n    return s.replaceAll(\" \", \"_\").replaceAll(\"#\", \"NUMBER\").replaceAll(\"\", \"\");\r\n}'),(40,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',84,'edu.ncsu.csc.itrust.action.ActivityFeedAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving the logs.\r\n */\r\npublic ActivityFeedAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}'),(41,'long loggedInMID','long',0,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',84,'edu.ncsu.csc.itrust.action.ActivityFeedAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving the logs.\r\n */\r\npublic ActivityFeedAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}'),(42,'Date time','java.util.Date',0,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',86,'edu.ncsu.csc.itrust.action.ActivityFeedAction.getTransactions(java.util.Date,int)',0,'/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param n\r\n * 		Number of \"pages\" of 20 log entries to retrieve.\r\n * @return list of 20*n TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<TransactionBean> getTransactions(Date time, int n) throws DBException, FormValidationException {\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(loggedInMID);\r\n    // user has either 0 or 1 DLHCPs. Get one if exists so it can be filtered from results\r\n    long dlhcpID = -1;\r\n    if (!(dlhcps.isEmpty()))\r\n        dlhcpID = dlhcps.get(0).getMID();\r\n\r\n    List<TransactionBean> fullList = transDAO.getTransactionsAffecting(loggedInMID, dlhcpID, time, ((20 * n) + 1));\r\n    return fullList;\r\n}'),(43,'int n','int',0,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',86,'edu.ncsu.csc.itrust.action.ActivityFeedAction.getTransactions(java.util.Date,int)',0,'/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param n\r\n * 		Number of \"pages\" of 20 log entries to retrieve.\r\n * @return list of 20*n TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<TransactionBean> getTransactions(Date time, int n) throws DBException, FormValidationException {\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(loggedInMID);\r\n    // user has either 0 or 1 DLHCPs. Get one if exists so it can be filtered from results\r\n    long dlhcpID = -1;\r\n    if (!(dlhcps.isEmpty()))\r\n        dlhcpID = dlhcps.get(0).getMID();\r\n\r\n    List<TransactionBean> fullList = transDAO.getTransactionsAffecting(loggedInMID, dlhcpID, time, ((20 * n) + 1));\r\n    return fullList;\r\n}'),(44,'Date d','java.util.Date',0,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',87,'edu.ncsu.csc.itrust.action.ActivityFeedAction.recent(java.util.Date)',0,'/**\r\n * Returns an indicator of the number of days between the current date and the date passed\r\n * as a parameter. Returns 0 if the dates are on the same day, 1 if the date passed in is\r\n * \"yesterday\", 2 otherwise.\r\n *\r\n * @param d1\r\n * 		First date\r\n * @param d2\r\n * 		Second date\r\n * @return 0, 1, or 2, depending on the difference in the dates.\r\n */\r\npublic static int recent(Date d) {\r\n    int oneDay = ((24 * 60) * 60) * 1000;\r\n    DateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    Date rightNow = new Date();\r\n    if (sdf.format(rightNow).equals(sdf.format(d)))\r\n        return 0;\r\n\r\n    d.setTime(((d.getTime()) + oneDay));\r\n    if (sdf.format(rightNow).equals(sdf.format(d)))\r\n        return 1;\r\n\r\n    return 2;\r\n}'),(45,'String actor','java.lang.String',0,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',85,'edu.ncsu.csc.itrust.action.ActivityFeedAction.getMessageAsSentence(java.lang.String,java.sql.Timestamp,edu.ncsu.csc.itrust.enums.TransactionType)',0,'/**\r\n * Pulls Action Phrase from the associated TransactionType Enum\r\n * Forms an English sentence with actor, action, and timestamp.\r\n *\r\n * @param actor\r\n * 		\r\n * @param timestamp\r\n * 		\r\n * @param code\r\n * 		\r\n * @return \r\n */\r\npublic String getMessageAsSentence(String actor, Timestamp timestamp, TransactionType code) {\r\n    String result = actor + \" \";\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if (((code.getCode()) == (type.getCode())) && (type.isPatientViewable()))\r\n            result += type.getActionPhrase();\r\n\r\n    }\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\"h:mma.\");\r\n    switch (ActivityFeedAction.recent(new Date(timestamp.getTime()))) {\r\n        case 0 :\r\n            result += \" today\";\r\n            break;\r\n        case 1 :\r\n            result += \" yesterday\";\r\n            break;\r\n        case 2 :\r\n            DateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            result += \" on \" + (sdf.format(new Date(timestamp.getTime())));\r\n            break;\r\n    }\r\n    result += \" at \" + (formatter.format(timestamp));\r\n    return replaceNameWithYou(result);\r\n}'),(46,'Timestamp timestamp','java.sql.Timestamp',0,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',85,'edu.ncsu.csc.itrust.action.ActivityFeedAction.getMessageAsSentence(java.lang.String,java.sql.Timestamp,edu.ncsu.csc.itrust.enums.TransactionType)',0,'/**\r\n * Pulls Action Phrase from the associated TransactionType Enum\r\n * Forms an English sentence with actor, action, and timestamp.\r\n *\r\n * @param actor\r\n * 		\r\n * @param timestamp\r\n * 		\r\n * @param code\r\n * 		\r\n * @return \r\n */\r\npublic String getMessageAsSentence(String actor, Timestamp timestamp, TransactionType code) {\r\n    String result = actor + \" \";\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if (((code.getCode()) == (type.getCode())) && (type.isPatientViewable()))\r\n            result += type.getActionPhrase();\r\n\r\n    }\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\"h:mma.\");\r\n    switch (ActivityFeedAction.recent(new Date(timestamp.getTime()))) {\r\n        case 0 :\r\n            result += \" today\";\r\n            break;\r\n        case 1 :\r\n            result += \" yesterday\";\r\n            break;\r\n        case 2 :\r\n            DateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            result += \" on \" + (sdf.format(new Date(timestamp.getTime())));\r\n            break;\r\n    }\r\n    result += \" at \" + (formatter.format(timestamp));\r\n    return replaceNameWithYou(result);\r\n}'),(47,'TransactionType code','edu.ncsu.csc.itrust.enums.TransactionType',490,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',85,'edu.ncsu.csc.itrust.action.ActivityFeedAction.getMessageAsSentence(java.lang.String,java.sql.Timestamp,edu.ncsu.csc.itrust.enums.TransactionType)',0,'/**\r\n * Pulls Action Phrase from the associated TransactionType Enum\r\n * Forms an English sentence with actor, action, and timestamp.\r\n *\r\n * @param actor\r\n * 		\r\n * @param timestamp\r\n * 		\r\n * @param code\r\n * 		\r\n * @return \r\n */\r\npublic String getMessageAsSentence(String actor, Timestamp timestamp, TransactionType code) {\r\n    String result = actor + \" \";\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if (((code.getCode()) == (type.getCode())) && (type.isPatientViewable()))\r\n            result += type.getActionPhrase();\r\n\r\n    }\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\"h:mma.\");\r\n    switch (ActivityFeedAction.recent(new Date(timestamp.getTime()))) {\r\n        case 0 :\r\n            result += \" today\";\r\n            break;\r\n        case 1 :\r\n            result += \" yesterday\";\r\n            break;\r\n        case 2 :\r\n            DateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            result += \" on \" + (sdf.format(new Date(timestamp.getTime())));\r\n            break;\r\n    }\r\n    result += \" at \" + (formatter.format(timestamp));\r\n    return replaceNameWithYou(result);\r\n}'),(48,'String activity','java.lang.String',0,23,'edu.ncsu.csc.itrust.action.ActivityFeedAction',88,'edu.ncsu.csc.itrust.action.ActivityFeedAction.replaceNameWithYou(java.lang.String)',0,'private String replaceNameWithYou(String activity) {\r\n    try {\r\n        return activity.replace(authDAO.getUserName(loggedInMID), \"You\");\r\n    } catch (Exception e) {\r\n        return activity;\r\n    }\r\n}'),(49,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,25,'edu.ncsu.csc.itrust.action.AddApptAction',94,'edu.ncsu.csc.itrust.action.AddApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public AddApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}'),(50,'long loggedInMID','long',0,25,'edu.ncsu.csc.itrust.action.AddApptAction',94,'edu.ncsu.csc.itrust.action.AddApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public AddApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}'),(51,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,25,'edu.ncsu.csc.itrust.action.AddApptAction',95,'edu.ncsu.csc.itrust.action.AddApptAction.addAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'public String addAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis()))) {\r\n        return (\"The scheduled date of this Appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n    }\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.scheduleAppt(appt);\r\n        return (((\"Success: \" + (appt.getApptType())) + \" for \") + (appt.getDate())) + \" added\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(52,'boolean ignoreConflicts','boolean',0,25,'edu.ncsu.csc.itrust.action.AddApptAction',95,'edu.ncsu.csc.itrust.action.AddApptAction.addAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'public String addAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis()))) {\r\n        return (\"The scheduled date of this Appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n    }\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.scheduleAppt(appt);\r\n        return (((\"Success: \" + (appt.getApptType())) + \" for \") + (appt.getDate())) + \" added\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(53,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',104,'edu.ncsu.csc.itrust.action.AddApptRequestAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public AddApptRequestAction(DAOFactory factory) {\r\n    aDAO = factory.getApptDAO();\r\n    arDAO = factory.getApptRequestDAO();\r\n    atDAO = factory.getApptTypeDAO();\r\n}'),(54,'ApptRequestBean bean','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',105,'edu.ncsu.csc.itrust.action.AddApptRequestAction.addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'public String addApptRequest(ApptRequestBean bean) throws SQLException {\r\n    List<ApptBean> conflicts = aDAO.getAllHCPConflictsForAppt(bean.getRequestedAppt().getHcp(), bean.getRequestedAppt());\r\n    if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n        return \"The appointment you requested conflicts with other existing appointments.\";\r\n    }\r\n    arDAO.addApptRequest(bean);\r\n    return \"Your appointment request has been saved and is pending.\";\r\n}'),(55,'int num','int',0,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',107,'edu.ncsu.csc.itrust.action.AddApptRequestAction.getNextAvailableAppts(int,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getNextAvailableAppts(int num, ApptBean bean) throws SQLException {\r\n    List<ApptBean> appts = new ArrayList<ApptBean>(num);\r\n    for (int i = 0; i < num; i++) {\r\n        ApptBean b = new ApptBean();\r\n        b.setApptType(bean.getApptType());\r\n        b.setHcp(bean.getHcp());\r\n        b.setPatient(bean.getPatient());\r\n        b.setDate(new Timestamp(bean.getDate().getTime()));\r\n        List<ApptBean> conflicts = null;\r\n        do {\r\n            conflicts = aDAO.getAllHCPConflictsForAppt(b.getHcp(), b);\r\n            if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n                ApptBean lastConflict = conflicts.get(((conflicts.size()) - 1));\r\n                Timestamp afterConflict = endTime(lastConflict);\r\n                b.setDate(afterConflict);\r\n            }\r\n        } while ((conflicts != null) && (!(conflicts.isEmpty())) );\r\n        appts.add(b);\r\n        Timestamp nextTime = endTime(b);\r\n        bean.setDate(nextTime);\r\n    }\r\n    return appts;\r\n}'),(56,'ApptBean bean','edu.ncsu.csc.itrust.beans.ApptBean',245,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',107,'edu.ncsu.csc.itrust.action.AddApptRequestAction.getNextAvailableAppts(int,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getNextAvailableAppts(int num, ApptBean bean) throws SQLException {\r\n    List<ApptBean> appts = new ArrayList<ApptBean>(num);\r\n    for (int i = 0; i < num; i++) {\r\n        ApptBean b = new ApptBean();\r\n        b.setApptType(bean.getApptType());\r\n        b.setHcp(bean.getHcp());\r\n        b.setPatient(bean.getPatient());\r\n        b.setDate(new Timestamp(bean.getDate().getTime()));\r\n        List<ApptBean> conflicts = null;\r\n        do {\r\n            conflicts = aDAO.getAllHCPConflictsForAppt(b.getHcp(), b);\r\n            if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n                ApptBean lastConflict = conflicts.get(((conflicts.size()) - 1));\r\n                Timestamp afterConflict = endTime(lastConflict);\r\n                b.setDate(afterConflict);\r\n            }\r\n        } while ((conflicts != null) && (!(conflicts.isEmpty())) );\r\n        appts.add(b);\r\n        Timestamp nextTime = endTime(b);\r\n        bean.setDate(nextTime);\r\n    }\r\n    return appts;\r\n}'),(57,'ApptBean bean','edu.ncsu.csc.itrust.beans.ApptBean',245,27,'edu.ncsu.csc.itrust.action.AddApptRequestAction',106,'edu.ncsu.csc.itrust.action.AddApptRequestAction.endTime(edu.ncsu.csc.itrust.beans.ApptBean)',0,'private Timestamp endTime(ApptBean bean) throws SQLException {\r\n    Timestamp d = new Timestamp(bean.getDate().getTime());\r\n    ApptTypeBean type = atDAO.getApptType(bean.getApptType());\r\n    d.setTime(((d.getTime()) + (((type.getDuration()) * 60) * 1000)));\r\n    return d;\r\n}'),(58,'AddDrugListAction.DrugStrategy uploadStrategy','edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy',29,32,'edu.ncsu.csc.itrust.action.AddDrugListAction',112,'edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}'),(59,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,32,'edu.ncsu.csc.itrust.action.AddDrugListAction',112,'edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}'),(60,'EventLoggingAction loggingAction','edu.ncsu.csc.itrust.action.EventLoggingAction',100,32,'edu.ncsu.csc.itrust.action.AddDrugListAction',112,'edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}'),(61,'long loggedInMID','long',0,32,'edu.ncsu.csc.itrust.action.AddDrugListAction',112,'edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}'),(62,'InputStream fileContent','java.io.InputStream',0,32,'edu.ncsu.csc.itrust.action.AddDrugListAction',114,'edu.ncsu.csc.itrust.action.AddDrugListAction.LoadFile(java.io.InputStream)',0,'/**\r\n * Loads the given file input stream into the drug database.\r\n *\r\n * @param fileContent\r\n * 		\r\n * @throws IOException\r\n * 		\r\n */\r\npublic void LoadFile(InputStream fileContent) throws DBException, IOException {\r\n    strategy.LoadFile(fileContent, factory, loggingAction, loggedInMID);\r\n}'),(63,'InputStream fileContent','java.io.InputStream',0,29,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy',115,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;'),(64,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,29,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy',115,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;'),(65,'EventLoggingAction loggingAction','edu.ncsu.csc.itrust.action.EventLoggingAction',100,29,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy',115,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;'),(66,'long loggedInMID','long',0,29,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy',115,'edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;'),(67,'InputStream fileContent','java.io.InputStream',0,31,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy',119,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}'),(68,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,31,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy',119,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}'),(69,'EventLoggingAction loggingAction','edu.ncsu.csc.itrust.action.EventLoggingAction',100,31,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy',119,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}'),(70,'long loggedInMID','long',0,31,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy',119,'edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}'),(71,'InputStream fileContent','java.io.InputStream',0,30,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy',117,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}'),(72,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,30,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy',117,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}'),(73,'EventLoggingAction loggingAction','edu.ncsu.csc.itrust.action.EventLoggingAction',100,30,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy',117,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}'),(74,'long loggedInMID','long',0,30,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy',117,'edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)',0,'public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"	\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}'),(75,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,34,'edu.ncsu.csc.itrust.action.AddERespAction',124,'edu.ncsu.csc.itrust.action.AddERespAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddERespAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(76,'long loggedInMID','long',0,34,'edu.ncsu.csc.itrust.action.AddERespAction',124,'edu.ncsu.csc.itrust.action.AddERespAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddERespAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(77,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,34,'edu.ncsu.csc.itrust.action.AddERespAction',125,'edu.ncsu.csc.itrust.action.AddERespAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.  Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.ER);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.ER, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(78,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,36,'edu.ncsu.csc.itrust.action.AddHCPAction',129,'edu.ncsu.csc.itrust.action.AddHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(79,'long loggedInMID','long',0,36,'edu.ncsu.csc.itrust.action.AddHCPAction',129,'edu.ncsu.csc.itrust.action.AddHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(80,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,36,'edu.ncsu.csc.itrust.action.AddHCPAction',130,'edu.ncsu.csc.itrust.action.AddHCPAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.HCP);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.HCP, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(81,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,38,'edu.ncsu.csc.itrust.action.AddLTAction',134,'edu.ncsu.csc.itrust.action.AddLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n */\r\npublic AddLTAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(82,'long loggedInMID','long',0,38,'edu.ncsu.csc.itrust.action.AddLTAction',134,'edu.ncsu.csc.itrust.action.AddLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n */\r\npublic AddLTAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(83,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,38,'edu.ncsu.csc.itrust.action.AddLTAction',135,'edu.ncsu.csc.itrust.action.AddLTAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.LT);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.LT, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(84,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,40,'edu.ncsu.csc.itrust.action.AddOfficeVisitAction',139,'edu.ncsu.csc.itrust.action.AddOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		Patient ID to be validated by the superclass, {@link PatientBaseAction}\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic AddOfficeVisitAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.factory = factory;\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n}'),(85,'String pidString','java.lang.String',0,40,'edu.ncsu.csc.itrust.action.AddOfficeVisitAction',139,'edu.ncsu.csc.itrust.action.AddOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		Patient ID to be validated by the superclass, {@link PatientBaseAction}\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic AddOfficeVisitAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.factory = factory;\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n}'),(86,'long loggedInMID','long',0,40,'edu.ncsu.csc.itrust.action.AddOfficeVisitAction',140,'edu.ncsu.csc.itrust.action.AddOfficeVisitAction.addEmptyOfficeVisit(long)',0,'/**\r\n * Adds an empty office visit\r\n *\r\n * @param loggedInMID\r\n * 		For logging purposes\r\n * @return Office visit ID (primary key) of the new office visit\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long addEmptyOfficeVisit(long loggedInMID) throws DBException {\r\n    OfficeVisitBean ov = new OfficeVisitBean();\r\n    ov.setHcpID(loggedInMID);\r\n    ov.setPatientID(pid);\r\n    long visitID = ovDAO.add(ov);\r\n    return visitID;\r\n}'),(87,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,42,'edu.ncsu.csc.itrust.action.AddPHAAction',148,'edu.ncsu.csc.itrust.action.AddPHAAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddPHAAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(88,'long loggedInMID','long',0,42,'edu.ncsu.csc.itrust.action.AddPHAAction',148,'edu.ncsu.csc.itrust.action.AddPHAAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddPHAAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(89,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,42,'edu.ncsu.csc.itrust.action.AddPHAAction',149,'edu.ncsu.csc.itrust.action.AddPHAAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.PHA);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.PHA, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(90,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,44,'edu.ncsu.csc.itrust.action.AddPatientAction',153,'edu.ncsu.csc.itrust.action.AddPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Just the factory and logged in MID\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n */\r\npublic AddPatientAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(91,'long loggedInMID','long',0,44,'edu.ncsu.csc.itrust.action.AddPatientAction',153,'edu.ncsu.csc.itrust.action.AddPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Just the factory and logged in MID\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n */\r\npublic AddPatientAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(92,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,44,'edu.ncsu.csc.itrust.action.AddPatientAction',154,'edu.ncsu.csc.itrust.action.AddPatientAction.addPatient(edu.ncsu.csc.itrust.beans.PatientBean)',0,'/**\r\n * Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.\r\n *\r\n * @return the new MID of the patient\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic long addPatient(PatientBean p) throws DBException, FormValidationException {\r\n    new AddPatientValidator().validate(p);\r\n    long newMID = patientDAO.addEmptyPatient();\r\n    p.setMID(newMID);\r\n    String pwd = authDAO.addUser(newMID, Role.PATIENT, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n    return newMID;\r\n}'),(93,'InputStream CSVStream','java.io.InputStream',0,46,'edu.ncsu.csc.itrust.action.AddPatientFileAction',158,'edu.ncsu.csc.itrust.action.AddPatientFileAction.-init-(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Accepts the DAO factory and the CSV stream from the view and parses it.\r\n *\r\n * @param factory\r\n * 		The DAO factory\r\n * @param loggedInMID\r\n * 		The MID of the HCP\r\n * @param CSVStream\r\n * 		The CSV stream uploaded by the user\r\n * @throws CSVFormatException\r\n * 		\r\n * @throws AddPatientFileExceptionTest\r\n * 		\r\n */\r\npublic AddPatientFileAction(InputStream CSVStream, DAOFactory factory, long loggedInMID) throws AddPatientFileException, CSVFormatException {\r\n    if (factory != null) {\r\n        this.patientDAO = factory.getPatientDAO();\r\n        this.loggedInMID = loggedInMID;\r\n        this.authDAO = factory.getAuthDAO();\r\n    }\r\n    CSVParser parser = new CSVParser(CSVStream);\r\n    CSVHeader = parser.getHeader();\r\n    CSVData = parser.getData();\r\n    errors = parser.getErrors();\r\n    buildMappings(CSVHeader);\r\n    try {\r\n        createPatients();\r\n    } catch (DBException e) {\r\n        throw new AddPatientFileException(\"Database error while adding new patients!\");\r\n    }\r\n}'),(94,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,46,'edu.ncsu.csc.itrust.action.AddPatientFileAction',158,'edu.ncsu.csc.itrust.action.AddPatientFileAction.-init-(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Accepts the DAO factory and the CSV stream from the view and parses it.\r\n *\r\n * @param factory\r\n * 		The DAO factory\r\n * @param loggedInMID\r\n * 		The MID of the HCP\r\n * @param CSVStream\r\n * 		The CSV stream uploaded by the user\r\n * @throws CSVFormatException\r\n * 		\r\n * @throws AddPatientFileExceptionTest\r\n * 		\r\n */\r\npublic AddPatientFileAction(InputStream CSVStream, DAOFactory factory, long loggedInMID) throws AddPatientFileException, CSVFormatException {\r\n    if (factory != null) {\r\n        this.patientDAO = factory.getPatientDAO();\r\n        this.loggedInMID = loggedInMID;\r\n        this.authDAO = factory.getAuthDAO();\r\n    }\r\n    CSVParser parser = new CSVParser(CSVStream);\r\n    CSVHeader = parser.getHeader();\r\n    CSVData = parser.getData();\r\n    errors = parser.getErrors();\r\n    buildMappings(CSVHeader);\r\n    try {\r\n        createPatients();\r\n    } catch (DBException e) {\r\n        throw new AddPatientFileException(\"Database error while adding new patients!\");\r\n    }\r\n}'),(95,'long loggedInMID','long',0,46,'edu.ncsu.csc.itrust.action.AddPatientFileAction',158,'edu.ncsu.csc.itrust.action.AddPatientFileAction.-init-(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Accepts the DAO factory and the CSV stream from the view and parses it.\r\n *\r\n * @param factory\r\n * 		The DAO factory\r\n * @param loggedInMID\r\n * 		The MID of the HCP\r\n * @param CSVStream\r\n * 		The CSV stream uploaded by the user\r\n * @throws CSVFormatException\r\n * 		\r\n * @throws AddPatientFileExceptionTest\r\n * 		\r\n */\r\npublic AddPatientFileAction(InputStream CSVStream, DAOFactory factory, long loggedInMID) throws AddPatientFileException, CSVFormatException {\r\n    if (factory != null) {\r\n        this.patientDAO = factory.getPatientDAO();\r\n        this.loggedInMID = loggedInMID;\r\n        this.authDAO = factory.getAuthDAO();\r\n    }\r\n    CSVParser parser = new CSVParser(CSVStream);\r\n    CSVHeader = parser.getHeader();\r\n    CSVData = parser.getData();\r\n    errors = parser.getErrors();\r\n    buildMappings(CSVHeader);\r\n    try {\r\n        createPatients();\r\n    } catch (DBException e) {\r\n        throw new AddPatientFileException(\"Database error while adding new patients!\");\r\n    }\r\n}'),(96,'ArrayList<String> CSVHeader','java.util.ArrayList',0,46,'edu.ncsu.csc.itrust.action.AddPatientFileAction',159,'edu.ncsu.csc.itrust.action.AddPatientFileAction.buildMappings(java.util.ArrayList)',0,'/**\r\n * Builds the mappings between the local arrays and the CSV file\r\n * Also checks for missing required, duplicate, and invalid fields\r\n *\r\n * @param CSVHeader\r\n * 		\r\n * @throws AddPatientFileExceptionTest\r\n * 		\r\n */\r\nprivate void buildMappings(ArrayList<String> CSVHeader) throws AddPatientFileException {\r\n    boolean valid;\r\n    for (int i = 0; i < (CSVHeader.size()); i++) {\r\n        valid = false;\r\n        for (int j = 0; j < (requiredFields.length); j++) {\r\n            if (CSVHeader.get(i).equalsIgnoreCase(requiredFields[j])) {\r\n                if ((requiredFieldsMapping[j]) == null) {\r\n                    valid = true;\r\n                    requiredFieldsMapping[j] = i;\r\n                } else {\r\n                    throw new AddPatientFileException(((\"Duplicate field \"\" + (CSVHeader.get(i))) + \"\"!\"));\r\n                }\r\n            }\r\n        }\r\n        for (int j = 0; j < (validFields.length); j++) {\r\n            if (CSVHeader.get(i).equalsIgnoreCase(validFields[j])) {\r\n                if ((validFieldsMapping[j]) == null) {\r\n                    valid = true;\r\n                    validFieldsMapping[j] = i;\r\n                } else {\r\n                    throw new AddPatientFileException(((\"Duplicate field \"\" + (CSVHeader.get(i))) + \"\"!\"));\r\n                }\r\n            }\r\n        }\r\n        if (valid == false) {\r\n            throw new AddPatientFileException(((\"Field \"\" + (CSVHeader.get(i))) + \"\" is invalid!\"));\r\n        }\r\n    }\r\n    for (int i = 0; i < (requiredFieldsMapping.length); i++) {\r\n        if ((requiredFieldsMapping[i]) == null) {\r\n            throw new AddPatientFileException(((\"Required field \"\" + (requiredFields[i])) + \"\" is missing!\"));\r\n        }\r\n    }\r\n}'),(97,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,48,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction',170,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person recording the patients data.\r\n * @param patientMID\r\n * 		The MID of the patient\r\n */\r\npublic AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientMID = patientMID;\r\n}'),(98,'long loggedInMID','long',0,48,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction',170,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person recording the patients data.\r\n * @param patientMID\r\n * 		The MID of the patient\r\n */\r\npublic AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientMID = patientMID;\r\n}'),(99,'long patientMID','long',0,48,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction',170,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person recording the patients data.\r\n * @param patientMID\r\n * 		The MID of the patient\r\n */\r\npublic AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientMID = patientMID;\r\n}'),(100,'long patientMID','long',0,48,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction',173,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.getTelemedicineBean(long)',0,'public List<TelemedicineBean> getTelemedicineBean(long patientMID) throws DBException {\r\n    return rmDAO.getTelemedicineBean(patientMID);\r\n}'),(101,'RemoteMonitoringDataBean rmdBean','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,48,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction',171,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.addRemoteMonitoringData(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)',0,'/**\r\n * Adds a patients telemedicine data to the database.\r\n *\r\n * @param weight\r\n * 		\r\n * @param pedometerReading\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addRemoteMonitoringData(RemoteMonitoringDataBean rmdBean) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(rmdBean);\r\n    String role;\r\n    if ((loggedInMID) == (patientMID)) {\r\n        role = \"self-reported\";\r\n    } else\r\n        if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")) {\r\n            role = \"case-manager\";\r\n        } else {\r\n            role = \"patient representative\";\r\n        }\r\n\r\n    // Store in DB\r\n    rmDAO.storePatientData(patientMID, rmdBean, role, loggedInMID);\r\n}'),(102,'long pid','long',0,48,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction',172,'edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.getPatientName(long)',0,'/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(long pid) throws DBException, iTrustException {\r\n    return authDAO.getUserName(pid);\r\n}'),(103,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,50,'edu.ncsu.csc.itrust.action.AddUAPAction',191,'edu.ncsu.csc.itrust.action.AddUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddUAPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(104,'long loggedInMID','long',0,50,'edu.ncsu.csc.itrust.action.AddUAPAction',191,'edu.ncsu.csc.itrust.action.AddUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * 		factory for creating the defaults.\r\n * @param loggedInMID\r\n * 		person currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddUAPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(105,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,50,'edu.ncsu.csc.itrust.action.AddUAPAction',192,'edu.ncsu.csc.itrust.action.AddUAPAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Adds the new user.  Event is logged.\r\n *\r\n * @param p\r\n * 		bean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.UAP);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.UAP, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}'),(106,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,52,'edu.ncsu.csc.itrust.action.ApptAction',196,'edu.ncsu.csc.itrust.action.ApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ApptAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptDAO = factory.getApptDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(107,'long loggedInMID','long',0,52,'edu.ncsu.csc.itrust.action.ApptAction',196,'edu.ncsu.csc.itrust.action.ApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ApptAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptDAO = factory.getApptDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(108,'long mid','long',0,52,'edu.ncsu.csc.itrust.action.ApptAction',198,'edu.ncsu.csc.itrust.action.ApptAction.getConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'/**\r\n * Driver method to get all appointment conflicts, used in jsp files\r\n *\r\n * @param mid\r\n * 		\r\n * @param appt\r\n * 		\r\n * @return \r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<ApptBean> getConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    return apptDAO.getAllHCPConflictsForAppt(mid, appt);\r\n}'),(109,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,52,'edu.ncsu.csc.itrust.action.ApptAction',198,'edu.ncsu.csc.itrust.action.ApptAction.getConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'/**\r\n * Driver method to get all appointment conflicts, used in jsp files\r\n *\r\n * @param mid\r\n * 		\r\n * @param appt\r\n * 		\r\n * @return \r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<ApptBean> getConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    return apptDAO.getAllHCPConflictsForAppt(mid, appt);\r\n}'),(110,'long mid','long',0,52,'edu.ncsu.csc.itrust.action.ApptAction',197,'edu.ncsu.csc.itrust.action.ApptAction.getAllConflicts(long)',0,'/**\r\n * returns a list of appointments that conflict for a given patient/hcp\r\n *\r\n * @param mid\r\n * 		the MID of the user\r\n * @return list of apptBeans\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<ApptBean> getAllConflicts(long mid) throws SQLException {\r\n    if (mid < 7000000000L)\r\n        return apptDAO.getAllConflictsForPatient(mid);\r\n    else\r\n        return apptDAO.getAllConflictsForDoctor(mid);\r\n\r\n}'),(111,'long mid','long',0,52,'edu.ncsu.csc.itrust.action.ApptAction',199,'edu.ncsu.csc.itrust.action.ApptAction.getName(long)',0,'/**\r\n * Gets a userss name from their MID\r\n *\r\n * @param mid\r\n * 		the MID of the user\r\n * @return the users name\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getName(long mid) throws iTrustException {\r\n    if (mid < 7000000000L)\r\n        return patientDAO.getName(mid);\r\n    else\r\n        return personnelDAO.getName(mid);\r\n\r\n}'),(112,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,54,'edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction',202,'edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Sets up defualts.\r\n *\r\n * @param factory\r\n * 		\r\n * @author Andy Meneely\r\n */\r\npublic ChangeSessionTimeoutAction(DAOFactory factory) {\r\n    this.accessDAO = factory.getAccessDAO();\r\n}'),(113,'String minuteString','java.lang.String',0,54,'edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction',203,'edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.changeSessionTimeout(java.lang.String)',0,'/**\r\n * Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO,\r\n * {@link AccessDAO}\r\n *\r\n * @param minuteString\r\n * 		Pass the number of minutes in the form of a string, greater than 0.\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @author Andy Meneely\r\n */\r\npublic void changeSessionTimeout(String minuteString) throws DBException, FormValidationException {\r\n    try {\r\n        Integer minutes = Integer.valueOf(minuteString);\r\n        if (minutes < 1)\r\n            throw new FormValidationException(\"Must be a number greater than 0\");\r\n\r\n        accessDAO.setSessionTimeoutMins(minutes);\r\n    } catch (NumberFormatException e) {\r\n        throw new FormValidationException(\"That is not a number\");\r\n    }\r\n}'),(114,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,56,'edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction',209,'edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n * @param pidString\r\n * 		The patient ID to be validated and used\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		This is thrown if a patient is added without any health records to be checked. Try to avoid\r\n * 		having this exception be thrown in a normal flow of events.\r\n * @author Andy Meneely\r\n */\r\npublic ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n}'),(115,'long loggedInMID','long',0,56,'edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction',209,'edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n * @param pidString\r\n * 		The patient ID to be validated and used\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		This is thrown if a patient is added without any health records to be checked. Try to avoid\r\n * 		having this exception be thrown in a normal flow of events.\r\n * @author Andy Meneely\r\n */\r\npublic ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n}'),(116,'String pidString','java.lang.String',0,56,'edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction',209,'edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n * @param pidString\r\n * 		The patient ID to be validated and used\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		This is thrown if a patient is added without any health records to be checked. Try to avoid\r\n * 		having this exception be thrown in a normal flow of events.\r\n * @author Andy Meneely\r\n */\r\npublic ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n}'),(117,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,58,'edu.ncsu.csc.itrust.action.DeclareHCPAction',216,'edu.ncsu.csc.itrust.action.DeclareHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAO factory to be used for generating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		This patient\r\n * @author Andy Meneely\r\n */\r\npublic DeclareHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(118,'long loggedInMID','long',0,58,'edu.ncsu.csc.itrust.action.DeclareHCPAction',216,'edu.ncsu.csc.itrust.action.DeclareHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAO factory to be used for generating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		This patient\r\n * @author Andy Meneely\r\n */\r\npublic DeclareHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(119,'String hcpStr','java.lang.String',0,58,'edu.ncsu.csc.itrust.action.DeclareHCPAction',217,'edu.ncsu.csc.itrust.action.DeclareHCPAction.declareHCP(java.lang.String)',0,'/**\r\n * Validate an HCPs MID and declare them, if possible\r\n *\r\n * @param hcpStr\r\n * 		The MID of an HCP to declare\r\n * @return A status message,\r\n * @throws iTrustException\r\n * 		\r\n * @author Andy Meneely\r\n */\r\npublic String declareHCP(String hcpStr) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(hcpStr);\r\n        if ((authDAO.getUserRole(hcpID)) != (Role.HCP))\r\n            throw new iTrustException(\"This user is not a licensed healthcare professional!\");\r\n\r\n        boolean confirm = patientDAO.declareHCP(loggedInMID, hcpID);\r\n        if (confirm) {\r\n            return \"HCP successfully declared\";\r\n        } else\r\n            return \"HCP not declared\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(120,'String input','java.lang.String',0,58,'edu.ncsu.csc.itrust.action.DeclareHCPAction',219,'edu.ncsu.csc.itrust.action.DeclareHCPAction.undeclareHCP(java.lang.String)',0,'/**\r\n * Validate an HCPs MID and undeclare them, if possible\r\n *\r\n * @param input\r\n * 		The MID of an HCP to undeclare\r\n * @return \r\n * @throws iTrustException\r\n * 		\r\n * @author Andy Meneely\r\n */\r\npublic String undeclareHCP(String input) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(input);\r\n        boolean confirm = patientDAO.undeclareHCP(loggedInMID, hcpID);\r\n        if (confirm) {\r\n            return \"HCP successfully undeclared\";\r\n        } else\r\n            return \"HCP not undeclared\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(121,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',232,'edu.ncsu.csc.itrust.action.DrugInteractionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAO factory to be used for generating the DAOs for this action.\r\n */\r\npublic DrugInteractionAction(DAOFactory factory, long loggedInMID) {\r\n    this.drugDAO = factory.getDrugInteractionDAO();\r\n    this.validator = new DrugInteractionValidator();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(122,'long loggedInMID','long',0,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',232,'edu.ncsu.csc.itrust.action.DrugInteractionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAO factory to be used for generating the DAOs for this action.\r\n */\r\npublic DrugInteractionAction(DAOFactory factory, long loggedInMID) {\r\n    this.drugDAO = factory.getDrugInteractionDAO();\r\n    this.validator = new DrugInteractionValidator();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(123,'String firstDrug','java.lang.String',0,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',235,'edu.ncsu.csc.itrust.action.DrugInteractionAction.reportInteraction(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Method to report an interaction\r\n *\r\n * @param firstDrug\r\n * 		\r\n * @param secondDrug\r\n * 		\r\n * @param description\r\n * 		\r\n * @return \r\n */\r\npublic String reportInteraction(String firstDrug, String secondDrug, String description) throws FormValidationException, iTrustException {\r\n    if (firstDrug.equals(secondDrug)) {\r\n        return \"Interactions can only be recorded between two different drugs\";\r\n    }\r\n    DrugInteractionBean drugInt = new DrugInteractionBean();\r\n    drugInt.setFirstDrug(firstDrug);\r\n    drugInt.setSecondDrug(secondDrug);\r\n    drugInt.setDescription(description);\r\n    try {\r\n        validator.validate(drugInt);\r\n        if (drugDAO.reportInteraction(firstDrug, secondDrug, description)) {\r\n            return \"Interaction recorded successfully\";\r\n        } else {\r\n            return \"Interaction could not be added\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(124,'String secondDrug','java.lang.String',0,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',235,'edu.ncsu.csc.itrust.action.DrugInteractionAction.reportInteraction(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Method to report an interaction\r\n *\r\n * @param firstDrug\r\n * 		\r\n * @param secondDrug\r\n * 		\r\n * @param description\r\n * 		\r\n * @return \r\n */\r\npublic String reportInteraction(String firstDrug, String secondDrug, String description) throws FormValidationException, iTrustException {\r\n    if (firstDrug.equals(secondDrug)) {\r\n        return \"Interactions can only be recorded between two different drugs\";\r\n    }\r\n    DrugInteractionBean drugInt = new DrugInteractionBean();\r\n    drugInt.setFirstDrug(firstDrug);\r\n    drugInt.setSecondDrug(secondDrug);\r\n    drugInt.setDescription(description);\r\n    try {\r\n        validator.validate(drugInt);\r\n        if (drugDAO.reportInteraction(firstDrug, secondDrug, description)) {\r\n            return \"Interaction recorded successfully\";\r\n        } else {\r\n            return \"Interaction could not be added\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(125,'String description','java.lang.String',0,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',235,'edu.ncsu.csc.itrust.action.DrugInteractionAction.reportInteraction(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Method to report an interaction\r\n *\r\n * @param firstDrug\r\n * 		\r\n * @param secondDrug\r\n * 		\r\n * @param description\r\n * 		\r\n * @return \r\n */\r\npublic String reportInteraction(String firstDrug, String secondDrug, String description) throws FormValidationException, iTrustException {\r\n    if (firstDrug.equals(secondDrug)) {\r\n        return \"Interactions can only be recorded between two different drugs\";\r\n    }\r\n    DrugInteractionBean drugInt = new DrugInteractionBean();\r\n    drugInt.setFirstDrug(firstDrug);\r\n    drugInt.setSecondDrug(secondDrug);\r\n    drugInt.setDescription(description);\r\n    try {\r\n        validator.validate(drugInt);\r\n        if (drugDAO.reportInteraction(firstDrug, secondDrug, description)) {\r\n            return \"Interaction recorded successfully\";\r\n        } else {\r\n            return \"Interaction could not be added\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(126,'String firstDrug','java.lang.String',0,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',233,'edu.ncsu.csc.itrust.action.DrugInteractionAction.deleteInteraction(java.lang.String,java.lang.String)',0,'/**\r\n * Method to delete an interaction\r\n *\r\n * @param firstDrug\r\n * 		\r\n * @param secondDrug\r\n * 		\r\n * @return \r\n */\r\npublic String deleteInteraction(String firstDrug, String secondDrug) throws FormValidationException, iTrustException {\r\n    DrugInteractionBean drugInt = new DrugInteractionBean();\r\n    drugInt.setFirstDrug(firstDrug);\r\n    drugInt.setSecondDrug(secondDrug);\r\n    drugInt.setDescription(\"blank\");\r\n    try {\r\n        validator.validate(drugInt);\r\n        if (drugDAO.deleteInteraction(firstDrug, secondDrug)) {\r\n            return \"Interaction deleted successfully\";\r\n        } else {\r\n            return \"Interaction could not be deleted\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n}'),(127,'String secondDrug','java.lang.String',0,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',233,'edu.ncsu.csc.itrust.action.DrugInteractionAction.deleteInteraction(java.lang.String,java.lang.String)',0,'/**\r\n * Method to delete an interaction\r\n *\r\n * @param firstDrug\r\n * 		\r\n * @param secondDrug\r\n * 		\r\n * @return \r\n */\r\npublic String deleteInteraction(String firstDrug, String secondDrug) throws FormValidationException, iTrustException {\r\n    DrugInteractionBean drugInt = new DrugInteractionBean();\r\n    drugInt.setFirstDrug(firstDrug);\r\n    drugInt.setSecondDrug(secondDrug);\r\n    drugInt.setDescription(\"blank\");\r\n    try {\r\n        validator.validate(drugInt);\r\n        if (drugDAO.deleteInteraction(firstDrug, secondDrug)) {\r\n            return \"Interaction deleted successfully\";\r\n        } else {\r\n            return \"Interaction could not be deleted\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n}'),(128,'String drugCode','java.lang.String',0,61,'edu.ncsu.csc.itrust.action.DrugInteractionAction',234,'edu.ncsu.csc.itrust.action.DrugInteractionAction.getInteractions(java.lang.String)',0,'/**\r\n * Method to return a list of drug interactions for a given drug\r\n *\r\n * @param drugCode\r\n * 		- The ND Code of the drug\r\n * @return \r\n */\r\npublic List<DrugInteractionBean> getInteractions(String drugCode) throws iTrustException {\r\n    try {\r\n        return drugDAO.getInteractions(drugCode);\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n}'),(129,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,63,'edu.ncsu.csc.itrust.action.EditApptAction',245,'edu.ncsu.csc.itrust.action.EditApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}'),(130,'long loggedInMID','long',0,63,'edu.ncsu.csc.itrust.action.EditApptAction',245,'edu.ncsu.csc.itrust.action.EditApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}'),(131,'int apptID','int',0,63,'edu.ncsu.csc.itrust.action.EditApptAction',247,'edu.ncsu.csc.itrust.action.EditApptAction.getAppt(int)',0,'/**\r\n * Retrieves an appointment from the database, given its ID.\r\n * Returns null if there is no match, or multiple matches.\r\n *\r\n * @param apptID\r\n * 		\r\n * @return ApptBean with matching ID\r\n */\r\npublic ApptBean getAppt(int apptID) {\r\n    try {\r\n        List<ApptBean> apptBeans = apptDAO.getAppt(apptID);\r\n        if ((apptBeans.size()) == 1)\r\n            return apptBeans.get(0);\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}'),(132,'edu.ncsu.csc.itrust.beans.ApptBean','edu.ncsu.csc.itrust.beans.ApptBean',245,63,'edu.ncsu.csc.itrust.action.EditApptAction',247,'edu.ncsu.csc.itrust.action.EditApptAction.getAppt(int)',1,'/**\r\n * Retrieves an appointment from the database, given its ID.\r\n * Returns null if there is no match, or multiple matches.\r\n *\r\n * @param apptID\r\n * 		\r\n * @return ApptBean with matching ID\r\n */\r\npublic ApptBean getAppt(int apptID) {\r\n    try {\r\n        List<ApptBean> apptBeans = apptDAO.getAppt(apptID);\r\n        if ((apptBeans.size()) == 1)\r\n            return apptBeans.get(0);\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}'),(133,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,63,'edu.ncsu.csc.itrust.action.EditApptAction',246,'edu.ncsu.csc.itrust.action.EditApptAction.editAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'/**\r\n * Updates an existing appointment\r\n *\r\n * @param appt\r\n * 		Appointment Bean containing the updated information\r\n * @return Message to be displayed\r\n * @throws FormValidationException\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic String editAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis())))\r\n        return (\"The scheduled date of this appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.editAppt(appt);\r\n        return \"Success: Appointment changed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(134,'boolean ignoreConflicts','boolean',0,63,'edu.ncsu.csc.itrust.action.EditApptAction',246,'edu.ncsu.csc.itrust.action.EditApptAction.editAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'/**\r\n * Updates an existing appointment\r\n *\r\n * @param appt\r\n * 		Appointment Bean containing the updated information\r\n * @return Message to be displayed\r\n * @throws FormValidationException\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic String editAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis())))\r\n        return (\"The scheduled date of this appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.editAppt(appt);\r\n        return \"Success: Appointment changed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(135,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,63,'edu.ncsu.csc.itrust.action.EditApptAction',248,'edu.ncsu.csc.itrust.action.EditApptAction.removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'/**\r\n * Removes an existing appointment\r\n *\r\n * @param appt\r\n * 		Appointment Bean containing the ID of the appointment to be removed.\r\n * @return Message to be displayed\r\n */\r\npublic String removeAppt(ApptBean appt) {\r\n    try {\r\n        apptDAO.removeAppt(appt);\r\n        return \"Success: Appointment removed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(136,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,65,'edu.ncsu.csc.itrust.action.EditApptTypeAction',256,'edu.ncsu.csc.itrust.action.EditApptTypeAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditApptTypeAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n}'),(137,'long loggedInMID','long',0,65,'edu.ncsu.csc.itrust.action.EditApptTypeAction',256,'edu.ncsu.csc.itrust.action.EditApptTypeAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditApptTypeAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n}'),(138,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,65,'edu.ncsu.csc.itrust.action.EditApptTypeAction',257,'edu.ncsu.csc.itrust.action.EditApptTypeAction.addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public String addApptType(ApptTypeBean apptType) throws FormValidationException, SQLException {\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName()))\r\n            return (\"Appointment Type: \" + (apptType.getName())) + \" already exists.\";\r\n\r\n    }\r\n    try {\r\n        if (apptTypeDAO.addApptType(apptType)) {\r\n            return (((\"Success: \" + (apptType.getName())) + \" - Duration: \") + (apptType.getDuration())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(139,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,65,'edu.ncsu.csc.itrust.action.EditApptTypeAction',258,'edu.ncsu.csc.itrust.action.EditApptTypeAction.editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public String editApptType(ApptTypeBean apptType) throws FormValidationException, SQLException {\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    int flag = 0;\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName())) {\r\n            flag = 1;\r\n            if ((a.getDuration()) == (apptType.getDuration()))\r\n                return (((\"Appointment Type: \" + (apptType.getName())) + \" already has a duration of \") + (apptType.getDuration())) + \" minutes.\";\r\n\r\n            break;\r\n        }\r\n    }\r\n    if (flag == 0) {\r\n        return (\"Appointment Type: \" + (apptType.getName())) + \" you are trying to update does not exist.\";\r\n    }\r\n    try {\r\n        if (apptTypeDAO.editApptType(apptType)) {\r\n            return (((\"Success: \" + (apptType.getName())) + \" - Duration: \") + (apptType.getDuration())) + \" updated\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(140,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',268,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(141,'long hcpid','long',0,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',268,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(142,'String pidString','java.lang.String',0,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',268,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(143,'String ovIDString','java.lang.String',0,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',268,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(144,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',269,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(145,'long hcpid','long',0,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',269,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(146,'String pidString','java.lang.String',0,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',269,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(147,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',270,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.addDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public void addDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.add(bean);\r\n}'),(148,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',272,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.editDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public void editDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.edit(bean);\r\n}'),(149,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,67,'edu.ncsu.csc.itrust.action.EditDiagnosesAction',271,'edu.ncsu.csc.itrust.action.EditDiagnosesAction.deleteDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public void deleteDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.remove(bean.getOvDiagnosisID());\r\n}'),(150,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',282,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The patient ID is validated by the superclass\r\n *\r\n * @param factory\r\n * 		The DAOFactory which will be used to generate the DAOs used for this action.\r\n * @param loggedInMID\r\n * 		The user authorizing this action.\r\n * @param pidString\r\n * 		The patient (or other user) who is being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(151,'long loggedInMID','long',0,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',282,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The patient ID is validated by the superclass\r\n *\r\n * @param factory\r\n * 		The DAOFactory which will be used to generate the DAOs used for this action.\r\n * @param loggedInMID\r\n * 		The user authorizing this action.\r\n * @param pidString\r\n * 		The patient (or other user) who is being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(152,'String pidString','java.lang.String',0,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',282,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The patient ID is validated by the superclass\r\n *\r\n * @param factory\r\n * 		The DAOFactory which will be used to generate the DAOs used for this action.\r\n * @param loggedInMID\r\n * 		The user authorizing this action.\r\n * @param pidString\r\n * 		The patient (or other user) who is being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(153,'long pid','long',0,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',283,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.addHealthRecord(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',0,'/**\r\n * Adds a health record for the given patient\r\n *\r\n * @param pid\r\n * 		The patient record who is being edited.\r\n * @param hr\r\n * 		The filled out health record form to be added.\r\n * @return message - \"Information Recorded\" or exceptions message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addHealthRecord(long pid, HealthRecordForm hr) throws FormValidationException, iTrustException {\r\n    validator.validate(hr);\r\n    HealthRecord record = transferForm(pid, hr);\r\n    hrDAO.add(record);\r\n    return \"Information Recorded\";\r\n}'),(154,'HealthRecordForm hr','edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',288,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',283,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.addHealthRecord(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',0,'/**\r\n * Adds a health record for the given patient\r\n *\r\n * @param pid\r\n * 		The patient record who is being edited.\r\n * @param hr\r\n * 		The filled out health record form to be added.\r\n * @return message - \"Information Recorded\" or exceptions message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addHealthRecord(long pid, HealthRecordForm hr) throws FormValidationException, iTrustException {\r\n    validator.validate(hr);\r\n    HealthRecord record = transferForm(pid, hr);\r\n    hrDAO.add(record);\r\n    return \"Information Recorded\";\r\n}'),(155,'long pid','long',0,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',286,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',0,'/**\r\n * Moves the information from the form to a HealthRecord\r\n *\r\n * @param pid\r\n * 		Patient of interest\r\n * @param form\r\n * 		Form to be translated\r\n * @return a HealthRecord containing all the information in the form\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (((record.getTotalCholesterol()) < 100) || ((record.getTotalCholesterol()) > 600))\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Integer.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}'),(156,'edu.ncsu.csc.itrust.beans.HealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',286,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',1,'/**\r\n * Moves the information from the form to a HealthRecord\r\n *\r\n * @param pid\r\n * 		Patient of interest\r\n * @param form\r\n * 		Form to be translated\r\n * @return a HealthRecord containing all the information in the form\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (((record.getTotalCholesterol()) < 100) || ((record.getTotalCholesterol()) > 600))\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Integer.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}'),(157,'HealthRecordForm form','edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',288,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',286,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',0,'/**\r\n * Moves the information from the form to a HealthRecord\r\n *\r\n * @param pid\r\n * 		Patient of interest\r\n * @param form\r\n * 		Form to be translated\r\n * @return a HealthRecord containing all the information in the form\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (((record.getTotalCholesterol()) < 100) || ((record.getTotalCholesterol()) > 600))\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Integer.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}'),(158,'long pid','long',0,69,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction',284,'edu.ncsu.csc.itrust.action.EditHealthHistoryAction.getAllHealthRecords(long)',0,'/**\r\n * Returns a list of all HealthRecords for the given patient\r\n *\r\n * @param pid\r\n * 		The ID of the patient to look up\r\n * @return list of HealthRecords\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<HealthRecord> getAllHealthRecords(long pid) throws iTrustException {\r\n    return hrDAO.getAllHealthRecords(pid);\r\n}'),(159,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',293,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(160,'long hcpid','long',0,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',293,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(161,'String pidString','java.lang.String',0,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',293,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(162,'String ovIDString','java.lang.String',0,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',293,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(163,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',294,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(164,'long hcpid','long',0,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',294,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(165,'String pidString','java.lang.String',0,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',294,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(166,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',295,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.addImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void addImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.add(bean);\r\n}'),(167,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',297,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.editImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void editImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.edit(bean);\r\n}'),(168,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,71,'edu.ncsu.csc.itrust.action.EditImmunizationsAction',296,'edu.ncsu.csc.itrust.action.EditImmunizationsAction.deleteImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void deleteImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.remove(bean.getOvProcedureID());\r\n}'),(169,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',307,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(170,'long hcpid','long',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',307,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(171,'String pidString','java.lang.String',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',307,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(172,'String ovIDString','java.lang.String',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',307,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(173,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',308,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(174,'long hcpid','long',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',308,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(175,'String pidString','java.lang.String',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',308,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}'),(176,'long id','long',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',313,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabProcedure(long)',0,'public LabProcedureBean getLabProcedure(long id) throws iTrustException {\r\n    verifySaved();\r\n    return labProcedureDAO.getLabProcedure(id);\r\n}'),(177,'edu.ncsu.csc.itrust.beans.LabProcedureBean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',313,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabProcedure(long)',1,'public LabProcedureBean getLabProcedure(long id) throws iTrustException {\r\n    verifySaved();\r\n    return labProcedureDAO.getLabProcedure(id);\r\n}'),(178,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',309,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public void addLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: choose lab tech if not assigned in bean\r\n    if (\"\".equals(bean.getStatus())) {\r\n        bean.setStatus(LabProcedureBean.In_Transit);\r\n    }\r\n    labProcedureDAO.addLabProcedure(bean);\r\n}'),(179,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',310,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.autoAssignLabTech(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public LabProcedureBean autoAssignLabTech(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: determine the lab tech using more intelligent means\r\n    List<PersonnelBean> techs = personnelDAO.getLabTechs();\r\n    if (!(techs.isEmpty())) {\r\n        bean.setLTID(techs.get(0).getMID());\r\n    } else {\r\n        bean.setLTID(0);\r\n    }\r\n    return bean;\r\n}'),(180,'edu.ncsu.csc.itrust.beans.LabProcedureBean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',310,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.autoAssignLabTech(edu.ncsu.csc.itrust.beans.LabProcedureBean)',1,'public LabProcedureBean autoAssignLabTech(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: determine the lab tech using more intelligent means\r\n    List<PersonnelBean> techs = personnelDAO.getLabTechs();\r\n    if (!(techs.isEmpty())) {\r\n        bean.setLTID(techs.get(0).getMID());\r\n    } else {\r\n        bean.setLTID(0);\r\n    }\r\n    return bean;\r\n}'),(181,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',312,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.editLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public void editLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    labProcedureDAO.updateLabProcedure(bean);\r\n}'),(182,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',311,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.deleteLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public void deleteLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    labProcedureDAO.removeLabProcedure(bean.getProcedureID());\r\n}'),(183,'long mid','long',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',316,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechName(long)',0,'public String getLabTechName(long mid) throws iTrustException {\r\n    try {\r\n        return personnelDAO.getName(mid);\r\n    } catch (iTrustException e) {\r\n        return \"\";\r\n    }\r\n}'),(184,'long mid','long',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',317,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechQueueSize(long)',0,'public int getLabTechQueueSize(long mid) throws iTrustException {\r\n    return labProcedureDAO.getLabTechQueueSize(mid);\r\n}'),(185,'long mid','long',0,73,'edu.ncsu.csc.itrust.action.EditLabProceduresAction',318,'edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechQueueSizeByPriority(long)',0,'public int[] getLabTechQueueSizeByPriority(long mid) throws iTrustException {\r\n    return labProcedureDAO.getLabTechQueueSizeByPriority(mid);\r\n}'),(186,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',333,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the HCP editing their monitoring list.\r\n */\r\npublic EditMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(187,'long loggedInMID','long',0,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',333,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the HCP editing their monitoring list.\r\n */\r\npublic EditMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(188,'long patientMID','long',0,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',334,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.addToList(long,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'/**\r\n * Adds a patient to the current HCPs remote monitoring list\r\n *\r\n * @param patientMID\r\n * 		the patient\r\n * @param permissions\r\n * 		Array indicating what data the patient is allowed to enter.\r\n * 		Ordered by Systolic Blood Pressure, Diastolic Blood Pressure, Glucose Level, Weight, Pedometer Reading.\r\n * @return true if added successfully. False if already in list.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean addToList(long patientMID, TelemedicineBean tBean) throws DBException {\r\n    return rmDAO.addPatientToList(patientMID, loggedInMID, tBean);\r\n}'),(189,'TelemedicineBean tBean','edu.ncsu.csc.itrust.beans.TelemedicineBean',280,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',334,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.addToList(long,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'/**\r\n * Adds a patient to the current HCPs remote monitoring list\r\n *\r\n * @param patientMID\r\n * 		the patient\r\n * @param permissions\r\n * 		Array indicating what data the patient is allowed to enter.\r\n * 		Ordered by Systolic Blood Pressure, Diastolic Blood Pressure, Glucose Level, Weight, Pedometer Reading.\r\n * @return true if added successfully. False if already in list.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean addToList(long patientMID, TelemedicineBean tBean) throws DBException {\r\n    return rmDAO.addPatientToList(patientMID, loggedInMID, tBean);\r\n}'),(190,'long patientMID','long',0,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',337,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.removeFromList(long)',0,'/**\r\n * Removes a patient from the current HCPs remote monitoring list\r\n *\r\n * @param patientMID\r\n * 		the patient\r\n * @return true if removed successfully. False if not in list.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeFromList(long patientMID) throws DBException {\r\n    return rmDAO.removePatientFromList(patientMID, loggedInMID);\r\n}'),(191,'long patientMID','long',0,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',336,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.isPatientInList(long)',0,'/**\r\n * Returns whether a patient is in an HCPs list already\r\n *\r\n * @param patientMID\r\n * 		the patient\r\n * @return true if in DB, false otherwise\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean isPatientInList(long patientMID) throws DBException {\r\n    List<RemoteMonitoringDataBean> dataset = rmDAO.getPatientsData(loggedInMID);\r\n    for (RemoteMonitoringDataBean d : dataset) {\r\n        if ((d.getPatientMID()) == patientMID)\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(192,'long pid','long',0,75,'edu.ncsu.csc.itrust.action.EditMonitoringListAction',335,'edu.ncsu.csc.itrust.action.EditMonitoringListAction.getPatientName(long)',0,'/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(long pid) throws DBException, iTrustException {\r\n    return authDAO.getUserName(pid);\r\n}'),(193,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',342,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The patient who this action is performed on.\r\n * @param ovIDString\r\n * 		The ID of the office visit in play.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(194,'long loggedInMID','long',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',342,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The patient who this action is performed on.\r\n * @param ovIDString\r\n * 		The ID of the office visit in play.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(195,'String pidString','java.lang.String',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',342,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The patient who this action is performed on.\r\n * @param ovIDString\r\n * 		The ID of the office visit in play.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(196,'String ovIDString','java.lang.String',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',342,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The patient who this action is performed on.\r\n * @param ovIDString\r\n * 		The ID of the office visit in play.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(197,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',343,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Create an OfficeVisitAction that is not yet associated with an actual\r\n * office visit.  When update() is called, it will be saved.  Until then,\r\n * any attempt to save prescriptions, procedures, lab procedures,\r\n * immunizations, or diagnoses will raise an exception.\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(198,'long loggedInMID','long',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',343,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Create an OfficeVisitAction that is not yet associated with an actual\r\n * office visit.  When update() is called, it will be saved.  Until then,\r\n * any attempt to save prescriptions, procedures, lab procedures,\r\n * immunizations, or diagnoses will raise an exception.\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(199,'String pidString','java.lang.String',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',343,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Create an OfficeVisitAction that is not yet associated with an actual\r\n * office visit.  When update() is called, it will be saved.  Until then,\r\n * any attempt to save prescriptions, procedures, lab procedures,\r\n * immunizations, or diagnoses will raise an exception.\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(200,'List<HospitalBean> hcpsHospitals','java.util.List',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',344,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.combineLists(java.util.List,java.util.List)',0,'/**\r\n * Combines two lists of hospitals\r\n *\r\n * @param hcpsHospitals\r\n * 		hospitals the HCP is assigned to\r\n * @param allHospitals\r\n * 		all hospitals\r\n * @return the combined list\r\n */\r\nprivate List<HospitalBean> combineLists(List<HospitalBean> hcpsHospitals, List<HospitalBean> allHospitals) {\r\n    for (HospitalBean hos : allHospitals) {\r\n        if (!(hcpsHospitals.contains(hos)))\r\n            hcpsHospitals.add(hos);\r\n\r\n    }\r\n    return hcpsHospitals;\r\n}'),(201,'List<HospitalBean> allHospitals','java.util.List',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',344,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.combineLists(java.util.List,java.util.List)',0,'/**\r\n * Combines two lists of hospitals\r\n *\r\n * @param hcpsHospitals\r\n * 		hospitals the HCP is assigned to\r\n * @param allHospitals\r\n * 		all hospitals\r\n * @return the combined list\r\n */\r\nprivate List<HospitalBean> combineLists(List<HospitalBean> hcpsHospitals, List<HospitalBean> allHospitals) {\r\n    for (HospitalBean hos : allHospitals) {\r\n        if (!(hcpsHospitals.contains(hos)))\r\n            hcpsHospitals.add(hos);\r\n\r\n    }\r\n    return hcpsHospitals;\r\n}'),(202,'EditOfficeVisitForm form','edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',286,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',360,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateInformation(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)',0,'/**\r\n * Updates the office visit with information from the form passed in.  If\r\n * the office visit has not yet been saved, calling this method will save\r\n * it as well as make the sub actions able to be saved.\r\n *\r\n * @param form\r\n * 		information to update\r\n * @return \"success\" or exceptions message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(EditOfficeVisitForm form, boolean isERIncident) throws FormValidationException {\r\n    String confirm = \"\";\r\n    try {\r\n        updateOv(form, isERIncident);\r\n        confirm = \"success\";\r\n        return confirm;\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(203,'boolean isERIncident','boolean',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',360,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateInformation(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)',0,'/**\r\n * Updates the office visit with information from the form passed in.  If\r\n * the office visit has not yet been saved, calling this method will save\r\n * it as well as make the sub actions able to be saved.\r\n *\r\n * @param form\r\n * 		information to update\r\n * @return \"success\" or exceptions message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(EditOfficeVisitForm form, boolean isERIncident) throws FormValidationException {\r\n    String confirm = \"\";\r\n    try {\r\n        updateOv(form, isERIncident);\r\n        confirm = \"success\";\r\n        return confirm;\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(204,'TransactionType trans','edu.ncsu.csc.itrust.enums.TransactionType',490,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',352,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logOfficeVisitEvent(edu.ncsu.csc.itrust.enums.TransactionType)',0,'/**\r\n * Helper that logs an office visit event.  The associated patient id, HCP\r\n * id, and office visit id are automatically included.\r\n *\r\n * @param trans\r\n * 		Transaction type for the log.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logOfficeVisitEvent(TransactionType trans) throws DBException {\r\n    loggingAction.logEvent(trans, loggedInMID, getPid(), (\"Office visit ID: \" + (getOvID())));\r\n}'),(205,'TransactionType trans','edu.ncsu.csc.itrust.enums.TransactionType',490,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',351,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logIncidentReportEvent(edu.ncsu.csc.itrust.enums.TransactionType)',0,'/**\r\n * Helper that logs an ER incident.  The associated patient id, ER\r\n * id, and incident report id are automatically included.\r\n *\r\n * @param trans\r\n * 		Transaction type for the log.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logIncidentReportEvent(TransactionType trans) throws DBException {\r\n    loggingAction.logEvent(trans, loggedInMID, getPid(), (\"Incident Report ID: \" + (getOvID())));\r\n}'),(206,'long hcpID','long',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',353,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.makeEmailApp(long,java.lang.String,java.lang.String)',0,'/**\r\n * Sends e-mail regarding the prescribed dangerous drug.\r\n *\r\n * @param hcpID\r\n * 		HCP the prescription is made by\r\n * @param patID\r\n * 		ID of the patient prescription is for\r\n * @param problem\r\n * 		The allergy and/or interaction that is the problem\r\n * @return the sent e-mail\r\n * @throws DBException\r\n * 		\r\n */\r\npublic Email makeEmailApp(long hcpID, String patID, String problem) throws DBException, iTrustException {\r\n    PatientBean p = patDAO.getPatient(Long.parseLong(patID));\r\n    String hcpName = personnelDAO.getName(hcpID);\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"HCP has prescribed you a potentially dangerous medication\");\r\n    email.setBody(String.format(\"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s\", hcpName, problem));\r\n    return email;\r\n}'),(207,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',353,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.makeEmailApp(long,java.lang.String,java.lang.String)',1,'/**\r\n * Sends e-mail regarding the prescribed dangerous drug.\r\n *\r\n * @param hcpID\r\n * 		HCP the prescription is made by\r\n * @param patID\r\n * 		ID of the patient prescription is for\r\n * @param problem\r\n * 		The allergy and/or interaction that is the problem\r\n * @return the sent e-mail\r\n * @throws DBException\r\n * 		\r\n */\r\npublic Email makeEmailApp(long hcpID, String patID, String problem) throws DBException, iTrustException {\r\n    PatientBean p = patDAO.getPatient(Long.parseLong(patID));\r\n    String hcpName = personnelDAO.getName(hcpID);\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"HCP has prescribed you a potentially dangerous medication\");\r\n    email.setBody(String.format(\"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s\", hcpName, problem));\r\n    return email;\r\n}'),(208,'String patID','java.lang.String',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',353,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.makeEmailApp(long,java.lang.String,java.lang.String)',0,'/**\r\n * Sends e-mail regarding the prescribed dangerous drug.\r\n *\r\n * @param hcpID\r\n * 		HCP the prescription is made by\r\n * @param patID\r\n * 		ID of the patient prescription is for\r\n * @param problem\r\n * 		The allergy and/or interaction that is the problem\r\n * @return the sent e-mail\r\n * @throws DBException\r\n * 		\r\n */\r\npublic Email makeEmailApp(long hcpID, String patID, String problem) throws DBException, iTrustException {\r\n    PatientBean p = patDAO.getPatient(Long.parseLong(patID));\r\n    String hcpName = personnelDAO.getName(hcpID);\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"HCP has prescribed you a potentially dangerous medication\");\r\n    email.setBody(String.format(\"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s\", hcpName, problem));\r\n    return email;\r\n}'),(209,'String problem','java.lang.String',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',353,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.makeEmailApp(long,java.lang.String,java.lang.String)',0,'/**\r\n * Sends e-mail regarding the prescribed dangerous drug.\r\n *\r\n * @param hcpID\r\n * 		HCP the prescription is made by\r\n * @param patID\r\n * 		ID of the patient prescription is for\r\n * @param problem\r\n * 		The allergy and/or interaction that is the problem\r\n * @return the sent e-mail\r\n * @throws DBException\r\n * 		\r\n */\r\npublic Email makeEmailApp(long hcpID, String patID, String problem) throws DBException, iTrustException {\r\n    PatientBean p = patDAO.getPatient(Long.parseLong(patID));\r\n    String hcpName = personnelDAO.getName(hcpID);\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"HCP has prescribed you a potentially dangerous medication\");\r\n    email.setBody(String.format(\"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s\", hcpName, problem));\r\n    return email;\r\n}'),(210,'EditOfficeVisitForm form','edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',286,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',361,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateOv(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)',0,'/**\r\n * Updates the office visit.\r\n *\r\n * @param form\r\n * 		form with all the information\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate void updateOv(EditOfficeVisitForm form, boolean isERIncident) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(form);\r\n    OfficeVisitBean ov = getBean();\r\n    ov.setNotes(form.getNotes());\r\n    ov.setVisitDateStr(form.getVisitDate());\r\n    ov.setHcpID(Long.valueOf(form.getHcpID()));\r\n    ov.setPatientID(Long.valueOf(form.getPatientID()));\r\n    ov.setHospitalID(form.getHospitalID());\r\n    ov.setERIncident(isERIncident);\r\n    updateBean(ov);\r\n}'),(211,'boolean isERIncident','boolean',0,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',361,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateOv(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)',0,'/**\r\n * Updates the office visit.\r\n *\r\n * @param form\r\n * 		form with all the information\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate void updateOv(EditOfficeVisitForm form, boolean isERIncident) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(form);\r\n    OfficeVisitBean ov = getBean();\r\n    ov.setNotes(form.getNotes());\r\n    ov.setVisitDateStr(form.getVisitDate());\r\n    ov.setHcpID(Long.valueOf(form.getHcpID()));\r\n    ov.setPatientID(Long.valueOf(form.getPatientID()));\r\n    ov.setHospitalID(form.getHospitalID());\r\n    ov.setERIncident(isERIncident);\r\n    updateBean(ov);\r\n}'),(212,'OfficeVisitBean bean','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,77,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction',359,'edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateBean(edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'/**\r\n * Update the office visit with the given data.  If the office visit has\r\n * not yet been saved, this will save it and reinitialize the sub actions.\r\n *\r\n * @param bean\r\n * 		The data with which to update the office visit.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate void updateBean(OfficeVisitBean bean) throws DBException, iTrustException {\r\n    if (isUnsaved()) {\r\n        // bean.getID() == -1\r\n        ovID = ovDAO.add(bean);\r\n        reinitializeSubActions();\r\n    } else {\r\n        ovDAO.update(bean);\r\n    }\r\n}'),(213,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,79,'edu.ncsu.csc.itrust.action.EditPHRAction',375,'edu.ncsu.csc.itrust.action.EditPHRAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the currently logged in user who is authorizing this action.\r\n * @param pidString\r\n * 		The MID of the patient whose personal health records are being added.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\r\n    this.patient = patientDAO.getPatient(pid);\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.ndcodesDAO = factory.getNDCodesDAO();// NEW\r\n\r\n    emailutil = new EmailUtil(factory);\r\n    this.factory = factory;\r\n}'),(214,'long loggedInMID','long',0,79,'edu.ncsu.csc.itrust.action.EditPHRAction',375,'edu.ncsu.csc.itrust.action.EditPHRAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the currently logged in user who is authorizing this action.\r\n * @param pidString\r\n * 		The MID of the patient whose personal health records are being added.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\r\n    this.patient = patientDAO.getPatient(pid);\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.ndcodesDAO = factory.getNDCodesDAO();// NEW\r\n\r\n    emailutil = new EmailUtil(factory);\r\n    this.factory = factory;\r\n}'),(215,'String pidString','java.lang.String',0,79,'edu.ncsu.csc.itrust.action.EditPHRAction',375,'edu.ncsu.csc.itrust.action.EditPHRAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the currently logged in user who is authorizing this action.\r\n * @param pidString\r\n * 		The MID of the patient whose personal health records are being added.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\r\n    this.patient = patientDAO.getPatient(pid);\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.ndcodesDAO = factory.getNDCodesDAO();// NEW\r\n\r\n    emailutil = new EmailUtil(factory);\r\n    this.factory = factory;\r\n}'),(216,'long pid','long',0,79,'edu.ncsu.csc.itrust.action.EditPHRAction',392,'edu.ncsu.csc.itrust.action.EditPHRAction.updateAllergies(long,java.lang.String)',0,'/**\r\n * Adds an allergy to the patients records\r\n *\r\n * @return \"Allergy Added\", exception message, a list of invalid fields, or \"\" (only if description is null)\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String updateAllergies(long pid, String ndcode) throws FormValidationException, iTrustException {\r\n    AllergyBean bean = new AllergyBean();\r\n    bean.setPatientID(pid);\r\n    bean.setNDCode(ndcode);\r\n    bean.setDescription(ndcodesDAO.getNDCode(ndcode).getDescription());\r\n    AllergyBeanValidator abv = new AllergyBeanValidator();\r\n    abv.validate(bean);\r\n    String patientName = patientDAO.getName(pid);\r\n    List<AllergyBean> allergies = allergyDAO.getAllergies(pid);\r\n    for (AllergyBean current : allergies) {\r\n        if (current.getNDCode().equals(bean.getNDCode())) {\r\n            return (((((\"Allergy \" + (bean.getNDCode())) + \" - \") + (bean.getDescription())) + \" has already been added for \") + patientName) + \".\";\r\n        }\r\n    }\r\n    allergyDAO.addAllergy(bean);\r\n    emailutil.sendEmail(makeEmail());\r\n    /* adding loop that checks for allergy conflicts. The loop runs through every prescription bean\n    and checks for conflict.\n     */\r\n    List<PrescriptionBean> beansRx = patientDAO.getCurrentPrescriptions(pid);\r\n    for (int i = 0; i < (beansRx.size()); i++) {\r\n        if (beansRx.get(i).getMedication().getNDCode().equals(bean.getNDCode())) {\r\n            return (((((\"Medication \" + (beansRx.get(i).getMedication().getNDCode())) + \" - \") + (beansRx.get(i).getMedication().getDescription())) + \" is currently prescribed to \") + patientName) + \".\";\r\n        }\r\n    }\r\n    return \"Allergy Added\";// If loop is successful, it will never reach here.\r\n\r\n}'),(217,'String ndcode','java.lang.String',0,79,'edu.ncsu.csc.itrust.action.EditPHRAction',392,'edu.ncsu.csc.itrust.action.EditPHRAction.updateAllergies(long,java.lang.String)',0,'/**\r\n * Adds an allergy to the patients records\r\n *\r\n * @return \"Allergy Added\", exception message, a list of invalid fields, or \"\" (only if description is null)\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String updateAllergies(long pid, String ndcode) throws FormValidationException, iTrustException {\r\n    AllergyBean bean = new AllergyBean();\r\n    bean.setPatientID(pid);\r\n    bean.setNDCode(ndcode);\r\n    bean.setDescription(ndcodesDAO.getNDCode(ndcode).getDescription());\r\n    AllergyBeanValidator abv = new AllergyBeanValidator();\r\n    abv.validate(bean);\r\n    String patientName = patientDAO.getName(pid);\r\n    List<AllergyBean> allergies = allergyDAO.getAllergies(pid);\r\n    for (AllergyBean current : allergies) {\r\n        if (current.getNDCode().equals(bean.getNDCode())) {\r\n            return (((((\"Allergy \" + (bean.getNDCode())) + \" - \") + (bean.getDescription())) + \" has already been added for \") + patientName) + \".\";\r\n        }\r\n    }\r\n    allergyDAO.addAllergy(bean);\r\n    emailutil.sendEmail(makeEmail());\r\n    /* adding loop that checks for allergy conflicts. The loop runs through every prescription bean\n    and checks for conflict.\n     */\r\n    List<PrescriptionBean> beansRx = patientDAO.getCurrentPrescriptions(pid);\r\n    for (int i = 0; i < (beansRx.size()); i++) {\r\n        if (beansRx.get(i).getMedication().getNDCode().equals(bean.getNDCode())) {\r\n            return (((((\"Medication \" + (beansRx.get(i).getMedication().getNDCode())) + \" - \") + (beansRx.get(i).getMedication().getDescription())) + \" is currently prescribed to \") + patientName) + \".\";\r\n        }\r\n    }\r\n    return \"Allergy Added\";// If loop is successful, it will never reach here.\r\n\r\n}'),(218,'long visitID','long',0,79,'edu.ncsu.csc.itrust.action.EditPHRAction',384,'edu.ncsu.csc.itrust.action.EditPHRAction.getCompleteOfficeVisit(long)',0,'/**\r\n * Returns a complete OfficeVisitBean given a visitID\r\n *\r\n * @return \r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(visitID);\r\n}'),(219,'edu.ncsu.csc.itrust.beans.OfficeVisitBean','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,79,'edu.ncsu.csc.itrust.action.EditPHRAction',384,'edu.ncsu.csc.itrust.action.EditPHRAction.getCompleteOfficeVisit(long)',1,'/**\r\n * Returns a complete OfficeVisitBean given a visitID\r\n *\r\n * @return \r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(visitID);\r\n}'),(220,'long visitID','long',0,79,'edu.ncsu.csc.itrust.action.EditPHRAction',389,'edu.ncsu.csc.itrust.action.EditPHRAction.getProcedures(long)',0,'public List<ProcedureBean> getProcedures(long visitID) throws DBException {\r\n    return procDAO.getList(visitID);\r\n}'),(221,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',379,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has high blood pressure\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getBloodPressureSystolic()) > 240) || ((record.getBloodPressureDiastolic()) > 120))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(222,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',380,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has high cholesterol\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has high cholesterol.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getCholesterolHDL()) < 35) || ((record.getCholesterolLDL()) > 250))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(223,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',377,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has diabetes\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has diabetes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(224,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',376,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has cancer\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has cancer.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(225,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',378,'edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member has heart disease\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member has heart disease.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(226,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',390,'edu.ncsu.csc.itrust.action.EditPHRAction.isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if a particular family member smokes\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return true if the family member smokes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(227,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,79,'edu.ncsu.csc.itrust.action.EditPHRAction',387,'edu.ncsu.csc.itrust.action.EditPHRAction.getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if the family member is dead and returns their cause of death if so\r\n *\r\n * @param member\r\n * 		the family member to check\r\n * @return the cause of death if there is one; otherwise null\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if ((patient.getCauseOfDeath()) == null)\r\n        return \"\";\r\n\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n\r\n    return diag.getDescription();\r\n}'),(228,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,82,'edu.ncsu.csc.itrust.action.EditPatientAction',405,'edu.ncsu.csc.itrust.action.EditPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The MID of the patient being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    emailutil = new EmailUtil(factory);\r\n}'),(229,'long loggedInMID','long',0,82,'edu.ncsu.csc.itrust.action.EditPatientAction',405,'edu.ncsu.csc.itrust.action.EditPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The MID of the patient being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    emailutil = new EmailUtil(factory);\r\n}'),(230,'String pidString','java.lang.String',0,82,'edu.ncsu.csc.itrust.action.EditPatientAction',405,'edu.ncsu.csc.itrust.action.EditPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is authorizing this action.\r\n * @param pidString\r\n * 		The MID of the patient being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    emailutil = new EmailUtil(factory);\r\n}'),(231,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,82,'edu.ncsu.csc.itrust.action.EditPatientAction',413,'edu.ncsu.csc.itrust.action.EditPatientAction.updateInformation(edu.ncsu.csc.itrust.beans.PatientBean)',0,'/**\r\n * Takes the information out of the PatientBean param and updates the patients information\r\n *\r\n * @param p\r\n * 		the new patient information\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic void updateInformation(PatientBean p) throws FormValidationException, iTrustException {\r\n    p.setMID(pid);// for security reasons\r\n\r\n    validator.validate(p);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n    emailutil.sendEmail(makeEmail());\r\n}'),(232,'long mid','long',0,82,'edu.ncsu.csc.itrust.action.EditPatientAction',408,'edu.ncsu.csc.itrust.action.EditPatientAction.getEmployeeName(long)',0,'public String getEmployeeName(long mid) throws DBException, iTrustException {\r\n    return personnelDAO.getName(mid);\r\n}'),(233,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',425,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an existing office visit.\r\n *\r\n * @param factory\r\n * 		The DAO Factory.\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient id as a string.\r\n * @param ovIDString\r\n * 		The office visit as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(234,'long hcpid','long',0,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',425,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an existing office visit.\r\n *\r\n * @param factory\r\n * 		The DAO Factory.\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient id as a string.\r\n * @param ovIDString\r\n * 		The office visit as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(235,'String pidString','java.lang.String',0,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',425,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an existing office visit.\r\n *\r\n * @param factory\r\n * 		The DAO Factory.\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient id as a string.\r\n * @param ovIDString\r\n * 		The office visit as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(236,'String ovIDString','java.lang.String',0,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',425,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an existing office visit.\r\n *\r\n * @param factory\r\n * 		The DAO Factory.\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient id as a string.\r\n * @param ovIDString\r\n * 		The office visit as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(237,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',426,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an non-existent office\r\n * visit.  Most methods will throw exceptions if built with this\r\n * constructor.\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient ID as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(238,'long hcpid','long',0,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',426,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an non-existent office\r\n * visit.  Most methods will throw exceptions if built with this\r\n * constructor.\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient ID as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(239,'String pidString','java.lang.String',0,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',426,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Creates an EditPatientInstructionsAction for an non-existent office\r\n * visit.  Most methods will throw exceptions if built with this\r\n * constructor.\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		The HCP id.\r\n * @param pidString\r\n * 		The patient ID as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}'),(240,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',427,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.addPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Add patient instructions to the office visit.\r\n *\r\n * @param bean\r\n * 		The instructions to add.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void addPatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.add(bean);\r\n}'),(241,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',429,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.editPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Modify patient instruction in this office visit.\r\n *\r\n * @param bean\r\n * 		The instructions to modify\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void editPatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.edit(bean);\r\n}'),(242,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',428,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.deletePatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Delete patient instructions from this office visit.\r\n *\r\n * @param bean\r\n * 		The instructions to delete.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void deletePatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.remove(bean.getId());\r\n}'),(243,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,84,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction',431,'edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Verify the contents of the given instruction bean.\r\n *\r\n * @param bean\r\n * 		The instructions to check.\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic void validate(PatientInstructionsBean bean) throws FormValidationException, iTrustException {\r\n    verifySaved();\r\n    PatientInstructionsBeanValidator validator = new PatientInstructionsBeanValidator();\r\n    validator.validate(bean);\r\n}'),(244,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,86,'edu.ncsu.csc.itrust.action.EditPersonnelAction',439,'edu.ncsu.csc.itrust.action.EditPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user editing this personnel.\r\n * @param pidString\r\n * 		The ID of the user being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    long pidlong = Long.parseLong(pidString);\r\n    Role editor = authDAO.getUserRole(loggedInMID);\r\n    Role editing = authDAO.getUserRole(pidlong);\r\n    if ((editor == editing) && (pidlong != loggedInMID)) {\r\n        throw new iTrustException(\"You can only edit your own demographics!\");\r\n    } else\r\n        if ((((editor == (Role.HCP)) && (editing == (Role.ADMIN))) || ((editor == (Role.UAP)) && (editing == (Role.HCP)))) || ((editor == (Role.ADMIN)) && (editing == (Role.UAP)))) {\r\n            throw new iTrustException(\"You are not authorized to edit this record!\");\r\n        }\r\n\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(245,'long loggedInMID','long',0,86,'edu.ncsu.csc.itrust.action.EditPersonnelAction',439,'edu.ncsu.csc.itrust.action.EditPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user editing this personnel.\r\n * @param pidString\r\n * 		The ID of the user being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    long pidlong = Long.parseLong(pidString);\r\n    Role editor = authDAO.getUserRole(loggedInMID);\r\n    Role editing = authDAO.getUserRole(pidlong);\r\n    if ((editor == editing) && (pidlong != loggedInMID)) {\r\n        throw new iTrustException(\"You can only edit your own demographics!\");\r\n    } else\r\n        if ((((editor == (Role.HCP)) && (editing == (Role.ADMIN))) || ((editor == (Role.UAP)) && (editing == (Role.HCP)))) || ((editor == (Role.ADMIN)) && (editing == (Role.UAP)))) {\r\n            throw new iTrustException(\"You are not authorized to edit this record!\");\r\n        }\r\n\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(246,'String pidString','java.lang.String',0,86,'edu.ncsu.csc.itrust.action.EditPersonnelAction',439,'edu.ncsu.csc.itrust.action.EditPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user editing this personnel.\r\n * @param pidString\r\n * 		The ID of the user being edited.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    long pidlong = Long.parseLong(pidString);\r\n    Role editor = authDAO.getUserRole(loggedInMID);\r\n    Role editing = authDAO.getUserRole(pidlong);\r\n    if ((editor == editing) && (pidlong != loggedInMID)) {\r\n        throw new iTrustException(\"You can only edit your own demographics!\");\r\n    } else\r\n        if ((((editor == (Role.HCP)) && (editing == (Role.ADMIN))) || ((editor == (Role.UAP)) && (editing == (Role.HCP)))) || ((editor == (Role.ADMIN)) && (editing == (Role.UAP)))) {\r\n            throw new iTrustException(\"You are not authorized to edit this record!\");\r\n        }\r\n\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(247,'PersonnelBean personnelForm','edu.ncsu.csc.itrust.beans.PersonnelBean',270,86,'edu.ncsu.csc.itrust.action.EditPersonnelAction',440,'edu.ncsu.csc.itrust.action.EditPersonnelAction.updateInformation(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Takes information from the personnelForm param and updates the patient\r\n *\r\n * @param personnelForm\r\n * 		PersonnelBean with new information\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic void updateInformation(PersonnelBean personnelForm) throws FormValidationException, iTrustException {\r\n    personnelForm.setMID(pid);\r\n    validator.validate(personnelForm);\r\n    personnelDAO.editPersonnel(personnelForm);\r\n}'),(248,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',449,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates a new action by initializing the office visit\r\n * database access object.\r\n *\r\n * @param factory\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    init(factory);\r\n}'),(249,'long hcpid','long',0,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',449,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates a new action by initializing the office visit\r\n * database access object.\r\n *\r\n * @param factory\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    init(factory);\r\n}'),(250,'String pidString','java.lang.String',0,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',449,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates a new action by initializing the office visit\r\n * database access object.\r\n *\r\n * @param factory\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    init(factory);\r\n}'),(251,'String ovIDString','java.lang.String',0,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',449,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Creates a new action by initializing the office visit\r\n * database access object.\r\n *\r\n * @param factory\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    init(factory);\r\n}'),(252,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',450,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * A prescription action that is part of an office visit that is not yet\r\n * saved.  All attempts to modify this action will throw exceptions.  Once\r\n * the office visit is saved, obtain a new EditPrescriptionsAction using\r\n * the four-argument constructor.  (This is done automatically by the\r\n * EditOfficeVisitAction class.)\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    init(factory);\r\n}'),(253,'long hcpid','long',0,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',450,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * A prescription action that is part of an office visit that is not yet\r\n * saved.  All attempts to modify this action will throw exceptions.  Once\r\n * the office visit is saved, obtain a new EditPrescriptionsAction using\r\n * the four-argument constructor.  (This is done automatically by the\r\n * EditOfficeVisitAction class.)\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    init(factory);\r\n}'),(254,'String pidString','java.lang.String',0,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',450,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * A prescription action that is part of an office visit that is not yet\r\n * saved.  All attempts to modify this action will throw exceptions.  Once\r\n * the office visit is saved, obtain a new EditPrescriptionsAction using\r\n * the four-argument constructor.  (This is done automatically by the\r\n * EditOfficeVisitAction class.)\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    init(factory);\r\n}'),(255,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',462,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.init(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'private void init(DAOFactory factory) {\r\n    psDAO = factory.getPrescriptionsDAO();\r\n    medDAO = factory.getNDCodesDAO();\r\n    interactionsDAO = factory.getDrugInteractionDAO();\r\n    allergyDAO = factory.getAllergyDAO();\r\n    rptDAO = factory.getPrescriptionReportDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    emailUtil = new EmailUtil(factory);\r\n    personnelDAO = new PersonnelDAO(factory);\r\n    prescriptionOverrideDAO = new PrescriptionOverrideDAO(factory);\r\n    loggingAction = new EventLoggingAction(factory);\r\n}'),(256,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',453,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkForAllergiesAndInteractions(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Checks the prescription bean for interactions, allergies, and legal\r\n * values.\r\n *\r\n * @param pres\r\n * 		The prescription bean.\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate void checkForAllergiesAndInteractions(PrescriptionBean pres) throws iTrustException {\r\n    List<String> warnings = checkInteraction(pres);\r\n    warnings.addAll(checkAllergy(pres));\r\n    if (!(warnings.isEmpty())) {\r\n        PatientBean patient = patientDAO.getPatient(getPid());\r\n        PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n        loggingAction.logEvent(TransactionType.OVERRIDE_INTERACTION_WARNING, hcp.getMID(), patient.getMID(), (((pres.getMedication().getNDCode()) + \" Override: \") + (pres.getReasons().toString())));\r\n        if (validOverride(pres)) {\r\n            emailUtil.sendEmail(makeEmail(pres, warnings));\r\n        } else {\r\n            throw new PrescriptionWarningException(warnings);\r\n        }\r\n    }\r\n    if (\"\".equals(pres.getInstructions())) {\r\n        throw new PrescriptionFieldException(\"Instructions are required.\");\r\n    }\r\n}'),(257,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',464,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.validOverride(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Indicates if the prescription bean has a valid allergy/interaction\r\n * override.\r\n */\r\nprivate boolean validOverride(PrescriptionBean pres) {\r\n    return ((pres.getReasons()) != null) && ((pres.getReasons().size()) > 0);\r\n}'),(258,'PrescriptionBean newPrescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',459,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}'),(259,'PrescriptionBean oldPrescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',459,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}'),(260,'DrugInteractionBean bean','edu.ncsu.csc.itrust.beans.DrugInteractionBean',250,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',459,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}'),(261,'AllergyBean bean','edu.ncsu.csc.itrust.beans.AllergyBean',244,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',458,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatAllergyWarning(edu.ncsu.csc.itrust.beans.AllergyBean)',0,'/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-allergy warning was detected.\r\n */\r\nprivate String formatAllergyWarning(AllergyBean bean) throws DBException {\r\n    return ((\"Allergy: \" + (bean.getDescription())) + \". First Found: \") + (new SimpleDateFormat(\"MM/dd/yyyy\").format(bean.getFirstFound()));\r\n}'),(262,'PrescriptionBean newPrescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',454,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkInteraction(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Checks to see if the given prescription has an interaction with any\r\n * other previously prescribed prescriptions.\r\n *\r\n * @param newPrescription\r\n * 		\r\n * @return A list of interaction warning messages.  The list is empty if no\r\ninteractions were detected.\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate List<String> checkInteraction(PrescriptionBean newPrescription) throws iTrustException {\r\n    ArrayList<String> warnings = new ArrayList<String>();\r\n    try {\r\n        SimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n        String startdate = needed.format(newPrescription.getStartDate());\r\n        String enddate = needed.format(newPrescription.getEndDate());\r\n        String drug = newPrescription.getMedication().getNDCode();\r\n        startdate = startdate.replaceAll(\"/\", \"-\");\r\n        enddate = enddate.replaceAll(\"/\", \"-\");\r\n        List<PrescriptionReportBean> prBeanList = rptDAO.byDate(getPid(), startdate, enddate);\r\n        List<DrugInteractionBean> dBeanList = interactionsDAO.getInteractions(drug);\r\n        for (PrescriptionReportBean prBean : prBeanList) {\r\n            String oldDrug = prBean.getPrescription().getMedication().getNDCode();\r\n            PrescriptionBean oldPrescription = prBean.getPrescription();\r\n            for (DrugInteractionBean dBean : dBeanList) {\r\n                String intDrug1 = dBean.getFirstDrug();\r\n                String intDrug2 = dBean.getSecondDrug();\r\n                if ((oldDrug.equals(intDrug1)) && (drug.equals(intDrug2))) {\r\n                    warnings.add(formatInteractionWarning(newPrescription, oldPrescription, dBean));\r\n                } else\r\n                    if ((oldDrug.equals(intDrug2)) && (drug.equals(intDrug1))) {\r\n                        warnings.add(formatInteractionWarning(newPrescription, oldPrescription, dBean));\r\n                    }\r\n\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return warnings;\r\n}'),(263,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',452,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkAllergy(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Checks to see if the patient is allergic to the given prescription.\r\n *\r\n * @return A list of allergy warnings.  The list is empty if no allergies\r\nwere detected.\r\n * @throws iTrustException\r\n * 		\r\n * @throws PrescriptionWarningException\r\n * 		\r\n */\r\nprivate List<String> checkAllergy(PrescriptionBean pres) throws PrescriptionWarningException, iTrustException {\r\n    ArrayList<String> warnings = new ArrayList<String>();\r\n    try {\r\n        List<AllergyBean> allergyList = allergyDAO.getAllergies(getPid());\r\n        MedicationBean medBean = pres.getMedication();\r\n        if (medBean != null) {\r\n            String newDrug = medBean.getNDCode();\r\n            for (AllergyBean allergyBean : allergyList) {\r\n                // Allergy: Aspirin. First Found: 12/20/2008.\r\n                if (newDrug.equals(allergyBean.getNDCode())) {\r\n                    warnings.add(formatAllergyWarning(allergyBean));\r\n                }\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return warnings;\r\n}'),(264,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',456,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.editPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Edits an existing prescription in the database.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * 		The prescription bean that has been changed.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void editPrescription(PrescriptionBean pres) throws iTrustException {\r\n    verifySaved();\r\n    checkForAllergiesAndInteractions(pres);\r\n    psDAO.edit(pres);\r\n}'),(265,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',451,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.addPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Add a prescription to this office visit.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void addPrescription(PrescriptionBean pres) throws iTrustException {\r\n    verifySaved();\r\n    checkForAllergiesAndInteractions(pres);\r\n    long medID = psDAO.add(pres);\r\n    for (OverrideReasonBean reason : pres.getReasons()) {\r\n        reason.setPresID(medID);\r\n        prescriptionOverrideDAO.add(reason);\r\n    }\r\n}'),(266,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',455,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.deletePrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Delete a prescription from this office visit.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void deletePrescription(PrescriptionBean pres) throws DBException, iTrustException {\r\n    verifySaved();\r\n    psDAO.remove(pres.getId());\r\n    prescriptionOverrideDAO.remove(pres.getId());\r\n}'),(267,'EditPrescriptionsForm form','edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',287,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',457,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)',0,'/**\r\n * Validates a prescription form, converts it into a bean, and returns that bean.\r\n *\r\n * @param form\r\n * 		The form to convert.\r\n * @param defaultInstructions\r\n * 		The default value given in the instructions\r\n * 		field.  If the field equals this value, the validation will fail.\r\n * @return \r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PrescriptionBean formToBean(EditPrescriptionsForm form, String defaultInstructions) throws DBException, FormValidationException {\r\n    EditPrescriptionsValidator validator = new EditPrescriptionsValidator(defaultInstructions);\r\n    validator.validate(form);\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID(getOvID());\r\n    MedicationBean med = medDAO.getNDCode(form.getMedID());\r\n    bean.setMedication(med);\r\n    bean.setDosage(Integer.valueOf(form.getDosage()));\r\n    bean.setStartDateStr(form.getStartDate());\r\n    bean.setEndDateStr(form.getEndDate());\r\n    bean.setInstructions(form.getInstructions());\r\n    ArrayList<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    for (String reason : form.getOverrideCodes()) {\r\n        OverrideReasonBean override = new OverrideReasonBean();\r\n        override.setORCode(reason);\r\n        reasons.add(override);\r\n    }\r\n    bean.setReasons(reasons);\r\n    bean.setOverrideReasonOther(form.getOverrideOther());\r\n    return bean;\r\n}'),(268,'edu.ncsu.csc.itrust.beans.PrescriptionBean','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',457,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)',1,'/**\r\n * Validates a prescription form, converts it into a bean, and returns that bean.\r\n *\r\n * @param form\r\n * 		The form to convert.\r\n * @param defaultInstructions\r\n * 		The default value given in the instructions\r\n * 		field.  If the field equals this value, the validation will fail.\r\n * @return \r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PrescriptionBean formToBean(EditPrescriptionsForm form, String defaultInstructions) throws DBException, FormValidationException {\r\n    EditPrescriptionsValidator validator = new EditPrescriptionsValidator(defaultInstructions);\r\n    validator.validate(form);\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID(getOvID());\r\n    MedicationBean med = medDAO.getNDCode(form.getMedID());\r\n    bean.setMedication(med);\r\n    bean.setDosage(Integer.valueOf(form.getDosage()));\r\n    bean.setStartDateStr(form.getStartDate());\r\n    bean.setEndDateStr(form.getEndDate());\r\n    bean.setInstructions(form.getInstructions());\r\n    ArrayList<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    for (String reason : form.getOverrideCodes()) {\r\n        OverrideReasonBean override = new OverrideReasonBean();\r\n        override.setORCode(reason);\r\n        reasons.add(override);\r\n    }\r\n    bean.setReasons(reasons);\r\n    bean.setOverrideReasonOther(form.getOverrideOther());\r\n    return bean;\r\n}'),(269,'String defaultInstructions','java.lang.String',0,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',457,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)',0,'/**\r\n * Validates a prescription form, converts it into a bean, and returns that bean.\r\n *\r\n * @param form\r\n * 		The form to convert.\r\n * @param defaultInstructions\r\n * 		The default value given in the instructions\r\n * 		field.  If the field equals this value, the validation will fail.\r\n * @return \r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PrescriptionBean formToBean(EditPrescriptionsForm form, String defaultInstructions) throws DBException, FormValidationException {\r\n    EditPrescriptionsValidator validator = new EditPrescriptionsValidator(defaultInstructions);\r\n    validator.validate(form);\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID(getOvID());\r\n    MedicationBean med = medDAO.getNDCode(form.getMedID());\r\n    bean.setMedication(med);\r\n    bean.setDosage(Integer.valueOf(form.getDosage()));\r\n    bean.setStartDateStr(form.getStartDate());\r\n    bean.setEndDateStr(form.getEndDate());\r\n    bean.setInstructions(form.getInstructions());\r\n    ArrayList<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    for (String reason : form.getOverrideCodes()) {\r\n        OverrideReasonBean override = new OverrideReasonBean();\r\n        override.setORCode(reason);\r\n        reasons.add(override);\r\n    }\r\n    bean.setReasons(reasons);\r\n    bean.setOverrideReasonOther(form.getOverrideOther());\r\n    return bean;\r\n}'),(270,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',463,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)',0,'/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(PrescriptionBean pres, List<String> warnings) throws DBException {\r\n    Email email = new Email();\r\n    PatientBean patient = patientDAO.getPatient(getPid());\r\n    PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    String message = (((\"Health care professional \" + (hcp.getFullName())) + \" has prescribed \") + (pres.getMedication().getDescription())) + \". However, the following warning(s) were found:\";\r\n    for (String warning : warnings) {\r\n        message += warning + \"\n\";\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Prescription warning\"));\r\n    email.setBody(message);\r\n    return email;\r\n}'),(271,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',463,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)',1,'/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(PrescriptionBean pres, List<String> warnings) throws DBException {\r\n    Email email = new Email();\r\n    PatientBean patient = patientDAO.getPatient(getPid());\r\n    PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    String message = (((\"Health care professional \" + (hcp.getFullName())) + \" has prescribed \") + (pres.getMedication().getDescription())) + \". However, the following warning(s) were found:\";\r\n    for (String warning : warnings) {\r\n        message += warning + \"\n\";\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Prescription warning\"));\r\n    email.setBody(message);\r\n    return email;\r\n}'),(272,'List<String> warnings','java.util.List',0,88,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction',463,'edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)',0,'/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(PrescriptionBean pres, List<String> warnings) throws DBException {\r\n    Email email = new Email();\r\n    PatientBean patient = patientDAO.getPatient(getPid());\r\n    PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    String message = (((\"Health care professional \" + (hcp.getFullName())) + \" has prescribed \") + (pres.getMedication().getDescription())) + \". However, the following warning(s) were found:\";\r\n    for (String warning : warnings) {\r\n        message += warning + \"\n\";\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Prescription warning\"));\r\n    email.setBody(message);\r\n    return email;\r\n}'),(273,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',481,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(274,'long hcpid','long',0,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',481,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(275,'String pidString','java.lang.String',0,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',481,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(276,'String ovIDString','java.lang.String',0,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',481,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(277,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',482,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(278,'long hcpid','long',0,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',482,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(279,'String pidString','java.lang.String',0,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',482,'edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}'),(280,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',483,'edu.ncsu.csc.itrust.action.EditProceduresAction.addProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void addProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.add(bean);\r\n}'),(281,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',485,'edu.ncsu.csc.itrust.action.EditProceduresAction.editProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void editProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.edit(bean);\r\n}'),(282,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,90,'edu.ncsu.csc.itrust.action.EditProceduresAction',484,'edu.ncsu.csc.itrust.action.EditProceduresAction.deleteProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public void deleteProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.remove(bean.getOvProcedureID());\r\n}'),(283,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',495,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(284,'long hcpid','long',0,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',495,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(285,'String pidString','java.lang.String',0,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',495,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(286,'String ovIDString','java.lang.String',0,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',495,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(287,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',496,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(288,'long hcpid','long',0,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',496,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(289,'String pidString','java.lang.String',0,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',496,'edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'public EditReferralsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(290,'long id','long',0,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',499,'edu.ncsu.csc.itrust.action.EditReferralsAction.getReferral(long)',0,'/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * 		The id of the desired referral.\r\n * @return ReferralBean\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(291,'edu.ncsu.csc.itrust.beans.ReferralBean','edu.ncsu.csc.itrust.beans.ReferralBean',274,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',499,'edu.ncsu.csc.itrust.action.EditReferralsAction.getReferral(long)',1,'/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * 		The id of the desired referral.\r\n * @return ReferralBean\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(292,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',497,'edu.ncsu.csc.itrust.action.EditReferralsAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Add a new referral to the database.  The id on the ReferralBean is\r\n * ignored.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void addReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.addReferral(bean);\n}\n */\r\n/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * 		The bean to edit.\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void editReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.editReferral(bean);\n}\n */\r\n/**\r\n * Delete an existing referral from the database.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void deleteReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.removeReferral(bean.getId());\n}\n */\r\n/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}'),(293,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,92,'edu.ncsu.csc.itrust.action.EditReferralsAction',498,'edu.ncsu.csc.itrust.action.EditReferralsAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}'),(294,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,94,'edu.ncsu.csc.itrust.action.EditRepresentativesAction',506,'edu.ncsu.csc.itrust.action.EditRepresentativesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient mid\r\n *\r\n * @param factory\r\n * 		The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the patient editing his/her representatives.\r\n * @param pidString\r\n * 		The MID of the representative in question.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(295,'long loggedInMID','long',0,94,'edu.ncsu.csc.itrust.action.EditRepresentativesAction',506,'edu.ncsu.csc.itrust.action.EditRepresentativesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient mid\r\n *\r\n * @param factory\r\n * 		The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the patient editing his/her representatives.\r\n * @param pidString\r\n * 		The MID of the representative in question.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(296,'String pidString','java.lang.String',0,94,'edu.ncsu.csc.itrust.action.EditRepresentativesAction',506,'edu.ncsu.csc.itrust.action.EditRepresentativesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates the patient mid\r\n *\r\n * @param factory\r\n * 		The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the patient editing his/her representatives.\r\n * @param pidString\r\n * 		The MID of the representative in question.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(297,'long pid','long',0,94,'edu.ncsu.csc.itrust.action.EditRepresentativesAction',508,'edu.ncsu.csc.itrust.action.EditRepresentativesAction.getRepresented(long)',0,'/**\r\n * Return a list of patients that pid represents\r\n *\r\n * @param pid\r\n * 		The id of the personnel we are looking up representees for.\r\n * @return a list of PatientBeans\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<PatientBean> getRepresented(long pid) throws iTrustException {\r\n    return patientDAO.getRepresented(pid);\r\n}'),(298,'String pidString','java.lang.String',0,94,'edu.ncsu.csc.itrust.action.EditRepresentativesAction',507,'edu.ncsu.csc.itrust.action.EditRepresentativesAction.addRepresentative(java.lang.String)',0,'/**\r\n * Makes the patient (pid) represent the input mid parameter\r\n *\r\n * @param pidString\r\n * 		the mid of the person who will be represented (the representee)\r\n * @return a message\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String addRepresentative(String pidString) throws iTrustException {\r\n    try {\r\n        long representee = Long.valueOf(pidString);\r\n        if ((authDAO.getUserRole(representee)) != (Role.PATIENT))\r\n            throw new iTrustException(\"This user is not a patient!\");\r\n        else\r\n            if ((super.pid) == representee)\r\n                throw new iTrustException(\"This user cannot represent themselves.\");\r\n\r\n\r\n        boolean confirm = patientDAO.addRepresentative(pid, representee);\r\n        if (confirm) {\r\n            return \"Patient represented\";\r\n        } else\r\n            return \"No change made\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        return \"MID not a number\";\r\n    }\r\n}'),(299,'String input','java.lang.String',0,94,'edu.ncsu.csc.itrust.action.EditRepresentativesAction',509,'edu.ncsu.csc.itrust.action.EditRepresentativesAction.removeRepresentative(java.lang.String)',0,'/**\r\n * Makes the patient (pid) no longer represent the input mid param\r\n *\r\n * @param input\r\n * 		the mid of the person be represented (representee)\r\n * @return a message\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String removeRepresentative(String input) throws iTrustException {\r\n    try {\r\n        long representee = Long.valueOf(input);\r\n        boolean confirm = patientDAO.removeRepresentative(pid, representee);\r\n        if (confirm) {\r\n            return \"Patient represented\";\r\n        } else\r\n            return \"No change made\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        return \"MID not a number\";\r\n    }\r\n}'),(300,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',519,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditSingleReferralAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    messageAction = new SendMessageAction(factory, hcpid);\r\n    this.hcpid = hcpid;\r\n}'),(301,'long hcpid','long',0,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',519,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public EditSingleReferralAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    messageAction = new SendMessageAction(factory, hcpid);\r\n    this.hcpid = hcpid;\r\n}'),(302,'long id','long',0,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',527,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReferral(long)',0,'/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(303,'edu.ncsu.csc.itrust.beans.ReferralBean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',527,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReferral(long)',1,'/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(304,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',520,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Add a new referral to the database.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void addReferral(ReferralBean bean) throws Exception {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"New referrals must be from the current HCP.\");\r\n    }\r\n    long id = referralDAO.addReferral(bean);\r\n    bean = referralDAO.getReferral(id);\r\n    sendReferralCreatedMessages(bean);\r\n}'),(305,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',522,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void editReferral(ReferralBean bean) throws iTrustException {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"Edited referrals must be from the current HCP.\");\r\n    }\r\n    referralDAO.editReferral(bean);\r\n}'),(306,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',521,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.deleteReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Delete a referral from the database.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void deleteReferral(ReferralBean bean) throws Exception {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"Deleted referrals must be from the current HCP.\");\r\n    }\r\n    referralDAO.removeReferral(bean.getId());\r\n    sendReferralCancelledMessages(bean);\r\n}'),(307,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',524,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}'),(308,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',525,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}'),(309,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',526,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPSpecialty(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public String getReceivingHCPSpecialty(ReferralBean bean) throws iTrustException {\r\n    String s = personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty();\r\n    return s == null ? \"\" : s;\r\n}'),(310,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',523,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.getOfficeVisitDate(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public String getOfficeVisitDate(ReferralBean bean) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(bean.getOvid()).getVisitDateStr();\r\n}'),(311,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',529,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCreatedMessages(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Send messages to the users associated with creating a referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void sendReferralCreatedMessages(ReferralBean bean) throws Exception {\r\n    StringBuilder body = new StringBuilder();\r\n    body.append(\"Referral information:\n\");\r\n    String senderSpecialty = personnelDAO.getPersonnel(bean.getSenderID()).getSpecialty();\r\n    String receiverSpecialty = personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty();\r\n    senderSpecialty = (senderSpecialty == null) ? \"no specialty\" : senderSpecialty;\r\n    receiverSpecialty = (receiverSpecialty == null) ? \"no specialty\" : receiverSpecialty;\r\n    body.append(((((\"Sending HCP: \" + (personnelDAO.getName(bean.getSenderID()))) + \" (\") + senderSpecialty) + \")\n\"));\r\n    body.append(((((\"Receiving HCP: \" + (personnelDAO.getName(bean.getReceiverID()))) + \" (\") + receiverSpecialty) + \")\n\"));\r\n    body.append(((\"Patient: \" + (getPatientName(bean))) + \"\n\"));\r\n    body.append(((\"Notes: \" + (bean.getReferralDetails())) + \"\n\"));\r\n    body.append(((\"Created on: \" + (bean.getTimeStamp())) + \"\n\"));\r\n    MessageBean senderMsg = new MessageBean();\r\n    senderMsg.setFrom(bean.getSenderID());\r\n    senderMsg.setTo(bean.getSenderID());\r\n    senderMsg.setBody(body.toString());\r\n    senderMsg.setSubject(\"You Created a New Referral\");\r\n    senderMsg.setRead(0);\r\n    messageAction.sendMessage(senderMsg);\r\n    MessageBean receiverMsg = new MessageBean();\r\n    receiverMsg.setFrom(bean.getSenderID());\r\n    receiverMsg.setTo(bean.getReceiverID());\r\n    receiverMsg.setBody(body.toString());\r\n    receiverMsg.setSubject(\"You Received a New Referral\");\r\n    receiverMsg.setRead(0);\r\n    messageAction.sendMessage(receiverMsg);\r\n    MessageBean patientMsg = new MessageBean();\r\n    patientMsg.setFrom(bean.getSenderID());\r\n    patientMsg.setTo(bean.getPatientID());\r\n    patientMsg.setBody(body.toString());\r\n    patientMsg.setSubject(\"You Received a New Referral\");\r\n    patientMsg.setRead(0);\r\n    messageAction.sendMessage(patientMsg);\r\n}'),(312,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,96,'edu.ncsu.csc.itrust.action.EditSingleReferralAction',528,'edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCancelledMessages(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Send messages to the users associated with canceling a referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void sendReferralCancelledMessages(ReferralBean bean) throws Exception {\r\n    StringBuilder body = new StringBuilder();\r\n    body.append(((\"The referral created on \" + (bean.getTimeStamp())) + \"has been deleted.\n\n\"));\r\n    body.append(\"The referral is reproduced here for your convienence:\n\");\r\n    body.append(((((\"Sending HCP: \" + (personnelDAO.getName(bean.getSenderID()))) + \" (\") + (personnelDAO.getPersonnel(bean.getSenderID()).getSpecialty())) + \")\n\"));\r\n    body.append(((((\"Receiving HCP: \" + (personnelDAO.getName(bean.getReceiverID()))) + \" (\") + (personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty())) + \")\n\"));\r\n    body.append(((\"Patient: \" + (getPatientName(bean))) + \"\n\"));\r\n    body.append(((\"Notes: \" + (bean.getReferralDetails())) + \"\n\"));\r\n    body.append(((\"Created on: \" + (bean.getTimeStamp())) + \"\n\"));\r\n    MessageBean receiverMsg = new MessageBean();\r\n    receiverMsg.setFrom(bean.getSenderID());\r\n    receiverMsg.setTo(bean.getReceiverID());\r\n    receiverMsg.setBody(body.toString());\r\n    receiverMsg.setSubject(\"Your Referral Was Cancelled\");\r\n    receiverMsg.setRead(0);\r\n    messageAction.sendMessage(receiverMsg);\r\n    MessageBean patientMsg = new MessageBean();\r\n    patientMsg.setFrom(bean.getSenderID());\r\n    patientMsg.setTo(bean.getPatientID());\r\n    patientMsg.setBody(body.toString());\r\n    patientMsg.setSubject(\"Your Referral Was Cancelled\");\r\n    patientMsg.setRead(0);\r\n    messageAction.sendMessage(patientMsg);\r\n}'),(313,'List<MessageBean> msgs','java.util.List',0,97,'edu.ncsu.csc.itrust.action.EditSingleReferralActionTest',531,'edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.countMessageWithSubject(java.util.List,java.lang.String)',0,'// helper method\r\nprivate int countMessageWithSubject(List<MessageBean> msgs, String subject) {\r\n    int count = 0;\r\n    for (MessageBean m : msgs) {\r\n        if (m.getSubject().equals(subject)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}'),(314,'String subject','java.lang.String',0,97,'edu.ncsu.csc.itrust.action.EditSingleReferralActionTest',531,'edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.countMessageWithSubject(java.util.List,java.lang.String)',0,'// helper method\r\nprivate int countMessageWithSubject(List<MessageBean> msgs, String subject) {\r\n    int count = 0;\r\n    for (MessageBean m : msgs) {\r\n        if (m.getSubject().equals(subject)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}'),(315,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,98,'edu.ncsu.csc.itrust.action.EmergencyReportAction',536,'edu.ncsu.csc.itrust.action.EmergencyReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The super class handles validating the pid Logs viewing of the report\r\n *\r\n * @param factory\r\n * 		The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is looking at the emergency report.\r\n * @param pidString\r\n * 		The ID of the patient whose report is being generated.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    emailutil = new EmailUtil(factory);\r\n    pb = patientDAO.getPatient(this.pid);\r\n    emailutil.sendEmail(makeEmail());\r\n}'),(316,'long loggedInMID','long',0,98,'edu.ncsu.csc.itrust.action.EmergencyReportAction',536,'edu.ncsu.csc.itrust.action.EmergencyReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The super class handles validating the pid Logs viewing of the report\r\n *\r\n * @param factory\r\n * 		The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is looking at the emergency report.\r\n * @param pidString\r\n * 		The ID of the patient whose report is being generated.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    emailutil = new EmailUtil(factory);\r\n    pb = patientDAO.getPatient(this.pid);\r\n    emailutil.sendEmail(makeEmail());\r\n}'),(317,'String pidString','java.lang.String',0,98,'edu.ncsu.csc.itrust.action.EmergencyReportAction',536,'edu.ncsu.csc.itrust.action.EmergencyReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * The super class handles validating the pid Logs viewing of the report\r\n *\r\n * @param factory\r\n * 		The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is looking at the emergency report.\r\n * @param pidString\r\n * 		The ID of the patient whose report is being generated.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    emailutil = new EmailUtil(factory);\r\n    pb = patientDAO.getPatient(this.pid);\r\n    emailutil.sendEmail(makeEmail());\r\n}'),(318,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,100,'edu.ncsu.csc.itrust.action.EventLoggingAction',550,'edu.ncsu.csc.itrust.action.EventLoggingAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving the logs.\r\n */\r\npublic EventLoggingAction(DAOFactory factory) {\r\n    this.transDAO = factory.getTransactionDAO();\r\n}'),(319,'TransactionType type','edu.ncsu.csc.itrust.enums.TransactionType',490,100,'edu.ncsu.csc.itrust.action.EventLoggingAction',551,'edu.ncsu.csc.itrust.action.EventLoggingAction.logEvent(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logEvent(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    this.transDAO.logTransaction(type, loggedInMID, secondaryMID, addedInfo);\r\n}'),(320,'long loggedInMID','long',0,100,'edu.ncsu.csc.itrust.action.EventLoggingAction',551,'edu.ncsu.csc.itrust.action.EventLoggingAction.logEvent(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logEvent(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    this.transDAO.logTransaction(type, loggedInMID, secondaryMID, addedInfo);\r\n}'),(321,'long secondaryMID','long',0,100,'edu.ncsu.csc.itrust.action.EventLoggingAction',551,'edu.ncsu.csc.itrust.action.EventLoggingAction.logEvent(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logEvent(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    this.transDAO.logTransaction(type, loggedInMID, secondaryMID, addedInfo);\r\n}'),(322,'String addedInfo','java.lang.String',0,100,'edu.ncsu.csc.itrust.action.EventLoggingAction',551,'edu.ncsu.csc.itrust.action.EventLoggingAction.logEvent(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logEvent(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    this.transDAO.logTransaction(type, loggedInMID, secondaryMID, addedInfo);\r\n}'),(323,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,102,'edu.ncsu.csc.itrust.action.FindExpertAction',555,'edu.ncsu.csc.itrust.action.FindExpertAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Constructor simply is used to initialize the DAOs\r\n *\r\n * @param factory\r\n * 		used to initialize DAOs\r\n */\r\npublic FindExpertAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n    hospitalsDAO = new HospitalsDAO(factory);\r\n    personnelDAO = new PersonnelDAO(factory);\r\n}'),(324,'String specialty','java.lang.String',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',559,'edu.ncsu.csc.itrust.action.FindExpertAction.findHospitalsBySpecialty(java.lang.String,long)',0,'/**\r\n * Main method used to find the hospitals and all specified personnel within range\r\n *\r\n * @param distance\r\n * 		The maximum distance that a hospital must be within range in order for it to return\r\n * @param specialty\r\n * 		The specialty that the user is interested in\r\n * @param lat\r\n * 		The latitude of the address that the user is located at\r\n * @param lng\r\n * 		The longitude of the address that the user is located at\r\n * @return A relationship between hospitals within the defined proximity and the specified experts at the hospital.\r\n */\r\npublic HashMap<HospitalBean, List<PersonnelBean>> findHospitalsBySpecialty(String specialty, long loggedInMID) {\r\n    HashMap<HospitalBean, List<PersonnelBean>> experts = null;\r\n    try {\r\n        // Grab all hospitals and filter them based on distance\r\n        List<HospitalBean> hospitals = filterHospitals(hospitalsDAO.getAllHospitals(), loggedInMID);\r\n        // Find experts in hospitals\r\n        experts = findExperts(hospitals, specialty);\r\n    } catch (DBException e) {\r\n        // \r\n    }\r\n    return experts;\r\n}'),(325,'long loggedInMID','long',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',559,'edu.ncsu.csc.itrust.action.FindExpertAction.findHospitalsBySpecialty(java.lang.String,long)',0,'/**\r\n * Main method used to find the hospitals and all specified personnel within range\r\n *\r\n * @param distance\r\n * 		The maximum distance that a hospital must be within range in order for it to return\r\n * @param specialty\r\n * 		The specialty that the user is interested in\r\n * @param lat\r\n * 		The latitude of the address that the user is located at\r\n * @param lng\r\n * 		The longitude of the address that the user is located at\r\n * @return A relationship between hospitals within the defined proximity and the specified experts at the hospital.\r\n */\r\npublic HashMap<HospitalBean, List<PersonnelBean>> findHospitalsBySpecialty(String specialty, long loggedInMID) {\r\n    HashMap<HospitalBean, List<PersonnelBean>> experts = null;\r\n    try {\r\n        // Grab all hospitals and filter them based on distance\r\n        List<HospitalBean> hospitals = filterHospitals(hospitalsDAO.getAllHospitals(), loggedInMID);\r\n        // Find experts in hospitals\r\n        experts = findExperts(hospitals, specialty);\r\n    } catch (DBException e) {\r\n        // \r\n    }\r\n    return experts;\r\n}'),(326,'List<HospitalBean> hospitals','java.util.List',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',558,'edu.ncsu.csc.itrust.action.FindExpertAction.findExperts(java.util.List,java.lang.String)',0,'/**\r\n * Method used to find experts of specified specialty from hospitals that are in range\r\n *\r\n * @param hospitals\r\n * 		The hospitals within the proximity of the user\r\n * @param specialty\r\n * 		The expertise specified\r\n * @return A relationship between the hospitals within proximity and the personnel with the specified expertise within them.\r\n */\r\npublic HashMap<HospitalBean, List<PersonnelBean>> findExperts(List<HospitalBean> hospitals, String specialty) {\r\n    HashMap<HospitalBean, List<PersonnelBean>> experts = new HashMap<HospitalBean, List<PersonnelBean>>();\r\n    try {\r\n        // Go through all nearby hospitals\r\n        for (HospitalBean hospital : hospitals) {\r\n            // Put the specified experts into a hashmap with the hospital\r\n            experts.put(hospital, personnelDAO.getPersonnelFromHospital(hospital.getHospitalID(), specialty));\r\n        }\r\n    } catch (DBException e) {\r\n        // \r\n    }\r\n    return experts;\r\n}'),(327,'String specialty','java.lang.String',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',558,'edu.ncsu.csc.itrust.action.FindExpertAction.findExperts(java.util.List,java.lang.String)',0,'/**\r\n * Method used to find experts of specified specialty from hospitals that are in range\r\n *\r\n * @param hospitals\r\n * 		The hospitals within the proximity of the user\r\n * @param specialty\r\n * 		The expertise specified\r\n * @return A relationship between the hospitals within proximity and the personnel with the specified expertise within them.\r\n */\r\npublic HashMap<HospitalBean, List<PersonnelBean>> findExperts(List<HospitalBean> hospitals, String specialty) {\r\n    HashMap<HospitalBean, List<PersonnelBean>> experts = new HashMap<HospitalBean, List<PersonnelBean>>();\r\n    try {\r\n        // Go through all nearby hospitals\r\n        for (HospitalBean hospital : hospitals) {\r\n            // Put the specified experts into a hashmap with the hospital\r\n            experts.put(hospital, personnelDAO.getPersonnelFromHospital(hospital.getHospitalID(), specialty));\r\n        }\r\n    } catch (DBException e) {\r\n        // \r\n    }\r\n    return experts;\r\n}'),(328,'List<HospitalBean> hospitals','java.util.List',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',557,'edu.ncsu.csc.itrust.action.FindExpertAction.filterHospitals(java.util.List,long)',0,'/**\r\n * Filters hospitals down to just the hospitals in the specified range of the user\r\n *\r\n * @param hospitals\r\n * 		Hospitals to filter\r\n * @param patientZip\r\n * 		patients zipcode\r\n * @return All hospitals within the specified range of the user\r\n */\r\npublic List<HospitalBean> filterHospitals(List<HospitalBean> hospitals, long loggedInMID) {\r\n    List<HospitalBean> inRange = new ArrayList<HospitalBean>();\r\n    return inRange;\r\n}'),(329,'long loggedInMID','long',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',557,'edu.ncsu.csc.itrust.action.FindExpertAction.filterHospitals(java.util.List,long)',0,'/**\r\n * Filters hospitals down to just the hospitals in the specified range of the user\r\n *\r\n * @param hospitals\r\n * 		Hospitals to filter\r\n * @param patientZip\r\n * 		patients zipcode\r\n * @return All hospitals within the specified range of the user\r\n */\r\npublic List<HospitalBean> filterHospitals(List<HospitalBean> hospitals, long loggedInMID) {\r\n    List<HospitalBean> inRange = new ArrayList<HospitalBean>();\r\n    return inRange;\r\n}'),(330,'Double lat1','java.lang.Double',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',556,'edu.ncsu.csc.itrust.action.FindExpertAction.calculateDistance(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)',0,'/**\r\n * Method to calculate the distance between the two GPS coordinates of the user and hospital\r\n *\r\n * @param lat1\r\n * 		Latitude of user\r\n * @param lat2\r\n * 		Latitude of hospital\r\n * @param lng1\r\n * 		Longitude of user\r\n * @param lng2\r\n * 		Longitude of hospital\r\n * @return The distance between the user and hospital\r\n */\r\npublic Double calculateDistance(Double lat1, Double lat2, Double lng1, Double lng2) {\r\n    Double deltaLat = Math.toRadians((lat2 - lat1));\r\n    Double deltaLng = Math.toRadians((lng2 - lng1));\r\n    Double rlat1 = Math.toRadians(lat1);\r\n    Double rlat2 = Math.toRadians(lat2);\r\n    Double temp = ((Math.sin((deltaLat / 2))) * (Math.sin((deltaLat / 2)))) + ((((Math.sin((deltaLng / 2))) * (Math.sin((deltaLng / 2)))) * (Math.cos(rlat1))) * (Math.cos(rlat2)));\r\n    return ((FindExpertAction.RADIUS) * 2) * (Math.atan2(Math.sqrt(temp), Math.sqrt((1 - temp))));\r\n}'),(331,'Double lat2','java.lang.Double',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',556,'edu.ncsu.csc.itrust.action.FindExpertAction.calculateDistance(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)',0,'/**\r\n * Method to calculate the distance between the two GPS coordinates of the user and hospital\r\n *\r\n * @param lat1\r\n * 		Latitude of user\r\n * @param lat2\r\n * 		Latitude of hospital\r\n * @param lng1\r\n * 		Longitude of user\r\n * @param lng2\r\n * 		Longitude of hospital\r\n * @return The distance between the user and hospital\r\n */\r\npublic Double calculateDistance(Double lat1, Double lat2, Double lng1, Double lng2) {\r\n    Double deltaLat = Math.toRadians((lat2 - lat1));\r\n    Double deltaLng = Math.toRadians((lng2 - lng1));\r\n    Double rlat1 = Math.toRadians(lat1);\r\n    Double rlat2 = Math.toRadians(lat2);\r\n    Double temp = ((Math.sin((deltaLat / 2))) * (Math.sin((deltaLat / 2)))) + ((((Math.sin((deltaLng / 2))) * (Math.sin((deltaLng / 2)))) * (Math.cos(rlat1))) * (Math.cos(rlat2)));\r\n    return ((FindExpertAction.RADIUS) * 2) * (Math.atan2(Math.sqrt(temp), Math.sqrt((1 - temp))));\r\n}'),(332,'Double lng1','java.lang.Double',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',556,'edu.ncsu.csc.itrust.action.FindExpertAction.calculateDistance(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)',0,'/**\r\n * Method to calculate the distance between the two GPS coordinates of the user and hospital\r\n *\r\n * @param lat1\r\n * 		Latitude of user\r\n * @param lat2\r\n * 		Latitude of hospital\r\n * @param lng1\r\n * 		Longitude of user\r\n * @param lng2\r\n * 		Longitude of hospital\r\n * @return The distance between the user and hospital\r\n */\r\npublic Double calculateDistance(Double lat1, Double lat2, Double lng1, Double lng2) {\r\n    Double deltaLat = Math.toRadians((lat2 - lat1));\r\n    Double deltaLng = Math.toRadians((lng2 - lng1));\r\n    Double rlat1 = Math.toRadians(lat1);\r\n    Double rlat2 = Math.toRadians(lat2);\r\n    Double temp = ((Math.sin((deltaLat / 2))) * (Math.sin((deltaLat / 2)))) + ((((Math.sin((deltaLng / 2))) * (Math.sin((deltaLng / 2)))) * (Math.cos(rlat1))) * (Math.cos(rlat2)));\r\n    return ((FindExpertAction.RADIUS) * 2) * (Math.atan2(Math.sqrt(temp), Math.sqrt((1 - temp))));\r\n}'),(333,'Double lng2','java.lang.Double',0,102,'edu.ncsu.csc.itrust.action.FindExpertAction',556,'edu.ncsu.csc.itrust.action.FindExpertAction.calculateDistance(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)',0,'/**\r\n * Method to calculate the distance between the two GPS coordinates of the user and hospital\r\n *\r\n * @param lat1\r\n * 		Latitude of user\r\n * @param lat2\r\n * 		Latitude of hospital\r\n * @param lng1\r\n * 		Longitude of user\r\n * @param lng2\r\n * 		Longitude of hospital\r\n * @return The distance between the user and hospital\r\n */\r\npublic Double calculateDistance(Double lat1, Double lat2, Double lng1, Double lng2) {\r\n    Double deltaLat = Math.toRadians((lat2 - lat1));\r\n    Double deltaLng = Math.toRadians((lng2 - lng1));\r\n    Double rlat1 = Math.toRadians(lat1);\r\n    Double rlat2 = Math.toRadians(lat2);\r\n    Double temp = ((Math.sin((deltaLat / 2))) * (Math.sin((deltaLat / 2)))) + ((((Math.sin((deltaLng / 2))) * (Math.sin((deltaLng / 2)))) * (Math.cos(rlat1))) * (Math.cos(rlat2)));\r\n    return ((FindExpertAction.RADIUS) * 2) * (Math.atan2(Math.sqrt(temp), Math.sqrt((1 - temp))));\r\n}'),(334,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',565,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is viewing the calendar\r\n */\r\npublic GenerateCalendarAction(DAOFactory factory, long loggedInMID) {\r\n    a_action = new ViewMyApptsAction(factory, loggedInMID);\r\n    r_action = new ViewMyRecordsAction(factory, loggedInMID);\r\n    send = new ArrayList<ApptBean>();\r\n    apptTypeDAO = factory.getApptTypeDAO();\r\n}'),(335,'long loggedInMID','long',0,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',565,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is viewing the calendar\r\n */\r\npublic GenerateCalendarAction(DAOFactory factory, long loggedInMID) {\r\n    a_action = new ViewMyApptsAction(factory, loggedInMID);\r\n    r_action = new ViewMyRecordsAction(factory, loggedInMID);\r\n    send = new ArrayList<ApptBean>();\r\n    apptTypeDAO = factory.getApptTypeDAO();\r\n}'),(336,'int thisMonth','int',0,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',566,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.getApptsTable(int,int)',0,'/**\r\n * Creates a hash table with all of the Appointments to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * 		The month of the calendar to be rendered\r\n * @param thisYear\r\n * 		The year of the calendar to be rendered\r\n * @return A Hashtable containing the AppointmentBeans to be rendered\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic Hashtable<Integer, ArrayList<ApptBean>> getApptsTable(int thisMonth, int thisYear) throws SQLException {\r\n    List<ApptBean> appts = a_action.getAllMyAppointments();\r\n    Hashtable<Integer, ArrayList<ApptBean>> atable = new Hashtable<Integer, ArrayList<ApptBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (ApptBean b : appts) {\r\n        a.setTimeInMillis(b.getDate().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(atable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                atable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<ApptBean>());\r\n\r\n            ArrayList<ApptBean> l = atable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            send.add(b);\r\n            atable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return atable;\r\n}'),(337,'int thisYear','int',0,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',566,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.getApptsTable(int,int)',0,'/**\r\n * Creates a hash table with all of the Appointments to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * 		The month of the calendar to be rendered\r\n * @param thisYear\r\n * 		The year of the calendar to be rendered\r\n * @return A Hashtable containing the AppointmentBeans to be rendered\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic Hashtable<Integer, ArrayList<ApptBean>> getApptsTable(int thisMonth, int thisYear) throws SQLException {\r\n    List<ApptBean> appts = a_action.getAllMyAppointments();\r\n    Hashtable<Integer, ArrayList<ApptBean>> atable = new Hashtable<Integer, ArrayList<ApptBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (ApptBean b : appts) {\r\n        a.setTimeInMillis(b.getDate().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(atable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                atable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<ApptBean>());\r\n\r\n            ArrayList<ApptBean> l = atable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            send.add(b);\r\n            atable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return atable;\r\n}'),(338,'int thisMonth','int',0,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',569,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.getOfficeVisitsTable(int,int)',0,'/**\r\n * Creates a hash table with all of the Office Visits to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * 		The month of the calendar to be rendered\r\n * @param thisYear\r\n * 		The year of the calendar to be rendered\r\n * @return A Hashtable containing the OfficeVisitBeans to be rendered\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic Hashtable<Integer, ArrayList<OfficeVisitBean>> getOfficeVisitsTable(int thisMonth, int thisYear) throws iTrustException {\r\n    List<OfficeVisitBean> officeVisits = r_action.getAllOfficeVisits();\r\n    Hashtable<Integer, ArrayList<OfficeVisitBean>> rtable = new Hashtable<Integer, ArrayList<OfficeVisitBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (OfficeVisitBean b : officeVisits) {\r\n        a.setTimeInMillis(b.getVisitDate().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(rtable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                rtable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<OfficeVisitBean>());\r\n\r\n            ArrayList<OfficeVisitBean> l = rtable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            rtable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return rtable;\r\n}'),(339,'int thisYear','int',0,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',569,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.getOfficeVisitsTable(int,int)',0,'/**\r\n * Creates a hash table with all of the Office Visits to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * 		The month of the calendar to be rendered\r\n * @param thisYear\r\n * 		The year of the calendar to be rendered\r\n * @return A Hashtable containing the OfficeVisitBeans to be rendered\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic Hashtable<Integer, ArrayList<OfficeVisitBean>> getOfficeVisitsTable(int thisMonth, int thisYear) throws iTrustException {\r\n    List<OfficeVisitBean> officeVisits = r_action.getAllOfficeVisits();\r\n    Hashtable<Integer, ArrayList<OfficeVisitBean>> rtable = new Hashtable<Integer, ArrayList<OfficeVisitBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (OfficeVisitBean b : officeVisits) {\r\n        a.setTimeInMillis(b.getVisitDate().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(rtable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                rtable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<OfficeVisitBean>());\r\n\r\n            ArrayList<OfficeVisitBean> l = rtable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            rtable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return rtable;\r\n}'),(340,'int thisMonth','int',0,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',568,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.getLabProceduresTable(int,int)',0,'/**\r\n * Creates a hash table with all of the lab procedures to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * 		The month of the calendar to be rendered\r\n * @param thisYear\r\n * 		The year of the calendar to be rendered\r\n * @return A Hashtable containing the LabProcedureBeans to be rendered\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic Hashtable<Integer, ArrayList<LabProcedureBean>> getLabProceduresTable(int thisMonth, int thisYear) throws iTrustException {\r\n    List<LabProcedureBean> procs = r_action.getLabs();\r\n    Hashtable<Integer, ArrayList<LabProcedureBean>> ptable = new Hashtable<Integer, ArrayList<LabProcedureBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (LabProcedureBean b : procs) {\r\n        a.setTimeInMillis(b.getTimestamp().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(ptable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                ptable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<LabProcedureBean>());\r\n\r\n            ArrayList<LabProcedureBean> l = ptable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            ptable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return ptable;\r\n}'),(341,'int thisYear','int',0,104,'edu.ncsu.csc.itrust.action.GenerateCalendarAction',568,'edu.ncsu.csc.itrust.action.GenerateCalendarAction.getLabProceduresTable(int,int)',0,'/**\r\n * Creates a hash table with all of the lab procedures to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * 		The month of the calendar to be rendered\r\n * @param thisYear\r\n * 		The year of the calendar to be rendered\r\n * @return A Hashtable containing the LabProcedureBeans to be rendered\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic Hashtable<Integer, ArrayList<LabProcedureBean>> getLabProceduresTable(int thisMonth, int thisYear) throws iTrustException {\r\n    List<LabProcedureBean> procs = r_action.getLabs();\r\n    Hashtable<Integer, ArrayList<LabProcedureBean>> ptable = new Hashtable<Integer, ArrayList<LabProcedureBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (LabProcedureBean b : procs) {\r\n        a.setTimeInMillis(b.getTimestamp().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(ptable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                ptable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<LabProcedureBean>());\r\n\r\n            ArrayList<LabProcedureBean> l = ptable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            ptable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return ptable;\r\n}'),(342,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,106,'edu.ncsu.csc.itrust.action.GetUserNameAction',578,'edu.ncsu.csc.itrust.action.GetUserNameAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used for creating the DAOs for this action.\r\n */\r\npublic GetUserNameAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(343,'String inputMID','java.lang.String',0,106,'edu.ncsu.csc.itrust.action.GetUserNameAction',579,'edu.ncsu.csc.itrust.action.GetUserNameAction.getUserName(java.lang.String)',0,'/**\r\n * Returns the persons name that matches the inputMID param\r\n *\r\n * @param inputMID\r\n * 		The MID to look up.\r\n * @return the persons name\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getUserName(String inputMID) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(inputMID);\r\n        return factory.getAuthDAO().getUserName(mid);\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"MID not in correct form\");\r\n    }\r\n}'),(344,'String typeName','java.lang.String',0,108,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType',602,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType.-init-(java.lang.String)',0,'private ReminderType(String typeName) {\r\n    this.typeName = typeName;\r\n}'),(345,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',585,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		MID of the person who is logged in\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic GetVisitRemindersAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    visitReminderDAO = factory.getVisitRemindersDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n}'),(346,'long loggedInMID','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',585,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		MID of the person who is logged in\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic GetVisitRemindersAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    visitReminderDAO = factory.getVisitRemindersDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n}'),(347,'String name','java.lang.String',0,108,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType',603,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType.getReminderType(java.lang.String)',0,'/**\r\n * Gets the ReminderType for the name passed as a param\r\n *\r\n * @param name\r\n * 		\r\n * @return the ReminderType associated with the name\r\n */\r\npublic static GetVisitRemindersAction.ReminderType getReminderType(String name) {\r\n    return GetVisitRemindersAction.ReminderType.map.get(name);\r\n}'),(348,'GetVisitRemindersAction.ReminderType type','edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType',108,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',590,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.getVisitReminders(edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType)',0,'/**\r\n * Returns a list of VisitReminderReturnForms for the type passed in as a param\r\n *\r\n * @param type\r\n * 		the ReminderType\r\n * @return the list of VisitReminderReturnForms\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<VisitReminderReturnForm> getVisitReminders(GetVisitRemindersAction.ReminderType type) throws FormValidationException, iTrustException {\r\n    if (null == type)\r\n        throw new iTrustException(\"Reminder Type DNE\");\r\n\r\n    switch (type) {\r\n        case DIAGNOSED_CARE_NEEDERS :\r\n            return visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID);\r\n            // return stripDupes(visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID));\r\n        case FLU_SHOT_NEEDERS :\r\n            return visitReminderDAO.getFluShotDelinquents(loggedInMID);\r\n        case IMMUNIZATION_NEEDERS :\r\n            return getImmunizationNeeders(loggedInMID);\r\n        default :\r\n            throw new iTrustException(\"Reminder Type DNE\");\r\n    }\r\n}'),(349,'long mid','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',589,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.getImmunizationNeeders(long)',0,'/**\r\n * Gets a list of anyone who need immunizations\r\n *\r\n * @param mid\r\n * 		the HCP whose patients are being checked\r\n * @return a list of all the people who need immunizations--done in a visit reminder\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate List<VisitReminderReturnForm> getImmunizationNeeders(long mid) throws iTrustException {\r\n    List<VisitReminderReturnForm> formList;\r\n    List<VisitReminderReturnForm> needList = new ArrayList<VisitReminderReturnForm>();\r\n    String reason = \"\";\r\n    // Get list of patients that designate this HCP\r\n    formList = visitReminderDAO.getPatients(mid);\r\n    for (VisitReminderReturnForm r : formList) {\r\n        reason = checkImmunizations(r.getPatientID());\r\n        if (0 < (reason.length())) {\r\n            needList.add(r);\r\n            r.addVisitFlag(new VisitFlag(VisitFlag.IMMUNIZATION, reason));\r\n        }\r\n    }\r\n    return needList;\r\n}'),(350,'long pid','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',586,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.checkImmunizations(long)',0,'/**\r\n * Checks a patient to see what immunizations they need\r\n *\r\n * @param pid\r\n * 		patient to be checked\r\n * @return patient list of those lacking immunizations according to the schedule\r\n */\r\nprivate String checkImmunizations(long pid) throws iTrustException {\r\n    String reason = \"\";\r\n    List<ProcedureBean> procs = patientDAO.getProcedures(pid);\r\n    PatientBean patient = patientDAO.getPatient(pid);\r\n    // long patientAge = patient.getAgeInWeeks();\r\n    Date patientDOB = patient.getDateOfBirth();\r\n    Gender gen = patient.getGender();\r\n    int hepB = 0;\r\n    long hepBTime = 0;\r\n    int rota = 0;\r\n    long rotaTime = 0;\r\n    int diptet = 0;\r\n    long deptetTime = 0;\r\n    int haemoflu = 0;\r\n    long haemofluTime = 0;\r\n    long haemofluTimeFirst = 0;\r\n    int pneumo = 0;\r\n    long pneumoTime = 0;\r\n    long pneumofluTimeFirst = 0;\r\n    int polio = 0;\r\n    long polioTime = 0;\r\n    int measles = 0;\r\n    long measlesTime = 0;\r\n    int varicella = 0;\r\n    long varicellaTime = 0;\r\n    int hepA = 0;\r\n    long hepATime = 0;\r\n    int hpv = 0;\r\n    long hpvTime = 0;\r\n    for (ProcedureBean proc : procs) {\r\n        String cpt = proc.getCPTCode();\r\n        // Hep B (90371)\r\n        if (cpt.equals(\"90371\")) {\r\n            hepB++;\r\n            hepBTime = proc.getDate().getTime();\r\n        } else// Rotavirus (90681)\r\n\r\n            if (cpt.equals(\"90681\")) {\r\n                rota++;\r\n                rotaTime = proc.getDate().getTime();\r\n            } else// Diptheria, Tetanus, Pertussis (90696)\r\n\r\n                if (cpt.equals(\"90696\")) {\r\n                    diptet++;\r\n                    deptetTime = proc.getDate().getTime();\r\n                } else// Haemophilus influenza (90645)\r\n\r\n                    if (cpt.equals(\"90645\")) {\r\n                        if (0 == haemoflu)\r\n                            haemofluTimeFirst = proc.getDate().getTime();\r\n\r\n                        haemoflu++;\r\n                        haemofluTime = proc.getDate().getTime();\r\n                    } else// Pneumococcal (90669)\r\n\r\n                        if (cpt.equals(\"90669\")) {\r\n                            if (0 == pneumo)\r\n                                pneumofluTimeFirst = proc.getDate().getTime();\r\n\r\n                            pneumo++;\r\n                            pneumoTime = proc.getDate().getTime();\r\n                        } else// Poliovirus (90712)\r\n\r\n                            if (cpt.equals(\"90712\")) {\r\n                                polio++;\r\n                                polioTime = proc.getDate().getTime();\r\n                            } else// Measles, Mumps, Rubella (90707)\r\n\r\n                                if (cpt.equals(\"90707\")) {\r\n                                    measles++;\r\n                                    measlesTime = proc.getDate().getTime();\r\n                                } else// Varicella (90396)\r\n\r\n                                    if (cpt.equals(\"90396\")) {\r\n                                        varicella++;\r\n                                        varicellaTime = proc.getDate().getTime();\r\n                                    } else// Hep A (90633)\r\n\r\n                                        if (cpt.equals(\"90633\")) {\r\n                                            hepA++;\r\n                                            hepATime = proc.getDate().getTime();\r\n                                        } else// Human Papillomaavirus (90649)\r\n\r\n                                            if (cpt.equals(\"90649\")) {\r\n                                                hpv++;\r\n                                                hpvTime = proc.getDate().getTime();\r\n                                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    if (3 > hepB) {\r\n        reason += GetVisitRemindersAction.testHepB(hepB, patientDOB, hepBTime);\r\n    }\r\n    if (3 > rota) {\r\n        reason += GetVisitRemindersAction.testRotaVirus(rota, patientDOB, rotaTime);\r\n    }\r\n    if (6 > diptet) {\r\n        reason += GetVisitRemindersAction.testDipTet(diptet, patientDOB, deptetTime);\r\n    }\r\n    if (3 > haemoflu) {\r\n        reason += GetVisitRemindersAction.testHaemoFlu(haemoflu, patientDOB, haemofluTime, haemofluTimeFirst);\r\n    }\r\n    if (4 > pneumo) {\r\n        reason += GetVisitRemindersAction.testPneumo(pneumo, patientDOB, pneumoTime, pneumofluTimeFirst);\r\n    }\r\n    if (3 > polio) {\r\n        reason += GetVisitRemindersAction.testPolio(polio, patientDOB, polioTime);\r\n    }\r\n    if (2 > measles) {\r\n        reason += GetVisitRemindersAction.testMeasles(measles, patientDOB, measlesTime);\r\n    }\r\n    if (2 > varicella) {\r\n        reason += GetVisitRemindersAction.testVaricella(varicella, patientDOB, varicellaTime);\r\n    }\r\n    if (2 > hepA) {\r\n        reason += GetVisitRemindersAction.testHepA(hepA, patientDOB, hepATime);\r\n    }\r\n    if ((3 > hpv) && (gen.getName().equals(\"Female\"))) {\r\n        reason += GetVisitRemindersAction.testHPV(hpv, patientDOB, hpvTime);\r\n    }\r\n    if ((reason.length()) > 2)\r\n        return reason.substring(0, ((reason.length()) - 2));\r\n\r\n    return reason;\r\n}'),(351,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',593,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHPV(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the HPV immunization\r\n *\r\n * @param count			how\r\n * 		many HPV immunizations she has already had\r\n * @param patientAge	how\r\n * 		old the patient is, in weeks\r\n * @param time			date\r\n * 		of the last procedure\r\n * @return the			reason the immunization should be given, including required immunization age\r\n */\r\npublic static String testHPV(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    new Date();\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 9, 0, 0))\r\n            reason += \"90649 Human Papillomavirus (9 years), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 9, 2, 0)) && (8 <= weeks))\r\n                reason += \"90649 Human Papillomavirus (9 years, 2 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 9, 6, 0)) && (16 <= weeks))\r\n                    reason += \"90649 Human Papillomavirus (9 years, 6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(352,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',593,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHPV(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the HPV immunization\r\n *\r\n * @param count			how\r\n * 		many HPV immunizations she has already had\r\n * @param patientAge	how\r\n * 		old the patient is, in weeks\r\n * @param time			date\r\n * 		of the last procedure\r\n * @return the			reason the immunization should be given, including required immunization age\r\n */\r\npublic static String testHPV(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    new Date();\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 9, 0, 0))\r\n            reason += \"90649 Human Papillomavirus (9 years), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 9, 2, 0)) && (8 <= weeks))\r\n                reason += \"90649 Human Papillomavirus (9 years, 2 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 9, 6, 0)) && (16 <= weeks))\r\n                    reason += \"90649 Human Papillomavirus (9 years, 6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(353,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',593,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHPV(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the HPV immunization\r\n *\r\n * @param count			how\r\n * 		many HPV immunizations she has already had\r\n * @param patientAge	how\r\n * 		old the patient is, in weeks\r\n * @param time			date\r\n * 		of the last procedure\r\n * @return the			reason the immunization should be given, including required immunization age\r\n */\r\npublic static String testHPV(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    new Date();\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 9, 0, 0))\r\n            reason += \"90649 Human Papillomavirus (9 years), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 9, 2, 0)) && (8 <= weeks))\r\n                reason += \"90649 Human Papillomavirus (9 years, 2 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 9, 6, 0)) && (16 <= weeks))\r\n                    reason += \"90649 Human Papillomavirus (9 years, 6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(354,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',595,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepA(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Hepatits A immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHepA(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90633 Hepatits A (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 1, 6, 0)) && (26 <= weeks))\r\n                reason += \"90633 Hepatits A (18 months), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(355,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',595,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepA(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Hepatits A immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHepA(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90633 Hepatits A (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 1, 6, 0)) && (26 <= weeks))\r\n                reason += \"90633 Hepatits A (18 months), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(356,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',595,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepA(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Hepatits A immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHepA(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90633 Hepatits A (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 1, 6, 0)) && (26 <= weeks))\r\n                reason += \"90633 Hepatits A (18 months), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(357,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',601,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testVaricella(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Varicella immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testVaricella(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90396 Varicella (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (12 <= weeks))\r\n                reason += \"90396 Varicella (4 years), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(358,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',601,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testVaricella(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Varicella immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testVaricella(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90396 Varicella (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (12 <= weeks))\r\n                reason += \"90396 Varicella (4 years), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(359,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',601,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testVaricella(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Varicella immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testVaricella(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90396 Varicella (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (12 <= weeks))\r\n                reason += \"90396 Varicella (4 years), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(360,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',597,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testMeasles(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testMeasles(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90707 Measles, Mumps, Rubekka (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (12 <= weeks))\r\n                reason += \"90707 Measles, Mumps, Rubekka (4 years), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(361,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',597,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testMeasles(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testMeasles(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90707 Measles, Mumps, Rubekka (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (12 <= weeks))\r\n                reason += \"90707 Measles, Mumps, Rubekka (4 years), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(362,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',597,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testMeasles(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testMeasles(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90707 Measles, Mumps, Rubekka (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (12 <= weeks))\r\n                reason += \"90707 Measles, Mumps, Rubekka (4 years), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}'),(363,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',599,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPolio(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Polio immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPolio(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90712 Poliovirus (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90712 Poliovirus (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0))\r\n                    reason += \"90712 Poliovirus (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(364,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',599,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPolio(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Polio immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPolio(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90712 Poliovirus (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90712 Poliovirus (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0))\r\n                    reason += \"90712 Poliovirus (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(365,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',599,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPolio(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Polio immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPolio(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90712 Poliovirus (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90712 Poliovirus (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0))\r\n                    reason += \"90712 Poliovirus (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(366,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',598,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPneumo(int,java.util.Date,long,long)',0,'/**\r\n * Checks to see if a patient needs the Pneumococcal immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPneumo(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    Date firstDose = new Date(firstDoseTime);\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90669 Pneumococcal (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90669 Pneumococcal (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90669 Pneumococcal (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90669 Pneumococcal (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if (((GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0)) && (8 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                        reason += \"90669 Pneumococcal (12 months), \";\r\n\r\n                }\r\n\r\n\r\n\r\n    return reason;\r\n}'),(367,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',598,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPneumo(int,java.util.Date,long,long)',0,'/**\r\n * Checks to see if a patient needs the Pneumococcal immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPneumo(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    Date firstDose = new Date(firstDoseTime);\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90669 Pneumococcal (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90669 Pneumococcal (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90669 Pneumococcal (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90669 Pneumococcal (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if (((GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0)) && (8 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                        reason += \"90669 Pneumococcal (12 months), \";\r\n\r\n                }\r\n\r\n\r\n\r\n    return reason;\r\n}'),(368,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',598,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPneumo(int,java.util.Date,long,long)',0,'/**\r\n * Checks to see if a patient needs the Pneumococcal immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPneumo(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    Date firstDose = new Date(firstDoseTime);\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90669 Pneumococcal (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90669 Pneumococcal (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90669 Pneumococcal (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90669 Pneumococcal (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if (((GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0)) && (8 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                        reason += \"90669 Pneumococcal (12 months), \";\r\n\r\n                }\r\n\r\n\r\n\r\n    return reason;\r\n}'),(369,'long firstDoseTime','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',598,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPneumo(int,java.util.Date,long,long)',0,'/**\r\n * Checks to see if a patient needs the Pneumococcal immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPneumo(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    Date firstDose = new Date(firstDoseTime);\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90669 Pneumococcal (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90669 Pneumococcal (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90669 Pneumococcal (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90669 Pneumococcal (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if (((GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0)) && (8 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                        reason += \"90669 Pneumococcal (12 months), \";\r\n\r\n                }\r\n\r\n\r\n\r\n    return reason;\r\n}'),(370,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',594,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHaemoFlu(int,java.util.Date,long,long)',0,'/**\r\n * Checks to see if a patient needs the Haemophilus Infulenzae immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHaemoFlu(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    Date firstDose = new Date(firstDoseTime);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90645 Haemophilus influenzae (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90645 Haemophilus influenzae (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90645 Haemophilus influenzae (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90645 Haemophilus influenzae (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(371,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',594,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHaemoFlu(int,java.util.Date,long,long)',0,'/**\r\n * Checks to see if a patient needs the Haemophilus Infulenzae immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHaemoFlu(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    Date firstDose = new Date(firstDoseTime);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90645 Haemophilus influenzae (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90645 Haemophilus influenzae (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90645 Haemophilus influenzae (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90645 Haemophilus influenzae (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(372,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',594,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHaemoFlu(int,java.util.Date,long,long)',0,'/**\r\n * Checks to see if a patient needs the Haemophilus Infulenzae immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHaemoFlu(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    Date firstDose = new Date(firstDoseTime);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90645 Haemophilus influenzae (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90645 Haemophilus influenzae (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90645 Haemophilus influenzae (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90645 Haemophilus influenzae (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(373,'long firstDoseTime','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',594,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHaemoFlu(int,java.util.Date,long,long)',0,'/**\r\n * Checks to see if a patient needs the Haemophilus Infulenzae immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHaemoFlu(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    Date firstDose = new Date(firstDoseTime);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90645 Haemophilus influenzae (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90645 Haemophilus influenzae (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90645 Haemophilus influenzae (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90645 Haemophilus influenzae (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(374,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',592,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testDipTet(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testDipTet(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90696 Diphtheria, Tetanus, Pertussis (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90696 Diphtheria, Tetanus, Pertussis (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks))\r\n                    reason += \"90696 Diphtheria, Tetanus, Pertussis (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 15)) && (26 <= weeks))\r\n                        reason += \"90696 Diphtheria, Tetanus, Pertussis (15 weeks), \";\r\n\r\n                } else\r\n                    if (4 == count) {\r\n                        if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (26 <= weeks))\r\n                            reason += \"90696 Diphtheria, Tetanus, Pertussis (4 years), \";\r\n\r\n                    } else\r\n                        if (5 == count) {\r\n                            if ((GetVisitRemindersAction.olderThan(patientDOB, 11, 0, 0)) && (260 <= weeks))\r\n                                reason += \"90696 Diphtheria, Tetanus, Pertussis (11 years), \";\r\n\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    return reason;\r\n}'),(375,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',592,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testDipTet(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testDipTet(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90696 Diphtheria, Tetanus, Pertussis (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90696 Diphtheria, Tetanus, Pertussis (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks))\r\n                    reason += \"90696 Diphtheria, Tetanus, Pertussis (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 15)) && (26 <= weeks))\r\n                        reason += \"90696 Diphtheria, Tetanus, Pertussis (15 weeks), \";\r\n\r\n                } else\r\n                    if (4 == count) {\r\n                        if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (26 <= weeks))\r\n                            reason += \"90696 Diphtheria, Tetanus, Pertussis (4 years), \";\r\n\r\n                    } else\r\n                        if (5 == count) {\r\n                            if ((GetVisitRemindersAction.olderThan(patientDOB, 11, 0, 0)) && (260 <= weeks))\r\n                                reason += \"90696 Diphtheria, Tetanus, Pertussis (11 years), \";\r\n\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    return reason;\r\n}'),(376,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',592,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testDipTet(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testDipTet(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90696 Diphtheria, Tetanus, Pertussis (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90696 Diphtheria, Tetanus, Pertussis (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks))\r\n                    reason += \"90696 Diphtheria, Tetanus, Pertussis (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 15)) && (26 <= weeks))\r\n                        reason += \"90696 Diphtheria, Tetanus, Pertussis (15 weeks), \";\r\n\r\n                } else\r\n                    if (4 == count) {\r\n                        if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (26 <= weeks))\r\n                            reason += \"90696 Diphtheria, Tetanus, Pertussis (4 years), \";\r\n\r\n                    } else\r\n                        if (5 == count) {\r\n                            if ((GetVisitRemindersAction.olderThan(patientDOB, 11, 0, 0)) && (260 <= weeks))\r\n                                reason += \"90696 Diphtheria, Tetanus, Pertussis (11 years), \";\r\n\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    return reason;\r\n}'),(377,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',600,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testRotaVirus(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Rotavirus immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testRotaVirus(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90681 Rotavirus (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90681 Rotavirus (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks))\r\n                    reason += \"90681 Rotavirus (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(378,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',600,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testRotaVirus(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Rotavirus immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testRotaVirus(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90681 Rotavirus (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90681 Rotavirus (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks))\r\n                    reason += \"90681 Rotavirus (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(379,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',600,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testRotaVirus(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Rotavirus immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testRotaVirus(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90681 Rotavirus (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90681 Rotavirus (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks))\r\n                    reason += \"90681 Rotavirus (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(380,'int count','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',596,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepB(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Hepatitis B immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHepB(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 0))\r\n            reason += \"90371 Hepatitis B (birth), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 1, 0)) && (4 <= weeks))\r\n                reason += \"90371 Hepatitis B (1 month), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (8 <= weeks))\r\n                    reason += \"90371 Hepatitis B (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(381,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',596,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepB(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Hepatitis B immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHepB(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 0))\r\n            reason += \"90371 Hepatitis B (birth), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 1, 0)) && (4 <= weeks))\r\n                reason += \"90371 Hepatitis B (1 month), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (8 <= weeks))\r\n                    reason += \"90371 Hepatitis B (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(382,'long time','long',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',596,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepB(int,java.util.Date,long)',0,'/**\r\n * Checks to see if a patient needs the Hepatitis B immunization\r\n *\r\n * @param count\r\n * 		which immunization they are on\r\n * @param patientAge\r\n * 		how old the patient is\r\n * @param time\r\n * 		what the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHepB(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 0))\r\n            reason += \"90371 Hepatitis B (birth), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 1, 0)) && (4 <= weeks))\r\n                reason += \"90371 Hepatitis B (1 month), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (8 <= weeks))\r\n                    reason += \"90371 Hepatitis B (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}'),(383,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',591,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.olderThan(java.util.Date,int,int,int)',0,'private static boolean olderThan(Date patientDOB, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, new Date(), years, months, weeks);\r\n}'),(384,'int years','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',591,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.olderThan(java.util.Date,int,int,int)',0,'private static boolean olderThan(Date patientDOB, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, new Date(), years, months, weeks);\r\n}'),(385,'int months','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',591,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.olderThan(java.util.Date,int,int,int)',0,'private static boolean olderThan(Date patientDOB, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, new Date(), years, months, weeks);\r\n}'),(386,'int weeks','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',591,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.olderThan(java.util.Date,int,int,int)',0,'private static boolean olderThan(Date patientDOB, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, new Date(), years, months, weeks);\r\n}'),(387,'Date patientDOB','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',588,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.firstDoseAfter(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean firstDoseAfter(Date patientDOB, Date ageFirst, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, ageFirst, years, months, weeks);\r\n}'),(388,'Date ageFirst','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',588,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.firstDoseAfter(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean firstDoseAfter(Date patientDOB, Date ageFirst, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, ageFirst, years, months, weeks);\r\n}'),(389,'int years','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',588,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.firstDoseAfter(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean firstDoseAfter(Date patientDOB, Date ageFirst, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, ageFirst, years, months, weeks);\r\n}'),(390,'int months','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',588,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.firstDoseAfter(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean firstDoseAfter(Date patientDOB, Date ageFirst, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, ageFirst, years, months, weeks);\r\n}'),(391,'int weeks','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',588,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.firstDoseAfter(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean firstDoseAfter(Date patientDOB, Date ageFirst, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, ageFirst, years, months, weeks);\r\n}'),(392,'Date startTime','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',587,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.endBefore(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean endBefore(Date startTime, Date endTime, int years, int months, int weeks) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(startTime);\r\n    cal.add(Calendar.YEAR, years);\r\n    cal.add(Calendar.MONTH, months);\r\n    cal.add(Calendar.HOUR, ((weeks * 7) * 24));\r\n    return (cal.getTime().compareTo(endTime)) <= 0;// startTime.before(endTime);\r\n\r\n}'),(393,'Date endTime','java.util.Date',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',587,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.endBefore(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean endBefore(Date startTime, Date endTime, int years, int months, int weeks) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(startTime);\r\n    cal.add(Calendar.YEAR, years);\r\n    cal.add(Calendar.MONTH, months);\r\n    cal.add(Calendar.HOUR, ((weeks * 7) * 24));\r\n    return (cal.getTime().compareTo(endTime)) <= 0;// startTime.before(endTime);\r\n\r\n}'),(394,'int years','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',587,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.endBefore(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean endBefore(Date startTime, Date endTime, int years, int months, int weeks) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(startTime);\r\n    cal.add(Calendar.YEAR, years);\r\n    cal.add(Calendar.MONTH, months);\r\n    cal.add(Calendar.HOUR, ((weeks * 7) * 24));\r\n    return (cal.getTime().compareTo(endTime)) <= 0;// startTime.before(endTime);\r\n\r\n}'),(395,'int months','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',587,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.endBefore(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean endBefore(Date startTime, Date endTime, int years, int months, int weeks) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(startTime);\r\n    cal.add(Calendar.YEAR, years);\r\n    cal.add(Calendar.MONTH, months);\r\n    cal.add(Calendar.HOUR, ((weeks * 7) * 24));\r\n    return (cal.getTime().compareTo(endTime)) <= 0;// startTime.before(endTime);\r\n\r\n}'),(396,'int weeks','int',0,109,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction',587,'edu.ncsu.csc.itrust.action.GetVisitRemindersAction.endBefore(java.util.Date,java.util.Date,int,int,int)',0,'private static boolean endBefore(Date startTime, Date endTime, int years, int months, int weeks) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(startTime);\r\n    cal.add(Calendar.YEAR, years);\r\n    cal.add(Calendar.MONTH, months);\r\n    cal.add(Calendar.HOUR, ((weeks * 7) * 24));\r\n    return (cal.getTime().compareTo(endTime)) <= 0;// startTime.before(endTime);\r\n\r\n}'),(397,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,111,'edu.ncsu.csc.itrust.action.GroupReportAction',626,'edu.ncsu.csc.itrust.action.GroupReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n */\r\npublic GroupReportAction(DAOFactory factory) {\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    fDAO = factory.getFamilyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}'),(398,'List<ReportFilter> filters','java.util.List',0,111,'edu.ncsu.csc.itrust.action.GroupReportAction',627,'edu.ncsu.csc.itrust.action.GroupReportAction.generateReport(java.util.List)',0,'/**\r\n *\r\n *\r\n * @param filters\r\n * 		\r\n * @return \r\n */\r\npublic GroupReportBean generateReport(List<ReportFilter> filters) {\r\n    List<PatientBean> patients;\r\n    try {\r\n        patients = getAllPatients();\r\n    } catch (DBException e) {\r\n        return null;\r\n    }\r\n    for (ReportFilter filter : filters) {\r\n        patients = filter.filter(patients);\r\n    }\r\n    return new GroupReportBean(patients, filters);\r\n}'),(399,'edu.ncsu.csc.itrust.beans.GroupReportBean','edu.ncsu.csc.itrust.beans.GroupReportBean',253,111,'edu.ncsu.csc.itrust.action.GroupReportAction',627,'edu.ncsu.csc.itrust.action.GroupReportAction.generateReport(java.util.List)',1,'/**\r\n *\r\n *\r\n * @param filters\r\n * 		\r\n * @return \r\n */\r\npublic GroupReportBean generateReport(List<ReportFilter> filters) {\r\n    List<PatientBean> patients;\r\n    try {\r\n        patients = getAllPatients();\r\n    } catch (DBException e) {\r\n        return null;\r\n    }\r\n    for (ReportFilter filter : filters) {\r\n        patients = filter.filter(patients);\r\n    }\r\n    return new GroupReportBean(patients, filters);\r\n}'),(400,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,111,'edu.ncsu.csc.itrust.action.GroupReportAction',629,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveDemographicInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensiveDemographicInfo(PatientBean patient, DemographicReportFilter.DemographicReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case GENDER :\r\n            return patient.getGender().toString();\r\n        case LAST_NAME :\r\n            return patient.getLastName();\r\n        case FIRST_NAME :\r\n            return patient.getFirstName();\r\n        case CONTACT_EMAIL :\r\n            return patient.getEmail();\r\n        case STREET_ADDR :\r\n            return ((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2());\r\n        case CITY :\r\n            return patient.getCity();\r\n        case STATE :\r\n            return patient.getState();\r\n        case ZIP :\r\n            return patient.getZip();\r\n        case PHONE :\r\n            return patient.getPhone();\r\n        case EMER_CONTACT_NAME :\r\n            return patient.getEmergencyName();\r\n        case EMER_CONTACT_PHONE :\r\n            return patient.getEmergencyPhone();\r\n        case INSURE_NAME :\r\n            return patient.getIcName();\r\n        case INSURE_ADDR :\r\n            return ((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2());\r\n        case INSURE_CITY :\r\n            return patient.getIcCity();\r\n        case INSURE_STATE :\r\n            return patient.getIcState();\r\n        case INSURE_ZIP :\r\n            return patient.getIcZip();\r\n        case INSURE_PHONE :\r\n            return patient.getIcPhone();\r\n        case MID :\r\n            return Long.toString(patient.getMID());\r\n        case INSURE_ID :\r\n            return patient.getIcID();\r\n        case PARENT_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PARENT_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DEACTIVATED :\r\n            return patient.getDateOfDeactivationStr();\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(401,'DemographicReportFilter.DemographicReportFilterType filterType','edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType',585,111,'edu.ncsu.csc.itrust.action.GroupReportAction',629,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveDemographicInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensiveDemographicInfo(PatientBean patient, DemographicReportFilter.DemographicReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case GENDER :\r\n            return patient.getGender().toString();\r\n        case LAST_NAME :\r\n            return patient.getLastName();\r\n        case FIRST_NAME :\r\n            return patient.getFirstName();\r\n        case CONTACT_EMAIL :\r\n            return patient.getEmail();\r\n        case STREET_ADDR :\r\n            return ((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2());\r\n        case CITY :\r\n            return patient.getCity();\r\n        case STATE :\r\n            return patient.getState();\r\n        case ZIP :\r\n            return patient.getZip();\r\n        case PHONE :\r\n            return patient.getPhone();\r\n        case EMER_CONTACT_NAME :\r\n            return patient.getEmergencyName();\r\n        case EMER_CONTACT_PHONE :\r\n            return patient.getEmergencyPhone();\r\n        case INSURE_NAME :\r\n            return patient.getIcName();\r\n        case INSURE_ADDR :\r\n            return ((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2());\r\n        case INSURE_CITY :\r\n            return patient.getIcCity();\r\n        case INSURE_STATE :\r\n            return patient.getIcState();\r\n        case INSURE_ZIP :\r\n            return patient.getIcZip();\r\n        case INSURE_PHONE :\r\n            return patient.getIcPhone();\r\n        case MID :\r\n            return Long.toString(patient.getMID());\r\n        case INSURE_ID :\r\n            return patient.getIcID();\r\n        case PARENT_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PARENT_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DEACTIVATED :\r\n            return patient.getDateOfDeactivationStr();\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(402,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,111,'edu.ncsu.csc.itrust.action.GroupReportAction',630,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveMedicalInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensiveMedicalInfo(PatientBean patient, MedicalReportFilter.MedicalReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case ALLERGY :\r\n            try {\r\n                List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                String out = \"\";\r\n                for (AllergyBean allergy : allergies) {\r\n                    out += (allergy.getNDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DIAGNOSIS_ICD_CODE :\r\n            try {\r\n                List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                String out = \"\";\r\n                for (DiagnosisBean diagnosis : diagnoses) {\r\n                    out += (diagnosis.getICDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case LOWER_OFFICE_VISIT_DATE :\r\n            try {\r\n                List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                String out = \"\";\r\n                for (OfficeVisitBean visit : visits) {\r\n                    out += (visit.getVisitDateStr()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PASTCURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PROCEDURE :\r\n            try {\r\n                List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                String out = \"\";\r\n                for (ProcedureBean procedure : procedures) {\r\n                    out += (procedure.getCPTCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(403,'MedicalReportFilter.MedicalReportFilterType filterType','edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType',588,111,'edu.ncsu.csc.itrust.action.GroupReportAction',630,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveMedicalInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensiveMedicalInfo(PatientBean patient, MedicalReportFilter.MedicalReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case ALLERGY :\r\n            try {\r\n                List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                String out = \"\";\r\n                for (AllergyBean allergy : allergies) {\r\n                    out += (allergy.getNDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DIAGNOSIS_ICD_CODE :\r\n            try {\r\n                List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                String out = \"\";\r\n                for (DiagnosisBean diagnosis : diagnoses) {\r\n                    out += (diagnosis.getICDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case LOWER_OFFICE_VISIT_DATE :\r\n            try {\r\n                List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                String out = \"\";\r\n                for (OfficeVisitBean visit : visits) {\r\n                    out += (visit.getVisitDateStr()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PASTCURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PROCEDURE :\r\n            try {\r\n                List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                String out = \"\";\r\n                for (ProcedureBean procedure : procedures) {\r\n                    out += (procedure.getCPTCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(404,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,111,'edu.ncsu.csc.itrust.action.GroupReportAction',631,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensivePersonnelInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensivePersonnelInfo(PatientBean patient, PersonnelReportFilter.PersonnelReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case DLHCP :\r\n            try {\r\n                List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                String out = \"\";\r\n                for (PersonnelBean dlhcp : dlhcps) {\r\n                    out += (dlhcp.getFullName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(405,'PersonnelReportFilter.PersonnelReportFilterType filterType','edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType',591,111,'edu.ncsu.csc.itrust.action.GroupReportAction',631,'edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensivePersonnelInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		\r\n * @param filterType\r\n * 		\r\n * @return \r\n */\r\npublic String getComprehensivePersonnelInfo(PatientBean patient, PersonnelReportFilter.PersonnelReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case DLHCP :\r\n            try {\r\n                List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                String out = \"\";\r\n                for (PersonnelBean dlhcp : dlhcps) {\r\n                    out += (dlhcp.getFullName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}'),(406,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,113,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction',637,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.util.List)',0,'/**\r\n * Initializes the group report generator with a list of filters\r\n *\r\n * @param filters\r\n * 		List of filters to be used in the report\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, List<ReportFilter> filters) {\r\n    this.factory = factory;\r\n    this.filters = filters;\r\n    action = new GroupReportAction(factory);\r\n}'),(407,'List<ReportFilter> filters','java.util.List',0,113,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction',637,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.util.List)',0,'/**\r\n * Initializes the group report generator with a list of filters\r\n *\r\n * @param filters\r\n * 		List of filters to be used in the report\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, List<ReportFilter> filters) {\r\n    this.factory = factory;\r\n    this.filters = filters;\r\n    action = new GroupReportAction(factory);\r\n}'),(408,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,113,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction',638,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,javax.servlet.http.HttpServletRequest)',0,'/**\r\n * Initializes the group report generator with a list of filters after parsing them\r\n *\r\n * @param filters\r\n * 		HttpServletRequest to grab and parse parameters from\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, HttpServletRequest request) {\r\n    this.factory = factory;\r\n    this.filters = new ArrayList<ReportFilter>();\r\n    parseFilters(request);\r\n    action = new GroupReportAction(factory);\r\n}'),(409,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,113,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction',638,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,javax.servlet.http.HttpServletRequest)',0,'/**\r\n * Initializes the group report generator with a list of filters after parsing them\r\n *\r\n * @param filters\r\n * 		HttpServletRequest to grab and parse parameters from\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, HttpServletRequest request) {\r\n    this.factory = factory;\r\n    this.filters = new ArrayList<ReportFilter>();\r\n    parseFilters(request);\r\n    action = new GroupReportAction(factory);\r\n}'),(410,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,113,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction',644,'edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.parseFilters(javax.servlet.http.HttpServletRequest)',0,'/**\r\n * Method that parses the request parameters to create the filter list in order to run report.\r\n *\r\n * @param request\r\n * 		with form parameters to create the filter list\r\n */\r\nprivate void parseFilters(HttpServletRequest request) {\r\n    boolean hasDeactivatedFilter = false;\r\n    if (((request.getParameter(\"demoparams\")) != null) && (!(request.getParameter(\"demoparams\").isEmpty()))) {\r\n        String demoparams = request.getParameter(\"demoparams\");\r\n        String[] demoFilters = demoparams.split(\" \");\r\n        for (String filter : demoFilters) {\r\n            if (((request.getParameter(filter)) != null) && (!(request.getParameter(filter).isEmpty()))) {\r\n                DemographicReportFilter.DemographicReportFilterType filterType = DemographicReportFilter.filterTypeFromString(filter);\r\n                if (filterType.toString().equals(\"DEACTIVATED\")) {\r\n                    hasDeactivatedFilter = true;\r\n                }\r\n                DemographicReportFilter fil = new DemographicReportFilter(filterType, request.getParameter(filter), factory);\r\n                filters.add(fil);\r\n            }\r\n        }\r\n    }\r\n    if (!hasDeactivatedFilter) {\r\n        filters.add(new DemographicReportFilter(DemographicReportFilter.filterTypeFromString(\"DEACTIVATED\"), \"exclude\", factory));\r\n    }\r\n    if (((request.getParameter(\"medparams\")) != null) && (!(request.getParameter(\"medparams\").isEmpty()))) {\r\n        String medparams = request.getParameter(\"medparams\");\r\n        String[] medFilters = medparams.split(\" \");\r\n        for (String filter : medFilters) {\r\n            if (((request.getParameter(filter)) != null) && (!(request.getParameter(filter).isEmpty()))) {\r\n                MedicalReportFilter.MedicalReportFilterType filterType = MedicalReportFilter.filterTypeFromString(filter);\r\n                if ((((((filterType == (MedicalReportFilter.MedicalReportFilterType.DIAGNOSIS_ICD_CODE)) || (filterType == (MedicalReportFilter.MedicalReportFilterType.MISSING_DIAGNOSIS_ICD_CODE))) || (filterType == (MedicalReportFilter.MedicalReportFilterType.ALLERGY))) || (filterType == (MedicalReportFilter.MedicalReportFilterType.CURRENT_PRESCRIPTIONS))) || (filterType == (MedicalReportFilter.MedicalReportFilterType.PASTCURRENT_PRESCRIPTIONS))) || (filterType == (MedicalReportFilter.MedicalReportFilterType.PROCEDURE))) {\r\n                    String[] vals = request.getParameterValues(filter);\r\n                    for (String val : vals) {\r\n                        MedicalReportFilter fil = new MedicalReportFilter(filterType, val, factory);\r\n                        filters.add(fil);\r\n                    }\r\n                } else {\r\n                    MedicalReportFilter fil = new MedicalReportFilter(filterType, request.getParameter(filter), factory);\r\n                    filters.add(fil);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (((request.getParameter(\"persparams\")) != null) && (!(request.getParameter(\"persparams\").isEmpty()))) {\r\n        String persparams = request.getParameter(\"persparams\");\r\n        String[] personnelFilters = persparams.split(\" \");\r\n        for (String filter : personnelFilters) {\r\n            if (((request.getParameter(filter)) != null) && (!(request.getParameter(filter).isEmpty()))) {\r\n                PersonnelReportFilter.PersonnelReportFilterType filterType = PersonnelReportFilter.filterTypeFromString(filter);\r\n                if (filterType == (PersonnelReportFilter.PersonnelReportFilterType.DLHCP)) {\r\n                    String[] vals = request.getParameterValues(filter);\r\n                    for (String val : vals) {\r\n                        PersonnelReportFilter fil = new PersonnelReportFilter(filterType, val, factory);\r\n                        filters.add(fil);\r\n                    }\r\n                } else {\r\n                    PersonnelReportFilter fil = new PersonnelReportFilter(filterType, request.getParameter(filter), factory);\r\n                    filters.add(fil);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'),(411,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,115,'edu.ncsu.csc.itrust.action.LabProcHCPAction',649,'edu.ncsu.csc.itrust.action.LabProcHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		MID for the logged in HCP\r\n */\r\npublic LabProcHCPAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n}'),(412,'long loggedInMID','long',0,115,'edu.ncsu.csc.itrust.action.LabProcHCPAction',649,'edu.ncsu.csc.itrust.action.LabProcHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		MID for the logged in HCP\r\n */\r\npublic LabProcHCPAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n}'),(413,'long id','long',0,115,'edu.ncsu.csc.itrust.action.LabProcHCPAction',654,'edu.ncsu.csc.itrust.action.LabProcHCPAction.sortByLOINC(long)',0,'/**\r\n * This method sorts by LOINC and returns the list\r\n *\r\n * @param id\r\n * 		the ID to sort the list by\r\n * @return List sorted by LOINC\r\n */\r\npublic List<LabProcedureBean> sortByLOINC(long id) throws DBException {\r\n    return lpDAO.getAllLabProceduresLOINC(id);\r\n}'),(414,'long x','long',0,115,'edu.ncsu.csc.itrust.action.LabProcHCPAction',650,'edu.ncsu.csc.itrust.action.LabProcHCPAction.changePrivacy(long)',0,'/**\r\n * Changes the privacy settings\r\n *\r\n * @param x\r\n * 		the ID of the procedure to change\r\n */\r\npublic void changePrivacy(long x) throws DBException, FormValidationException {\r\n    LabProcedureBean pb = lpDAO.getLabProcedure(x);\r\n    if (checkAccess(x)) {\r\n        if (pb.getRights().equals(LabProcedureBean.Restrict)) {\r\n            pb.allow();\r\n        } else {\r\n            pb.restrict();\r\n        }\r\n        validator.validate(pb);\r\n        lpDAO.updateRights(pb);\r\n    }\r\n}'),(415,'long x','long',0,115,'edu.ncsu.csc.itrust.action.LabProcHCPAction',651,'edu.ncsu.csc.itrust.action.LabProcHCPAction.checkAccess(long)',0,'/**\r\n * Checks to see if the logged in HCP is the one who made the procedure.  Used to generate links for page to edit OfficeVisit\r\n *\r\n * @param x\r\n * 		the ID of the HCP to check\r\n */\r\npublic boolean checkAccess(long x) throws DBException, FormValidationException {\r\n    LabProcedureBean pb = lpDAO.getLabProcedure(x);\r\n    OfficeVisitBean ovbean = ovDAO.getOfficeVisit(pb.getOvID());\r\n    return (loggedInMID) == (ovbean.getHcpID());\r\n}'),(416,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',664,'edu.ncsu.csc.itrust.action.LabProcLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Setup\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		LT who is logged in\r\n */\r\npublic LabProcLTAction(DAOFactory factory, long loggedInMID) {\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    personDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(417,'long loggedInMID','long',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',664,'edu.ncsu.csc.itrust.action.LabProcLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Setup\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		LT who is logged in\r\n */\r\npublic LabProcLTAction(DAOFactory factory, long loggedInMID) {\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    personDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(418,'long id','long',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',670,'edu.ncsu.csc.itrust.action.LabProcLTAction.viewInTransitProcedures(long)',0,'public List<LabProcedureBean> viewInTransitProcedures(long id) throws DBException {\r\n    return lpDAO.getLabProceduresInTransitForLabTech(id);\r\n}'),(419,'long id','long',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',671,'edu.ncsu.csc.itrust.action.LabProcLTAction.viewReceivedProcedures(long)',0,'public List<LabProcedureBean> viewReceivedProcedures(long id) throws DBException {\r\n    return lpDAO.getLabProceduresReceivedForLabTech(id);\r\n}'),(420,'long id','long',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',672,'edu.ncsu.csc.itrust.action.LabProcLTAction.viewTestingProcedures(long)',0,'public List<LabProcedureBean> viewTestingProcedures(long id) throws DBException {\r\n    return lpDAO.getLabProceduresTestingForLabTech(id);\r\n}'),(421,'long id','long',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',666,'edu.ncsu.csc.itrust.action.LabProcLTAction.getLabProcedure(long)',0,'public LabProcedureBean getLabProcedure(long id) throws DBException {\r\n    return lpDAO.getLabProcedure(id);\r\n}'),(422,'edu.ncsu.csc.itrust.beans.LabProcedureBean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',666,'edu.ncsu.csc.itrust.action.LabProcLTAction.getLabProcedure(long)',1,'public LabProcedureBean getLabProcedure(long id) throws DBException {\r\n    return lpDAO.getLabProcedure(id);\r\n}'),(423,'long ovid','long',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',665,'edu.ncsu.csc.itrust.action.LabProcLTAction.getHCPName(long)',0,'public String getHCPName(long ovid) throws iTrustException {\r\n    OfficeVisitBean b = ovDAO.getOfficeVisit(ovid);\r\n    return personDAO.getName(b.getHcpID());\r\n}'),(424,'String id','java.lang.String',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',669,'edu.ncsu.csc.itrust.action.LabProcLTAction.submitResults(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public Boolean submitResults(String id, String numericalResults, String numericalResultsUnit, String upperBound, String lowerBound) throws FormValidationException {\r\n    try {\r\n        long procedureID = Long.parseLong(id);\r\n        LabProcedureBean lp = lpDAO.getLabProcedure(procedureID);\r\n        lp.setNumericalResult(numericalResults);\r\n        lp.setNumericalResultUnit(numericalResultsUnit);\r\n        lp.setUpperBound(upperBound);\r\n        lp.setLowerBound(lowerBound);\r\n        lpDAO.submitTestResults(Long.parseLong(id), numericalResults, numericalResultsUnit, upperBound, lowerBound);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(425,'String numericalResults','java.lang.String',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',669,'edu.ncsu.csc.itrust.action.LabProcLTAction.submitResults(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public Boolean submitResults(String id, String numericalResults, String numericalResultsUnit, String upperBound, String lowerBound) throws FormValidationException {\r\n    try {\r\n        long procedureID = Long.parseLong(id);\r\n        LabProcedureBean lp = lpDAO.getLabProcedure(procedureID);\r\n        lp.setNumericalResult(numericalResults);\r\n        lp.setNumericalResultUnit(numericalResultsUnit);\r\n        lp.setUpperBound(upperBound);\r\n        lp.setLowerBound(lowerBound);\r\n        lpDAO.submitTestResults(Long.parseLong(id), numericalResults, numericalResultsUnit, upperBound, lowerBound);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(426,'String numericalResultsUnit','java.lang.String',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',669,'edu.ncsu.csc.itrust.action.LabProcLTAction.submitResults(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public Boolean submitResults(String id, String numericalResults, String numericalResultsUnit, String upperBound, String lowerBound) throws FormValidationException {\r\n    try {\r\n        long procedureID = Long.parseLong(id);\r\n        LabProcedureBean lp = lpDAO.getLabProcedure(procedureID);\r\n        lp.setNumericalResult(numericalResults);\r\n        lp.setNumericalResultUnit(numericalResultsUnit);\r\n        lp.setUpperBound(upperBound);\r\n        lp.setLowerBound(lowerBound);\r\n        lpDAO.submitTestResults(Long.parseLong(id), numericalResults, numericalResultsUnit, upperBound, lowerBound);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(427,'String upperBound','java.lang.String',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',669,'edu.ncsu.csc.itrust.action.LabProcLTAction.submitResults(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public Boolean submitResults(String id, String numericalResults, String numericalResultsUnit, String upperBound, String lowerBound) throws FormValidationException {\r\n    try {\r\n        long procedureID = Long.parseLong(id);\r\n        LabProcedureBean lp = lpDAO.getLabProcedure(procedureID);\r\n        lp.setNumericalResult(numericalResults);\r\n        lp.setNumericalResultUnit(numericalResultsUnit);\r\n        lp.setUpperBound(upperBound);\r\n        lp.setLowerBound(lowerBound);\r\n        lpDAO.submitTestResults(Long.parseLong(id), numericalResults, numericalResultsUnit, upperBound, lowerBound);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(428,'String lowerBound','java.lang.String',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',669,'edu.ncsu.csc.itrust.action.LabProcLTAction.submitResults(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public Boolean submitResults(String id, String numericalResults, String numericalResultsUnit, String upperBound, String lowerBound) throws FormValidationException {\r\n    try {\r\n        long procedureID = Long.parseLong(id);\r\n        LabProcedureBean lp = lpDAO.getLabProcedure(procedureID);\r\n        lp.setNumericalResult(numericalResults);\r\n        lp.setNumericalResultUnit(numericalResultsUnit);\r\n        lp.setUpperBound(upperBound);\r\n        lp.setLowerBound(lowerBound);\r\n        lpDAO.submitTestResults(Long.parseLong(id), numericalResults, numericalResultsUnit, upperBound, lowerBound);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(429,'String id','java.lang.String',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',668,'edu.ncsu.csc.itrust.action.LabProcLTAction.submitReceived(java.lang.String)',0,'public Boolean submitReceived(String id) throws DBException {\r\n    try {\r\n        lpDAO.submitReceivedLP(Long.parseLong(id));\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(430,'long id','long',0,117,'edu.ncsu.csc.itrust.action.LabProcLTAction',667,'edu.ncsu.csc.itrust.action.LabProcLTAction.setToTesting(long)',0,'public Boolean setToTesting(long id) throws DBException {\r\n    lpDAO.setLPToTesting(id);\r\n    return true;\r\n}'),(431,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',682,'edu.ncsu.csc.itrust.action.LabProcUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Setup\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		UAP who is logged in\r\n */\r\npublic LabProcUAPAction(DAOFactory factory, long loggedInMID) {\r\n    factory.getTransactionDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n    this.factory = factory;\r\n}'),(432,'long loggedInMID','long',0,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',682,'edu.ncsu.csc.itrust.action.LabProcUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Setup\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		UAP who is logged in\r\n */\r\npublic LabProcUAPAction(DAOFactory factory, long loggedInMID) {\r\n    factory.getTransactionDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n    this.factory = factory;\r\n}'),(433,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',684,'edu.ncsu.csc.itrust.action.LabProcUAPAction.updateProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Updates a lab procedure\r\n *\r\n * @param b\r\n * 		the procedure to update\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic void updateProcedure(LabProcedureBean b) throws DBException, FormValidationException {\r\n    validator.validate(b);\r\n    // need to check if status is whats being changed - if new status!=old status send email\r\n    if (!(b.getStatus().equals(lpDAO.getLabProcedure(b.getProcedureID()).getStatus()))) {\r\n        new EmailUtil(factory).sendEmail(makeEmail(b));\r\n    }\r\n    lpDAO.updateLabProcedure(b);\r\n}'),(434,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',683,'edu.ncsu.csc.itrust.action.LabProcUAPAction.makeEmail(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Sends an e-mail informing the patient that their procedure has been updated\r\n *\r\n * @param b\r\n * 		the procedure that was updated\r\n * @return an e-mail to the patient with the notice\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(LabProcedureBean b) throws DBException {\r\n    PatientBean p = new PatientDAO(factory).getPatient(b.getPid());\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"A Lab Procedure Was Updated\");\r\n    email.setBody(String.format(\"Dear %s, \n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.\", p.getFullName(), b.getLoinc(), b.getStatus()));\r\n    return email;\r\n}'),(435,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',683,'edu.ncsu.csc.itrust.action.LabProcUAPAction.makeEmail(edu.ncsu.csc.itrust.beans.LabProcedureBean)',1,'/**\r\n * Sends an e-mail informing the patient that their procedure has been updated\r\n *\r\n * @param b\r\n * 		the procedure that was updated\r\n * @return an e-mail to the patient with the notice\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmail(LabProcedureBean b) throws DBException {\r\n    PatientBean p = new PatientDAO(factory).getPatient(b.getPid());\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"A Lab Procedure Was Updated\");\r\n    email.setBody(String.format(\"Dear %s, \n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.\", p.getFullName(), b.getLoinc(), b.getStatus()));\r\n    return email;\r\n}'),(436,'long id','long',0,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',686,'edu.ncsu.csc.itrust.action.LabProcUAPAction.viewProcedures(long)',0,'/**\r\n * Returns a list of all the lab procedures for a particular patient.\r\n *\r\n * @param id\r\n * 		MID of the UAP viewing the procedures\r\n * @return a list of all the lab procedures for that UAP\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> viewProcedures(long id) throws DBException {\r\n    return lpDAO.getAllLabProceduresDate(id);\r\n}'),(437,'long pid','long',0,119,'edu.ncsu.csc.itrust.action.LabProcUAPAction',685,'edu.ncsu.csc.itrust.action.LabProcUAPAction.viewPatientProcedures(long)',0,'/**\r\n * Returns a list of the lab procedures associated with both the HCP and\r\n * the given patient.\r\n *\r\n * @param pid\r\n * 		The id of the patient.\r\n * @return A list of lab procedures.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> viewPatientProcedures(long pid) throws DBException {\r\n    return lpDAO.getLabProcedures(loggedInMID, pid);\r\n}'),(438,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,121,'edu.ncsu.csc.itrust.action.LoginFailureAction',691,'edu.ncsu.csc.itrust.action.LoginFailureAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param ipAddr\r\n * 		The IP address of the user making the login attempt.\r\n */\r\npublic LoginFailureAction(DAOFactory factory, String ipAddr) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.ipAddr = ipAddr;\r\n    validCaptcha = false;\r\n    hasAttempts = false;\r\n}'),(439,'String ipAddr','java.lang.String',0,121,'edu.ncsu.csc.itrust.action.LoginFailureAction',691,'edu.ncsu.csc.itrust.action.LoginFailureAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param ipAddr\r\n * 		The IP address of the user making the login attempt.\r\n */\r\npublic LoginFailureAction(DAOFactory factory, String ipAddr) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.ipAddr = ipAddr;\r\n    validCaptcha = false;\r\n    hasAttempts = false;\r\n}'),(440,'boolean val','boolean',0,121,'edu.ncsu.csc.itrust.action.LoginFailureAction',697,'edu.ncsu.csc.itrust.action.LoginFailureAction.setCaptcha(boolean)',0,'public void setCaptcha(boolean val) {\r\n    validCaptcha = val;\r\n}'),(441,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',704,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user managing hospitals.\r\n */\r\npublic ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalsDAO = factory.getHospitalsDAO();\r\n}'),(442,'long loggedInMID','long',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',704,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user managing hospitals.\r\n */\r\npublic ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalsDAO = factory.getHospitalsDAO();\r\n}'),(443,'String midString','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',709,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.getAvailableHospitals(java.lang.String)',0,'/**\r\n * Returns a list of hospitals to which the given mid is not currently assigned\r\n *\r\n * @param midString\r\n * 		\r\n * @return list of HospitalBeans\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<HospitalBean> getAvailableHospitals(String midString) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(midString);\r\n        List<HospitalBean> allHospitals = hospitalsDAO.getAllHospitals();\r\n        List<HospitalBean> ourHospitals = personnelDAO.getHospitals(mid);\r\n        while (!(ourHospitals.isEmpty())) {\r\n            allHospitals.remove(ourHospitals.remove(0));\r\n        } \r\n        return allHospitals;\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(444,'String midString','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',708,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.getAssignedHospitals(java.lang.String)',0,'/**\r\n * Returns a list of hospitals to which the given mid is currently assigned\r\n *\r\n * @param midString\r\n * 		\r\n * @return list of HosptialBeans\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<HospitalBean> getAssignedHospitals(String midString) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(midString);\r\n        return personnelDAO.getHospitals(mid);\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(445,'String midString','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',705,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.assignHCPToHospital(java.lang.String,java.lang.String)',0,'/**\r\n * Assigns the mid to the hospital\r\n *\r\n * @param midString\r\n * 		The MID of the person assigned to the hospital as a String.\r\n * @param hospitalID\r\n * 		The ID of the hospital.\r\n * @return message indicating the status of the assignment\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String assignHCPToHospital(String midString, String hospitalID) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        boolean confirm = hospitalsDAO.assignHospital(hcpID, hospitalID);\r\n        if (confirm) {\r\n            /* only patient is mentioned for transaction type 0, but spec looks like personnel\n            should be included too...\n             */\r\n            return \"HCP successfully assigned.\";\r\n        } else\r\n            return \"Assignment did not occur\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(446,'String hospitalID','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',705,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.assignHCPToHospital(java.lang.String,java.lang.String)',0,'/**\r\n * Assigns the mid to the hospital\r\n *\r\n * @param midString\r\n * 		The MID of the person assigned to the hospital as a String.\r\n * @param hospitalID\r\n * 		The ID of the hospital.\r\n * @return message indicating the status of the assignment\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String assignHCPToHospital(String midString, String hospitalID) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        boolean confirm = hospitalsDAO.assignHospital(hcpID, hospitalID);\r\n        if (confirm) {\r\n            /* only patient is mentioned for transaction type 0, but spec looks like personnel\n            should be included too...\n             */\r\n            return \"HCP successfully assigned.\";\r\n        } else\r\n            return \"Assignment did not occur\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(447,'String midString','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',711,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.removeHCPAssignmentToHospital(java.lang.String,java.lang.String)',0,'/**\r\n * Removes HCPs assignment to the designated hospital\r\n *\r\n * @param midString\r\n * 		the HCPs mid\r\n * @param hospitalID\r\n * 		the hospital id to be removed\r\n * @return Status message\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String removeHCPAssignmentToHospital(String midString, String hospitalID) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        boolean confirm = hospitalsDAO.removeHospitalAssignment(hcpID, hospitalID);\r\n        if (confirm) {\r\n            return \"HCP successfully unassigned\";\r\n        } else\r\n            return \"HCP not unassigned\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(448,'String hospitalID','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',711,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.removeHCPAssignmentToHospital(java.lang.String,java.lang.String)',0,'/**\r\n * Removes HCPs assignment to the designated hospital\r\n *\r\n * @param midString\r\n * 		the HCPs mid\r\n * @param hospitalID\r\n * 		the hospital id to be removed\r\n * @return Status message\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String removeHCPAssignmentToHospital(String midString, String hospitalID) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        boolean confirm = hospitalsDAO.removeHospitalAssignment(hcpID, hospitalID);\r\n        if (confirm) {\r\n            return \"HCP successfully unassigned\";\r\n        } else\r\n            return \"HCP not unassigned\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(449,'String midString','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',710,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.removeAllAssignmentsFromHCP(java.lang.String)',0,'/**\r\n * Removes all hospital assignments for the given hcp mid\r\n *\r\n * @param midString\r\n * 		HCPs mid\r\n * @return status message\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic int removeAllAssignmentsFromHCP(String midString) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        int numAssignments = hospitalsDAO.removeAllHospitalAssignmentsFrom(hcpID);\r\n        return numAssignments;\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}'),(450,'String hcpID','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',706,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.checkHCPID(java.lang.String)',0,'/**\r\n * Checks if the hcpID param is a HCP\r\n *\r\n * @param hcpID\r\n * 		the String to be checked\r\n * @return the mid as a long if the hcpID is a HCPs mid\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long checkHCPID(String hcpID) throws iTrustException {\r\n    try {\r\n        long pid = Long.valueOf(hcpID);\r\n        if (personnelDAO.checkPersonnelExists(pid))\r\n            return pid;\r\n        else\r\n            throw new iTrustException(\"HCP does not exist\");\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"HCP ID is not a number: \" + (e.getMessage())));\r\n    }\r\n}'),(451,'String hcpID','java.lang.String',0,123,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction',707,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.checkLTHospital(java.lang.String)',0,'/**\r\n * Checks if the HCP is a LT if it is then check to see if a hospital is assigned to them\r\n *\r\n * @param hcpID\r\n * 		the String to be checked\r\n * @return true If the LT has an assigned hospital\r\n * @return false If the LT does not have an assigned hospital\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean checkLTHospital(String hcpID) throws iTrustException {\r\n    try {\r\n        long pid = Long.valueOf(hcpID);\r\n        if (personnelDAO.getPersonnel(pid).getRole().toString().equals(\"LT\")) {\r\n            if (hospitalsDAO.checkLTHasHospital(pid)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"LT ID is not a number: \" + (e.getMessage())));\r\n    }\r\n    return false;\r\n}'),(452,'String hospitalID','java.lang.String',0,124,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest',714,'edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.doAssignment(java.lang.String)',0,'private String doAssignment(String hospitalID) throws DBException, iTrustException {\r\n    return action.assignHCPToHospital((\"\" + (ManageHospitalAssignmentsActionTest.hcp0)), hospitalID);\r\n}'),(453,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',736,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n */\r\npublic MonitorAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.messenger = new SendMessageAction(factory, loggedInMID);\r\n}'),(454,'long loggedInMID','long',0,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',736,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		\r\n * @param loggedInMID\r\n * 		\r\n */\r\npublic MonitorAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.messenger = new SendMessageAction(factory, loggedInMID);\r\n}'),(455,'boolean isPrescription','boolean',0,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',738,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.getReports(boolean,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of reports between specified dates\r\n *\r\n * @param isPrescription\r\n * 		Boolean to return prescriptions or immunizations\r\n * @param start\r\n * 		The starting date\r\n * @param end\r\n * 		The ending date\r\n * @return the list of events\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n * @throws ParseException\r\n * 		\r\n */\r\npublic List<AdverseEventBean> getReports(boolean isPrescription, String start, String end) throws FormValidationException, iTrustException, SQLException, ParseException {\r\n    if (isPrescription) {\r\n        return adverseEventDAO.getPerscriptions(start, end);\r\n    } else {\r\n        // is Immunization\r\n        return adverseEventDAO.getImmunizations(start, end);\r\n    }\r\n}'),(456,'String start','java.lang.String',0,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',738,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.getReports(boolean,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of reports between specified dates\r\n *\r\n * @param isPrescription\r\n * 		Boolean to return prescriptions or immunizations\r\n * @param start\r\n * 		The starting date\r\n * @param end\r\n * 		The ending date\r\n * @return the list of events\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n * @throws ParseException\r\n * 		\r\n */\r\npublic List<AdverseEventBean> getReports(boolean isPrescription, String start, String end) throws FormValidationException, iTrustException, SQLException, ParseException {\r\n    if (isPrescription) {\r\n        return adverseEventDAO.getPerscriptions(start, end);\r\n    } else {\r\n        // is Immunization\r\n        return adverseEventDAO.getImmunizations(start, end);\r\n    }\r\n}'),(457,'String end','java.lang.String',0,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',738,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.getReports(boolean,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of reports between specified dates\r\n *\r\n * @param isPrescription\r\n * 		Boolean to return prescriptions or immunizations\r\n * @param start\r\n * 		The starting date\r\n * @param end\r\n * 		The ending date\r\n * @return the list of events\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n * @throws ParseException\r\n * 		\r\n */\r\npublic List<AdverseEventBean> getReports(boolean isPrescription, String start, String end) throws FormValidationException, iTrustException, SQLException, ParseException {\r\n    if (isPrescription) {\r\n        return adverseEventDAO.getPerscriptions(start, end);\r\n    } else {\r\n        // is Immunization\r\n        return adverseEventDAO.getImmunizations(start, end);\r\n    }\r\n}'),(458,'long MID','long',0,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',737,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.getName(long)',0,'/**\r\n * Returns the patients name\r\n *\r\n * @param MID\r\n * 		the MID of the patient to return the name for.\r\n * @return \r\n */\r\npublic String getName(long MID) {\r\n    try {\r\n        return patientDAO.getName(MID);\r\n    } catch (DBException e) {\r\n        return \"\";\r\n    } catch (iTrustException e) {\r\n        return \"Patient no longer exists\";\r\n    }\r\n}'),(459,'long patientMID','long',0,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',740,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.sendEmail(long,java.lang.String)',0,'/**\r\n * Sends an e-mail to a patient requesting more information\r\n *\r\n * @param patientMID\r\n * 		The patient to receive the message\r\n * @param message\r\n * 		The message\r\n * @return string for testing purposes\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String sendEmail(long patientMID, String message) throws DBException {\r\n    String rValue;\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean receiver = patientDAO.getPatient(patientMID);\r\n    toList.add(receiver.getEmail());\r\n    Email mail = new Email();\r\n    mail.setBody(message);\r\n    mail.setFrom(((loggedInMID) + \"\"));\r\n    mail.setToList(toList);\r\n    emailer.sendEmail(mail);\r\n    rValue = ((\"\" + (mail.getFrom())) + \" \") + (mail.getBody());\r\n    return rValue;\r\n}'),(460,'String message','java.lang.String',0,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',740,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.sendEmail(long,java.lang.String)',0,'/**\r\n * Sends an e-mail to a patient requesting more information\r\n *\r\n * @param patientMID\r\n * 		The patient to receive the message\r\n * @param message\r\n * 		The message\r\n * @return string for testing purposes\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String sendEmail(long patientMID, String message) throws DBException {\r\n    String rValue;\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean receiver = patientDAO.getPatient(patientMID);\r\n    toList.add(receiver.getEmail());\r\n    Email mail = new Email();\r\n    mail.setBody(message);\r\n    mail.setFrom(((loggedInMID) + \"\"));\r\n    mail.setToList(toList);\r\n    emailer.sendEmail(mail);\r\n    rValue = ((\"\" + (mail.getFrom())) + \" \") + (mail.getBody());\r\n    return rValue;\r\n}'),(461,'int id','int',0,125,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction',739,'edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.remove(int)',0,'/**\r\n * Method used to remove an adverse event report\r\n *\r\n * @param id\r\n * 		the id of the report to be removed\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void remove(int id) throws DBException, FormValidationException, iTrustException {\r\n    long HCPMID;\r\n    try {\r\n        AdverseEventBean aeBean = adverseEventDAO.getReport(id);\r\n        adverseEventDAO.removeReport(id);\r\n        HCPMID = adverseEventDAO.getHCPMID(id);\r\n        MessageBean mBeanTwo = new MessageBean();\r\n        MessageBean mBeanOne = new MessageBean();\r\n        String body = (((((\"An adverse event for \" + (aeBean.getDrug())) + \" perscribed to \") + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" with description: (\") + (aeBean.getDescription())) + \") was removed.\";\r\n        mBeanOne.setTo(Long.parseLong(aeBean.getMID()));\r\n        mBeanTwo.setTo(HCPMID);\r\n        mBeanOne.setSubject(\"Subject\");\r\n        mBeanTwo.setSubject(\"Subject\");\r\n        mBeanOne.setBody(body);\r\n        mBeanTwo.setBody(body);\r\n        mBeanOne.setFrom(loggedInMID);\r\n        mBeanTwo.setFrom(loggedInMID);\r\n        messenger.sendMessage(mBeanOne);\r\n        messenger.sendMessage(mBeanTwo);\r\n    } catch (SQLException e) {\r\n        throw new DBException(e);\r\n    }\r\n}'),(462,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,128,'edu.ncsu.csc.itrust.action.MyDiagnosisAction',750,'edu.ncsu.csc.itrust.action.MyDiagnosisAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up for defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is looking at their diagnoses.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic MyDiagnosisAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.officeVisitDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labprocDAO = factory.getLabProcedureDAO();\r\n    this.prescriptionsDAO = factory.getPrescriptionsDAO();\r\n}'),(463,'long loggedInMID','long',0,128,'edu.ncsu.csc.itrust.action.MyDiagnosisAction',750,'edu.ncsu.csc.itrust.action.MyDiagnosisAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up for defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is looking at their diagnoses.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic MyDiagnosisAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.officeVisitDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labprocDAO = factory.getLabProcedureDAO();\r\n    this.prescriptionsDAO = factory.getPrescriptionsDAO();\r\n}'),(464,'String icdcode','java.lang.String',0,128,'edu.ncsu.csc.itrust.action.MyDiagnosisAction',753,'edu.ncsu.csc.itrust.action.MyDiagnosisAction.getHCPByDiagnosis(java.lang.String)',0,'/**\r\n * Returns a list of all the HCPs who have a particular diagnosis\r\n *\r\n * @param icdcode\r\n * 		the diagnosis of interest\r\n * @return the list of HCPs\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<HCPDiagnosisBean> getHCPByDiagnosis(String icdcode) throws DBException {\r\n    int medMatch = 0;\r\n    HashMap<Long, HCPDiagnosisBean> hcpHash = new HashMap<Long, HCPDiagnosisBean>();\r\n    HashMap<Long, Long> patientHash = new HashMap<Long, Long>();\r\n    HCPDiagnosisBean diag = null;\r\n    List<OfficeVisitBean> beans = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (OfficeVisitBean bean : beans) {\r\n        // check for HCP-Patient locality based on first 3 digits in ZIP\r\n        if (!(patientDAO.getPatient(loggedInMID).getZip().substring(0, 2).equals(personnelDAO.getPersonnel(bean.getHcpID()).getZip().substring(0, 2))))\r\n            continue;\r\n\r\n        // Check to see if we already have a bean for the HCP associated with this visit\r\n        if (hcpHash.containsKey(bean.getHcpID())) {\r\n            diag = hcpHash.get(bean.getHcpID());\r\n            // get all prescriptions associated with an office visit\r\n            List<PrescriptionBean> prescriptions = prescriptionsDAO.getList(bean.getID());\r\n            for (PrescriptionBean p : prescriptions) {\r\n                List<MedicationBean> mlist = diag.getMedList();\r\n                for (MedicationBean b : mlist) {\r\n                    if (p.getMedication().getDescription().equals(b.getDescription()))\r\n                        medMatch++;\r\n\r\n                }\r\n                if (medMatch == 0) {\r\n                    mlist.add(p.getMedication());\r\n                    diag.setMedList(mlist);\r\n                } else {\r\n                    medMatch = 0;\r\n                }\r\n            }\r\n            // Get Lab Procedures\r\n            List<LabProcedureBean> labprocs = diag.getLabList();\r\n            List<LabProcedureBean> lpbeans = labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID());\r\n            for (LabProcedureBean p : lpbeans) {\r\n                labprocs.add(p);\r\n            }\r\n            diag.setLabList(labprocs);\r\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\r\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\r\n                diag.setVisitSat(survey.getVisitSatisfaction());\r\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\r\n            }\r\n            // Check if this patient has been seen multiple times for this diagnosis\r\n            if (!(patientHash.containsKey(bean.getPatientID()))) {\r\n                patientHash.put(bean.getPatientID(), bean.getHcpID());\r\n                diag.incNumPatients();\r\n            }\r\n        } else {\r\n            diag = new HCPDiagnosisBean();\r\n            List<MedicationBean> mlist = new ArrayList<MedicationBean>();\r\n            diag.setHCP(bean.getHcpID());\r\n            try {\r\n                diag.setHCPName(personnelDAO.getName(bean.getHcpID()));\r\n            } catch (iTrustException e) {\r\n                diag.setHCPName(\"null\");\r\n            }\r\n            diag.incNumPatients();\r\n            List<PrescriptionBean> prescriptions = prescriptionsDAO.getList(bean.getID());\r\n            for (PrescriptionBean p : prescriptions) {\r\n                mlist.add(p.getMedication());\r\n            }\r\n            diag.setMedList(mlist);\r\n            diag.setLabList(labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID()));\r\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\r\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\r\n                diag.setVisitSat(survey.getVisitSatisfaction());\r\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\r\n            }\r\n            patientHash.put(bean.getPatientID(), bean.getHcpID());\r\n            hcpHash.put(bean.getHcpID(), diag);\r\n        }\r\n    }\r\n    List<HCPDiagnosisBean> list = new ArrayList<HCPDiagnosisBean>(hcpHash.values());\r\n    Collections.sort(list, new MyDiagnosisAction.HCPDiagnosisBeanComparator());\r\n    return list;\r\n}'),(465,'long hcpid','long',0,128,'edu.ncsu.csc.itrust.action.MyDiagnosisAction',754,'edu.ncsu.csc.itrust.action.MyDiagnosisAction.getPrescriptionsByHCPAndICD(long,java.lang.String)',0,'/**\r\n * Looks up all the prescriptions given by a certain HCP with the same ICD code.\r\n *\r\n * @param hcpid\r\n * 		The MID of the HCP\r\n * @param icdcode\r\n * 		The ICD code of the prescription we are looking up.\r\n * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionBean> getPrescriptionsByHCPAndICD(long hcpid, String icdcode) throws DBException {\r\n    List<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\r\n    List<OfficeVisitBean> ovs = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (int i = 0; i < (ovs.size()); i++) {\r\n        if ((ovs.get(i).getHcpID()) == hcpid) {\r\n            long ovid = ovs.get(i).getID();\r\n            List<PrescriptionBean> prescriptions = prescriptionsDAO.getList(ovid);\r\n            list.addAll(prescriptions);\r\n        }\r\n    }\r\n    return list;\r\n}'),(466,'String icdcode','java.lang.String',0,128,'edu.ncsu.csc.itrust.action.MyDiagnosisAction',754,'edu.ncsu.csc.itrust.action.MyDiagnosisAction.getPrescriptionsByHCPAndICD(long,java.lang.String)',0,'/**\r\n * Looks up all the prescriptions given by a certain HCP with the same ICD code.\r\n *\r\n * @param hcpid\r\n * 		The MID of the HCP\r\n * @param icdcode\r\n * 		The ICD code of the prescription we are looking up.\r\n * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionBean> getPrescriptionsByHCPAndICD(long hcpid, String icdcode) throws DBException {\r\n    List<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\r\n    List<OfficeVisitBean> ovs = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (int i = 0; i < (ovs.size()); i++) {\r\n        if ((ovs.get(i).getHcpID()) == hcpid) {\r\n            long ovid = ovs.get(i).getID();\r\n            List<PrescriptionBean> prescriptions = prescriptionsDAO.getList(ovid);\r\n            list.addAll(prescriptions);\r\n        }\r\n    }\r\n    return list;\r\n}'),(467,'HCPDiagnosisBean a','edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',254,127,'edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator',756,'edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.compare(edu.ncsu.csc.itrust.beans.HCPDiagnosisBean,edu.ncsu.csc.itrust.beans.HCPDiagnosisBean)',0,'/**\r\n * Compares one HCP with another\r\n *\r\n * @param a\r\n * 		the first HCP\r\n * @param b\r\n * 		the second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\npublic int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {\r\n    int ret = 0;\r\n    if ((a.getNumPatients()) > (b.getNumPatients()))\r\n        ret = -1;\r\n    else\r\n        if ((a.getNumPatients()) < (b.getNumPatients()))\r\n            ret = 1;\r\n\r\n\r\n    return ret;\r\n}'),(468,'HCPDiagnosisBean b','edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',254,127,'edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator',756,'edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.compare(edu.ncsu.csc.itrust.beans.HCPDiagnosisBean,edu.ncsu.csc.itrust.beans.HCPDiagnosisBean)',0,'/**\r\n * Compares one HCP with another\r\n *\r\n * @param a\r\n * 		the first HCP\r\n * @param b\r\n * 		the second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\npublic int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {\r\n    int ret = 0;\r\n    if ((a.getNumPatients()) > (b.getNumPatients()))\r\n        ret = -1;\r\n    else\r\n        if ((a.getNumPatients()) < (b.getNumPatients()))\r\n            ret = 1;\r\n\r\n\r\n    return ret;\r\n}'),(469,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',766,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PatientRoomAssignmentAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n    wardDAO = new WardDAO(factory);\r\n}'),(470,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',768,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,long)',0,'public void assignPatientToRoom(WardRoomBean wardRoom, long patientMID) throws DBException {\r\n    wardRoom.setOccupiedBy(patientMID);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}'),(471,'long patientMID','long',0,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',768,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,long)',0,'public void assignPatientToRoom(WardRoomBean wardRoom, long patientMID) throws DBException {\r\n    wardRoom.setOccupiedBy(patientMID);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}'),(472,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',767,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,edu.ncsu.csc.itrust.beans.PatientBean)',0,'public void assignPatientToRoom(WardRoomBean wardRoom, PatientBean patient) throws DBException {\r\n    assignPatientToRoom(wardRoom, patient.getMID());\r\n}'),(473,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',767,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,edu.ncsu.csc.itrust.beans.PatientBean)',0,'public void assignPatientToRoom(WardRoomBean wardRoom, PatientBean patient) throws DBException {\r\n    assignPatientToRoom(wardRoom, patient.getMID());\r\n}'),(474,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',769,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.removePatientFromRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,java.lang.String)',0,'public void removePatientFromRoom(WardRoomBean wardRoom, String reason) throws DBException {\r\n    long mid = wardRoom.getOccupiedBy();\r\n    wardDAO.checkOutPatientReason(mid, reason);\r\n    wardRoom.setOccupiedBy(null);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}'),(475,'String reason','java.lang.String',0,131,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction',769,'edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.removePatientFromRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,java.lang.String)',0,'public void removePatientFromRoom(WardRoomBean wardRoom, String reason) throws DBException {\r\n    long mid = wardRoom.getOccupiedBy();\r\n    wardDAO.checkOutPatientReason(mid, reason);\r\n    wardRoom.setOccupiedBy(null);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}'),(476,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',774,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates pidString\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is making a prescription report.\r\n * @param pidString\r\n * 		The MID of the patient in question.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.prDAO = factory.getPrescriptionReportDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(477,'long loggedInMID','long',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',774,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates pidString\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is making a prescription report.\r\n * @param pidString\r\n * 		The MID of the patient in question.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.prDAO = factory.getPrescriptionReportDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(478,'String pidString','java.lang.String',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',774,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class validates pidString\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is making a prescription report.\r\n * @param pidString\r\n * 		The MID of the patient in question.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.prDAO = factory.getPrescriptionReportDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(479,'String input','java.lang.String',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',781,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.representPatient(java.lang.String)',0,'/**\r\n * Takes the patients representee as a param and returns it as a long if the patient represents the input\r\n * param\r\n *\r\n * @param input\r\n * 		the patients representee mid\r\n * @return representees mid as a long\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long representPatient(String input) throws iTrustException {\r\n    try {\r\n        long reppeeMID = Long.valueOf(input);\r\n        if (patientDAO.represents(loggedInMID, reppeeMID)) {\r\n            loggedInMID = reppeeMID;\r\n            pid = reppeeMID;\r\n            isRepresenting = true;\r\n            return reppeeMID;\r\n        } else\r\n            throw new iTrustException((\"You do not represent patient \" + reppeeMID));\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"MID is not a number\");\r\n    }\r\n}'),(480,'Map<String, String> params','java.util.Map',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',779,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.getPrescriptionReports(java.util.Map,java.util.List)',0,'/**\r\n * Used by the JSP, passes a Map from the html form and a list of OfficeVisitBeans Returns a list of\r\n * PrescriptionReportBeans\r\n *\r\n * @param params\r\n * 		A java.util.HashMap containing the parameter map.\r\n * @param officeVisits\r\n * 		A java.util.List of OfficeVisitBeans for the visits.\r\n * @return list of PrescriptionReportBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionReportBean> getPrescriptionReports(Map<String, String> params, List<OfficeVisitBean> officeVisits) throws DBException {\r\n    HashMap<String, String> myParams = ParameterUtil.convertMap(params);\r\n    List<Long> ovIDs = new ArrayList<Long>();\r\n    for (int i = 0; i < (officeVisits.size()); i++) {\r\n        try {\r\n            if ((params.get((\"ovOff\" + i))) != null) {\r\n                int offset = Integer.valueOf(myParams.get((\"ovOff\" + i)));\r\n                ovIDs.add(officeVisits.get(offset).getVisitID());\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            // just skip it\r\n        }\r\n    }\r\n    if ((ovIDs.size()) == 0)\r\n        return new ArrayList<PrescriptionReportBean>();\r\n\r\n    return prDAO.byOfficeVisitAndPatient(ovIDs, pid);\r\n}'),(481,'List<OfficeVisitBean> officeVisits','java.util.List',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',779,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.getPrescriptionReports(java.util.Map,java.util.List)',0,'/**\r\n * Used by the JSP, passes a Map from the html form and a list of OfficeVisitBeans Returns a list of\r\n * PrescriptionReportBeans\r\n *\r\n * @param params\r\n * 		A java.util.HashMap containing the parameter map.\r\n * @param officeVisits\r\n * 		A java.util.List of OfficeVisitBeans for the visits.\r\n * @return list of PrescriptionReportBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionReportBean> getPrescriptionReports(Map<String, String> params, List<OfficeVisitBean> officeVisits) throws DBException {\r\n    HashMap<String, String> myParams = ParameterUtil.convertMap(params);\r\n    List<Long> ovIDs = new ArrayList<Long>();\r\n    for (int i = 0; i < (officeVisits.size()); i++) {\r\n        try {\r\n            if ((params.get((\"ovOff\" + i))) != null) {\r\n                int offset = Integer.valueOf(myParams.get((\"ovOff\" + i)));\r\n                ovIDs.add(officeVisits.get(offset).getVisitID());\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            // just skip it\r\n        }\r\n    }\r\n    if ((ovIDs.size()) == 0)\r\n        return new ArrayList<PrescriptionReportBean>();\r\n\r\n    return prDAO.byOfficeVisitAndPatient(ovIDs, pid);\r\n}'),(482,'Map paramMap','java.util.Map',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',780,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.getQueryString(java.util.Map,java.util.List)',0,'/**\r\n * Used by the JSP, which passes the param map from the html form and a list of OfficeVisitBeans Returns a\r\n * string that will be used to create a new url. The JSP will pull params from this url to create the\r\n * prescription report.\r\n *\r\n * @param paramMap\r\n * 		A java.util.HashMap of the parameters.\r\n * @param officeVisits\r\n * 		A java.util.List of OfficeVisitBeans.\r\n * @return the string that will be used in the new url\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\n@SuppressWarnings(\"rawtypes\")\r\npublic String getQueryString(Map paramMap, List<OfficeVisitBean> officeVisits) throws DBException, FormValidationException {\r\n    HashMap<String, String> myParams = ParameterUtil.convertMap(paramMap);\r\n    List<Integer> ovOffsets = checkOfficeVisits(myParams, officeVisits);\r\n    String queryString = buildQueryString(ovOffsets);\r\n    if (isRepresenting)\r\n        queryString += \"&rep=\" + (pid);\r\n\r\n    return queryString;\r\n}'),(483,'List<OfficeVisitBean> officeVisits','java.util.List',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',780,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.getQueryString(java.util.Map,java.util.List)',0,'/**\r\n * Used by the JSP, which passes the param map from the html form and a list of OfficeVisitBeans Returns a\r\n * string that will be used to create a new url. The JSP will pull params from this url to create the\r\n * prescription report.\r\n *\r\n * @param paramMap\r\n * 		A java.util.HashMap of the parameters.\r\n * @param officeVisits\r\n * 		A java.util.List of OfficeVisitBeans.\r\n * @return the string that will be used in the new url\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\n@SuppressWarnings(\"rawtypes\")\r\npublic String getQueryString(Map paramMap, List<OfficeVisitBean> officeVisits) throws DBException, FormValidationException {\r\n    HashMap<String, String> myParams = ParameterUtil.convertMap(paramMap);\r\n    List<Integer> ovOffsets = checkOfficeVisits(myParams, officeVisits);\r\n    String queryString = buildQueryString(ovOffsets);\r\n    if (isRepresenting)\r\n        queryString += \"&rep=\" + (pid);\r\n\r\n    return queryString;\r\n}'),(484,'HashMap<String, String> myParams','java.util.HashMap',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',776,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.checkOfficeVisits(java.util.HashMap,java.util.List)',0,'/**\r\n * Checks office visits\r\n *\r\n * @param myParams\r\n * 		list of parameters\r\n * @param officeVisits\r\n * 		list of office visits\r\n * @return Returns a java.util.ArrayList of Integers for the given office visits.\r\n */\r\nprivate ArrayList<Integer> checkOfficeVisits(HashMap<String, String> myParams, List<OfficeVisitBean> officeVisits) {\r\n    ArrayList<Integer> list = new ArrayList<Integer>();\r\n    for (int i = 0; i < (officeVisits.size()); i++) {\r\n        if (\"on\".equals(myParams.get((\"ov\" + i))))\r\n            list.add(i);\r\n\r\n    }\r\n    return list;\r\n}'),(485,'List<OfficeVisitBean> officeVisits','java.util.List',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',776,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.checkOfficeVisits(java.util.HashMap,java.util.List)',0,'/**\r\n * Checks office visits\r\n *\r\n * @param myParams\r\n * 		list of parameters\r\n * @param officeVisits\r\n * 		list of office visits\r\n * @return Returns a java.util.ArrayList of Integers for the given office visits.\r\n */\r\nprivate ArrayList<Integer> checkOfficeVisits(HashMap<String, String> myParams, List<OfficeVisitBean> officeVisits) {\r\n    ArrayList<Integer> list = new ArrayList<Integer>();\r\n    for (int i = 0; i < (officeVisits.size()); i++) {\r\n        if (\"on\".equals(myParams.get((\"ov\" + i))))\r\n            list.add(i);\r\n\r\n    }\r\n    return list;\r\n}'),(486,'List<Integer> ovOffsets','java.util.List',0,133,'edu.ncsu.csc.itrust.action.PrescriptionReportAction',775,'edu.ncsu.csc.itrust.action.PrescriptionReportAction.buildQueryString(java.util.List)',0,'/**\r\n * Builds a query string for office visits\r\n *\r\n * @param ovOffsets\r\n * 		offsets for the office visits\r\n * @return A SQL query in a Java String.\r\n */\r\nprivate String buildQueryString(List<Integer> ovOffsets) {\r\n    int n = ovOffsets.size();\r\n    if (n == 0)\r\n        return \"\";\r\n\r\n    String str = \"&n=\" + n;\r\n    for (int i = 0; i < (ovOffsets.size()); i++) {\r\n        str += ((\"&ovOff\" + i) + \"=\") + (ovOffsets.get(i));\r\n    }\r\n    return str;\r\n}'),(487,'String hcpID','java.lang.String',0,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',793,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.hcpID = Long.parseLong(hcpID);\r\n    this.validator = new AdverseEventValidator();\r\n}'),(488,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',793,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.hcpID = Long.parseLong(hcpID);\r\n    this.validator = new AdverseEventValidator();\r\n}'),(489,'long loggedInMID','long',0,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',793,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.hcpID = Long.parseLong(hcpID);\r\n    this.validator = new AdverseEventValidator();\r\n}'),(490,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',794,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor used to send e-mails only\r\n */\r\npublic ReportAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.validator = new AdverseEventValidator();\r\n}'),(491,'long loggedInMID','long',0,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',794,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor used to send e-mails only\r\n */\r\npublic ReportAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.validator = new AdverseEventValidator();\r\n}'),(492,'List<AdverseEventBean> aeList','java.util.List',0,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',797,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMails(java.util.List)',0,'/**\r\n * Method that sends exactly one e-mail to each MID in the list of Adverse Events\r\n *\r\n * @param aeList\r\n * 		The list of adverse Event Beans that need to be acted upon\r\n * @return EList The list of e-mails sent for testing purposes\r\n */\r\npublic Email sendMails(List<AdverseEventBean> aeList) throws DBException, FormValidationException, iTrustException {\r\n    List<String> MIDlist = new ArrayList<String>();\r\n    String patientID = \"\";\r\n    for (AdverseEventBean beaner : aeList) {\r\n        patientID = beaner.getMID();\r\n        String newDesc = ((((\" Drug: \" + (beaner.getDrug())) + \" (\") + (beaner.getCode())) + \") Description: \") + (beaner.getDescription());\r\n        beaner.setDescription(newDesc);\r\n    }\r\n    for (AdverseEventBean beano : aeList) {\r\n        if (!(MIDlist.contains(beano.getPrescriber()))) {\r\n            MIDlist.add(beano.getPrescriber());\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    for (String num : MIDlist) {\r\n        String message = (((\" Patient: \" + (patientDAO.getName(Long.parseLong(patientID)))) + \" (MID \") + patientID) + \") Has Reported the following adverse event(s)\";\r\n        for (AdverseEventBean beano : aeList) {\r\n            if (beano.getPrescriber().equals(num)) {\r\n                message = message + (beano.getDescription());\r\n            }\r\n        }\r\n        String fromEmail;\r\n        email.setFrom(\"noreply@itrust.com\");\r\n        PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));\r\n        List<String> toList = new ArrayList<String>();\r\n        toList.add(receiver.getEmail());\r\n        fromEmail = sender.getEmail();\r\n        email.setToList(toList);\r\n        email.setFrom(fromEmail);\r\n        email.setSubject(String.format(\"Adverse Event Report(Prescription)\"));\r\n        email.setBody(message);\r\n        emailer.sendEmail(email);\r\n    }\r\n    return email;\r\n}'),(493,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',797,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMails(java.util.List)',1,'/**\r\n * Method that sends exactly one e-mail to each MID in the list of Adverse Events\r\n *\r\n * @param aeList\r\n * 		The list of adverse Event Beans that need to be acted upon\r\n * @return EList The list of e-mails sent for testing purposes\r\n */\r\npublic Email sendMails(List<AdverseEventBean> aeList) throws DBException, FormValidationException, iTrustException {\r\n    List<String> MIDlist = new ArrayList<String>();\r\n    String patientID = \"\";\r\n    for (AdverseEventBean beaner : aeList) {\r\n        patientID = beaner.getMID();\r\n        String newDesc = ((((\" Drug: \" + (beaner.getDrug())) + \" (\") + (beaner.getCode())) + \") Description: \") + (beaner.getDescription());\r\n        beaner.setDescription(newDesc);\r\n    }\r\n    for (AdverseEventBean beano : aeList) {\r\n        if (!(MIDlist.contains(beano.getPrescriber()))) {\r\n            MIDlist.add(beano.getPrescriber());\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    for (String num : MIDlist) {\r\n        String message = (((\" Patient: \" + (patientDAO.getName(Long.parseLong(patientID)))) + \" (MID \") + patientID) + \") Has Reported the following adverse event(s)\";\r\n        for (AdverseEventBean beano : aeList) {\r\n            if (beano.getPrescriber().equals(num)) {\r\n                message = message + (beano.getDescription());\r\n            }\r\n        }\r\n        String fromEmail;\r\n        email.setFrom(\"noreply@itrust.com\");\r\n        PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));\r\n        List<String> toList = new ArrayList<String>();\r\n        toList.add(receiver.getEmail());\r\n        fromEmail = sender.getEmail();\r\n        email.setToList(toList);\r\n        email.setFrom(fromEmail);\r\n        email.setSubject(String.format(\"Adverse Event Report(Prescription)\"));\r\n        email.setBody(message);\r\n        emailer.sendEmail(email);\r\n    }\r\n    return email;\r\n}'),(494,'AdverseEventBean aeBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',796,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMail(edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'/**\r\n * A method used to send a single e-mail. Used in immunizations.\r\n *\r\n * @param aeBean\r\n * 		\r\n * @return Email returns the Email for testing purposes.\r\n */\r\npublic Email sendMail(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    Email email = new Email();\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n    toList.add(receiver.getEmail());\r\n    fromEmail = sender.getEmail();\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\r\n    email.setBody(String.format(((((((((((\" Patient: \" + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" (MID \") + (aeBean.getMID())) + \") Has Reported the following adverse event\") + \" Drug: \") + (aeBean.getDrug())) + \"(\") + (aeBean.getCode())) + \") Description: \") + (aeBean.getDescription()))));\r\n    emailer.sendEmail(email);\r\n    return email;\r\n}'),(495,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',796,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMail(edu.ncsu.csc.itrust.beans.AdverseEventBean)',1,'/**\r\n * A method used to send a single e-mail. Used in immunizations.\r\n *\r\n * @param aeBean\r\n * 		\r\n * @return Email returns the Email for testing purposes.\r\n */\r\npublic Email sendMail(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    Email email = new Email();\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n    toList.add(receiver.getEmail());\r\n    fromEmail = sender.getEmail();\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\r\n    email.setBody(String.format(((((((((((\" Patient: \" + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" (MID \") + (aeBean.getMID())) + \") Has Reported the following adverse event\") + \" Drug: \") + (aeBean.getDrug())) + \"(\") + (aeBean.getCode())) + \") Description: \") + (aeBean.getDescription()))));\r\n    emailer.sendEmail(email);\r\n    return email;\r\n}'),(496,'AdverseEventBean aeBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,136,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction',795,'edu.ncsu.csc.itrust.action.ReportAdverseEventAction.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'/**\r\n * Method used to add a report to the data base\r\n *\r\n * @param aeBean\r\n * 		The adverse event to add\r\n * @return a string for testing purposes only\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String addReport(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    try {\r\n        validator.validate(aeBean);\r\n    } catch (FormValidationException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        adverseEventDAO.addReport(aeBean, hcpID);\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    /**\r\n     * Old code used to send a single e-mail. Keep for reference\r\n     * Email email = new Email();\r\n     * String senderName;\r\n     * String fromEmail;\r\n     * email.setFrom(\"noreply@itrust.com\");\r\n     * List<String> toList = new ArrayList<String>();\r\n     *\r\n     * PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n     * PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n     *\r\n     * toList.add(receiver.getEmail());\r\n     * senderName = sender.getFullName();\r\n     * fromEmail = sender.getEmail();\r\n     *\r\n     * email.setToList(toList);\r\n     * email.setFrom(fromEmail);\r\n     * email.setSubject(String.format(\"Adverse Event Report\"));\r\n     * email.setBody(String.format(\r\n     * \" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID()))\r\n     * + \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event(s)\" +\r\n     * \" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()\r\n     * ));\r\n     * emailer.sendEmail(email);\r\n     */\r\n    return \"\";\r\n}'),(497,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',806,'edu.ncsu.csc.itrust.action.ResetPasswordAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n */\r\npublic ResetPasswordAction(DAOFactory factory) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.factory = factory;\r\n}'),(498,'String midString','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',808,'edu.ncsu.csc.itrust.action.ResetPasswordAction.checkMID(java.lang.String)',0,'/**\r\n * Checks to see if a user exists with the given mid\r\n *\r\n * @param midString\r\n * 		The users MID to check for.\r\n * @return 0 if the user does not exist, else the mid of the user as a long\r\n */\r\npublic long checkMID(String midString) {\r\n    try {\r\n        long mid = Long.valueOf(midString);\r\n        if (!(authDAO.checkUserExists(mid)))\r\n            return 0;\r\n\r\n        return mid;\r\n    } catch (NumberFormatException e) {\r\n        return 0L;\r\n    } catch (DBException e) {\r\n        return 0L;\r\n    }\r\n}'),(499,'String ipAddress','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',811,'edu.ncsu.csc.itrust.action.ResetPasswordAction.isMaxedOut(java.lang.String)',0,'/**\r\n * Checks to see if the number of reset password attempts has been exceeded for the given ipAddress\r\n *\r\n * @param ipAddress\r\n * 		The IPv4 or IPv6 IP address as a String.\r\n * @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean isMaxedOut(String ipAddress) throws DBException {\r\n    return (authDAO.getResetPasswordFailures(ipAddress)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS);\r\n}'),(500,'long mid','long',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',809,'edu.ncsu.csc.itrust.action.ResetPasswordAction.checkRole(long,java.lang.String)',0,'/**\r\n * Checks if the given mid matches the given role\r\n *\r\n * @param mid\r\n * 		the mid to be checked\r\n * @param role\r\n * 		the role to be checked\r\n * @return true if the mid and role match\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String checkRole(long mid, String role) throws iTrustException {\r\n    try {\r\n        if (((((((\"patient\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"patient\"))) || ((\"hcp\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"hcp\")))) || ((\"uap\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"uap\")))) || ((\"pha\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"pha\")))) || ((\"er\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"er\")))) || ((\"lt\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"lt\"))))\r\n            return role;\r\n        else\r\n            return null;\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        throw e;\r\n    }\r\n    return null;\r\n}'),(501,'String role','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',809,'edu.ncsu.csc.itrust.action.ResetPasswordAction.checkRole(long,java.lang.String)',0,'/**\r\n * Checks if the given mid matches the given role\r\n *\r\n * @param mid\r\n * 		the mid to be checked\r\n * @param role\r\n * 		the role to be checked\r\n * @return true if the mid and role match\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String checkRole(long mid, String role) throws iTrustException {\r\n    try {\r\n        if (((((((\"patient\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"patient\"))) || ((\"hcp\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"hcp\")))) || ((\"uap\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"uap\")))) || ((\"pha\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"pha\")))) || ((\"er\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"er\")))) || ((\"lt\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"lt\"))))\r\n            return role;\r\n        else\r\n            return null;\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        throw e;\r\n    }\r\n    return null;\r\n}'),(502,'String answer','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',807,'edu.ncsu.csc.itrust.action.ResetPasswordAction.checkAnswerNull(java.lang.String)',0,'/**\r\n * Checks if the answer param is null\r\n *\r\n * @param answer\r\n * 		the users security answer\r\n * @return answer if not null, else return null\r\n */\r\npublic String checkAnswerNull(String answer) {\r\n    if ((answer == null) || (\"\".equals(answer)))\r\n        return null;\r\n    else\r\n        return answer;\r\n\r\n}'),(503,'long mid','long',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',810,'edu.ncsu.csc.itrust.action.ResetPasswordAction.getSecurityQuestion(long)',0,'/**\r\n * Returns the security question for the mid param\r\n *\r\n * @param mid\r\n * 		MID of the user\r\n * @return the security question or \"\" if DBException thrown\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getSecurityQuestion(long mid) throws iTrustException {\r\n    try {\r\n        if ((null == (authDAO.getSecurityQuestion(mid))) || (authDAO.getSecurityQuestion(mid).equals(\"\")))\r\n            throw new iTrustException(\"No security question or answer for this user has been set.\");\r\n        else\r\n            return authDAO.getSecurityQuestion(mid);\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return \"\";\r\n    }\r\n}'),(504,'long mid','long',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',813,'edu.ncsu.csc.itrust.action.ResetPasswordAction.resetPassword(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Resets the password for the given mid\r\n *\r\n * @param mid\r\n * 		of the user to have their password reset\r\n * @param role\r\n * 		what role the user has in iTrust\r\n * @param answer\r\n * 		answers to their security question\r\n * @param password\r\n * 		their password\r\n * @param confirmPassword\r\n * 		their password again\r\n * @param ipAddr\r\n * 		the ip address the request is coming from\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws DBException, FormValidationException, iTrustException {\r\n    Role r = authDAO.getUserRole(mid);\r\n    try {\r\n        Role.parse(role);\r\n    } catch (IllegalArgumentException e) {\r\n        return \"Invalid role\";\r\n    }\r\n    if (r.equals(Role.ADMIN))\r\n        return \"This role cannot be changed here\";\r\n\r\n    if (!(r.equals(Role.parse(role))))\r\n        return \"Role mismatch\";\r\n\r\n    if ((authDAO.getResetPasswordFailures(ipAddr)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS)) {\r\n        return \"Too many retries\";\r\n    }\r\n    try {\r\n        validatePassword(password, confirmPassword);\r\n        if (answer.equals(authDAO.getSecurityAnswer(mid))) {\r\n            authDAO.resetPassword(mid, password);\r\n            new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\r\n            return \"Password changed\";\r\n        } else {\r\n            authDAO.recordResetPasswordFailure(ipAddr);\r\n            return \"Answer did not match\";\r\n        }\r\n    } catch (DBException e) {\r\n        return \"Error in validation of security answer\";\r\n    }\r\n}'),(505,'String role','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',813,'edu.ncsu.csc.itrust.action.ResetPasswordAction.resetPassword(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Resets the password for the given mid\r\n *\r\n * @param mid\r\n * 		of the user to have their password reset\r\n * @param role\r\n * 		what role the user has in iTrust\r\n * @param answer\r\n * 		answers to their security question\r\n * @param password\r\n * 		their password\r\n * @param confirmPassword\r\n * 		their password again\r\n * @param ipAddr\r\n * 		the ip address the request is coming from\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws DBException, FormValidationException, iTrustException {\r\n    Role r = authDAO.getUserRole(mid);\r\n    try {\r\n        Role.parse(role);\r\n    } catch (IllegalArgumentException e) {\r\n        return \"Invalid role\";\r\n    }\r\n    if (r.equals(Role.ADMIN))\r\n        return \"This role cannot be changed here\";\r\n\r\n    if (!(r.equals(Role.parse(role))))\r\n        return \"Role mismatch\";\r\n\r\n    if ((authDAO.getResetPasswordFailures(ipAddr)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS)) {\r\n        return \"Too many retries\";\r\n    }\r\n    try {\r\n        validatePassword(password, confirmPassword);\r\n        if (answer.equals(authDAO.getSecurityAnswer(mid))) {\r\n            authDAO.resetPassword(mid, password);\r\n            new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\r\n            return \"Password changed\";\r\n        } else {\r\n            authDAO.recordResetPasswordFailure(ipAddr);\r\n            return \"Answer did not match\";\r\n        }\r\n    } catch (DBException e) {\r\n        return \"Error in validation of security answer\";\r\n    }\r\n}'),(506,'String answer','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',813,'edu.ncsu.csc.itrust.action.ResetPasswordAction.resetPassword(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Resets the password for the given mid\r\n *\r\n * @param mid\r\n * 		of the user to have their password reset\r\n * @param role\r\n * 		what role the user has in iTrust\r\n * @param answer\r\n * 		answers to their security question\r\n * @param password\r\n * 		their password\r\n * @param confirmPassword\r\n * 		their password again\r\n * @param ipAddr\r\n * 		the ip address the request is coming from\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws DBException, FormValidationException, iTrustException {\r\n    Role r = authDAO.getUserRole(mid);\r\n    try {\r\n        Role.parse(role);\r\n    } catch (IllegalArgumentException e) {\r\n        return \"Invalid role\";\r\n    }\r\n    if (r.equals(Role.ADMIN))\r\n        return \"This role cannot be changed here\";\r\n\r\n    if (!(r.equals(Role.parse(role))))\r\n        return \"Role mismatch\";\r\n\r\n    if ((authDAO.getResetPasswordFailures(ipAddr)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS)) {\r\n        return \"Too many retries\";\r\n    }\r\n    try {\r\n        validatePassword(password, confirmPassword);\r\n        if (answer.equals(authDAO.getSecurityAnswer(mid))) {\r\n            authDAO.resetPassword(mid, password);\r\n            new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\r\n            return \"Password changed\";\r\n        } else {\r\n            authDAO.recordResetPasswordFailure(ipAddr);\r\n            return \"Answer did not match\";\r\n        }\r\n    } catch (DBException e) {\r\n        return \"Error in validation of security answer\";\r\n    }\r\n}'),(507,'String password','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',813,'edu.ncsu.csc.itrust.action.ResetPasswordAction.resetPassword(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Resets the password for the given mid\r\n *\r\n * @param mid\r\n * 		of the user to have their password reset\r\n * @param role\r\n * 		what role the user has in iTrust\r\n * @param answer\r\n * 		answers to their security question\r\n * @param password\r\n * 		their password\r\n * @param confirmPassword\r\n * 		their password again\r\n * @param ipAddr\r\n * 		the ip address the request is coming from\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws DBException, FormValidationException, iTrustException {\r\n    Role r = authDAO.getUserRole(mid);\r\n    try {\r\n        Role.parse(role);\r\n    } catch (IllegalArgumentException e) {\r\n        return \"Invalid role\";\r\n    }\r\n    if (r.equals(Role.ADMIN))\r\n        return \"This role cannot be changed here\";\r\n\r\n    if (!(r.equals(Role.parse(role))))\r\n        return \"Role mismatch\";\r\n\r\n    if ((authDAO.getResetPasswordFailures(ipAddr)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS)) {\r\n        return \"Too many retries\";\r\n    }\r\n    try {\r\n        validatePassword(password, confirmPassword);\r\n        if (answer.equals(authDAO.getSecurityAnswer(mid))) {\r\n            authDAO.resetPassword(mid, password);\r\n            new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\r\n            return \"Password changed\";\r\n        } else {\r\n            authDAO.recordResetPasswordFailure(ipAddr);\r\n            return \"Answer did not match\";\r\n        }\r\n    } catch (DBException e) {\r\n        return \"Error in validation of security answer\";\r\n    }\r\n}'),(508,'String confirmPassword','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',813,'edu.ncsu.csc.itrust.action.ResetPasswordAction.resetPassword(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Resets the password for the given mid\r\n *\r\n * @param mid\r\n * 		of the user to have their password reset\r\n * @param role\r\n * 		what role the user has in iTrust\r\n * @param answer\r\n * 		answers to their security question\r\n * @param password\r\n * 		their password\r\n * @param confirmPassword\r\n * 		their password again\r\n * @param ipAddr\r\n * 		the ip address the request is coming from\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws DBException, FormValidationException, iTrustException {\r\n    Role r = authDAO.getUserRole(mid);\r\n    try {\r\n        Role.parse(role);\r\n    } catch (IllegalArgumentException e) {\r\n        return \"Invalid role\";\r\n    }\r\n    if (r.equals(Role.ADMIN))\r\n        return \"This role cannot be changed here\";\r\n\r\n    if (!(r.equals(Role.parse(role))))\r\n        return \"Role mismatch\";\r\n\r\n    if ((authDAO.getResetPasswordFailures(ipAddr)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS)) {\r\n        return \"Too many retries\";\r\n    }\r\n    try {\r\n        validatePassword(password, confirmPassword);\r\n        if (answer.equals(authDAO.getSecurityAnswer(mid))) {\r\n            authDAO.resetPassword(mid, password);\r\n            new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\r\n            return \"Password changed\";\r\n        } else {\r\n            authDAO.recordResetPasswordFailure(ipAddr);\r\n            return \"Answer did not match\";\r\n        }\r\n    } catch (DBException e) {\r\n        return \"Error in validation of security answer\";\r\n    }\r\n}'),(509,'String ipAddr','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',813,'edu.ncsu.csc.itrust.action.ResetPasswordAction.resetPassword(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Resets the password for the given mid\r\n *\r\n * @param mid\r\n * 		of the user to have their password reset\r\n * @param role\r\n * 		what role the user has in iTrust\r\n * @param answer\r\n * 		answers to their security question\r\n * @param password\r\n * 		their password\r\n * @param confirmPassword\r\n * 		their password again\r\n * @param ipAddr\r\n * 		the ip address the request is coming from\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws DBException, FormValidationException, iTrustException {\r\n    Role r = authDAO.getUserRole(mid);\r\n    try {\r\n        Role.parse(role);\r\n    } catch (IllegalArgumentException e) {\r\n        return \"Invalid role\";\r\n    }\r\n    if (r.equals(Role.ADMIN))\r\n        return \"This role cannot be changed here\";\r\n\r\n    if (!(r.equals(Role.parse(role))))\r\n        return \"Role mismatch\";\r\n\r\n    if ((authDAO.getResetPasswordFailures(ipAddr)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS)) {\r\n        return \"Too many retries\";\r\n    }\r\n    try {\r\n        validatePassword(password, confirmPassword);\r\n        if (answer.equals(authDAO.getSecurityAnswer(mid))) {\r\n            authDAO.resetPassword(mid, password);\r\n            new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\r\n            return \"Password changed\";\r\n        } else {\r\n            authDAO.recordResetPasswordFailure(ipAddr);\r\n            return \"Answer did not match\";\r\n        }\r\n    } catch (DBException e) {\r\n        return \"Error in validation of security answer\";\r\n    }\r\n}'),(510,'long mid','long',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',812,'edu.ncsu.csc.itrust.action.ResetPasswordAction.makeEmailApp(long,java.lang.String)',0,'/**\r\n * Creates and sends an e-mail about the change\r\n *\r\n * @param mid\r\n * 		the user whos password was changed\r\n * @param role\r\n * 		what role they have in iTrust\r\n * @return the e-mial that is sent\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmailApp(long mid, String role) throws DBException {\r\n    if ((Role.parse(role)) == (Role.PATIENT)) {\r\n        PatientBean p = new PatientDAO(factory).getPatient(mid);\r\n        Email email = new Email();\r\n        email.setFrom(\"no-reply@itrust.com\");\r\n        email.setToList(Arrays.asList(p.getEmail()));\r\n        email.setSubject(\"Your password has been changed in iTrust\");\r\n        email.setBody(String.format(\"Dear %s, \n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n        return email;\r\n    } else {\r\n        // UAP or HCP - admin taken out in \"resetPassword\"\r\n        PersonnelBean p = new PersonnelDAO(factory).getPersonnel(mid);\r\n        Email email = new Email();\r\n        email.setFrom(\"no-reply@itrust.com\");\r\n        email.setToList(Arrays.asList(p.getEmail()));\r\n        email.setSubject(\"Your password has been changed in iTrust\");\r\n        email.setBody(String.format(\"Dear %s, \n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n        return email;\r\n    }\r\n}'),(511,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',812,'edu.ncsu.csc.itrust.action.ResetPasswordAction.makeEmailApp(long,java.lang.String)',1,'/**\r\n * Creates and sends an e-mail about the change\r\n *\r\n * @param mid\r\n * 		the user whos password was changed\r\n * @param role\r\n * 		what role they have in iTrust\r\n * @return the e-mial that is sent\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmailApp(long mid, String role) throws DBException {\r\n    if ((Role.parse(role)) == (Role.PATIENT)) {\r\n        PatientBean p = new PatientDAO(factory).getPatient(mid);\r\n        Email email = new Email();\r\n        email.setFrom(\"no-reply@itrust.com\");\r\n        email.setToList(Arrays.asList(p.getEmail()));\r\n        email.setSubject(\"Your password has been changed in iTrust\");\r\n        email.setBody(String.format(\"Dear %s, \n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n        return email;\r\n    } else {\r\n        // UAP or HCP - admin taken out in \"resetPassword\"\r\n        PersonnelBean p = new PersonnelDAO(factory).getPersonnel(mid);\r\n        Email email = new Email();\r\n        email.setFrom(\"no-reply@itrust.com\");\r\n        email.setToList(Arrays.asList(p.getEmail()));\r\n        email.setSubject(\"Your password has been changed in iTrust\");\r\n        email.setBody(String.format(\"Dear %s, \n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n        return email;\r\n    }\r\n}'),(512,'String role','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',812,'edu.ncsu.csc.itrust.action.ResetPasswordAction.makeEmailApp(long,java.lang.String)',0,'/**\r\n * Creates and sends an e-mail about the change\r\n *\r\n * @param mid\r\n * 		the user whos password was changed\r\n * @param role\r\n * 		what role they have in iTrust\r\n * @return the e-mial that is sent\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate Email makeEmailApp(long mid, String role) throws DBException {\r\n    if ((Role.parse(role)) == (Role.PATIENT)) {\r\n        PatientBean p = new PatientDAO(factory).getPatient(mid);\r\n        Email email = new Email();\r\n        email.setFrom(\"no-reply@itrust.com\");\r\n        email.setToList(Arrays.asList(p.getEmail()));\r\n        email.setSubject(\"Your password has been changed in iTrust\");\r\n        email.setBody(String.format(\"Dear %s, \n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n        return email;\r\n    } else {\r\n        // UAP or HCP - admin taken out in \"resetPassword\"\r\n        PersonnelBean p = new PersonnelDAO(factory).getPersonnel(mid);\r\n        Email email = new Email();\r\n        email.setFrom(\"no-reply@itrust.com\");\r\n        email.setToList(Arrays.asList(p.getEmail()));\r\n        email.setSubject(\"Your password has been changed in iTrust\");\r\n        email.setBody(String.format(\"Dear %s, \n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n        return email;\r\n    }\r\n}'),(513,'String password','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',814,'edu.ncsu.csc.itrust.action.ResetPasswordAction.validatePassword(java.lang.String,java.lang.String)',0,'/**\r\n * Checks to make sure the password is correctly entered twice.\r\n *\r\n * @param password\r\n * 		the password\r\n * @param confirmPassword\r\n * 		the password again for confirmation\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate void validatePassword(String password, String confirmPassword) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((password == null) || (\"\".equals(password))) {\r\n        errorList.addIfNotNull(\"Password cannot be empty\");\r\n    } else {\r\n        if (!(password.equals(confirmPassword)))\r\n            errorList.addIfNotNull(\"Passwords dont match\");\r\n\r\n        if (!(ValidationFormat.PASSWORD.getRegex().matcher(password).matches())) {\r\n            errorList.addIfNotNull((\"Password must be in the following format: \" + (ValidationFormat.PASSWORD.getDescription())));\r\n        }\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(514,'String confirmPassword','java.lang.String',0,138,'edu.ncsu.csc.itrust.action.ResetPasswordAction',814,'edu.ncsu.csc.itrust.action.ResetPasswordAction.validatePassword(java.lang.String,java.lang.String)',0,'/**\r\n * Checks to make sure the password is correctly entered twice.\r\n *\r\n * @param password\r\n * 		the password\r\n * @param confirmPassword\r\n * 		the password again for confirmation\r\n * @throws FormValidationException\r\n * 		\r\n */\r\nprivate void validatePassword(String password, String confirmPassword) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((password == null) || (\"\".equals(password))) {\r\n        errorList.addIfNotNull(\"Password cannot be empty\");\r\n    } else {\r\n        if (!(password.equals(confirmPassword)))\r\n            errorList.addIfNotNull(\"Passwords dont match\");\r\n\r\n        if (!(ValidationFormat.PASSWORD.getRegex().matcher(password).matches())) {\r\n            errorList.addIfNotNull((\"Password must be in the following format: \" + (ValidationFormat.PASSWORD.getDescription())));\r\n        }\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(515,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',830,'edu.ncsu.csc.itrust.action.SearchUsersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is performing the search.\r\n */\r\npublic SearchUsersAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(516,'long loggedInMID','long',0,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',830,'edu.ncsu.csc.itrust.action.SearchUsersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is performing the search.\r\n */\r\npublic SearchUsersAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}'),(517,'String firstName','java.lang.String',0,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',834,'edu.ncsu.csc.itrust.action.SearchUsersAction.searchForPersonnelWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Searches for all personnel with the first name and last name specified in the parameter list.\r\n *\r\n * @param firstName\r\n * 		The first name to be searched.\r\n * @param lastName\r\n * 		The last name to be searched.\r\n * @return A java.util.List of PersonnelBeans for the users who matched.\r\n */\r\npublic List<PersonnelBean> searchForPersonnelWithName(String firstName, String lastName) {\r\n    try {\r\n        if (\"\".equals(firstName))\r\n            firstName = \"%\";\r\n\r\n        if (\"\".equals(lastName))\r\n            lastName = \"%\";\r\n\r\n        return personnelDAO.searchForPersonnelWithName(firstName, lastName);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}'),(518,'String lastName','java.lang.String',0,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',834,'edu.ncsu.csc.itrust.action.SearchUsersAction.searchForPersonnelWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Searches for all personnel with the first name and last name specified in the parameter list.\r\n *\r\n * @param firstName\r\n * 		The first name to be searched.\r\n * @param lastName\r\n * 		The last name to be searched.\r\n * @return A java.util.List of PersonnelBeans for the users who matched.\r\n */\r\npublic List<PersonnelBean> searchForPersonnelWithName(String firstName, String lastName) {\r\n    try {\r\n        if (\"\".equals(firstName))\r\n            firstName = \"%\";\r\n\r\n        if (\"\".equals(lastName))\r\n            lastName = \"%\";\r\n\r\n        return personnelDAO.searchForPersonnelWithName(firstName, lastName);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}'),(519,'String firstName','java.lang.String',0,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',833,'edu.ncsu.csc.itrust.action.SearchUsersAction.searchForPatientsWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Search for all patients with first name and last name given in parameters.\r\n *\r\n * @param firstName\r\n * 		The first name of the patient being searched.\r\n * @param lastName\r\n * 		The last name of the patient being searched.\r\n * @return A java.util.List of PatientBeans\r\n */\r\npublic List<PatientBean> searchForPatientsWithName(String firstName, String lastName) {\r\n    try {\r\n        if (\"\".equals(firstName))\r\n            firstName = \"%\";\r\n\r\n        if (\"\".equals(lastName))\r\n            lastName = \"%\";\r\n\r\n        return patientDAO.searchForPatientsWithName(firstName, lastName);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}'),(520,'String lastName','java.lang.String',0,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',833,'edu.ncsu.csc.itrust.action.SearchUsersAction.searchForPatientsWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Search for all patients with first name and last name given in parameters.\r\n *\r\n * @param firstName\r\n * 		The first name of the patient being searched.\r\n * @param lastName\r\n * 		The last name of the patient being searched.\r\n * @return A java.util.List of PatientBeans\r\n */\r\npublic List<PatientBean> searchForPatientsWithName(String firstName, String lastName) {\r\n    try {\r\n        if (\"\".equals(firstName))\r\n            firstName = \"%\";\r\n\r\n        if (\"\".equals(lastName))\r\n            lastName = \"%\";\r\n\r\n        return patientDAO.searchForPatientsWithName(firstName, lastName);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}'),(521,'String query','java.lang.String',0,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',831,'edu.ncsu.csc.itrust.action.SearchUsersAction.fuzzySearchForPatients(java.lang.String)',0,'/**\r\n * Search for all patients with first name and last name given in parameters.\r\n *\r\n * @param firstName\r\n * 		The first name of the patient being searched.\r\n * @param lastName\r\n * 		The last name of the patient being searched.\r\n * @return A java.util.List of PatientBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> fuzzySearchForPatients(String query) {\r\n    return fuzzySearchForPatients(query, false);\r\n}'),(522,'String query','java.lang.String',0,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',832,'edu.ncsu.csc.itrust.action.SearchUsersAction.fuzzySearchForPatients(java.lang.String,boolean)',0,'/**\r\n * Search for all patients with first name and last name given in parameters.\r\n *\r\n * @param firstName\r\n * 		The first name of the patient being searched.\r\n * @param lastName\r\n * 		The last name of the patient being searched.\r\n * @return A java.util.List of PatientBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> fuzzySearchForPatients(String query, boolean allowDeactivated) {\r\n    String[] subqueries = null;\r\n    Set<PatientBean> patientsSet = new TreeSet<PatientBean>();\r\n    if ((query != null) && ((query.length()) > 0)) {\r\n        subqueries = query.split(\" \");\r\n        Set<PatientBean>[] patients = new Set[subqueries.length];\r\n        int i = 0;\r\n        for (String q : subqueries) {\r\n            try {\r\n                patients[i] = new TreeSet<PatientBean>();\r\n                List<PatientBean> first = patientDAO.fuzzySearchForPatientsWithName(q, \"\");\r\n                List<PatientBean> last = patientDAO.fuzzySearchForPatientsWithName(\"\", q);\r\n                patients[i].addAll(first);\r\n                patients[i].addAll(last);\r\n                try {\r\n                    long mid = Long.valueOf(q);\r\n                    patients[i].add(patientDAO.getPatient(mid));\r\n                } catch (NumberFormatException e) {\r\n                }\r\n                i++;\r\n            } catch (DBException e1) {\r\n                e1.printStackTrace();\r\n            }\r\n        }\r\n        patientsSet.addAll(patients[0]);\r\n        for (Set<PatientBean> results : patients) {\r\n            try {\r\n                patientsSet.retainAll(results);\r\n            } catch (NullPointerException e) {\r\n            }\r\n        }\r\n    }\r\n    ArrayList<PatientBean> results = new ArrayList<PatientBean>(patientsSet);\r\n    if (allowDeactivated == false) {\r\n        for (int i = (results.size()) - 1; i >= 0; i--) {\r\n            if (!(results.get(i).getDateOfDeactivationStr().equals(\"\"))) {\r\n                results.remove(i);\r\n            }\r\n        }\r\n    }\r\n    return results;\r\n}'),(523,'boolean allowDeactivated','boolean',0,140,'edu.ncsu.csc.itrust.action.SearchUsersAction',832,'edu.ncsu.csc.itrust.action.SearchUsersAction.fuzzySearchForPatients(java.lang.String,boolean)',0,'/**\r\n * Search for all patients with first name and last name given in parameters.\r\n *\r\n * @param firstName\r\n * 		The first name of the patient being searched.\r\n * @param lastName\r\n * 		The last name of the patient being searched.\r\n * @return A java.util.List of PatientBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> fuzzySearchForPatients(String query, boolean allowDeactivated) {\r\n    String[] subqueries = null;\r\n    Set<PatientBean> patientsSet = new TreeSet<PatientBean>();\r\n    if ((query != null) && ((query.length()) > 0)) {\r\n        subqueries = query.split(\" \");\r\n        Set<PatientBean>[] patients = new Set[subqueries.length];\r\n        int i = 0;\r\n        for (String q : subqueries) {\r\n            try {\r\n                patients[i] = new TreeSet<PatientBean>();\r\n                List<PatientBean> first = patientDAO.fuzzySearchForPatientsWithName(q, \"\");\r\n                List<PatientBean> last = patientDAO.fuzzySearchForPatientsWithName(\"\", q);\r\n                patients[i].addAll(first);\r\n                patients[i].addAll(last);\r\n                try {\r\n                    long mid = Long.valueOf(q);\r\n                    patients[i].add(patientDAO.getPatient(mid));\r\n                } catch (NumberFormatException e) {\r\n                }\r\n                i++;\r\n            } catch (DBException e1) {\r\n                e1.printStackTrace();\r\n            }\r\n        }\r\n        patientsSet.addAll(patients[0]);\r\n        for (Set<PatientBean> results : patients) {\r\n            try {\r\n                patientsSet.retainAll(results);\r\n            } catch (NullPointerException e) {\r\n            }\r\n        }\r\n    }\r\n    ArrayList<PatientBean> results = new ArrayList<PatientBean>(patientsSet);\r\n    if (allowDeactivated == false) {\r\n        for (int i = (results.size()) - 1; i >= 0; i--) {\r\n            if (!(results.get(i).getDateOfDeactivationStr().equals(\"\"))) {\r\n                results.remove(i);\r\n            }\r\n        }\r\n    }\r\n    return results;\r\n}'),(524,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,142,'edu.ncsu.csc.itrust.action.SendMessageAction',850,'edu.ncsu.csc.itrust.action.SendMessageAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user sending the message.\r\n */\r\npublic SendMessageAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.emailVal = new EMailValidator();\r\n    this.messVal = new MessageValidator();\r\n}'),(525,'long loggedInMID','long',0,142,'edu.ncsu.csc.itrust.action.SendMessageAction',850,'edu.ncsu.csc.itrust.action.SendMessageAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user sending the message.\r\n */\r\npublic SendMessageAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.emailVal = new EMailValidator();\r\n    this.messVal = new MessageValidator();\r\n}'),(526,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,142,'edu.ncsu.csc.itrust.action.SendMessageAction',857,'edu.ncsu.csc.itrust.action.SendMessageAction.sendMessage(edu.ncsu.csc.itrust.beans.MessageBean)',0,'/**\r\n * Sends a message\r\n *\r\n * @param mBean\r\n * 		message to be sent\r\n * @throws iTrustException\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic void sendMessage(MessageBean mBean) throws FormValidationException, iTrustException, SQLException {\r\n    messVal.validate(mBean);\r\n    emailVal.validate(mBean);\r\n    messageDAO.addMessage(mBean);\r\n    Email email = new Email();\r\n    String senderName;\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    if ((8999999999L < (mBean.getFrom())) && (8999999999L < (mBean.getTo()))) {\r\n        // when from and to are LHCPs\r\n        PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n        toList.add(receiver.getEmail());\r\n        senderName = sender.getFullName();\r\n        fromEmail = sender.getEmail();\r\n        email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n    } else {\r\n        if (6999999999L < (mBean.getFrom())) {\r\n            PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n            if (6999999999L < (mBean.getTo())) {\r\n                // when from is any personnel and to is any personnel\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            } else {\r\n                // when from is any personnel and to is patient\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/patient/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            }\r\n            fromEmail = sender.getEmail();\r\n        } else {\r\n            PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n            if (6999999999L < (mBean.getTo())) {\r\n                // when from is patient and to is any personnel\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            } else {\r\n                // when from is patient and to is patient\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/patient/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            }\r\n            fromEmail = sender.getEmail();\r\n        }\r\n    }\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"A new message from %s\", senderName));\r\n    emailer.sendEmail(email);\r\n}'),(527,'long mid','long',0,142,'edu.ncsu.csc.itrust.action.SendMessageAction',855,'edu.ncsu.csc.itrust.action.SendMessageAction.getPatientName(long)',0,'/**\r\n * Returns the patients name\r\n *\r\n * @param mid\r\n * 		MId of the patient\r\n * @return the name of the patient\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(long mid) throws iTrustException {\r\n    return patientDAO.getName(mid);\r\n}'),(528,'long mid','long',0,142,'edu.ncsu.csc.itrust.action.SendMessageAction',856,'edu.ncsu.csc.itrust.action.SendMessageAction.getPersonnelName(long)',0,'/**\r\n * Returns the personnels name\r\n *\r\n * @param mid\r\n * 		MId of the personnel\r\n * @return the name of the personnel\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPersonnelName(long mid) throws iTrustException {\r\n    return personnelDAO.getName(mid);\r\n}'),(529,'long pid','long',0,142,'edu.ncsu.csc.itrust.action.SendMessageAction',852,'edu.ncsu.csc.itrust.action.SendMessageAction.getDLHCPsFor(long)',0,'/**\r\n * Returns the designated HCPs for the given patient.\r\n *\r\n * @return designated HCPs for the given patient.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<PersonnelBean> getDLHCPsFor(long pid) throws iTrustException {\r\n    List<PersonnelBean> dlhcps = new ArrayList<PersonnelBean>();\r\n    try {\r\n        dlhcps = patientDAO.getDeclaredHCPs(pid);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return dlhcps;\r\n}'),(530,'long mid','long',0,142,'edu.ncsu.csc.itrust.action.SendMessageAction',851,'edu.ncsu.csc.itrust.action.SendMessageAction.getDLHCPByMID(long)',0,'public PersonnelBean getDLHCPByMID(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}'),(531,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,142,'edu.ncsu.csc.itrust.action.SendMessageAction',851,'edu.ncsu.csc.itrust.action.SendMessageAction.getDLHCPByMID(long)',1,'public PersonnelBean getDLHCPByMID(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}'),(532,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,144,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction',867,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param rLoggedInMID\r\n * 		The MID of the user who is setting their security question.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic SetSecurityQuestionAction(DAOFactory factory, long rLoggedInMID) throws iTrustException {\r\n    this.authDAO = factory.getAuthDAO();\r\n    loggedInMID = checkMID(rLoggedInMID);\r\n}'),(533,'long rLoggedInMID','long',0,144,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction',867,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param rLoggedInMID\r\n * 		The MID of the user who is setting their security question.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic SetSecurityQuestionAction(DAOFactory factory, long rLoggedInMID) throws iTrustException {\r\n    this.authDAO = factory.getAuthDAO();\r\n    loggedInMID = checkMID(rLoggedInMID);\r\n}'),(534,'SecurityQA a','edu.ncsu.csc.itrust.beans.SecurityQA',277,144,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction',870,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.updateInformation(edu.ncsu.csc.itrust.beans.SecurityQA)',0,'/**\r\n * Updates information in the database from the information held in the SecurityQA bean passed as a param\r\n *\r\n * @param a\r\n * 		SecurityQuestionBean that holds new information\r\n * @throws Exception\r\n * 		\r\n */\r\npublic void updateInformation(SecurityQA a) throws Exception {\r\n    SecurityQAValidator sqav = new SecurityQAValidator();\r\n    sqav.validate(a);\r\n    authDAO.setSecurityQuestionAnswer(a.getQuestion(), a.getAnswer(), loggedInMID);\r\n}'),(535,'long mid','long',0,144,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction',868,'edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.checkMID(long)',0,'/**\r\n * Checks to make sure the MID exists in iTrust\r\n *\r\n * @param mid\r\n * 		MID to check\r\n * @return returns the MID if the user is valid, otherwise, throws an exception\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate long checkMID(long mid) throws iTrustException {\r\n    if (!(authDAO.checkUserExists(mid)))\r\n        throw new iTrustException(((\"MID \" + mid) + \" is not a user!\"));\r\n\r\n    return mid;\r\n}'),(536,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,146,'edu.ncsu.csc.itrust.action.SurveyAction',877,'edu.ncsu.csc.itrust.action.SurveyAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user taking the survey.\r\n */\r\npublic SurveyAction(DAOFactory factory, long loggedInMID) {\r\n    surveyDAO = factory.getSurveyDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(537,'long loggedInMID','long',0,146,'edu.ncsu.csc.itrust.action.SurveyAction',877,'edu.ncsu.csc.itrust.action.SurveyAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user taking the survey.\r\n */\r\npublic SurveyAction(DAOFactory factory, long loggedInMID) {\r\n    surveyDAO = factory.getSurveyDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(538,'SurveyBean surveyBean','edu.ncsu.csc.itrust.beans.SurveyBean',278,146,'edu.ncsu.csc.itrust.action.SurveyAction',878,'edu.ncsu.csc.itrust.action.SurveyAction.addSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,long)',0,'/**\r\n * Pass the OfficeVistBean along with SurveyBean\r\n *\r\n * @param surveyBean\r\n * 		contains data to be added to database\r\n * @param visitID\r\n * 		The Office Visit ID corresponding to this Survey.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addSurvey(SurveyBean surveyBean, long visitID) throws DBException {\r\n    surveyBean.setVisitID(visitID);// now set visit ID in the survey bean\r\n\r\n    surveyDAO.addCompletedSurvey(surveyBean, Calendar.getInstance().getTime());\r\n}'),(539,'long visitID','long',0,146,'edu.ncsu.csc.itrust.action.SurveyAction',878,'edu.ncsu.csc.itrust.action.SurveyAction.addSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,long)',0,'/**\r\n * Pass the OfficeVistBean along with SurveyBean\r\n *\r\n * @param surveyBean\r\n * 		contains data to be added to database\r\n * @param visitID\r\n * 		The Office Visit ID corresponding to this Survey.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addSurvey(SurveyBean surveyBean, long visitID) throws DBException {\r\n    surveyBean.setVisitID(visitID);// now set visit ID in the survey bean\r\n\r\n    surveyDAO.addCompletedSurvey(surveyBean, Calendar.getInstance().getTime());\r\n}'),(540,'long ovID','long',0,146,'edu.ncsu.csc.itrust.action.SurveyAction',879,'edu.ncsu.csc.itrust.action.SurveyAction.getPatientMID(long)',0,'public long getPatientMID(long ovID) throws DBException, NumberFormatException {\r\n    return ovDAO.getOfficeVisit(ovID).getPatientID();\r\n}'),(541,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',880,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the administrator who is updating the CPTs.\r\n */\r\npublic UpdateCPTCodeListAction(DAOFactory factory, long loggedInMID) {\r\n    this.cptDAO = factory.getCPTCodesDAO();\r\n}'),(542,'long loggedInMID','long',0,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',880,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the administrator who is updating the CPTs.\r\n */\r\npublic UpdateCPTCodeListAction(DAOFactory factory, long loggedInMID) {\r\n    this.cptDAO = factory.getCPTCodesDAO();\r\n}'),(543,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',881,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Adds a new cpt code (med procedure)\r\n *\r\n * @param proc\r\n * 		ProcedureBean that holds the new cpt code\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addCPTCode(ProcedureBean proc) throws FormValidationException {\r\n    validator.validate(proc);\r\n    try {\r\n        if (cptDAO.addCPTCode(proc)) {\r\n            return (((\"Success: \" + (proc.getCPTCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(544,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',883,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Updates a procedure with new information from the ProcedureBean\r\n *\r\n * @param proc\r\n * 		ProcedureBean with new information (but same CPT code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(ProcedureBean proc) throws FormValidationException {\r\n    validator.validate(proc);\r\n    try {\r\n        int rows = updateCode(proc);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found. To edit an actual code, \" + \"change the description and add a new code with the old description\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(545,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,147,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction',882,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Updates the cpt code\r\n *\r\n * @param proc\r\n * 		the code to be updated\r\n * @return updated code\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int updateCode(ProcedureBean proc) throws DBException {\r\n    return cptDAO.updateCode(proc);\r\n}'),(546,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,148,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest',886,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'private String getAddCodeSuccessString(ProcedureBean proc) {\r\n    return (((\"Success: \" + (proc.getCPTCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(547,'String code','java.lang.String',0,148,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest',885,'edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.addEmpty(java.lang.String)',0,'private void addEmpty(String code) throws Exception {\r\n    ProcedureBean proc = new ProcedureBean(code, \" \");\r\n    TestCase.assertEquals(getAddCodeSuccessString(proc), action.addCPTCode(proc));\r\n    proc = factory.getCPTCodesDAO().getCPTCode(code);\r\n    TestCase.assertEquals(\" \", proc.getDescription());\r\n}'),(548,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',894,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the person updating the hospitals.\r\n */\r\npublic UpdateHospitalListAction(DAOFactory factory, long performerID) {\r\n    this.hospDAO = factory.getHospitalsDAO();\r\n}'),(549,'long performerID','long',0,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',894,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the person updating the hospitals.\r\n */\r\npublic UpdateHospitalListAction(DAOFactory factory, long performerID) {\r\n    this.hospDAO = factory.getHospitalsDAO();\r\n}'),(550,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',895,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Adds a hospital using the HospitalBean passed as a parameter\r\n *\r\n * @param hosp\r\n * 		the new hospital listing\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addHospital(HospitalBean hosp) throws FormValidationException {\r\n    new HospitalBeanValidator().validate(hosp);\r\n    try {\r\n        if (hospDAO.addHospital(hosp)) {\r\n            return (((\"Success: \" + (hosp.getHospitalID())) + \" - \") + (hosp.getHospitalName())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(551,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',897,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateInformation(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a\r\n * parameter\r\n *\r\n * @param hosp\r\n * 		the new hospital information with the same hospital id\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(HospitalBean hosp) throws FormValidationException {\r\n    new HospitalBeanValidator().validate(hosp);\r\n    try {\r\n        int rows = 0;\r\n        return 0 == (rows = updateHospital(hosp)) ? \"Error: Hospital not found.\" : (\"Success: \" + rows) + \" row(s) updated\";\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(552,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,149,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction',896,'edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Updates hospital\r\n *\r\n * @param hosp\r\n * 		new information\r\n * @return id for the updated hospital\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int updateHospital(HospitalBean hosp) throws DBException {\r\n    return hospDAO.updateHospital(hosp);\r\n}'),(553,'HospitalBean proc','edu.ncsu.csc.itrust.beans.HospitalBean',258,150,'edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest',900,'edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.getAddHospitalSuccessString(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'private String getAddHospitalSuccessString(HospitalBean proc) {\r\n    return (((\"Success: \" + (proc.getHospitalID())) + \" - \") + (proc.getHospitalName())) + \" added\";\r\n}'),(554,'String id','java.lang.String',0,150,'edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest',899,'edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.addEmpty(java.lang.String)',0,'private void addEmpty(String id) throws Exception {\r\n    HospitalBean hosp = new HospitalBean(id, \" \");\r\n    TestCase.assertEquals(getAddHospitalSuccessString(hosp), action.addHospital(hosp));\r\n    hosp = factory.getHospitalsDAO().getHospital(id);\r\n    TestCase.assertEquals(\" \", hosp.getHospitalName());\r\n}'),(555,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,151,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction',911,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the person udpating the ICDs.\r\n */\r\npublic UpdateICDCodeListAction(DAOFactory factory, long performerID) {\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(556,'long performerID','long',0,151,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction',911,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the person udpating the ICDs.\r\n */\r\npublic UpdateICDCodeListAction(DAOFactory factory, long performerID) {\r\n    icdDAO = factory.getICDCodesDAO();\r\n}'),(557,'DiagnosisBean diagn','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,151,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction',912,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n * 		The new diagnosis (ICD code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addICDCode(DiagnosisBean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        if (icdDAO.addICDCode(diagn)) {\r\n            return (((\"Success: \" + (diagn.getICDCode())) + \" - \") + (diagn.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(558,'DiagnosisBean diagn','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,151,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction',913,'edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Updates a diagnosis with new information from the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n * 		new information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(DiagnosisBean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = icdDAO.updateCode(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(559,'DiagnosisBean proc','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,152,'edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest',915,'edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'private String getAddCodeSuccessString(DiagnosisBean proc) {\r\n    return (((\"Success: \" + (proc.getICDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(560,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',923,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n */\r\npublic UpdateLOINCListAction(DAOFactory factory) {\r\n    lDAO = factory.getLOINCDAO();\r\n}'),(561,'LOINCbean diagn','edu.ncsu.csc.itrust.beans.LOINCbean',259,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',924,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.add(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Adds a new LOINC\r\n *\r\n * @param diagn\r\n * 		New LOINC\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String add(LOINCbean diagn) throws FormValidationException, iTrustException {\r\n    validator.validate(diagn);\r\n    List<LOINCbean> lblist = lDAO.getProcedures(diagn.getLabProcedureCode());\r\n    if (!(lblist.isEmpty())) {\r\n        throw new FormValidationException(\"Error: Code already exists.\");\r\n    }\r\n    lDAO.addLOINC(diagn);\r\n    return (\"Success: \" + (diagn.getLabProcedureCode())) + \" added\";\r\n}'),(562,'LOINCbean diagn','edu.ncsu.csc.itrust.beans.LOINCbean',259,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',927,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.updateInformation(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Updates a LOINC\r\n *\r\n * @param diagn\r\n * 		new information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(LOINCbean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = lDAO.update(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + (diagn.getLabProcedureCode())) + \" updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(563,'String[] beanInfo','java.lang.String[]',0,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',925,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.createBean(java.lang.String[])',0,'/**\r\n *\r\n *\r\n * @param beanInfo\r\n * 		an array of string data to add to the LOINC bean\r\n * @return a LOINCbean created from the beanInfo\r\n */\r\nprivate LOINCbean createBean(String[] beanInfo) {\r\n    LOINCbean bean = new LOINCbean();\r\n    for (int i = 0; i < (beanInfo.length); i++) {\r\n        boolean empty = ((beanInfo[i]) == null) || (beanInfo[i].isEmpty());\r\n        if (empty) {\r\n            beanInfo[i] = null;\r\n        }\r\n        switch (i) {\r\n            case 0 :\r\n                bean.setLabProcedureCode(beanInfo[i]);\r\n                break;\r\n            case 1 :\r\n                bean.setComponent(beanInfo[i]);\r\n                break;\r\n            case 2 :\r\n                bean.setKindOfProperty(beanInfo[i]);\r\n                break;\r\n            case 3 :\r\n                bean.setTimeAspect(beanInfo[i]);\r\n                break;\r\n            case 4 :\r\n                bean.setSystem(beanInfo[i]);\r\n                break;\r\n            case 5 :\r\n                bean.setScaleType(beanInfo[i]);\r\n                break;\r\n            case 6 :\r\n                bean.setMethodType(beanInfo[i]);\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n    return bean;\r\n}'),(564,'edu.ncsu.csc.itrust.beans.LOINCbean','edu.ncsu.csc.itrust.beans.LOINCbean',259,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',925,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.createBean(java.lang.String[])',1,'/**\r\n *\r\n *\r\n * @param beanInfo\r\n * 		an array of string data to add to the LOINC bean\r\n * @return a LOINCbean created from the beanInfo\r\n */\r\nprivate LOINCbean createBean(String[] beanInfo) {\r\n    LOINCbean bean = new LOINCbean();\r\n    for (int i = 0; i < (beanInfo.length); i++) {\r\n        boolean empty = ((beanInfo[i]) == null) || (beanInfo[i].isEmpty());\r\n        if (empty) {\r\n            beanInfo[i] = null;\r\n        }\r\n        switch (i) {\r\n            case 0 :\r\n                bean.setLabProcedureCode(beanInfo[i]);\r\n                break;\r\n            case 1 :\r\n                bean.setComponent(beanInfo[i]);\r\n                break;\r\n            case 2 :\r\n                bean.setKindOfProperty(beanInfo[i]);\r\n                break;\r\n            case 3 :\r\n                bean.setTimeAspect(beanInfo[i]);\r\n                break;\r\n            case 4 :\r\n                bean.setSystem(beanInfo[i]);\r\n                break;\r\n            case 5 :\r\n                bean.setScaleType(beanInfo[i]);\r\n                break;\r\n            case 6 :\r\n                bean.setMethodType(beanInfo[i]);\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n    return bean;\r\n}'),(565,'InputStream data','java.io.InputStream',0,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',926,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.parseLOINCFile(java.io.InputStream,boolean)',0,'/**\r\n * Reads a LOINC data file line by line, looking for valid LOINC data to add to the database.\r\n *\r\n * @param data\r\n * 		an InputStream associated with the file to parse\r\n * @param ignoreDupData\r\n * 		false if existing in the database should be updated if new data exists in the file\r\n * @return a list of messages concerning the parsing of the file\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<String> parseLOINCFile(InputStream data, boolean ignoreDupData) throws DBException {\r\n    ArrayList<String> results = new ArrayList<String>();\r\n    BufferedReader buf = new BufferedReader(new InputStreamReader(data));\r\n    String line = null;\r\n    int linesInserted = 0;\r\n    int dupDataSkipped = 0;\r\n    int dupDataUpdated = 0;\r\n    int lnum = 1;\r\n    // Match for starting with a LOINC code: \"NUMBERS AND DASHES\"\r\n    String labRegEx = \"^\"([\\d-]*)\"\\t\";\r\n    Pattern req = Pattern.compile(labRegEx);\r\n    try {\r\n        while ((line = buf.readLine()) != null) {\r\n            try {\r\n                Matcher reqMatch = req.matcher(line);\r\n                // The line must start with a LOINC code to be further processed\r\n                boolean found = (((line.length()) > 0) && ((line.charAt(0)) == \")) && (reqMatch.find());\r\n                if (!found) {\r\n                    results.add((((\"IGNORED LINE \" + lnum) + \": \") + line));\r\n                } else {\r\n                    String[] beanInfo = new String[7];\r\n                    // split the line along tabs\r\n                    String[] parts = line.split(\"	\");\r\n                    // the line must have been split into at least 2 parts to continue\r\n                    if ((parts != null) && (!(parts[0].equals(line)))) {\r\n                        for (int i = 0; (i < (beanInfo.length)) && (i < (parts.length)); i++) {\r\n                            // this was an empty field\r\n                            if ((parts[i].length()) <= 2) {\r\n                                beanInfo[i] = \"\";\r\n                            } else\r\n                                if (((parts[i].charAt(0)) != \") || ((parts[i].charAt(((parts[i].length()) - 1))) != \")) {\r\n                                    // The first 7 fields of LOINC data must be surrounded by quotes. If they arent then its wrong.\r\n                                    throw new FormValidationException(\"Bad LOINC data line. All fields must be surrounded by quotation marks.\");\r\n                                } else {\r\n                                    // strip quotes\r\n                                    beanInfo[i] = parts[i].substring(1, ((parts[i].length()) - 1));\r\n                                }\r\n\r\n                        }\r\n                        LOINCbean bean = createBean(beanInfo);\r\n                        boolean duplicate = false;\r\n                        try {\r\n                            add(bean);\r\n                            // success\r\n                            linesInserted++;\r\n                        } catch (Exception e) {\r\n                            if (!(e.getMessage().contains(\"Code already exists\"))) {\r\n                                results.add((((((\"ERROR, LINE \" + lnum) + \": \") + line) + \" \") + (e.getMessage())));\r\n                            } else {\r\n                                duplicate = true;\r\n                            }\r\n                        }\r\n                        if (duplicate) {\r\n                            if (!ignoreDupData) {\r\n                                String res = \"\";\r\n                                res = updateInformation(bean);\r\n                                if (res.contains(\"Error\")) {\r\n                                    throw new FormValidationException(res);\r\n                                } else {\r\n                                    // We updated some data\r\n                                    dupDataUpdated++;\r\n                                }\r\n                            } else {\r\n                                // We skipped a line\r\n                                dupDataSkipped++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (FormValidationException e) {\r\n                // If we got this we should report the line as an error\r\n                results.add((((((\"ERROR, LINE \" + lnum) + \": \") + line) + \" \") + (e.getMessage())));\r\n            }\r\n            lnum++;\r\n        } \r\n    } catch (IOException e) {\r\n        // this is an IO error and not a data error\r\n        // treat it differently\r\n        results.add((\"ERROR: \" + (e.getMessage())));\r\n    }\r\n    // No data was changed\r\n    if ((linesInserted <= 0) && (dupDataUpdated <= 0)) {\r\n        // Files are only invalid if we didnt add any new data nor update any existing data.\r\n        if ((dupDataUpdated <= 0) && (dupDataSkipped <= 0)) {\r\n            results.add(\"File invalid. No LOINC data added.\");\r\n        } else {\r\n            // Otherwise, we just skipped existing data lines.\r\n            results.add(((\"No new LOINC data added. \" + dupDataSkipped) + \" lines detected as duplicate data.\"));\r\n        }\r\n    } else {\r\n        // Tell the user how many lines were updated/inserted.\r\n        results.add(((((\"Successfully added \" + linesInserted) + \" lines of new LOINC data. Updated \") + dupDataUpdated) + \" lines of existing LOINC data.\"));\r\n    }\r\n    return results;\r\n}'),(566,'boolean ignoreDupData','boolean',0,153,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction',926,'edu.ncsu.csc.itrust.action.UpdateLOINCListAction.parseLOINCFile(java.io.InputStream,boolean)',0,'/**\r\n * Reads a LOINC data file line by line, looking for valid LOINC data to add to the database.\r\n *\r\n * @param data\r\n * 		an InputStream associated with the file to parse\r\n * @param ignoreDupData\r\n * 		false if existing in the database should be updated if new data exists in the file\r\n * @return a list of messages concerning the parsing of the file\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<String> parseLOINCFile(InputStream data, boolean ignoreDupData) throws DBException {\r\n    ArrayList<String> results = new ArrayList<String>();\r\n    BufferedReader buf = new BufferedReader(new InputStreamReader(data));\r\n    String line = null;\r\n    int linesInserted = 0;\r\n    int dupDataSkipped = 0;\r\n    int dupDataUpdated = 0;\r\n    int lnum = 1;\r\n    // Match for starting with a LOINC code: \"NUMBERS AND DASHES\"\r\n    String labRegEx = \"^\"([\\d-]*)\"\\t\";\r\n    Pattern req = Pattern.compile(labRegEx);\r\n    try {\r\n        while ((line = buf.readLine()) != null) {\r\n            try {\r\n                Matcher reqMatch = req.matcher(line);\r\n                // The line must start with a LOINC code to be further processed\r\n                boolean found = (((line.length()) > 0) && ((line.charAt(0)) == \")) && (reqMatch.find());\r\n                if (!found) {\r\n                    results.add((((\"IGNORED LINE \" + lnum) + \": \") + line));\r\n                } else {\r\n                    String[] beanInfo = new String[7];\r\n                    // split the line along tabs\r\n                    String[] parts = line.split(\"	\");\r\n                    // the line must have been split into at least 2 parts to continue\r\n                    if ((parts != null) && (!(parts[0].equals(line)))) {\r\n                        for (int i = 0; (i < (beanInfo.length)) && (i < (parts.length)); i++) {\r\n                            // this was an empty field\r\n                            if ((parts[i].length()) <= 2) {\r\n                                beanInfo[i] = \"\";\r\n                            } else\r\n                                if (((parts[i].charAt(0)) != \") || ((parts[i].charAt(((parts[i].length()) - 1))) != \")) {\r\n                                    // The first 7 fields of LOINC data must be surrounded by quotes. If they arent then its wrong.\r\n                                    throw new FormValidationException(\"Bad LOINC data line. All fields must be surrounded by quotation marks.\");\r\n                                } else {\r\n                                    // strip quotes\r\n                                    beanInfo[i] = parts[i].substring(1, ((parts[i].length()) - 1));\r\n                                }\r\n\r\n                        }\r\n                        LOINCbean bean = createBean(beanInfo);\r\n                        boolean duplicate = false;\r\n                        try {\r\n                            add(bean);\r\n                            // success\r\n                            linesInserted++;\r\n                        } catch (Exception e) {\r\n                            if (!(e.getMessage().contains(\"Code already exists\"))) {\r\n                                results.add((((((\"ERROR, LINE \" + lnum) + \": \") + line) + \" \") + (e.getMessage())));\r\n                            } else {\r\n                                duplicate = true;\r\n                            }\r\n                        }\r\n                        if (duplicate) {\r\n                            if (!ignoreDupData) {\r\n                                String res = \"\";\r\n                                res = updateInformation(bean);\r\n                                if (res.contains(\"Error\")) {\r\n                                    throw new FormValidationException(res);\r\n                                } else {\r\n                                    // We updated some data\r\n                                    dupDataUpdated++;\r\n                                }\r\n                            } else {\r\n                                // We skipped a line\r\n                                dupDataSkipped++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (FormValidationException e) {\r\n                // If we got this we should report the line as an error\r\n                results.add((((((\"ERROR, LINE \" + lnum) + \": \") + line) + \" \") + (e.getMessage())));\r\n            }\r\n            lnum++;\r\n        } \r\n    } catch (IOException e) {\r\n        // this is an IO error and not a data error\r\n        // treat it differently\r\n        results.add((\"ERROR: \" + (e.getMessage())));\r\n    }\r\n    // No data was changed\r\n    if ((linesInserted <= 0) && (dupDataUpdated <= 0)) {\r\n        // Files are only invalid if we didnt add any new data nor update any existing data.\r\n        if ((dupDataUpdated <= 0) && (dupDataSkipped <= 0)) {\r\n            results.add(\"File invalid. No LOINC data added.\");\r\n        } else {\r\n            // Otherwise, we just skipped existing data lines.\r\n            results.add(((\"No new LOINC data added. \" + dupDataSkipped) + \" lines detected as duplicate data.\"));\r\n        }\r\n    } else {\r\n        // Tell the user how many lines were updated/inserted.\r\n        results.add(((((\"Successfully added \" + linesInserted) + \" lines of new LOINC data. Updated \") + dupDataUpdated) + \" lines of existing LOINC data.\"));\r\n    }\r\n    return results;\r\n}'),(567,'LOINCbean proc','edu.ncsu.csc.itrust.beans.LOINCbean',259,154,'edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest',929,'edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'private String getAddCodeSuccessString(LOINCbean proc) {\r\n    return (\"Success: \" + (proc.getLabProcedureCode())) + \" added\";\r\n}'),(568,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',943,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the user updating the ND lists.\r\n */\r\npublic UpdateNDCodeListAction(DAOFactory factory, long performerID) {\r\n    ndDAO = factory.getNDCodesDAO();\r\n}'),(569,'long performerID','long',0,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',943,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the user updating the ND lists.\r\n */\r\npublic UpdateNDCodeListAction(DAOFactory factory, long performerID) {\r\n    ndDAO = factory.getNDCodesDAO();\r\n}'),(570,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',944,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Adds a new ND Code (prescription) to the list\r\n *\r\n * @param med\r\n * 		The new ND Code to be added\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addNDCode(MedicationBean med) throws FormValidationException {\r\n    validator.validate(med);\r\n    try {\r\n        if (ndDAO.addNDCode(med)) {\r\n            return (((\"Success: \" + (med.getNDCode())) + \" - \") + (med.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(571,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',947,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Updates the ND Code with new information from the MedicationBean\r\n *\r\n * @param med\r\n * 		the MedicationBean that holds new information but the same code\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(MedicationBean med) throws FormValidationException {\r\n    validator.validate(med);\r\n    try {\r\n        int rows = updateCode(med);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(572,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',946,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Medication information should already be validated\r\n *\r\n * @param med\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int updateCode(MedicationBean med) throws DBException {\r\n    return ndDAO.updateCode(med);\r\n}'),(573,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,155,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction',945,'edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Removes a ND Code (prescription) from the list\r\n *\r\n * @param med\r\n * 		The ND Code to be removed\r\n * @return Status message\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String removeNDCode(MedicationBean med) throws DBException {\r\n    try {\r\n        if ((ndDAO.getNDCode(med.getNDCode())) == null) {\r\n            return \"Drug does not exist or already has been removed from the database.\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        if (ndDAO.removeNDCode(med)) {\r\n            return (((\"Success: \" + (med.getNDCode())) + \" - \") + (med.getDescription())) + \" removed\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(574,'MedicationBean proc','edu.ncsu.csc.itrust.beans.MedicationBean',261,156,'edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest',950,'edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(575,'String code','java.lang.String',0,156,'edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest',949,'edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.addEmpty(java.lang.String)',0,'private void addEmpty(String code) throws Exception {\r\n    MedicationBean med = new MedicationBean(code, \" \");\r\n    TestCase.assertEquals(getAddCodeSuccessString(med), action.addNDCode(med));\r\n    med = factory.getNDCodesDAO().getNDCode(code);\r\n    TestCase.assertEquals(\" \", med.getDescription());\r\n}'),(576,'MedicationBean proc','edu.ncsu.csc.itrust.beans.MedicationBean',261,157,'edu.ncsu.csc.itrust.action.UpdateORCListActionTest',960,'edu.ncsu.csc.itrust.action.UpdateORCListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(577,'String code','java.lang.String',0,157,'edu.ncsu.csc.itrust.action.UpdateORCListActionTest',959,'edu.ncsu.csc.itrust.action.UpdateORCListActionTest.addEmpty(java.lang.String)',0,'private void addEmpty(String code) throws Exception {\r\n    OverrideReasonBean orc = new OverrideReasonBean(code, \"0\");\r\n    String result = action.addORCode(orc);\r\n    assert result.contains(\"Success\");\r\n    orc = factory.getORCodesDAO().getORCode(code);\r\n    TestCase.assertEquals(\"0\", orc.getDescription());\r\n}'),(578,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',967,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the user updating the ND lists.\r\n */\r\npublic UpdateReasonCodeListAction(DAOFactory factory, long performerID) {\r\n    orcDAO = factory.getORCodesDAO();\r\n}'),(579,'long performerID','long',0,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',967,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * 		The MID of the user updating the ND lists.\r\n */\r\npublic UpdateReasonCodeListAction(DAOFactory factory, long performerID) {\r\n    orcDAO = factory.getORCodesDAO();\r\n}'),(580,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',968,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Adds a new ND Code (prescription) to the list\r\n *\r\n * @param orc\r\n * 		The new ND Code to be added\r\n * @return Status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String addORCode(OverrideReasonBean orc) throws FormValidationException {\r\n    validator.validate(orc);\r\n    try {\r\n        if (orcDAO.addORCode(orc)) {\r\n            return (((\"Success: \" + (orc.getORCode())) + \" - \") + (orc.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}'),(581,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',970,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Updates the ND Code with new information from the OverrideReasonBean\r\n *\r\n * @param orc\r\n * 		the OverrideReasonBean that holds new information but the same code\r\n * @return status message\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic String updateInformation(OverrideReasonBean orc) throws FormValidationException {\r\n    validator.validate(orc);\r\n    try {\r\n        int rows = updateCode(orc);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}'),(582,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,158,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction',969,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Override Reason information should already be validated\r\n *\r\n * @param orc\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int updateCode(OverrideReasonBean orc) throws DBException {\r\n    return orcDAO.updateCode(orc);\r\n}'),(583,'MedicationBean proc','edu.ncsu.csc.itrust.beans.MedicationBean',261,159,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest',973,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}'),(584,'String code','java.lang.String',0,159,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest',972,'edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.addEmpty(java.lang.String)',0,'private void addEmpty(String code) throws Exception {\r\n    MedicationBean med = new MedicationBean(code, \" \");\r\n    TestCase.assertEquals(getAddCodeSuccessString(med), action.addNDCode(med));\r\n    med = factory.getNDCodesDAO().getNDCode(code);\r\n    TestCase.assertEquals(\" \", med.getDescription());\r\n}'),(585,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,160,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction',980,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ViewAdverseEventAction(DAOFactory factory) {\r\n    this.adEventDAO = factory.getAdverseEventDAO();\r\n}'),(586,'int id','int',0,160,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction',981,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getAdverseEvent(int)',0,'public AdverseEventBean getAdverseEvent(int id) throws DBException {\r\n    return adEventDAO.getReport(id);\r\n}'),(587,'edu.ncsu.csc.itrust.beans.AdverseEventBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,160,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction',981,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getAdverseEvent(int)',1,'public AdverseEventBean getAdverseEvent(int id) throws DBException {\r\n    return adEventDAO.getReport(id);\r\n}'),(588,'String code','java.lang.String',0,160,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction',983,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getUnremovedAdverseEventsByCode(java.lang.String)',0,'public List<AdverseEventBean> getUnremovedAdverseEventsByCode(String code) throws DBException {\r\n    return adEventDAO.getUnremovedAdverseEventsByCode(code);\r\n}'),(589,'String code','java.lang.String',0,160,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction',982,'edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getNameForCode(java.lang.String)',0,'public String getNameForCode(String code) throws DBException {\r\n    return adEventDAO.getNameForCode(code);\r\n}'),(590,'long hcpid','long',0,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',989,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.-init-(long,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ViewApptRequestsAction(long hcpid, DAOFactory factory) {\r\n    arDAO = factory.getApptRequestDAO();\r\n    aDAO = factory.getApptDAO();\r\n    pnDAO = factory.getPersonnelDAO();\r\n    this.hcpid = hcpid;\r\n    msgAction = new SendMessageAction(factory, hcpid);\r\n}'),(591,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',989,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.-init-(long,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ViewApptRequestsAction(long hcpid, DAOFactory factory) {\r\n    arDAO = factory.getApptRequestDAO();\r\n    aDAO = factory.getApptDAO();\r\n    pnDAO = factory.getPersonnelDAO();\r\n    this.hcpid = hcpid;\r\n    msgAction = new SendMessageAction(factory, hcpid);\r\n}'),(592,'List<ApptRequestBean> reqs','java.util.List',0,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',993,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.getNumRequests(java.util.List)',0,'/**\r\n *\r\n *\r\n * @param reqs\r\n * 		\r\n * @return int\r\n\r\nReturns the number of times in the appointment request list\r\n */\r\npublic int getNumRequests(List<ApptRequestBean> reqs) {\r\n    int numOfPendingAppointments = 0;\r\n    for (int i = 0; i < (reqs.size()); i++) {\r\n        if ((reqs.get(i).isPending()) == true) {\r\n            numOfPendingAppointments++;\r\n        }\r\n    }\r\n    return numOfPendingAppointments;\r\n}'),(593,'int reqID','int',0,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',990,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.acceptApptRequest(int)',0,'public String acceptApptRequest(int reqID) throws SQLException {\r\n    ApptRequestBean req = arDAO.getApptRequest(reqID);\r\n    if ((req.isPending()) && (!(req.isAccepted()))) {\r\n        req.setPending(false);\r\n        req.setAccepted(true);\r\n        arDAO.updateApptRequest(req);\r\n        aDAO.scheduleAppt(req.getRequestedAppt());\r\n        try {\r\n            MessageBean msg = constructMessage(req.getRequestedAppt(), req.isAccepted());\r\n            msgAction.sendMessage(msg);\r\n        } catch (Exception e) {\r\n        }\r\n        return \"The appointment request you selected has been accepted and scheduled.\";\r\n    } else {\r\n        return \"The appointment request you selected has already been acted upon.\";\r\n    }\r\n}'),(594,'int reqID','int',0,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',994,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.rejectApptRequest(int)',0,'public String rejectApptRequest(int reqID) throws SQLException {\r\n    ApptRequestBean req = arDAO.getApptRequest(reqID);\r\n    if ((req.isPending()) && (!(req.isAccepted()))) {\r\n        req.setPending(false);\r\n        req.setAccepted(false);\r\n        arDAO.updateApptRequest(req);\r\n        try {\r\n            MessageBean msg = constructMessage(req.getRequestedAppt(), req.isAccepted());\r\n            msgAction.sendMessage(msg);\r\n        } catch (Exception e) {\r\n        }\r\n        return \"The appointment request you selected has been rejected.\";\r\n    } else {\r\n        return \"The appointment request you selected has already been acted upon.\";\r\n    }\r\n}'),(595,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',991,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'private MessageBean constructMessage(ApptBean appt, boolean accepted) throws DBException, FormValidationException, iTrustException, SQLException {\r\n    MessageBean msg = new MessageBean();\r\n    msg.setFrom(appt.getHcp());\r\n    msg.setTo(appt.getPatient());\r\n    msg.setSubject(\"Your appointment request\");\r\n    msg.setSentDate(new Timestamp(System.currentTimeMillis()));\r\n    String body = (((\"Your appointment request with \" + (pnDAO.getName(appt.getHcp()))) + \" on \") + (appt.getDate())) + \" has been \";\r\n    if (accepted)\r\n        body += \"accepted.\";\r\n    else\r\n        body += \"rejected.\";\r\n\r\n    msg.setBody(body);\r\n    return msg;\r\n}'),(596,'edu.ncsu.csc.itrust.beans.MessageBean','edu.ncsu.csc.itrust.beans.MessageBean',262,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',991,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',1,'private MessageBean constructMessage(ApptBean appt, boolean accepted) throws DBException, FormValidationException, iTrustException, SQLException {\r\n    MessageBean msg = new MessageBean();\r\n    msg.setFrom(appt.getHcp());\r\n    msg.setTo(appt.getPatient());\r\n    msg.setSubject(\"Your appointment request\");\r\n    msg.setSentDate(new Timestamp(System.currentTimeMillis()));\r\n    String body = (((\"Your appointment request with \" + (pnDAO.getName(appt.getHcp()))) + \" on \") + (appt.getDate())) + \" has been \";\r\n    if (accepted)\r\n        body += \"accepted.\";\r\n    else\r\n        body += \"rejected.\";\r\n\r\n    msg.setBody(body);\r\n    return msg;\r\n}'),(597,'boolean accepted','boolean',0,162,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction',991,'edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)',0,'private MessageBean constructMessage(ApptBean appt, boolean accepted) throws DBException, FormValidationException, iTrustException, SQLException {\r\n    MessageBean msg = new MessageBean();\r\n    msg.setFrom(appt.getHcp());\r\n    msg.setTo(appt.getPatient());\r\n    msg.setSubject(\"Your appointment request\");\r\n    msg.setSentDate(new Timestamp(System.currentTimeMillis()));\r\n    String body = (((\"Your appointment request with \" + (pnDAO.getName(appt.getHcp()))) + \" on \") + (appt.getDate())) + \" has been \";\r\n    if (accepted)\r\n        body += \"accepted.\";\r\n    else\r\n        body += \"rejected.\";\r\n\r\n    msg.setBody(body);\r\n    return msg;\r\n}'),(598,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1000,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * Constructor for the action. Initializes DAO fields\r\n *\r\n * @param factory\r\n * 		The sessions factory for DAOs\r\n */\r\npublic ViewDiagnosisStatisticsAction(DAOFactory factory) {\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.diagnosesDAO = factory.getDiagnosesDAO();\r\n}'),(599,'String lowerDate','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1003,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Gets the counts of local and regional diagnoses for the specified input\r\n *\r\n * @param lowerDate\r\n * 		The beginning date for the time range\r\n * @param upperDate\r\n * 		The ending date for the time range\r\n * @param icdCode\r\n * 		The diagnosis code to examine\r\n * @param zip\r\n * 		The zip code to examine\r\n * @return A bean containing the local and regional counts\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisStatistics(String lowerDate, String upperDate, String icdCode, String zip) throws DBException, FormValidationException, iTrustException {\r\n    DiagnosisStatisticsBean dsBean;\r\n    try {\r\n        if (((lowerDate == null) || (upperDate == null)) || (icdCode == null))\r\n            return null;\r\n\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n            throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n        boolean validCode = false;\r\n        for (DiagnosisBean diag : getDiagnosisCodes()) {\r\n            if (diag.getICDCode().equals(icdCode))\r\n                validCode = true;\r\n\r\n        }\r\n        if (validCode == false) {\r\n            throw new FormValidationException(\"ICDCode must be valid diagnosis!\");\r\n        }\r\n        dsBean = diagnosesDAO.getDiagnosisCounts(icdCode, zip, lower, upper);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return dsBean;\r\n}'),(600,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1003,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',1,'/**\r\n * Gets the counts of local and regional diagnoses for the specified input\r\n *\r\n * @param lowerDate\r\n * 		The beginning date for the time range\r\n * @param upperDate\r\n * 		The ending date for the time range\r\n * @param icdCode\r\n * 		The diagnosis code to examine\r\n * @param zip\r\n * 		The zip code to examine\r\n * @return A bean containing the local and regional counts\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisStatistics(String lowerDate, String upperDate, String icdCode, String zip) throws DBException, FormValidationException, iTrustException {\r\n    DiagnosisStatisticsBean dsBean;\r\n    try {\r\n        if (((lowerDate == null) || (upperDate == null)) || (icdCode == null))\r\n            return null;\r\n\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n            throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n        boolean validCode = false;\r\n        for (DiagnosisBean diag : getDiagnosisCodes()) {\r\n            if (diag.getICDCode().equals(icdCode))\r\n                validCode = true;\r\n\r\n        }\r\n        if (validCode == false) {\r\n            throw new FormValidationException(\"ICDCode must be valid diagnosis!\");\r\n        }\r\n        dsBean = diagnosesDAO.getDiagnosisCounts(icdCode, zip, lower, upper);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return dsBean;\r\n}'),(601,'String upperDate','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1003,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Gets the counts of local and regional diagnoses for the specified input\r\n *\r\n * @param lowerDate\r\n * 		The beginning date for the time range\r\n * @param upperDate\r\n * 		The ending date for the time range\r\n * @param icdCode\r\n * 		The diagnosis code to examine\r\n * @param zip\r\n * 		The zip code to examine\r\n * @return A bean containing the local and regional counts\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisStatistics(String lowerDate, String upperDate, String icdCode, String zip) throws DBException, FormValidationException, iTrustException {\r\n    DiagnosisStatisticsBean dsBean;\r\n    try {\r\n        if (((lowerDate == null) || (upperDate == null)) || (icdCode == null))\r\n            return null;\r\n\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n            throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n        boolean validCode = false;\r\n        for (DiagnosisBean diag : getDiagnosisCodes()) {\r\n            if (diag.getICDCode().equals(icdCode))\r\n                validCode = true;\r\n\r\n        }\r\n        if (validCode == false) {\r\n            throw new FormValidationException(\"ICDCode must be valid diagnosis!\");\r\n        }\r\n        dsBean = diagnosesDAO.getDiagnosisCounts(icdCode, zip, lower, upper);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return dsBean;\r\n}'),(602,'String icdCode','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1003,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Gets the counts of local and regional diagnoses for the specified input\r\n *\r\n * @param lowerDate\r\n * 		The beginning date for the time range\r\n * @param upperDate\r\n * 		The ending date for the time range\r\n * @param icdCode\r\n * 		The diagnosis code to examine\r\n * @param zip\r\n * 		The zip code to examine\r\n * @return A bean containing the local and regional counts\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisStatistics(String lowerDate, String upperDate, String icdCode, String zip) throws DBException, FormValidationException, iTrustException {\r\n    DiagnosisStatisticsBean dsBean;\r\n    try {\r\n        if (((lowerDate == null) || (upperDate == null)) || (icdCode == null))\r\n            return null;\r\n\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n            throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n        boolean validCode = false;\r\n        for (DiagnosisBean diag : getDiagnosisCodes()) {\r\n            if (diag.getICDCode().equals(icdCode))\r\n                validCode = true;\r\n\r\n        }\r\n        if (validCode == false) {\r\n            throw new FormValidationException(\"ICDCode must be valid diagnosis!\");\r\n        }\r\n        dsBean = diagnosesDAO.getDiagnosisCounts(icdCode, zip, lower, upper);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return dsBean;\r\n}'),(603,'String zip','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1003,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Gets the counts of local and regional diagnoses for the specified input\r\n *\r\n * @param lowerDate\r\n * 		The beginning date for the time range\r\n * @param upperDate\r\n * 		The ending date for the time range\r\n * @param icdCode\r\n * 		The diagnosis code to examine\r\n * @param zip\r\n * 		The zip code to examine\r\n * @return A bean containing the local and regional counts\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisStatistics(String lowerDate, String upperDate, String icdCode, String zip) throws DBException, FormValidationException, iTrustException {\r\n    DiagnosisStatisticsBean dsBean;\r\n    try {\r\n        if (((lowerDate == null) || (upperDate == null)) || (icdCode == null))\r\n            return null;\r\n\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n            throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n        boolean validCode = false;\r\n        for (DiagnosisBean diag : getDiagnosisCodes()) {\r\n            if (diag.getICDCode().equals(icdCode))\r\n                validCode = true;\r\n\r\n        }\r\n        if (validCode == false) {\r\n            throw new FormValidationException(\"ICDCode must be valid diagnosis!\");\r\n        }\r\n        dsBean = diagnosesDAO.getDiagnosisCounts(icdCode, zip, lower, upper);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return dsBean;\r\n}'),(604,'String startDate','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1004,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getEpidemicStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Gets the local and regional counts for the specified week and calculates the prior average.\r\n *\r\n * @param startDate\r\n * 		a date in the week to analyze\r\n * @param icdCode\r\n * 		the diagnosis to analyze\r\n * @param zip\r\n * 		the area to analyze\r\n * @param threshold\r\n * 		\r\n * @return statistics for the week and previous averages\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getEpidemicStatistics(String startDate, String icdCode, String zip, String threshold) throws DBException, FormValidationException {\r\n    if ((startDate == null) || (icdCode == null))\r\n        return null;\r\n\r\n    if (!((icdCode.equals(\"84.50\")) || (icdCode.equals(\"487.00\")))) {\r\n        throw new FormValidationException(\"Exception\");\r\n    }\r\n    if (ViewDiagnosisStatisticsAction.ICD_MALARIA.equals(icdCode)) {\r\n        try {\r\n            Integer.parseInt(threshold);\r\n        } catch (NumberFormatException e) {\r\n            throw new FormValidationException(\"Threshold must be an integer.\");\r\n        }\r\n    }\r\n    Date lower;// lower, which is parsed to startDate\r\n\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n        throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n    DiagnosisStatisticsBean dbWeek = diagnosesDAO.getCountForWeekOf(icdCode, zip, lower);\r\n    DiagnosisStatisticsBean dbAvg = new DiagnosisStatisticsBean(zip, 0, 0, lower, lower);\r\n    Calendar cal = Calendar.getInstance();\r\n    Date start = diagnosesDAO.findEarliestIncident(icdCode);// start, which is set to earliest incident\r\n\r\n    Calendar startCal = Calendar.getInstance();\r\n    startCal.setTime(start);\r\n    ArrayList<DiagnosisStatisticsBean> ret = new ArrayList<DiagnosisStatisticsBean>();\r\n    if (start == null) {\r\n        ret.add(dbWeek);\r\n        ret.add(dbAvg);\r\n        return ret;\r\n    }\r\n    cal.setTime(lower);// cal, which is set to lower\r\n\r\n    Calendar lowerCal = Calendar.getInstance();\r\n    lowerCal.setTime(lower);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    cal.set(Calendar.YEAR, startCal.get(Calendar.YEAR));// cals year then gets set to starts year\r\n\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    while ((cal.getTime().before(lower)) && ((cal.get(Calendar.YEAR)) != (lowerCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(icdCode, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long avg = 0;\r\n    long avgRegion = 0;\r\n    if ((dbList.size()) > 0) {\r\n        for (DiagnosisStatisticsBean d : dbList) {\r\n            avg += d.getZipStats();\r\n            avgRegion += d.getRegionStats();\r\n        }\r\n        avg /= dbList.size();\r\n        avgRegion /= dbList.size();\r\n    }\r\n    dbAvg.setRegionStats(avgRegion);\r\n    dbAvg.setZipStats(avg);\r\n    ret.add(dbWeek);\r\n    ret.add(dbAvg);\r\n    return ret;\r\n}'),(605,'String icdCode','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1004,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getEpidemicStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Gets the local and regional counts for the specified week and calculates the prior average.\r\n *\r\n * @param startDate\r\n * 		a date in the week to analyze\r\n * @param icdCode\r\n * 		the diagnosis to analyze\r\n * @param zip\r\n * 		the area to analyze\r\n * @param threshold\r\n * 		\r\n * @return statistics for the week and previous averages\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getEpidemicStatistics(String startDate, String icdCode, String zip, String threshold) throws DBException, FormValidationException {\r\n    if ((startDate == null) || (icdCode == null))\r\n        return null;\r\n\r\n    if (!((icdCode.equals(\"84.50\")) || (icdCode.equals(\"487.00\")))) {\r\n        throw new FormValidationException(\"Exception\");\r\n    }\r\n    if (ViewDiagnosisStatisticsAction.ICD_MALARIA.equals(icdCode)) {\r\n        try {\r\n            Integer.parseInt(threshold);\r\n        } catch (NumberFormatException e) {\r\n            throw new FormValidationException(\"Threshold must be an integer.\");\r\n        }\r\n    }\r\n    Date lower;// lower, which is parsed to startDate\r\n\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n        throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n    DiagnosisStatisticsBean dbWeek = diagnosesDAO.getCountForWeekOf(icdCode, zip, lower);\r\n    DiagnosisStatisticsBean dbAvg = new DiagnosisStatisticsBean(zip, 0, 0, lower, lower);\r\n    Calendar cal = Calendar.getInstance();\r\n    Date start = diagnosesDAO.findEarliestIncident(icdCode);// start, which is set to earliest incident\r\n\r\n    Calendar startCal = Calendar.getInstance();\r\n    startCal.setTime(start);\r\n    ArrayList<DiagnosisStatisticsBean> ret = new ArrayList<DiagnosisStatisticsBean>();\r\n    if (start == null) {\r\n        ret.add(dbWeek);\r\n        ret.add(dbAvg);\r\n        return ret;\r\n    }\r\n    cal.setTime(lower);// cal, which is set to lower\r\n\r\n    Calendar lowerCal = Calendar.getInstance();\r\n    lowerCal.setTime(lower);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    cal.set(Calendar.YEAR, startCal.get(Calendar.YEAR));// cals year then gets set to starts year\r\n\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    while ((cal.getTime().before(lower)) && ((cal.get(Calendar.YEAR)) != (lowerCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(icdCode, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long avg = 0;\r\n    long avgRegion = 0;\r\n    if ((dbList.size()) > 0) {\r\n        for (DiagnosisStatisticsBean d : dbList) {\r\n            avg += d.getZipStats();\r\n            avgRegion += d.getRegionStats();\r\n        }\r\n        avg /= dbList.size();\r\n        avgRegion /= dbList.size();\r\n    }\r\n    dbAvg.setRegionStats(avgRegion);\r\n    dbAvg.setZipStats(avg);\r\n    ret.add(dbWeek);\r\n    ret.add(dbAvg);\r\n    return ret;\r\n}'),(606,'String zip','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1004,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getEpidemicStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Gets the local and regional counts for the specified week and calculates the prior average.\r\n *\r\n * @param startDate\r\n * 		a date in the week to analyze\r\n * @param icdCode\r\n * 		the diagnosis to analyze\r\n * @param zip\r\n * 		the area to analyze\r\n * @param threshold\r\n * 		\r\n * @return statistics for the week and previous averages\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getEpidemicStatistics(String startDate, String icdCode, String zip, String threshold) throws DBException, FormValidationException {\r\n    if ((startDate == null) || (icdCode == null))\r\n        return null;\r\n\r\n    if (!((icdCode.equals(\"84.50\")) || (icdCode.equals(\"487.00\")))) {\r\n        throw new FormValidationException(\"Exception\");\r\n    }\r\n    if (ViewDiagnosisStatisticsAction.ICD_MALARIA.equals(icdCode)) {\r\n        try {\r\n            Integer.parseInt(threshold);\r\n        } catch (NumberFormatException e) {\r\n            throw new FormValidationException(\"Threshold must be an integer.\");\r\n        }\r\n    }\r\n    Date lower;// lower, which is parsed to startDate\r\n\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n        throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n    DiagnosisStatisticsBean dbWeek = diagnosesDAO.getCountForWeekOf(icdCode, zip, lower);\r\n    DiagnosisStatisticsBean dbAvg = new DiagnosisStatisticsBean(zip, 0, 0, lower, lower);\r\n    Calendar cal = Calendar.getInstance();\r\n    Date start = diagnosesDAO.findEarliestIncident(icdCode);// start, which is set to earliest incident\r\n\r\n    Calendar startCal = Calendar.getInstance();\r\n    startCal.setTime(start);\r\n    ArrayList<DiagnosisStatisticsBean> ret = new ArrayList<DiagnosisStatisticsBean>();\r\n    if (start == null) {\r\n        ret.add(dbWeek);\r\n        ret.add(dbAvg);\r\n        return ret;\r\n    }\r\n    cal.setTime(lower);// cal, which is set to lower\r\n\r\n    Calendar lowerCal = Calendar.getInstance();\r\n    lowerCal.setTime(lower);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    cal.set(Calendar.YEAR, startCal.get(Calendar.YEAR));// cals year then gets set to starts year\r\n\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    while ((cal.getTime().before(lower)) && ((cal.get(Calendar.YEAR)) != (lowerCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(icdCode, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long avg = 0;\r\n    long avgRegion = 0;\r\n    if ((dbList.size()) > 0) {\r\n        for (DiagnosisStatisticsBean d : dbList) {\r\n            avg += d.getZipStats();\r\n            avgRegion += d.getRegionStats();\r\n        }\r\n        avg /= dbList.size();\r\n        avgRegion /= dbList.size();\r\n    }\r\n    dbAvg.setRegionStats(avgRegion);\r\n    dbAvg.setZipStats(avg);\r\n    ret.add(dbWeek);\r\n    ret.add(dbAvg);\r\n    return ret;\r\n}'),(607,'String threshold','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1004,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getEpidemicStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Gets the local and regional counts for the specified week and calculates the prior average.\r\n *\r\n * @param startDate\r\n * 		a date in the week to analyze\r\n * @param icdCode\r\n * 		the diagnosis to analyze\r\n * @param zip\r\n * 		the area to analyze\r\n * @param threshold\r\n * 		\r\n * @return statistics for the week and previous averages\r\n * @throws FormValidationException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getEpidemicStatistics(String startDate, String icdCode, String zip, String threshold) throws DBException, FormValidationException {\r\n    if ((startDate == null) || (icdCode == null))\r\n        return null;\r\n\r\n    if (!((icdCode.equals(\"84.50\")) || (icdCode.equals(\"487.00\")))) {\r\n        throw new FormValidationException(\"Exception\");\r\n    }\r\n    if (ViewDiagnosisStatisticsAction.ICD_MALARIA.equals(icdCode)) {\r\n        try {\r\n            Integer.parseInt(threshold);\r\n        } catch (NumberFormatException e) {\r\n            throw new FormValidationException(\"Threshold must be an integer.\");\r\n        }\r\n    }\r\n    Date lower;// lower, which is parsed to startDate\r\n\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n        throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n    DiagnosisStatisticsBean dbWeek = diagnosesDAO.getCountForWeekOf(icdCode, zip, lower);\r\n    DiagnosisStatisticsBean dbAvg = new DiagnosisStatisticsBean(zip, 0, 0, lower, lower);\r\n    Calendar cal = Calendar.getInstance();\r\n    Date start = diagnosesDAO.findEarliestIncident(icdCode);// start, which is set to earliest incident\r\n\r\n    Calendar startCal = Calendar.getInstance();\r\n    startCal.setTime(start);\r\n    ArrayList<DiagnosisStatisticsBean> ret = new ArrayList<DiagnosisStatisticsBean>();\r\n    if (start == null) {\r\n        ret.add(dbWeek);\r\n        ret.add(dbAvg);\r\n        return ret;\r\n    }\r\n    cal.setTime(lower);// cal, which is set to lower\r\n\r\n    Calendar lowerCal = Calendar.getInstance();\r\n    lowerCal.setTime(lower);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    cal.set(Calendar.YEAR, startCal.get(Calendar.YEAR));// cals year then gets set to starts year\r\n\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    while ((cal.getTime().before(lower)) && ((cal.get(Calendar.YEAR)) != (lowerCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(icdCode, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long avg = 0;\r\n    long avgRegion = 0;\r\n    if ((dbList.size()) > 0) {\r\n        for (DiagnosisStatisticsBean d : dbList) {\r\n            avg += d.getZipStats();\r\n            avgRegion += d.getRegionStats();\r\n        }\r\n        avg /= dbList.size();\r\n        avgRegion /= dbList.size();\r\n    }\r\n    dbAvg.setRegionStats(avgRegion);\r\n    dbAvg.setZipStats(avg);\r\n    ret.add(dbWeek);\r\n    ret.add(dbAvg);\r\n    return ret;\r\n}'),(608,'String curDateStr','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1005,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isFluEpidemic(java.lang.String,java.lang.String)',0,'/**\r\n * Determines if an Influenza Epidemic is happening\r\n *\r\n * @param curDateStr\r\n * 		a date in the currently evaluated week\r\n * @param zip\r\n * 		the zip code to analyze\r\n * @return whether or not there is an epidemic\r\n * @throws ParseException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean isFluEpidemic(String curDateStr, String zip) throws DBException, ParseException {\r\n    new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"01/04/1998\");\r\n    Date curDate = new SimpleDateFormat(\"MM/dd/yyyy\").parse(curDateStr);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(curDate);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    double threshold = calcThreshold(weekOfYr);\r\n    double thresholdL = calcThreshold((weekOfYr - 1));\r\n    double thresholdN = calcThreshold((weekOfYr + 1));\r\n    DiagnosisStatisticsBean dbNow = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    cal.add(Calendar.HOUR, ((-12) * 7));\r\n    DiagnosisStatisticsBean dbLast = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    cal.add(Calendar.HOUR, ((2 * 12) * 7));\r\n    DiagnosisStatisticsBean dbNext = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    double weekNow = ((double) (dbNow.getRegionStats()));\r\n    double weekL = ((double) (dbLast.getRegionStats()));\r\n    double weekN = ((double) (dbNext.getRegionStats()));\r\n    if ((weekNow > threshold) && ((weekL > thresholdL) || (weekN > thresholdN))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}'),(609,'String zip','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1005,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isFluEpidemic(java.lang.String,java.lang.String)',0,'/**\r\n * Determines if an Influenza Epidemic is happening\r\n *\r\n * @param curDateStr\r\n * 		a date in the currently evaluated week\r\n * @param zip\r\n * 		the zip code to analyze\r\n * @return whether or not there is an epidemic\r\n * @throws ParseException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean isFluEpidemic(String curDateStr, String zip) throws DBException, ParseException {\r\n    new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"01/04/1998\");\r\n    Date curDate = new SimpleDateFormat(\"MM/dd/yyyy\").parse(curDateStr);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(curDate);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    double threshold = calcThreshold(weekOfYr);\r\n    double thresholdL = calcThreshold((weekOfYr - 1));\r\n    double thresholdN = calcThreshold((weekOfYr + 1));\r\n    DiagnosisStatisticsBean dbNow = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    cal.add(Calendar.HOUR, ((-12) * 7));\r\n    DiagnosisStatisticsBean dbLast = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    cal.add(Calendar.HOUR, ((2 * 12) * 7));\r\n    DiagnosisStatisticsBean dbNext = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    double weekNow = ((double) (dbNow.getRegionStats()));\r\n    double weekL = ((double) (dbLast.getRegionStats()));\r\n    double weekN = ((double) (dbNext.getRegionStats()));\r\n    if ((weekNow > threshold) && ((weekL > thresholdL) || (weekN > thresholdN))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}'),(610,'double weekNumber','double',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1001,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.calcThreshold(double)',0,'/**\r\n * Calculates the threshold of an influenza epidemic\r\n *\r\n * @param weekNumber\r\n * 		the week of the year\r\n * @return the epidemic threshold for flu cases\r\n */\r\nprivate double calcThreshold(double weekNumber) {\r\n    return ((5.34 + (0.271 * weekNumber)) + (3.45 * (Math.sin((((2 * (Math.PI)) * weekNumber) / 52.0))))) + (8.41 * (Math.cos((((2 * (Math.PI)) * weekNumber) / 52.0))));\r\n}'),(611,'String weekDate','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1006,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isMalariaEpidemic(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Determines whether a Malaria epidemic is happening\r\n *\r\n * @param weekDate\r\n * 		a date in the currently evaluated week\r\n * @param zip\r\n * 		the zip code to analyze\r\n * @param thresholdStr\r\n * 		the threshold for an epidemic\r\n * @return whether or not there is an epidemic\r\n * @throws DBException\r\n * 		\r\n * @throws ParseException\r\n * 		\r\n */\r\npublic boolean isMalariaEpidemic(String weekDate, String zip, String thresholdStr) throws DBException, ParseException {\r\n    Date wkDate = new SimpleDateFormat(\"MM/dd/yyyy\").parse(weekDate);\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    ArrayList<DiagnosisStatisticsBean> dbListL = new ArrayList<DiagnosisStatisticsBean>();\r\n    ArrayList<DiagnosisStatisticsBean> dbListN = new ArrayList<DiagnosisStatisticsBean>();\r\n    int threshold = Integer.parseInt(thresholdStr);\r\n    DiagnosisStatisticsBean current = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, wkDate);\r\n    long weekTotal = current.getRegionStats();\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(wkDate);\r\n    cal.add(Calendar.HOUR, ((-7) * 24));\r\n    DiagnosisStatisticsBean last = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime());\r\n    long weekTotalL = last.getRegionStats();\r\n    cal.add(Calendar.HOUR, ((2 * 7) * 24));\r\n    DiagnosisStatisticsBean next = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime());\r\n    long weekTotalN = next.getRegionStats();\r\n    cal.setTime(wkDate);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    // Find earliest Malaria Case. Set calendars year to that year\r\n    Date startData = diagnosesDAO.findEarliestIncident(ViewDiagnosisStatisticsAction.ICD_MALARIA);\r\n    if (startData == null) {\r\n        if ((current.getRegionStats()) > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    Calendar startDateCal = Calendar.getInstance();\r\n    startDateCal.setTime(startData);\r\n    Calendar wkDateCal = Calendar.getInstance();\r\n    wkDateCal.setTime(wkDate);\r\n    cal.set(Calendar.YEAR, startDateCal.get(Calendar.YEAR));\r\n    while ((cal.getTime().before(wkDate)) && ((cal.get(Calendar.YEAR)) != (wkDateCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.HOUR, ((-7) * 24));\r\n        dbListL.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.HOUR, ((2 * 7) * 24));\r\n        dbListN.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long total = 0;\r\n    for (DiagnosisStatisticsBean d : dbList) {\r\n        total += d.getRegionStats();\r\n    }\r\n    for (DiagnosisStatisticsBean d : dbListL) {\r\n        d.getRegionStats();\r\n    }\r\n    for (DiagnosisStatisticsBean d : dbListN) {\r\n        d.getRegionStats();\r\n    }\r\n    long avg = 0;\r\n    long avgL = 0;\r\n    long avgN = 0;\r\n    if ((dbList.size()) != 0) {\r\n        avg = total / (dbList.size());\r\n        avgL = total / (dbListL.size());\r\n        avgN = total / (dbListN.size());\r\n    }\r\n    if (((weekTotal != 0) && (((weekTotal * 100) / threshold) > avg)) && (((weekTotalL != 0) && (((weekTotalL * 100) / threshold) > avgL)) || ((weekTotalN != 0) && (((weekTotalN * 100) / threshold) > avgN)))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}'),(612,'String zip','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1006,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isMalariaEpidemic(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Determines whether a Malaria epidemic is happening\r\n *\r\n * @param weekDate\r\n * 		a date in the currently evaluated week\r\n * @param zip\r\n * 		the zip code to analyze\r\n * @param thresholdStr\r\n * 		the threshold for an epidemic\r\n * @return whether or not there is an epidemic\r\n * @throws DBException\r\n * 		\r\n * @throws ParseException\r\n * 		\r\n */\r\npublic boolean isMalariaEpidemic(String weekDate, String zip, String thresholdStr) throws DBException, ParseException {\r\n    Date wkDate = new SimpleDateFormat(\"MM/dd/yyyy\").parse(weekDate);\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    ArrayList<DiagnosisStatisticsBean> dbListL = new ArrayList<DiagnosisStatisticsBean>();\r\n    ArrayList<DiagnosisStatisticsBean> dbListN = new ArrayList<DiagnosisStatisticsBean>();\r\n    int threshold = Integer.parseInt(thresholdStr);\r\n    DiagnosisStatisticsBean current = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, wkDate);\r\n    long weekTotal = current.getRegionStats();\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(wkDate);\r\n    cal.add(Calendar.HOUR, ((-7) * 24));\r\n    DiagnosisStatisticsBean last = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime());\r\n    long weekTotalL = last.getRegionStats();\r\n    cal.add(Calendar.HOUR, ((2 * 7) * 24));\r\n    DiagnosisStatisticsBean next = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime());\r\n    long weekTotalN = next.getRegionStats();\r\n    cal.setTime(wkDate);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    // Find earliest Malaria Case. Set calendars year to that year\r\n    Date startData = diagnosesDAO.findEarliestIncident(ViewDiagnosisStatisticsAction.ICD_MALARIA);\r\n    if (startData == null) {\r\n        if ((current.getRegionStats()) > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    Calendar startDateCal = Calendar.getInstance();\r\n    startDateCal.setTime(startData);\r\n    Calendar wkDateCal = Calendar.getInstance();\r\n    wkDateCal.setTime(wkDate);\r\n    cal.set(Calendar.YEAR, startDateCal.get(Calendar.YEAR));\r\n    while ((cal.getTime().before(wkDate)) && ((cal.get(Calendar.YEAR)) != (wkDateCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.HOUR, ((-7) * 24));\r\n        dbListL.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.HOUR, ((2 * 7) * 24));\r\n        dbListN.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long total = 0;\r\n    for (DiagnosisStatisticsBean d : dbList) {\r\n        total += d.getRegionStats();\r\n    }\r\n    for (DiagnosisStatisticsBean d : dbListL) {\r\n        d.getRegionStats();\r\n    }\r\n    for (DiagnosisStatisticsBean d : dbListN) {\r\n        d.getRegionStats();\r\n    }\r\n    long avg = 0;\r\n    long avgL = 0;\r\n    long avgN = 0;\r\n    if ((dbList.size()) != 0) {\r\n        avg = total / (dbList.size());\r\n        avgL = total / (dbListL.size());\r\n        avgN = total / (dbListN.size());\r\n    }\r\n    if (((weekTotal != 0) && (((weekTotal * 100) / threshold) > avg)) && (((weekTotalL != 0) && (((weekTotalL * 100) / threshold) > avgL)) || ((weekTotalN != 0) && (((weekTotalN * 100) / threshold) > avgN)))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}'),(613,'String thresholdStr','java.lang.String',0,164,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction',1006,'edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isMalariaEpidemic(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Determines whether a Malaria epidemic is happening\r\n *\r\n * @param weekDate\r\n * 		a date in the currently evaluated week\r\n * @param zip\r\n * 		the zip code to analyze\r\n * @param thresholdStr\r\n * 		the threshold for an epidemic\r\n * @return whether or not there is an epidemic\r\n * @throws DBException\r\n * 		\r\n * @throws ParseException\r\n * 		\r\n */\r\npublic boolean isMalariaEpidemic(String weekDate, String zip, String thresholdStr) throws DBException, ParseException {\r\n    Date wkDate = new SimpleDateFormat(\"MM/dd/yyyy\").parse(weekDate);\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    ArrayList<DiagnosisStatisticsBean> dbListL = new ArrayList<DiagnosisStatisticsBean>();\r\n    ArrayList<DiagnosisStatisticsBean> dbListN = new ArrayList<DiagnosisStatisticsBean>();\r\n    int threshold = Integer.parseInt(thresholdStr);\r\n    DiagnosisStatisticsBean current = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, wkDate);\r\n    long weekTotal = current.getRegionStats();\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(wkDate);\r\n    cal.add(Calendar.HOUR, ((-7) * 24));\r\n    DiagnosisStatisticsBean last = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime());\r\n    long weekTotalL = last.getRegionStats();\r\n    cal.add(Calendar.HOUR, ((2 * 7) * 24));\r\n    DiagnosisStatisticsBean next = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime());\r\n    long weekTotalN = next.getRegionStats();\r\n    cal.setTime(wkDate);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    // Find earliest Malaria Case. Set calendars year to that year\r\n    Date startData = diagnosesDAO.findEarliestIncident(ViewDiagnosisStatisticsAction.ICD_MALARIA);\r\n    if (startData == null) {\r\n        if ((current.getRegionStats()) > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    Calendar startDateCal = Calendar.getInstance();\r\n    startDateCal.setTime(startData);\r\n    Calendar wkDateCal = Calendar.getInstance();\r\n    wkDateCal.setTime(wkDate);\r\n    cal.set(Calendar.YEAR, startDateCal.get(Calendar.YEAR));\r\n    while ((cal.getTime().before(wkDate)) && ((cal.get(Calendar.YEAR)) != (wkDateCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.HOUR, ((-7) * 24));\r\n        dbListL.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.HOUR, ((2 * 7) * 24));\r\n        dbListN.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long total = 0;\r\n    for (DiagnosisStatisticsBean d : dbList) {\r\n        total += d.getRegionStats();\r\n    }\r\n    for (DiagnosisStatisticsBean d : dbListL) {\r\n        d.getRegionStats();\r\n    }\r\n    for (DiagnosisStatisticsBean d : dbListN) {\r\n        d.getRegionStats();\r\n    }\r\n    long avg = 0;\r\n    long avgL = 0;\r\n    long avgN = 0;\r\n    if ((dbList.size()) != 0) {\r\n        avg = total / (dbList.size());\r\n        avgL = total / (dbListL.size());\r\n        avgN = total / (dbListN.size());\r\n    }\r\n    if (((weekTotal != 0) && (((weekTotal * 100) / threshold) > avg)) && (((weekTotalL != 0) && (((weekTotalL * 100) / threshold) > avgL)) || ((weekTotalN != 0) && (((weekTotalN * 100) / threshold) > avgN)))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}'),(614,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1026,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the expired prescriptions.\r\n */\r\npublic ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(615,'long loggedInMID','long',0,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1026,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the expired prescriptions.\r\n */\r\npublic ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(616,'long patientID','long',0,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1027,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPatient(long)',0,'/**\r\n * Gets a PatientBean from an MID\r\n *\r\n * @param patientID\r\n * 		MID of the patient\r\n * @return PatientBean for the MID given\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long patientID) throws iTrustException {\r\n    return patientDAO.getPatient(patientID);\r\n}'),(617,'edu.ncsu.csc.itrust.beans.PatientBean','edu.ncsu.csc.itrust.beans.PatientBean',266,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1027,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPatient(long)',1,'/**\r\n * Gets a PatientBean from an MID\r\n *\r\n * @param patientID\r\n * 		MID of the patient\r\n * @return PatientBean for the MID given\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long patientID) throws iTrustException {\r\n    return patientDAO.getPatient(patientID);\r\n}'),(618,'PrescriptionBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1028,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * 		item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}'),(619,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1028,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',1,'/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * 		item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}'),(620,'long patientID','long',0,167,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction',1029,'edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)',0,'/**\r\n * Returns all the prescriptions for a given patient\r\n *\r\n * @param patientID\r\n * 		patient in question\r\n * @return list of all the prescriptions for that patient\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(patientID);\r\n    if ((loggedInMID) == patientID) {\r\n        return patientDAO.getExpiredPrescriptions(patientID);\r\n    }\r\n    List<String> toList = new ArrayList<String>();\r\n    toList.add(patient.getEmail());\r\n    List<PatientBean> representatives = patientDAO.getRepresenting(patientID);\r\n    for (PatientBean representative : representatives) {\r\n        if ((loggedInMID) == (representative.getMID())) {\r\n            return patientDAO.getExpiredPrescriptions(patientID);\r\n        }\r\n        toList.add(representative.getEmail());\r\n    }\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\r\n    for (PersonnelBean dlhcp : dlhcps) {\r\n        if ((loggedInMID) == (dlhcp.getMID())) {\r\n            return patientDAO.getExpiredPrescriptions(patientID);\r\n        }\r\n        List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\r\n        for (PersonnelBean uap : uaps) {\r\n            if ((loggedInMID) == (uap.getMID())) {\r\n                return patientDAO.getPrescriptions(patientID);\r\n            }\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    email.setToList(toList);\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    email.setSubject(\"Undesignated Personnel Have Accessed Your Prescription Records\");\r\n    email.setBody(\"An undesignated HCP or UAP has accessed your prescription records. For more information, please log in to iTrust.\");\r\n    emailer.sendEmail(email);\r\n    return patientDAO.getPrescriptions(patientID);\r\n}'),(621,'String primaryColor','java.lang.String',0,168,'edu.ncsu.csc.itrust.action.ViewHelperAction',1032,'edu.ncsu.csc.itrust.action.ViewHelperAction.calculateColor(java.lang.String,java.lang.String,double)',0,'public static String calculateColor(String primaryColor, String secondaryColor, double ratio) {\r\n    double primeRed = Integer.parseInt(primaryColor.substring(0, 2), 16);\r\n    double primeGreen = Integer.parseInt(primaryColor.substring(2, 4), 16);\r\n    double primeBlue = Integer.parseInt(primaryColor.substring(4, 6), 16);\r\n    double secondRed = Integer.parseInt(secondaryColor.substring(0, 2), 16);\r\n    double secondGreen = Integer.parseInt(secondaryColor.substring(2, 4), 16);\r\n    double secondBlue = Integer.parseInt(secondaryColor.substring(4, 6), 16);\r\n    int newRed = ((int) ((secondRed * ratio) + (primeRed * (1 - ratio))));\r\n    int newGreen = ((int) ((secondGreen * ratio) + (primeGreen * (1 - ratio))));\r\n    int newBlue = ((int) ((secondBlue * ratio) + (primeBlue * (1 - ratio))));\r\n    return String.format(\"%06X\", (((newRed << 16) + (newGreen << 8)) + newBlue));\r\n}'),(622,'String secondaryColor','java.lang.String',0,168,'edu.ncsu.csc.itrust.action.ViewHelperAction',1032,'edu.ncsu.csc.itrust.action.ViewHelperAction.calculateColor(java.lang.String,java.lang.String,double)',0,'public static String calculateColor(String primaryColor, String secondaryColor, double ratio) {\r\n    double primeRed = Integer.parseInt(primaryColor.substring(0, 2), 16);\r\n    double primeGreen = Integer.parseInt(primaryColor.substring(2, 4), 16);\r\n    double primeBlue = Integer.parseInt(primaryColor.substring(4, 6), 16);\r\n    double secondRed = Integer.parseInt(secondaryColor.substring(0, 2), 16);\r\n    double secondGreen = Integer.parseInt(secondaryColor.substring(2, 4), 16);\r\n    double secondBlue = Integer.parseInt(secondaryColor.substring(4, 6), 16);\r\n    int newRed = ((int) ((secondRed * ratio) + (primeRed * (1 - ratio))));\r\n    int newGreen = ((int) ((secondGreen * ratio) + (primeGreen * (1 - ratio))));\r\n    int newBlue = ((int) ((secondBlue * ratio) + (primeBlue * (1 - ratio))));\r\n    return String.format(\"%06X\", (((newRed << 16) + (newGreen << 8)) + newBlue));\r\n}'),(623,'double ratio','double',0,168,'edu.ncsu.csc.itrust.action.ViewHelperAction',1032,'edu.ncsu.csc.itrust.action.ViewHelperAction.calculateColor(java.lang.String,java.lang.String,double)',0,'public static String calculateColor(String primaryColor, String secondaryColor, double ratio) {\r\n    double primeRed = Integer.parseInt(primaryColor.substring(0, 2), 16);\r\n    double primeGreen = Integer.parseInt(primaryColor.substring(2, 4), 16);\r\n    double primeBlue = Integer.parseInt(primaryColor.substring(4, 6), 16);\r\n    double secondRed = Integer.parseInt(secondaryColor.substring(0, 2), 16);\r\n    double secondGreen = Integer.parseInt(secondaryColor.substring(2, 4), 16);\r\n    double secondBlue = Integer.parseInt(secondaryColor.substring(4, 6), 16);\r\n    int newRed = ((int) ((secondRed * ratio) + (primeRed * (1 - ratio))));\r\n    int newGreen = ((int) ((secondGreen * ratio) + (primeGreen * (1 - ratio))));\r\n    int newBlue = ((int) ((secondBlue * ratio) + (primeBlue * (1 - ratio))));\r\n    return String.format(\"%06X\", (((newRed << 16) + (newGreen << 8)) + newBlue));\r\n}'),(624,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1036,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving the logs.\r\n */\r\npublic ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}'),(625,'long loggedInMID','long',0,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1036,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving the logs.\r\n */\r\npublic ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}'),(626,'String lowerDate','java.lang.String',0,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1037,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getAccesses(java.lang.String,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param lowerDate\r\n * 		the first date\r\n * @param upperDate\r\n * 		the second date\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<TransactionBean> getAccesses(String lowerDate, String upperDate, String logMID, boolean getByRole) throws DBException, FormValidationException, iTrustException {\r\n    List<TransactionBean> accesses;// stores the log entries\r\n\r\n    List<PersonnelBean> dlhcps;\r\n    // get the medical dependents for a signed in user. If the selected user is not the\r\n    // signed in user or one of the dependents, then the user doesnt have access to the log\r\n    List<PatientBean> patientRelatives = getRepresented(loggedInMID);\r\n    long mid = loggedInMID;\r\n    try {\r\n        mid = Long.parseLong(logMID);\r\n    } catch (Exception e) {\r\n    }\r\n    dlhcps = patientDAO.getDeclaredHCPs(mid);\r\n    boolean midInScope = false;\r\n    for (PatientBean pb : patientRelatives) {\r\n        if ((pb.getMID()) == mid)\r\n            midInScope = true;\r\n\r\n    }\r\n    if ((mid != (loggedInMID)) && (!midInScope)) {\r\n        // the selected user in the form is out of scope and cant be shown to the user\r\n        throw new FormValidationException(\"Log to View.\");\r\n    }\r\n    // user has either 0 or 1 DLHCPs. Get one if exists so it can be filtered from results\r\n    long dlhcpID = -1;\r\n    if (!(dlhcps.isEmpty()))\r\n        dlhcpID = dlhcps.get(0).getMID();\r\n\r\n    if ((lowerDate == null) || (upperDate == null))\r\n        return transDAO.getAllRecordAccesses(mid, dlhcpID, getByRole);\r\n\r\n    try {\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        accesses = transDAO.getRecordAccesses(mid, dlhcpID, lower, upper, getByRole);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return accesses;\r\n}'),(627,'String upperDate','java.lang.String',0,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1037,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getAccesses(java.lang.String,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param lowerDate\r\n * 		the first date\r\n * @param upperDate\r\n * 		the second date\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<TransactionBean> getAccesses(String lowerDate, String upperDate, String logMID, boolean getByRole) throws DBException, FormValidationException, iTrustException {\r\n    List<TransactionBean> accesses;// stores the log entries\r\n\r\n    List<PersonnelBean> dlhcps;\r\n    // get the medical dependents for a signed in user. If the selected user is not the\r\n    // signed in user or one of the dependents, then the user doesnt have access to the log\r\n    List<PatientBean> patientRelatives = getRepresented(loggedInMID);\r\n    long mid = loggedInMID;\r\n    try {\r\n        mid = Long.parseLong(logMID);\r\n    } catch (Exception e) {\r\n    }\r\n    dlhcps = patientDAO.getDeclaredHCPs(mid);\r\n    boolean midInScope = false;\r\n    for (PatientBean pb : patientRelatives) {\r\n        if ((pb.getMID()) == mid)\r\n            midInScope = true;\r\n\r\n    }\r\n    if ((mid != (loggedInMID)) && (!midInScope)) {\r\n        // the selected user in the form is out of scope and cant be shown to the user\r\n        throw new FormValidationException(\"Log to View.\");\r\n    }\r\n    // user has either 0 or 1 DLHCPs. Get one if exists so it can be filtered from results\r\n    long dlhcpID = -1;\r\n    if (!(dlhcps.isEmpty()))\r\n        dlhcpID = dlhcps.get(0).getMID();\r\n\r\n    if ((lowerDate == null) || (upperDate == null))\r\n        return transDAO.getAllRecordAccesses(mid, dlhcpID, getByRole);\r\n\r\n    try {\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        accesses = transDAO.getRecordAccesses(mid, dlhcpID, lower, upper, getByRole);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return accesses;\r\n}'),(628,'String logMID','java.lang.String',0,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1037,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getAccesses(java.lang.String,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param lowerDate\r\n * 		the first date\r\n * @param upperDate\r\n * 		the second date\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<TransactionBean> getAccesses(String lowerDate, String upperDate, String logMID, boolean getByRole) throws DBException, FormValidationException, iTrustException {\r\n    List<TransactionBean> accesses;// stores the log entries\r\n\r\n    List<PersonnelBean> dlhcps;\r\n    // get the medical dependents for a signed in user. If the selected user is not the\r\n    // signed in user or one of the dependents, then the user doesnt have access to the log\r\n    List<PatientBean> patientRelatives = getRepresented(loggedInMID);\r\n    long mid = loggedInMID;\r\n    try {\r\n        mid = Long.parseLong(logMID);\r\n    } catch (Exception e) {\r\n    }\r\n    dlhcps = patientDAO.getDeclaredHCPs(mid);\r\n    boolean midInScope = false;\r\n    for (PatientBean pb : patientRelatives) {\r\n        if ((pb.getMID()) == mid)\r\n            midInScope = true;\r\n\r\n    }\r\n    if ((mid != (loggedInMID)) && (!midInScope)) {\r\n        // the selected user in the form is out of scope and cant be shown to the user\r\n        throw new FormValidationException(\"Log to View.\");\r\n    }\r\n    // user has either 0 or 1 DLHCPs. Get one if exists so it can be filtered from results\r\n    long dlhcpID = -1;\r\n    if (!(dlhcps.isEmpty()))\r\n        dlhcpID = dlhcps.get(0).getMID();\r\n\r\n    if ((lowerDate == null) || (upperDate == null))\r\n        return transDAO.getAllRecordAccesses(mid, dlhcpID, getByRole);\r\n\r\n    try {\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        accesses = transDAO.getRecordAccesses(mid, dlhcpID, lower, upper, getByRole);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return accesses;\r\n}'),(629,'boolean getByRole','boolean',0,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1037,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getAccesses(java.lang.String,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param lowerDate\r\n * 		the first date\r\n * @param upperDate\r\n * 		the second date\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<TransactionBean> getAccesses(String lowerDate, String upperDate, String logMID, boolean getByRole) throws DBException, FormValidationException, iTrustException {\r\n    List<TransactionBean> accesses;// stores the log entries\r\n\r\n    List<PersonnelBean> dlhcps;\r\n    // get the medical dependents for a signed in user. If the selected user is not the\r\n    // signed in user or one of the dependents, then the user doesnt have access to the log\r\n    List<PatientBean> patientRelatives = getRepresented(loggedInMID);\r\n    long mid = loggedInMID;\r\n    try {\r\n        mid = Long.parseLong(logMID);\r\n    } catch (Exception e) {\r\n    }\r\n    dlhcps = patientDAO.getDeclaredHCPs(mid);\r\n    boolean midInScope = false;\r\n    for (PatientBean pb : patientRelatives) {\r\n        if ((pb.getMID()) == mid)\r\n            midInScope = true;\r\n\r\n    }\r\n    if ((mid != (loggedInMID)) && (!midInScope)) {\r\n        // the selected user in the form is out of scope and cant be shown to the user\r\n        throw new FormValidationException(\"Log to View.\");\r\n    }\r\n    // user has either 0 or 1 DLHCPs. Get one if exists so it can be filtered from results\r\n    long dlhcpID = -1;\r\n    if (!(dlhcps.isEmpty()))\r\n        dlhcpID = dlhcps.get(0).getMID();\r\n\r\n    if ((lowerDate == null) || (upperDate == null))\r\n        return transDAO.getAllRecordAccesses(mid, dlhcpID, getByRole);\r\n\r\n    try {\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        accesses = transDAO.getRecordAccesses(mid, dlhcpID, lower, upper, getByRole);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return accesses;\r\n}'),(630,'List<TransactionBean> accesses','java.util.List',0,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1039,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getDefaultStart(java.util.List)',0,'/**\r\n * Returns the date of the first Transaction in the list passed as a param if the list is not empty\r\n * otherwise, returns todays date\r\n *\r\n * @param accesses\r\n * 		A java.util.List of TransactionBeans for the accesses.\r\n * @return A String representing the date of the first transaction.\r\n */\r\npublic String getDefaultStart(List<TransactionBean> accesses) {\r\n    String startDate = \"\";\r\n    if ((accesses.size()) > 0) {\r\n        startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(accesses.get(((accesses.size()) - 1)).getTimeLogged().getTime()));\r\n    } else {\r\n        startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    }\r\n    return startDate;\r\n}'),(631,'List<TransactionBean> accesses','java.util.List',0,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1038,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getDefaultEnd(java.util.List)',0,'/**\r\n * Returns the date of the last Transaction in the list passed as a param if the list is not empty\r\n * otherwise, returns todays date\r\n *\r\n * @param accesses\r\n * 		A java.util.List of TransactionBeans storing the access.\r\n * @return A String representation of the date of the last transaction.\r\n */\r\npublic String getDefaultEnd(List<TransactionBean> accesses) {\r\n    String endDate = \"\";\r\n    if ((accesses.size()) > 0) {\r\n        endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(accesses.get(0).getTimeLogged().getTime()));\r\n    } else {\r\n        endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    }\r\n    return endDate;\r\n}'),(632,'long pid','long',0,170,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction',1040,'edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getRepresented(long)',0,'/**\r\n * Return a list of patients that pid represents\r\n *\r\n * @param pid\r\n * 		The id of the personnel we are looking up representees for.\r\n * @return a list of PatientBeans\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<PatientBean> getRepresented(long pid) throws iTrustException {\r\n    return patientDAO.getRepresented(pid);\r\n}'),(633,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,172,'edu.ncsu.csc.itrust.action.ViewMyApptsAction',1051,'edu.ncsu.csc.itrust.action.ViewMyApptsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewMyApptsAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(634,'long loggedInMID','long',0,172,'edu.ncsu.csc.itrust.action.ViewMyApptsAction',1051,'edu.ncsu.csc.itrust.action.ViewMyApptsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewMyApptsAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    this.loggedInMID = loggedInMID;\r\n}'),(635,'long MID','long',0,172,'edu.ncsu.csc.itrust.action.ViewMyApptsAction',1053,'edu.ncsu.csc.itrust.action.ViewMyApptsAction.getAppointments(long)',0,'/**\r\n * Gets a users appointments\r\n *\r\n * @param mid\r\n * 		the MID of the user\r\n * @return a list of the users appointments\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<ApptBean> getAppointments(long MID) throws SQLException {\r\n    return apptDAO.getApptsFor(MID);\r\n}'),(636,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,174,'edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction',1060,'edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewMyLabProceduresAction(DAOFactory factory, long loggedInMID) {\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    patient = loggedInMID;\r\n}'),(637,'long loggedInMID','long',0,174,'edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction',1060,'edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewMyLabProceduresAction(DAOFactory factory, long loggedInMID) {\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    patient = loggedInMID;\r\n}'),(638,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1067,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is viewing their messages.\r\n */\r\npublic ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.referralDAO = factory.getReferralDAO();\r\n}'),(639,'long loggedInMID','long',0,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1067,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the user who is viewing their messages.\r\n */\r\npublic ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.referralDAO = factory.getReferralDAO();\r\n}'),(640,'List<MessageBean> messages','java.util.List',0,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1068,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.filterMessages(java.util.List,java.lang.String)',0,'/**\r\n * Gets a list of messages for a user based on their filter criteria.\r\n *\r\n * @param messages\r\n * 		List of all of a users MessageBeans\r\n * @param filter\r\n * 		String containing a users filter criteria.\r\n * @return a List of MessageBeans that meet the criteria of the filter.\r\n * @throws iTrustException\r\n * 		\r\n * @throws ParseException\r\n * 		\r\n */\r\npublic List<MessageBean> filterMessages(List<MessageBean> messages, String filter) throws iTrustException, ParseException {\r\n    List<MessageBean> filtered = new ArrayList<MessageBean>();\r\n    String[] f = filter.split(\",\", (-1));\r\n    for (MessageBean m : messages) {\r\n        /**\r\n         * Check the sender filter field.\r\n         * Exclude if this MessageBean does not match the\r\n         * requested sender, if one is specified.\r\n         */\r\n        if (!(f[0].equals(\"\"))) {\r\n            if (!(this.getName(m.getFrom()).equalsIgnoreCase(f[0])))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the subject filter field.\r\n         * Exclude if this MessageBean does not match the\r\n         * requested subject, if one is specified.\r\n         */\r\n        if (!(f[1].equals(\"\"))) {\r\n            if (!(m.getSubject().equalsIgnoreCase(f[1])))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the body of the message for certain words.\r\n         * Exclude if this MessageBean if it does not contain\r\n         * those words in the message body.\r\n         */\r\n        if (!(f[2].equals(\"\"))) {\r\n            if ((!(m.getSubject().toLowerCase().contains(f[2].toLowerCase()))) && (!(m.getBody().toLowerCase().contains(f[2].toLowerCase()))))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the body of the message for certain words.\r\n         * Exclude if this MessageBean if it does contain\r\n         * those words in the message body.\r\n         */\r\n        if (!(f[3].equals(\"\"))) {\r\n            if ((m.getSubject().toLowerCase().contains(f[3].toLowerCase())) || (m.getBody().toLowerCase().contains(f[3].toLowerCase())))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the start date filter field.\r\n         * Exclude if this MessageBean was not sent after\r\n         * this date.\r\n         */\r\n        if (!(f[4].equals(\"\"))) {\r\n            DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            Date s = format.parse(f[4]);\r\n            if (s.after(m.getSentDate()))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the end date filter field.\r\n         * Exclude if this MessageBean was not sent before\r\n         * this date.\r\n         */\r\n        if (!(f[5].equals(\"\"))) {\r\n            DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            Date s = format.parse(f[5]);\r\n            Calendar c = Calendar.getInstance();\r\n            c.setTime(s);\r\n            c.add(Calendar.DAY_OF_MONTH, 1);\r\n            s = c.getTime();\r\n            if (s.before(m.getSentDate()))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * If the message has not been eliminated by any\r\n         * of the filter fields, add it to the new list\r\n         * of messages.\r\n         */\r\n        filtered.add(m);\r\n    }\r\n    return filtered;\r\n}'),(641,'String filter','java.lang.String',0,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1068,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.filterMessages(java.util.List,java.lang.String)',0,'/**\r\n * Gets a list of messages for a user based on their filter criteria.\r\n *\r\n * @param messages\r\n * 		List of all of a users MessageBeans\r\n * @param filter\r\n * 		String containing a users filter criteria.\r\n * @return a List of MessageBeans that meet the criteria of the filter.\r\n * @throws iTrustException\r\n * 		\r\n * @throws ParseException\r\n * 		\r\n */\r\npublic List<MessageBean> filterMessages(List<MessageBean> messages, String filter) throws iTrustException, ParseException {\r\n    List<MessageBean> filtered = new ArrayList<MessageBean>();\r\n    String[] f = filter.split(\",\", (-1));\r\n    for (MessageBean m : messages) {\r\n        /**\r\n         * Check the sender filter field.\r\n         * Exclude if this MessageBean does not match the\r\n         * requested sender, if one is specified.\r\n         */\r\n        if (!(f[0].equals(\"\"))) {\r\n            if (!(this.getName(m.getFrom()).equalsIgnoreCase(f[0])))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the subject filter field.\r\n         * Exclude if this MessageBean does not match the\r\n         * requested subject, if one is specified.\r\n         */\r\n        if (!(f[1].equals(\"\"))) {\r\n            if (!(m.getSubject().equalsIgnoreCase(f[1])))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the body of the message for certain words.\r\n         * Exclude if this MessageBean if it does not contain\r\n         * those words in the message body.\r\n         */\r\n        if (!(f[2].equals(\"\"))) {\r\n            if ((!(m.getSubject().toLowerCase().contains(f[2].toLowerCase()))) && (!(m.getBody().toLowerCase().contains(f[2].toLowerCase()))))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the body of the message for certain words.\r\n         * Exclude if this MessageBean if it does contain\r\n         * those words in the message body.\r\n         */\r\n        if (!(f[3].equals(\"\"))) {\r\n            if ((m.getSubject().toLowerCase().contains(f[3].toLowerCase())) || (m.getBody().toLowerCase().contains(f[3].toLowerCase())))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the start date filter field.\r\n         * Exclude if this MessageBean was not sent after\r\n         * this date.\r\n         */\r\n        if (!(f[4].equals(\"\"))) {\r\n            DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            Date s = format.parse(f[4]);\r\n            if (s.after(m.getSentDate()))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the end date filter field.\r\n         * Exclude if this MessageBean was not sent before\r\n         * this date.\r\n         */\r\n        if (!(f[5].equals(\"\"))) {\r\n            DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            Date s = format.parse(f[5]);\r\n            Calendar c = Calendar.getInstance();\r\n            c.setTime(s);\r\n            c.add(Calendar.DAY_OF_MONTH, 1);\r\n            s = c.getTime();\r\n            if (s.before(m.getSentDate()))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * If the message has not been eliminated by any\r\n         * of the filter fields, add it to the new list\r\n         * of messages.\r\n         */\r\n        filtered.add(m);\r\n    }\r\n    return filtered;\r\n}'),(642,'long mid','long',0,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1078,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getName(long)',0,'/**\r\n * Gets a patients name from their MID\r\n *\r\n * @param mid\r\n * 		the MID of the patient\r\n * @return the patients name\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getName(long mid) throws iTrustException {\r\n    if (mid < 7000000000L)\r\n        return patientDAO.getName(mid);\r\n    else\r\n        return personnelDAO.getName(mid);\r\n\r\n}'),(643,'long mid','long',0,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1079,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getPersonnelName(long)',0,'/**\r\n * Gets a personnels name from their MID\r\n *\r\n * @param mid\r\n * 		the MID of the personnel\r\n * @return the personnels name\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPersonnelName(long mid) throws iTrustException {\r\n    return personnelDAO.getName(mid);\r\n}'),(644,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1082,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.setRead(edu.ncsu.csc.itrust.beans.MessageBean)',0,'/**\r\n * Set the state of the MessageBean to read, after\r\n * it is read by a user.\r\n *\r\n * @param mBean\r\n * 		MessageBean to be read\r\n */\r\npublic void setRead(MessageBean mBean) {\r\n    try {\r\n        messageDAO.updateRead(mBean);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n}'),(645,'long id','long',0,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1081,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.linkedToReferral(long)',0,'public long linkedToReferral(long id) throws DBException {\r\n    return referralDAO.isReferralMessage(id);\r\n}'),(646,'long refID','long',0,176,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction',1077,'edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getCCdMessages(long)',0,'public List<MessageBean> getCCdMessages(long refID) throws SQLException {\r\n    return messageDAO.getCCdMessages(refID);\r\n}'),(647,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1100,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the records.\r\n */\r\npublic ViewMyRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labDAO = factory.getLabProcedureDAO();\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.loincDAO = factory.getLOINCDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(648,'long loggedInMID','long',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1100,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the records.\r\n */\r\npublic ViewMyRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labDAO = factory.getLabProcedureDAO();\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.loincDAO = factory.getLOINCDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(649,'String labCode','java.lang.String',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1119,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getProcedureName(java.lang.String)',0,'public List<LOINCbean> getProcedureName(String labCode) throws DBException {\r\n    return loincDAO.getProcedures(labCode);\r\n}'),(650,'String input','java.lang.String',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1127,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.representPatient(java.lang.String)',0,'/**\r\n * Takes the patients representee as a param and returns it as a long if the patient represents the input\r\n * param\r\n *\r\n * @param input\r\n * 		the patients representee mid\r\n * @return representees mid as a long\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long representPatient(String input) throws iTrustException {\r\n    try {\r\n        long reppeeMID = Long.valueOf(input);\r\n        if (patientDAO.represents(loggedInMID, reppeeMID)) {\r\n            loggedInMID = reppeeMID;\r\n            return reppeeMID;\r\n        } else\r\n            throw new iTrustException((\"You do not represent patient \" + reppeeMID));\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"MID is not a number\");\r\n    }\r\n}'),(651,'long mid','long',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1117,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPatient(long)',0,'/**\r\n * Returns a PatientBean for the specified MID\r\n *\r\n * @param mid\r\n * 		id of the requested bean\r\n * @return PatientBean for the specified MID\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long mid) throws iTrustException {\r\n    return patientDAO.getPatient(mid);\r\n}'),(652,'edu.ncsu.csc.itrust.beans.PatientBean','edu.ncsu.csc.itrust.beans.PatientBean',266,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1117,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPatient(long)',1,'/**\r\n * Returns a PatientBean for the specified MID\r\n *\r\n * @param mid\r\n * 		id of the requested bean\r\n * @return PatientBean for the specified MID\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long mid) throws iTrustException {\r\n    return patientDAO.getPatient(mid);\r\n}'),(653,'long mid','long',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1118,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPersonnel(long)',0,'/**\r\n * Returns a PersonnelBean for the requested MID\r\n *\r\n * @param mid\r\n * 		id of the requested bean\r\n * @return a PersonnelBean for the requested MID\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}'),(654,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1118,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPersonnel(long)',1,'/**\r\n * Returns a PersonnelBean for the requested MID\r\n *\r\n * @param mid\r\n * 		id of the requested bean\r\n * @return a PersonnelBean for the requested MID\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}'),(655,'long mid','long',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1112,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyHealthRecords(long)',0,'/**\r\n * Returns a list of HealthRecords for the specified family member\r\n *\r\n * @return a list of HealthRecords for the specified family member\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<HealthRecord> getFamilyHealthRecords(long mid) throws iTrustException {\r\n    return hrDAO.getAllHealthRecords(mid);\r\n}'),(656,'long visitID','long',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1109,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getCompleteOfficeVisit(long)',0,'/**\r\n * Returns a complete OfficeVisitBean given a visitID\r\n *\r\n * @return a complete OfficeVisitBean given a visitID\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(visitID);\r\n}'),(657,'edu.ncsu.csc.itrust.beans.OfficeVisitBean','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1109,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getCompleteOfficeVisit(long)',1,'/**\r\n * Returns a complete OfficeVisitBean given a visitID\r\n *\r\n * @return a complete OfficeVisitBean given a visitID\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(visitID);\r\n}'),(658,'long visitID','long',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1120,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getProcedures(long)',0,'public List<ProcedureBean> getProcedures(long visitID) throws DBException {\r\n    return procDAO.getList(visitID);\r\n}'),(659,'long visitID','long',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1126,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.isSurveyCompleted(long)',0,'/**\r\n * Has a survey been created for this office visit\r\n *\r\n * @param visitID\r\n * 		ID of the office visit in question\r\n * @return true if the survey has been completed, otherwise false\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean isSurveyCompleted(long visitID) throws iTrustException {\r\n    return surveyDAO.isSurveyCompleted(visitID);\r\n}'),(660,'long id','long',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1124,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getSpecificLabs(long,java.lang.String)',0,'public List<LabProcedureBean> getSpecificLabs(long id, String loincID) throws DBException {\r\n    return labDAO.getAllLabProceduresLOINC(id, loincID);\r\n}'),(661,'String loincID','java.lang.String',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1124,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getSpecificLabs(long,java.lang.String)',0,'public List<LabProcedureBean> getSpecificLabs(long id, String loincID) throws DBException {\r\n    return labDAO.getAllLabProceduresLOINC(id, loincID);\r\n}'),(662,'List<LabProcedureBean> procs','java.util.List',0,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1128,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.setViewed(java.util.List)',0,'public void setViewed(List<LabProcedureBean> procs) throws DBException {\r\n    for (LabProcedureBean b : procs) {\r\n        b.setViewedByPatient(true);\r\n        labDAO.markViewed(b);\r\n    }\r\n}'),(663,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1104,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have high blood pressure\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getBloodPressureSystolic()) > 240) || ((record.getBloodPressureDiastolic()) > 120))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(664,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1105,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have high cholesterol\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getCholesterolHDL()) < 35) || ((record.getCholesterolLDL()) > 250))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(665,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1102,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have diabetes\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(666,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1101,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have cancer\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(667,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1103,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members have heart disease\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(668,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1125,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family members smoke\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(669,'FamilyMemberBean member','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,178,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction',1114,'edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'/**\r\n * Checks to see if family member is dead, and if so, what their cause of death was\r\n *\r\n * @param member\r\n * 		the family member in question\r\n * @return the cause of death for the family member\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if ((patient.getCauseOfDeath()) == null)\r\n        return \"\";\r\n\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n\r\n    return diag.getDescription();\r\n}'),(670,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1156,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the HCP retrieving the patient data.\r\n */\r\npublic ViewMyRemoteMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(671,'long loggedInMID','long',0,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1156,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the HCP retrieving the patient data.\r\n */\r\npublic ViewMyRemoteMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}'),(672,'long patientMID','long',0,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1158,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByDate(long,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of RemoteMonitoringDataBeans for the logged in HCP\r\n *\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, String startDate, String endDate) throws DBException, FormValidationException {\r\n    Date lower;\r\n    Date upper;\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n        upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(endDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return rmDAO.getPatientDataByDate(patientMID, lower, upper);\r\n}'),(673,'String startDate','java.lang.String',0,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1158,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByDate(long,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of RemoteMonitoringDataBeans for the logged in HCP\r\n *\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, String startDate, String endDate) throws DBException, FormValidationException {\r\n    Date lower;\r\n    Date upper;\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n        upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(endDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return rmDAO.getPatientDataByDate(patientMID, lower, upper);\r\n}'),(674,'String endDate','java.lang.String',0,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1158,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByDate(long,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of RemoteMonitoringDataBeans for the logged in HCP\r\n *\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, String startDate, String endDate) throws DBException, FormValidationException {\r\n    Date lower;\r\n    Date upper;\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n        upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(endDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return rmDAO.getPatientDataByDate(patientMID, lower, upper);\r\n}'),(675,'long patientMID','long',0,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1159,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByType(long,java.lang.String)',0,'/**\r\n * Returns a list of RemoteMonitoringDataBeans for the logged in HCP based on a certain data type\r\n *\r\n * @param patientMID\r\n * 		\r\n * @param dataType\r\n * 		\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByType(long patientMID, String dataType) throws DBException, FormValidationException {\r\n    String[] types = new String[]{ \"weight\", \"systolicBloodPressure\", \"diastolicBloodPressure\", \"glucoseLevel\", \"pedometerReading\" };\r\n    boolean valid = false;\r\n    for (String dType : types) {\r\n        if (dType.equals(dataType)) {\r\n            valid = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!valid) {\r\n        throw new FormValidationException(\"Input must be a valid telemedicine data type!\");\r\n    }\r\n    return rmDAO.getPatientDataByType(patientMID, dataType);\r\n}'),(676,'String dataType','java.lang.String',0,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1159,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByType(long,java.lang.String)',0,'/**\r\n * Returns a list of RemoteMonitoringDataBeans for the logged in HCP based on a certain data type\r\n *\r\n * @param patientMID\r\n * 		\r\n * @param dataType\r\n * 		\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByType(long patientMID, String dataType) throws DBException, FormValidationException {\r\n    String[] types = new String[]{ \"weight\", \"systolicBloodPressure\", \"diastolicBloodPressure\", \"glucoseLevel\", \"pedometerReading\" };\r\n    boolean valid = false;\r\n    for (String dType : types) {\r\n        if (dType.equals(dataType)) {\r\n            valid = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!valid) {\r\n        throw new FormValidationException(\"Input must be a valid telemedicine data type!\");\r\n    }\r\n    return rmDAO.getPatientDataByType(patientMID, dataType);\r\n}'),(677,'long pid','long',0,180,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction',1161,'edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientName(long)',0,'/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(long pid) throws DBException, iTrustException {\r\n    return authDAO.getUserName(pid);\r\n}'),(678,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,182,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction',1170,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'// private DAOFactory factory;\r\n/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing their report requests.\r\n */\r\npublic ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    // this.factory = factory;\r\n}'),(679,'long loggedInMID','long',0,182,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction',1170,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'// private DAOFactory factory;\r\n/**\r\n * Set up\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing their report requests.\r\n */\r\npublic ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    // this.factory = factory;\r\n}'),(680,'long patientMID','long',0,182,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction',1171,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.addReportRequest(long)',0,'// /**\r\n// * Returns a list of *all* reports\r\n// *\r\n// * @return list of all reports\r\n// * @throws iTrustException\r\n// */\r\n// public List<ReportRequestBean> getAllReportRequests() throws iTrustException {\r\n// return reportRequestDAO.getAllReportRequests();\r\n// }\r\n/**\r\n * Adds a report request to the list\r\n *\r\n * @param patientMID\r\n * 		ID of the patient that the report request is for\r\n * @return \r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long addReportRequest(long patientMID) throws iTrustException {\r\n    long id = reportRequestDAO.addReportRequest(loggedInMID, patientMID, Calendar.getInstance().getTime());\r\n    return id;\r\n}'),(681,'int ID','int',0,182,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction',1174,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getReportRequest(int)',0,'// /**\r\n// * Approves a report request from the list.  E-mail is sent when the request is approved.\r\n// *\r\n// * @param ID id of the request\r\n// * @throws iTrustException\r\n// */\r\n// public void approveReportRequest(long ID) throws iTrustException {\r\n// ReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\r\n// reportRequestDAO.approveReportRequest(ID, loggedInMID, Calendar.getInstance().getTime());\r\n// new EmailUtil(factory).sendEmail(makeEmailApp(loggedInMID, rr.getRequesterMID(), rr.getPatientMID()));\r\n// \r\n// }\r\n// /**\r\n// *\r\n// * Sends e-mail regarding the approved request.\r\n// *\r\n// * @param adminID admin who approved the request\r\n// * @param hcpID HCP the request is for\r\n// * @param pid ID of the patient the report is about\r\n// * @return the sent e-mail\r\n// * @throws DBException\r\n// */\r\n// private Email makeEmailApp(long adminID, long hcpID, long pid) throws DBException {\r\n// \r\n// PatientBean p = new PatientDAO(factory).getPatient(pid);\r\n// \r\n// Email email = new Email();\r\n// email.setFrom(\"no-reply@itrust.com\");\r\n// email.setToList(Arrays.asList(p.getEmail()));\r\n// email.setSubject(\"A Report has been generated in iTrust\");\r\n// email\r\n// .setBody(String\r\n// .format(\r\n// \"Dear %s, \n The iTrust Health Care Provider (%s) submitted a request to view your full medical records.  The iTrust administrator (%s) approved a one-time viewing of this report.  You will be notified when the HCP chooses to view it.\",\r\n// p.getFullName(), hcpID, adminID));\r\n// return email;\r\n// }\r\n// /**\r\n// * Rejects a request from the list.\r\n// *\r\n// * @param ID id of the rejected request\r\n// * @param comment why the request was rejected\r\n// * @throws iTrustException\r\n// */\r\n// public void rejectReportRequest(long ID, String comment) throws iTrustException {\r\n// reportRequestDAO.rejectReportRequest(ID, loggedInMID, Calendar.getInstance().getTime(), comment);\r\n// }\r\n/**\r\n * Returns the requested report\r\n *\r\n * @param ID\r\n * 		id of the requested report\r\n * @return the requested report\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ReportRequestBean getReportRequest(int ID) throws iTrustException {\r\n    return reportRequestDAO.getReportRequest(ID);\r\n}'),(682,'edu.ncsu.csc.itrust.beans.ReportRequestBean','edu.ncsu.csc.itrust.beans.ReportRequestBean',276,182,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction',1174,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getReportRequest(int)',1,'// /**\r\n// * Approves a report request from the list.  E-mail is sent when the request is approved.\r\n// *\r\n// * @param ID id of the request\r\n// * @throws iTrustException\r\n// */\r\n// public void approveReportRequest(long ID) throws iTrustException {\r\n// ReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\r\n// reportRequestDAO.approveReportRequest(ID, loggedInMID, Calendar.getInstance().getTime());\r\n// new EmailUtil(factory).sendEmail(makeEmailApp(loggedInMID, rr.getRequesterMID(), rr.getPatientMID()));\r\n// \r\n// }\r\n// /**\r\n// *\r\n// * Sends e-mail regarding the approved request.\r\n// *\r\n// * @param adminID admin who approved the request\r\n// * @param hcpID HCP the request is for\r\n// * @param pid ID of the patient the report is about\r\n// * @return the sent e-mail\r\n// * @throws DBException\r\n// */\r\n// private Email makeEmailApp(long adminID, long hcpID, long pid) throws DBException {\r\n// \r\n// PatientBean p = new PatientDAO(factory).getPatient(pid);\r\n// \r\n// Email email = new Email();\r\n// email.setFrom(\"no-reply@itrust.com\");\r\n// email.setToList(Arrays.asList(p.getEmail()));\r\n// email.setSubject(\"A Report has been generated in iTrust\");\r\n// email\r\n// .setBody(String\r\n// .format(\r\n// \"Dear %s, \n The iTrust Health Care Provider (%s) submitted a request to view your full medical records.  The iTrust administrator (%s) approved a one-time viewing of this report.  You will be notified when the HCP chooses to view it.\",\r\n// p.getFullName(), hcpID, adminID));\r\n// return email;\r\n// }\r\n// /**\r\n// * Rejects a request from the list.\r\n// *\r\n// * @param ID id of the rejected request\r\n// * @param comment why the request was rejected\r\n// * @throws iTrustException\r\n// */\r\n// public void rejectReportRequest(long ID, String comment) throws iTrustException {\r\n// reportRequestDAO.rejectReportRequest(ID, loggedInMID, Calendar.getInstance().getTime(), comment);\r\n// }\r\n/**\r\n * Returns the requested report\r\n *\r\n * @param ID\r\n * 		id of the requested report\r\n * @return the requested report\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ReportRequestBean getReportRequest(int ID) throws iTrustException {\r\n    return reportRequestDAO.getReportRequest(ID);\r\n}'),(683,'int ID','int',0,182,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction',1175,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.setViewed(int)',0,'/**\r\n * Sets the viewed status of the report.  If the report is \"viewed\" the HCP must request a new one to see it again.\r\n *\r\n * @param ID\r\n * 		id of the report\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void setViewed(int ID) throws iTrustException {\r\n    // ReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\r\n    reportRequestDAO.setViewed(ID, Calendar.getInstance().getTime());\r\n    // new EmailUtil(factory).sendEmail(makeEmailView(rr.getApproverMID(), rr.getRequesterMID(), rr\r\n    // .getPatientMID()));\r\n}'),(684,'long id','long',0,182,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction',1173,'edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getLongStatus(long)',0,'// /**\r\n// *\r\n// * Sends e-mail regarding the request to the patient.\r\n// *\r\n// * @param adminID admin who approved the request\r\n// * @param hcpID HCP the request is for\r\n// * @param pid ID of the patient the report is about\r\n// * @return the sent e-mail\r\n// * @throws DBException\r\n// */\r\n// private Email makeEmailView(long adminID, long hcpID, long pid) throws DBException {\r\n// \r\n// PatientBean p = new PatientDAO(factory).getPatient(pid);\r\n// \r\n// Email email = new Email();\r\n// email.setFrom(\"no-reply@itrust.com\");\r\n// email.setToList(Arrays.asList(p.getEmail()));\r\n// email.setSubject(\"A Report has been generated in iTrust\");\r\n// email\r\n// .setBody(String\r\n// .format(\r\n// \"Dear %s, \n The iTrust Health Care Provider (%s) has chosen to view your full medical report, which was approved by an iTrust administrator (%s).  This report was only viewable one time and is no longer available.\",\r\n// p.getFullName(), hcpID, adminID));\r\n// return email;\r\n// }\r\n/**\r\n * Gets the status of the request\r\n *\r\n * @param id\r\n * 		id of the request\r\n * @return the requests status\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getLongStatus(long id) throws iTrustException {\r\n    StringBuilder s = new StringBuilder();\r\n    ReportRequestBean r = reportRequestDAO.getReportRequest(id);\r\n    if (r.getStatus().equals(ReportRequestBean.Requested)) {\r\n        PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n        s.append(String.format(\"Request was requested on %s by %s\", r.getRequestedDateString(), p.getFullName()));\r\n    }\r\n    if (r.getStatus().equals(ReportRequestBean.Viewed)) {\r\n        PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n        String fullName = \"Unknown\";\r\n        if (p != null) {\r\n            fullName = p.getFullName();\r\n            s.append(String.format(\"Request was requested on %s by %s, \", r.getRequestedDateString(), p.getFullName()));\r\n        }\r\n        s.append(\"\");// removed \"<br />\" because it caused unit test to fail and seems to have no\r\n\r\n        // purpose\r\n        s.append(String.format(\"and viewed on %s by %s\", r.getViewedDateString(), fullName));\r\n    }\r\n    return s.toString();\r\n}'),(685,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1189,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class handles validating the loggedInMid and ovIDString\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing their office visits.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String ovIDString) throws iTrustException {\r\n    super(factory, String.valueOf(loggedInMID), ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n}'),(686,'long loggedInMID','long',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1189,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class handles validating the loggedInMid and ovIDString\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing their office visits.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String ovIDString) throws iTrustException {\r\n    super(factory, String.valueOf(loggedInMID), ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n}'),(687,'String ovIDString','java.lang.String',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1189,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * Super class handles validating the loggedInMid and ovIDString\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing their office visits.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String ovIDString) throws iTrustException {\r\n    super(factory, String.valueOf(loggedInMID), ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n}'),(688,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1190,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param repPIDString\r\n * 		The MID of the representative viewing the records.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString) throws iTrustException {\r\n    super(factory, repPIDString, ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    checkRepresented(loggedInMID, repPIDString);\r\n}'),(689,'long loggedInMID','long',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1190,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param repPIDString\r\n * 		The MID of the representative viewing the records.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString) throws iTrustException {\r\n    super(factory, repPIDString, ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    checkRepresented(loggedInMID, repPIDString);\r\n}'),(690,'String repPIDString','java.lang.String',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1190,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param repPIDString\r\n * 		The MID of the representative viewing the records.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString) throws iTrustException {\r\n    super(factory, repPIDString, ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    checkRepresented(loggedInMID, repPIDString);\r\n}'),(691,'String ovIDString','java.lang.String',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1190,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param repPIDString\r\n * 		The MID of the representative viewing the records.\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString) throws iTrustException {\r\n    super(factory, repPIDString, ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    checkRepresented(loggedInMID, repPIDString);\r\n}'),(692,'long loggedInMID','long',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1191,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.checkRepresented(long,java.lang.String)',0,'private void checkRepresented(long loggedInMID, String repPIDString) throws iTrustException {\r\n    try {\r\n        long repee = Long.valueOf(repPIDString);\r\n        if (!(patientDAO.represents(loggedInMID, repee)))\r\n            throw new iTrustException(Messages.getString(\"ViewOfficeVisitAction.0\"));\r\n        // $NON-NLS-1$\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(Messages.getString(\"ViewOfficeVisitAction.1\"));// $NON-NLS-1$\r\n\r\n    }\r\n}'),(693,'String repPIDString','java.lang.String',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1191,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.checkRepresented(long,java.lang.String)',0,'private void checkRepresented(long loggedInMID, String repPIDString) throws iTrustException {\r\n    try {\r\n        long repee = Long.valueOf(repPIDString);\r\n        if (!(patientDAO.represents(loggedInMID, repee)))\r\n            throw new iTrustException(Messages.getString(\"ViewOfficeVisitAction.0\"));\r\n        // $NON-NLS-1$\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(Messages.getString(\"ViewOfficeVisitAction.1\"));// $NON-NLS-1$\r\n\r\n    }\r\n}'),(694,'List<LabProcedureBean> procs','java.util.List',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1200,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.setViewed(java.util.List)',0,'public void setViewed(List<LabProcedureBean> procs) throws DBException {\r\n    for (LabProcedureBean b : procs) {\r\n        b.setViewedByPatient(true);\r\n        labProceduresDAO.markViewed(b);\r\n    }\r\n}'),(695,'long hcpID','long',0,185,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction',1194,'edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getHCPName(long)',0,'/**\r\n * Returns the name of the HCP for the hcpID passed as a param\r\n *\r\n * @param hcpID\r\n * 		\r\n * @return the name of the HCP\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getHCPName(long hcpID) throws iTrustException {\r\n    String name = null;\r\n    try {\r\n        name = personnelDAO.getName(hcpID);\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        name = e.getMessage();\r\n    }\r\n    return name;\r\n}'),(696,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,187,'edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction',1207,'edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Construct a ViewPatientInstructionsAction for a given patient.\r\n *\r\n * @param factory\r\n * 		The DAO Factory.\r\n * @param pidString\r\n * 		The patient ID as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewPatientInstructionsAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.instructionsDAO = new PatientInstructionsDAO(factory);\r\n    this.personnelDAO = new PersonnelDAO(factory);\r\n    this.ovDAO = new OfficeVisitDAO(factory);\r\n}'),(697,'String pidString','java.lang.String',0,187,'edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction',1207,'edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Construct a ViewPatientInstructionsAction for a given patient.\r\n *\r\n * @param factory\r\n * 		The DAO Factory.\r\n * @param pidString\r\n * 		The patient ID as a string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic ViewPatientInstructionsAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.instructionsDAO = new PatientInstructionsDAO(factory);\r\n    this.personnelDAO = new PersonnelDAO(factory);\r\n    this.ovDAO = new OfficeVisitDAO(factory);\r\n}'),(698,'long ovid','long',0,187,'edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction',1209,'edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.getInstructionsForOfficeVisit(long)',0,'/**\r\n * Get a list of patient instructions for a given office vsiit.\r\n *\r\n * @param ovid\r\n * 		The office visit id to check.\r\n * @return A list of patient instructions beans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientInstructionsBean> getInstructionsForOfficeVisit(long ovid) throws DBException {\r\n    return instructionsDAO.getList(ovid);\r\n}'),(699,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,189,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction',1216,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the office visits.\r\n */\r\npublic ViewPatientOfficeVisitHistoryAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    officevisitDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    visits = new ArrayList<PatientVisitBean>();\r\n}'),(700,'long loggedInMID','long',0,189,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction',1216,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the office visits.\r\n */\r\npublic ViewPatientOfficeVisitHistoryAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    officevisitDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    visits = new ArrayList<PatientVisitBean>();\r\n}'),(701,'PatientBean pb','edu.ncsu.csc.itrust.beans.PatientBean',266,189,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction',1217,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.PatientInList(edu.ncsu.csc.itrust.beans.PatientBean,java.lang.String)',0,'/**\r\n * Checks to see if a patient is in the list of  visits\r\n *\r\n * @param pb\r\n * 		patient to check\r\n * @param date\r\n * 		date of the visit\r\n * @return True if the patient is in the list of visits.\r\n */\r\nprivate boolean PatientInList(PatientBean pb, String date) {\r\n    Iterator<PatientVisitBean> it = visits.iterator();\r\n    PatientVisitBean visitBean;\r\n    while (it.hasNext()) {\r\n        visitBean = it.next();\r\n        if (visitBean.getPatientName().equals(pb.getFullName())) {\r\n            if ((visitBean.getLastOVDateY().compareTo(date)) < 0) {\r\n                visitBean.setLastOVDate(date);\r\n            }\r\n            return true;\r\n        }\r\n    } \r\n    return false;\r\n}'),(702,'String date','java.lang.String',0,189,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction',1217,'edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.PatientInList(edu.ncsu.csc.itrust.beans.PatientBean,java.lang.String)',0,'/**\r\n * Checks to see if a patient is in the list of  visits\r\n *\r\n * @param pb\r\n * 		patient to check\r\n * @param date\r\n * 		date of the visit\r\n * @return True if the patient is in the list of visits.\r\n */\r\nprivate boolean PatientInList(PatientBean pb, String date) {\r\n    Iterator<PatientVisitBean> it = visits.iterator();\r\n    PatientVisitBean visitBean;\r\n    while (it.hasNext()) {\r\n        visitBean = it.next();\r\n        if (visitBean.getPatientName().equals(pb.getFullName())) {\r\n            if ((visitBean.getLastOVDateY().compareTo(date)) < 0) {\r\n                visitBean.setLastOVDate(date);\r\n            }\r\n            return true;\r\n        }\r\n    } \r\n    return false;\r\n}'),(703,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1225,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewPatientReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientID = patientID;\r\n}'),(704,'long patientID','long',0,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1225,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewPatientReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientID = patientID;\r\n}'),(705,'String field','java.lang.String',0,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1228,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Get all referrals for a patient sorted by the given field and in the given direction.\r\n *\r\n * @param field\r\n * 		The name of the pseudo-field to sort by.\r\n * @param dir\r\n * 		The direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getPatientQuery(patientID).query(field, dir);\r\n}'),(706,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1228,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Get all referrals for a patient sorted by the given field and in the given direction.\r\n *\r\n * @param field\r\n * 		The name of the pseudo-field to sort by.\r\n * @param dir\r\n * 		The direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getPatientQuery(patientID).query(field, dir);\r\n}'),(707,'int id','int',0,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1227,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferralByID(int)',0,'/**\r\n * This method gets a referral by its id\r\n *\r\n * @param id\r\n * 		\r\n * @return a referral bean\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferralByID(int id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(708,'edu.ncsu.csc.itrust.beans.ReferralBean','edu.ncsu.csc.itrust.beans.ReferralBean',274,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1227,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferralByID(int)',1,'/**\r\n * This method gets a referral by its id\r\n *\r\n * @param id\r\n * 		\r\n * @return a referral bean\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferralByID(int id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(709,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1231,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * This method updates the referral in the DAO\r\n *\r\n * @param bean\r\n * 		\r\n * @return a boolean expression used for testability\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean updateReferral(ReferralBean bean) throws DBException {\r\n    referralDAO.editReferral(bean);\r\n    return true;\r\n}'),(710,'long messageID','long',0,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1230,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.setReferralMessage(long,long)',0,'/**\r\n * This method updates the referral in the DAO\r\n *\r\n * @param bean\r\n * 		\r\n * @return a boolean expression used for testability\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean setReferralMessage(long messageID, long referralID) throws DBException {\r\n    referralDAO.setReferralMessage(messageID, referralID);\r\n    return true;\r\n}'),(711,'long referralID','long',0,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1230,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.setReferralMessage(long,long)',0,'/**\r\n * This method updates the referral in the DAO\r\n *\r\n * @param bean\r\n * 		\r\n * @return a boolean expression used for testability\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean setReferralMessage(long messageID, long referralID) throws DBException {\r\n    referralDAO.setReferralMessage(messageID, referralID);\r\n    return true;\r\n}'),(712,'long id','long',0,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1226,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getOVDate(long)',0,'/**\r\n * This method returns an office visit bean given its id. The purpose is to use the bean in the related\r\n * JSP to get the office visit date.\r\n *\r\n * @param id\r\n * 		\r\n * @return an office visit bean\r\n * @throws DBException\r\n * 		\r\n */\r\npublic OfficeVisitBean getOVDate(long id) throws DBException {\r\n    return ovDAO.getOfficeVisit(id);\r\n}'),(713,'edu.ncsu.csc.itrust.beans.OfficeVisitBean','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,191,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction',1226,'edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getOVDate(long)',1,'/**\r\n * This method returns an office visit bean given its id. The purpose is to use the bean in the related\r\n * JSP to get the office visit date.\r\n *\r\n * @param id\r\n * 		\r\n * @return an office visit bean\r\n * @throws DBException\r\n * 		\r\n */\r\npublic OfficeVisitBean getOVDate(long id) throws DBException {\r\n    return ovDAO.getOfficeVisit(id);\r\n}'),(714,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,193,'edu.ncsu.csc.itrust.action.ViewPersonnelAction',1239,'edu.ncsu.csc.itrust.action.ViewPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving personnel beans.\r\n */\r\npublic ViewPersonnelAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(715,'long loggedInMID','long',0,193,'edu.ncsu.csc.itrust.action.ViewPersonnelAction',1239,'edu.ncsu.csc.itrust.action.ViewPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving personnel beans.\r\n */\r\npublic ViewPersonnelAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(716,'String input','java.lang.String',0,193,'edu.ncsu.csc.itrust.action.ViewPersonnelAction',1241,'edu.ncsu.csc.itrust.action.ViewPersonnelAction.getPersonnel(java.lang.String)',0,'/**\r\n * Retrieves a PersonnelBean for the mid passed as a param\r\n *\r\n * @param input\r\n * 		the mid for which the PersonnelBean will be returned\r\n * @return PersonnelBean\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPersonnel(String input) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(input);\r\n        PersonnelBean personnel = personnelDAO.getPersonnel(mid);\r\n        if (personnel != null) {\r\n            return personnel;\r\n        }// $NON-NLS-1$\r\n         else\r\n            throw new iTrustException(Messages.getString(\"ViewPersonnelAction.1\"));\r\n        // $NON-NLS-1$\r\n\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(Messages.getString(\"ViewPersonnelAction.2\"));// $NON-NLS-1$\r\n\r\n    }\r\n}'),(717,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,193,'edu.ncsu.csc.itrust.action.ViewPersonnelAction',1241,'edu.ncsu.csc.itrust.action.ViewPersonnelAction.getPersonnel(java.lang.String)',1,'/**\r\n * Retrieves a PersonnelBean for the mid passed as a param\r\n *\r\n * @param input\r\n * 		the mid for which the PersonnelBean will be returned\r\n * @return PersonnelBean\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPersonnel(String input) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(input);\r\n        PersonnelBean personnel = personnelDAO.getPersonnel(mid);\r\n        if (personnel != null) {\r\n            return personnel;\r\n        }// $NON-NLS-1$\r\n         else\r\n            throw new iTrustException(Messages.getString(\"ViewPersonnelAction.1\"));\r\n        // $NON-NLS-1$\r\n\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(Messages.getString(\"ViewPersonnelAction.2\"));// $NON-NLS-1$\r\n\r\n    }\r\n}'),(718,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1247,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing prescription records.\r\n */\r\npublic ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(719,'long loggedInMID','long',0,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1247,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing prescription records.\r\n */\r\npublic ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(720,'long patientID','long',0,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1248,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPatient(long)',0,'/**\r\n * Gets a PatientBean from an MID\r\n *\r\n * @param patientID\r\n * 		MID of the patient\r\n * @return PatientBean for the MID given\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long patientID) throws iTrustException {\r\n    return patientDAO.getPatient(patientID);\r\n}'),(721,'edu.ncsu.csc.itrust.beans.PatientBean','edu.ncsu.csc.itrust.beans.PatientBean',266,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1248,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPatient(long)',1,'/**\r\n * Gets a PatientBean from an MID\r\n *\r\n * @param patientID\r\n * 		MID of the patient\r\n * @return PatientBean for the MID given\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long patientID) throws iTrustException {\r\n    return patientDAO.getPatient(patientID);\r\n}'),(722,'PrescriptionBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1249,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * 		item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}'),(723,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1249,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',1,'/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * 		item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}'),(724,'long patientID','long',0,195,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction',1250,'edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)',0,'/**\r\n * Returns all the prescriptions for a given patient\r\n *\r\n * @param patientID\r\n * 		patient in question\r\n * @return list of all the prescriptions for that patient\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(patientID);\r\n    if ((loggedInMID) == patientID) {\r\n        return patientDAO.getPrescriptions(patientID);\r\n    }\r\n    List<String> toList = new ArrayList<String>();\r\n    toList.add(patient.getEmail());\r\n    List<PatientBean> representatives = patientDAO.getRepresenting(patientID);\r\n    for (PatientBean representative : representatives) {\r\n        if ((loggedInMID) == (representative.getMID())) {\r\n            return patientDAO.getPrescriptions(patientID);\r\n        }\r\n        toList.add(representative.getEmail());\r\n    }\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\r\n    for (PersonnelBean dlhcp : dlhcps) {\r\n        if ((loggedInMID) == (dlhcp.getMID())) {\r\n            return patientDAO.getPrescriptions(patientID);\r\n        }\r\n        List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\r\n        for (PersonnelBean uap : uaps) {\r\n            if ((loggedInMID) == (uap.getMID())) {\r\n                return patientDAO.getPrescriptions(patientID);\r\n            }\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    email.setToList(toList);\r\n    email.setFrom(\"noreply@itrust.com\");// $NON-NLS-1$\r\n\r\n    email.setSubject(Messages.getString(\"ViewPrescriptionRecordsAction.1\"));// $NON-NLS-1$\r\n\r\n    email.setBody(Messages.getString(\"ViewPrescriptionRecordsAction.2\"));// $NON-NLS-1$\r\n\r\n    emailer.sendEmail(email);\r\n    return patientDAO.getPrescriptions(patientID);\r\n}'),(725,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,197,'edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction',1258,'edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the prescription renewals.\r\n */\r\npublic ViewPrescriptionRenewalNeedsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(726,'long loggedInMID','long',0,197,'edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction',1258,'edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the prescription renewals.\r\n */\r\npublic ViewPrescriptionRenewalNeedsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}'),(727,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1266,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewReceivingReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.hcpID = patientID;\r\n}'),(728,'long patientID','long',0,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1266,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewReceivingReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.hcpID = patientID;\r\n}'),(729,'int id','int',0,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1268,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getReferralByID(int)',0,'public ReferralBean getReferralByID(int id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(730,'edu.ncsu.csc.itrust.beans.ReferralBean','edu.ncsu.csc.itrust.beans.ReferralBean',274,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1268,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getReferralByID(int)',1,'public ReferralBean getReferralByID(int id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(731,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1271,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public boolean updateReferral(ReferralBean bean) throws DBException {\r\n    referralDAO.editReferral(bean);\r\n    return true;\r\n}'),(732,'long id','long',0,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1267,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getOVDate(long)',0,'public OfficeVisitBean getOVDate(long id) throws DBException {\r\n    return ovDAO.getOfficeVisit(id);\r\n}'),(733,'edu.ncsu.csc.itrust.beans.OfficeVisitBean','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,199,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction',1267,'edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getOVDate(long)',1,'public OfficeVisitBean getOVDate(long id) throws DBException {\r\n    return ovDAO.getOfficeVisit(id);\r\n}'),(734,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1279,'edu.ncsu.csc.itrust.action.ViewReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the report.\r\n */\r\npublic ViewReportAction(DAOFactory factory, long loggedInMID) {\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(735,'long loggedInMID','long',0,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1279,'edu.ncsu.csc.itrust.action.ViewReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the report.\r\n */\r\npublic ViewReportAction(DAOFactory factory, long loggedInMID) {\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(736,'long pid','long',0,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1281,'edu.ncsu.csc.itrust.action.ViewReportAction.getDiagnoses(long)',0,'/**\r\n * Get diagnosis list for the given patient\r\n *\r\n * @param pid\r\n * 		the patient of interest\r\n * @return list of diagnoses\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<DiagnosisBean> getDiagnoses(long pid) throws iTrustException {\r\n    return patientDAO.getDiagnoses(pid);\r\n}'),(737,'long pid','long',0,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1285,'edu.ncsu.csc.itrust.action.ViewReportAction.getProcedures(long)',0,'/**\r\n * Get procedure list for the given patient\r\n *\r\n * @param pid\r\n * 		the patient of interest\r\n * @return list of procedures\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<ProcedureBean> getProcedures(long pid) throws iTrustException {\r\n    return patientDAO.getProcedures(pid);\r\n}'),(738,'long pid','long',0,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1284,'edu.ncsu.csc.itrust.action.ViewReportAction.getPrescriptions(long)',0,'/**\r\n * Get prescription list for the given patient\r\n *\r\n * @param pid\r\n * 		the patient of interest\r\n * @return list of prescriptions\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<PrescriptionBean> getPrescriptions(long pid) throws iTrustException {\r\n    return patientDAO.getCurrentPrescriptions(pid);\r\n}'),(739,'long pid','long',0,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1280,'edu.ncsu.csc.itrust.action.ViewReportAction.getDeclaredHCPs(long)',0,'/**\r\n * Get declared HCPs list for the given patient\r\n *\r\n * @param pid\r\n * 		the patient of interest\r\n * @return list of declared HCPs\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic List<PersonnelBean> getDeclaredHCPs(long pid) throws iTrustException {\r\n    return patientDAO.getDeclaredHCPs(pid);\r\n}'),(740,'long mid','long',0,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1283,'edu.ncsu.csc.itrust.action.ViewReportAction.getPersonnel(long)',0,'/**\r\n * Returns a PersonnelBean when given an MID\r\n *\r\n * @param mid\r\n * 		HCP of interest\r\n * @return PersonnelBean of the given HCP\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}'),(741,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1283,'edu.ncsu.csc.itrust.action.ViewReportAction.getPersonnel(long)',1,'/**\r\n * Returns a PersonnelBean when given an MID\r\n *\r\n * @param mid\r\n * 		HCP of interest\r\n * @return PersonnelBean of the given HCP\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}'),(742,'long mid','long',0,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1282,'edu.ncsu.csc.itrust.action.ViewReportAction.getPatient(long)',0,'/**\r\n * Returns a PaitentBean when given an MID\r\n *\r\n * @param mid\r\n * 		patient of interest\r\n * @return PatientBean of the given HCP\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long mid) throws iTrustException {\r\n    return patientDAO.getPatient(mid);\r\n}'),(743,'edu.ncsu.csc.itrust.beans.PatientBean','edu.ncsu.csc.itrust.beans.PatientBean',266,201,'edu.ncsu.csc.itrust.action.ViewReportAction',1282,'edu.ncsu.csc.itrust.action.ViewReportAction.getPatient(long)',1,'/**\r\n * Returns a PaitentBean when given an MID\r\n *\r\n * @param mid\r\n * 		patient of interest\r\n * @return PatientBean of the given HCP\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long mid) throws iTrustException {\r\n    return patientDAO.getPatient(mid);\r\n}'),(744,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1294,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewSentReferralsAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    this.hcpid = hcpid;\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(745,'long hcpid','long',0,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1294,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ViewSentReferralsAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    this.hcpid = hcpid;\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}'),(746,'String field','java.lang.String',0,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1298,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Get all sent referrals sorted by the time they were created.\r\n *\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\n/* public List<VerboseReferralBean> getReferrals() throws DBException {\nreturn referralDAO.getSenderQuery(hcpid).query(\"timestamp\", SortDirection.DESCENDING);\n}\n */\r\n/**\r\n * Get all sent referrals sorted by the given field and in the given\r\n * direction.\r\n *\r\n * @param field\r\n * 		The name of the pseudo-field to sort by.\r\n * @param dir\r\n * 		The direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getSenderQuery(hcpid).query(field, dir);\r\n}'),(747,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1298,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Get all sent referrals sorted by the time they were created.\r\n *\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\n/* public List<VerboseReferralBean> getReferrals() throws DBException {\nreturn referralDAO.getSenderQuery(hcpid).query(\"timestamp\", SortDirection.DESCENDING);\n}\n */\r\n/**\r\n * Get all sent referrals sorted by the given field and in the given\r\n * direction.\r\n *\r\n * @param field\r\n * 		The name of the pseudo-field to sort by.\r\n * @param dir\r\n * 		The direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getSenderQuery(hcpid).query(field, dir);\r\n}'),(748,'long id','long',0,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1297,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferral(long)',0,'/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(749,'edu.ncsu.csc.itrust.beans.ReferralBean','edu.ncsu.csc.itrust.beans.ReferralBean',274,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1297,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferral(long)',1,'/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}'),(750,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1295,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void editReferral(ReferralBean bean) throws iTrustException {\nreferralDAO.editReferral(bean);\n}\n */\r\n/**\r\n * Delete an existing referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\n/* public void deleteReferral(ReferralBean bean) throws iTrustException {\nreferralDAO.removeReferral(bean.getId());\n}\n */\r\n/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}'),(751,'ReferralBean bean','edu.ncsu.csc.itrust.beans.ReferralBean',274,203,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction',1296,'edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * 		\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}'),(752,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,205,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction',1304,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving survey results.\r\n */\r\npublic ViewSurveyResultAction(DAOFactory factory, long loggedInMID) {\r\n    surveyResultDAO = factory.getSurveyResultDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new SurveySearchValidator();\r\n}'),(753,'long loggedInMID','long',0,205,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction',1304,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person retrieving survey results.\r\n */\r\npublic ViewSurveyResultAction(DAOFactory factory, long loggedInMID) {\r\n    surveyResultDAO = factory.getSurveyResultDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new SurveySearchValidator();\r\n}'),(754,'SurveyResultBean bean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,205,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction',1305,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForHospital(edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'/**\r\n * Retrieves survey results for a whole hospital.\r\n *\r\n * @param bean\r\n * 		The SurveyResultBean containing the survey result specs.\r\n * @return A java.util.List of Survey Results.\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForHospital(SurveyResultBean bean) throws FormValidationException, iTrustException {\r\n    return surveyResultDAO.getSurveyResultsForHospital(bean.getHCPhospital(), bean.getHCPspecialty());\r\n}'),(755,'SurveyResultBean bean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,205,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction',1306,'edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForZip(edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'/**\r\n * Retrieves survey results for a given zip code.\r\n *\r\n * @param bean\r\n * 		The SurveyResultBean containing the survey result specs.\r\n * @return A java.util.List of Survey Results.\r\n * @throws iTrustException\r\n * 		\r\n * @throws FormValidationException\r\n * 		\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForZip(SurveyResultBean bean) throws FormValidationException, iTrustException {\r\n    validator.validate(bean);\r\n    return surveyResultDAO.getSurveyResultsForZip(bean.getHCPzip(), bean.getHCPspecialty());\r\n}'),(756,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1312,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the visited HCPs.\r\n */\r\npublic ViewVisitedHCPsAction(DAOFactory factory, long loggedInMID) {\r\n    patientMID = loggedInMID;\r\n    docDAO = factory.getPersonnelDAO();\r\n    visitDAO = factory.getOfficeVisitDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    // visits = new ArrayList<HCPVisitBean>();\r\n    declareAction = new DeclareHCPAction(factory, loggedInMID);\r\n}'),(757,'long loggedInMID','long',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1312,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * 		The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * 		The MID of the person viewing the visited HCPs.\r\n */\r\npublic ViewVisitedHCPsAction(DAOFactory factory, long loggedInMID) {\r\n    patientMID = loggedInMID;\r\n    docDAO = factory.getPersonnelDAO();\r\n    visitDAO = factory.getOfficeVisitDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    // visits = new ArrayList<HCPVisitBean>();\r\n    declareAction = new DeclareHCPAction(factory, loggedInMID);\r\n}'),(758,'PersonnelBean pb','edu.ncsu.csc.itrust.beans.PersonnelBean',270,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1319,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)',0,'/**\r\n * Create an HCPVisitBean from a given PersonnelBean and office visit date.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean that will be visited.\r\n * @param visitDate\r\n * 		The date of the visit.  This may be the empty string.\r\n * @return The new HCPVisitBean.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate HCPVisitBean makeHCPVisitBean(PersonnelBean pb, String visitDate) throws DBException {\r\n    long hcpid = pb.getMID();\r\n    HCPVisitBean visitBean = new HCPVisitBean();\r\n    visitBean.setHCPMID(hcpid);\r\n    visitBean.setHCPName(pb.getFullName());\r\n    visitBean.setOVDate(visitDate);\r\n    visitBean.setHCPSpecialty(pb.getSpecialty());\r\n    visitBean.setHCPAddr((((((((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())) + \" \") + (pb.getCity())) + \", \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n    visitBean.setDesignated(patientDAO.checkDeclaredHCP(patientMID, hcpid));\r\n    return visitBean;\r\n}'),(759,'edu.ncsu.csc.itrust.beans.HCPVisitBean','edu.ncsu.csc.itrust.beans.HCPVisitBean',256,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1319,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)',1,'/**\r\n * Create an HCPVisitBean from a given PersonnelBean and office visit date.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean that will be visited.\r\n * @param visitDate\r\n * 		The date of the visit.  This may be the empty string.\r\n * @return The new HCPVisitBean.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate HCPVisitBean makeHCPVisitBean(PersonnelBean pb, String visitDate) throws DBException {\r\n    long hcpid = pb.getMID();\r\n    HCPVisitBean visitBean = new HCPVisitBean();\r\n    visitBean.setHCPMID(hcpid);\r\n    visitBean.setHCPName(pb.getFullName());\r\n    visitBean.setOVDate(visitDate);\r\n    visitBean.setHCPSpecialty(pb.getSpecialty());\r\n    visitBean.setHCPAddr((((((((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())) + \" \") + (pb.getCity())) + \", \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n    visitBean.setDesignated(patientDAO.checkDeclaredHCP(patientMID, hcpid));\r\n    return visitBean;\r\n}'),(760,'String visitDate','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1319,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)',0,'/**\r\n * Create an HCPVisitBean from a given PersonnelBean and office visit date.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean that will be visited.\r\n * @param visitDate\r\n * 		The date of the visit.  This may be the empty string.\r\n * @return The new HCPVisitBean.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate HCPVisitBean makeHCPVisitBean(PersonnelBean pb, String visitDate) throws DBException {\r\n    long hcpid = pb.getMID();\r\n    HCPVisitBean visitBean = new HCPVisitBean();\r\n    visitBean.setHCPMID(hcpid);\r\n    visitBean.setHCPName(pb.getFullName());\r\n    visitBean.setOVDate(visitDate);\r\n    visitBean.setHCPSpecialty(pb.getSpecialty());\r\n    visitBean.setHCPAddr((((((((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())) + \" \") + (pb.getCity())) + \", \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n    visitBean.setDesignated(patientDAO.checkDeclaredHCP(patientMID, hcpid));\r\n    return visitBean;\r\n}'),(761,'PersonnelBean pb','edu.ncsu.csc.itrust.beans.PersonnelBean',270,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1320,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.matchPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Checks to see if a PersonnelBean matches against a given set of\r\n * criteria.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean to check.\r\n * @param lastName\r\n * 		The last name to check against.  May be null or the empty string to ignore.\r\n * @param specialty\r\n * 		The specialty to check against.  May be null or the empty string to ignore.\r\n * @param zip\r\n * 		The zip code to check against.  May be null or the empty string to ignore.\r\n * @return true if the PersonnelBean matches all the given parameters, or false otherwise.\r\n */\r\nprivate boolean matchPersonnel(PersonnelBean pb, String lastName, String specialty, String zip) {\r\n    if (((lastName != null) && (!(lastName.equals(\"\")))) && (!(pb.getLastName().startsWith(lastName)))) {\r\n        return false;\r\n    }\r\n    if (((specialty != null) && (!(specialty.equals(\"\")))) && (!(specialty.equals(pb.getSpecialty())))) {\r\n        return false;\r\n    }\r\n    if (((zip != null) && (!(zip.equals(\"\")))) && (!(zip.equals(pb.getZip())))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(762,'String lastName','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1320,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.matchPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Checks to see if a PersonnelBean matches against a given set of\r\n * criteria.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean to check.\r\n * @param lastName\r\n * 		The last name to check against.  May be null or the empty string to ignore.\r\n * @param specialty\r\n * 		The specialty to check against.  May be null or the empty string to ignore.\r\n * @param zip\r\n * 		The zip code to check against.  May be null or the empty string to ignore.\r\n * @return true if the PersonnelBean matches all the given parameters, or false otherwise.\r\n */\r\nprivate boolean matchPersonnel(PersonnelBean pb, String lastName, String specialty, String zip) {\r\n    if (((lastName != null) && (!(lastName.equals(\"\")))) && (!(pb.getLastName().startsWith(lastName)))) {\r\n        return false;\r\n    }\r\n    if (((specialty != null) && (!(specialty.equals(\"\")))) && (!(specialty.equals(pb.getSpecialty())))) {\r\n        return false;\r\n    }\r\n    if (((zip != null) && (!(zip.equals(\"\")))) && (!(zip.equals(pb.getZip())))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(763,'String specialty','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1320,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.matchPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Checks to see if a PersonnelBean matches against a given set of\r\n * criteria.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean to check.\r\n * @param lastName\r\n * 		The last name to check against.  May be null or the empty string to ignore.\r\n * @param specialty\r\n * 		The specialty to check against.  May be null or the empty string to ignore.\r\n * @param zip\r\n * 		The zip code to check against.  May be null or the empty string to ignore.\r\n * @return true if the PersonnelBean matches all the given parameters, or false otherwise.\r\n */\r\nprivate boolean matchPersonnel(PersonnelBean pb, String lastName, String specialty, String zip) {\r\n    if (((lastName != null) && (!(lastName.equals(\"\")))) && (!(pb.getLastName().startsWith(lastName)))) {\r\n        return false;\r\n    }\r\n    if (((specialty != null) && (!(specialty.equals(\"\")))) && (!(specialty.equals(pb.getSpecialty())))) {\r\n        return false;\r\n    }\r\n    if (((zip != null) && (!(zip.equals(\"\")))) && (!(zip.equals(pb.getZip())))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(764,'String zip','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1320,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.matchPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Checks to see if a PersonnelBean matches against a given set of\r\n * criteria.\r\n *\r\n * @param pb\r\n * 		The PersonnelBean to check.\r\n * @param lastName\r\n * 		The last name to check against.  May be null or the empty string to ignore.\r\n * @param specialty\r\n * 		The specialty to check against.  May be null or the empty string to ignore.\r\n * @param zip\r\n * 		The zip code to check against.  May be null or the empty string to ignore.\r\n * @return true if the PersonnelBean matches all the given parameters, or false otherwise.\r\n */\r\nprivate boolean matchPersonnel(PersonnelBean pb, String lastName, String specialty, String zip) {\r\n    if (((lastName != null) && (!(lastName.equals(\"\")))) && (!(pb.getLastName().startsWith(lastName)))) {\r\n        return false;\r\n    }\r\n    if (((specialty != null) && (!(specialty.equals(\"\")))) && (!(specialty.equals(pb.getSpecialty())))) {\r\n        return false;\r\n    }\r\n    if (((zip != null) && (!(zip.equals(\"\")))) && (!(zip.equals(pb.getZip())))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}'),(765,'String lastName','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1316,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getAllVisitedHCPs(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Get a list of all HCPs visited and/or designated by by the current\r\n * user.  The list can optionally be filtered by the doctors last name,\r\n * specialty, or zip code.\r\n *\r\n * @param lastName\r\n * 		The last name (or a part of it) of the doctor to search\r\n * 		for, or null or an empty string to accept all doctors.\r\n * @param specialty\r\n * 		The specialty of the doctor to search for, or null or\r\n * 		an empty string to accept all doctors.\r\n * @param zip\r\n * 		The zip code of the doctor to search for, or null or an empty\r\n * 		string to accept all doctors.\r\n * @return A list of HCPVisitBeans where each represents one HCP that has\r\nbeen visited or has been designated.\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate List<HCPVisitBean> getAllVisitedHCPs(String lastName, String specialty, String zip) throws iTrustException {\r\n    // Visited HCPs in this case includes both HCPs visited *and* HCPs\r\n    // designated by the patient.  These two groups are retrieved in\r\n    // different ways, then combined.\r\n    List<HCPVisitBean> visits = new ArrayList<HCPVisitBean>();\r\n    try {\r\n        List<OfficeVisitBean> ovlist = visitDAO.getAllOfficeVisits(patientMID);\r\n        // get most recent office visit for each provider\r\n        LinkedHashMap<Long, OfficeVisitBean> mostRecentVisits = new LinkedHashMap<Long, OfficeVisitBean>();\r\n        for (OfficeVisitBean ov : ovlist) {\r\n            long id = ov.getHcpID();\r\n            if (!(mostRecentVisits.containsKey(id))) {\r\n                mostRecentVisits.put(id, ov);\r\n            } else {\r\n                OfficeVisitBean old = mostRecentVisits.get(id);\r\n                Date ovDate = ov.getVisitDate();\r\n                Date oldDate = old.getVisitDate();\r\n                if (oldDate.before(ovDate)) {\r\n                    mostRecentVisits.put(id, ov);\r\n                }\r\n            }\r\n        }\r\n        // Get visited HCPs.\r\n        for (OfficeVisitBean ov : mostRecentVisits.values()) {\r\n            long hcpid = ov.getHcpID();\r\n            PersonnelBean pb = docDAO.getPersonnel(hcpid);\r\n            if (matchPersonnel(pb, lastName, specialty, zip)) {\r\n                HCPVisitBean visitBean = makeHCPVisitBean(pb, mostRecentVisits.get(hcpid).getVisitDateStr());\r\n                visits.add(visitBean);\r\n            }\r\n        }\r\n        // Get all designated HCPs.  Because a designated HCP may have been\r\n        // visited, we will ensure the HCP is not already in the list.\r\n        List<PersonnelBean> dhcps = patientDAO.getDeclaredHCPs(patientMID);\r\n        next : for (PersonnelBean pb : dhcps) {\r\n            if (matchPersonnel(pb, lastName, specialty, zip)) {\r\n                long hcpid = pb.getMID();\r\n                // if HCP is already in visits list, skip here\r\n                for (HCPVisitBean hv : visits) {\r\n                    if ((hv.getHCPMID()) == hcpid) {\r\n                        continue next;\r\n                    }\r\n                }\r\n                String date = \"\";\r\n                HCPVisitBean visitBean = makeHCPVisitBean(pb, date);\r\n                visits.add(visitBean);\r\n            }\r\n        }\r\n    } catch (DBException dbe) {\r\n        throw new iTrustException(dbe.getMessage());\r\n    }\r\n    return visits;\r\n}'),(766,'String specialty','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1316,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getAllVisitedHCPs(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Get a list of all HCPs visited and/or designated by by the current\r\n * user.  The list can optionally be filtered by the doctors last name,\r\n * specialty, or zip code.\r\n *\r\n * @param lastName\r\n * 		The last name (or a part of it) of the doctor to search\r\n * 		for, or null or an empty string to accept all doctors.\r\n * @param specialty\r\n * 		The specialty of the doctor to search for, or null or\r\n * 		an empty string to accept all doctors.\r\n * @param zip\r\n * 		The zip code of the doctor to search for, or null or an empty\r\n * 		string to accept all doctors.\r\n * @return A list of HCPVisitBeans where each represents one HCP that has\r\nbeen visited or has been designated.\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate List<HCPVisitBean> getAllVisitedHCPs(String lastName, String specialty, String zip) throws iTrustException {\r\n    // Visited HCPs in this case includes both HCPs visited *and* HCPs\r\n    // designated by the patient.  These two groups are retrieved in\r\n    // different ways, then combined.\r\n    List<HCPVisitBean> visits = new ArrayList<HCPVisitBean>();\r\n    try {\r\n        List<OfficeVisitBean> ovlist = visitDAO.getAllOfficeVisits(patientMID);\r\n        // get most recent office visit for each provider\r\n        LinkedHashMap<Long, OfficeVisitBean> mostRecentVisits = new LinkedHashMap<Long, OfficeVisitBean>();\r\n        for (OfficeVisitBean ov : ovlist) {\r\n            long id = ov.getHcpID();\r\n            if (!(mostRecentVisits.containsKey(id))) {\r\n                mostRecentVisits.put(id, ov);\r\n            } else {\r\n                OfficeVisitBean old = mostRecentVisits.get(id);\r\n                Date ovDate = ov.getVisitDate();\r\n                Date oldDate = old.getVisitDate();\r\n                if (oldDate.before(ovDate)) {\r\n                    mostRecentVisits.put(id, ov);\r\n                }\r\n            }\r\n        }\r\n        // Get visited HCPs.\r\n        for (OfficeVisitBean ov : mostRecentVisits.values()) {\r\n            long hcpid = ov.getHcpID();\r\n            PersonnelBean pb = docDAO.getPersonnel(hcpid);\r\n            if (matchPersonnel(pb, lastName, specialty, zip)) {\r\n                HCPVisitBean visitBean = makeHCPVisitBean(pb, mostRecentVisits.get(hcpid).getVisitDateStr());\r\n                visits.add(visitBean);\r\n            }\r\n        }\r\n        // Get all designated HCPs.  Because a designated HCP may have been\r\n        // visited, we will ensure the HCP is not already in the list.\r\n        List<PersonnelBean> dhcps = patientDAO.getDeclaredHCPs(patientMID);\r\n        next : for (PersonnelBean pb : dhcps) {\r\n            if (matchPersonnel(pb, lastName, specialty, zip)) {\r\n                long hcpid = pb.getMID();\r\n                // if HCP is already in visits list, skip here\r\n                for (HCPVisitBean hv : visits) {\r\n                    if ((hv.getHCPMID()) == hcpid) {\r\n                        continue next;\r\n                    }\r\n                }\r\n                String date = \"\";\r\n                HCPVisitBean visitBean = makeHCPVisitBean(pb, date);\r\n                visits.add(visitBean);\r\n            }\r\n        }\r\n    } catch (DBException dbe) {\r\n        throw new iTrustException(dbe.getMessage());\r\n    }\r\n    return visits;\r\n}'),(767,'String zip','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1316,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getAllVisitedHCPs(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Get a list of all HCPs visited and/or designated by by the current\r\n * user.  The list can optionally be filtered by the doctors last name,\r\n * specialty, or zip code.\r\n *\r\n * @param lastName\r\n * 		The last name (or a part of it) of the doctor to search\r\n * 		for, or null or an empty string to accept all doctors.\r\n * @param specialty\r\n * 		The specialty of the doctor to search for, or null or\r\n * 		an empty string to accept all doctors.\r\n * @param zip\r\n * 		The zip code of the doctor to search for, or null or an empty\r\n * 		string to accept all doctors.\r\n * @return A list of HCPVisitBeans where each represents one HCP that has\r\nbeen visited or has been designated.\r\n * @throws iTrustException\r\n * 		\r\n */\r\nprivate List<HCPVisitBean> getAllVisitedHCPs(String lastName, String specialty, String zip) throws iTrustException {\r\n    // Visited HCPs in this case includes both HCPs visited *and* HCPs\r\n    // designated by the patient.  These two groups are retrieved in\r\n    // different ways, then combined.\r\n    List<HCPVisitBean> visits = new ArrayList<HCPVisitBean>();\r\n    try {\r\n        List<OfficeVisitBean> ovlist = visitDAO.getAllOfficeVisits(patientMID);\r\n        // get most recent office visit for each provider\r\n        LinkedHashMap<Long, OfficeVisitBean> mostRecentVisits = new LinkedHashMap<Long, OfficeVisitBean>();\r\n        for (OfficeVisitBean ov : ovlist) {\r\n            long id = ov.getHcpID();\r\n            if (!(mostRecentVisits.containsKey(id))) {\r\n                mostRecentVisits.put(id, ov);\r\n            } else {\r\n                OfficeVisitBean old = mostRecentVisits.get(id);\r\n                Date ovDate = ov.getVisitDate();\r\n                Date oldDate = old.getVisitDate();\r\n                if (oldDate.before(ovDate)) {\r\n                    mostRecentVisits.put(id, ov);\r\n                }\r\n            }\r\n        }\r\n        // Get visited HCPs.\r\n        for (OfficeVisitBean ov : mostRecentVisits.values()) {\r\n            long hcpid = ov.getHcpID();\r\n            PersonnelBean pb = docDAO.getPersonnel(hcpid);\r\n            if (matchPersonnel(pb, lastName, specialty, zip)) {\r\n                HCPVisitBean visitBean = makeHCPVisitBean(pb, mostRecentVisits.get(hcpid).getVisitDateStr());\r\n                visits.add(visitBean);\r\n            }\r\n        }\r\n        // Get all designated HCPs.  Because a designated HCP may have been\r\n        // visited, we will ensure the HCP is not already in the list.\r\n        List<PersonnelBean> dhcps = patientDAO.getDeclaredHCPs(patientMID);\r\n        next : for (PersonnelBean pb : dhcps) {\r\n            if (matchPersonnel(pb, lastName, specialty, zip)) {\r\n                long hcpid = pb.getMID();\r\n                // if HCP is already in visits list, skip here\r\n                for (HCPVisitBean hv : visits) {\r\n                    if ((hv.getHCPMID()) == hcpid) {\r\n                        continue next;\r\n                    }\r\n                }\r\n                String date = \"\";\r\n                HCPVisitBean visitBean = makeHCPVisitBean(pb, date);\r\n                visits.add(visitBean);\r\n            }\r\n        }\r\n    } catch (DBException dbe) {\r\n        throw new iTrustException(dbe.getMessage());\r\n    }\r\n    return visits;\r\n}'),(768,'String name','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1317,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getNamedHCP(java.lang.String)',0,'/**\r\n * Given an HCPs name, return the corresponding HCPVisitBean.\r\n *\r\n * @param name\r\n * 		\r\n * @return \r\n */\r\npublic HCPVisitBean getNamedHCP(String name) {\r\n    HCPVisitBean r = new HCPVisitBean();\r\n    for (HCPVisitBean bean : getVisitedHCPs()) {\r\n        if (name.equals(bean.getHCPName())) {\r\n            r = bean;\r\n            break;\r\n        }\r\n    }\r\n    return r;\r\n}'),(769,'edu.ncsu.csc.itrust.beans.HCPVisitBean','edu.ncsu.csc.itrust.beans.HCPVisitBean',256,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1317,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getNamedHCP(java.lang.String)',1,'/**\r\n * Given an HCPs name, return the corresponding HCPVisitBean.\r\n *\r\n * @param name\r\n * 		\r\n * @return \r\n */\r\npublic HCPVisitBean getNamedHCP(String name) {\r\n    HCPVisitBean r = new HCPVisitBean();\r\n    for (HCPVisitBean bean : getVisitedHCPs()) {\r\n        if (name.equals(bean.getHCPName())) {\r\n            r = bean;\r\n            break;\r\n        }\r\n    }\r\n    return r;\r\n}'),(770,'String name','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1321,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.undeclareHCP(java.lang.String)',0,'/**\r\n * Set a given HCP as undeclared.\r\n *\r\n * @param name\r\n * 		HCP to undeclare.\r\n * @return An empty string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String undeclareHCP(String name) throws iTrustException {\r\n    for (HCPVisitBean visit : getVisitedHCPs()) {\r\n        if (0 == (visit.getHCPName().toLowerCase().compareTo(name.toLowerCase()))) {\r\n            Long mid = Long.valueOf(visit.getHCPMID());\r\n            declareAction.undeclareHCP(mid.toString());\r\n            // }\r\n            visit.setDesignated(false);\r\n            /* if (0 == visit.getOVDate().compareTo(\"\")) {\n            remove = visit;\n            }\n             */\r\n        }\r\n    }\r\n    return \"\";\r\n}'),(771,'String name','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1314,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.declareHCP(java.lang.String)',0,'/**\r\n * Set a given HCP as declared\r\n *\r\n * @param name\r\n * 		HCP to declare\r\n * @return An empty string.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String declareHCP(String name) throws iTrustException {\r\n    boolean match = false;\r\n    for (HCPVisitBean visit : getVisitedHCPs()) {\r\n        if (0 == (visit.getHCPName().toLowerCase().compareTo(name.toLowerCase()))) {\r\n            match = true;\r\n            Long mid = Long.valueOf(visit.getHCPMID());\r\n            if (!(patientDAO.checkDeclaredHCP(patientMID, visit.getHCPMID()))) {\r\n                declareAction.declareHCP(mid.toString());\r\n            }\r\n            visit.setDesignated(true);\r\n        }\r\n    }\r\n    if (!match) {\r\n        List<PersonnelBean> doclist = docDAO.getAllPersonnel();\r\n        for (PersonnelBean ele : doclist) {\r\n            if (0 == (name.compareTo(ele.getFullName()))) {\r\n                HCPVisitBean visitBean;\r\n                visitBean = new HCPVisitBean();\r\n                visitBean.setHCPMID(ele.getMID());\r\n                visitBean.setHCPName(ele.getFullName());\r\n                visitBean.setOVDate(\"\");\r\n                visitBean.setHCPSpecialty(ele.getSpecialty());\r\n                visitBean.setHCPAddr((((((((((ele.getStreetAddress1()) + \" \") + (ele.getStreetAddress2())) + \" \") + (ele.getCity())) + \", \") + (ele.getState())) + \" \") + (ele.getZip())));\r\n                visitBean.setDesignated(true);\r\n                Long mid = Long.valueOf(ele.getMID());\r\n                if (!(patientDAO.checkDeclaredHCP(patientMID, mid))) {\r\n                    declareAction.declareHCP(mid.toString());\r\n                    // visits.add(visitBean);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return \"\";\r\n}'),(772,'long mid','long',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1313,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.checkDeclared(long)',0,'/**\r\n * Check to see if a given HCP is declared\r\n *\r\n * @param mid\r\n * 		HCP to check\r\n * @return true if the HCP is declared, otherwise false\r\n */\r\npublic boolean checkDeclared(long mid) throws DBException {\r\n    return patientDAO.checkDeclaredHCP(patientMID, mid);\r\n}'),(773,'String lastName','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1315,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.filterHCPList(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Filter the list of HCPs by last name, specialty, or zip code.\r\n *\r\n * @param doc\r\n * 		Filter by lastName.  May be null or the empty string to\r\n * 		ignore.\r\n * @param specialty\r\n * 		Filter by specialty.  May be null or the empty string\r\n * 		to ignore.\r\n * @param zip\r\n * 		Filter by zip.  May be null or the empty string to ignore.\r\n * @return Filtered list of HCPs.\r\n */\r\npublic List<HCPVisitBean> filterHCPList(String lastName, String specialty, String zip) {\r\n    List<HCPVisitBean> visits;\r\n    try {\r\n        visits = getAllVisitedHCPs(lastName, specialty, zip);\r\n    } catch (iTrustException ie) {\r\n        visits = new ArrayList<HCPVisitBean>();\r\n    }\r\n    return visits;\r\n}'),(774,'String specialty','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1315,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.filterHCPList(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Filter the list of HCPs by last name, specialty, or zip code.\r\n *\r\n * @param doc\r\n * 		Filter by lastName.  May be null or the empty string to\r\n * 		ignore.\r\n * @param specialty\r\n * 		Filter by specialty.  May be null or the empty string\r\n * 		to ignore.\r\n * @param zip\r\n * 		Filter by zip.  May be null or the empty string to ignore.\r\n * @return Filtered list of HCPs.\r\n */\r\npublic List<HCPVisitBean> filterHCPList(String lastName, String specialty, String zip) {\r\n    List<HCPVisitBean> visits;\r\n    try {\r\n        visits = getAllVisitedHCPs(lastName, specialty, zip);\r\n    } catch (iTrustException ie) {\r\n        visits = new ArrayList<HCPVisitBean>();\r\n    }\r\n    return visits;\r\n}'),(775,'String zip','java.lang.String',0,207,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction',1315,'edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.filterHCPList(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Filter the list of HCPs by last name, specialty, or zip code.\r\n *\r\n * @param doc\r\n * 		Filter by lastName.  May be null or the empty string to\r\n * 		ignore.\r\n * @param specialty\r\n * 		Filter by specialty.  May be null or the empty string\r\n * 		to ignore.\r\n * @param zip\r\n * 		Filter by zip.  May be null or the empty string to ignore.\r\n * @return Filtered list of HCPs.\r\n */\r\npublic List<HCPVisitBean> filterHCPList(String lastName, String specialty, String zip) {\r\n    List<HCPVisitBean> visits;\r\n    try {\r\n        visits = getAllVisitedHCPs(lastName, specialty, zip);\r\n    } catch (iTrustException ie) {\r\n        visits = new ArrayList<HCPVisitBean>();\r\n    }\r\n    return visits;\r\n}'),(776,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1336,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString, ovIDString);\r\n    this.hcpid = hcpid;\r\n}'),(777,'long hcpid','long',0,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1336,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString, ovIDString);\r\n    this.hcpid = hcpid;\r\n}'),(778,'String pidString','java.lang.String',0,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1336,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString, ovIDString);\r\n    this.hcpid = hcpid;\r\n}'),(779,'String ovIDString','java.lang.String',0,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1336,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @param ovIDString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString, ovIDString);\r\n    this.hcpid = hcpid;\r\n}'),(780,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1337,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * An office visit that is initially unsaved.\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hcpid = hcpid;\r\n}'),(781,'long hcpid','long',0,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1337,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * An office visit that is initially unsaved.\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hcpid = hcpid;\r\n}'),(782,'String pidString','java.lang.String',0,209,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction',1337,'edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)',0,'/**\r\n * An office visit that is initially unsaved.\r\n *\r\n * @param factory\r\n * 		\r\n * @param hcpid\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hcpid = hcpid;\r\n}'),(783,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1339,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A database access object factory for supplying a runtime context.\r\n * @param pidString\r\n * 		The patients MID as a String, to be passed to the super constructor (for PatientBaseAction)\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		If any of the supplied parameters is incorrect or there is a DB problem.\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = checkOfficeVisitID(ovIDString);\r\n}'),(784,'String pidString','java.lang.String',0,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1339,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A database access object factory for supplying a runtime context.\r\n * @param pidString\r\n * 		The patients MID as a String, to be passed to the super constructor (for PatientBaseAction)\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		If any of the supplied parameters is incorrect or there is a DB problem.\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = checkOfficeVisitID(ovIDString);\r\n}'),(785,'String ovIDString','java.lang.String',0,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1339,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A database access object factory for supplying a runtime context.\r\n * @param pidString\r\n * 		The patients MID as a String, to be passed to the super constructor (for PatientBaseAction)\r\n * @param ovIDString\r\n * 		The unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * 		If any of the supplied parameters is incorrect or there is a DB problem.\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = checkOfficeVisitID(ovIDString);\r\n}'),(786,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1340,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Constructs an action that is initially unsaved.  Like the three-argument\r\n * constructor except that the office visit id is a sentinel value and does\r\n * not represent a valid office visit.\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = OfficeVisitBaseAction.UNSAVED_VISIT_ID;\r\n}'),(787,'String pidString','java.lang.String',0,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1340,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * Constructs an action that is initially unsaved.  Like the three-argument\r\n * constructor except that the office visit id is a sentinel value and does\r\n * not represent a valid office visit.\r\n *\r\n * @param factory\r\n * 		\r\n * @param pidString\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = OfficeVisitBaseAction.UNSAVED_VISIT_ID;\r\n}'),(788,'String input','java.lang.String',0,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1341,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.checkOfficeVisitID(java.lang.String)',0,'/**\r\n * Asserts whether this unique office visit identifier both exists and is associated with the patient in\r\n * the database.\r\n *\r\n * @param input\r\n * 		The presumed identifier as a String.\r\n * @return The same identifier as a long of the existing office visit.\r\n * @throws iTrustException\r\n * 		If the visit does not exist or if there is a DB problem.\r\n */\r\nprivate long checkOfficeVisitID(String input) throws iTrustException {\r\n    try {\r\n        encode(input);\r\n        long ovID = Long.valueOf(input);\r\n        if (ovDAO.checkOfficeVisitExists(ovID, pid))\r\n            return ovID;\r\n        else\r\n            throw new iTrustException(((((\"Office Visit \" + ovID) + \" with Patient MID \") + (pid)) + \" does not exist\"));\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"Office Visit ID is not a number: \" + (e.getMessage())));\r\n    }\r\n}'),(789,'String input','java.lang.String',0,210,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction',1342,'edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.encode(java.lang.String)',0,'/**\r\n * Converts all characters of the input string to their HTML special characters equivalent representation.\r\n * Explicitly, the less than symbol becomes lt, the greater than symbol becomes gt and a newline feed\r\n * becomes br.\r\n *\r\n * @param input\r\n * 		The string to encode.\r\n * @return The encoded string.\r\n */\r\npublic String encode(String input) {\r\n    String str = input.replaceAll(\"<\", \"&lt;\");\r\n    str = str.replaceAll(\">\", \"&gt;\");\r\n    str = str.replaceAll(\"\n\", \"<br />\");\r\n    return str;\r\n}'),(790,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,211,'edu.ncsu.csc.itrust.action.base.PatientBaseAction',1346,'edu.ncsu.csc.itrust.action.base.PatientBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A factory to create a database access object.\r\n * @param pidString\r\n * 		The patients ID to associate with this action.\r\n * @throws iTrustException\r\n * 		If the patients ID is incorrect or there is a DB problem.\r\n */\r\npublic PatientBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPatientID(pidString);\r\n}'),(791,'String pidString','java.lang.String',0,211,'edu.ncsu.csc.itrust.action.base.PatientBaseAction',1346,'edu.ncsu.csc.itrust.action.base.PatientBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A factory to create a database access object.\r\n * @param pidString\r\n * 		The patients ID to associate with this action.\r\n * @throws iTrustException\r\n * 		If the patients ID is incorrect or there is a DB problem.\r\n */\r\npublic PatientBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPatientID(pidString);\r\n}'),(792,'String input','java.lang.String',0,211,'edu.ncsu.csc.itrust.action.base.PatientBaseAction',1347,'edu.ncsu.csc.itrust.action.base.PatientBaseAction.checkPatientID(java.lang.String)',0,'/**\r\n * Asserts whether the input is a valid, existing patients MID.\r\n *\r\n * @param input\r\n * 		The presumed MID\r\n * @return The existing patients ID as a long.\r\n * @throws iTrustException\r\n * 		If the patient does not exist or there is a DB Problem.\r\n */\r\nprivate long checkPatientID(String input) throws iTrustException {\r\n    try {\r\n        long pid = Long.valueOf(input);\r\n        if (factory.getPatientDAO().checkPatientExists(pid))\r\n            return pid;\r\n        else\r\n            throw new iTrustException(\"Patient does not exist\");\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"Patient ID is not a number: \" + (HtmlEncoder.encode(input))));\r\n    }\r\n}'),(793,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,212,'edu.ncsu.csc.itrust.action.base.PersonnelBaseAction',1350,'edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A factory to create a database access object.\r\n * @param pidString\r\n * 		The personnels ID to associate with this action.\r\n * @throws iTrustException\r\n * 		If the personnels ID is incorrect or there is a DB problem.\r\n */\r\npublic PersonnelBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPersonnelID(pidString);\r\n}'),(794,'String pidString','java.lang.String',0,212,'edu.ncsu.csc.itrust.action.base.PersonnelBaseAction',1350,'edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)',0,'/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * 		A factory to create a database access object.\r\n * @param pidString\r\n * 		The personnels ID to associate with this action.\r\n * @throws iTrustException\r\n * 		If the personnels ID is incorrect or there is a DB problem.\r\n */\r\npublic PersonnelBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPersonnelID(pidString);\r\n}'),(795,'String input','java.lang.String',0,212,'edu.ncsu.csc.itrust.action.base.PersonnelBaseAction',1351,'edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.checkPersonnelID(java.lang.String)',0,'/**\r\n * Asserts whether the input is a valid, existing personnels MID.\r\n *\r\n * @param input\r\n * 		The presumed MID\r\n * @return The existing personnels ID as a long.\r\n * @throws iTrustException\r\n * 		If the personnel does not exist or there is a DB Problem.\r\n */\r\nprivate long checkPersonnelID(String input) throws iTrustException {\r\n    try {\r\n        long pid = Long.valueOf(input);\r\n        if (factory.getPersonnelDAO().checkPersonnelExists(pid))\r\n            return pid;\r\n        else\r\n            throw new iTrustException(\"Personnel does not exist\");\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"Personnel ID is not a number: \" + (e.getMessage())));\r\n    }\r\n}'),(796,'String prescriber','java.lang.String',0,243,'edu.ncsu.csc.itrust.beans.AdverseEventBean',1495,'edu.ncsu.csc.itrust.beans.AdverseEventBean.setPrescriber(java.lang.String)',0,'public void setPrescriber(String prescriber) {\r\n    Prescriber = prescriber;\r\n}'),(797,'String status','java.lang.String',0,243,'edu.ncsu.csc.itrust.beans.AdverseEventBean',1496,'edu.ncsu.csc.itrust.beans.AdverseEventBean.setStatus(java.lang.String)',0,'public void setStatus(String status) {\r\n    this.status = status;\r\n}'),(798,'int id','int',0,243,'edu.ncsu.csc.itrust.beans.AdverseEventBean',1493,'edu.ncsu.csc.itrust.beans.AdverseEventBean.setId(int)',0,'/**\r\n *\r\n *\r\n * @param id\r\n * 		the id to set\r\n */\r\npublic void setId(int id) {\r\n    this.id = id;\r\n}'),(799,'String date','java.lang.String',0,243,'edu.ncsu.csc.itrust.beans.AdverseEventBean',1490,'edu.ncsu.csc.itrust.beans.AdverseEventBean.setDate(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param date\r\n * 		the date to set\r\n */\r\npublic void setDate(String date) {\r\n    this.date = date;\r\n}'),(800,'String code','java.lang.String',0,243,'edu.ncsu.csc.itrust.beans.AdverseEventBean',1489,'edu.ncsu.csc.itrust.beans.AdverseEventBean.setCode(java.lang.String)',0,'public void setCode(String code) {\r\n    this.code = code;\r\n}'),(801,'String mID','java.lang.String',0,243,'edu.ncsu.csc.itrust.beans.AdverseEventBean',1494,'edu.ncsu.csc.itrust.beans.AdverseEventBean.setMID(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param mID\r\n * 		the patients MID\r\n */\r\npublic void setMID(String mID) {\r\n    MID = mID;\r\n}'),(802,'String drug','java.lang.String',0,243,'edu.ncsu.csc.itrust.beans.AdverseEventBean',1492,'edu.ncsu.csc.itrust.beans.AdverseEventBean.setDrug(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param drug\r\n * 		sets the drug the event is being reported for\r\n */\r\npublic void setDrug(String drug) {\r\n    this.drug = drug;\r\n}'),(803,'String description','java.lang.String',0,243,'edu.ncsu.csc.itrust.beans.AdverseEventBean',1491,'edu.ncsu.csc.itrust.beans.AdverseEventBean.setDescription(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param description\r\n * 		the description to set\r\n */\r\npublic void setDescription(String description) {\r\n    this.description = description;\r\n}'),(804,'String description','java.lang.String',0,244,'edu.ncsu.csc.itrust.beans.AllergyBean',1504,'edu.ncsu.csc.itrust.beans.AllergyBean.setDescription(java.lang.String)',0,'public void setDescription(String description) {\r\n    this.description = description;\r\n}'),(805,'String ndcode','java.lang.String',0,244,'edu.ncsu.csc.itrust.beans.AllergyBean',1507,'edu.ncsu.csc.itrust.beans.AllergyBean.setNDCode(java.lang.String)',0,'public void setNDCode(String ndcode) {\r\n    this.ndcode = ndcode;\r\n}'),(806,'Date firstFound','java.util.Date',0,244,'edu.ncsu.csc.itrust.beans.AllergyBean',1505,'edu.ncsu.csc.itrust.beans.AllergyBean.setFirstFound(java.util.Date)',0,'public void setFirstFound(Date firstFound) {\r\n    if (null != firstFound)\r\n        this.firstFound = ((Date) (firstFound.clone()));\r\n    else\r\n        this.firstFound = null;\r\n\r\n}'),(807,'long id','long',0,244,'edu.ncsu.csc.itrust.beans.AllergyBean',1506,'edu.ncsu.csc.itrust.beans.AllergyBean.setId(long)',0,'public void setId(long id) {\r\n    this.id = id;\r\n}'),(808,'long patientID','long',0,244,'edu.ncsu.csc.itrust.beans.AllergyBean',1508,'edu.ncsu.csc.itrust.beans.AllergyBean.setPatientID(long)',0,'public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}'),(809,'int apptID','int',0,245,'edu.ncsu.csc.itrust.beans.ApptBean',1519,'edu.ncsu.csc.itrust.beans.ApptBean.setApptID(int)',0,'/**\r\n *\r\n *\r\n * @param apptID\r\n * 		the apptID to set\r\n */\r\npublic void setApptID(int apptID) {\r\n    this.apptID = apptID;\r\n}'),(810,'String apptType','java.lang.String',0,245,'edu.ncsu.csc.itrust.beans.ApptBean',1520,'edu.ncsu.csc.itrust.beans.ApptBean.setApptType(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param apptType\r\n * 		the apptType to set\r\n */\r\npublic void setApptType(String apptType) {\r\n    this.apptType = apptType;\r\n}'),(811,'long patient','long',0,245,'edu.ncsu.csc.itrust.beans.ApptBean',1524,'edu.ncsu.csc.itrust.beans.ApptBean.setPatient(long)',0,'/**\r\n *\r\n *\r\n * @param patient\r\n * 		the patient to set\r\n */\r\npublic void setPatient(long patient) {\r\n    this.patient = patient;\r\n}'),(812,'long hcp','long',0,245,'edu.ncsu.csc.itrust.beans.ApptBean',1523,'edu.ncsu.csc.itrust.beans.ApptBean.setHcp(long)',0,'/**\r\n *\r\n *\r\n * @param hcp\r\n * 		the hcp to set\r\n */\r\npublic void setHcp(long hcp) {\r\n    this.hcp = hcp;\r\n}'),(813,'Timestamp date','java.sql.Timestamp',0,245,'edu.ncsu.csc.itrust.beans.ApptBean',1522,'edu.ncsu.csc.itrust.beans.ApptBean.setDate(java.sql.Timestamp)',0,'/**\r\n *\r\n *\r\n * @param date\r\n * 		the date to set\r\n */\r\npublic void setDate(Timestamp date) {\r\n    this.date = date;\r\n}'),(814,'String comment','java.lang.String',0,245,'edu.ncsu.csc.itrust.beans.ApptBean',1521,'edu.ncsu.csc.itrust.beans.ApptBean.setComment(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param comment\r\n * 		the comment to set\r\n */\r\npublic void setComment(String comment) {\r\n    this.comment = comment;\r\n}'),(815,'Object other','java.lang.Object',0,245,'edu.ncsu.csc.itrust.beans.ApptBean',1511,'edu.ncsu.csc.itrust.beans.ApptBean.equals(java.lang.Object)',0,'/**\r\n * Returns true if both ids are equal. Probably needs more advance field by field checking.\r\n */\r\n@Override\r\npublic boolean equals(Object other) {\r\n    if ((this) == other) {\r\n        return true;\r\n    }\r\n    if (!(other instanceof ApptBean)) {\r\n        return false;\r\n    }\r\n    ApptBean otherAppt = ((ApptBean) (other));\r\n    return (otherAppt.getApptID()) == (getApptID());\r\n}'),(816,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,246,'edu.ncsu.csc.itrust.beans.ApptRequestBean',1531,'edu.ncsu.csc.itrust.beans.ApptRequestBean.setRequestedAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'/**\r\n *\r\n *\r\n * @param appt\r\n * 		\r\n */\r\npublic void setRequestedAppt(ApptBean appt) {\r\n    requestedAppt = appt;\r\n}'),(817,'boolean pending','boolean',0,246,'edu.ncsu.csc.itrust.beans.ApptRequestBean',1530,'edu.ncsu.csc.itrust.beans.ApptRequestBean.setPending(boolean)',0,'/**\r\n *\r\n *\r\n * @param pending\r\n * 		\r\n */\r\npublic void setPending(boolean pending) {\r\n    if (pending) {\r\n        status = null;\r\n    } else {\r\n        status = new Boolean(false);\r\n    }\r\n}'),(818,'boolean accepted','boolean',0,246,'edu.ncsu.csc.itrust.beans.ApptRequestBean',1529,'edu.ncsu.csc.itrust.beans.ApptRequestBean.setAccepted(boolean)',0,'/**\r\n * If setPending(false) has not been called before using this method, this method will have no effect.\r\n *\r\n * @param accepted\r\n * 		\r\n */\r\npublic void setAccepted(boolean accepted) {\r\n    if ((status) != null) {\r\n        status = Boolean.valueOf(accepted);\r\n    }\r\n}'),(819,'String name','java.lang.String',0,247,'edu.ncsu.csc.itrust.beans.ApptTypeBean',1533,'edu.ncsu.csc.itrust.beans.ApptTypeBean.-init-(java.lang.String,int)',0,'public ApptTypeBean(String name, int duration) {\r\n    this.name = name;\r\n    this.duration = duration;\r\n}'),(820,'int duration','int',0,247,'edu.ncsu.csc.itrust.beans.ApptTypeBean',1533,'edu.ncsu.csc.itrust.beans.ApptTypeBean.-init-(java.lang.String,int)',0,'public ApptTypeBean(String name, int duration) {\r\n    this.name = name;\r\n    this.duration = duration;\r\n}'),(821,'String name','java.lang.String',0,247,'edu.ncsu.csc.itrust.beans.ApptTypeBean',1537,'edu.ncsu.csc.itrust.beans.ApptTypeBean.setName(java.lang.String)',0,'public void setName(String name) {\r\n    this.name = name;\r\n}'),(822,'int duration','int',0,247,'edu.ncsu.csc.itrust.beans.ApptTypeBean',1536,'edu.ncsu.csc.itrust.beans.ApptTypeBean.setDuration(int)',0,'public void setDuration(int duration) {\r\n    this.duration = duration;\r\n}'),(823,'String code','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1539,'edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * This functionality will be moved elsewhere.\r\n */\r\npublic DiagnosisBean(String code, String description, String classification) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}'),(824,'String description','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1539,'edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * This functionality will be moved elsewhere.\r\n */\r\npublic DiagnosisBean(String code, String description, String classification) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}'),(825,'String classification','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1539,'edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * This functionality will be moved elsewhere.\r\n */\r\npublic DiagnosisBean(String code, String description, String classification) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}'),(826,'String code','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1540,'edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public DiagnosisBean(String code, String description, String classification, String URL) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    this.URL = URL;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}'),(827,'String description','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1540,'edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public DiagnosisBean(String code, String description, String classification, String URL) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    this.URL = URL;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}'),(828,'String classification','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1540,'edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public DiagnosisBean(String code, String description, String classification, String URL) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    this.URL = URL;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}'),(829,'String URL','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1540,'edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public DiagnosisBean(String code, String description, String classification, String URL) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    this.URL = URL;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}'),(830,'String code','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1549,'edu.ncsu.csc.itrust.beans.DiagnosisBean.setICDCode(java.lang.String)',0,'public void setICDCode(String code) {\r\n    icdCode = code;\r\n}'),(831,'String description','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1548,'edu.ncsu.csc.itrust.beans.DiagnosisBean.setDescription(java.lang.String)',0,'public void setDescription(String description) {\r\n    this.description = description;\r\n}'),(832,'long ovDiagnosisID','long',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1550,'edu.ncsu.csc.itrust.beans.DiagnosisBean.setOvDiagnosisID(long)',0,'public void setOvDiagnosisID(long ovDiagnosisID) {\r\n    this.ovDiagnosisID = ovDiagnosisID;\r\n}'),(833,'long vid','long',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1552,'edu.ncsu.csc.itrust.beans.DiagnosisBean.setVisitID(long)',0,'public void setVisitID(long vid) {\r\n    visitID = vid;\r\n}'),(834,'String newURL','java.lang.String',0,248,'edu.ncsu.csc.itrust.beans.DiagnosisBean',1551,'edu.ncsu.csc.itrust.beans.DiagnosisBean.setURL(java.lang.String)',0,'public void setURL(String newURL) {\r\n    URL = newURL;\r\n}'),(835,'String zipCode','java.lang.String',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1554,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long)',0,'/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code analyzed\r\n * @param zipStats\r\n * 		The count of diagnoses for the zip code\r\n * @param regionStats\r\n * 		The count of diagnoses for the region\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n}'),(836,'long zipStats','long',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1554,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long)',0,'/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code analyzed\r\n * @param zipStats\r\n * 		The count of diagnoses for the zip code\r\n * @param regionStats\r\n * 		The count of diagnoses for the region\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n}'),(837,'long regionStats','long',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1554,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long)',0,'/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code analyzed\r\n * @param zipStats\r\n * 		The count of diagnoses for the zip code\r\n * @param regionStats\r\n * 		The count of diagnoses for the region\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n}'),(838,'String zipCode','java.lang.String',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1555,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long,java.util.Date,java.util.Date)',0,'/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code analyzed\r\n * @param zipStats\r\n * 		The count of diagnoses for the zip code\r\n * @param regionStats\r\n * 		The count of diagnoses for the region\r\n * @param startDate\r\n * 		The beginning of the datas time period\r\n * @param endDate\r\n * 		The end of the datas time period\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats, Date startDate, Date endDate) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}'),(839,'long zipStats','long',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1555,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long,java.util.Date,java.util.Date)',0,'/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code analyzed\r\n * @param zipStats\r\n * 		The count of diagnoses for the zip code\r\n * @param regionStats\r\n * 		The count of diagnoses for the region\r\n * @param startDate\r\n * 		The beginning of the datas time period\r\n * @param endDate\r\n * 		The end of the datas time period\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats, Date startDate, Date endDate) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}'),(840,'long regionStats','long',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1555,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long,java.util.Date,java.util.Date)',0,'/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code analyzed\r\n * @param zipStats\r\n * 		The count of diagnoses for the zip code\r\n * @param regionStats\r\n * 		The count of diagnoses for the region\r\n * @param startDate\r\n * 		The beginning of the datas time period\r\n * @param endDate\r\n * 		The end of the datas time period\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats, Date startDate, Date endDate) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}'),(841,'Date startDate','java.util.Date',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1555,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long,java.util.Date,java.util.Date)',0,'/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code analyzed\r\n * @param zipStats\r\n * 		The count of diagnoses for the zip code\r\n * @param regionStats\r\n * 		The count of diagnoses for the region\r\n * @param startDate\r\n * 		The beginning of the datas time period\r\n * @param endDate\r\n * 		The end of the datas time period\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats, Date startDate, Date endDate) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}'),(842,'Date endDate','java.util.Date',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1555,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long,java.util.Date,java.util.Date)',0,'/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code analyzed\r\n * @param zipStats\r\n * 		The count of diagnoses for the zip code\r\n * @param regionStats\r\n * 		The count of diagnoses for the region\r\n * @param startDate\r\n * 		The beginning of the datas time period\r\n * @param endDate\r\n * 		The end of the datas time period\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats, Date startDate, Date endDate) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}'),(843,'String zipCode','java.lang.String',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1564,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setZipCode(java.lang.String)',0,'/**\r\n * Setter for Zip code\r\n *\r\n * @param zipCode\r\n * 		The zip code to be stored\r\n */\r\npublic void setZipCode(String zipCode) {\r\n    this.zipCode = zipCode;\r\n}'),(844,'long zipStats','long',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1565,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setZipStats(long)',0,'/**\r\n * Setter for Zip code count\r\n *\r\n * @param zipStats\r\n * 		The count of diagnoses to be stored\r\n */\r\npublic void setZipStats(long zipStats) {\r\n    this.zipStats = zipStats;\r\n}'),(845,'long regionStats','long',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1562,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setRegionStats(long)',0,'/**\r\n * Setter for Region count\r\n *\r\n * @param regionStats\r\n * 		The count of regional diagnoses to be stored\r\n */\r\npublic void setRegionStats(long regionStats) {\r\n    this.regionStats = regionStats;\r\n}'),(846,'Date startDate','java.util.Date',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1563,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setStartDate(java.util.Date)',0,'/**\r\n * Setter for Start Date\r\n *\r\n * @param startDate\r\n * 		The datas start date\r\n */\r\npublic void setStartDate(Date startDate) {\r\n    this.startDate = startDate;\r\n}'),(847,'Date endDate','java.util.Date',0,249,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',1561,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setEndDate(java.util.Date)',0,'/**\r\n * Setter for the End Date\r\n *\r\n * @param endDate\r\n * 		\r\n */\r\npublic void setEndDate(Date endDate) {\r\n    this.endDate = endDate;\r\n}'),(848,'String firstDrug','java.lang.String',0,250,'edu.ncsu.csc.itrust.beans.DrugInteractionBean',1571,'edu.ncsu.csc.itrust.beans.DrugInteractionBean.setFirstDrug(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param firstDrug\r\n * 		the firstDrug to set\r\n */\r\npublic void setFirstDrug(String firstDrug) {\r\n    this.firstDrug = firstDrug;\r\n}'),(849,'String secondDrug','java.lang.String',0,250,'edu.ncsu.csc.itrust.beans.DrugInteractionBean',1572,'edu.ncsu.csc.itrust.beans.DrugInteractionBean.setSecondDrug(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param secondDrug\r\n * 		the secondDrug to set\r\n */\r\npublic void setSecondDrug(String secondDrug) {\r\n    this.secondDrug = secondDrug;\r\n}'),(850,'String description','java.lang.String',0,250,'edu.ncsu.csc.itrust.beans.DrugInteractionBean',1570,'edu.ncsu.csc.itrust.beans.DrugInteractionBean.setDescription(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param description\r\n * 		the description to set\r\n */\r\npublic void setDescription(String description) {\r\n    this.description = description;\r\n}'),(851,'List<String> toList','java.util.List',0,251,'edu.ncsu.csc.itrust.beans.Email',1588,'edu.ncsu.csc.itrust.beans.Email.setToList(java.util.List)',0,'public void setToList(List<String> toList) {\r\n    this.toList = toList;\r\n}'),(852,'String from','java.lang.String',0,251,'edu.ncsu.csc.itrust.beans.Email',1585,'edu.ncsu.csc.itrust.beans.Email.setFrom(java.lang.String)',0,'public void setFrom(String from) {\r\n    this.from = from;\r\n}'),(853,'String subject','java.lang.String',0,251,'edu.ncsu.csc.itrust.beans.Email',1586,'edu.ncsu.csc.itrust.beans.Email.setSubject(java.lang.String)',0,'public void setSubject(String subject) {\r\n    this.subject = subject;\r\n}'),(854,'String body','java.lang.String',0,251,'edu.ncsu.csc.itrust.beans.Email',1584,'edu.ncsu.csc.itrust.beans.Email.setBody(java.lang.String)',0,'public void setBody(String body) {\r\n    this.body = body;\r\n}'),(855,'Timestamp timeAdded','java.sql.Timestamp',0,251,'edu.ncsu.csc.itrust.beans.Email',1587,'edu.ncsu.csc.itrust.beans.Email.setTimeAdded(java.sql.Timestamp)',0,'public void setTimeAdded(Timestamp timeAdded) {\r\n    this.timeAdded = timeAdded;\r\n}'),(856,'Object obj','java.lang.Object',0,251,'edu.ncsu.csc.itrust.beans.Email',1575,'edu.ncsu.csc.itrust.beans.Email.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((Email) (obj))));\r\n}'),(857,'Email other','edu.ncsu.csc.itrust.beans.Email',251,251,'edu.ncsu.csc.itrust.beans.Email',1574,'edu.ncsu.csc.itrust.beans.Email.equals(edu.ncsu.csc.itrust.beans.Email)',0,'private boolean equals(Email other) {\r\n    return (((from.equals(other.from)) && (subject.equals(other.subject))) && (body.equals(other.body))) && (listEquals(toList, other.toList));\r\n}'),(858,'List<String> toList','java.util.List',0,251,'edu.ncsu.csc.itrust.beans.Email',1583,'edu.ncsu.csc.itrust.beans.Email.listEquals(java.util.List,java.util.List)',0,'private boolean listEquals(List<String> toList, List<String> otherToList) {\r\n    if ((toList.size()) != (otherToList.size()))\r\n        return false;\r\n\r\n    for (int i = 0; i < (toList.size()); i++) {\r\n        if (!(toList.get(i).equals(otherToList.get(i))))\r\n            return false;\r\n\r\n    }\r\n    return true;\r\n}'),(859,'List<String> otherToList','java.util.List',0,251,'edu.ncsu.csc.itrust.beans.Email',1583,'edu.ncsu.csc.itrust.beans.Email.listEquals(java.util.List,java.util.List)',0,'private boolean listEquals(List<String> toList, List<String> otherToList) {\r\n    if ((toList.size()) != (otherToList.size()))\r\n        return false;\r\n\r\n    for (int i = 0; i < (toList.size()); i++) {\r\n        if (!(toList.get(i).equals(otherToList.get(i))))\r\n            return false;\r\n\r\n    }\r\n    return true;\r\n}'),(860,'String firstName','java.lang.String',0,252,'edu.ncsu.csc.itrust.beans.FamilyMemberBean',1596,'edu.ncsu.csc.itrust.beans.FamilyMemberBean.setFirstName(java.lang.String)',0,'public void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}'),(861,'String lastName','java.lang.String',0,252,'edu.ncsu.csc.itrust.beans.FamilyMemberBean',1597,'edu.ncsu.csc.itrust.beans.FamilyMemberBean.setLastName(java.lang.String)',0,'public void setLastName(String lastName) {\r\n    this.lastName = lastName;\r\n}'),(862,'long mid','long',0,252,'edu.ncsu.csc.itrust.beans.FamilyMemberBean',1598,'edu.ncsu.csc.itrust.beans.FamilyMemberBean.setMid(long)',0,'public void setMid(long mid) {\r\n    this.mid = mid;\r\n}'),(863,'String relation','java.lang.String',0,252,'edu.ncsu.csc.itrust.beans.FamilyMemberBean',1599,'edu.ncsu.csc.itrust.beans.FamilyMemberBean.setRelation(java.lang.String)',0,'public void setRelation(String relation) {\r\n    this.relation = relation;\r\n}'),(864,'List<PatientBean> patients','java.util.List',0,253,'edu.ncsu.csc.itrust.beans.GroupReportBean',1600,'edu.ncsu.csc.itrust.beans.GroupReportBean.-init-(java.util.List,java.util.List)',0,'/**\r\n *\r\n *\r\n * @param patients\r\n * 		\r\n * @param filters\r\n * 		\r\n */\r\npublic GroupReportBean(List<PatientBean> patients, List<ReportFilter> filters) {\r\n    this.patients = patients;\r\n    this.filters = filters;\r\n}'),(865,'List<ReportFilter> filters','java.util.List',0,253,'edu.ncsu.csc.itrust.beans.GroupReportBean',1600,'edu.ncsu.csc.itrust.beans.GroupReportBean.-init-(java.util.List,java.util.List)',0,'/**\r\n *\r\n *\r\n * @param patients\r\n * 		\r\n * @param filters\r\n * 		\r\n */\r\npublic GroupReportBean(List<PatientBean> patients, List<ReportFilter> filters) {\r\n    this.patients = patients;\r\n    this.filters = filters;\r\n}'),(866,'long hcp','long',0,254,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',1614,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setHCP(long)',0,'public void setHCP(long hcp) {\r\n    HCPID = hcp;\r\n}'),(867,'String name','java.lang.String',0,254,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',1615,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setHCPName(java.lang.String)',0,'public void setHCPName(String name) {\r\n    HCPname = name;\r\n}'),(868,'List<MedicationBean> medlist','java.util.List',0,254,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',1617,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setMedList(java.util.List)',0,'public void setMedList(List<MedicationBean> medlist) {\r\n    medList = medlist;\r\n}'),(869,'List<LabProcedureBean> lablist','java.util.List',0,254,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',1616,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setLabList(java.util.List)',0,'public void setLabList(List<LabProcedureBean> lablist) {\r\n    labList = lablist;\r\n}'),(870,'int sat','int',0,254,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',1619,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setVisitSat(int)',0,'public void setVisitSat(int sat) {\r\n    visitSat += sat;\r\n    (surveyCount)++;\r\n}'),(871,'int sat','int',0,254,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean',1618,'edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setTreatmentSat(int)',0,'public void setTreatmentSat(int sat) {\r\n    treatmentSat += sat;\r\n}'),(872,'boolean checked','boolean',0,255,'edu.ncsu.csc.itrust.beans.HCPLinkBean',1625,'edu.ncsu.csc.itrust.beans.HCPLinkBean.setChecked(boolean)',0,'public void setChecked(boolean checked) {\r\n    this.checked = checked;\r\n}'),(873,'String code','java.lang.String',0,255,'edu.ncsu.csc.itrust.beans.HCPLinkBean',1626,'edu.ncsu.csc.itrust.beans.HCPLinkBean.setCode(java.lang.String)',0,'public void setCode(String code) {\r\n    this.code = code;\r\n}'),(874,'long mID','long',0,255,'edu.ncsu.csc.itrust.beans.HCPLinkBean',1628,'edu.ncsu.csc.itrust.beans.HCPLinkBean.setPrescriberMID(long)',0,'/**\r\n *\r\n *\r\n * @param mID\r\n * 		the patients MID\r\n */\r\npublic void setPrescriberMID(long mID) {\r\n    prescriberMID = mID;\r\n}'),(875,'String drug','java.lang.String',0,255,'edu.ncsu.csc.itrust.beans.HCPLinkBean',1627,'edu.ncsu.csc.itrust.beans.HCPLinkBean.setDrug(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param drug\r\n * 		sets the drug the event is being reported for\r\n */\r\npublic void setDrug(String drug) {\r\n    this.drug = drug;\r\n}'),(876,'long mid','long',0,256,'edu.ncsu.csc.itrust.beans.HCPVisitBean',1640,'edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPMID(long)',0,'public void setHCPMID(long mid) {\r\n    hcpMID = mid;\r\n}'),(877,'String name','java.lang.String',0,256,'edu.ncsu.csc.itrust.beans.HCPVisitBean',1641,'edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPName(java.lang.String)',0,'public void setHCPName(String name) {\r\n    if (null != name) {\r\n        HCPName = name;\r\n    }\r\n}'),(878,'String specialty','java.lang.String',0,256,'edu.ncsu.csc.itrust.beans.HCPVisitBean',1642,'edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPSpecialty(java.lang.String)',0,'public void setHCPSpecialty(String specialty) {\r\n    if (null != specialty) {\r\n        HCPSpecialty = specialty;\r\n    } else {\r\n        HCPSpecialty = \"none\";\r\n    }\r\n}'),(879,'String addr','java.lang.String',0,256,'edu.ncsu.csc.itrust.beans.HCPVisitBean',1639,'edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPAddr(java.lang.String)',0,'public void setHCPAddr(String addr) {\r\n    if (null != addr) {\r\n        HCPAddr = addr;\r\n    }\r\n}'),(880,'String date','java.lang.String',0,256,'edu.ncsu.csc.itrust.beans.HCPVisitBean',1643,'edu.ncsu.csc.itrust.beans.HCPVisitBean.setOVDate(java.lang.String)',0,'public void setOVDate(String date) {\r\n    if (null != date) {\r\n        OVDate = date;\r\n    }\r\n}'),(881,'boolean val','boolean',0,256,'edu.ncsu.csc.itrust.beans.HCPVisitBean',1638,'edu.ncsu.csc.itrust.beans.HCPVisitBean.setDesignated(boolean)',0,'public void setDesignated(boolean val) {\r\n    designated = val;\r\n}'),(882,'Object obj','java.lang.Object',0,256,'edu.ncsu.csc.itrust.beans.HCPVisitBean',1630,'edu.ncsu.csc.itrust.beans.HCPVisitBean.equals(java.lang.Object)',0,'/* (non-Javadoc)\n@see java.lang.Object#equals(java.lang.Object)\n */\r\n@Override\r\npublic boolean equals(Object obj) {\r\n    if ((this) == obj)\r\n        return true;\r\n\r\n    if (obj == null)\r\n        return false;\r\n\r\n    if ((getClass()) != (obj.getClass()))\r\n        return false;\r\n\r\n    HCPVisitBean other = ((HCPVisitBean) (obj));\r\n    if ((HCPAddr) == null) {\r\n        if ((other.HCPAddr) != null)\r\n            return false;\r\n\r\n    } else\r\n        if (!(HCPAddr.equals(other.HCPAddr)))\r\n            return false;\r\n\r\n\r\n    if ((HCPName) == null) {\r\n        if ((other.HCPName) != null)\r\n            return false;\r\n\r\n    } else\r\n        if (!(HCPName.equals(other.HCPName)))\r\n            return false;\r\n\r\n\r\n    if ((HCPSpecialty) == null) {\r\n        if ((other.HCPSpecialty) != null)\r\n            return false;\r\n\r\n    } else\r\n        if (!(HCPSpecialty.equals(other.HCPSpecialty)))\r\n            return false;\r\n\r\n\r\n    if ((OVDate) == null) {\r\n        if ((other.OVDate) != null)\r\n            return false;\r\n\r\n    } else\r\n        if (!(OVDate.equals(other.OVDate)))\r\n            return false;\r\n\r\n\r\n    if ((designated) != (other.designated))\r\n        return false;\r\n\r\n    if ((hcpMID) != (other.hcpMID))\r\n        return false;\r\n\r\n    return true;\r\n}'),(883,'int bloodPressureD','int',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1663,'edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureD(int)',0,'public void setBloodPressureD(int bloodPressureD) {\r\n    this.bloodPressureD = bloodPressureD;\r\n}'),(884,'int bloodPressure','int',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1666,'edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureSystolic(int)',0,'public void setBloodPressureSystolic(int bloodPressure) {\r\n    this.bloodPressureN = bloodPressure;\r\n}'),(885,'int bloodPressure','int',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1664,'edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureDiastolic(int)',0,'public void setBloodPressureDiastolic(int bloodPressure) {\r\n    this.bloodPressureD = bloodPressure;\r\n}'),(886,'int bloodPressureN','int',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1665,'edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureN(int)',0,'public void setBloodPressureN(int bloodPressureN) {\r\n    this.bloodPressureN = bloodPressureN;\r\n}'),(887,'int cholesterolHDL','int',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1667,'edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolHDL(int)',0,'public void setCholesterolHDL(int cholesterolHDL) {\r\n    this.cholesterolHDL = cholesterolHDL;\r\n}'),(888,'int cholesterolLDL','int',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1668,'edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolLDL(int)',0,'public void setCholesterolLDL(int cholesterolLDL) {\r\n    this.cholesterolLDL = cholesterolLDL;\r\n}'),(889,'int cholesterolTri','int',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1669,'edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolTri(int)',0,'public void setCholesterolTri(int cholesterolTri) {\r\n    this.cholesterolTri = cholesterolTri;\r\n}'),(890,'Timestamp dateRecorded','java.sql.Timestamp',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1670,'edu.ncsu.csc.itrust.beans.HealthRecord.setDateRecorded(java.sql.Timestamp)',0,'public void setDateRecorded(Timestamp dateRecorded) {\r\n    this.dateRecorded = dateRecorded;\r\n}'),(891,'double height','double',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1671,'edu.ncsu.csc.itrust.beans.HealthRecord.setHeight(double)',0,'public void setHeight(double height) {\r\n    this.height = height;\r\n}'),(892,'long patientID','long',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1672,'edu.ncsu.csc.itrust.beans.HealthRecord.setPatientID(long)',0,'public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}'),(893,'long personnelID','long',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1673,'edu.ncsu.csc.itrust.beans.HealthRecord.setPersonnelID(long)',0,'public void setPersonnelID(long personnelID) {\r\n    this.personnelID = personnelID;\r\n}'),(894,'int smoker','int',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1674,'edu.ncsu.csc.itrust.beans.HealthRecord.setSmoker(int)',0,'public void setSmoker(int smoker) {\r\n    this.smokingStatus = smoker;\r\n    switch (smoker) {\r\n        case 1 :\r\n            this.isSmoker = true;\r\n            this.smokingStatusDesc = \"Current every day smoker\";\r\n            break;\r\n        case 2 :\r\n            this.isSmoker = true;\r\n            this.smokingStatusDesc = \"Current some day smoker\";\r\n            break;\r\n        case 3 :\r\n            this.isSmoker = false;\r\n            this.smokingStatusDesc = \"Former smoker\";\r\n            break;\r\n        case 4 :\r\n            this.isSmoker = false;\r\n            this.smokingStatusDesc = \"Never smoker\";\r\n            break;\r\n        case 5 :\r\n            this.isSmoker = true;\r\n            this.smokingStatusDesc = \"Smoker, current status unknown\";\r\n            break;\r\n        case 9 :\r\n            this.isSmoker = false;\r\n            this.smokingStatusDesc = \"Unknown if ever smoked\";\r\n            break;\r\n    }\r\n}'),(895,'double weight','double',0,257,'edu.ncsu.csc.itrust.beans.HealthRecord',1675,'edu.ncsu.csc.itrust.beans.HealthRecord.setWeight(double)',0,'public void setWeight(double weight) {\r\n    this.weight = weight;\r\n}'),(896,'String hospitalID','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1677,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String)',0,'public HospitalBean(String hospitalID) {\r\n    this.hospitalID = hospitalID;\r\n}'),(897,'String hospitalID','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1678,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String)',0,'public HospitalBean(String hospitalID, String hospitalName) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n}'),(898,'String hospitalName','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1678,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String)',0,'public HospitalBean(String hospitalID, String hospitalName) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n}'),(899,'String hospitalID','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1679,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public HospitalBean(String hospitalID, String hospitalName, String hospitalAddress, String hospitalCity, String hospitalState, String hospitalZip) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n    this.hospitalAddress = hospitalAddress;\r\n    this.hospitalCity = hospitalCity;\r\n    this.hospitalState = hospitalState;\r\n    this.hospitalZip = hospitalZip;\r\n}'),(900,'String hospitalName','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1679,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public HospitalBean(String hospitalID, String hospitalName, String hospitalAddress, String hospitalCity, String hospitalState, String hospitalZip) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n    this.hospitalAddress = hospitalAddress;\r\n    this.hospitalCity = hospitalCity;\r\n    this.hospitalState = hospitalState;\r\n    this.hospitalZip = hospitalZip;\r\n}'),(901,'String hospitalAddress','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1679,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public HospitalBean(String hospitalID, String hospitalName, String hospitalAddress, String hospitalCity, String hospitalState, String hospitalZip) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n    this.hospitalAddress = hospitalAddress;\r\n    this.hospitalCity = hospitalCity;\r\n    this.hospitalState = hospitalState;\r\n    this.hospitalZip = hospitalZip;\r\n}'),(902,'String hospitalCity','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1679,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public HospitalBean(String hospitalID, String hospitalName, String hospitalAddress, String hospitalCity, String hospitalState, String hospitalZip) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n    this.hospitalAddress = hospitalAddress;\r\n    this.hospitalCity = hospitalCity;\r\n    this.hospitalState = hospitalState;\r\n    this.hospitalZip = hospitalZip;\r\n}'),(903,'String hospitalState','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1679,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public HospitalBean(String hospitalID, String hospitalName, String hospitalAddress, String hospitalCity, String hospitalState, String hospitalZip) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n    this.hospitalAddress = hospitalAddress;\r\n    this.hospitalCity = hospitalCity;\r\n    this.hospitalState = hospitalState;\r\n    this.hospitalZip = hospitalZip;\r\n}'),(904,'String hospitalZip','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1679,'edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public HospitalBean(String hospitalID, String hospitalName, String hospitalAddress, String hospitalCity, String hospitalState, String hospitalZip) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n    this.hospitalAddress = hospitalAddress;\r\n    this.hospitalCity = hospitalCity;\r\n    this.hospitalState = hospitalState;\r\n    this.hospitalZip = hospitalZip;\r\n}'),(905,'String hospitalID','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1691,'edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalID(java.lang.String)',0,'public void setHospitalID(String hospitalID) {\r\n    this.hospitalID = hospitalID;\r\n}'),(906,'String hospitalName','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1692,'edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalName(java.lang.String)',0,'public void setHospitalName(String hospitalName) {\r\n    this.hospitalName = hospitalName;\r\n}'),(907,'String hospitalAddress','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1689,'edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalAddress(java.lang.String)',0,'public void setHospitalAddress(String hospitalAddress) {\r\n    this.hospitalAddress = hospitalAddress;\r\n}'),(908,'String hospitalCity','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1690,'edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalCity(java.lang.String)',0,'public void setHospitalCity(String hospitalCity) {\r\n    this.hospitalCity = hospitalCity;\r\n}'),(909,'String hospitalState','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1693,'edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalState(java.lang.String)',0,'public void setHospitalState(String hospitalState) {\r\n    this.hospitalState = hospitalState;\r\n}'),(910,'String hospitalZip','java.lang.String',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1694,'edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalZip(java.lang.String)',0,'public void setHospitalZip(String hospitalZip) {\r\n    this.hospitalZip = hospitalZip;\r\n}'),(911,'Object obj','java.lang.Object',0,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1681,'edu.ncsu.csc.itrust.beans.HospitalBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((HospitalBean) (obj))));\r\n}'),(912,'HospitalBean other','edu.ncsu.csc.itrust.beans.HospitalBean',258,258,'edu.ncsu.csc.itrust.beans.HospitalBean',1680,'edu.ncsu.csc.itrust.beans.HospitalBean.equals(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'private boolean equals(HospitalBean other) {\r\n    return (hospitalID.equals(other.hospitalID)) && (hospitalName.equals(other.hospitalName));\r\n}'),(913,'String aLabProcedureCode','java.lang.String',0,259,'edu.ncsu.csc.itrust.beans.LOINCbean',1705,'edu.ncsu.csc.itrust.beans.LOINCbean.setLabProcedureCode(java.lang.String)',0,'public void setLabProcedureCode(String aLabProcedureCode) {\r\n    labProcedureCode = aLabProcedureCode;\r\n}'),(914,'String aComponent','java.lang.String',0,259,'edu.ncsu.csc.itrust.beans.LOINCbean',1703,'edu.ncsu.csc.itrust.beans.LOINCbean.setComponent(java.lang.String)',0,'public void setComponent(String aComponent) {\r\n    component = aComponent;\r\n}'),(915,'String aKindOfProperty','java.lang.String',0,259,'edu.ncsu.csc.itrust.beans.LOINCbean',1704,'edu.ncsu.csc.itrust.beans.LOINCbean.setKindOfProperty(java.lang.String)',0,'public void setKindOfProperty(String aKindOfProperty) {\r\n    kindOfProperty = aKindOfProperty;\r\n}'),(916,'String aTimeAspect','java.lang.String',0,259,'edu.ncsu.csc.itrust.beans.LOINCbean',1709,'edu.ncsu.csc.itrust.beans.LOINCbean.setTimeAspect(java.lang.String)',0,'public void setTimeAspect(String aTimeAspect) {\r\n    timeAspect = aTimeAspect;\r\n}'),(917,'String aSystem','java.lang.String',0,259,'edu.ncsu.csc.itrust.beans.LOINCbean',1708,'edu.ncsu.csc.itrust.beans.LOINCbean.setSystem(java.lang.String)',0,'public void setSystem(String aSystem) {\r\n    system = aSystem;\r\n}'),(918,'String aScaleType','java.lang.String',0,259,'edu.ncsu.csc.itrust.beans.LOINCbean',1707,'edu.ncsu.csc.itrust.beans.LOINCbean.setScaleType(java.lang.String)',0,'public void setScaleType(String aScaleType) {\r\n    scaleType = aScaleType;\r\n}'),(919,'String aMethodType','java.lang.String',0,259,'edu.ncsu.csc.itrust.beans.LOINCbean',1706,'edu.ncsu.csc.itrust.beans.LOINCbean.setMethodType(java.lang.String)',0,'public void setMethodType(String aMethodType) {\r\n    methodType = aMethodType;\r\n}'),(920,'long pid','long',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1739,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setPid(long)',0,'/**\r\n * Unique 10-digit number that does not start with 9\r\n */\r\npublic void setPid(long pid) {\r\n    this.pid = pid;\r\n}'),(921,'long procedureID','long',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1741,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setProcedureID(long)',0,'/**\r\n * Unique identifier for a laboratory procedure of a patient\r\n */\r\npublic void setProcedureID(long procedureID) {\r\n    this.procedureID = procedureID;\r\n}'),(922,'String loinc','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1734,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setLoinc(java.lang.String)',0,'/**\r\n * Digits of the format nnnnn-n\r\n */\r\npublic void setLoinc(String loinc) {\r\n    this.loinc = loinc;\r\n}'),(923,'String status','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1744,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setStatus(java.lang.String)',0,'/**\r\n * One of (NOT YET RECEIVED, PENDING, COMPLETED)\r\n */\r\npublic void setStatus(String status) {\r\n    this.status = status;\r\n}'),(924,'String commentary','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1732,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setCommentary(java.lang.String)',0,'/**\r\n * Up to 500 alphanumeric characters\r\n */\r\npublic void setCommentary(String commentary) {\r\n    this.commentary = commentary;\r\n}'),(925,'String results','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1742,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setResults(java.lang.String)',0,'/**\r\n * Up to 500 alphanumeric characters\r\n */\r\npublic void setResults(String results) {\r\n    this.results = results;\r\n}'),(926,'String numericalResult','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1736,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setNumericalResult(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param numericalResult\r\n * 		the numericalResult to set\r\n */\r\npublic void setNumericalResult(String numericalResult) {\r\n    this.numericalResult = numericalResult;\r\n}'),(927,'String numericalResultUnit','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1737,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setNumericalResultUnit(java.lang.String)',0,'public void setNumericalResultUnit(String numericalResultUnit) {\r\n    this.numericalResultUnit = numericalResultUnit;\r\n}'),(928,'String upperBound','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1746,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setUpperBound(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param upperBound\r\n * 		the upperBound to set\r\n */\r\npublic void setUpperBound(String upperBound) {\r\n    this.upperBound = upperBound;\r\n}'),(929,'String lowerBound','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1735,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setLowerBound(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param lowerBound\r\n * 		the lowerBound to set\r\n */\r\npublic void setLowerBound(String lowerBound) {\r\n    this.lowerBound = lowerBound;\r\n}'),(930,'long ovID','long',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1738,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setOvID(long)',0,'/**\r\n * Office VisitID	Identifier that specifies the office visit in\r\n * which the laboratory procedure was ordered\r\n */\r\npublic void setOvID(long ovID) {\r\n    this.ovID = ovID;\r\n}'),(931,'Timestamp timestamp','java.sql.Timestamp',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1745,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setTimestamp(java.sql.Timestamp)',0,'public void setTimestamp(Timestamp timestamp) {\r\n    this.timestamp = timestamp;\r\n}'),(932,'String rights','java.lang.String',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1743,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setRights(java.lang.String)',0,'/**\r\n * permission granted by lhcp who ordered test:\r\n * \"ALLOWED\", \"RESTRICTED\"\r\n */\r\npublic void setRights(String rights) {\r\n    this.rights = rights;\r\n}'),(933,'long LTID','long',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1733,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setLTID(long)',0,'/**\r\n * This method sets the lab technicians ID\r\n *\r\n * @param lTID\r\n * 		\r\n */\r\npublic void setLTID(long LTID) {\r\n    this.LTID = LTID;\r\n}'),(934,'int priorityCode','int',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1740,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setPriorityCode(int)',0,'/**\r\n * Sets the priority of the lab procedure\r\n *\r\n * @param priorityCode\r\n * 		\r\n */\r\npublic void setPriorityCode(int priorityCode) {\r\n    this.priorityCode = priorityCode;\r\n}'),(935,'boolean viewedByPatient','boolean',0,260,'edu.ncsu.csc.itrust.beans.LabProcedureBean',1747,'edu.ncsu.csc.itrust.beans.LabProcedureBean.setViewedByPatient(boolean)',0,'/**\r\n * Sets whether or not a patient has viewed the lab procedure. Cannot be true until status is Completed\r\n *\r\n * @param viewedByPatient\r\n * 		\r\n */\r\npublic void setViewedByPatient(boolean viewedByPatient) {\r\n    if (status.equals(LabProcedureBean.Completed)) {\r\n        this.viewedByPatient = viewedByPatient;\r\n    }\r\n}'),(936,'String code','java.lang.String',0,261,'edu.ncsu.csc.itrust.beans.MedicationBean',1754,'edu.ncsu.csc.itrust.beans.MedicationBean.-init-(java.lang.String)',0,'public MedicationBean(String code) {\r\n    NDCode = code;\r\n}'),(937,'String code','java.lang.String',0,261,'edu.ncsu.csc.itrust.beans.MedicationBean',1755,'edu.ncsu.csc.itrust.beans.MedicationBean.-init-(java.lang.String,java.lang.String)',0,'public MedicationBean(String code, String description) {\r\n    NDCode = code;\r\n    this.description = description;\r\n}'),(938,'String description','java.lang.String',0,261,'edu.ncsu.csc.itrust.beans.MedicationBean',1755,'edu.ncsu.csc.itrust.beans.MedicationBean.-init-(java.lang.String,java.lang.String)',0,'public MedicationBean(String code, String description) {\r\n    NDCode = code;\r\n    this.description = description;\r\n}'),(939,'String code','java.lang.String',0,261,'edu.ncsu.csc.itrust.beans.MedicationBean',1763,'edu.ncsu.csc.itrust.beans.MedicationBean.setNDCode(java.lang.String)',0,'public void setNDCode(String code) {\r\n    NDCode = code;\r\n}'),(940,'String description','java.lang.String',0,261,'edu.ncsu.csc.itrust.beans.MedicationBean',1762,'edu.ncsu.csc.itrust.beans.MedicationBean.setDescription(java.lang.String)',0,'public void setDescription(String description) {\r\n    this.description = description;\r\n}'),(941,'Object other','java.lang.Object',0,261,'edu.ncsu.csc.itrust.beans.MedicationBean',1757,'edu.ncsu.csc.itrust.beans.MedicationBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object other) {\r\n    return ((other != null) && (this.getClass().equals(other.getClass()))) && (this.equals(((MedicationBean) (other))));\r\n}'),(942,'MedicationBean other','edu.ncsu.csc.itrust.beans.MedicationBean',261,261,'edu.ncsu.csc.itrust.beans.MedicationBean',1756,'edu.ncsu.csc.itrust.beans.MedicationBean.equals(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'private boolean equals(MedicationBean other) {\r\n    return (description.equals(other.description)) && (NDCode.equals(other.NDCode));\r\n}'),(943,'long to','long',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1782,'edu.ncsu.csc.itrust.beans.MessageBean.setTo(long)',0,'/**\r\n * Sets the MIDs of the recipients for this Message\r\n *\r\n * @param to\r\n * 		\r\n */\r\npublic void setTo(long to) {\r\n    this.to = to;\r\n}'),(944,'long id','long',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1776,'edu.ncsu.csc.itrust.beans.MessageBean.setMessageId(long)',0,'public void setMessageId(long id) {\r\n    this.id = id;\r\n}'),(945,'long parentMsgId','long',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1778,'edu.ncsu.csc.itrust.beans.MessageBean.setParentMessageId(long)',0,'public void setParentMessageId(long parentMsgId) {\r\n    this.parentMsgId = parentMsgId;\r\n}'),(946,'long from','long',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1775,'edu.ncsu.csc.itrust.beans.MessageBean.setFrom(long)',0,'/**\r\n * Sets the MID of the sender for this message\r\n *\r\n * @param from\r\n * 		\r\n */\r\npublic void setFrom(long from) {\r\n    this.from = from;\r\n}'),(947,'String subject','java.lang.String',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1781,'edu.ncsu.csc.itrust.beans.MessageBean.setSubject(java.lang.String)',0,'/**\r\n * Sets the subject of this message\r\n *\r\n * @param subject\r\n * 		\r\n */\r\npublic void setSubject(String subject) {\r\n    this.subject = subject;\r\n}'),(948,'String body','java.lang.String',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1774,'edu.ncsu.csc.itrust.beans.MessageBean.setBody(java.lang.String)',0,'/**\r\n * Sets the body of this message\r\n *\r\n * @param body\r\n * 		\r\n */\r\npublic void setBody(String body) {\r\n    this.body = body;\r\n}'),(949,'Timestamp timestamp','java.sql.Timestamp',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1780,'edu.ncsu.csc.itrust.beans.MessageBean.setSentDate(java.sql.Timestamp)',0,'/**\r\n * Sets the time for this message\r\n *\r\n * @param timestamp\r\n * 		\r\n */\r\npublic void setSentDate(Timestamp timestamp) {\r\n    this.timestamp = timestamp;\r\n}'),(950,'int read','int',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1779,'edu.ncsu.csc.itrust.beans.MessageBean.setRead(int)',0,'/**\r\n * Sets read for this message\r\n *\r\n * @param read\r\n * 		\r\n */\r\npublic void setRead(int read) {\r\n    this.read = read;\r\n}'),(951,'long originalMsgId','long',0,262,'edu.ncsu.csc.itrust.beans.MessageBean',1777,'edu.ncsu.csc.itrust.beans.MessageBean.setOriginalMessageId(long)',0,'public void setOriginalMessageId(long originalMsgId) {\r\n    // NEW\r\n    this.originalMsgId = originalMsgId;\r\n}'),(952,'long visitID','long',0,263,'edu.ncsu.csc.itrust.beans.OfficeVisitBean',1784,'edu.ncsu.csc.itrust.beans.OfficeVisitBean.-init-(long)',0,'/**\r\n * For use ONLY by DAOs\r\n * setters and getters method\r\n *\r\n * @param visitID\r\n * 		\r\n */\r\npublic OfficeVisitBean(long visitID) {\r\n    this.visitID = visitID;\r\n}'),(953,'long hcpID','long',0,263,'edu.ncsu.csc.itrust.beans.OfficeVisitBean',1795,'edu.ncsu.csc.itrust.beans.OfficeVisitBean.setHcpID(long)',0,'public void setHcpID(long hcpID) {\r\n    this.hcpID = hcpID;\r\n}'),(954,'String notes','java.lang.String',0,263,'edu.ncsu.csc.itrust.beans.OfficeVisitBean',1797,'edu.ncsu.csc.itrust.beans.OfficeVisitBean.setNotes(java.lang.String)',0,'public void setNotes(String notes) {\r\n    this.notes = notes;\r\n}'),(955,'long patientID','long',0,263,'edu.ncsu.csc.itrust.beans.OfficeVisitBean',1798,'edu.ncsu.csc.itrust.beans.OfficeVisitBean.setPatientID(long)',0,'public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}'),(956,'String visitDate','java.lang.String',0,263,'edu.ncsu.csc.itrust.beans.OfficeVisitBean',1799,'edu.ncsu.csc.itrust.beans.OfficeVisitBean.setVisitDateStr(java.lang.String)',0,'public void setVisitDateStr(String visitDate) {\r\n    this.visitDateStr = visitDate;\r\n}'),(957,'String hospitalID','java.lang.String',0,263,'edu.ncsu.csc.itrust.beans.OfficeVisitBean',1796,'edu.ncsu.csc.itrust.beans.OfficeVisitBean.setHospitalID(java.lang.String)',0,'public void setHospitalID(String hospitalID) {\r\n    this.hospitalID = hospitalID;\r\n}'),(958,'boolean isERIncident','boolean',0,263,'edu.ncsu.csc.itrust.beans.OfficeVisitBean',1794,'edu.ncsu.csc.itrust.beans.OfficeVisitBean.setERIncident(boolean)',0,'public void setERIncident(boolean isERIncident) {\r\n    this.isERIncident = isERIncident;\r\n}'),(959,'HashMap<TransactionType, Integer> totalCount','java.util.HashMap',0,264,'edu.ncsu.csc.itrust.beans.OperationalProfile',1813,'edu.ncsu.csc.itrust.beans.OperationalProfile.setTotalCount(java.util.HashMap)',0,'public void setTotalCount(HashMap<TransactionType, Integer> totalCount) {\r\n    this.totalCount = totalCount;\r\n}'),(960,'HashMap<TransactionType, Integer> personnelCount','java.util.HashMap',0,264,'edu.ncsu.csc.itrust.beans.OperationalProfile',1812,'edu.ncsu.csc.itrust.beans.OperationalProfile.setPersonnelCount(java.util.HashMap)',0,'public void setPersonnelCount(HashMap<TransactionType, Integer> personnelCount) {\r\n    this.personnelCount = personnelCount;\r\n}'),(961,'HashMap<TransactionType, Integer> patientCount','java.util.HashMap',0,264,'edu.ncsu.csc.itrust.beans.OperationalProfile',1811,'edu.ncsu.csc.itrust.beans.OperationalProfile.setPatientCount(java.util.HashMap)',0,'public void setPatientCount(HashMap<TransactionType, Integer> patientCount) {\r\n    this.patientCount = patientCount;\r\n}'),(962,'int numTransactions','int',0,264,'edu.ncsu.csc.itrust.beans.OperationalProfile',1810,'edu.ncsu.csc.itrust.beans.OperationalProfile.setNumTotalTransactions(int)',0,'public void setNumTotalTransactions(int numTransactions) {\r\n    this.numTotalTransactions = numTransactions;\r\n}'),(963,'int numPatientTransactions','int',0,264,'edu.ncsu.csc.itrust.beans.OperationalProfile',1808,'edu.ncsu.csc.itrust.beans.OperationalProfile.setNumPatientTransactions(int)',0,'public void setNumPatientTransactions(int numPatientTransactions) {\r\n    this.numPatientTransactions = numPatientTransactions;\r\n}'),(964,'int numPersonnelTransactions','int',0,264,'edu.ncsu.csc.itrust.beans.OperationalProfile',1809,'edu.ncsu.csc.itrust.beans.OperationalProfile.setNumPersonnelTransactions(int)',0,'public void setNumPersonnelTransactions(int numPersonnelTransactions) {\r\n    this.numPersonnelTransactions = numPersonnelTransactions;\r\n}'),(965,'String code','java.lang.String',0,265,'edu.ncsu.csc.itrust.beans.OverrideReasonBean',1815,'edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-(java.lang.String)',0,'public OverrideReasonBean(String code) {\r\n    reasonCode = code;\r\n}'),(966,'String code','java.lang.String',0,265,'edu.ncsu.csc.itrust.beans.OverrideReasonBean',1816,'edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-(java.lang.String,java.lang.String)',0,'public OverrideReasonBean(String code, String description) {\r\n    reasonCode = code;\r\n    this.description = description;\r\n}'),(967,'String description','java.lang.String',0,265,'edu.ncsu.csc.itrust.beans.OverrideReasonBean',1816,'edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-(java.lang.String,java.lang.String)',0,'public OverrideReasonBean(String code, String description) {\r\n    reasonCode = code;\r\n    this.description = description;\r\n}'),(968,'long id','long',0,265,'edu.ncsu.csc.itrust.beans.OverrideReasonBean',1826,'edu.ncsu.csc.itrust.beans.OverrideReasonBean.setPresID(long)',0,'public void setPresID(long id) {\r\n    this.presID = id;\r\n}'),(969,'long id','long',0,265,'edu.ncsu.csc.itrust.beans.OverrideReasonBean',1824,'edu.ncsu.csc.itrust.beans.OverrideReasonBean.setID(long)',0,'public void setID(long id) {\r\n    this.id = id;\r\n}'),(970,'String code','java.lang.String',0,265,'edu.ncsu.csc.itrust.beans.OverrideReasonBean',1825,'edu.ncsu.csc.itrust.beans.OverrideReasonBean.setORCode(java.lang.String)',0,'public void setORCode(String code) {\r\n    reasonCode = code;\r\n}'),(971,'String description','java.lang.String',0,265,'edu.ncsu.csc.itrust.beans.OverrideReasonBean',1823,'edu.ncsu.csc.itrust.beans.OverrideReasonBean.setDescription(java.lang.String)',0,'public void setDescription(String description) {\r\n    this.description = description;\r\n}'),(972,'Object other','java.lang.Object',0,265,'edu.ncsu.csc.itrust.beans.OverrideReasonBean',1817,'edu.ncsu.csc.itrust.beans.OverrideReasonBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object other) {\r\n    if ((other == null) || (!(this.getClass().equals(other.getClass()))))\r\n        return false;\r\n\r\n    OverrideReasonBean orb = ((OverrideReasonBean) (other));\r\n    return (((orb.description.equals(description)) && (orb.reasonCode.equals(reasonCode))) && ((orb.presID) == (presID))) && ((orb.id) == (id));\r\n}'),(973,'String bloodType','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1880,'edu.ncsu.csc.itrust.beans.PatientBean.setBloodTypeStr(java.lang.String)',0,'public void setBloodTypeStr(String bloodType) {\r\n    this.bloodType = BloodType.parse(bloodType);\r\n}'),(974,'BloodType bloodType','edu.ncsu.csc.itrust.enums.BloodType',479,266,'edu.ncsu.csc.itrust.beans.PatientBean',1879,'edu.ncsu.csc.itrust.beans.PatientBean.setBloodType(edu.ncsu.csc.itrust.enums.BloodType)',0,'public void setBloodType(BloodType bloodType) {\r\n    this.bloodType = bloodType;\r\n}'),(975,'String causeOfDeath','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1881,'edu.ncsu.csc.itrust.beans.PatientBean.setCauseOfDeath(java.lang.String)',0,'public void setCauseOfDeath(String causeOfDeath) {\r\n    this.causeOfDeath = causeOfDeath;\r\n}'),(976,'String city','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1882,'edu.ncsu.csc.itrust.beans.PatientBean.setCity(java.lang.String)',0,'public void setCity(String city) {\r\n    this.city = city;\r\n}'),(977,'String dateOfBirthStr','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1886,'edu.ncsu.csc.itrust.beans.PatientBean.setDateOfBirthStr(java.lang.String)',0,'public void setDateOfBirthStr(String dateOfBirthStr) {\r\n    this.dateOfBirthStr = dateOfBirthStr;\r\n}'),(978,'String dateOfDeathStr','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1888,'edu.ncsu.csc.itrust.beans.PatientBean.setDateOfDeathStr(java.lang.String)',0,'public void setDateOfDeathStr(String dateOfDeathStr) {\r\n    this.dateOfDeathStr = dateOfDeathStr;\r\n}'),(979,'String email','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1890,'edu.ncsu.csc.itrust.beans.PatientBean.setEmail(java.lang.String)',0,'public void setEmail(String email) {\r\n    this.email = email;\r\n}'),(980,'String emergencyName','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1891,'edu.ncsu.csc.itrust.beans.PatientBean.setEmergencyName(java.lang.String)',0,'public void setEmergencyName(String emergencyName) {\r\n    this.emergencyName = emergencyName;\r\n}'),(981,'String ethnicity','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1894,'edu.ncsu.csc.itrust.beans.PatientBean.setEthnicityStr(java.lang.String)',0,'public void setEthnicityStr(String ethnicity) {\r\n    this.ethnicity = Ethnicity.parse(ethnicity);\r\n}'),(982,'Ethnicity ethnicity','edu.ncsu.csc.itrust.enums.Ethnicity',481,266,'edu.ncsu.csc.itrust.beans.PatientBean',1893,'edu.ncsu.csc.itrust.beans.PatientBean.setEthnicity(edu.ncsu.csc.itrust.enums.Ethnicity)',0,'public void setEthnicity(Ethnicity ethnicity) {\r\n    this.ethnicity = ethnicity;\r\n}'),(983,'String fatherMID','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1895,'edu.ncsu.csc.itrust.beans.PatientBean.setFatherMID(java.lang.String)',0,'public void setFatherMID(String fatherMID) {\r\n    this.fatherMID = fatherMID;\r\n}'),(984,'String firstName','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1896,'edu.ncsu.csc.itrust.beans.PatientBean.setFirstName(java.lang.String)',0,'public void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}'),(985,'String gender','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1898,'edu.ncsu.csc.itrust.beans.PatientBean.setGenderStr(java.lang.String)',0,'public void setGenderStr(String gender) {\r\n    this.gender = Gender.parse(gender);\r\n}'),(986,'Gender gender','edu.ncsu.csc.itrust.enums.Gender',483,266,'edu.ncsu.csc.itrust.beans.PatientBean',1897,'edu.ncsu.csc.itrust.beans.PatientBean.setGender(edu.ncsu.csc.itrust.enums.Gender)',0,'public void setGender(Gender gender) {\r\n    this.gender = gender;\r\n}'),(987,'String icAddress1','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1899,'edu.ncsu.csc.itrust.beans.PatientBean.setIcAddress1(java.lang.String)',0,'public void setIcAddress1(String icAddress1) {\r\n    this.icAddress1 = icAddress1;\r\n}'),(988,'String icAddress2','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1900,'edu.ncsu.csc.itrust.beans.PatientBean.setIcAddress2(java.lang.String)',0,'public void setIcAddress2(String icAddress2) {\r\n    this.icAddress2 = icAddress2;\r\n}'),(989,'String icCity','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1901,'edu.ncsu.csc.itrust.beans.PatientBean.setIcCity(java.lang.String)',0,'public void setIcCity(String icCity) {\r\n    this.icCity = icCity;\r\n}'),(990,'String icID','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1902,'edu.ncsu.csc.itrust.beans.PatientBean.setIcID(java.lang.String)',0,'public void setIcID(String icID) {\r\n    this.icID = icID;\r\n}'),(991,'String creditCardType','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1885,'edu.ncsu.csc.itrust.beans.PatientBean.setCreditCardType(java.lang.String)',0,'public void setCreditCardType(String creditCardType) {\r\n    this.creditCardType = creditCardType;\r\n}'),(992,'String creditCardNumber','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1884,'edu.ncsu.csc.itrust.beans.PatientBean.setCreditCardNumber(java.lang.String)',0,'public void setCreditCardNumber(String creditCardNumber) {\r\n    this.creditCardNumber = creditCardNumber;\r\n}'),(993,'String icName','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1903,'edu.ncsu.csc.itrust.beans.PatientBean.setIcName(java.lang.String)',0,'public void setIcName(String icName) {\r\n    this.icName = icName;\r\n}'),(994,'String icZip','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1906,'edu.ncsu.csc.itrust.beans.PatientBean.setIcZip(java.lang.String)',0,'public void setIcZip(String icZip) {\r\n    this.icZip = icZip;\r\n}'),(995,'String icState','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1905,'edu.ncsu.csc.itrust.beans.PatientBean.setIcState(java.lang.String)',0,'public void setIcState(String icState) {\r\n    this.icState = icState;\r\n}'),(996,'String lastName','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1908,'edu.ncsu.csc.itrust.beans.PatientBean.setLastName(java.lang.String)',0,'public void setLastName(String lastName) {\r\n    this.lastName = lastName;\r\n}'),(997,'long mid','long',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1909,'edu.ncsu.csc.itrust.beans.PatientBean.setMID(long)',0,'public void setMID(long mid) {\r\n    MID = mid;\r\n}'),(998,'String motherMID','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1910,'edu.ncsu.csc.itrust.beans.PatientBean.setMotherMID(java.lang.String)',0,'public void setMotherMID(String motherMID) {\r\n    this.motherMID = motherMID;\r\n}'),(999,'String phone','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1912,'edu.ncsu.csc.itrust.beans.PatientBean.setPhone(java.lang.String)',0,'public void setPhone(String phone) {\r\n    this.phone = phone;\r\n}'),(1000,'String securityAnswer','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1914,'edu.ncsu.csc.itrust.beans.PatientBean.setSecurityAnswer(java.lang.String)',0,'public void setSecurityAnswer(String securityAnswer) {\r\n    this.securityAnswer = securityAnswer;\r\n}'),(1001,'String securityQuestion','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1915,'edu.ncsu.csc.itrust.beans.PatientBean.setSecurityQuestion(java.lang.String)',0,'public void setSecurityQuestion(String securityQuestion) {\r\n    this.securityQuestion = securityQuestion;\r\n}'),(1002,'String state','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1917,'edu.ncsu.csc.itrust.beans.PatientBean.setState(java.lang.String)',0,'public void setState(String state) {\r\n    this.state = state;\r\n}'),(1003,'String streetAddress1','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1918,'edu.ncsu.csc.itrust.beans.PatientBean.setStreetAddress1(java.lang.String)',0,'public void setStreetAddress1(String streetAddress1) {\r\n    this.streetAddress1 = streetAddress1;\r\n}'),(1004,'String streetAddress2','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1919,'edu.ncsu.csc.itrust.beans.PatientBean.setStreetAddress2(java.lang.String)',0,'public void setStreetAddress2(String streetAddress2) {\r\n    this.streetAddress2 = streetAddress2;\r\n}'),(1005,'String topicalNotes','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1920,'edu.ncsu.csc.itrust.beans.PatientBean.setTopicalNotes(java.lang.String)',0,'public void setTopicalNotes(String topicalNotes) {\r\n    this.topicalNotes = topicalNotes;\r\n}'),(1006,'String zip','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1921,'edu.ncsu.csc.itrust.beans.PatientBean.setZip(java.lang.String)',0,'public void setZip(String zip) {\r\n    this.zip = zip;\r\n}'),(1007,'String emergencyPhone','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1892,'edu.ncsu.csc.itrust.beans.PatientBean.setEmergencyPhone(java.lang.String)',0,'public void setEmergencyPhone(String emergencyPhone) {\r\n    this.emergencyPhone = emergencyPhone;\r\n}'),(1008,'String icPhone','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1904,'edu.ncsu.csc.itrust.beans.PatientBean.setIcPhone(java.lang.String)',0,'public void setIcPhone(String icPhone) {\r\n    this.icPhone = icPhone;\r\n}'),(1009,'String confirmPassword','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1883,'edu.ncsu.csc.itrust.beans.PatientBean.setConfirmPassword(java.lang.String)',0,'public void setConfirmPassword(String confirmPassword) {\r\n    this.confirmPassword = confirmPassword;\r\n}'),(1010,'String password','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1911,'edu.ncsu.csc.itrust.beans.PatientBean.setPassword(java.lang.String)',0,'public void setPassword(String password) {\r\n    this.password = password;\r\n}'),(1011,'String directionsToHome','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1889,'edu.ncsu.csc.itrust.beans.PatientBean.setDirectionsToHome(java.lang.String)',0,'public void setDirectionsToHome(String directionsToHome) {\r\n    this.directionsToHome = directionsToHome;\r\n}'),(1012,'String religion','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1913,'edu.ncsu.csc.itrust.beans.PatientBean.setReligion(java.lang.String)',0,'public void setReligion(String religion) {\r\n    this.religion = religion;\r\n}'),(1013,'String language','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1907,'edu.ncsu.csc.itrust.beans.PatientBean.setLanguage(java.lang.String)',0,'public void setLanguage(String language) {\r\n    this.language = language;\r\n}'),(1014,'String spiritualPractices','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1916,'edu.ncsu.csc.itrust.beans.PatientBean.setSpiritualPractices(java.lang.String)',0,'public void setSpiritualPractices(String spiritualPractices) {\r\n    this.spiritualPractices = spiritualPractices;\r\n}'),(1015,'String alternateName','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1878,'edu.ncsu.csc.itrust.beans.PatientBean.setAlternateName(java.lang.String)',0,'public void setAlternateName(String alternateName) {\r\n    this.alternateName = alternateName;\r\n}'),(1016,'String dateOfDeactivationStr','java.lang.String',0,266,'edu.ncsu.csc.itrust.beans.PatientBean',1887,'edu.ncsu.csc.itrust.beans.PatientBean.setDateOfDeactivationStr(java.lang.String)',0,'public void setDateOfDeactivationStr(String dateOfDeactivationStr) {\r\n    this.dateOfDeactivationStr = dateOfDeactivationStr;\r\n}'),(1017,'PatientBean o','edu.ncsu.csc.itrust.beans.PatientBean',266,266,'edu.ncsu.csc.itrust.beans.PatientBean',1828,'edu.ncsu.csc.itrust.beans.PatientBean.compareTo(edu.ncsu.csc.itrust.beans.PatientBean)',0,'public int compareTo(PatientBean o) {\r\n    return ((int) ((o.MID) - (this.MID)));\r\n}'),(1018,'String changeDate','java.lang.String',0,267,'edu.ncsu.csc.itrust.beans.PatientHistoryBean',1926,'edu.ncsu.csc.itrust.beans.PatientHistoryBean.setChangeDateStr(java.lang.String)',0,'public void setChangeDateStr(String changeDate) {\r\n    this.changeDateStr = changeDate;\r\n}'),(1019,'long mid','long',0,267,'edu.ncsu.csc.itrust.beans.PatientHistoryBean',1927,'edu.ncsu.csc.itrust.beans.PatientHistoryBean.setChangeMID(long)',0,'public void setChangeMID(long mid) {\r\n    this.changeMID = mid;\r\n}'),(1020,'long id','long',0,268,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean',1936,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setId(long)',0,'/**\r\n *\r\n *\r\n * @param id\r\n * 		the id to set\r\n */\r\npublic void setId(long id) {\r\n    this.id = id;\r\n}'),(1021,'long visitID','long',0,268,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean',1940,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setVisitID(long)',0,'/**\r\n *\r\n *\r\n * @param visitID\r\n * 		the visitID to set\r\n */\r\npublic void setVisitID(long visitID) {\r\n    this.visitID = visitID;\r\n}'),(1022,'String name','java.lang.String',0,268,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean',1938,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setName(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param name\r\n * 		the name to set\r\n */\r\npublic void setName(String name) {\r\n    this.name = name;\r\n}'),(1023,'String url','java.lang.String',0,268,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean',1939,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setUrl(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param url\r\n * 		the url to set\r\n */\r\npublic void setUrl(String url) {\r\n    this.url = url;\r\n}'),(1024,'String comment','java.lang.String',0,268,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean',1935,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setComment(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param comment\r\n * 		the comment to set\r\n */\r\npublic void setComment(String comment) {\r\n    this.comment = comment;\r\n}'),(1025,'Date modified','java.util.Date',0,268,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean',1937,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setModified(java.util.Date)',0,'/**\r\n *\r\n *\r\n * @param modified\r\n * 		the modified to set\r\n */\r\npublic void setModified(Date modified) {\r\n    this.modified = modified;\r\n}'),(1026,'String lastOVDate','java.lang.String',0,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1952,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDate(java.lang.String)',0,'public void setLastOVDate(String lastOVDate) {\r\n    LastOVDate = lastOVDate;\r\n}'),(1027,'String lastOVDateM','java.lang.String',0,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1954,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateM(java.lang.String)',0,'public void setLastOVDateM(String lastOVDateM) {\r\n    LastOVDateM = lastOVDateM;\r\n}'),(1028,'String lastOVDateD','java.lang.String',0,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1953,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateD(java.lang.String)',0,'public void setLastOVDateD(String lastOVDateD) {\r\n    LastOVDateD = lastOVDateD;\r\n}'),(1029,'String lastOVDateY','java.lang.String',0,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1955,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateY(java.lang.String)',0,'public void setLastOVDateY(String lastOVDateY) {\r\n    LastOVDateY = lastOVDateY;\r\n}'),(1030,'String patientName','java.lang.String',0,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1957,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setPatientName(java.lang.String)',0,'public void setPatientName(String patientName) {\r\n    PatientName = patientName;\r\n}'),(1031,'String address1','java.lang.String',0,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1950,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setAddress1(java.lang.String)',0,'public void setAddress1(String address1) {\r\n    Address1 = address1;\r\n}'),(1032,'String address2','java.lang.String',0,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1951,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setAddress2(java.lang.String)',0,'public void setAddress2(String address2) {\r\n    Address2 = address2;\r\n}'),(1033,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,269,'edu.ncsu.csc.itrust.beans.PatientVisitBean',1956,'edu.ncsu.csc.itrust.beans.PatientVisitBean.setPatient(edu.ncsu.csc.itrust.beans.PatientBean)',0,'public void setPatient(PatientBean patient) {\r\n    this.patient = patient;\r\n}'),(1034,'String email','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1983,'edu.ncsu.csc.itrust.beans.PersonnelBean.setEmail(java.lang.String)',0,'public void setEmail(String email) {\r\n    this.email = email;\r\n}'),(1035,'long amid','long',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1980,'edu.ncsu.csc.itrust.beans.PersonnelBean.setAMID(long)',0,'public void setAMID(long amid) {\r\n    AMID = amid;\r\n}'),(1036,'String city','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1981,'edu.ncsu.csc.itrust.beans.PersonnelBean.setCity(java.lang.String)',0,'public void setCity(String city) {\r\n    this.city = city;\r\n}'),(1037,'String confirmPassword','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1982,'edu.ncsu.csc.itrust.beans.PersonnelBean.setConfirmPassword(java.lang.String)',0,'public void setConfirmPassword(String confirmPassword) {\r\n    this.confirmPassword = confirmPassword;\r\n}'),(1038,'String firstName','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1984,'edu.ncsu.csc.itrust.beans.PersonnelBean.setFirstName(java.lang.String)',0,'public void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}'),(1039,'String lastName','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1985,'edu.ncsu.csc.itrust.beans.PersonnelBean.setLastName(java.lang.String)',0,'public void setLastName(String lastName) {\r\n    this.lastName = lastName;\r\n}'),(1040,'long mid','long',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1986,'edu.ncsu.csc.itrust.beans.PersonnelBean.setMID(long)',0,'public void setMID(long mid) {\r\n    MID = mid;\r\n}'),(1041,'String password','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1987,'edu.ncsu.csc.itrust.beans.PersonnelBean.setPassword(java.lang.String)',0,'public void setPassword(String password) {\r\n    this.password = password;\r\n}'),(1042,'String phone','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1988,'edu.ncsu.csc.itrust.beans.PersonnelBean.setPhone(java.lang.String)',0,'public void setPhone(String phone) {\r\n    this.phone = phone;\r\n}'),(1043,'String securityAnswer','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1991,'edu.ncsu.csc.itrust.beans.PersonnelBean.setSecurityAnswer(java.lang.String)',0,'public void setSecurityAnswer(String securityAnswer) {\r\n    this.securityAnswer = securityAnswer;\r\n}'),(1044,'String securityQuestion','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1992,'edu.ncsu.csc.itrust.beans.PersonnelBean.setSecurityQuestion(java.lang.String)',0,'public void setSecurityQuestion(String securityQuestion) {\r\n    this.securityQuestion = securityQuestion;\r\n}'),(1045,'String state','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1994,'edu.ncsu.csc.itrust.beans.PersonnelBean.setState(java.lang.String)',0,'public void setState(String state) {\r\n    this.state = state;\r\n}'),(1046,'String streetAddress1','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1995,'edu.ncsu.csc.itrust.beans.PersonnelBean.setStreetAddress1(java.lang.String)',0,'public void setStreetAddress1(String streetAddress1) {\r\n    this.streetAddress1 = streetAddress1;\r\n}'),(1047,'String streetAddress2','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1996,'edu.ncsu.csc.itrust.beans.PersonnelBean.setStreetAddress2(java.lang.String)',0,'public void setStreetAddress2(String streetAddress2) {\r\n    this.streetAddress2 = streetAddress2;\r\n}'),(1048,'String zip','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1997,'edu.ncsu.csc.itrust.beans.PersonnelBean.setZip(java.lang.String)',0,'public void setZip(String zip) {\r\n    this.zip = zip;\r\n}'),(1049,'String specialty','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1993,'edu.ncsu.csc.itrust.beans.PersonnelBean.setSpecialty(java.lang.String)',0,'public void setSpecialty(String specialty) {\r\n    this.specialty = specialty;\r\n}'),(1050,'List<PersonnelBean> list','java.util.List',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1966,'edu.ncsu.csc.itrust.beans.PersonnelBean.getIndexIn(java.util.List)',0,'/* public int compareTo(PersonnelBean other) {\nif (MID == other.getMID()) return 0;\nif (MID > other.getMID()) return 1;\nreturn -1;\n}\n */\r\npublic int getIndexIn(List<PersonnelBean> list) {\r\n    for (int i = 0; i < (list.size()); i++) {\r\n        if ((list.get(i).MID) == (this.MID))\r\n            return i;\r\n\r\n    }\r\n    return -1;\r\n}'),(1051,'String role','java.lang.String',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1990,'edu.ncsu.csc.itrust.beans.PersonnelBean.setRoleString(java.lang.String)',0,'public void setRoleString(String role) {\r\n    this.roleString = role;\r\n}'),(1052,'Role role','edu.ncsu.csc.itrust.enums.Role',486,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1989,'edu.ncsu.csc.itrust.beans.PersonnelBean.setRole(edu.ncsu.csc.itrust.enums.Role)',0,'public void setRole(Role role) {\r\n}'),(1053,'Object o','java.lang.Object',0,270,'edu.ncsu.csc.itrust.beans.PersonnelBean',1959,'edu.ncsu.csc.itrust.beans.PersonnelBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object o) {\r\n    return (this.MID) == (((PersonnelBean) (o)).MID);\r\n}'),(1054,'Object other','java.lang.Object',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2001,'edu.ncsu.csc.itrust.beans.PrescriptionBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object other) {\r\n    return ((other != null) && (this.getClass().equals(other.getClass()))) && (this.equals(((PrescriptionBean) (other))));\r\n}'),(1055,'PrescriptionBean other','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2000,'edu.ncsu.csc.itrust.beans.PrescriptionBean.equals(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n *\r\n *\r\n * @param other\r\n * 		\r\n * @return \r\n */\r\nprivate boolean equals(PrescriptionBean other) {\r\n    return (((((((medication) == (other.medication)) || (((medication) != null) && (medication.equals(other.medication)))) && ((visitID) == (other.visitID))) && (startDateStr.equals(other.startDateStr))) && (endDateStr.equals(other.endDateStr))) && ((dosage) == (other.dosage))) && (instructions.equals(other.instructions));\r\n}'),(1056,'int dosage','int',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2014,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setDosage(int)',0,'public void setDosage(int dosage) {\r\n    this.dosage = dosage;\r\n}'),(1057,'List<OverrideReasonBean> reasons','java.util.List',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2021,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setReasons(java.util.List)',0,'public void setReasons(List<OverrideReasonBean> reasons) {\r\n    this.reasons = reasons;\r\n}'),(1058,'OverrideReasonBean reason','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',1999,'edu.ncsu.csc.itrust.beans.PrescriptionBean.addReason(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'public void addReason(OverrideReasonBean reason) {\r\n    if ((reasons) == null) {\r\n        reasons = new ArrayList<OverrideReasonBean>();\r\n    }\r\n    reasons.add(reason);\r\n}'),(1059,'String endDate','java.lang.String',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2016,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setEndDateStr(java.lang.String)',0,'public void setEndDateStr(String endDate) {\r\n    this.endDateStr = endDate;\r\n}'),(1060,'Date endDate','java.util.Date',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2015,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setEndDate(java.util.Date)',0,'public void setEndDate(Date endDate) {\r\n    this.endDateStr = new SimpleDateFormat(\"MM/dd/yyyy\").format(endDate);\r\n}'),(1061,'String instruction','java.lang.String',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2018,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setInstructions(java.lang.String)',0,'public void setInstructions(String instruction) {\r\n    this.instructions = instruction;\r\n}'),(1062,'MedicationBean medication','edu.ncsu.csc.itrust.beans.MedicationBean',261,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2019,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setMedication(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'public void setMedication(MedicationBean medication) {\r\n    this.medication = medication;\r\n}'),(1063,'String startDate','java.lang.String',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2022,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setStartDateStr(java.lang.String)',0,'public void setStartDateStr(String startDate) {\r\n    this.startDateStr = startDate;\r\n}'),(1064,'long visitID','long',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2023,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setVisitID(long)',0,'public void setVisitID(long visitID) {\r\n    this.visitID = visitID;\r\n}'),(1065,'long id','long',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2017,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setId(long)',0,'public void setId(long id) {\r\n    this.id = id;\r\n}'),(1066,'String overrideReasonOther','java.lang.String',0,271,'edu.ncsu.csc.itrust.beans.PrescriptionBean',2020,'edu.ncsu.csc.itrust.beans.PrescriptionBean.setOverrideReasonOther(java.lang.String)',0,'public void setOverrideReasonOther(String overrideReasonOther) {\r\n    this.overrideReasonOther = overrideReasonOther;\r\n}'),(1067,'PrescriptionBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,272,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean',2028,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'public void setPrescription(PrescriptionBean prescription) {\r\n    this.prescription = prescription;\r\n}'),(1068,'OfficeVisitBean officeVisit','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,272,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean',2027,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setOfficeVisit(edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'public void setOfficeVisit(OfficeVisitBean officeVisit) {\r\n    this.officeVisit = officeVisit;\r\n}'),(1069,'String code','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2030,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String)',0,'public ProcedureBean(String code) {\r\n    CPTCode = code;\r\n}'),(1070,'String code','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2031,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n}'),(1071,'String description','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2031,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n}'),(1072,'String code','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2032,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description, String attribute) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n}'),(1073,'String description','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2032,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description, String attribute) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n}'),(1074,'String attribute','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2032,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description, String attribute) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n}'),(1075,'String code','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2033,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description, String attribute, String hcpid) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n    this.hcpid = hcpid;\r\n}'),(1076,'String description','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2033,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description, String attribute, String hcpid) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n    this.hcpid = hcpid;\r\n}'),(1077,'String attribute','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2033,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description, String attribute, String hcpid) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n    this.hcpid = hcpid;\r\n}'),(1078,'String hcpid','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2033,'edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'public ProcedureBean(String code, String description, String attribute, String hcpid) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n    this.hcpid = hcpid;\r\n}'),(1079,'long id','long',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2047,'edu.ncsu.csc.itrust.beans.ProcedureBean.setID(long)',0,'public void setID(long id) {\r\n    this.ovProcedureID = id;\r\n}'),(1080,'String code','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2043,'edu.ncsu.csc.itrust.beans.ProcedureBean.setCPTCode(java.lang.String)',0,'public void setCPTCode(String code) {\r\n    CPTCode = code;\r\n}'),(1081,'long visitID','long',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2049,'edu.ncsu.csc.itrust.beans.ProcedureBean.setVisitID(long)',0,'public void setVisitID(long visitID) {\r\n    this.visitID = visitID;\r\n}'),(1082,'String description','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2045,'edu.ncsu.csc.itrust.beans.ProcedureBean.setDescription(java.lang.String)',0,'public void setDescription(String description) {\r\n    this.description = description;\r\n}'),(1083,'String hcpid','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2046,'edu.ncsu.csc.itrust.beans.ProcedureBean.setHcpid(java.lang.String)',0,'public void setHcpid(String hcpid) {\r\n    this.hcpid = hcpid;\r\n}'),(1084,'String attrib','java.lang.String',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2042,'edu.ncsu.csc.itrust.beans.ProcedureBean.setAttribute(java.lang.String)',0,'/**\r\n * Sets the CPT attribute, used to determine if this is an immunization\r\n *\r\n * @param String\r\n * 		\r\n */\r\npublic void setAttribute(String attrib) {\r\n    attribute = attrib;\r\n}'),(1085,'long ovProcedureID','long',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2048,'edu.ncsu.csc.itrust.beans.ProcedureBean.setOvProcedureID(long)',0,'public void setOvProcedureID(long ovProcedureID) {\r\n    this.ovProcedureID = ovProcedureID;\r\n}'),(1086,'Date d','java.sql.Date',0,273,'edu.ncsu.csc.itrust.beans.ProcedureBean',2044,'edu.ncsu.csc.itrust.beans.ProcedureBean.setDate(java.sql.Date)',0,'public void setDate(Date d) {\r\n    date = d;\r\n}'),(1087,'Object other','java.lang.Object',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2052,'edu.ncsu.csc.itrust.beans.ReferralBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object other) {\r\n    return ((other != null) && (this.getClass().equals(other.getClass()))) && (this.equals(((ReferralBean) (other))));\r\n}'),(1088,'ReferralBean other','edu.ncsu.csc.itrust.beans.ReferralBean',274,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2051,'edu.ncsu.csc.itrust.beans.ReferralBean.equals(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'private boolean equals(ReferralBean other) {\r\n    return ((((((((id) == (other.id)) && ((senderID) == (other.senderID))) && ((receiverID) == (other.receiverID))) && ((ovid) == (other.ovid))) && ((viewedByPatient) == (other.viewedByPatient))) && ((viewedByHCP) == (other.viewedByHCP))) && (timeStamp.equals(other.timeStamp))) && (referralDetails.equals(other.referralDetails));\r\n}'),(1089,'long id','long',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2064,'edu.ncsu.csc.itrust.beans.ReferralBean.setId(long)',0,'public void setId(long id) {\r\n    this.id = id;\r\n}'),(1090,'long senderID','long',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2070,'edu.ncsu.csc.itrust.beans.ReferralBean.setSenderID(long)',0,'public void setSenderID(long senderID) {\r\n    this.senderID = senderID;\r\n}'),(1091,'long receiverID','long',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2068,'edu.ncsu.csc.itrust.beans.ReferralBean.setReceiverID(long)',0,'public void setReceiverID(long receiverID) {\r\n    this.receiverID = receiverID;\r\n}'),(1092,'String referralDetails','java.lang.String',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2069,'edu.ncsu.csc.itrust.beans.ReferralBean.setReferralDetails(java.lang.String)',0,'public void setReferralDetails(String referralDetails) {\r\n    this.referralDetails = referralDetails;\r\n}'),(1093,'long patientID','long',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2066,'edu.ncsu.csc.itrust.beans.ReferralBean.setPatientID(long)',0,'public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}'),(1094,'long ovid','long',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2065,'edu.ncsu.csc.itrust.beans.ReferralBean.setOvid(long)',0,'public void setOvid(long ovid) {\r\n    this.ovid = ovid;\r\n}'),(1095,'boolean viewedByPatient','boolean',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2073,'edu.ncsu.csc.itrust.beans.ReferralBean.setViewedByPatient(boolean)',0,'public void setViewedByPatient(boolean viewedByPatient) {\r\n    this.viewedByPatient = viewedByPatient;\r\n}'),(1096,'boolean viewedByHCP','boolean',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2072,'edu.ncsu.csc.itrust.beans.ReferralBean.setViewedByHCP(boolean)',0,'public void setViewedByHCP(boolean viewedByHCP) {\r\n    this.viewedByHCP = viewedByHCP;\r\n}'),(1097,'String timeStamp','java.lang.String',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2071,'edu.ncsu.csc.itrust.beans.ReferralBean.setTimeStamp(java.lang.String)',0,'public void setTimeStamp(String timeStamp) {\r\n    this.timeStamp = timeStamp;\r\n}'),(1098,'int priority','int',0,274,'edu.ncsu.csc.itrust.beans.ReferralBean',2067,'edu.ncsu.csc.itrust.beans.ReferralBean.setPriority(int)',0,'public void setPriority(int priority) {\r\n    this.priority = priority;\r\n}'),(1099,'long patientMID','long',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2075,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.-init-(long)',0,'/**\r\n * Constructor with loggedInMID parameter\r\n */\r\npublic RemoteMonitoringDataBean(long patientMID) {\r\n    this.patientMID = patientMID;\r\n}'),(1100,'long reporterMID','long',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2091,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setReporterMID(long)',0,'public void setReporterMID(long reporterMID) {\r\n    this.reporterMID = reporterMID;\r\n}'),(1101,'long patientMID','long',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2089,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setLoggedInMID(long)',0,'public void setLoggedInMID(long patientMID) {\r\n    this.patientMID = patientMID;\r\n}'),(1102,'Timestamp time','java.sql.Timestamp',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2094,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setTime(java.sql.Timestamp)',0,'public void setTime(Timestamp time) {\r\n    this.time = time;\r\n}'),(1103,'int systolicBloodPressure','int',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2093,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setSystolicBloodPressure(int)',0,'public void setSystolicBloodPressure(int systolicBloodPressure) {\r\n    this.systolicBloodPressure = systolicBloodPressure;\r\n}'),(1104,'int diastolicBloodPressure','int',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2086,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setDiastolicBloodPressure(int)',0,'public void setDiastolicBloodPressure(int diastolicBloodPressure) {\r\n    this.diastolicBloodPressure = diastolicBloodPressure;\r\n}'),(1105,'int glucoseLevel','int',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2087,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setGlucoseLevel(int)',0,'public void setGlucoseLevel(int glucoseLevel) {\r\n    this.glucoseLevel = glucoseLevel;\r\n}'),(1106,'float height','float',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2088,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setHeight(float)',0,'public void setHeight(float height) {\r\n    this.height = height;\r\n}'),(1107,'float weight','float',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2095,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setWeight(float)',0,'public void setWeight(float weight) {\r\n    this.weight = weight;\r\n}'),(1108,'int pedometerReading','int',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2090,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setPedometerReading(int)',0,'public void setPedometerReading(int pedometerReading) {\r\n    this.pedometerReading = pedometerReading;\r\n}'),(1109,'String reporterRole','java.lang.String',0,275,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',2092,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setReporterRole(java.lang.String)',0,'public void setReporterRole(String reporterRole) {\r\n    this.reporterRole = reporterRole;\r\n}'),(1110,'long iD','long',0,276,'edu.ncsu.csc.itrust.beans.ReportRequestBean',2105,'edu.ncsu.csc.itrust.beans.ReportRequestBean.setID(long)',0,'public void setID(long iD) {\r\n    ID = iD;\r\n}'),(1111,'long requesterMID','long',0,276,'edu.ncsu.csc.itrust.beans.ReportRequestBean',2109,'edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequesterMID(long)',0,'public void setRequesterMID(long requesterMID) {\r\n    this.requesterMID = requesterMID;\r\n}'),(1112,'long patientMID','long',0,276,'edu.ncsu.csc.itrust.beans.ReportRequestBean',2106,'edu.ncsu.csc.itrust.beans.ReportRequestBean.setPatientMID(long)',0,'public void setPatientMID(long patientMID) {\r\n    this.patientMID = patientMID;\r\n}'),(1113,'Date requestedDate','java.util.Date',0,276,'edu.ncsu.csc.itrust.beans.ReportRequestBean',2107,'edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequestedDate(java.util.Date)',0,'// public void setApproverMID(long approverMID) {\r\n// this.approverMID = approverMID;\r\n// }\r\n// \r\n// public long getApproverMID() {\r\n// return approverMID;\r\n// }\r\npublic void setRequestedDate(Date requestedDate) {\r\n    this.requestedDate = (requestedDate == null) ? null : ((Date) (requestedDate.clone()));\r\n}'),(1114,'String s','java.lang.String',0,276,'edu.ncsu.csc.itrust.beans.ReportRequestBean',2108,'edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequestedDateString(java.lang.String)',0,'public void setRequestedDateString(String s) {\r\n    try {\r\n        setRequestedDate(new SimpleDateFormat(ReportRequestBean.dateFormat).parse(s));\r\n    } catch (ParseException ex) {\r\n        System.out.println(ex.getMessage());\r\n    }\r\n}'),(1115,'Date viewedDate','java.util.Date',0,276,'edu.ncsu.csc.itrust.beans.ReportRequestBean',2111,'edu.ncsu.csc.itrust.beans.ReportRequestBean.setViewedDate(java.util.Date)',0,'// public void setApprovedDate(Date approvedDate) {\r\n// this.approvedDate = (approvedDate == null ? null : (Date) approvedDate.clone());\r\n// }\r\n// \r\n// public void setApprovedDateString(String s) {\r\n// try {\r\n// setApprovedDate(new SimpleDateFormat(dateFormat).parse(s));\r\n// } catch (ParseException ex) {\r\n// System.out.println(ex.getMessage());\r\n// }\r\n// }\r\n// \r\n// public Date getApprovedDate() {\r\n// return (approvedDate == null ? null : (Date) approvedDate.clone());\r\n// }\r\n// \r\n// public String getApprovedDateString() {\r\n// if (approvedDate == null)\r\n// return \"\"; //$NON-NLS-1$\r\n// return new SimpleDateFormat(dateFormat).format(approvedDate);\r\n// }\r\npublic void setViewedDate(Date viewedDate) {\r\n    this.viewedDate = (viewedDate == null) ? null : ((Date) (viewedDate.clone()));\r\n}'),(1116,'String s','java.lang.String',0,276,'edu.ncsu.csc.itrust.beans.ReportRequestBean',2112,'edu.ncsu.csc.itrust.beans.ReportRequestBean.setViewedDateString(java.lang.String)',0,'public void setViewedDateString(String s) {\r\n    try {\r\n        setViewedDate(new SimpleDateFormat(ReportRequestBean.dateFormat).parse(s));\r\n    } catch (ParseException ex) {\r\n        System.out.println(ex.getMessage());\r\n    }\r\n}'),(1117,'String status','java.lang.String',0,276,'edu.ncsu.csc.itrust.beans.ReportRequestBean',2110,'edu.ncsu.csc.itrust.beans.ReportRequestBean.setStatus(java.lang.String)',0,'public void setStatus(String status) {\r\n    this.status = status;\r\n}'),(1118,'String question','java.lang.String',0,277,'edu.ncsu.csc.itrust.beans.SecurityQA',2119,'edu.ncsu.csc.itrust.beans.SecurityQA.setQuestion(java.lang.String)',0,'public void setQuestion(String question) {\r\n    this.question = question;\r\n}'),(1119,'String answer','java.lang.String',0,277,'edu.ncsu.csc.itrust.beans.SecurityQA',2117,'edu.ncsu.csc.itrust.beans.SecurityQA.setAnswer(java.lang.String)',0,'public void setAnswer(String answer) {\r\n    this.answer = answer;\r\n}'),(1120,'String confirmAnswer','java.lang.String',0,277,'edu.ncsu.csc.itrust.beans.SecurityQA',2118,'edu.ncsu.csc.itrust.beans.SecurityQA.setConfirmAnswer(java.lang.String)',0,'public void setConfirmAnswer(String confirmAnswer) {\r\n    this.confirmAnswer = confirmAnswer;\r\n}'),(1121,'long iD','long',0,278,'edu.ncsu.csc.itrust.beans.SurveyBean',2132,'edu.ncsu.csc.itrust.beans.SurveyBean.setVisitID(long)',0,'public void setVisitID(long iD) {\r\n    visitID = iD;\r\n}'),(1122,'Date surveyDate','java.util.Date',0,278,'edu.ncsu.csc.itrust.beans.SurveyBean',2129,'edu.ncsu.csc.itrust.beans.SurveyBean.setSurveyDate(java.util.Date)',0,'public void setSurveyDate(Date surveyDate) {\r\n    this.surveyDate = (surveyDate == null) ? null : ((Date) (surveyDate.clone()));\r\n}'),(1123,'String s','java.lang.String',0,278,'edu.ncsu.csc.itrust.beans.SurveyBean',2130,'edu.ncsu.csc.itrust.beans.SurveyBean.setSurveyDateString(java.lang.String)',0,'public void setSurveyDateString(String s) {\r\n    try {\r\n        setSurveyDate(new SimpleDateFormat(SurveyBean.dateFormat).parse(s));\r\n    } catch (ParseException ex) {\r\n        System.out.println(ex.getMessage());\r\n    }\r\n}'),(1124,'int waitingRoomMinutes','int',0,278,'edu.ncsu.csc.itrust.beans.SurveyBean',2134,'edu.ncsu.csc.itrust.beans.SurveyBean.setWaitingRoomMinutes(int)',0,'public void setWaitingRoomMinutes(int waitingRoomMinutes) {\r\n    this.waitingRoomMinutes = waitingRoomMinutes;\r\n}'),(1125,'int examRoomMinutes','int',0,278,'edu.ncsu.csc.itrust.beans.SurveyBean',2128,'edu.ncsu.csc.itrust.beans.SurveyBean.setExamRoomMinutes(int)',0,'public void setExamRoomMinutes(int examRoomMinutes) {\r\n    this.examRoomMinutes = examRoomMinutes;\r\n}'),(1126,'int visitSatisfaction','int',0,278,'edu.ncsu.csc.itrust.beans.SurveyBean',2133,'edu.ncsu.csc.itrust.beans.SurveyBean.setVisitSatisfaction(int)',0,'public void setVisitSatisfaction(int visitSatisfaction) {\r\n    this.visitSatisfaction = visitSatisfaction;\r\n}'),(1127,'int treatmentSatisfaction','int',0,278,'edu.ncsu.csc.itrust.beans.SurveyBean',2131,'edu.ncsu.csc.itrust.beans.SurveyBean.setTreatmentSatisfaction(int)',0,'public void setTreatmentSatisfaction(int treatmentSatisfaction) {\r\n    this.treatmentSatisfaction = treatmentSatisfaction;\r\n}'),(1128,'long mid','long',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2157,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPMID(long)',0,'public void setHCPMID(long mid) {\r\n    hcpMID = mid;\r\n}'),(1129,'String firstName','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2155,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPFirstName(java.lang.String)',0,'public void setHCPFirstName(String firstName) {\r\n    this.hcpFirstName = firstName;\r\n}'),(1130,'String lastName','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2156,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPLastName(java.lang.String)',0,'public void setHCPLastName(String lastName) {\r\n    this.hcpLastName = lastName;\r\n}'),(1131,'String address1','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2158,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPaddress1(java.lang.String)',0,'public void setHCPaddress1(String address1) {\r\n    this.hcpAddress1 = address1;\r\n}'),(1132,'String address2','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2159,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPaddress2(java.lang.String)',0,'public void setHCPaddress2(String address2) {\r\n    this.hcpAddress2 = address2;\r\n}'),(1133,'String city','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2160,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPcity(java.lang.String)',0,'public void setHCPcity(String city) {\r\n    this.hcpCity = city;\r\n}'),(1134,'String state','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2163,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPstate(java.lang.String)',0,'public void setHCPstate(String state) {\r\n    this.hcpState = state;\r\n}'),(1135,'String zip','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2164,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPzip(java.lang.String)',0,'public void setHCPzip(String zip) {\r\n    this.hcpZip = zip;\r\n}'),(1136,'String specialty','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2162,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPspecialty(java.lang.String)',0,'public void setHCPspecialty(String specialty) {\r\n    this.hcpSpecialty = specialty;\r\n}'),(1137,'String hospital','java.lang.String',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2161,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPhospital(java.lang.String)',0,'public void setHCPhospital(String hospital) {\r\n    this.hcpHospitalID = hospital;\r\n}'),(1138,'float waitingRoomMinutes','float',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2154,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgWaitingRoomMinutes(float)',0,'public void setAvgWaitingRoomMinutes(float waitingRoomMinutes) {\r\n    this.avgWaitingRmMinutes = waitingRoomMinutes;\r\n}'),(1139,'float examRoomMinutes','float',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2151,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgExamRoomMinutes(float)',0,'public void setAvgExamRoomMinutes(float examRoomMinutes) {\r\n    this.avgExamRmMinutues = examRoomMinutes;\r\n}'),(1140,'float visitSatisfaction','float',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2153,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgVisitSatisfaction(float)',0,'public void setAvgVisitSatisfaction(float visitSatisfaction) {\r\n    this.avgVisitSatisfaction = visitSatisfaction;\r\n}'),(1141,'float treatmentSatisfaction','float',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2152,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgTreatmentSatisfaction(float)',0,'public void setAvgTreatmentSatisfaction(float treatmentSatisfaction) {\r\n    this.avgTreatmentSatisfaction = treatmentSatisfaction;\r\n}'),(1142,'float percent','float',0,279,'edu.ncsu.csc.itrust.beans.SurveyResultBean',2165,'edu.ncsu.csc.itrust.beans.SurveyResultBean.setPercentSatisfactionResults(float)',0,'public void setPercentSatisfactionResults(float percent) {\r\n    this.percentSatResultsAvailable = percent;\r\n}'),(1143,'boolean heightAllowed','boolean',0,280,'edu.ncsu.csc.itrust.beans.TelemedicineBean',2175,'edu.ncsu.csc.itrust.beans.TelemedicineBean.setHeightAllowed(boolean)',0,'public void setHeightAllowed(boolean heightAllowed) {\r\n    this.heightAllowed = heightAllowed;\r\n}'),(1144,'boolean systolicBloodPressureAllowed','boolean',0,280,'edu.ncsu.csc.itrust.beans.TelemedicineBean',2177,'edu.ncsu.csc.itrust.beans.TelemedicineBean.setSystolicBloodPressureAllowed(boolean)',0,'public void setSystolicBloodPressureAllowed(boolean systolicBloodPressureAllowed) {\r\n    this.systolicBloodPressureAllowed = systolicBloodPressureAllowed;\r\n}'),(1145,'boolean diastolicBloodPressureAllowed','boolean',0,280,'edu.ncsu.csc.itrust.beans.TelemedicineBean',2173,'edu.ncsu.csc.itrust.beans.TelemedicineBean.setDiastolicBloodPressureAllowed(boolean)',0,'public void setDiastolicBloodPressureAllowed(boolean diastolicBloodPressureAllowed) {\r\n    this.diastolicBloodPressureAllowed = diastolicBloodPressureAllowed;\r\n}'),(1146,'boolean glucoseLevelAllowed','boolean',0,280,'edu.ncsu.csc.itrust.beans.TelemedicineBean',2174,'edu.ncsu.csc.itrust.beans.TelemedicineBean.setGlucoseLevelAllowed(boolean)',0,'public void setGlucoseLevelAllowed(boolean glucoseLevelAllowed) {\r\n    this.glucoseLevelAllowed = glucoseLevelAllowed;\r\n}'),(1147,'boolean weightAllowed','boolean',0,280,'edu.ncsu.csc.itrust.beans.TelemedicineBean',2178,'edu.ncsu.csc.itrust.beans.TelemedicineBean.setWeightAllowed(boolean)',0,'public void setWeightAllowed(boolean weightAllowed) {\r\n    this.weightAllowed = weightAllowed;\r\n}'),(1148,'boolean pedometerReadingAllowed','boolean',0,280,'edu.ncsu.csc.itrust.beans.TelemedicineBean',2176,'edu.ncsu.csc.itrust.beans.TelemedicineBean.setPedometerReadingAllowed(boolean)',0,'public void setPedometerReadingAllowed(boolean pedometerReadingAllowed) {\r\n    this.pedometerReadingAllowed = pedometerReadingAllowed;\r\n}'),(1149,'String role','java.lang.String',0,281,'edu.ncsu.csc.itrust.beans.TransactionBean',2189,'edu.ncsu.csc.itrust.beans.TransactionBean.setRole(java.lang.String)',0,'public void setRole(String role) {\r\n    this.role = role;\r\n}'),(1150,'String addedInfo','java.lang.String',0,281,'edu.ncsu.csc.itrust.beans.TransactionBean',2187,'edu.ncsu.csc.itrust.beans.TransactionBean.setAddedInfo(java.lang.String)',0,'public void setAddedInfo(String addedInfo) {\r\n    this.addedInfo = addedInfo;\r\n}'),(1151,'long loggedInMID','long',0,281,'edu.ncsu.csc.itrust.beans.TransactionBean',2188,'edu.ncsu.csc.itrust.beans.TransactionBean.setLoggedInMID(long)',0,'public void setLoggedInMID(long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n}'),(1152,'long secondaryMID','long',0,281,'edu.ncsu.csc.itrust.beans.TransactionBean',2190,'edu.ncsu.csc.itrust.beans.TransactionBean.setSecondaryMID(long)',0,'public void setSecondaryMID(long secondaryMID) {\r\n    this.secondaryMID = secondaryMID;\r\n}'),(1153,'Timestamp timeLogged','java.sql.Timestamp',0,281,'edu.ncsu.csc.itrust.beans.TransactionBean',2191,'edu.ncsu.csc.itrust.beans.TransactionBean.setTimeLogged(java.sql.Timestamp)',0,'public void setTimeLogged(Timestamp timeLogged) {\r\n    this.timeLogged = timeLogged;\r\n}'),(1154,'TransactionType tranactionType','edu.ncsu.csc.itrust.enums.TransactionType',490,281,'edu.ncsu.csc.itrust.beans.TransactionBean',2193,'edu.ncsu.csc.itrust.beans.TransactionBean.setTransactionType(edu.ncsu.csc.itrust.enums.TransactionType)',0,'public void setTransactionType(TransactionType tranactionType) {\r\n    this.transactionType = tranactionType;\r\n}'),(1155,'long transactionID','long',0,281,'edu.ncsu.csc.itrust.beans.TransactionBean',2192,'edu.ncsu.csc.itrust.beans.TransactionBean.setTransactionID(long)',0,'public void setTransactionID(long transactionID) {\r\n    this.transactionID = transactionID;\r\n}'),(1156,'Object other','java.lang.Object',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2196,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object other) {\r\n    return ((other != null) && (this.getClass().equals(other.getClass()))) && (this.equals(((VerboseReferralBean) (other))));\r\n}'),(1157,'VerboseReferralBean other','edu.ncsu.csc.itrust.beans.VerboseReferralBean',282,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2195,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.equals(edu.ncsu.csc.itrust.beans.VerboseReferralBean)',0,'private boolean equals(VerboseReferralBean other) {\r\n    return ((((((((id) == (other.id)) && ((senderID) == (other.senderID))) && ((receiverID) == (other.receiverID))) && ((ovid) == (other.ovid))) && ((viewedByPatient) == (other.viewedByPatient))) && ((viewedByHCP) == (other.viewedByHCP))) && (timeStamp.equals(other.timeStamp))) && (referralDetails.equals(other.referralDetails));\r\n}'),(1158,'long id','long',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2212,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setId(long)',0,'public void setId(long id) {\r\n    this.id = id;\r\n}'),(1159,'long senderID','long',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2221,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setSenderID(long)',0,'public void setSenderID(long senderID) {\r\n    this.senderID = senderID;\r\n}'),(1160,'long receiverID','long',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2218,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReceiverID(long)',0,'public void setReceiverID(long receiverID) {\r\n    this.receiverID = receiverID;\r\n}'),(1161,'String referralDetails','java.lang.String',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2220,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReferralDetails(java.lang.String)',0,'public void setReferralDetails(String referralDetails) {\r\n    this.referralDetails = referralDetails;\r\n}'),(1162,'long patientID','long',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2215,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPatientID(long)',0,'public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}'),(1163,'long ovid','long',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2214,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setOvid(long)',0,'public void setOvid(long ovid) {\r\n    this.ovid = ovid;\r\n}'),(1164,'boolean viewedByPatient','boolean',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2225,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setViewedByPatient(boolean)',0,'public void setViewedByPatient(boolean viewedByPatient) {\r\n    this.viewedByPatient = viewedByPatient;\r\n}'),(1165,'boolean viewedByHCP','boolean',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2224,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setViewedByHCP(boolean)',0,'public void setViewedByHCP(boolean viewedByHCP) {\r\n    this.viewedByHCP = viewedByHCP;\r\n}'),(1166,'String timeStamp','java.lang.String',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2223,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setTimeStamp(java.lang.String)',0,'public void setTimeStamp(String timeStamp) {\r\n    this.timeStamp = timeStamp;\r\n}'),(1167,'int priority','int',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2217,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPriority(int)',0,'public void setPriority(int priority) {\r\n    this.priority = priority;\r\n}'),(1168,'String patientName','java.lang.String',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2216,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPatientName(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param patientName\r\n * 		the patientName to set\r\n */\r\npublic void setPatientName(String patientName) {\r\n    this.patientName = patientName;\r\n}'),(1169,'String senderName','java.lang.String',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2222,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setSenderName(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param senderName\r\n * 		the senderName to set\r\n */\r\npublic void setSenderName(String senderName) {\r\n    this.senderName = senderName;\r\n}'),(1170,'String receiverName','java.lang.String',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2219,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReceiverName(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param receiverName\r\n * 		the receiverName to set\r\n */\r\npublic void setReceiverName(String receiverName) {\r\n    this.receiverName = receiverName;\r\n}'),(1171,'String ovDate','java.lang.String',0,282,'edu.ncsu.csc.itrust.beans.VerboseReferralBean',2213,'edu.ncsu.csc.itrust.beans.VerboseReferralBean.setOvDate(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param ovDate\r\n * 		the ovDate to set\r\n */\r\npublic void setOvDate(String ovDate) {\r\n    this.ovDate = ovDate;\r\n}'),(1172,'String type','java.lang.String',0,283,'edu.ncsu.csc.itrust.beans.VisitFlag',2227,'edu.ncsu.csc.itrust.beans.VisitFlag.-init-(java.lang.String)',0,'public VisitFlag(String type) {\r\n    this.type = type;\r\n}'),(1173,'String type','java.lang.String',0,283,'edu.ncsu.csc.itrust.beans.VisitFlag',2228,'edu.ncsu.csc.itrust.beans.VisitFlag.-init-(java.lang.String,java.lang.String)',0,'public VisitFlag(String type, String value) {\r\n    this.type = type;\r\n    this.value = value;\r\n}'),(1174,'String value','java.lang.String',0,283,'edu.ncsu.csc.itrust.beans.VisitFlag',2228,'edu.ncsu.csc.itrust.beans.VisitFlag.-init-(java.lang.String,java.lang.String)',0,'public VisitFlag(String type, String value) {\r\n    this.type = type;\r\n    this.value = value;\r\n}'),(1175,'String type','java.lang.String',0,283,'edu.ncsu.csc.itrust.beans.VisitFlag',2231,'edu.ncsu.csc.itrust.beans.VisitFlag.setType(java.lang.String)',0,'public void setType(String type) {\r\n    this.type = type;\r\n}'),(1176,'String value','java.lang.String',0,283,'edu.ncsu.csc.itrust.beans.VisitFlag',2232,'edu.ncsu.csc.itrust.beans.VisitFlag.setValue(java.lang.String)',0,'public void setValue(String value) {\r\n    this.value = value;\r\n}'),(1177,'long wardID','long',0,284,'edu.ncsu.csc.itrust.beans.WardBean',2233,'edu.ncsu.csc.itrust.beans.WardBean.-init-(long,java.lang.String,long)',0,'public WardBean(long wardID, String requiredSpecialty, long inHospital) {\r\n    this.wardID = wardID;\r\n    this.requiredSpecialty = requiredSpecialty;\r\n    this.inHospital = inHospital;\r\n}'),(1178,'String requiredSpecialty','java.lang.String',0,284,'edu.ncsu.csc.itrust.beans.WardBean',2233,'edu.ncsu.csc.itrust.beans.WardBean.-init-(long,java.lang.String,long)',0,'public WardBean(long wardID, String requiredSpecialty, long inHospital) {\r\n    this.wardID = wardID;\r\n    this.requiredSpecialty = requiredSpecialty;\r\n    this.inHospital = inHospital;\r\n}'),(1179,'long inHospital','long',0,284,'edu.ncsu.csc.itrust.beans.WardBean',2233,'edu.ncsu.csc.itrust.beans.WardBean.-init-(long,java.lang.String,long)',0,'public WardBean(long wardID, String requiredSpecialty, long inHospital) {\r\n    this.wardID = wardID;\r\n    this.requiredSpecialty = requiredSpecialty;\r\n    this.inHospital = inHospital;\r\n}'),(1180,'long wardID','long',0,284,'edu.ncsu.csc.itrust.beans.WardBean',2242,'edu.ncsu.csc.itrust.beans.WardBean.setWardID(long)',0,'public void setWardID(long wardID) {\r\n    this.wardID = wardID;\r\n}'),(1181,'String requiredSpecialty','java.lang.String',0,284,'edu.ncsu.csc.itrust.beans.WardBean',2241,'edu.ncsu.csc.itrust.beans.WardBean.setRequiredSpecialty(java.lang.String)',0,'public void setRequiredSpecialty(String requiredSpecialty) {\r\n    this.requiredSpecialty = requiredSpecialty;\r\n}'),(1182,'long inHospital','long',0,284,'edu.ncsu.csc.itrust.beans.WardBean',2240,'edu.ncsu.csc.itrust.beans.WardBean.setInHospital(long)',0,'public void setInHospital(long inHospital) {\r\n    this.inHospital = inHospital;\r\n}'),(1183,'Object obj','java.lang.Object',0,284,'edu.ncsu.csc.itrust.beans.WardBean',2235,'edu.ncsu.csc.itrust.beans.WardBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((WardBean) (obj))));\r\n}'),(1184,'WardBean other','edu.ncsu.csc.itrust.beans.WardBean',284,284,'edu.ncsu.csc.itrust.beans.WardBean',2234,'edu.ncsu.csc.itrust.beans.WardBean.equals(edu.ncsu.csc.itrust.beans.WardBean)',0,'private boolean equals(WardBean other) {\r\n    return ((wardID) == (other.wardID)) && (requiredSpecialty.equals(other.requiredSpecialty));\r\n}'),(1185,'long roomID','long',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2243,'edu.ncsu.csc.itrust.beans.WardRoomBean.-init-(long,long,long,java.lang.String,java.lang.String)',0,'public WardRoomBean(long roomID, long occupiedBy, long inWard, String roomName, String status) {\r\n    this.roomID = roomID;\r\n    this.occupiedBy = occupiedBy;\r\n    this.inWard = inWard;\r\n    this.roomName = roomName;\r\n    this.status = status;\r\n}'),(1186,'long occupiedBy','long',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2243,'edu.ncsu.csc.itrust.beans.WardRoomBean.-init-(long,long,long,java.lang.String,java.lang.String)',0,'public WardRoomBean(long roomID, long occupiedBy, long inWard, String roomName, String status) {\r\n    this.roomID = roomID;\r\n    this.occupiedBy = occupiedBy;\r\n    this.inWard = inWard;\r\n    this.roomName = roomName;\r\n    this.status = status;\r\n}'),(1187,'long inWard','long',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2243,'edu.ncsu.csc.itrust.beans.WardRoomBean.-init-(long,long,long,java.lang.String,java.lang.String)',0,'public WardRoomBean(long roomID, long occupiedBy, long inWard, String roomName, String status) {\r\n    this.roomID = roomID;\r\n    this.occupiedBy = occupiedBy;\r\n    this.inWard = inWard;\r\n    this.roomName = roomName;\r\n    this.status = status;\r\n}'),(1188,'String roomName','java.lang.String',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2243,'edu.ncsu.csc.itrust.beans.WardRoomBean.-init-(long,long,long,java.lang.String,java.lang.String)',0,'public WardRoomBean(long roomID, long occupiedBy, long inWard, String roomName, String status) {\r\n    this.roomID = roomID;\r\n    this.occupiedBy = occupiedBy;\r\n    this.inWard = inWard;\r\n    this.roomName = roomName;\r\n    this.status = status;\r\n}'),(1189,'String status','java.lang.String',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2243,'edu.ncsu.csc.itrust.beans.WardRoomBean.-init-(long,long,long,java.lang.String,java.lang.String)',0,'public WardRoomBean(long roomID, long occupiedBy, long inWard, String roomName, String status) {\r\n    this.roomID = roomID;\r\n    this.occupiedBy = occupiedBy;\r\n    this.inWard = inWard;\r\n    this.roomName = roomName;\r\n    this.status = status;\r\n}'),(1190,'long roomID','long',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2254,'edu.ncsu.csc.itrust.beans.WardRoomBean.setRoomID(long)',0,'public void setRoomID(long roomID) {\r\n    this.roomID = roomID;\r\n}'),(1191,'Long occupiedBy','java.lang.Long',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2253,'edu.ncsu.csc.itrust.beans.WardRoomBean.setOccupiedBy(java.lang.Long)',0,'public void setOccupiedBy(Long occupiedBy) {\r\n    this.occupiedBy = occupiedBy;\r\n}'),(1192,'long inWard','long',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2252,'edu.ncsu.csc.itrust.beans.WardRoomBean.setInWard(long)',0,'public void setInWard(long inWard) {\r\n    this.inWard = inWard;\r\n}'),(1193,'String roomName','java.lang.String',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2255,'edu.ncsu.csc.itrust.beans.WardRoomBean.setRoomName(java.lang.String)',0,'public void setRoomName(String roomName) {\r\n    this.roomName = roomName;\r\n}'),(1194,'String status','java.lang.String',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2256,'edu.ncsu.csc.itrust.beans.WardRoomBean.setStatus(java.lang.String)',0,'public void setStatus(String status) {\r\n    this.status = status;\r\n}'),(1195,'Object obj','java.lang.Object',0,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2245,'edu.ncsu.csc.itrust.beans.WardRoomBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((WardRoomBean) (obj))));\r\n}'),(1196,'WardRoomBean other','edu.ncsu.csc.itrust.beans.WardRoomBean',285,285,'edu.ncsu.csc.itrust.beans.WardRoomBean',2244,'edu.ncsu.csc.itrust.beans.WardRoomBean.equals(edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'private boolean equals(WardRoomBean other) {\r\n    return ((roomID) == (other.roomID)) && (roomName.equals(other.roomName));\r\n}'),(1197,'String notes','java.lang.String',0,286,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',2266,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setNotes(java.lang.String)',0,'public void setNotes(String notes) {\r\n    this.notes = notes;\r\n}'),(1198,'String ovID','java.lang.String',0,286,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',2267,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setOvID(java.lang.String)',0,'public void setOvID(String ovID) {\r\n    this.ovID = ovID;\r\n}'),(1199,'String visitDate','java.lang.String',0,286,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',2269,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setVisitDate(java.lang.String)',0,'public void setVisitDate(String visitDate) {\r\n    this.visitDate = visitDate;\r\n}'),(1200,'String hcpID','java.lang.String',0,286,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',2264,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setHcpID(java.lang.String)',0,'public void setHcpID(String hcpID) {\r\n    this.hcpID = hcpID;\r\n}'),(1201,'String patientID','java.lang.String',0,286,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',2268,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setPatientID(java.lang.String)',0,'public void setPatientID(String patientID) {\r\n    this.patientID = patientID;\r\n}'),(1202,'String hospitalID','java.lang.String',0,286,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',2265,'edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setHospitalID(java.lang.String)',0,'public void setHospitalID(String hospitalID) {\r\n    this.hospitalID = hospitalID;\r\n}'),(1203,'String[] overrideCodes','java.lang.String[]',0,287,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',2282,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setOverrideCodes(java.lang.String[])',0,'/**\r\n *\r\n *\r\n * @param overrideCode\r\n * 		the overrideCode to set\r\n */\r\npublic void setOverrideCodes(String[] overrideCodes) {\r\n    if (overrideCodes == null) {\r\n        this.overrideCodes = null;\r\n    } else {\r\n        this.overrideCodes = overrideCodes.clone();\r\n    }\r\n}'),(1204,'String overrideComment','java.lang.String',0,287,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',2283,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setOverrideOther(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param overrideComment\r\n * 		the overrideComment to set\r\n */\r\npublic void setOverrideOther(String overrideComment) {\r\n    this.overrideOther = overrideComment;\r\n}'),(1205,'String medID','java.lang.String',0,287,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',2281,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setMedID(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param medID\r\n * 		the medID to set\r\n */\r\npublic void setMedID(String medID) {\r\n    this.medID = medID;\r\n}'),(1206,'String startDate','java.lang.String',0,287,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',2284,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setStartDate(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param startDate\r\n * 		the startDate to set\r\n */\r\npublic void setStartDate(String startDate) {\r\n    this.startDate = startDate;\r\n}'),(1207,'String endDate','java.lang.String',0,287,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',2279,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setEndDate(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param endDate\r\n * 		the endDate to set\r\n */\r\npublic void setEndDate(String endDate) {\r\n    this.endDate = endDate;\r\n}'),(1208,'String dosage','java.lang.String',0,287,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',2278,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setDosage(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param dosage\r\n * 		the dosage to set\r\n */\r\npublic void setDosage(String dosage) {\r\n    this.dosage = dosage;\r\n}'),(1209,'String instructions','java.lang.String',0,287,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',2280,'edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setInstructions(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param instructions\r\n * 		the instructions to set\r\n */\r\npublic void setInstructions(String instructions) {\r\n    this.instructions = instructions;\r\n}'),(1210,'String bloodPressureD','java.lang.String',0,288,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',2294,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setBloodPressureD(java.lang.String)',0,'public void setBloodPressureD(String bloodPressureD) {\r\n    this.bloodPressureD = bloodPressureD;\r\n}'),(1211,'String bloodPressureN','java.lang.String',0,288,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',2295,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setBloodPressureN(java.lang.String)',0,'public void setBloodPressureN(String bloodPressureN) {\r\n    this.bloodPressureN = bloodPressureN;\r\n}'),(1212,'String cholesterolHDL','java.lang.String',0,288,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',2296,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolHDL(java.lang.String)',0,'public void setCholesterolHDL(String cholesterolHDL) {\r\n    this.cholesterolHDL = cholesterolHDL;\r\n}'),(1213,'String cholesterolLDL','java.lang.String',0,288,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',2297,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolLDL(java.lang.String)',0,'public void setCholesterolLDL(String cholesterolLDL) {\r\n    this.cholesterolLDL = cholesterolLDL;\r\n}'),(1214,'String cholesterolTri','java.lang.String',0,288,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',2298,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolTri(java.lang.String)',0,'public void setCholesterolTri(String cholesterolTri) {\r\n    this.cholesterolTri = cholesterolTri;\r\n}'),(1215,'String height','java.lang.String',0,288,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',2299,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setHeight(java.lang.String)',0,'public void setHeight(String height) {\r\n    this.height = height;\r\n}'),(1216,'String isSmoker','java.lang.String',0,288,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',2300,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setIsSmoker(java.lang.String)',0,'public void setIsSmoker(String isSmoker) {\r\n    this.isSmoker = isSmoker;\r\n}'),(1217,'String weight','java.lang.String',0,288,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',2301,'edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setWeight(java.lang.String)',0,'public void setWeight(String weight) {\r\n    this.weight = weight;\r\n}'),(1218,'long hcpID','long',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2302,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-(long,long,java.lang.String,java.lang.String,java.lang.String)',0,'public VisitReminderReturnForm(long hcpID, long patientID, String lastName, String firstName, String phone) {\r\n    this.hcpID = hcpID;\r\n    this.patientID = patientID;\r\n    this.lastName = lastName;\r\n    this.firstName = firstName;\r\n    setPhoneNumber(phone);\r\n}'),(1219,'long patientID','long',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2302,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-(long,long,java.lang.String,java.lang.String,java.lang.String)',0,'public VisitReminderReturnForm(long hcpID, long patientID, String lastName, String firstName, String phone) {\r\n    this.hcpID = hcpID;\r\n    this.patientID = patientID;\r\n    this.lastName = lastName;\r\n    this.firstName = firstName;\r\n    setPhoneNumber(phone);\r\n}'),(1220,'String lastName','java.lang.String',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2302,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-(long,long,java.lang.String,java.lang.String,java.lang.String)',0,'public VisitReminderReturnForm(long hcpID, long patientID, String lastName, String firstName, String phone) {\r\n    this.hcpID = hcpID;\r\n    this.patientID = patientID;\r\n    this.lastName = lastName;\r\n    this.firstName = firstName;\r\n    setPhoneNumber(phone);\r\n}'),(1221,'String firstName','java.lang.String',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2302,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-(long,long,java.lang.String,java.lang.String,java.lang.String)',0,'public VisitReminderReturnForm(long hcpID, long patientID, String lastName, String firstName, String phone) {\r\n    this.hcpID = hcpID;\r\n    this.patientID = patientID;\r\n    this.lastName = lastName;\r\n    this.firstName = firstName;\r\n    setPhoneNumber(phone);\r\n}'),(1222,'String phone','java.lang.String',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2302,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-(long,long,java.lang.String,java.lang.String,java.lang.String)',0,'public VisitReminderReturnForm(long hcpID, long patientID, String lastName, String firstName, String phone) {\r\n    this.hcpID = hcpID;\r\n    this.patientID = patientID;\r\n    this.lastName = lastName;\r\n    this.firstName = firstName;\r\n    setPhoneNumber(phone);\r\n}'),(1223,'long hcpID','long',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2312,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setHcpID(long)',0,'public void setHcpID(long hcpID) {\r\n    this.hcpID = hcpID;\r\n}'),(1224,'long patientID','long',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2314,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setPatientID(long)',0,'public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}'),(1225,'String lastName','java.lang.String',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2313,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setLastName(java.lang.String)',0,'public void setLastName(String lastName) {\r\n    this.lastName = lastName;\r\n}'),(1226,'String firstName','java.lang.String',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2311,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setFirstName(java.lang.String)',0,'public void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}'),(1227,'String phone','java.lang.String',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2315,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setPhoneNumber(java.lang.String)',0,'public void setPhoneNumber(String phone) {\r\n    this.phoneNumber = phone;\r\n}'),(1228,'VisitFlag[] visitFlags','edu.ncsu.csc.itrust.beans.VisitFlag[]',0,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2316,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setVisitFlags(edu.ncsu.csc.itrust.beans.VisitFlag[])',0,'public void setVisitFlags(VisitFlag[] visitFlags) {\r\n    this.visitFlags = new ArrayList<VisitFlag>();\r\n    for (VisitFlag flag : visitFlags) {\r\n        this.visitFlags.add(flag);\r\n    }\r\n}'),(1229,'VisitFlag flag','edu.ncsu.csc.itrust.beans.VisitFlag',283,289,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',2304,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.addVisitFlag(edu.ncsu.csc.itrust.beans.VisitFlag)',0,'public void addVisitFlag(VisitFlag flag) {\r\n    if (null == (visitFlags))\r\n        visitFlags = new ArrayList<VisitFlag>();\r\n\r\n    visitFlags.add(flag);\r\n}'),(1230,'ResultSet rs','java.sql.ResultSet',0,290,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader',2318,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadList(java.sql.ResultSet)',0,'public List<AdverseEventBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<AdverseEventBean> list = new ArrayList<AdverseEventBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1231,'ResultSet rs','java.sql.ResultSet',0,290,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader',2320,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadSingle(java.sql.ResultSet)',0,'public AdverseEventBean loadSingle(ResultSet rs) throws SQLException {\r\n    AdverseEventBean adverseEvent = new AdverseEventBean();\r\n    adverseEvent.setMID(rs.getString(\"PatientMID\"));\r\n    adverseEvent.setDrug(rs.getString(\"PresImmu\"));\r\n    adverseEvent.setDescription(rs.getString(\"Comment\"));\r\n    adverseEvent.setCode(rs.getString(\"Code\"));\r\n    adverseEvent.setDate(rs.getTimestamp(\"TimeLogged\").toString());\r\n    adverseEvent.setId(rs.getInt(\"id\"));\r\n    adverseEvent.setStatus(rs.getString(\"Status\"));\r\n    return adverseEvent;\r\n}'),(1232,'edu.ncsu.csc.itrust.beans.AdverseEventBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,290,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader',2320,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadSingle(java.sql.ResultSet)',1,'public AdverseEventBean loadSingle(ResultSet rs) throws SQLException {\r\n    AdverseEventBean adverseEvent = new AdverseEventBean();\r\n    adverseEvent.setMID(rs.getString(\"PatientMID\"));\r\n    adverseEvent.setDrug(rs.getString(\"PresImmu\"));\r\n    adverseEvent.setDescription(rs.getString(\"Comment\"));\r\n    adverseEvent.setCode(rs.getString(\"Code\"));\r\n    adverseEvent.setDate(rs.getTimestamp(\"TimeLogged\").toString());\r\n    adverseEvent.setId(rs.getInt(\"id\"));\r\n    adverseEvent.setStatus(rs.getString(\"Status\"));\r\n    return adverseEvent;\r\n}'),(1233,'PreparedStatement ps','java.sql.PreparedStatement',0,290,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader',2319,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, AdverseEventBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1234,'AdverseEventBean bean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,290,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader',2319,'edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, AdverseEventBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1235,'ResultSet rs','java.sql.ResultSet',0,291,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader',2322,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadList(java.sql.ResultSet)',0,'public List<AllergyBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<AllergyBean> list = new ArrayList<AllergyBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1236,'ResultSet rs','java.sql.ResultSet',0,291,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader',2324,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadSingle(java.sql.ResultSet)',0,'public AllergyBean loadSingle(ResultSet rs) throws SQLException {\r\n    AllergyBean allergy = new AllergyBean();\r\n    allergy.setId(rs.getLong(\"ID\"));\r\n    allergy.setPatientID(rs.getLong(\"PatientID\"));\r\n    allergy.setDescription(rs.getString(\"Description\"));\r\n    allergy.setNDCode(rs.getString(\"Code\"));\r\n    allergy.setFirstFound(rs.getTimestamp(\"FirstFound\"));\r\n    return allergy;\r\n}'),(1237,'edu.ncsu.csc.itrust.beans.AllergyBean','edu.ncsu.csc.itrust.beans.AllergyBean',244,291,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader',2324,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadSingle(java.sql.ResultSet)',1,'public AllergyBean loadSingle(ResultSet rs) throws SQLException {\r\n    AllergyBean allergy = new AllergyBean();\r\n    allergy.setId(rs.getLong(\"ID\"));\r\n    allergy.setPatientID(rs.getLong(\"PatientID\"));\r\n    allergy.setDescription(rs.getString(\"Description\"));\r\n    allergy.setNDCode(rs.getString(\"Code\"));\r\n    allergy.setFirstFound(rs.getTimestamp(\"FirstFound\"));\r\n    return allergy;\r\n}'),(1238,'PreparedStatement ps','java.sql.PreparedStatement',0,291,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader',2323,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AllergyBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, AllergyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1239,'AllergyBean bean','edu.ncsu.csc.itrust.beans.AllergyBean',244,291,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader',2323,'edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AllergyBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, AllergyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1240,'ResultSet rs','java.sql.ResultSet',0,292,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader',2326,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadList(java.sql.ResultSet)',0,'public List<ApptBean> loadList(ResultSet rs) throws SQLException {\r\n    List<ApptBean> list = new ArrayList<ApptBean>();\r\n    while (rs.next())\r\n        list.add(loadSingle(rs));\r\n\r\n    return list;\r\n}'),(1241,'PreparedStatement ps','java.sql.PreparedStatement',0,292,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader',2327,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ApptBean bean) throws SQLException {\r\n    ps.setString(1, bean.getApptType());\r\n    ps.setLong(2, bean.getPatient());\r\n    ps.setLong(3, bean.getHcp());\r\n    ps.setTimestamp(4, bean.getDate());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}'),(1242,'ApptBean bean','edu.ncsu.csc.itrust.beans.ApptBean',245,292,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader',2327,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ApptBean bean) throws SQLException {\r\n    ps.setString(1, bean.getApptType());\r\n    ps.setLong(2, bean.getPatient());\r\n    ps.setLong(3, bean.getHcp());\r\n    ps.setTimestamp(4, bean.getDate());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}'),(1243,'ResultSet rs','java.sql.ResultSet',0,292,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader',2328,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadSingle(java.sql.ResultSet)',0,'public ApptBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptBean bean = new ApptBean();\r\n    bean.setApptID(rs.getInt(\"appt_id\"));\r\n    bean.setApptType(rs.getString(\"appt_type\"));\r\n    bean.setPatient(rs.getLong(\"patient_id\"));\r\n    bean.setHcp(rs.getLong(\"doctor_id\"));\r\n    bean.setDate(rs.getTimestamp(\"sched_date\"));\r\n    bean.setComment(rs.getString(\"comment\"));\r\n    return bean;\r\n}'),(1244,'edu.ncsu.csc.itrust.beans.ApptBean','edu.ncsu.csc.itrust.beans.ApptBean',245,292,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader',2328,'edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadSingle(java.sql.ResultSet)',1,'public ApptBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptBean bean = new ApptBean();\r\n    bean.setApptID(rs.getInt(\"appt_id\"));\r\n    bean.setApptType(rs.getString(\"appt_type\"));\r\n    bean.setPatient(rs.getLong(\"patient_id\"));\r\n    bean.setHcp(rs.getLong(\"doctor_id\"));\r\n    bean.setDate(rs.getTimestamp(\"sched_date\"));\r\n    bean.setComment(rs.getString(\"comment\"));\r\n    return bean;\r\n}'),(1245,'ResultSet rs','java.sql.ResultSet',0,293,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader',2330,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadList(java.sql.ResultSet)',0,'/**\r\n *\r\n */\r\npublic List<ApptRequestBean> loadList(ResultSet rs) throws SQLException {\r\n    List<ApptRequestBean> list = new ArrayList<ApptRequestBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1246,'ResultSet rs','java.sql.ResultSet',0,293,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader',2332,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadSingle(java.sql.ResultSet)',0,'/**\r\n *\r\n */\r\npublic ApptRequestBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptRequestBean bean = new ApptRequestBean();\r\n    ApptBean appt = loader.loadSingle(rs);\r\n    bean.setRequestedAppt(appt);\r\n    bean.setPending(rs.getBoolean(\"pending\"));\r\n    bean.setAccepted(rs.getBoolean(\"accepted\"));\r\n    return bean;\r\n}'),(1247,'edu.ncsu.csc.itrust.beans.ApptRequestBean','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,293,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader',2332,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadSingle(java.sql.ResultSet)',1,'/**\r\n *\r\n */\r\npublic ApptRequestBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptRequestBean bean = new ApptRequestBean();\r\n    ApptBean appt = loader.loadSingle(rs);\r\n    bean.setRequestedAppt(appt);\r\n    bean.setPending(rs.getBoolean(\"pending\"));\r\n    bean.setAccepted(rs.getBoolean(\"accepted\"));\r\n    return bean;\r\n}'),(1248,'PreparedStatement ps','java.sql.PreparedStatement',0,293,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader',2331,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'/**\r\n *\r\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, ApptRequestBean bean) throws SQLException {\r\n    PreparedStatement ps2 = loader.loadParameters(ps, bean.getRequestedAppt());\r\n    ps2.setBoolean(6, bean.isPending());\r\n    ps2.setBoolean(7, bean.isAccepted());\r\n    return ps2;\r\n}'),(1249,'ApptRequestBean bean','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,293,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader',2331,'edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'/**\r\n *\r\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, ApptRequestBean bean) throws SQLException {\r\n    PreparedStatement ps2 = loader.loadParameters(ps, bean.getRequestedAppt());\r\n    ps2.setBoolean(6, bean.isPending());\r\n    ps2.setBoolean(7, bean.isAccepted());\r\n    return ps2;\r\n}'),(1250,'ResultSet rs','java.sql.ResultSet',0,294,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader',2334,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadList(java.sql.ResultSet)',0,'public List<ApptTypeBean> loadList(ResultSet rs) throws SQLException {\r\n    List<ApptTypeBean> list = new ArrayList<ApptTypeBean>();\r\n    while (rs.next())\r\n        list.add(loadSingle(rs));\r\n\r\n    return list;\r\n}'),(1251,'PreparedStatement ps','java.sql.PreparedStatement',0,294,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader',2335,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ApptTypeBean apptType) throws SQLException {\r\n    ps.setString(1, apptType.getName());\r\n    ps.setInt(2, apptType.getDuration());\r\n    return ps;\r\n}'),(1252,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,294,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader',2335,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ApptTypeBean apptType) throws SQLException {\r\n    ps.setString(1, apptType.getName());\r\n    ps.setInt(2, apptType.getDuration());\r\n    return ps;\r\n}'),(1253,'ResultSet rs','java.sql.ResultSet',0,294,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader',2336,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadSingle(java.sql.ResultSet)',0,'public ApptTypeBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptTypeBean apptType = new ApptTypeBean();\r\n    apptType.setName(rs.getString(\"appt_type\"));\r\n    apptType.setDuration(rs.getInt(\"duration\"));\r\n    return apptType;\r\n}'),(1254,'edu.ncsu.csc.itrust.beans.ApptTypeBean','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,294,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader',2336,'edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadSingle(java.sql.ResultSet)',1,'public ApptTypeBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptTypeBean apptType = new ApptTypeBean();\r\n    apptType.setName(rs.getString(\"appt_type\"));\r\n    apptType.setDuration(rs.getInt(\"duration\"));\r\n    return apptType;\r\n}'),(1255,'ResultSet rs','java.sql.ResultSet',0,295,'edu.ncsu.csc.itrust.beans.loaders.BeanLoader',2337,'edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadList(java.sql.ResultSet)',0,'/**\r\n * Loads a list of the bean of type T from a result set.  Typically makes iterated calls\r\n * to loadSingle.\r\n *\r\n * @param rs\r\n * 		The java.sql.ResultSet we are extracting.\r\n * @return A java.util.List<T> where T is the type for this loader.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<T> loadList(ResultSet rs) throws SQLException;'),(1256,'ResultSet rs','java.sql.ResultSet',0,295,'edu.ncsu.csc.itrust.beans.loaders.BeanLoader',2339,'edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadSingle(java.sql.ResultSet)',0,'/**\r\n * Contains the instructions for mapping the rows in this java.sql.ResultSet into\r\n * beans of type <T>.\r\n *\r\n * @param rs\r\n * 		The java.sql.ResultSet to be loaded.\r\n * @return A Bean of type T containing the loaded information, typically of the first (or next) item in the result set.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic T loadSingle(ResultSet rs) throws SQLException;'),(1257,'PreparedStatement ps','java.sql.PreparedStatement',0,295,'edu.ncsu.csc.itrust.beans.loaders.BeanLoader',2338,'edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadParameters(java.sql.PreparedStatement,java.lang.Object)',0,'/**\r\n * Used for an insert or update, this method contains the instructions for mapping the fields within\r\n * a bean of type T into a prepared statement which modifies the appropriate table.\r\n *\r\n * @param ps\r\n * 		The prepared statement to be loaded.\r\n * @param bean\r\n * 		The bean containing the data to be placed.\r\n * @return A prepared statement with the appropriately loaded parameters.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, T bean) throws SQLException;'),(1258,'T bean','T',0,295,'edu.ncsu.csc.itrust.beans.loaders.BeanLoader',2338,'edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadParameters(java.sql.PreparedStatement,java.lang.Object)',0,'/**\r\n * Used for an insert or update, this method contains the instructions for mapping the fields within\r\n * a bean of type T into a prepared statement which modifies the appropriate table.\r\n *\r\n * @param ps\r\n * 		The prepared statement to be loaded.\r\n * @param bean\r\n * 		The bean containing the data to be placed.\r\n * @return A prepared statement with the appropriately loaded parameters.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, T bean) throws SQLException;'),(1259,'boolean loadOVDiagnosisID','boolean',0,296,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader',2341,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.-init-(boolean)',0,'public DiagnosisBeanLoader(boolean loadOVDiagnosisID) {\r\n    this.loadOVDiagnosisID = loadOVDiagnosisID;\r\n}'),(1260,'ResultSet rs','java.sql.ResultSet',0,296,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader',2342,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadList(java.sql.ResultSet)',0,'public List<DiagnosisBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<DiagnosisBean> list = new ArrayList<DiagnosisBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1261,'ResultSet rs','java.sql.ResultSet',0,296,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader',2344,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadSingle(java.sql.ResultSet)',0,'public DiagnosisBean loadSingle(ResultSet rs) throws SQLException {\r\n    DiagnosisBean diag = new DiagnosisBean(rs.getString(\"Code\"), rs.getString(\"Description\"), rs.getString(\"Chronic\"), rs.getString(\"URL\"));\r\n    // DiagnosisBean diag = new DiagnosisBean(rs.getString(\"Code\"), rs.getString(\"Description\"), rs.getString(\"Chronic\"));\r\n    if (loadOVDiagnosisID) {\r\n        diag.setOvDiagnosisID(rs.getInt(\"ID\"));\r\n        diag.setVisitID(rs.getLong(\"VisitID\"));\r\n    }\r\n    return diag;\r\n}'),(1262,'edu.ncsu.csc.itrust.beans.DiagnosisBean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,296,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader',2344,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadSingle(java.sql.ResultSet)',1,'public DiagnosisBean loadSingle(ResultSet rs) throws SQLException {\r\n    DiagnosisBean diag = new DiagnosisBean(rs.getString(\"Code\"), rs.getString(\"Description\"), rs.getString(\"Chronic\"), rs.getString(\"URL\"));\r\n    // DiagnosisBean diag = new DiagnosisBean(rs.getString(\"Code\"), rs.getString(\"Description\"), rs.getString(\"Chronic\"));\r\n    if (loadOVDiagnosisID) {\r\n        diag.setOvDiagnosisID(rs.getInt(\"ID\"));\r\n        diag.setVisitID(rs.getLong(\"VisitID\"));\r\n    }\r\n    return diag;\r\n}'),(1263,'PreparedStatement ps','java.sql.PreparedStatement',0,296,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader',2343,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, DiagnosisBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1264,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,296,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader',2343,'edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, DiagnosisBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1265,'ResultSet rs','java.sql.ResultSet',0,297,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader',2346,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadList(java.sql.ResultSet)',0,'public List<DrugInteractionBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<DrugInteractionBean> list = new ArrayList<DrugInteractionBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1266,'ResultSet rs','java.sql.ResultSet',0,297,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader',2348,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadSingle(java.sql.ResultSet)',0,'public DrugInteractionBean loadSingle(ResultSet rs) throws SQLException {\r\n    // MedicationBean med = new MedicationBean();\r\n    DrugInteractionBean drugIt = new DrugInteractionBean();\r\n    drugIt.setDescription(rs.getString(\"Description\"));\r\n    drugIt.setFirstDrug(rs.getString(\"FirstDrug\"));\r\n    drugIt.setSecondDrug(rs.getString(\"SecondDrug\"));\r\n    return drugIt;\r\n}'),(1267,'edu.ncsu.csc.itrust.beans.DrugInteractionBean','edu.ncsu.csc.itrust.beans.DrugInteractionBean',250,297,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader',2348,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadSingle(java.sql.ResultSet)',1,'public DrugInteractionBean loadSingle(ResultSet rs) throws SQLException {\r\n    // MedicationBean med = new MedicationBean();\r\n    DrugInteractionBean drugIt = new DrugInteractionBean();\r\n    drugIt.setDescription(rs.getString(\"Description\"));\r\n    drugIt.setFirstDrug(rs.getString(\"FirstDrug\"));\r\n    drugIt.setSecondDrug(rs.getString(\"SecondDrug\"));\r\n    return drugIt;\r\n}'),(1268,'PreparedStatement ps','java.sql.PreparedStatement',0,297,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader',2347,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, DrugInteractionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1269,'DrugInteractionBean bean','edu.ncsu.csc.itrust.beans.DrugInteractionBean',250,297,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader',2347,'edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, DrugInteractionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1270,'ResultSet rs','java.sql.ResultSet',0,298,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader',2350,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadList(java.sql.ResultSet)',0,'public List<OverrideReasonBean> loadList(ResultSet rs) throws SQLException {\r\n    List<OverrideReasonBean> list = new ArrayList<OverrideReasonBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1271,'ResultSet rs','java.sql.ResultSet',0,298,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader',2352,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadSingle(java.sql.ResultSet)',0,'public OverrideReasonBean loadSingle(ResultSet rs) throws SQLException {\r\n    OverrideReasonBean orc = new OverrideReasonBean(rs.getString(\"Code\"));\r\n    orc.setDescription(rs.getString(\"Description\"));\r\n    return orc;\r\n}'),(1272,'edu.ncsu.csc.itrust.beans.OverrideReasonBean','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,298,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader',2352,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadSingle(java.sql.ResultSet)',1,'public OverrideReasonBean loadSingle(ResultSet rs) throws SQLException {\r\n    OverrideReasonBean orc = new OverrideReasonBean(rs.getString(\"Code\"));\r\n    orc.setDescription(rs.getString(\"Description\"));\r\n    return orc;\r\n}'),(1273,'PreparedStatement ps','java.sql.PreparedStatement',0,298,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader',2351,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    return null;\r\n}'),(1274,'OverrideReasonBean bean','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,298,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader',2351,'edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    return null;\r\n}'),(1275,'ResultSet rs','java.sql.ResultSet',0,299,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader',2354,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadList(java.sql.ResultSet)',0,'public List<Email> loadList(ResultSet rs) throws SQLException {\r\n    List<Email> list = new ArrayList<Email>();\r\n    while (rs.next())\r\n        list.add(loadSingle(rs));\r\n\r\n    return list;\r\n}'),(1276,'PreparedStatement ps','java.sql.PreparedStatement',0,299,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader',2355,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.Email)',0,'public PreparedStatement loadParameters(PreparedStatement ps, Email email) throws SQLException {\r\n    ps.setString(1, email.getToListStr());\r\n    ps.setString(2, email.getFrom());\r\n    ps.setString(3, email.getSubject());\r\n    ps.setString(4, email.getBody());\r\n    return ps;\r\n}'),(1277,'Email email','edu.ncsu.csc.itrust.beans.Email',251,299,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader',2355,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.Email)',0,'public PreparedStatement loadParameters(PreparedStatement ps, Email email) throws SQLException {\r\n    ps.setString(1, email.getToListStr());\r\n    ps.setString(2, email.getFrom());\r\n    ps.setString(3, email.getSubject());\r\n    ps.setString(4, email.getBody());\r\n    return ps;\r\n}'),(1278,'ResultSet rs','java.sql.ResultSet',0,299,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader',2356,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadSingle(java.sql.ResultSet)',0,'public Email loadSingle(ResultSet rs) throws SQLException {\r\n    Email email = new Email();\r\n    email.setFrom(rs.getString(\"FromAddr\"));\r\n    email.setToList(Arrays.asList(rs.getString(\"ToAddr\").split(\",\")));\r\n    email.setBody(rs.getString(\"Body\"));\r\n    email.setSubject(rs.getString(\"Subject\"));\r\n    email.setTimeAdded(rs.getTimestamp(\"AddedDate\"));\r\n    return email;\r\n}'),(1279,'edu.ncsu.csc.itrust.beans.Email','edu.ncsu.csc.itrust.beans.Email',251,299,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader',2356,'edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadSingle(java.sql.ResultSet)',1,'public Email loadSingle(ResultSet rs) throws SQLException {\r\n    Email email = new Email();\r\n    email.setFrom(rs.getString(\"FromAddr\"));\r\n    email.setToList(Arrays.asList(rs.getString(\"ToAddr\").split(\",\")));\r\n    email.setBody(rs.getString(\"Body\"));\r\n    email.setSubject(rs.getString(\"Subject\"));\r\n    email.setTimeAdded(rs.getTimestamp(\"AddedDate\"));\r\n    return email;\r\n}'),(1280,'String relation','java.lang.String',0,300,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader',2357,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.-init-(java.lang.String)',0,'public FamilyBeanLoader(String relation) {\r\n    this.relation = relation;\r\n}'),(1281,'ResultSet rs','java.sql.ResultSet',0,300,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader',2358,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadList(java.sql.ResultSet)',0,'public List<FamilyMemberBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<FamilyMemberBean> list = new ArrayList<FamilyMemberBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1282,'PreparedStatement ps','java.sql.PreparedStatement',0,300,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader',2359,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, FamilyMemberBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1283,'FamilyMemberBean bean','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,300,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader',2359,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, FamilyMemberBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1284,'ResultSet rs','java.sql.ResultSet',0,300,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader',2360,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadSingle(java.sql.ResultSet)',0,'public FamilyMemberBean loadSingle(ResultSet rs) throws SQLException {\r\n    FamilyMemberBean fam = new FamilyMemberBean();\r\n    fam.setRelation(relation);\r\n    fam.setFirstName(rs.getString(\"FirstName\"));\r\n    fam.setLastName(rs.getString(\"LastName\"));\r\n    fam.setMid(rs.getInt(\"MID\"));\r\n    return fam;\r\n}'),(1285,'edu.ncsu.csc.itrust.beans.FamilyMemberBean','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,300,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader',2360,'edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadSingle(java.sql.ResultSet)',1,'public FamilyMemberBean loadSingle(ResultSet rs) throws SQLException {\r\n    FamilyMemberBean fam = new FamilyMemberBean();\r\n    fam.setRelation(relation);\r\n    fam.setFirstName(rs.getString(\"FirstName\"));\r\n    fam.setLastName(rs.getString(\"LastName\"));\r\n    fam.setMid(rs.getInt(\"MID\"));\r\n    return fam;\r\n}'),(1286,'ResultSet rs','java.sql.ResultSet',0,301,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader',2362,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadList(java.sql.ResultSet)',0,'public List<HealthRecord> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<HealthRecord> list = new ArrayList<HealthRecord>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1287,'PreparedStatement ps','java.sql.PreparedStatement',0,301,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader',2363,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HealthRecord)',0,'public PreparedStatement loadParameters(PreparedStatement ps, HealthRecord bean) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), bean.getPatientID());\r\n    ps.setDouble((i++), bean.getHeight());\r\n    ps.setDouble((i++), bean.getWeight());\r\n    ps.setInt((i++), (bean.isSmoker() ? 1 : 0));\r\n    ps.setInt((i++), bean.getSmokingStatus());\r\n    ps.setInt((i++), bean.getBloodPressureN());\r\n    ps.setInt((i++), bean.getBloodPressureD());\r\n    ps.setInt((i++), bean.getCholesterolHDL());\r\n    ps.setInt((i++), bean.getCholesterolLDL());\r\n    ps.setInt((i++), bean.getCholesterolTri());\r\n    ps.setLong((i++), bean.getPersonnelID());\r\n    return ps;\r\n}'),(1288,'HealthRecord bean','edu.ncsu.csc.itrust.beans.HealthRecord',257,301,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader',2363,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HealthRecord)',0,'public PreparedStatement loadParameters(PreparedStatement ps, HealthRecord bean) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), bean.getPatientID());\r\n    ps.setDouble((i++), bean.getHeight());\r\n    ps.setDouble((i++), bean.getWeight());\r\n    ps.setInt((i++), (bean.isSmoker() ? 1 : 0));\r\n    ps.setInt((i++), bean.getSmokingStatus());\r\n    ps.setInt((i++), bean.getBloodPressureN());\r\n    ps.setInt((i++), bean.getBloodPressureD());\r\n    ps.setInt((i++), bean.getCholesterolHDL());\r\n    ps.setInt((i++), bean.getCholesterolLDL());\r\n    ps.setInt((i++), bean.getCholesterolTri());\r\n    ps.setLong((i++), bean.getPersonnelID());\r\n    return ps;\r\n}'),(1289,'ResultSet rs','java.sql.ResultSet',0,301,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader',2364,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadSingle(java.sql.ResultSet)',0,'public HealthRecord loadSingle(ResultSet rs) throws SQLException {\r\n    HealthRecord hr = new HealthRecord();\r\n    hr.setBloodPressureN(rs.getInt(\"BloodPressureN\"));\r\n    hr.setBloodPressureD(rs.getInt(\"BloodPressureD\"));\r\n    hr.setCholesterolHDL(rs.getInt(\"CholesterolHDL\"));\r\n    hr.setCholesterolLDL(rs.getInt(\"CholesterolLDL\"));\r\n    hr.setCholesterolTri(rs.getInt(\"CholesterolTri\"));\r\n    hr.setDateRecorded(rs.getTimestamp(\"AsOfDate\"));\r\n    hr.setSmoker(rs.getInt(\"SmokingStatus\"));\r\n    hr.setHeight(rs.getDouble(\"Height\"));\r\n    hr.setWeight(rs.getDouble(\"Weight\"));\r\n    hr.setPersonnelID(rs.getLong(\"HCPID\"));\r\n    hr.setPatientID(rs.getLong(\"PatientID\"));\r\n    return hr;\r\n}'),(1290,'edu.ncsu.csc.itrust.beans.HealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,301,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader',2364,'edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadSingle(java.sql.ResultSet)',1,'public HealthRecord loadSingle(ResultSet rs) throws SQLException {\r\n    HealthRecord hr = new HealthRecord();\r\n    hr.setBloodPressureN(rs.getInt(\"BloodPressureN\"));\r\n    hr.setBloodPressureD(rs.getInt(\"BloodPressureD\"));\r\n    hr.setCholesterolHDL(rs.getInt(\"CholesterolHDL\"));\r\n    hr.setCholesterolLDL(rs.getInt(\"CholesterolLDL\"));\r\n    hr.setCholesterolTri(rs.getInt(\"CholesterolTri\"));\r\n    hr.setDateRecorded(rs.getTimestamp(\"AsOfDate\"));\r\n    hr.setSmoker(rs.getInt(\"SmokingStatus\"));\r\n    hr.setHeight(rs.getDouble(\"Height\"));\r\n    hr.setWeight(rs.getDouble(\"Weight\"));\r\n    hr.setPersonnelID(rs.getLong(\"HCPID\"));\r\n    hr.setPatientID(rs.getLong(\"PatientID\"));\r\n    return hr;\r\n}'),(1291,'ResultSet rs','java.sql.ResultSet',0,302,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader',2366,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadList(java.sql.ResultSet)',0,'public List<HospitalBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<HospitalBean> list = new ArrayList<HospitalBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1292,'ResultSet rs','java.sql.ResultSet',0,302,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader',2368,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadSingle(java.sql.ResultSet)',0,'public HospitalBean loadSingle(ResultSet rs) throws SQLException {\r\n    HospitalBean hosp = new HospitalBean(rs.getString(\"HospitalID\"), rs.getString(\"HospitalName\"), rs.getString(\"Address\"), rs.getString(\"City\"), rs.getString(\"State\"), rs.getString(\"Zip\"));\r\n    return hosp;\r\n}'),(1293,'edu.ncsu.csc.itrust.beans.HospitalBean','edu.ncsu.csc.itrust.beans.HospitalBean',258,302,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader',2368,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadSingle(java.sql.ResultSet)',1,'public HospitalBean loadSingle(ResultSet rs) throws SQLException {\r\n    HospitalBean hosp = new HospitalBean(rs.getString(\"HospitalID\"), rs.getString(\"HospitalName\"), rs.getString(\"Address\"), rs.getString(\"City\"), rs.getString(\"State\"), rs.getString(\"Zip\"));\r\n    return hosp;\r\n}'),(1294,'PreparedStatement ps','java.sql.PreparedStatement',0,302,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader',2367,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HospitalBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, HospitalBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1295,'HospitalBean bean','edu.ncsu.csc.itrust.beans.HospitalBean',258,302,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader',2367,'edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HospitalBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, HospitalBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1296,'ResultSet rs','java.sql.ResultSet',0,303,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader',2370,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadList(java.sql.ResultSet)',0,'public List<LOINCbean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<LOINCbean> list = new ArrayList<LOINCbean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1297,'ResultSet rs','java.sql.ResultSet',0,303,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader',2372,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadSingle(java.sql.ResultSet)',0,'public LOINCbean loadSingle(ResultSet rs) throws SQLException {\r\n    LOINCbean LOINC = new LOINCbean();\r\n    LOINC.setLabProcedureCode(rs.getString(\"LaboratoryProcedureCode\"));\r\n    LOINC.setComponent(rs.getString(\"Component\"));\r\n    LOINC.setKindOfProperty(rs.getString(\"KindOfProperty\"));\r\n    LOINC.setTimeAspect(rs.getString(\"TimeAspect\"));\r\n    LOINC.setSystem(rs.getString(\"System\"));\r\n    LOINC.setScaleType(rs.getString(\"ScaleType\"));\r\n    LOINC.setMethodType(rs.getString(\"MethodType\"));\r\n    return LOINC;\r\n}'),(1298,'edu.ncsu.csc.itrust.beans.LOINCbean','edu.ncsu.csc.itrust.beans.LOINCbean',259,303,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader',2372,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadSingle(java.sql.ResultSet)',1,'public LOINCbean loadSingle(ResultSet rs) throws SQLException {\r\n    LOINCbean LOINC = new LOINCbean();\r\n    LOINC.setLabProcedureCode(rs.getString(\"LaboratoryProcedureCode\"));\r\n    LOINC.setComponent(rs.getString(\"Component\"));\r\n    LOINC.setKindOfProperty(rs.getString(\"KindOfProperty\"));\r\n    LOINC.setTimeAspect(rs.getString(\"TimeAspect\"));\r\n    LOINC.setSystem(rs.getString(\"System\"));\r\n    LOINC.setScaleType(rs.getString(\"ScaleType\"));\r\n    LOINC.setMethodType(rs.getString(\"MethodType\"));\r\n    return LOINC;\r\n}'),(1299,'PreparedStatement ps','java.sql.PreparedStatement',0,303,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader',2371,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LOINCbean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, LOINCbean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1300,'LOINCbean bean','edu.ncsu.csc.itrust.beans.LOINCbean',259,303,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader',2371,'edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LOINCbean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, LOINCbean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1301,'ResultSet rs','java.sql.ResultSet',0,304,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader',2374,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadList(java.sql.ResultSet)',0,'public List<LabProcedureBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<LabProcedureBean> list = new ArrayList<LabProcedureBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1302,'ResultSet rs','java.sql.ResultSet',0,304,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader',2376,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadSingle(java.sql.ResultSet)',0,'public LabProcedureBean loadSingle(ResultSet rs) throws SQLException {\r\n    LabProcedureBean LabProcedure = new LabProcedureBean();\r\n    LabProcedure.setProcedureID(rs.getLong(\"LaboratoryProcedureID\"));\r\n    LabProcedure.setPid(rs.getLong(\"PatientMID\"));\r\n    LabProcedure.setLoinc(rs.getString(\"LaboratoryProcedureCode\"));\r\n    LabProcedure.setStatus(rs.getString(\"Status\"));\r\n    LabProcedure.setCommentary(rs.getString(\"Commentary\"));\r\n    LabProcedure.setResults(rs.getString(\"Results\"));\r\n    LabProcedure.setOvID(rs.getLong(\"OfficeVisitID\"));\r\n    LabProcedure.setTimestamp(rs.getTimestamp(\"UpdatedDate\"));\r\n    LabProcedure.setRights(rs.getString(\"Rights\"));\r\n    LabProcedure.setLTID(rs.getLong(\"LabTechID\"));\r\n    LabProcedure.setPriorityCode(rs.getInt(\"PriorityCode\"));\r\n    LabProcedure.setViewedByPatient(rs.getBoolean(\"ViewedByPatient\"));// must be set after status\r\n\r\n    LabProcedure.setNumericalResult(rs.getString(\"NumericalResults\"));\r\n    LabProcedure.setNumericalResultUnit(rs.getString(\"NumericalResultsUnit\"));\r\n    LabProcedure.setUpperBound(rs.getString(\"UpperBound\"));\r\n    LabProcedure.setLowerBound(rs.getString(\"LowerBound\"));\r\n    return LabProcedure;\r\n}'),(1303,'edu.ncsu.csc.itrust.beans.LabProcedureBean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,304,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader',2376,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadSingle(java.sql.ResultSet)',1,'public LabProcedureBean loadSingle(ResultSet rs) throws SQLException {\r\n    LabProcedureBean LabProcedure = new LabProcedureBean();\r\n    LabProcedure.setProcedureID(rs.getLong(\"LaboratoryProcedureID\"));\r\n    LabProcedure.setPid(rs.getLong(\"PatientMID\"));\r\n    LabProcedure.setLoinc(rs.getString(\"LaboratoryProcedureCode\"));\r\n    LabProcedure.setStatus(rs.getString(\"Status\"));\r\n    LabProcedure.setCommentary(rs.getString(\"Commentary\"));\r\n    LabProcedure.setResults(rs.getString(\"Results\"));\r\n    LabProcedure.setOvID(rs.getLong(\"OfficeVisitID\"));\r\n    LabProcedure.setTimestamp(rs.getTimestamp(\"UpdatedDate\"));\r\n    LabProcedure.setRights(rs.getString(\"Rights\"));\r\n    LabProcedure.setLTID(rs.getLong(\"LabTechID\"));\r\n    LabProcedure.setPriorityCode(rs.getInt(\"PriorityCode\"));\r\n    LabProcedure.setViewedByPatient(rs.getBoolean(\"ViewedByPatient\"));// must be set after status\r\n\r\n    LabProcedure.setNumericalResult(rs.getString(\"NumericalResults\"));\r\n    LabProcedure.setNumericalResultUnit(rs.getString(\"NumericalResultsUnit\"));\r\n    LabProcedure.setUpperBound(rs.getString(\"UpperBound\"));\r\n    LabProcedure.setLowerBound(rs.getString(\"LowerBound\"));\r\n    return LabProcedure;\r\n}'),(1304,'PreparedStatement ps','java.sql.PreparedStatement',0,304,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader',2375,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, LabProcedureBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1305,'LabProcedureBean bean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,304,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader',2375,'edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, LabProcedureBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1306,'ResultSet rs','java.sql.ResultSet',0,305,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader',2378,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadList(java.sql.ResultSet)',0,'public List<MedicationBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<MedicationBean> list = new ArrayList<MedicationBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1307,'ResultSet rs','java.sql.ResultSet',0,305,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader',2380,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadSingle(java.sql.ResultSet)',0,'public MedicationBean loadSingle(ResultSet rs) throws SQLException {\r\n    // MedicationBean med = new MedicationBean();\r\n    MedicationBean med = new MedicationBean(rs.getString(\"Code\"));\r\n    med.setDescription(rs.getString(\"Description\"));\r\n    return med;\r\n}'),(1308,'edu.ncsu.csc.itrust.beans.MedicationBean','edu.ncsu.csc.itrust.beans.MedicationBean',261,305,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader',2380,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadSingle(java.sql.ResultSet)',1,'public MedicationBean loadSingle(ResultSet rs) throws SQLException {\r\n    // MedicationBean med = new MedicationBean();\r\n    MedicationBean med = new MedicationBean(rs.getString(\"Code\"));\r\n    med.setDescription(rs.getString(\"Description\"));\r\n    return med;\r\n}'),(1309,'PreparedStatement ps','java.sql.PreparedStatement',0,305,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader',2379,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MedicationBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, MedicationBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1310,'MedicationBean bean','edu.ncsu.csc.itrust.beans.MedicationBean',261,305,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader',2379,'edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MedicationBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, MedicationBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1311,'ResultSet rs','java.sql.ResultSet',0,306,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader',2382,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadList(java.sql.ResultSet)',0,'public List<MessageBean> loadList(ResultSet rs) throws SQLException {\r\n    List<MessageBean> list = new ArrayList<MessageBean>();\r\n    while (rs.next())\r\n        list.add(loadSingle(rs));\r\n\r\n    return list;\r\n}'),(1312,'PreparedStatement ps','java.sql.PreparedStatement',0,306,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader',2383,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MessageBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, MessageBean message) throws SQLException {\r\n    ps.setLong(1, message.getFrom());\r\n    ps.setLong(2, message.getTo());\r\n    ps.setString(3, message.getBody());\r\n    ps.setString(4, message.getSubject());\r\n    ps.setInt(5, message.getRead());\r\n    ps.setLong(6, message.getParentMessageId());\r\n    ps.setLong(7, message.getOriginalMessageId());\r\n    return ps;\r\n}'),(1313,'MessageBean message','edu.ncsu.csc.itrust.beans.MessageBean',262,306,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader',2383,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MessageBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, MessageBean message) throws SQLException {\r\n    ps.setLong(1, message.getFrom());\r\n    ps.setLong(2, message.getTo());\r\n    ps.setString(3, message.getBody());\r\n    ps.setString(4, message.getSubject());\r\n    ps.setInt(5, message.getRead());\r\n    ps.setLong(6, message.getParentMessageId());\r\n    ps.setLong(7, message.getOriginalMessageId());\r\n    return ps;\r\n}'),(1314,'ResultSet rs','java.sql.ResultSet',0,306,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader',2384,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadSingle(java.sql.ResultSet)',0,'public MessageBean loadSingle(ResultSet rs) throws SQLException {\r\n    MessageBean message = new MessageBean();\r\n    message.setMessageId(rs.getLong(\"message_id\"));\r\n    message.setFrom(rs.getLong(\"from_id\"));\r\n    message.setTo(rs.getLong(\"to_id\"));\r\n    message.setSubject(rs.getString(\"subject\"));\r\n    message.setBody(rs.getString(\"message\"));\r\n    message.setSentDate(rs.getTimestamp(\"sent_date\"));\r\n    message.setRead(rs.getInt(\"been_read\"));\r\n    message.setParentMessageId(rs.getLong(\"parent_msg_id\"));\r\n    message.setOriginalMessageId(rs.getLong(\"original_msg_id\"));\r\n    return message;\r\n}'),(1315,'edu.ncsu.csc.itrust.beans.MessageBean','edu.ncsu.csc.itrust.beans.MessageBean',262,306,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader',2384,'edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadSingle(java.sql.ResultSet)',1,'public MessageBean loadSingle(ResultSet rs) throws SQLException {\r\n    MessageBean message = new MessageBean();\r\n    message.setMessageId(rs.getLong(\"message_id\"));\r\n    message.setFrom(rs.getLong(\"from_id\"));\r\n    message.setTo(rs.getLong(\"to_id\"));\r\n    message.setSubject(rs.getString(\"subject\"));\r\n    message.setBody(rs.getString(\"message\"));\r\n    message.setSentDate(rs.getTimestamp(\"sent_date\"));\r\n    message.setRead(rs.getInt(\"been_read\"));\r\n    message.setParentMessageId(rs.getLong(\"parent_msg_id\"));\r\n    message.setOriginalMessageId(rs.getLong(\"original_msg_id\"));\r\n    return message;\r\n}'),(1316,'ResultSet rs','java.sql.ResultSet',0,307,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader',2386,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadList(java.sql.ResultSet)',0,'public List<OfficeVisitBean> loadList(ResultSet rs) throws SQLException {\r\n    List<OfficeVisitBean> list = new ArrayList<OfficeVisitBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1317,'ResultSet rs','java.sql.ResultSet',0,307,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader',2388,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadSingle(java.sql.ResultSet)',0,'public OfficeVisitBean loadSingle(ResultSet rs) throws SQLException {\r\n    OfficeVisitBean ov = new OfficeVisitBean(rs.getInt(\"ID\"));\r\n    ov.setHcpID(rs.getLong(\"HCPID\"));\r\n    ov.setNotes(rs.getString(\"Notes\"));\r\n    ov.setPatientID(rs.getLong(\"PatientID\"));\r\n    ov.setHospitalID(rs.getString(\"HospitalID\"));\r\n    ov.setVisitDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"VisitDate\").getTime())));\r\n    ov.setERIncident(rs.getBoolean(\"IsERIncident\"));\r\n    return ov;\r\n}'),(1318,'edu.ncsu.csc.itrust.beans.OfficeVisitBean','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,307,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader',2388,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadSingle(java.sql.ResultSet)',1,'public OfficeVisitBean loadSingle(ResultSet rs) throws SQLException {\r\n    OfficeVisitBean ov = new OfficeVisitBean(rs.getInt(\"ID\"));\r\n    ov.setHcpID(rs.getLong(\"HCPID\"));\r\n    ov.setNotes(rs.getString(\"Notes\"));\r\n    ov.setPatientID(rs.getLong(\"PatientID\"));\r\n    ov.setHospitalID(rs.getString(\"HospitalID\"));\r\n    ov.setVisitDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"VisitDate\").getTime())));\r\n    ov.setERIncident(rs.getBoolean(\"IsERIncident\"));\r\n    return ov;\r\n}'),(1319,'PreparedStatement ps','java.sql.PreparedStatement',0,307,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader',2387,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OfficeVisitBean p) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1320,'OfficeVisitBean p','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,307,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader',2387,'edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OfficeVisitBean p) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1321,'ResultSet rs','java.sql.ResultSet',0,308,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader',2390,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadList(java.sql.ResultSet)',0,'public List<OperationalProfile> loadList(ResultSet rs) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1322,'PreparedStatement ps','java.sql.PreparedStatement',0,308,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader',2391,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OperationalProfile)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OperationalProfile bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1323,'OperationalProfile bean','edu.ncsu.csc.itrust.beans.OperationalProfile',264,308,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader',2391,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OperationalProfile)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OperationalProfile bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1324,'ResultSet rs','java.sql.ResultSet',0,308,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader',2392,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadSingle(java.sql.ResultSet)',0,'public OperationalProfile loadSingle(ResultSet rs) throws SQLException {\r\n    OperationalProfile op = new OperationalProfile();\r\n    int grandTotal = 0;\r\n    int grandPatient = 0;\r\n    int grandPersonnel = 0;\r\n    while (rs.next()) {\r\n        TransactionType type = TransactionType.parse(rs.getInt(\"TransactionCode\"));\r\n        int totalCount = rs.getInt(\"TotalCount\");\r\n        int patientCount = rs.getInt(\"PatientCount\");\r\n        int personnelCount = rs.getInt(\"PersonnelCount\");\r\n        op.getTotalCount().put(type, totalCount);\r\n        op.getPatientCount().put(type, patientCount);\r\n        op.getPersonnelCount().put(type, personnelCount);\r\n        grandTotal += totalCount;\r\n        grandPatient += patientCount;\r\n        grandPersonnel += personnelCount;\r\n    } \r\n    op.setNumTotalTransactions(grandTotal);\r\n    op.setNumPatientTransactions(grandPatient);\r\n    op.setNumPersonnelTransactions(grandPersonnel);\r\n    return op;\r\n}'),(1325,'edu.ncsu.csc.itrust.beans.OperationalProfile','edu.ncsu.csc.itrust.beans.OperationalProfile',264,308,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader',2392,'edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadSingle(java.sql.ResultSet)',1,'public OperationalProfile loadSingle(ResultSet rs) throws SQLException {\r\n    OperationalProfile op = new OperationalProfile();\r\n    int grandTotal = 0;\r\n    int grandPatient = 0;\r\n    int grandPersonnel = 0;\r\n    while (rs.next()) {\r\n        TransactionType type = TransactionType.parse(rs.getInt(\"TransactionCode\"));\r\n        int totalCount = rs.getInt(\"TotalCount\");\r\n        int patientCount = rs.getInt(\"PatientCount\");\r\n        int personnelCount = rs.getInt(\"PersonnelCount\");\r\n        op.getTotalCount().put(type, totalCount);\r\n        op.getPatientCount().put(type, patientCount);\r\n        op.getPersonnelCount().put(type, personnelCount);\r\n        grandTotal += totalCount;\r\n        grandPatient += patientCount;\r\n        grandPersonnel += personnelCount;\r\n    } \r\n    op.setNumTotalTransactions(grandTotal);\r\n    op.setNumPatientTransactions(grandPatient);\r\n    op.setNumPersonnelTransactions(grandPersonnel);\r\n    return op;\r\n}'),(1326,'ResultSet rs','java.sql.ResultSet',0,309,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader',2394,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadList(java.sql.ResultSet)',0,'public List<OverrideReasonBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<OverrideReasonBean> list = new ArrayList<OverrideReasonBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1327,'ResultSet rs','java.sql.ResultSet',0,309,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader',2396,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadSingle(java.sql.ResultSet)',0,'public OverrideReasonBean loadSingle(ResultSet rs) throws SQLException {\r\n    OverrideReasonBean reason = new OverrideReasonBean();\r\n    reason.setORCode(rs.getString(\"OverrideCode\"));\r\n    return reason;\r\n}'),(1328,'edu.ncsu.csc.itrust.beans.OverrideReasonBean','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,309,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader',2396,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadSingle(java.sql.ResultSet)',1,'public OverrideReasonBean loadSingle(ResultSet rs) throws SQLException {\r\n    OverrideReasonBean reason = new OverrideReasonBean();\r\n    reason.setORCode(rs.getString(\"OverrideCode\"));\r\n    return reason;\r\n}'),(1329,'PreparedStatement ps','java.sql.PreparedStatement',0,309,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader',2395,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1330,'OverrideReasonBean bean','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,309,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader',2395,'edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1331,'ResultSet rs','java.sql.ResultSet',0,310,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader',2398,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadList(java.sql.ResultSet)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadList(java.sql.ResultSet)\n */\r\npublic List<PatientInstructionsBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<PatientInstructionsBean> list = new ArrayList<PatientInstructionsBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1332,'ResultSet rs','java.sql.ResultSet',0,310,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader',2400,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadSingle(java.sql.ResultSet)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadSingle(java.sql.ResultSet)\n */\r\npublic PatientInstructionsBean loadSingle(ResultSet rs) throws SQLException {\r\n    PatientInstructionsBean bean = new PatientInstructionsBean();\r\n    bean.setName(rs.getString(\"Name\"));\r\n    bean.setComment(rs.getString(\"Comment\"));\r\n    bean.setUrl(rs.getString(\"URL\"));\r\n    bean.setModified(new Date(rs.getTimestamp(\"Modified\").getTime()));\r\n    bean.setId(rs.getLong(\"id\"));\r\n    // bean.setHcpid(rs.getLong(\"hcpid\"));\r\n    // bean.setPid(rs.getLong(\"pid\"));\r\n    bean.setVisitID(rs.getLong(\"visitID\"));\r\n    return bean;\r\n}'),(1333,'edu.ncsu.csc.itrust.beans.PatientInstructionsBean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,310,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader',2400,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadSingle(java.sql.ResultSet)',1,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadSingle(java.sql.ResultSet)\n */\r\npublic PatientInstructionsBean loadSingle(ResultSet rs) throws SQLException {\r\n    PatientInstructionsBean bean = new PatientInstructionsBean();\r\n    bean.setName(rs.getString(\"Name\"));\r\n    bean.setComment(rs.getString(\"Comment\"));\r\n    bean.setUrl(rs.getString(\"URL\"));\r\n    bean.setModified(new Date(rs.getTimestamp(\"Modified\").getTime()));\r\n    bean.setId(rs.getLong(\"id\"));\r\n    // bean.setHcpid(rs.getLong(\"hcpid\"));\r\n    // bean.setPid(rs.getLong(\"pid\"));\r\n    bean.setVisitID(rs.getLong(\"visitID\"));\r\n    return bean;\r\n}'),(1334,'PreparedStatement ps','java.sql.PreparedStatement',0,310,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader',2399,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadParameters(java.sql.PreparedStatement, java.lang.Object)\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, PatientInstructionsBean bean) throws SQLException {\r\n    ps.setLong(1, bean.getVisitID());\r\n    ps.setTimestamp(2, new Timestamp(bean.getModified().getTime()));\r\n    ps.setString(3, bean.getName());\r\n    ps.setString(4, bean.getUrl());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}'),(1335,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,310,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader',2399,'edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadParameters(java.sql.PreparedStatement, java.lang.Object)\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, PatientInstructionsBean bean) throws SQLException {\r\n    ps.setLong(1, bean.getVisitID());\r\n    ps.setTimestamp(2, new Timestamp(bean.getModified().getTime()));\r\n    ps.setString(3, bean.getName());\r\n    ps.setString(4, bean.getUrl());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}'),(1336,'ResultSet rs','java.sql.ResultSet',0,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2403,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadList(java.sql.ResultSet)',0,'public List<PatientBean> loadList(ResultSet rs) throws SQLException {\r\n    List<PatientBean> list = new ArrayList<PatientBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1337,'ResultSet rs','java.sql.ResultSet',0,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2402,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadCommon(java.sql.ResultSet,edu.ncsu.csc.itrust.beans.PatientBean)',0,'private void loadCommon(ResultSet rs, PatientBean p) throws SQLException {\r\n    p.setMID(rs.getInt(\"MID\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setLastName(rs.getString(\"LastName\"));\r\n    Date dateOfBirth = rs.getDate(\"DateOfBirth\");\r\n    if (dateOfBirth != null) {\r\n        p.setDateOfBirthStr(DATE_FORMAT.format(dateOfBirth));\r\n    }\r\n    Date dateOfDeath = rs.getDate(\"DateOfDeath\");\r\n    if (dateOfDeath != null) {\r\n        p.setDateOfDeathStr(DATE_FORMAT.format(dateOfDeath));\r\n    }\r\n    p.setCauseOfDeath(rs.getString(\"CauseOfDeath\"));\r\n    p.setEmail(rs.getString(\"Email\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"City\"));\r\n    p.setState(rs.getString(\"State\"));\r\n    p.setZip(rs.getString(\"Zip\"));\r\n    p.setPhone(rs.getString(\"phone\"));\r\n    p.setEmergencyName(rs.getString(\"eName\"));\r\n    p.setEmergencyPhone(rs.getString(\"ePhone\"));\r\n    p.setIcName(rs.getString(\"icName\"));\r\n    p.setIcAddress1(rs.getString(\"icAddress1\"));\r\n    p.setIcAddress2(rs.getString(\"icAddress2\"));\r\n    p.setIcCity(rs.getString(\"icCity\"));\r\n    p.setIcState(rs.getString(\"icState\"));\r\n    p.setIcZip(rs.getString(\"icZip\"));\r\n    p.setIcPhone(rs.getString(\"icPhone\"));\r\n    p.setIcID(rs.getString(\"icID\"));\r\n    p.setMotherMID(rs.getString(\"MotherMID\"));\r\n    p.setFatherMID(rs.getString(\"FatherMID\"));\r\n    p.setBloodTypeStr(rs.getString(\"BloodType\"));\r\n    p.setEthnicityStr(rs.getString(\"Ethnicity\"));\r\n    p.setGenderStr(rs.getString(\"Gender\"));\r\n    p.setTopicalNotes(rs.getString(\"TopicalNotes\"));\r\n    p.setCreditCardType(rs.getString(\"CreditCardType\"));\r\n    p.setCreditCardNumber(rs.getString(\"CreditCardNumber\"));\r\n    p.setDirectionsToHome(rs.getString(\"DirectionsToHome\"));\r\n    p.setReligion(rs.getString(\"Religion\"));\r\n    p.setLanguage(rs.getString(\"Language\"));\r\n    p.setSpiritualPractices(rs.getString(\"SpiritualPractices\"));\r\n    p.setAlternateName(rs.getString(\"AlternateName\"));\r\n    Date dateOfDeactivation = rs.getDate(\"DateOfDeactivation\");\r\n    if (dateOfDeactivation != null) {\r\n        p.setDateOfDeactivationStr(DATE_FORMAT.format(dateOfDeactivation));\r\n    }\r\n}'),(1338,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2402,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadCommon(java.sql.ResultSet,edu.ncsu.csc.itrust.beans.PatientBean)',0,'private void loadCommon(ResultSet rs, PatientBean p) throws SQLException {\r\n    p.setMID(rs.getInt(\"MID\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setLastName(rs.getString(\"LastName\"));\r\n    Date dateOfBirth = rs.getDate(\"DateOfBirth\");\r\n    if (dateOfBirth != null) {\r\n        p.setDateOfBirthStr(DATE_FORMAT.format(dateOfBirth));\r\n    }\r\n    Date dateOfDeath = rs.getDate(\"DateOfDeath\");\r\n    if (dateOfDeath != null) {\r\n        p.setDateOfDeathStr(DATE_FORMAT.format(dateOfDeath));\r\n    }\r\n    p.setCauseOfDeath(rs.getString(\"CauseOfDeath\"));\r\n    p.setEmail(rs.getString(\"Email\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"City\"));\r\n    p.setState(rs.getString(\"State\"));\r\n    p.setZip(rs.getString(\"Zip\"));\r\n    p.setPhone(rs.getString(\"phone\"));\r\n    p.setEmergencyName(rs.getString(\"eName\"));\r\n    p.setEmergencyPhone(rs.getString(\"ePhone\"));\r\n    p.setIcName(rs.getString(\"icName\"));\r\n    p.setIcAddress1(rs.getString(\"icAddress1\"));\r\n    p.setIcAddress2(rs.getString(\"icAddress2\"));\r\n    p.setIcCity(rs.getString(\"icCity\"));\r\n    p.setIcState(rs.getString(\"icState\"));\r\n    p.setIcZip(rs.getString(\"icZip\"));\r\n    p.setIcPhone(rs.getString(\"icPhone\"));\r\n    p.setIcID(rs.getString(\"icID\"));\r\n    p.setMotherMID(rs.getString(\"MotherMID\"));\r\n    p.setFatherMID(rs.getString(\"FatherMID\"));\r\n    p.setBloodTypeStr(rs.getString(\"BloodType\"));\r\n    p.setEthnicityStr(rs.getString(\"Ethnicity\"));\r\n    p.setGenderStr(rs.getString(\"Gender\"));\r\n    p.setTopicalNotes(rs.getString(\"TopicalNotes\"));\r\n    p.setCreditCardType(rs.getString(\"CreditCardType\"));\r\n    p.setCreditCardNumber(rs.getString(\"CreditCardNumber\"));\r\n    p.setDirectionsToHome(rs.getString(\"DirectionsToHome\"));\r\n    p.setReligion(rs.getString(\"Religion\"));\r\n    p.setLanguage(rs.getString(\"Language\"));\r\n    p.setSpiritualPractices(rs.getString(\"SpiritualPractices\"));\r\n    p.setAlternateName(rs.getString(\"AlternateName\"));\r\n    Date dateOfDeactivation = rs.getDate(\"DateOfDeactivation\");\r\n    if (dateOfDeactivation != null) {\r\n        p.setDateOfDeactivationStr(DATE_FORMAT.format(dateOfDeactivation));\r\n    }\r\n}'),(1339,'ResultSet rs','java.sql.ResultSet',0,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2405,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadSingle(java.sql.ResultSet)',0,'public PatientBean loadSingle(ResultSet rs) throws SQLException {\r\n    PatientBean p = new PatientBean();\r\n    loadCommon(rs, p);\r\n    return p;\r\n}'),(1340,'edu.ncsu.csc.itrust.beans.PatientBean','edu.ncsu.csc.itrust.beans.PatientBean',266,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2405,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadSingle(java.sql.ResultSet)',1,'public PatientBean loadSingle(ResultSet rs) throws SQLException {\r\n    PatientBean p = new PatientBean();\r\n    loadCommon(rs, p);\r\n    return p;\r\n}'),(1341,'ResultSet rs','java.sql.ResultSet',0,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2406,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadSingleHistory(java.sql.ResultSet)',0,'public PatientHistoryBean loadSingleHistory(ResultSet rs) throws SQLException {\r\n    PatientHistoryBean p = new PatientHistoryBean();\r\n    p.setChangeMID(rs.getLong(\"changeMID\"));\r\n    Date changeDate = rs.getDate(\"changeDate\");\r\n    if (changeDate != null) {\r\n        p.setChangeDateStr(DATE_FORMAT.format(changeDate));\r\n    }\r\n    loadCommon(rs, p);\r\n    return p;\r\n}'),(1342,'edu.ncsu.csc.itrust.beans.PatientHistoryBean','edu.ncsu.csc.itrust.beans.PatientHistoryBean',267,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2406,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadSingleHistory(java.sql.ResultSet)',1,'public PatientHistoryBean loadSingleHistory(ResultSet rs) throws SQLException {\r\n    PatientHistoryBean p = new PatientHistoryBean();\r\n    p.setChangeMID(rs.getLong(\"changeMID\"));\r\n    Date changeDate = rs.getDate(\"changeDate\");\r\n    if (changeDate != null) {\r\n        p.setChangeDateStr(DATE_FORMAT.format(changeDate));\r\n    }\r\n    loadCommon(rs, p);\r\n    return p;\r\n}'),(1343,'PreparedStatement ps','java.sql.PreparedStatement',0,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2404,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PatientBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getEmail());\r\n    // ps.setString(i++, p.getSecurityQuestion());\r\n    // ps.setString(i++, p.getSecurityAnswer());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getEmergencyName());\r\n    ps.setString((i++), p.getEmergencyPhone());\r\n    ps.setString((i++), p.getIcName());\r\n    ps.setString((i++), p.getIcAddress1());\r\n    ps.setString((i++), p.getIcAddress2());\r\n    ps.setString((i++), p.getIcCity());\r\n    ps.setString((i++), p.getIcState());\r\n    ps.setString((i++), p.getIcZip());\r\n    ps.setString((i++), p.getIcPhone());\r\n    ps.setString((i++), p.getIcID());\r\n    Date date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfBirthStr()).getTime());\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n    }\r\n    ps.setDate((i++), date);\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeathStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeathStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    ps.setString((i++), p.getCauseOfDeath());\r\n    ps.setString((i++), p.getMotherMID());\r\n    ps.setString((i++), p.getFatherMID());\r\n    ps.setString((i++), p.getBloodType().getName());\r\n    ps.setString((i++), p.getEthnicity().getName());\r\n    ps.setString((i++), p.getGender().getName());\r\n    ps.setString((i++), p.getTopicalNotes());\r\n    ps.setString((i++), p.getCreditCardType());\r\n    ps.setString((i++), p.getCreditCardNumber());\r\n    ps.setString((i++), p.getDirectionsToHome());\r\n    ps.setString((i++), p.getReligion());\r\n    ps.setString((i++), p.getLanguage());\r\n    ps.setString((i++), p.getSpiritualPractices());\r\n    ps.setString((i++), p.getAlternateName());\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeactivationStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    } catch (NullPointerException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    return ps;\r\n}'),(1344,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,311,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader',2404,'edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PatientBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getEmail());\r\n    // ps.setString(i++, p.getSecurityQuestion());\r\n    // ps.setString(i++, p.getSecurityAnswer());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getEmergencyName());\r\n    ps.setString((i++), p.getEmergencyPhone());\r\n    ps.setString((i++), p.getIcName());\r\n    ps.setString((i++), p.getIcAddress1());\r\n    ps.setString((i++), p.getIcAddress2());\r\n    ps.setString((i++), p.getIcCity());\r\n    ps.setString((i++), p.getIcState());\r\n    ps.setString((i++), p.getIcZip());\r\n    ps.setString((i++), p.getIcPhone());\r\n    ps.setString((i++), p.getIcID());\r\n    Date date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfBirthStr()).getTime());\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n    }\r\n    ps.setDate((i++), date);\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeathStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeathStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    ps.setString((i++), p.getCauseOfDeath());\r\n    ps.setString((i++), p.getMotherMID());\r\n    ps.setString((i++), p.getFatherMID());\r\n    ps.setString((i++), p.getBloodType().getName());\r\n    ps.setString((i++), p.getEthnicity().getName());\r\n    ps.setString((i++), p.getGender().getName());\r\n    ps.setString((i++), p.getTopicalNotes());\r\n    ps.setString((i++), p.getCreditCardType());\r\n    ps.setString((i++), p.getCreditCardNumber());\r\n    ps.setString((i++), p.getDirectionsToHome());\r\n    ps.setString((i++), p.getReligion());\r\n    ps.setString((i++), p.getLanguage());\r\n    ps.setString((i++), p.getSpiritualPractices());\r\n    ps.setString((i++), p.getAlternateName());\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeactivationStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    } catch (NullPointerException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    return ps;\r\n}'),(1345,'ResultSet rs','java.sql.ResultSet',0,312,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader',2408,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadList(java.sql.ResultSet)',0,'public List<PersonnelBean> loadList(ResultSet rs) throws SQLException {\r\n    List<PersonnelBean> list = new ArrayList<PersonnelBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1346,'ResultSet rs','java.sql.ResultSet',0,312,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader',2410,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadSingle(java.sql.ResultSet)',0,'public PersonnelBean loadSingle(ResultSet rs) throws SQLException {\r\n    PersonnelBean p = new PersonnelBean();\r\n    p.setMID(rs.getLong(\"MID\"));\r\n    p.setAMID(rs.getLong(\"amid\"));\r\n    p.setRoleString(rs.getString(\"role\"));\r\n    p.setLastName(rs.getString(\"lastName\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setPhone(rs.getString(\"phone\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"city\"));\r\n    p.setState(rs.getString(\"state\"));\r\n    p.setZip(rs.getString(\"zip\"));\r\n    p.setEmail(rs.getString(\"email\"));\r\n    p.setSpecialty(rs.getString(\"specialty\"));\r\n    return p;\r\n}'),(1347,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,312,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader',2410,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadSingle(java.sql.ResultSet)',1,'public PersonnelBean loadSingle(ResultSet rs) throws SQLException {\r\n    PersonnelBean p = new PersonnelBean();\r\n    p.setMID(rs.getLong(\"MID\"));\r\n    p.setAMID(rs.getLong(\"amid\"));\r\n    p.setRoleString(rs.getString(\"role\"));\r\n    p.setLastName(rs.getString(\"lastName\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setPhone(rs.getString(\"phone\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"city\"));\r\n    p.setState(rs.getString(\"state\"));\r\n    p.setZip(rs.getString(\"zip\"));\r\n    p.setEmail(rs.getString(\"email\"));\r\n    p.setSpecialty(rs.getString(\"specialty\"));\r\n    return p;\r\n}'),(1348,'PreparedStatement ps','java.sql.PreparedStatement',0,312,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader',2409,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PersonnelBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), p.getAMID());\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getSpecialty());\r\n    ps.setString((i++), p.getEmail());\r\n    return ps;\r\n}'),(1349,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,312,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader',2409,'edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PersonnelBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), p.getAMID());\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getSpecialty());\r\n    ps.setString((i++), p.getEmail());\r\n    return ps;\r\n}'),(1350,'ResultSet rs','java.sql.ResultSet',0,313,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader',2412,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadList(java.sql.ResultSet)',0,'public List<PrescriptionBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1351,'ResultSet rs','java.sql.ResultSet',0,313,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader',2414,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadSingle(java.sql.ResultSet)',0,'public PrescriptionBean loadSingle(ResultSet rs) throws SQLException {\r\n    PrescriptionBean pres = new PrescriptionBean();\r\n    pres.setId(rs.getLong(\"ID\"));\r\n    pres.setVisitID(rs.getInt(\"VisitID\"));\r\n    pres.setStartDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"StartDate\").getTime())));\r\n    pres.setEndDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"EndDate\").getTime())));\r\n    pres.setDosage(rs.getInt(\"Dosage\"));\r\n    pres.setInstructions(rs.getString(\"Instructions\"));\r\n    pres.setMedication(medLoader.loadSingle(rs));\r\n    pres.setOverrideReasonOther(rs.getString(\"OverrideOther\"));\r\n    return pres;\r\n}'),(1352,'edu.ncsu.csc.itrust.beans.PrescriptionBean','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,313,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader',2414,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadSingle(java.sql.ResultSet)',1,'public PrescriptionBean loadSingle(ResultSet rs) throws SQLException {\r\n    PrescriptionBean pres = new PrescriptionBean();\r\n    pres.setId(rs.getLong(\"ID\"));\r\n    pres.setVisitID(rs.getInt(\"VisitID\"));\r\n    pres.setStartDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"StartDate\").getTime())));\r\n    pres.setEndDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"EndDate\").getTime())));\r\n    pres.setDosage(rs.getInt(\"Dosage\"));\r\n    pres.setInstructions(rs.getString(\"Instructions\"));\r\n    pres.setMedication(medLoader.loadSingle(rs));\r\n    pres.setOverrideReasonOther(rs.getString(\"OverrideOther\"));\r\n    return pres;\r\n}'),(1353,'PreparedStatement ps','java.sql.PreparedStatement',0,313,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader',2413,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionBean pres) throws SQLException {\r\n    ps.setLong(1, pres.getVisitID());\r\n    ps.setString(2, pres.getMedication().getNDCode());\r\n    ps.setDate(3, new Date(pres.getStartDate().getTime()));\r\n    ps.setDate(4, new Date(pres.getEndDate().getTime()));\r\n    ps.setInt(5, pres.getDosage());\r\n    ps.setString(6, pres.getInstructions());\r\n    ps.setString(7, pres.getOverrideReasonOther());\r\n    return ps;\r\n}'),(1354,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,313,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader',2413,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionBean pres) throws SQLException {\r\n    ps.setLong(1, pres.getVisitID());\r\n    ps.setString(2, pres.getMedication().getNDCode());\r\n    ps.setDate(3, new Date(pres.getStartDate().getTime()));\r\n    ps.setDate(4, new Date(pres.getEndDate().getTime()));\r\n    ps.setInt(5, pres.getDosage());\r\n    ps.setString(6, pres.getInstructions());\r\n    ps.setString(7, pres.getOverrideReasonOther());\r\n    return ps;\r\n}'),(1355,'ResultSet rs','java.sql.ResultSet',0,314,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader',2416,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadList(java.sql.ResultSet)',0,'public List<PrescriptionReportBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<PrescriptionReportBean> list = new ArrayList<PrescriptionReportBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1356,'ResultSet rs','java.sql.ResultSet',0,314,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader',2418,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadSingle(java.sql.ResultSet)',0,'public PrescriptionReportBean loadSingle(ResultSet rs) throws SQLException {\r\n    PrescriptionReportBean pres = new PrescriptionReportBean();\r\n    pres.setOfficeVisit(ovLoader.loadSingle(rs));\r\n    pres.setPrescription(presLoader.loadSingle(rs));\r\n    return pres;\r\n}'),(1357,'edu.ncsu.csc.itrust.beans.PrescriptionReportBean','edu.ncsu.csc.itrust.beans.PrescriptionReportBean',272,314,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader',2418,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadSingle(java.sql.ResultSet)',1,'public PrescriptionReportBean loadSingle(ResultSet rs) throws SQLException {\r\n    PrescriptionReportBean pres = new PrescriptionReportBean();\r\n    pres.setOfficeVisit(ovLoader.loadSingle(rs));\r\n    pres.setPrescription(presLoader.loadSingle(rs));\r\n    return pres;\r\n}'),(1358,'PreparedStatement ps','java.sql.PreparedStatement',0,314,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader',2417,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionReportBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionReportBean pres) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1359,'PrescriptionReportBean pres','edu.ncsu.csc.itrust.beans.PrescriptionReportBean',272,314,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader',2417,'edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionReportBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionReportBean pres) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1360,'boolean loadOVProcedureID','boolean',0,315,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader',2420,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.-init-(boolean)',0,'public ProcedureBeanLoader(boolean loadOVProcedureID) {\r\n    this.loadOVProcedureID = loadOVProcedureID;\r\n}'),(1361,'ResultSet rs','java.sql.ResultSet',0,315,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader',2421,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadList(java.sql.ResultSet)',0,'public List<ProcedureBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<ProcedureBean> list = new ArrayList<ProcedureBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1362,'ResultSet rs','java.sql.ResultSet',0,315,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader',2423,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadSingle(java.sql.ResultSet)',0,'public ProcedureBean loadSingle(ResultSet rs) throws SQLException {\r\n    ProcedureBean procedure = new ProcedureBean(rs.getString(\"Code\"));\r\n    procedure.setDescription(rs.getString(\"Description\"));\r\n    procedure.setAttribute(rs.getString(\"Attribute\"));\r\n    if (loadOVProcedureID) {\r\n        procedure.setOvProcedureID(rs.getLong(\"ID\"));\r\n        procedure.setDate(rs.getDate(\"visitDate\"));\r\n    }\r\n    return procedure;\r\n}'),(1363,'edu.ncsu.csc.itrust.beans.ProcedureBean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,315,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader',2423,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadSingle(java.sql.ResultSet)',1,'public ProcedureBean loadSingle(ResultSet rs) throws SQLException {\r\n    ProcedureBean procedure = new ProcedureBean(rs.getString(\"Code\"));\r\n    procedure.setDescription(rs.getString(\"Description\"));\r\n    procedure.setAttribute(rs.getString(\"Attribute\"));\r\n    if (loadOVProcedureID) {\r\n        procedure.setOvProcedureID(rs.getLong(\"ID\"));\r\n        procedure.setDate(rs.getDate(\"visitDate\"));\r\n    }\r\n    return procedure;\r\n}'),(1364,'PreparedStatement ps','java.sql.PreparedStatement',0,315,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader',2422,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ProcedureBean bean) throws SQLException {\r\n    ps.setString(1, bean.getDescription());\r\n    return ps;\r\n}'),(1365,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,315,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader',2422,'edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ProcedureBean bean) throws SQLException {\r\n    ps.setString(1, bean.getDescription());\r\n    return ps;\r\n}'),(1366,'ResultSet rs','java.sql.ResultSet',0,316,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader',2425,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadList(java.sql.ResultSet)',0,'public List<ReferralBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<ReferralBean> list = new ArrayList<ReferralBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1367,'ResultSet rs','java.sql.ResultSet',0,316,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader',2427,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadSingle(java.sql.ResultSet)',0,'public ReferralBean loadSingle(ResultSet rs) throws SQLException {\r\n    ReferralBean ref = new ReferralBean();\r\n    // ERIC: fixed to correct for the mysql database bug plaguing java 1.5\r\n    ref.setId(rs.getInt(\"id\"));\r\n    ref.setSenderID(rs.getLong(\"SenderID\"));\r\n    ref.setReceiverID(rs.getLong(\"ReceiverID\"));\r\n    ref.setPatientID(rs.getInt(\"PatientID\"));\r\n    ref.setReferralDetails(rs.getString(\"ReferralDetails\"));\r\n    ref.setOvid(rs.getLong(\"OVID\"));\r\n    ref.setTimeStamp(ReferralBeanLoader.dateFormat.format(rs.getTimestamp(\"TimeStamp\")));\r\n    ref.setViewedByHCP(rs.getBoolean(\"viewed_by_HCP\"));\r\n    ref.setViewedByPatient(rs.getBoolean(\"viewed_by_patient\"));\r\n    ref.setPriority(rs.getInt(\"PriorityCode\"));\r\n    return ref;\r\n}'),(1368,'edu.ncsu.csc.itrust.beans.ReferralBean','edu.ncsu.csc.itrust.beans.ReferralBean',274,316,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader',2427,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadSingle(java.sql.ResultSet)',1,'public ReferralBean loadSingle(ResultSet rs) throws SQLException {\r\n    ReferralBean ref = new ReferralBean();\r\n    // ERIC: fixed to correct for the mysql database bug plaguing java 1.5\r\n    ref.setId(rs.getInt(\"id\"));\r\n    ref.setSenderID(rs.getLong(\"SenderID\"));\r\n    ref.setReceiverID(rs.getLong(\"ReceiverID\"));\r\n    ref.setPatientID(rs.getInt(\"PatientID\"));\r\n    ref.setReferralDetails(rs.getString(\"ReferralDetails\"));\r\n    ref.setOvid(rs.getLong(\"OVID\"));\r\n    ref.setTimeStamp(ReferralBeanLoader.dateFormat.format(rs.getTimestamp(\"TimeStamp\")));\r\n    ref.setViewedByHCP(rs.getBoolean(\"viewed_by_HCP\"));\r\n    ref.setViewedByPatient(rs.getBoolean(\"viewed_by_patient\"));\r\n    ref.setPriority(rs.getInt(\"PriorityCode\"));\r\n    return ref;\r\n}'),(1369,'PreparedStatement ps','java.sql.PreparedStatement',0,316,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader',2426,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ReferralBean ref) throws SQLException {\r\n    ps.setLong(1, ref.getPatientID());\r\n    ps.setLong(2, ref.getSenderID());\r\n    ps.setLong(3, ref.getReceiverID());\r\n    ps.setString(4, ref.getReferralDetails());\r\n    ps.setLong(5, ref.getOvid());\r\n    ps.setBoolean(6, ref.isViewedByPatient());\r\n    ps.setBoolean(7, ref.isViewedByHCP());\r\n    ps.setInt(8, ref.getPriority());\r\n    return ps;\r\n}'),(1370,'ReferralBean ref','edu.ncsu.csc.itrust.beans.ReferralBean',274,316,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader',2426,'edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReferralBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ReferralBean ref) throws SQLException {\r\n    ps.setLong(1, ref.getPatientID());\r\n    ps.setLong(2, ref.getSenderID());\r\n    ps.setLong(3, ref.getReceiverID());\r\n    ps.setString(4, ref.getReferralDetails());\r\n    ps.setLong(5, ref.getOvid());\r\n    ps.setBoolean(6, ref.isViewedByPatient());\r\n    ps.setBoolean(7, ref.isViewedByHCP());\r\n    ps.setInt(8, ref.getPriority());\r\n    return ps;\r\n}'),(1371,'ResultSet rs','java.sql.ResultSet',0,317,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader',2429,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadList(java.sql.ResultSet)',0,'public List<RemoteMonitoringDataBean> loadList(ResultSet rs) throws SQLException {\r\n    List<RemoteMonitoringDataBean> list = new ArrayList<RemoteMonitoringDataBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1372,'PreparedStatement ps','java.sql.PreparedStatement',0,317,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader',2430,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, RemoteMonitoringDataBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1373,'RemoteMonitoringDataBean bean','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,317,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader',2430,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, RemoteMonitoringDataBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1374,'ResultSet rs','java.sql.ResultSet',0,317,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader',2431,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadSingle(java.sql.ResultSet)',0,'public RemoteMonitoringDataBean loadSingle(ResultSet rs) throws SQLException {\r\n    RemoteMonitoringDataBean d = new RemoteMonitoringDataBean();\r\n    d.setLoggedInMID(rs.getLong(\"PatientID\"));\r\n    d.setSystolicBloodPressure(rs.getInt(\"systolicBloodPressure\"));\r\n    d.setDiastolicBloodPressure(rs.getInt(\"diastolicBloodPressure\"));\r\n    d.setGlucoseLevel(rs.getInt(\"glucoseLevel\"));\r\n    d.setHeight(rs.getFloat(\"height\"));\r\n    d.setWeight(rs.getFloat(\"weight\"));\r\n    d.setPedometerReading(rs.getInt(\"pedometerReading\"));\r\n    d.setTime(rs.getTimestamp(\"timeLogged\"));\r\n    d.setReporterRole(rs.getString(\"ReporterRole\"));\r\n    d.setReporterMID(rs.getLong(\"ReporterID\"));\r\n    return d;\r\n}'),(1375,'edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,317,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader',2431,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadSingle(java.sql.ResultSet)',1,'public RemoteMonitoringDataBean loadSingle(ResultSet rs) throws SQLException {\r\n    RemoteMonitoringDataBean d = new RemoteMonitoringDataBean();\r\n    d.setLoggedInMID(rs.getLong(\"PatientID\"));\r\n    d.setSystolicBloodPressure(rs.getInt(\"systolicBloodPressure\"));\r\n    d.setDiastolicBloodPressure(rs.getInt(\"diastolicBloodPressure\"));\r\n    d.setGlucoseLevel(rs.getInt(\"glucoseLevel\"));\r\n    d.setHeight(rs.getFloat(\"height\"));\r\n    d.setWeight(rs.getFloat(\"weight\"));\r\n    d.setPedometerReading(rs.getInt(\"pedometerReading\"));\r\n    d.setTime(rs.getTimestamp(\"timeLogged\"));\r\n    d.setReporterRole(rs.getString(\"ReporterRole\"));\r\n    d.setReporterMID(rs.getLong(\"ReporterID\"));\r\n    return d;\r\n}'),(1376,'ResultSet rs','java.sql.ResultSet',0,318,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader',2433,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadList(java.sql.ResultSet)',0,'public List<TelemedicineBean> loadList(ResultSet rs) throws SQLException {\r\n    List<TelemedicineBean> list = new ArrayList<TelemedicineBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1377,'PreparedStatement ps','java.sql.PreparedStatement',0,318,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader',2434,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, TelemedicineBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1378,'TelemedicineBean bean','edu.ncsu.csc.itrust.beans.TelemedicineBean',280,318,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader',2434,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, TelemedicineBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1379,'ResultSet rs','java.sql.ResultSet',0,318,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader',2435,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadSingle(java.sql.ResultSet)',0,'public TelemedicineBean loadSingle(ResultSet rs) throws SQLException {\r\n    TelemedicineBean d = new TelemedicineBean();\r\n    d.setSystolicBloodPressureAllowed(rs.getBoolean(\"SystolicBloodPressure\"));\r\n    d.setDiastolicBloodPressureAllowed(rs.getBoolean(\"DiastolicBloodPressure\"));\r\n    d.setGlucoseLevelAllowed(rs.getBoolean(\"GlucoseLevel\"));\r\n    d.setHeightAllowed(rs.getBoolean(\"Height\"));\r\n    d.setWeightAllowed(rs.getBoolean(\"Weight\"));\r\n    d.setPedometerReadingAllowed(rs.getBoolean(\"PedometerReading\"));\r\n    return d;\r\n}'),(1380,'edu.ncsu.csc.itrust.beans.TelemedicineBean','edu.ncsu.csc.itrust.beans.TelemedicineBean',280,318,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader',2435,'edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadSingle(java.sql.ResultSet)',1,'public TelemedicineBean loadSingle(ResultSet rs) throws SQLException {\r\n    TelemedicineBean d = new TelemedicineBean();\r\n    d.setSystolicBloodPressureAllowed(rs.getBoolean(\"SystolicBloodPressure\"));\r\n    d.setDiastolicBloodPressureAllowed(rs.getBoolean(\"DiastolicBloodPressure\"));\r\n    d.setGlucoseLevelAllowed(rs.getBoolean(\"GlucoseLevel\"));\r\n    d.setHeightAllowed(rs.getBoolean(\"Height\"));\r\n    d.setWeightAllowed(rs.getBoolean(\"Weight\"));\r\n    d.setPedometerReadingAllowed(rs.getBoolean(\"PedometerReading\"));\r\n    return d;\r\n}'),(1381,'ResultSet rs','java.sql.ResultSet',0,319,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader',2437,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadList(java.sql.ResultSet)',0,'public List<ReportRequestBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<ReportRequestBean> list = new ArrayList<ReportRequestBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1382,'ResultSet rs','java.sql.ResultSet',0,319,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader',2439,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadSingle(java.sql.ResultSet)',0,'public ReportRequestBean loadSingle(ResultSet rs) throws SQLException {\r\n    ReportRequestBean b = new ReportRequestBean();\r\n    b.setID(rs.getLong(\"ID\"));\r\n    b.setRequesterMID(rs.getLong(\"RequesterMID\"));\r\n    b.setPatientMID(rs.getLong(\"PatientMID\"));\r\n    b.setRequestedDate(rs.getTimestamp(\"RequestedDate\"));\r\n    b.setViewedDate(rs.getTimestamp(\"ViewedDate\"));\r\n    b.setStatus(rs.getString(\"Status\"));\r\n    return b;\r\n}'),(1383,'edu.ncsu.csc.itrust.beans.ReportRequestBean','edu.ncsu.csc.itrust.beans.ReportRequestBean',276,319,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader',2439,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadSingle(java.sql.ResultSet)',1,'public ReportRequestBean loadSingle(ResultSet rs) throws SQLException {\r\n    ReportRequestBean b = new ReportRequestBean();\r\n    b.setID(rs.getLong(\"ID\"));\r\n    b.setRequesterMID(rs.getLong(\"RequesterMID\"));\r\n    b.setPatientMID(rs.getLong(\"PatientMID\"));\r\n    b.setRequestedDate(rs.getTimestamp(\"RequestedDate\"));\r\n    b.setViewedDate(rs.getTimestamp(\"ViewedDate\"));\r\n    b.setStatus(rs.getString(\"Status\"));\r\n    return b;\r\n}'),(1384,'PreparedStatement ps','java.sql.PreparedStatement',0,319,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader',2438,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReportRequestBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ReportRequestBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1385,'ReportRequestBean bean','edu.ncsu.csc.itrust.beans.ReportRequestBean',276,319,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader',2438,'edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReportRequestBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, ReportRequestBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1386,'ResultSet rs','java.sql.ResultSet',0,320,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader',2441,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadList(java.sql.ResultSet)',0,'public List<SurveyBean> loadList(ResultSet rs) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1387,'PreparedStatement ps','java.sql.PreparedStatement',0,320,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader',2442,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, SurveyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1388,'SurveyBean bean','edu.ncsu.csc.itrust.beans.SurveyBean',278,320,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader',2442,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, SurveyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1389,'ResultSet rs','java.sql.ResultSet',0,320,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader',2443,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadSingle(java.sql.ResultSet)',0,'public SurveyBean loadSingle(ResultSet rs) throws SQLException {\r\n    SurveyBean survey = new SurveyBean();\r\n    survey.setVisitID(rs.getLong(\"VisitID\"));\r\n    survey.setSurveyDate(rs.getTimestamp(\"SurveyDate\"));\r\n    survey.setExamRoomMinutes(rs.getInt(\"ExamRoomMinutes\"));\r\n    survey.setWaitingRoomMinutes(rs.getInt(\"WaitingRoomMinutes\"));\r\n    survey.setTreatmentSatisfaction(rs.getInt(\"TreatmentSatisfaction\"));\r\n    survey.setVisitSatisfaction(rs.getInt(\"VisitSatisfaction\"));\r\n    return survey;\r\n}'),(1390,'edu.ncsu.csc.itrust.beans.SurveyBean','edu.ncsu.csc.itrust.beans.SurveyBean',278,320,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader',2443,'edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadSingle(java.sql.ResultSet)',1,'public SurveyBean loadSingle(ResultSet rs) throws SQLException {\r\n    SurveyBean survey = new SurveyBean();\r\n    survey.setVisitID(rs.getLong(\"VisitID\"));\r\n    survey.setSurveyDate(rs.getTimestamp(\"SurveyDate\"));\r\n    survey.setExamRoomMinutes(rs.getInt(\"ExamRoomMinutes\"));\r\n    survey.setWaitingRoomMinutes(rs.getInt(\"WaitingRoomMinutes\"));\r\n    survey.setTreatmentSatisfaction(rs.getInt(\"TreatmentSatisfaction\"));\r\n    survey.setVisitSatisfaction(rs.getInt(\"VisitSatisfaction\"));\r\n    return survey;\r\n}'),(1391,'ResultSet rs','java.sql.ResultSet',0,321,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader',2445,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadList(java.sql.ResultSet)',0,'public List<SurveyResultBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<SurveyResultBean> list = new ArrayList<SurveyResultBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1392,'PreparedStatement ps','java.sql.PreparedStatement',0,321,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader',2446,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, SurveyResultBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1393,'SurveyResultBean bean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,321,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader',2446,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, SurveyResultBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1394,'ResultSet rs','java.sql.ResultSet',0,321,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader',2447,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadSingle(java.sql.ResultSet)',0,'public SurveyResultBean loadSingle(ResultSet rs) throws SQLException {\r\n    SurveyResultBean surveyResult = new SurveyResultBean();\r\n    surveyResult.setHCPMID(rs.getLong(\"mid\"));\r\n    surveyResult.setAvgExamRoomMinutes(rs.getFloat(\"AvgExamRoomMinutes\"));\r\n    surveyResult.setAvgTreatmentSatisfaction(rs.getFloat(\"AvgTreatmentSatisfation\"));\r\n    surveyResult.setAvgVisitSatisfaction(rs.getFloat(\"AvgVisitSatisfaction\"));\r\n    surveyResult.setAvgWaitingRoomMinutes(rs.getFloat(\"AvgWaitingRoomMinutes\"));\r\n    surveyResult.setHCPaddress1(rs.getString(\"address1\"));\r\n    surveyResult.setHCPaddress2(rs.getString(\"address2\"));\r\n    surveyResult.setHCPcity(rs.getString(\"city\"));\r\n    surveyResult.setHCPstate(rs.getString(\"state\"));\r\n    surveyResult.setHCPzip(rs.getString(\"zip\"));\r\n    surveyResult.setHCPhospital(rs.getString(\"hospitalID\"));\r\n    surveyResult.setHCPFirstName(rs.getString(\"firstName\"));\r\n    surveyResult.setHCPLastName(rs.getString(\"lastName\"));\r\n    surveyResult.setHCPspecialty(rs.getString(\"specialty\"));\r\n    surveyResult.setPercentSatisfactionResults(rs.getFloat(\"PercentSatisfactionResults\"));\r\n    return surveyResult;\r\n}'),(1395,'edu.ncsu.csc.itrust.beans.SurveyResultBean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,321,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader',2447,'edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadSingle(java.sql.ResultSet)',1,'public SurveyResultBean loadSingle(ResultSet rs) throws SQLException {\r\n    SurveyResultBean surveyResult = new SurveyResultBean();\r\n    surveyResult.setHCPMID(rs.getLong(\"mid\"));\r\n    surveyResult.setAvgExamRoomMinutes(rs.getFloat(\"AvgExamRoomMinutes\"));\r\n    surveyResult.setAvgTreatmentSatisfaction(rs.getFloat(\"AvgTreatmentSatisfation\"));\r\n    surveyResult.setAvgVisitSatisfaction(rs.getFloat(\"AvgVisitSatisfaction\"));\r\n    surveyResult.setAvgWaitingRoomMinutes(rs.getFloat(\"AvgWaitingRoomMinutes\"));\r\n    surveyResult.setHCPaddress1(rs.getString(\"address1\"));\r\n    surveyResult.setHCPaddress2(rs.getString(\"address2\"));\r\n    surveyResult.setHCPcity(rs.getString(\"city\"));\r\n    surveyResult.setHCPstate(rs.getString(\"state\"));\r\n    surveyResult.setHCPzip(rs.getString(\"zip\"));\r\n    surveyResult.setHCPhospital(rs.getString(\"hospitalID\"));\r\n    surveyResult.setHCPFirstName(rs.getString(\"firstName\"));\r\n    surveyResult.setHCPLastName(rs.getString(\"lastName\"));\r\n    surveyResult.setHCPspecialty(rs.getString(\"specialty\"));\r\n    surveyResult.setPercentSatisfactionResults(rs.getFloat(\"PercentSatisfactionResults\"));\r\n    return surveyResult;\r\n}'),(1396,'ResultSet rs','java.sql.ResultSet',0,322,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader',2449,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadList(java.sql.ResultSet)',0,'public List<TransactionBean> loadList(ResultSet rs) throws SQLException {\r\n    List<TransactionBean> list = new ArrayList<TransactionBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1397,'PreparedStatement ps','java.sql.PreparedStatement',0,322,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader',2450,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, TransactionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1398,'TransactionBean bean','edu.ncsu.csc.itrust.beans.TransactionBean',281,322,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader',2450,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, TransactionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1399,'ResultSet rs','java.sql.ResultSet',0,322,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader',2451,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadSingle(java.sql.ResultSet)',0,'public TransactionBean loadSingle(ResultSet rs) throws SQLException {\r\n    TransactionBean t = new TransactionBean();\r\n    t.setAddedInfo(rs.getString(\"addedInfo\"));\r\n    t.setLoggedInMID(rs.getLong(\"loggedInMID\"));\r\n    t.setSecondaryMID(rs.getLong(\"secondaryMID\"));\r\n    t.setTimeLogged(rs.getTimestamp(\"timeLogged\"));\r\n    t.setTransactionType(TransactionType.parse(rs.getInt(\"transactionCode\")));\r\n    t.setTransactionID(rs.getLong(\"transactionID\"));\r\n    return t;\r\n}'),(1400,'edu.ncsu.csc.itrust.beans.TransactionBean','edu.ncsu.csc.itrust.beans.TransactionBean',281,322,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader',2451,'edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadSingle(java.sql.ResultSet)',1,'public TransactionBean loadSingle(ResultSet rs) throws SQLException {\r\n    TransactionBean t = new TransactionBean();\r\n    t.setAddedInfo(rs.getString(\"addedInfo\"));\r\n    t.setLoggedInMID(rs.getLong(\"loggedInMID\"));\r\n    t.setSecondaryMID(rs.getLong(\"secondaryMID\"));\r\n    t.setTimeLogged(rs.getTimestamp(\"timeLogged\"));\r\n    t.setTransactionType(TransactionType.parse(rs.getInt(\"transactionCode\")));\r\n    t.setTransactionID(rs.getLong(\"transactionID\"));\r\n    return t;\r\n}'),(1401,'ResultSet rs','java.sql.ResultSet',0,323,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader',2453,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadList(java.sql.ResultSet)',0,'public List<VerboseReferralBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<VerboseReferralBean> list = new ArrayList<VerboseReferralBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1402,'ResultSet rs','java.sql.ResultSet',0,323,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader',2455,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadSingle(java.sql.ResultSet)',0,'public VerboseReferralBean loadSingle(ResultSet rs) throws SQLException {\r\n    VerboseReferralBean ref = new VerboseReferralBean();\r\n    // ERIC: fixed to correct for the mysql database bug plaguing java 1.5\r\n    ref.setId(rs.getInt(\"id\"));\r\n    ref.setSenderID(rs.getLong(\"SenderID\"));\r\n    ref.setReceiverID(rs.getLong(\"ReceiverID\"));\r\n    ref.setPatientID(rs.getInt(\"PatientID\"));\r\n    ref.setReferralDetails(rs.getString(\"ReferralDetails\"));\r\n    ref.setOvid(rs.getLong(\"OVID\"));\r\n    ref.setTimeStamp(VerboseReferralBeanLoader.dateFormat.format(rs.getTimestamp(\"TimeStamp\")));\r\n    ref.setViewedByHCP(rs.getBoolean(\"viewed_by_HCP\"));\r\n    ref.setViewedByPatient(rs.getBoolean(\"viewed_by_patient\"));\r\n    ref.setPriority(rs.getInt(\"PriorityCode\"));\r\n    ref.setOvDate(new SimpleDateFormat(\"MM/dd/yyyy\").format(rs.getDate(\"visitDate\")));\r\n    ref.setPatientName(rs.getString(\"patientName\"));\r\n    ref.setReceiverName(rs.getString(\"receiverName\"));\r\n    ref.setSenderName(rs.getString(\"senderName\"));\r\n    return ref;\r\n}'),(1403,'edu.ncsu.csc.itrust.beans.VerboseReferralBean','edu.ncsu.csc.itrust.beans.VerboseReferralBean',282,323,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader',2455,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadSingle(java.sql.ResultSet)',1,'public VerboseReferralBean loadSingle(ResultSet rs) throws SQLException {\r\n    VerboseReferralBean ref = new VerboseReferralBean();\r\n    // ERIC: fixed to correct for the mysql database bug plaguing java 1.5\r\n    ref.setId(rs.getInt(\"id\"));\r\n    ref.setSenderID(rs.getLong(\"SenderID\"));\r\n    ref.setReceiverID(rs.getLong(\"ReceiverID\"));\r\n    ref.setPatientID(rs.getInt(\"PatientID\"));\r\n    ref.setReferralDetails(rs.getString(\"ReferralDetails\"));\r\n    ref.setOvid(rs.getLong(\"OVID\"));\r\n    ref.setTimeStamp(VerboseReferralBeanLoader.dateFormat.format(rs.getTimestamp(\"TimeStamp\")));\r\n    ref.setViewedByHCP(rs.getBoolean(\"viewed_by_HCP\"));\r\n    ref.setViewedByPatient(rs.getBoolean(\"viewed_by_patient\"));\r\n    ref.setPriority(rs.getInt(\"PriorityCode\"));\r\n    ref.setOvDate(new SimpleDateFormat(\"MM/dd/yyyy\").format(rs.getDate(\"visitDate\")));\r\n    ref.setPatientName(rs.getString(\"patientName\"));\r\n    ref.setReceiverName(rs.getString(\"receiverName\"));\r\n    ref.setSenderName(rs.getString(\"senderName\"));\r\n    return ref;\r\n}'),(1404,'PreparedStatement ps','java.sql.PreparedStatement',0,323,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader',2454,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.VerboseReferralBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, VerboseReferralBean ref) throws SQLException {\r\n    throw new RuntimeException(\"Not Implemented\");\r\n}'),(1405,'VerboseReferralBean ref','edu.ncsu.csc.itrust.beans.VerboseReferralBean',282,323,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader',2454,'edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.VerboseReferralBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, VerboseReferralBean ref) throws SQLException {\r\n    throw new RuntimeException(\"Not Implemented\");\r\n}'),(1406,'ResultSet rs','java.sql.ResultSet',0,324,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader',2457,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadList(java.sql.ResultSet)',0,'public List<VisitReminderReturnForm> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<VisitReminderReturnForm> list = new ArrayList<VisitReminderReturnForm>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1407,'ResultSet rs','java.sql.ResultSet',0,324,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader',2459,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadSingle(java.sql.ResultSet)',0,'public VisitReminderReturnForm loadSingle(ResultSet rs) throws SQLException {\r\n    int i = 0;\r\n    return // hcpid\r\n    // patient ID\r\n    // last name\r\n    // first\r\n    new VisitReminderReturnForm(rs.getLong((++i)), rs.getLong((++i)), rs.getString((++i)), rs.getString((++i)), rs.getString((++i)));// ,// phone3\r\n\r\n    // \"diagnosis: \" + rs.getString(++i),\r\n    // \"last visit: \" + rs.getString(++i));\r\n}'),(1408,'edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm','edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',289,324,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader',2459,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadSingle(java.sql.ResultSet)',1,'public VisitReminderReturnForm loadSingle(ResultSet rs) throws SQLException {\r\n    int i = 0;\r\n    return // hcpid\r\n    // patient ID\r\n    // last name\r\n    // first\r\n    new VisitReminderReturnForm(rs.getLong((++i)), rs.getLong((++i)), rs.getString((++i)), rs.getString((++i)), rs.getString((++i)));// ,// phone3\r\n\r\n    // \"diagnosis: \" + rs.getString(++i),\r\n    // \"last visit: \" + rs.getString(++i));\r\n}'),(1409,'PreparedStatement ps','java.sql.PreparedStatement',0,324,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader',2458,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm)',0,'public PreparedStatement loadParameters(PreparedStatement ps, VisitReminderReturnForm bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1410,'VisitReminderReturnForm bean','edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm',289,324,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader',2458,'edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm)',0,'public PreparedStatement loadParameters(PreparedStatement ps, VisitReminderReturnForm bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1411,'ResultSet rs','java.sql.ResultSet',0,325,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader',2461,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadList(java.sql.ResultSet)',0,'public List<WardBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<WardBean> list = new ArrayList<WardBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1412,'ResultSet rs','java.sql.ResultSet',0,325,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader',2463,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadSingle(java.sql.ResultSet)',0,'public WardBean loadSingle(ResultSet rs) throws SQLException {\r\n    WardBean ward = new WardBean(rs.getLong(\"WardID\"), rs.getString(\"RequiredSpecialty\"), rs.getLong(\"InHospital\"));\r\n    return ward;\r\n}'),(1413,'edu.ncsu.csc.itrust.beans.WardBean','edu.ncsu.csc.itrust.beans.WardBean',284,325,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader',2463,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadSingle(java.sql.ResultSet)',1,'public WardBean loadSingle(ResultSet rs) throws SQLException {\r\n    WardBean ward = new WardBean(rs.getLong(\"WardID\"), rs.getString(\"RequiredSpecialty\"), rs.getLong(\"InHospital\"));\r\n    return ward;\r\n}'),(1414,'PreparedStatement ps','java.sql.PreparedStatement',0,325,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader',2462,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, WardBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1415,'WardBean bean','edu.ncsu.csc.itrust.beans.WardBean',284,325,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader',2462,'edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, WardBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1416,'ResultSet rs','java.sql.ResultSet',0,326,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader',2465,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadList(java.sql.ResultSet)',0,'public List<WardRoomBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<WardRoomBean> list = new ArrayList<WardRoomBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}'),(1417,'ResultSet rs','java.sql.ResultSet',0,326,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader',2467,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadSingle(java.sql.ResultSet)',0,'public WardRoomBean loadSingle(ResultSet rs) throws SQLException {\r\n    WardRoomBean wardRoom = new WardRoomBean(rs.getLong(\"RoomID\"), rs.getLong(\"OccupiedBy\"), rs.getLong(\"InWard\"), rs.getString(\"roomName\"), rs.getString(\"Status\"));\r\n    return wardRoom;\r\n}'),(1418,'edu.ncsu.csc.itrust.beans.WardRoomBean','edu.ncsu.csc.itrust.beans.WardRoomBean',285,326,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader',2467,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadSingle(java.sql.ResultSet)',1,'public WardRoomBean loadSingle(ResultSet rs) throws SQLException {\r\n    WardRoomBean wardRoom = new WardRoomBean(rs.getLong(\"RoomID\"), rs.getLong(\"OccupiedBy\"), rs.getLong(\"InWard\"), rs.getString(\"roomName\"), rs.getString(\"Status\"));\r\n    return wardRoom;\r\n}'),(1419,'PreparedStatement ps','java.sql.PreparedStatement',0,326,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader',2466,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, WardRoomBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1420,'WardRoomBean bean','edu.ncsu.csc.itrust.beans.WardRoomBean',285,326,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader',2466,'edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'public PreparedStatement loadParameters(PreparedStatement ps, WardRoomBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}'),(1421,'List<AdverseEventBean> adEvents','java.util.List',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2475,'edu.ncsu.csc.itrust.charts.AdverseEventsData.setAdverseEventsList(java.util.List,java.lang.String)',0,'/**\r\n * Called from the JSP page to initialize the list of Adverse Events needed to\r\n * produce the desired chart.\r\n *\r\n * @param adEvents\r\n * 		\r\n * @param name\r\n * 		\r\n */\r\npublic void setAdverseEventsList(List<AdverseEventBean> adEvents, String name) {\r\n    adverseEvents = adEvents;\r\n    this.codeName = name;\r\n}'),(1422,'String name','java.lang.String',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2475,'edu.ncsu.csc.itrust.charts.AdverseEventsData.setAdverseEventsList(java.util.List,java.lang.String)',0,'/**\r\n * Called from the JSP page to initialize the list of Adverse Events needed to\r\n * produce the desired chart.\r\n *\r\n * @param adEvents\r\n * 		\r\n * @param name\r\n * 		\r\n */\r\npublic void setAdverseEventsList(List<AdverseEventBean> adEvents, String name) {\r\n    adverseEvents = adEvents;\r\n    this.codeName = name;\r\n}'),(1423,'Map params','java.util.Map',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2474,'edu.ncsu.csc.itrust.charts.AdverseEventsData.produceDataset(java.util.Map)',0,'/**\r\n * This method parses the list of Adverse Event Beans to initialize the chart dataset.\r\n */\r\npublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    // The DefaultCategoryDataset is used for bar charts.\r\n    // This dataset class may change based on the type of chart you wish to produce.\r\n    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {\r\n        /**\r\n         * The generated serializable ID.\r\n         */\r\n        private static final long serialVersionUID = -8238489914590553747L;\r\n\r\n        /**\r\n         *\r\n         *\r\n         * @see java.lang.Object#finalize()\r\n         */\r\n        @Override\r\n        protected void finalize() throws Throwable {\r\n            super.finalize();\r\n        }\r\n    };\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\r\n    // For each Adverse Event in the list,\r\n    // parse the string repreentation of the report date\r\n    // to a Java Date object. Then, get the month of the\r\n    // Date object and increment the value count for that month.\r\n    for (AdverseEventBean event : adverseEvents) {\r\n        Calendar cal = Calendar.getInstance();\r\n        try {\r\n            cal.setTime(sdf.parse(event.getDate()));\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n            throw new DatasetProduceException(e.getMessage());\r\n        }\r\n        int monthOfReport = cal.get(Calendar.MONTH);\r\n        (values[monthOfReport])++;\r\n    }\r\n    // For each month, add the monthly values to the dataset for\r\n    // producing the chart.\r\n    for (int i = 0; i < 12; i++) {\r\n        // values[i] represents the number of adverse events for month i\r\n        // codeName represents the given prescription/immunization being analyzed\r\n        // month[i] is the static array of month names, to be used as labels on the chart\r\n        dataset.addValue(values[i], codeName, months[i]);\r\n    }\r\n    return dataset;\r\n}'),(1424,'Map params','java.util.Map',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2473,'edu.ncsu.csc.itrust.charts.AdverseEventsData.hasExpired(java.util.Map,java.util.Date)',0,'/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behaviour the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}'),(1425,'Date since','java.util.Date',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2473,'edu.ncsu.csc.itrust.charts.AdverseEventsData.hasExpired(java.util.Map,java.util.Date)',0,'/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behaviour the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}'),(1426,'Object data','java.lang.Object',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2470,'edu.ncsu.csc.itrust.charts.AdverseEventsData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n * Returns a link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return months[series];\r\n}'),(1427,'int series','int',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2470,'edu.ncsu.csc.itrust.charts.AdverseEventsData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n * Returns a link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return months[series];\r\n}'),(1428,'Object category','java.lang.Object',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2470,'edu.ncsu.csc.itrust.charts.AdverseEventsData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n * Returns a link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return months[series];\r\n}');
INSERT INTO `parameters` VALUES (1429,'CategoryDataset arg0','org.jfree.data.category.CategoryDataset',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2471,'edu.ncsu.csc.itrust.charts.AdverseEventsData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return months[series];\r\n}'),(1430,'int series','int',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2471,'edu.ncsu.csc.itrust.charts.AdverseEventsData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return months[series];\r\n}'),(1431,'int arg2','int',0,327,'edu.ncsu.csc.itrust.charts.AdverseEventsData',2471,'edu.ncsu.csc.itrust.charts.AdverseEventsData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return months[series];\r\n}'),(1432,'DiagnosisStatisticsBean DiagnosisBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2487,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)',0,'/**\r\n * Called from the JSP to initialize the list of HealthRecords needed\r\n * to produce the desired chart.\r\n *\r\n * @param hRecs\r\n * 		Health records for the patient being viewed.\r\n * @param name\r\n * 		Type of data that is being graphed (originally Height, Weight, and BMI).\r\n */\r\npublic void initializeDiagnosisStatistics(DiagnosisStatisticsBean DiagnosisBean, String name) {\r\n    this.dsBean = DiagnosisBean;\r\n    this.diagnosisName = name;\r\n    values = new int[2];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (dsBean.getRegionStats()));\r\n}'),(1433,'String name','java.lang.String',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2487,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)',0,'/**\r\n * Called from the JSP to initialize the list of HealthRecords needed\r\n * to produce the desired chart.\r\n *\r\n * @param hRecs\r\n * 		Health records for the patient being viewed.\r\n * @param name\r\n * 		Type of data that is being graphed (originally Height, Weight, and BMI).\r\n */\r\npublic void initializeDiagnosisStatistics(DiagnosisStatisticsBean DiagnosisBean, String name) {\r\n    this.dsBean = DiagnosisBean;\r\n    this.diagnosisName = name;\r\n    values = new int[2];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (dsBean.getRegionStats()));\r\n}'),(1434,'DiagnosisStatisticsBean avgBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2486,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)',0,'public void initializeAvgDiagnosisStatistics(DiagnosisStatisticsBean avgBean, DiagnosisStatisticsBean dsBean, String name) {\r\n    this.dsBean = dsBean;\r\n    this.avgBean = avgBean;\r\n    this.diagnosisName = name;\r\n    this.epidemic = true;\r\n    values = new int[4];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (avgBean.getZipStats()));\r\n    values[2] = ((int) (dsBean.getRegionStats()));\r\n    values[3] = ((int) (avgBean.getRegionStats()));\r\n}'),(1435,'DiagnosisStatisticsBean dsBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2486,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)',0,'public void initializeAvgDiagnosisStatistics(DiagnosisStatisticsBean avgBean, DiagnosisStatisticsBean dsBean, String name) {\r\n    this.dsBean = dsBean;\r\n    this.avgBean = avgBean;\r\n    this.diagnosisName = name;\r\n    this.epidemic = true;\r\n    values = new int[4];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (avgBean.getZipStats()));\r\n    values[2] = ((int) (dsBean.getRegionStats()));\r\n    values[3] = ((int) (avgBean.getRegionStats()));\r\n}'),(1436,'String name','java.lang.String',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2486,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)',0,'public void initializeAvgDiagnosisStatistics(DiagnosisStatisticsBean avgBean, DiagnosisStatisticsBean dsBean, String name) {\r\n    this.dsBean = dsBean;\r\n    this.avgBean = avgBean;\r\n    this.diagnosisName = name;\r\n    this.epidemic = true;\r\n    values = new int[4];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (avgBean.getZipStats()));\r\n    values[2] = ((int) (dsBean.getRegionStats()));\r\n    values[3] = ((int) (avgBean.getRegionStats()));\r\n}'),(1437,'Map params','java.util.Map',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2488,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.produceDataset(java.util.Map)',0,'/**\r\n * This method parses the list of DiagnosisStatistics Beans to initialize the\r\n * chart data set.\r\n *\r\n * @param Map\r\n * 		parameters passed from CeWolf (though not actually used locally)\r\n * @return A data set containing information to be graphed\r\n * @throws DatasetProduceException\r\n * 		\r\n */\r\npublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    // The DefaultCategoryDataset is used for bar charts.\r\n    // This data set class may change based on the type of chart you wish to produce.\r\n    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {\r\n        /**\r\n         *\r\n         */\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        /**\r\n         *\r\n         *\r\n         * @see java.lang.Object#finalize()\r\n         */\r\n        @Override\r\n        protected void finalize() throws Throwable {\r\n            super.finalize();\r\n        }\r\n    };\r\n    if ((epidemic) == false) {\r\n        seriesName = new String[2];\r\n        dataset.addValue(values[0], diagnosisName, \"Zipcode Cases\");\r\n        dataset.addValue(values[1], diagnosisName, \"Region Cases\");\r\n        seriesName[0] = \"Zipcode Case\";\r\n        seriesName[1] = \"Region Cases\";\r\n    } else\r\n        if ((epidemic) == true) {\r\n            seriesName = new String[4];\r\n            dataset.addValue(values[0], diagnosisName, \"Current Week Zipcode Cases\");\r\n            dataset.addValue(values[1], diagnosisName, \"Average Prior Zipcode Cases\");\r\n            dataset.addValue(values[2], diagnosisName, \"Current Week Region Cases\");\r\n            dataset.addValue(values[3], diagnosisName, \"Average Prior Region Cases\");\r\n            seriesName[0] = \"Current Week Zipcode Cases\";\r\n            seriesName[1] = \"Average Prior Zipcode Cases\";\r\n            seriesName[2] = \"Current Week Region Cases\";\r\n            seriesName[3] = \"Average Prior Region Cases\";\r\n        }\r\n\r\n    return dataset;\r\n}'),(1438,'Map params','java.util.Map',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2485,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.hasExpired(java.util.Map,java.util.Date)',0,'/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}'),(1439,'Date since','java.util.Date',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2485,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.hasExpired(java.util.Map,java.util.Date)',0,'/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}'),(1440,'Object data','java.lang.Object',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2481,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return seriesName[series];\r\n}'),(1441,'int series','int',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2481,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return seriesName[series];\r\n}'),(1442,'Object category','java.lang.Object',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2481,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return seriesName[series];\r\n}'),(1443,'CategoryDataset arg0','org.jfree.data.category.CategoryDataset',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2482,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return seriesName[series];\r\n}'),(1444,'int series','int',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2482,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return seriesName[series];\r\n}'),(1445,'int arg2','int',0,329,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData',2482,'edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return seriesName[series];\r\n}'),(1446,'List<HealthRecord> hRecs','java.util.List',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2501,'edu.ncsu.csc.itrust.charts.HealthData.initializeHealthRecords(java.util.List,java.lang.String)',0,'/**\r\n * Called from the JSP to initialize the list of HealthRecords needed\r\n * to produce the desired chart.\r\n *\r\n * @param hRecs\r\n * 		Health records for the patient being viewed.\r\n * @param name\r\n * 		Type of data that is being graphed (originally Height, Weight, and BMI).\r\n */\r\npublic void initializeHealthRecords(List<HealthRecord> hRecs, String name) {\r\n    healthRecords = hRecs;\r\n    this.codeName = name;\r\n    quarters = new String[historyLength];\r\n    values = new double[historyLength];\r\n    numEntries = new int[historyLength];\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, ((-3) * ((historyLength) - 1)));\r\n    int startMonth = cal.get(Calendar.MONTH);\r\n    int startQ = startMonth / 3;\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        quarters[i] = ((\"Q\" + (((startQ + i) % 4) + 1)) + \" \") + (sdf.format(cal.getTime()));\r\n        values[i] = 0;\r\n        numEntries[i] = 0;\r\n        cal.add(Calendar.MONTH, 3);\r\n    }\r\n}'),(1447,'String name','java.lang.String',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2501,'edu.ncsu.csc.itrust.charts.HealthData.initializeHealthRecords(java.util.List,java.lang.String)',0,'/**\r\n * Called from the JSP to initialize the list of HealthRecords needed\r\n * to produce the desired chart.\r\n *\r\n * @param hRecs\r\n * 		Health records for the patient being viewed.\r\n * @param name\r\n * 		Type of data that is being graphed (originally Height, Weight, and BMI).\r\n */\r\npublic void initializeHealthRecords(List<HealthRecord> hRecs, String name) {\r\n    healthRecords = hRecs;\r\n    this.codeName = name;\r\n    quarters = new String[historyLength];\r\n    values = new double[historyLength];\r\n    numEntries = new int[historyLength];\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, ((-3) * ((historyLength) - 1)));\r\n    int startMonth = cal.get(Calendar.MONTH);\r\n    int startQ = startMonth / 3;\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        quarters[i] = ((\"Q\" + (((startQ + i) % 4) + 1)) + \" \") + (sdf.format(cal.getTime()));\r\n        values[i] = 0;\r\n        numEntries[i] = 0;\r\n        cal.add(Calendar.MONTH, 3);\r\n    }\r\n}'),(1448,'Map params','java.util.Map',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2502,'edu.ncsu.csc.itrust.charts.HealthData.produceDataset(java.util.Map)',0,'/**\r\n * This method parses the list of Adverse Event Beans to initialize the\r\n * chart dataset.\r\n *\r\n * @param Map\r\n * 		parameters passed from CeWolf (though not actually used locally)\r\n * @return A dataset containing information to be graphed\r\n * @throws DatasetProduceException\r\n * 		\r\n */\r\npublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    // The DefaultCategoryDataset is used for bar charts.\r\n    // This dataset class may change based on the type of chart you wish to produce.\r\n    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {\r\n        /**\r\n         *\r\n         */\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        /**\r\n         *\r\n         *\r\n         * @see java.lang.Object#finalize()\r\n         */\r\n        @Override\r\n        protected void finalize() throws Throwable {\r\n            super.finalize();\r\n        }\r\n    };\r\n    Calendar cur = Calendar.getInstance();\r\n    int curQuarter = (cur.get(Calendar.MONTH)) / 3;\r\n    for (HealthRecord hRecord : healthRecords) {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(hRecord.getDateRecorded());\r\n        int yearOfReport = cal.get(Calendar.YEAR);\r\n        int monthOfReport = cal.get(Calendar.MONTH);\r\n        int quarterOfReport = monthOfReport / 3;\r\n        int quarter = (((historyLength) - (4 * ((cur.get(Calendar.YEAR)) - yearOfReport))) - (curQuarter - quarterOfReport)) - 1;\r\n        // Skip entry if it is out of the history range.\r\n        if (quarter < 0)\r\n            continue;\r\n\r\n        // Calculate the average for the quarter.\r\n        double newValue = 0;\r\n        if (codeName.equals(\"Height\"))\r\n            newValue = hRecord.getHeight();\r\n        else\r\n            if (codeName.equals(\"Weight\"))\r\n                newValue = hRecord.getWeight();\r\n            else\r\n                if (codeName.equals(\"BMI\"))\r\n                    newValue = ((hRecord.getWeight()) * 703) / ((hRecord.getHeight()) * (hRecord.getHeight()));\r\n\r\n\r\n\r\n        values[quarter] = (((values[quarter]) * (numEntries[quarter])) + newValue) / ((numEntries[quarter]) + 1);\r\n        (numEntries[quarter])++;\r\n    }\r\n    // For each month, add the monthly values to the dataset for\r\n    // producing the chart.\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        if ((values[i]) > 0) {\r\n            dataset.addValue(values[i], codeName, quarters[i]);\r\n        }\r\n    }\r\n    return dataset;\r\n}'),(1449,'Map params','java.util.Map',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2500,'edu.ncsu.csc.itrust.charts.HealthData.hasExpired(java.util.Map,java.util.Date)',0,'/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}'),(1450,'Date since','java.util.Date',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2500,'edu.ncsu.csc.itrust.charts.HealthData.hasExpired(java.util.Map,java.util.Date)',0,'/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}'),(1451,'Object data','java.lang.Object',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2496,'edu.ncsu.csc.itrust.charts.HealthData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return quarters[series];\r\n}'),(1452,'int series','int',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2496,'edu.ncsu.csc.itrust.charts.HealthData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return quarters[series];\r\n}'),(1453,'Object category','java.lang.Object',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2496,'edu.ncsu.csc.itrust.charts.HealthData.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return quarters[series];\r\n}'),(1454,'CategoryDataset arg0','org.jfree.data.category.CategoryDataset',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2497,'edu.ncsu.csc.itrust.charts.HealthData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return quarters[series];\r\n}'),(1455,'int series','int',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2497,'edu.ncsu.csc.itrust.charts.HealthData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return quarters[series];\r\n}'),(1456,'int arg2','int',0,331,'edu.ncsu.csc.itrust.charts.HealthData',2497,'edu.ncsu.csc.itrust.charts.HealthData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return quarters[series];\r\n}'),(1457,'List<LabProcedureBean> lpbs','java.util.List',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2514,'edu.ncsu.csc.itrust.charts.PatientLabResults.initializeLabProcedures(java.util.List,java.lang.String)',0,'/**\r\n * Called from the JSP to initialize the list of Lab Procedure beans needed\r\n * to produce the desired chart.\r\n *\r\n * @param lpsbs\r\n * 		Lab procedure beans for the patient viewing\r\n * @param name\r\n * 		Name of the lab procedure\r\n */\r\npublic void initializeLabProcedures(List<LabProcedureBean> lpbs, String name) {\r\n    lpBeans = lpbs;\r\n    this.labProcedureName = name;\r\n    quarters = new String[historyLength];\r\n    values = new double[historyLength];\r\n    numEntries = new int[historyLength];\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, ((-3) * ((historyLength) - 1)));\r\n    int startMonth = cal.get(Calendar.MONTH);\r\n    int startQ = startMonth / 3;\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        quarters[i] = ((\"Q\" + (((startQ + i) % 4) + 1)) + \" \") + (sdf.format(cal.getTime()));\r\n        values[i] = 0;\r\n        numEntries[i] = 0;\r\n        cal.add(Calendar.MONTH, 3);\r\n    }\r\n}'),(1458,'String name','java.lang.String',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2514,'edu.ncsu.csc.itrust.charts.PatientLabResults.initializeLabProcedures(java.util.List,java.lang.String)',0,'/**\r\n * Called from the JSP to initialize the list of Lab Procedure beans needed\r\n * to produce the desired chart.\r\n *\r\n * @param lpsbs\r\n * 		Lab procedure beans for the patient viewing\r\n * @param name\r\n * 		Name of the lab procedure\r\n */\r\npublic void initializeLabProcedures(List<LabProcedureBean> lpbs, String name) {\r\n    lpBeans = lpbs;\r\n    this.labProcedureName = name;\r\n    quarters = new String[historyLength];\r\n    values = new double[historyLength];\r\n    numEntries = new int[historyLength];\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, ((-3) * ((historyLength) - 1)));\r\n    int startMonth = cal.get(Calendar.MONTH);\r\n    int startQ = startMonth / 3;\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        quarters[i] = ((\"Q\" + (((startQ + i) % 4) + 1)) + \" \") + (sdf.format(cal.getTime()));\r\n        values[i] = 0;\r\n        numEntries[i] = 0;\r\n        cal.add(Calendar.MONTH, 3);\r\n    }\r\n}'),(1459,'Map params','java.util.Map',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2515,'edu.ncsu.csc.itrust.charts.PatientLabResults.produceDataset(java.util.Map)',0,'/**\r\n * This method parses the list of Adverse Event Beans to initialize the\r\n * chart dataset.\r\n *\r\n * @param Map\r\n * 		parameters passed from CeWolf (though not actually used locally)\r\n * @return A dataset containing information to be graphed\r\n * @throws DatasetProduceException\r\n * 		\r\n */\r\npublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    // The DefaultCategoryDataset is used for bar charts.\r\n    // This dataset class may change based on the type of chart you wish to produce.\r\n    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {\r\n        /**\r\n         *\r\n         */\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        /**\r\n         *\r\n         *\r\n         * @see java.lang.Object#finalize()\r\n         */\r\n        @Override\r\n        protected void finalize() throws Throwable {\r\n            super.finalize();\r\n        }\r\n    };\r\n    Calendar cur = Calendar.getInstance();\r\n    int curQuarter = (cur.get(Calendar.MONTH)) / 3;\r\n    for (LabProcedureBean lpb : lpBeans) {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(lpb.getTimestamp());\r\n        int yearOfReport = cal.get(Calendar.YEAR);\r\n        int monthOfReport = cal.get(Calendar.MONTH);\r\n        int quarterOfReport = monthOfReport / 3;\r\n        int quarter = (((historyLength) - (4 * ((cur.get(Calendar.YEAR)) - yearOfReport))) - (curQuarter - quarterOfReport)) - 1;\r\n        // Skip entry if it is out of the history range.\r\n        if (quarter < 0)\r\n            continue;\r\n\r\n        // Calculate the average for the quarter.\r\n        double newValue = 0;\r\n        newValue = lpb.getNumericalResultAsDouble();\r\n        values[quarter] = (((values[quarter]) * (numEntries[quarter])) + newValue) / ((numEntries[quarter]) + 1);\r\n        (numEntries[quarter])++;\r\n    }\r\n    // For each month, add the monthly values to the dataset for\r\n    // producing the chart.\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        if ((values[i]) > 0) {\r\n            dataset.addValue(values[i], labProcedureName, quarters[i]);\r\n        }\r\n    }\r\n    return dataset;\r\n}'),(1460,'Map params','java.util.Map',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2513,'edu.ncsu.csc.itrust.charts.PatientLabResults.hasExpired(java.util.Map,java.util.Date)',0,'/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}'),(1461,'Date since','java.util.Date',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2513,'edu.ncsu.csc.itrust.charts.PatientLabResults.hasExpired(java.util.Map,java.util.Date)',0,'/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}'),(1462,'Object data','java.lang.Object',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2509,'edu.ncsu.csc.itrust.charts.PatientLabResults.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return quarters[series];\r\n}'),(1463,'int series','int',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2509,'edu.ncsu.csc.itrust.charts.PatientLabResults.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return quarters[series];\r\n}'),(1464,'Object category','java.lang.Object',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2509,'edu.ncsu.csc.itrust.charts.PatientLabResults.generateLink(java.lang.Object,int,java.lang.Object)',0,'/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return quarters[series];\r\n}'),(1465,'CategoryDataset arg0','org.jfree.data.category.CategoryDataset',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2510,'edu.ncsu.csc.itrust.charts.PatientLabResults.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return quarters[series];\r\n}'),(1466,'int series','int',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2510,'edu.ncsu.csc.itrust.charts.PatientLabResults.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return quarters[series];\r\n}'),(1467,'int arg2','int',0,333,'edu.ncsu.csc.itrust.charts.PatientLabResults',2510,'edu.ncsu.csc.itrust.charts.PatientLabResults.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)',0,'/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return quarters[series];\r\n}'),(1468,'InitialContext context','javax.naming.InitialContext',0,340,'edu.ncsu.csc.itrust.dao.ProductionConnectionDriver',2570,'edu.ncsu.csc.itrust.dao.ProductionConnectionDriver.-init-(javax.naming.InitialContext)',0,'// For our special unit test - do not use unless you know what you are doing\r\npublic ProductionConnectionDriver(InitialContext context) {\r\n    initialContext = context;\r\n}'),(1469,'int count','int',0,356,'edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest',2669,'edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.addLoginFailure(int,java.sql.Timestamp)',0,'private void addLoginFailure(int count, Timestamp lastFailure) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO loginfailures(IPAddress,failureCount, lastFailure) \" + \"VALUES(?,?,?)\"));\r\n        ps.setString(1, ipAddr);\r\n        ps.setInt(2, count);\r\n        ps.setTimestamp(3, lastFailure);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1470,'Timestamp lastFailure','java.sql.Timestamp',0,356,'edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest',2669,'edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.addLoginFailure(int,java.sql.Timestamp)',0,'private void addLoginFailure(int count, Timestamp lastFailure) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO loginfailures(IPAddress,failureCount, lastFailure) \" + \"VALUES(?,?,?)\"));\r\n        ps.setString(1, ipAddr);\r\n        ps.setInt(2, count);\r\n        ps.setTimestamp(3, lastFailure);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1471,'long mid','long',0,360,'edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest',2687,'edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.getPassword(long)',0,'private String getPassword(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT password from users WHERE MID=\" + mid));\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return rs.getString(\"password\");\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1472,'FamilyMemberBean o1','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,366,'edu.ncsu.csc.itrust.dao.family.FamilyMembersTest',2717,'edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.compare(edu.ncsu.csc.itrust.beans.FamilyMemberBean,edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'public int compare(FamilyMemberBean o1, FamilyMemberBean o2) {\r\n    return o1.getFirstName().compareTo(o2.getFirstName());\r\n}'),(1473,'FamilyMemberBean o2','edu.ncsu.csc.itrust.beans.FamilyMemberBean',252,366,'edu.ncsu.csc.itrust.dao.family.FamilyMembersTest',2717,'edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.compare(edu.ncsu.csc.itrust.beans.FamilyMemberBean,edu.ncsu.csc.itrust.beans.FamilyMemberBean)',0,'public int compare(FamilyMemberBean o1, FamilyMemberBean o2) {\r\n    return o1.getFirstName().compareTo(o2.getFirstName());\r\n}'),(1474,'String id','java.lang.String',0,367,'edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest',2726,'edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.genericAdd(java.lang.String,java.lang.String)',0,'private HospitalBean genericAdd(String id, String name) throws DBException, iTrustException {\r\n    HospitalBean hosp = new HospitalBean(id, name);\r\n    TestCase.assertTrue(hospitalDAO.addHospital(hosp));\r\n    TestCase.assertEquals(name, hospitalDAO.getHospital(id).getHospitalName());\r\n    return hosp;\r\n}'),(1475,'edu.ncsu.csc.itrust.beans.HospitalBean','edu.ncsu.csc.itrust.beans.HospitalBean',258,367,'edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest',2726,'edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.genericAdd(java.lang.String,java.lang.String)',1,'private HospitalBean genericAdd(String id, String name) throws DBException, iTrustException {\r\n    HospitalBean hosp = new HospitalBean(id, name);\r\n    TestCase.assertTrue(hospitalDAO.addHospital(hosp));\r\n    TestCase.assertEquals(name, hospitalDAO.getHospital(id).getHospitalName());\r\n    return hosp;\r\n}'),(1476,'String name','java.lang.String',0,367,'edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest',2726,'edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.genericAdd(java.lang.String,java.lang.String)',0,'private HospitalBean genericAdd(String id, String name) throws DBException, iTrustException {\r\n    HospitalBean hosp = new HospitalBean(id, name);\r\n    TestCase.assertTrue(hospitalDAO.addHospital(hosp));\r\n    TestCase.assertEquals(name, hospitalDAO.getHospital(id).getHospitalName());\r\n    return hosp;\r\n}'),(1477,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,381,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO',2812,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AccessDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1478,'int mins','int',0,381,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO',2815,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO.setSessionTimeoutMins(int)',0,'/**\r\n * Sets the number of minutes it would take for a session to timeout.\r\n *\r\n * @param mins\r\n * 		An int specifying the number of minutes\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void setSessionTimeoutMins(int mins) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE globalvariables SET Value=? WHERE Name=Timeout\");\r\n        ps.setInt(1, mins);\r\n        int numUpdated = ps.executeUpdate();\r\n        // no value in the table\r\n        if (numUpdated == 0)\r\n            insertDefaultTimeout(conn, mins);\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1479,'Connection conn','java.sql.Connection',0,381,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO',2814,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO.insertDefaultTimeout(java.sql.Connection,int)',0,'private void insertDefaultTimeout(Connection conn, int mins) throws SQLException {\r\n    PreparedStatement ps = null;\r\n    ps = conn.prepareStatement(\"INSERT INTO globalvariables(Name,Value) VALUES (Timeout, ?)\");\r\n    ps.setInt(1, mins);\r\n    ps.executeUpdate();\r\n}'),(1480,'int mins','int',0,381,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO',2814,'edu.ncsu.csc.itrust.dao.mysql.AccessDAO.insertDefaultTimeout(java.sql.Connection,int)',0,'private void insertDefaultTimeout(Connection conn, int mins) throws SQLException {\r\n    PreparedStatement ps = null;\r\n    ps = conn.prepareStatement(\"INSERT INTO globalvariables(Name,Value) VALUES (Timeout, ?)\");\r\n    ps.setInt(1, mins);\r\n    ps.executeUpdate();\r\n}'),(1481,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2816,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AdverseEventDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.aeLoader = new AdverseEventBeanLoader();\r\n}'),(1482,'long mid','long',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2823,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getReportsFor(long)',0,'/**\r\n * Gets all the adverse event reports for a certain user MID.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of AdverseEventBeans.\r\n * @throws SQLException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<AdverseEventBean> getReportsFor(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE PatientMID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = this.aeLoader.loadList(rs);\r\n        return aeList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1483,'AdverseEventBean aeBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2817,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean,long)',0,'/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * 		A bean representing the message to be added.\r\n * @throws SQLException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO adverseevents (PatientMID, PresImmu, Code, Comment, Prescriber, Status) \" + \"VALUES (?, ?, ?, ?, ?, ?)\"));\r\n        ps.setString(1, aeBean.getMID());\r\n        ps.setString(2, aeBean.getDrug());\r\n        ps.setString(3, aeBean.getCode());\r\n        ps.setString(4, aeBean.getDescription());\r\n        ps.setLong(5, hcpmid);\r\n        ps.setString(6, \"Active\");\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1484,'long hcpmid','long',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2817,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean,long)',0,'/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * 		A bean representing the message to be added.\r\n * @throws SQLException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO adverseevents (PatientMID, PresImmu, Code, Comment, Prescriber, Status) \" + \"VALUES (?, ?, ?, ?, ?, ?)\"));\r\n        ps.setString(1, aeBean.getMID());\r\n        ps.setString(2, aeBean.getDrug());\r\n        ps.setString(3, aeBean.getCode());\r\n        ps.setString(4, aeBean.getDescription());\r\n        ps.setLong(5, hcpmid);\r\n        ps.setString(6, \"Active\");\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1485,'int id','int',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2818,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getHCPMID(int)',0,'public long getHCPMID(int id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE id=?\");\r\n        ps.setInt(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        long hcpMID = 0;\r\n        if (rs.next()) {\r\n            hcpMID = rs.getLong(\"Prescriber\");\r\n        }\r\n        return hcpMID;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1486,'int id','int',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2822,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getReport(int)',0,'public AdverseEventBean getReport(int id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE id=?\");\r\n        ps.setInt(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList.get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1487,'edu.ncsu.csc.itrust.beans.AdverseEventBean','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2822,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getReport(int)',1,'public AdverseEventBean getReport(int id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE id=?\");\r\n        ps.setInt(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList.get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1488,'int id','int',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2825,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.removeReport(int)',0,'public long removeReport(int id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE adverseevents SET Status = ? WHERE id = ?\");\r\n        String removed = \"removed\";\r\n        ps.setString(1, removed);\r\n        ps.setInt(2, id);\r\n        ps.executeUpdate();\r\n        long a = DBUtil.getLastInsert(conn);\r\n        return a;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1489,'String code','java.lang.String',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2824,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getUnremovedAdverseEventsByCode(java.lang.String)',0,'public List<AdverseEventBean> getUnremovedAdverseEventsByCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE code=? AND status=?\");\r\n        ps.setString(1, code);\r\n        ps.setString(2, \"Active\");\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        return aeLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1490,'String code','java.lang.String',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2820,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getNameForCode(java.lang.String)',0,'public String getNameForCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT PresImmu FROM adverseevents WHERE code=?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getString(\"PresImmu\");\r\n        }\r\n        return \"Name not Found\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1491,'String start','java.lang.String',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2821,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getPerscriptions(java.lang.String,java.lang.String)',0,'public List<AdverseEventBean> getPerscriptions(String start, String end) throws DBException, ParseException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        SimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\r\n        Date beginning = fmt.parse(start);\r\n        Date ending = fmt.parse(end);\r\n        conn = factory.getConnection();\r\n        // AND NDCodes.Code=AdverseEvents.Code\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents,ndcodes WHERE adverseevents.TimeLogged >= ? AND adverseevents.TimeLogged <= ? AND ndcodes.Code=adverseevents.Code ORDER BY adverseevents.Code, adverseevents.TimeLogged DESC\");\r\n        ps.setTimestamp(1, new Timestamp(beginning.getTime()));\r\n        ps.setTimestamp(2, new Timestamp(((ending.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1492,'String end','java.lang.String',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2821,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getPerscriptions(java.lang.String,java.lang.String)',0,'public List<AdverseEventBean> getPerscriptions(String start, String end) throws DBException, ParseException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        SimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\r\n        Date beginning = fmt.parse(start);\r\n        Date ending = fmt.parse(end);\r\n        conn = factory.getConnection();\r\n        // AND NDCodes.Code=AdverseEvents.Code\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents,ndcodes WHERE adverseevents.TimeLogged >= ? AND adverseevents.TimeLogged <= ? AND ndcodes.Code=adverseevents.Code ORDER BY adverseevents.Code, adverseevents.TimeLogged DESC\");\r\n        ps.setTimestamp(1, new Timestamp(beginning.getTime()));\r\n        ps.setTimestamp(2, new Timestamp(((ending.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1493,'String start','java.lang.String',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2819,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getImmunizations(java.lang.String,java.lang.String)',0,'public List<AdverseEventBean> getImmunizations(String start, String end) throws DBException, ParseException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        SimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\r\n        Date beginning = fmt.parse(start);\r\n        Date ending = fmt.parse(end);\r\n        conn = factory.getConnection();\r\n        // AND NDCodes.Code=AdverseEvents.Code\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents,cptcodes WHERE adverseevents.TimeLogged >= ? AND adverseevents.TimeLogged <= ? AND cptcodes.Code=adverseevents.Code ORDER BY adverseevents.Code, adverseevents.TimeLogged DESC\");\r\n        ps.setTimestamp(1, new Timestamp(beginning.getTime()));\r\n        ps.setTimestamp(2, new Timestamp(((ending.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1494,'String end','java.lang.String',0,382,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO',2819,'edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getImmunizations(java.lang.String,java.lang.String)',0,'public List<AdverseEventBean> getImmunizations(String start, String end) throws DBException, ParseException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        SimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\r\n        Date beginning = fmt.parse(start);\r\n        Date ending = fmt.parse(end);\r\n        conn = factory.getConnection();\r\n        // AND NDCodes.Code=AdverseEvents.Code\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents,cptcodes WHERE adverseevents.TimeLogged >= ? AND adverseevents.TimeLogged <= ? AND cptcodes.Code=adverseevents.Code ORDER BY adverseevents.Code, adverseevents.TimeLogged DESC\");\r\n        ps.setTimestamp(1, new Timestamp(beginning.getTime()));\r\n        ps.setTimestamp(2, new Timestamp(((ending.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1495,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,383,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO',2826,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AllergyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1496,'long pid','long',0,383,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO',2828,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.getAllergies(long)',0,'/**\r\n * Returns a list of patients allergies.\r\n *\r\n * @param pid\r\n * 		A long for the MID of the patient we are looking up.\r\n * @return A java.util.List of AllergyBeans associated with this patient.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<AllergyBean> getAllergies(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM allergies WHERE PatientID=? ORDER BY FirstFound DESC\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return allergyBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1497,'AllergyBean allergy','edu.ncsu.csc.itrust.beans.AllergyBean',244,383,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO',2827,'edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.addAllergy(edu.ncsu.csc.itrust.beans.AllergyBean)',0,'/**\r\n * Adds an allergy to this patients list.\r\n *\r\n * @param allergy:\r\n * 		allergy bean\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void addAllergy(AllergyBean allergy) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO allergies(PatientID, Code, FirstFound, Description) VALUES (?,?,?,?)\");\r\n        ps.setLong(1, allergy.getPatientID());\r\n        ps.setString(2, allergy.getNDCode());\r\n        if ((allergy.getFirstFound()) == null) {\r\n            ps.setDate(3, null);\r\n        } else {\r\n            ps.setDate(3, new Date(allergy.getFirstFound().getTime()));\r\n        }\r\n        ps.setString(4, allergy.getDescription());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1498,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2829,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ApptDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n    this.abloader = new ApptBeanLoader();\r\n}'),(1499,'int apptID','int',0,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2836,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAppt(int)',0,'public List<ApptBean> getAppt(int apptID) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE appt_id=?\");\r\n    ps.setInt(1, apptID);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> abList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return abList;\r\n}'),(1500,'long mid','long',0,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2837,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getApptsFor(long)',0,'public List<ApptBean> getApptsFor(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE doctor_id=? AND sched_date > NOW() ORDER BY sched_date;\");\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE patient_id=? AND sched_date > NOW() ORDER BY sched_date;\");\r\n    }\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> abList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return abList;\r\n}'),(1501,'long mid','long',0,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2831,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllApptsFor(long)',0,'public List<ApptBean> getAllApptsFor(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE doctor_id=? ORDER BY sched_date;\");\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE patient_id=? ORDER BY sched_date;\");\r\n    }\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> abList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return abList;\r\n}'),(1502,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2839,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.scheduleAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'public void scheduleAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO appointment (appt_type, patient_id, doctor_id, sched_date, comment) \" + \"VALUES (?, ?, ?, ?, ?)\"));\r\n    ps = this.abloader.loadParameters(ps, appt);\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}'),(1503,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2830,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.editAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'public void editAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"UPDATE appointment SET appt_type=?, sched_date=?, comment=? WHERE appt_id=?\");\r\n    ps.setString(1, appt.getApptType());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setString(3, appt.getComment());\r\n    ps.setInt(4, appt.getApptID());\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}'),(1504,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2838,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)',0,'public void removeAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"DELETE FROM appointment WHERE appt_id=?\");\r\n    ps.setInt(1, appt.getApptID());\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}'),(1505,'long mid','long',0,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2834,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllHCPConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getAllHCPConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.doctor_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}'),(1506,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2834,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllHCPConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getAllHCPConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.doctor_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}'),(1507,'long mid','long',0,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2835,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllPatientConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getAllPatientConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.patient_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}'),(1508,'ApptBean appt','edu.ncsu.csc.itrust.beans.ApptBean',245,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2835,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllPatientConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)',0,'public List<ApptBean> getAllPatientConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.patient_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}'),(1509,'long mid','long',0,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2832,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllConflictsForDoctor(long)',0,'/**\r\n * Returns all past and future appointment conflicts for the doctor with the given MID\r\n *\r\n * @param mid\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<ApptBean> getAllConflictsForDoctor(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT a1.* \" + ((((((((\"FROM appointment a1, appointment a2, \"// all possible sets of 2 appts\r\n     + \"appointmenttype type1,appointmenttype type2 \")// and the corresponding types\r\n     + \"WHERE a1.appt_id!=a2.appt_id AND \")// exclude itself\r\n     + \"a1.appt_type=type1.appt_type AND a2.appt_type=type2.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a1.sched_date, INTERVAL type1.duration MINUTE)>a2.sched_date AND \")// a1 ends after a2 starts AND\r\n     + \"a1.sched_date<=a2.sched_date) OR\")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(a2.sched_date, INTERVAL type2.duration MINUTE)>a1.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"a2.sched_date<=a1.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a1.doctor_id=? AND a2.doctor_id=?;\")));\r\n    ps.setLong(1, mid);\r\n    ps.setLong(2, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}'),(1510,'long mid','long',0,384,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO',2833,'edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllConflictsForPatient(long)',0,'/**\r\n * Returns all past and future appointment conflicts for the patient with the given MID\r\n *\r\n * @param mid\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<ApptBean> getAllConflictsForPatient(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT a1.* \" + ((((((((\"FROM appointment a1, appointment a2, \"// all possible sets of 2 appts\r\n     + \"appointmenttype type1,appointmenttype type2 \")// and the corresponding types\r\n     + \"WHERE a1.appt_id!=a2.appt_id AND \")// exclude itself\r\n     + \"a1.appt_type=type1.appt_type AND a2.appt_type=type2.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a1.sched_date, INTERVAL type1.duration MINUTE)>a2.sched_date AND \")// a1 ends after a2 starts AND\r\n     + \"a1.sched_date<=a2.sched_date) OR\")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(a2.sched_date, INTERVAL type2.duration MINUTE)>a1.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"a2.sched_date<=a1.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a1.patient_id=? AND a2.patient_id=?;\")));\r\n    ps.setLong(1, mid);\r\n    ps.setLong(2, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}'),(1511,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2840,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ApptRequestDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    loader = new ApptRequestBeanLoader();\r\n}'),(1512,'long hcpid','long',0,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2843,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.getApptRequestsFor(long)',0,'/**\r\n *\r\n *\r\n * @param hcpid\r\n * 		\r\n * @return \r\n */\r\npublic List<ApptRequestBean> getApptRequestsFor(long hcpid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"SELECT * FROM appointmentrequests WHERE doctor_id=? ORDER BY sched_date\");\r\n    stmt.setLong(1, hcpid);\r\n    ResultSet rs = stmt.executeQuery();\r\n    List<ApptRequestBean> list = loader.loadList(rs);\r\n    DBUtil.closeConnection(conn, stmt);\r\n    return list;\r\n}'),(1513,'ApptRequestBean req','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2841,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'/**\r\n *\r\n *\r\n * @param req\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic void addApptRequest(ApptRequestBean req) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"INSERT INTO appointmentrequests (appt_type, patient_id, doctor_id, sched_date, comment, pending, accepted) VALUES (?, ?, ?, ?, ?, ?, ?)\");\r\n    loader.loadParameters(stmt, req);\r\n    stmt.executeUpdate();\r\n    DBUtil.closeConnection(conn, stmt);\r\n}'),(1514,'ApptRequestBean req','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2844,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.updateApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)',0,'/**\r\n *\r\n *\r\n * @param req\r\n * 		\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic void updateApptRequest(ApptRequestBean req) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"UPDATE appointmentrequests SET pending=?, accepted=? WHERE appt_id=?\");\r\n    stmt.setBoolean(1, req.isPending());\r\n    stmt.setBoolean(2, req.isAccepted());\r\n    stmt.setInt(3, req.getRequestedAppt().getApptID());\r\n    stmt.executeUpdate();\r\n    DBUtil.closeConnection(conn, stmt);\r\n}'),(1515,'int reqID','int',0,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2842,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.getApptRequest(int)',0,'public ApptRequestBean getApptRequest(int reqID) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"SELECT * FROM appointmentrequests WHERE appt_id=?\");\r\n    stmt.setInt(1, reqID);\r\n    ResultSet rs = stmt.executeQuery();\r\n    if (rs.next()) {\r\n        ApptRequestBean b = loader.loadSingle(rs);\r\n        DBUtil.closeConnection(conn, stmt);\r\n        return b;\r\n    } else {\r\n        DBUtil.closeConnection(conn, stmt);\r\n        return null;\r\n    }\r\n}'),(1516,'edu.ncsu.csc.itrust.beans.ApptRequestBean','edu.ncsu.csc.itrust.beans.ApptRequestBean',246,385,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO',2842,'edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.getApptRequest(int)',1,'public ApptRequestBean getApptRequest(int reqID) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"SELECT * FROM appointmentrequests WHERE appt_id=?\");\r\n    stmt.setInt(1, reqID);\r\n    ResultSet rs = stmt.executeQuery();\r\n    if (rs.next()) {\r\n        ApptRequestBean b = loader.loadSingle(rs);\r\n        DBUtil.closeConnection(conn, stmt);\r\n        return b;\r\n    } else {\r\n        DBUtil.closeConnection(conn, stmt);\r\n        return null;\r\n    }\r\n}'),(1517,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,386,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO',2845,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public ApptTypeDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.atLoader = new ApptTypeBeanLoader();\r\n}'),(1518,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,386,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO',2846,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public boolean addApptType(ApptTypeBean apptType) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO appointmenttype (appt_type, duration) \" + \"VALUES (?, ?)\"));\r\n    this.atLoader.loadParameters(ps, apptType);\r\n    int x = ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n    if (x > 0)\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}'),(1519,'ApptTypeBean apptType','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,386,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO',2847,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'public boolean editApptType(ApptTypeBean apptType) throws DBException, SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"UPDATE appointmenttype SET duration=? WHERE appt_type=?\");\r\n    ps.setInt(1, apptType.getDuration());\r\n    ps.setString(2, apptType.getName());\r\n    int x = ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n    if (x > 0)\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}'),(1520,'String apptType','java.lang.String',0,386,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO',2848,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.getApptType(java.lang.String)',0,'public ApptTypeBean getApptType(String apptType) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM appointmenttype WHERE appt_type=?\");\r\n    ps.setString(1, apptType);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptTypeBean> beans = atLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    if ((beans.size()) > 0) {\r\n        return beans.get(0);\r\n    } else {\r\n        return null;\r\n    }\r\n}'),(1521,'edu.ncsu.csc.itrust.beans.ApptTypeBean','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,386,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO',2848,'edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.getApptType(java.lang.String)',1,'public ApptTypeBean getApptType(String apptType) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM appointmenttype WHERE appt_type=?\");\r\n    ps.setString(1, apptType);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptTypeBean> beans = atLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    if ((beans.size()) > 0) {\r\n        return beans.get(0);\r\n    } else {\r\n        return null;\r\n    }\r\n}'),(1522,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2850,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AuthDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1523,'Long mid','java.lang.Long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2851,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.addUser(java.lang.Long,edu.ncsu.csc.itrust.enums.Role,java.lang.String)',0,'/**\r\n * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).\r\n * Initially sets security question to a random set of characters, so that nobody should be able to guess\r\n * its value.\r\n *\r\n * @param mid\r\n * 		The users MID as a Long.\r\n * @param role\r\n * 		The role of the user as a Role enum {@link Role}\r\n * @param password\r\n * 		The password for the new user.\r\n * @return A string representing the newly added randomly-generated password.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String addUser(Long mid, Role role, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"INSERT INTO users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)\");\r\n        pstmt.setLong(1, mid);\r\n        String hashedPassword = DigestUtils.shaHex(password);\r\n        pstmt.setString(2, hashedPassword);\r\n        pstmt.setString(3, role.toString());\r\n        pstmt.setString(4, \"Enter the random password given in your account email\");\r\n        pstmt.setString(5, password);\r\n        pstmt.executeUpdate();\r\n        return password;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1524,'Role role','edu.ncsu.csc.itrust.enums.Role',486,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2851,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.addUser(java.lang.Long,edu.ncsu.csc.itrust.enums.Role,java.lang.String)',0,'/**\r\n * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).\r\n * Initially sets security question to a random set of characters, so that nobody should be able to guess\r\n * its value.\r\n *\r\n * @param mid\r\n * 		The users MID as a Long.\r\n * @param role\r\n * 		The role of the user as a Role enum {@link Role}\r\n * @param password\r\n * 		The password for the new user.\r\n * @return A string representing the newly added randomly-generated password.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String addUser(Long mid, Role role, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"INSERT INTO users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)\");\r\n        pstmt.setLong(1, mid);\r\n        String hashedPassword = DigestUtils.shaHex(password);\r\n        pstmt.setString(2, hashedPassword);\r\n        pstmt.setString(3, role.toString());\r\n        pstmt.setString(4, \"Enter the random password given in your account email\");\r\n        pstmt.setString(5, password);\r\n        pstmt.executeUpdate();\r\n        return password;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1525,'String password','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2851,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.addUser(java.lang.Long,edu.ncsu.csc.itrust.enums.Role,java.lang.String)',0,'/**\r\n * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).\r\n * Initially sets security question to a random set of characters, so that nobody should be able to guess\r\n * its value.\r\n *\r\n * @param mid\r\n * 		The users MID as a Long.\r\n * @param role\r\n * 		The role of the user as a Role enum {@link Role}\r\n * @param password\r\n * 		The password for the new user.\r\n * @return A string representing the newly added randomly-generated password.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String addUser(Long mid, Role role, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"INSERT INTO users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)\");\r\n        pstmt.setLong(1, mid);\r\n        String hashedPassword = DigestUtils.shaHex(password);\r\n        pstmt.setString(2, hashedPassword);\r\n        pstmt.setString(3, role.toString());\r\n        pstmt.setString(4, \"Enter the random password given in your account email\");\r\n        pstmt.setString(5, password);\r\n        pstmt.executeUpdate();\r\n        return password;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1526,'String question','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2866,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.setSecurityQuestionAnswer(java.lang.String,java.lang.String,long)',0,'/**\r\n * Reset the security question and answer for a particular user\r\n *\r\n * @param question\r\n * 		The security question as a string.\r\n * @param answer\r\n * 		The security answer as a string.\r\n * @param mid\r\n * 		The MID of the user as a long.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void setSecurityQuestionAnswer(String question, String answer, long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"UPDATE users SET sQuestion = ?, sAnswer = ? WHERE MID = ?\");\r\n        pstmt.setString(1, question);\r\n        pstmt.setString(2, answer);\r\n        pstmt.setLong(3, mid);\r\n        pstmt.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1527,'String answer','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2866,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.setSecurityQuestionAnswer(java.lang.String,java.lang.String,long)',0,'/**\r\n * Reset the security question and answer for a particular user\r\n *\r\n * @param question\r\n * 		The security question as a string.\r\n * @param answer\r\n * 		The security answer as a string.\r\n * @param mid\r\n * 		The MID of the user as a long.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void setSecurityQuestionAnswer(String question, String answer, long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"UPDATE users SET sQuestion = ?, sAnswer = ? WHERE MID = ?\");\r\n        pstmt.setString(1, question);\r\n        pstmt.setString(2, answer);\r\n        pstmt.setLong(3, mid);\r\n        pstmt.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1528,'long mid','long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2866,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.setSecurityQuestionAnswer(java.lang.String,java.lang.String,long)',0,'/**\r\n * Reset the security question and answer for a particular user\r\n *\r\n * @param question\r\n * 		The security question as a string.\r\n * @param answer\r\n * 		The security answer as a string.\r\n * @param mid\r\n * 		The MID of the user as a long.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void setSecurityQuestionAnswer(String question, String answer, long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"UPDATE users SET sQuestion = ?, sAnswer = ? WHERE MID = ?\");\r\n        pstmt.setString(1, question);\r\n        pstmt.setString(2, answer);\r\n        pstmt.setLong(3, mid);\r\n        pstmt.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1529,'long mid','long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2858,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getUserName(long)',0,'/**\r\n * Returns the user name of a user from just the MID\r\n *\r\n * @param mid\r\n * 		The MID of the user to get the name of.\r\n * @return The users name as a String.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getUserName(long mid) throws DBException, iTrustException {\r\n    Role role = getUserRole(mid);\r\n    switch (role) {\r\n        case HCP :\r\n        case PHA :\r\n        case ADMIN :\r\n        case UAP :\r\n        case ER :\r\n        case LT :\r\n            return factory.getPersonnelDAO().getName(mid);\r\n        case PATIENT :\r\n            return factory.getPatientDAO().getName(mid);\r\n        case TESTER :\r\n            return String.valueOf(mid);\r\n        default :\r\n            throw new iTrustException(((\"Role \" + role) + \" not supported\"));\r\n    }\r\n}'),(1530,'long mid','long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2859,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getUserRole(long)',0,'/**\r\n * Returns the role of a particular MID\r\n *\r\n * @param mid\r\n * 		The MID of the user to look up.\r\n * @return The {@link Role} of the user as an enum.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic Role getUserRole(long mid) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"SELECT role FROM users WHERE MID=?\");\r\n        pstmt.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = pstmt.executeQuery();\r\n        if (rs.next()) {\r\n            return Role.parse(rs.getString(\"role\"));\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1531,'edu.ncsu.csc.itrust.enums.Role','edu.ncsu.csc.itrust.enums.Role',486,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2859,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getUserRole(long)',1,'/**\r\n * Returns the role of a particular MID\r\n *\r\n * @param mid\r\n * 		The MID of the user to look up.\r\n * @return The {@link Role} of the user as an enum.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic Role getUserRole(long mid) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"SELECT role FROM users WHERE MID=?\");\r\n        pstmt.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = pstmt.executeQuery();\r\n        if (rs.next()) {\r\n            return Role.parse(rs.getString(\"role\"));\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1532,'long mid','long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2853,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getDeactivated(long)',0,'/**\r\n * Returns whether a user is deactivated.\r\n * Currently works only for patients\r\n *\r\n * @param mid\r\n * 		The MID of the user to look up.\r\n * @return Activation status of the user\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean getDeactivated(long mid) throws DBException, iTrustException {\r\n    Role role = getUserRole(mid);\r\n    switch (role) {\r\n        case PATIENT :\r\n            Connection conn = null;\r\n            PreparedStatement pstmt = null;\r\n            try {\r\n                conn = factory.getConnection();\r\n                pstmt = conn.prepareStatement(\"SELECT DateOfDeactivation FROM patients WHERE MID=?\");\r\n                pstmt.setLong(1, mid);\r\n                ResultSet rs;\r\n                rs = pstmt.executeQuery();\r\n                if (rs.next()) {\r\n                    if ((rs.getString(\"DateOfDeactivation\")) == null) {\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    throw new iTrustException(\"User does not exist\");\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n                throw new DBException(e);\r\n            } finally {\r\n                DBUtil.closeConnection(conn, pstmt);\r\n            }\r\n        default :\r\n            return false;\r\n    }\r\n}'),(1533,'long mid','long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2865,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.resetPassword(long,java.lang.String)',0,'/**\r\n * Change the password of a particular user\r\n *\r\n * @param mid\r\n * 		The MID of the user whose password we are changing.\r\n * @param password\r\n * 		The new password.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void resetPassword(long mid, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE users SET password=? WHERE MID=?\");\r\n        password = DigestUtils.shaHex(password);\r\n        ps.setString(1, password);\r\n        ps.setLong(2, mid);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1534,'String password','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2865,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.resetPassword(long,java.lang.String)',0,'/**\r\n * Change the password of a particular user\r\n *\r\n * @param mid\r\n * 		The MID of the user whose password we are changing.\r\n * @param password\r\n * 		The new password.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void resetPassword(long mid, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE users SET password=? WHERE MID=?\");\r\n        password = DigestUtils.shaHex(password);\r\n        ps.setString(1, password);\r\n        ps.setLong(2, mid);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1535,'long mid','long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2857,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getSecurityQuestion(long)',0,'/**\r\n * Return the security question for a particular user.\r\n *\r\n * @param mid\r\n * 		The MID of the user we are looking up.\r\n * @return The security question of the user we are looking up.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getSecurityQuestion(long mid) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT sQuestion FROM users WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet r = ps.executeQuery();\r\n        if (r.next())\r\n            return r.getString(\"sQuestion\");\r\n        else\r\n            throw new iTrustException((\"No security question set for MID: \" + mid));\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1536,'long mid','long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2856,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getSecurityAnswer(long)',0,'/**\r\n * Return the security answer of a particular user\r\n *\r\n * @param mid\r\n * 		The MID of the user we are looking up.\r\n * @return The security answer as a String.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic String getSecurityAnswer(long mid) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT sAnswer FROM users WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet r = ps.executeQuery();\r\n        if (r.next())\r\n            return r.getString(\"sAnswer\");\r\n        else\r\n            throw new iTrustException((\"No security answer set for MID \" + mid));\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1537,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2862,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.recordLoginFailure(java.lang.String)',0,'/**\r\n * Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where\r\n * the key is the users IP address. If the users IP address is not in the table, a row with \"1\" is\r\n * added.\r\n *\r\n * @param ipAddr\r\n * 		The IP address of the user as a String.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void recordLoginFailure(String ipAddr) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE loginfailures SET FailureCount=FailureCount+1, lastFailure=CURRENT_TIMESTAMP WHERE IPAddress=?\");\r\n        // .prepareStatement(\"INSERT INTO LoginFailures VALUES(?,?,?)\");\r\n        ps.setString(1, ipAddr);\r\n        // ps.setInt(2, failures);\r\n        // ps.setDate(3, Calendar.getInstance().getTime());\r\n        int numUpdated = ps.executeUpdate();\r\n        // if there wasnt an empty row to begin with\r\n        if (numUpdated == 0)\r\n            insertLoginFailureRow(ipAddr, 1, conn);\r\n        // now they have a row AND a strike against\r\n\r\n        // em\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1538,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2863,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.recordResetPasswordFailure(java.lang.String)',0,'/**\r\n * Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash\r\n * table where the key is the users IP address. If the users IP address is not in the table, a row with\r\n * \"1\" is added.\r\n *\r\n * @param ipAddr\r\n * 		The IP address of the user as a String.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void recordResetPasswordFailure(String ipAddr) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE resetpasswordfailures SET failurecount=failurecount+1 WHERE ipaddress=?\");\r\n        ps.setString(1, ipAddr);\r\n        int numUpdated = ps.executeUpdate();\r\n        // if there wasnt an empty row to begin with\r\n        if (numUpdated == 0)\r\n            insertResetPasswordRow(ipAddr, 1, conn);\r\n        // now they have a row AND a strike against\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1539,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2855,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getResetPasswordFailures(java.lang.String)',0,'/**\r\n * Return the number of failures from resetting a password, given an IP address.\r\n *\r\n * @param ipAddr\r\n * 		An IP address for the associated attempt as a String.\r\n * @return An int representing the number of failures.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int getResetPasswordFailures(String ipAddr) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM resetpasswordfailures WHERE IPADDRESS=?\");\r\n        ps.setString(1, ipAddr);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            // if were more than X minutes out, clear the failure count\r\n            if (((System.currentTimeMillis()) - (rs.getTimestamp(\"lastFailure\").getTime())) > (AuthDAO.LOGIN_TIMEOUT)) {\r\n                updateResetFailuresToZero(ipAddr, conn);\r\n                return 0;\r\n            } else {\r\n                return rs.getInt(\"failureCount\");\r\n            }\r\n        } else {\r\n            insertResetPasswordRow(ipAddr, 0, conn);\r\n            return 0;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1540,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2854,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getLoginFailures(java.lang.String)',0,'/**\r\n * Return the number of failures from login failures a password, given an IP address.\r\n *\r\n * @param ipAddr\r\n * 		The IP address for this attempt as a String.\r\n * @return An int representing the number of failures which have occured.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int getLoginFailures(String ipAddr) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM loginfailures WHERE IPADDRESS=?\");\r\n        ps.setString(1, ipAddr);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            // if were more than X minutes out, clear the failure count\r\n            if (((System.currentTimeMillis()) - (rs.getTimestamp(\"lastFailure\").getTime())) > (AuthDAO.LOGIN_TIMEOUT)) {\r\n                updateFailuresToZero(ipAddr, conn);\r\n                return 0;\r\n            } else {\r\n                return rs.getInt(\"failureCount\");\r\n            }\r\n        } else {\r\n            insertLoginFailureRow(ipAddr, 0, conn);\r\n            return 0;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1541,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2860,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertLoginFailureRow(java.lang.String,int,java.sql.Connection)',0,'private void insertLoginFailureRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"INSERT INTO loginfailures(IPAddress, failureCount) VALUES(?,?)\");\r\n    ps.setString(1, ipAddr);\r\n    ps.setInt(2, failureCount);\r\n    ps.executeUpdate();\r\n}'),(1542,'int failureCount','int',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2860,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertLoginFailureRow(java.lang.String,int,java.sql.Connection)',0,'private void insertLoginFailureRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"INSERT INTO loginfailures(IPAddress, failureCount) VALUES(?,?)\");\r\n    ps.setString(1, ipAddr);\r\n    ps.setInt(2, failureCount);\r\n    ps.executeUpdate();\r\n}'),(1543,'Connection conn','java.sql.Connection',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2860,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertLoginFailureRow(java.lang.String,int,java.sql.Connection)',0,'private void insertLoginFailureRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"INSERT INTO loginfailures(IPAddress, failureCount) VALUES(?,?)\");\r\n    ps.setString(1, ipAddr);\r\n    ps.setInt(2, failureCount);\r\n    ps.executeUpdate();\r\n}'),(1544,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2861,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertResetPasswordRow(java.lang.String,int,java.sql.Connection)',0,'private void insertResetPasswordRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"INSERT INTO resetpasswordfailures(IPAddress, failureCount) VALUES(?,?)\");\r\n    ps.setString(1, ipAddr);\r\n    ps.setInt(2, failureCount);\r\n    ps.executeUpdate();\r\n}'),(1545,'int failureCount','int',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2861,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertResetPasswordRow(java.lang.String,int,java.sql.Connection)',0,'private void insertResetPasswordRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"INSERT INTO resetpasswordfailures(IPAddress, failureCount) VALUES(?,?)\");\r\n    ps.setString(1, ipAddr);\r\n    ps.setInt(2, failureCount);\r\n    ps.executeUpdate();\r\n}'),(1546,'Connection conn','java.sql.Connection',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2861,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertResetPasswordRow(java.lang.String,int,java.sql.Connection)',0,'private void insertResetPasswordRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"INSERT INTO resetpasswordfailures(IPAddress, failureCount) VALUES(?,?)\");\r\n    ps.setString(1, ipAddr);\r\n    ps.setInt(2, failureCount);\r\n    ps.executeUpdate();\r\n}'),(1547,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2867,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.updateFailuresToZero(java.lang.String,java.sql.Connection)',0,'private void updateFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"UPDATE loginfailures SET failureCount=0 WHERE IPAddress=?\");\r\n    ps.setString(1, ipAddr);\r\n    ps.executeUpdate();\r\n}'),(1548,'Connection conn','java.sql.Connection',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2867,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.updateFailuresToZero(java.lang.String,java.sql.Connection)',0,'private void updateFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"UPDATE loginfailures SET failureCount=0 WHERE IPAddress=?\");\r\n    ps.setString(1, ipAddr);\r\n    ps.executeUpdate();\r\n}'),(1549,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2864,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.resetLoginFailuresToZero(java.lang.String)',0,'public void resetLoginFailuresToZero(String ipAddr) throws DBException, SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE loginfailures SET failureCount=0 WHERE IPAddress=?\");\r\n        ps.setString(1, ipAddr);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1550,'String ipAddr','java.lang.String',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2868,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.updateResetFailuresToZero(java.lang.String,java.sql.Connection)',0,'private void updateResetFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"UPDATE resetpasswordfailures SET failureCount=0 WHERE IPAddress=?\");\r\n    ps.setString(1, ipAddr);\r\n    ps.executeUpdate();\r\n}'),(1551,'Connection conn','java.sql.Connection',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2868,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.updateResetFailuresToZero(java.lang.String,java.sql.Connection)',0,'private void updateResetFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"UPDATE resetpasswordfailures SET failureCount=0 WHERE IPAddress=?\");\r\n    ps.setString(1, ipAddr);\r\n    ps.executeUpdate();\r\n}'),(1552,'long mid','long',0,387,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO',2852,'edu.ncsu.csc.itrust.dao.mysql.AuthDAO.checkUserExists(long)',0,'/**\r\n * Check that a user actually exists.\r\n *\r\n * @param mid\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean checkUserExists(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM users WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1553,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,388,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO',2869,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic CPTCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1554,'String code','java.lang.String',0,388,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO',2872,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getCPTCode(java.lang.String)',0,'/**\r\n * Returns a particular procedure description for a code.\r\n *\r\n * @param code\r\n * 		The string representation of the code.\r\n * @return The textual description of the code.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ProcedureBean getCPTCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM cptcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return procedureBeanLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1555,'edu.ncsu.csc.itrust.beans.ProcedureBean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,388,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO',2872,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getCPTCode(java.lang.String)',1,'/**\r\n * Returns a particular procedure description for a code.\r\n *\r\n * @param code\r\n * 		The string representation of the code.\r\n * @return The textual description of the code.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ProcedureBean getCPTCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM cptcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return procedureBeanLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1556,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,388,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO',2870,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Adds a new CPT code, returns that it was added successfully\r\n *\r\n * @param proc\r\n * 		A ProcedureBean representing the new code information.\r\n * @return A boolean for whether the operation was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addCPTCode(ProcedureBean proc) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO cptcodes (Code, Description, Attribute) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, proc.getCPTCode());\r\n        ps.setString(2, proc.getDescription());\r\n        ps.setString(3, proc.getAttribute());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1557,'ProcedureBean proc','edu.ncsu.csc.itrust.beans.ProcedureBean',273,388,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO',2875,'edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Change the procedure description for a particular CPT code\r\n *\r\n * @param proc\r\n * 		A ProcedureBean representing the new code information.\r\n * @return A boolean for whether the operation was successful.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateCode(ProcedureBean proc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE cptcodes SET Description = ?, Attribute = ? WHERE Code = ?\");\r\n        ps.setString(1, proc.getDescription());\r\n        ps.setString(2, proc.getAttribute());\r\n        ps.setString(3, proc.getCPTCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1558,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2876,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n */\r\npublic DiagnosesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1559,'long visitID','long',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2882,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getList(long)',0,'/**\r\n *\r\n *\r\n * @param visitID\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<DiagnosisBean> getList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovdiagnosis,icdcodes Where ovdiagnosis.VisitID = ? \" + \"AND icdcodes.Code=ovdiagnosis.ICDCode\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1560,'String icdCode','java.lang.String',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2881,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getDiagnosisCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',0,'/**\r\n * Gets a local zip code count and regional count of a specified diagnosis code\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A bean containing the local and regional counts\r\n * @throws DBException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    DiagnosisStatisticsBean dsBean = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip=? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, zipCode);\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.last();\r\n        int local = rs.getRow();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip LIKE ? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, ((zipCode.substring(0, 3)) + \"%\"));\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        rs = ps.executeQuery();\r\n        rs.last();\r\n        int region = rs.getRow();\r\n        dsBean = new DiagnosisStatisticsBean(zipCode, local, region, lower, upper);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return dsBean;\r\n}'),(1561,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2881,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getDiagnosisCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',1,'/**\r\n * Gets a local zip code count and regional count of a specified diagnosis code\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A bean containing the local and regional counts\r\n * @throws DBException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    DiagnosisStatisticsBean dsBean = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip=? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, zipCode);\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.last();\r\n        int local = rs.getRow();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip LIKE ? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, ((zipCode.substring(0, 3)) + \"%\"));\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        rs = ps.executeQuery();\r\n        rs.last();\r\n        int region = rs.getRow();\r\n        dsBean = new DiagnosisStatisticsBean(zipCode, local, region, lower, upper);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return dsBean;\r\n}'),(1562,'String zipCode','java.lang.String',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2881,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getDiagnosisCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',0,'/**\r\n * Gets a local zip code count and regional count of a specified diagnosis code\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A bean containing the local and regional counts\r\n * @throws DBException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    DiagnosisStatisticsBean dsBean = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip=? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, zipCode);\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.last();\r\n        int local = rs.getRow();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip LIKE ? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, ((zipCode.substring(0, 3)) + \"%\"));\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        rs = ps.executeQuery();\r\n        rs.last();\r\n        int region = rs.getRow();\r\n        dsBean = new DiagnosisStatisticsBean(zipCode, local, region, lower, upper);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return dsBean;\r\n}'),(1563,'Date lower','java.util.Date',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2881,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getDiagnosisCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',0,'/**\r\n * Gets a local zip code count and regional count of a specified diagnosis code\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A bean containing the local and regional counts\r\n * @throws DBException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    DiagnosisStatisticsBean dsBean = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip=? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, zipCode);\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.last();\r\n        int local = rs.getRow();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip LIKE ? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, ((zipCode.substring(0, 3)) + \"%\"));\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        rs = ps.executeQuery();\r\n        rs.last();\r\n        int region = rs.getRow();\r\n        dsBean = new DiagnosisStatisticsBean(zipCode, local, region, lower, upper);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return dsBean;\r\n}'),(1564,'Date upper','java.util.Date',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2881,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getDiagnosisCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',0,'/**\r\n * Gets a local zip code count and regional count of a specified diagnosis code\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A bean containing the local and regional counts\r\n * @throws DBException\r\n * 		\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    DiagnosisStatisticsBean dsBean = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip=? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, zipCode);\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.last();\r\n        int local = rs.getRow();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip LIKE ? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, ((zipCode.substring(0, 3)) + \"%\"));\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        rs = ps.executeQuery();\r\n        rs.last();\r\n        int region = rs.getRow();\r\n        dsBean = new DiagnosisStatisticsBean(zipCode, local, region, lower, upper);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return dsBean;\r\n}'),(1565,'String icdCode','java.lang.String',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2883,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getWeeklyCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',0,'/**\r\n * Gets a weekly local zip code count and regional count of a specified diagnosis code over a time period\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A list of beans containing the local and regional count for each week in the time period\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getWeeklyCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    ArrayList<DiagnosisStatisticsBean> weekStats = new ArrayList<DiagnosisStatisticsBean>();\r\n    do {\r\n        DiagnosisStatisticsBean db = getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n        weekStats.add(db);\r\n        cal.setTime(upperDate);\r\n        cal.add(Calendar.HOUR, 24);\r\n        lowerDate = cal.getTime();\r\n        cal.add(Calendar.HOUR, (24 * 6));\r\n        upperDate = cal.getTime();\r\n    } while (lowerDate.before(upper) );\r\n    return weekStats;\r\n}'),(1566,'String zipCode','java.lang.String',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2883,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getWeeklyCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',0,'/**\r\n * Gets a weekly local zip code count and regional count of a specified diagnosis code over a time period\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A list of beans containing the local and regional count for each week in the time period\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getWeeklyCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    ArrayList<DiagnosisStatisticsBean> weekStats = new ArrayList<DiagnosisStatisticsBean>();\r\n    do {\r\n        DiagnosisStatisticsBean db = getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n        weekStats.add(db);\r\n        cal.setTime(upperDate);\r\n        cal.add(Calendar.HOUR, 24);\r\n        lowerDate = cal.getTime();\r\n        cal.add(Calendar.HOUR, (24 * 6));\r\n        upperDate = cal.getTime();\r\n    } while (lowerDate.before(upper) );\r\n    return weekStats;\r\n}'),(1567,'Date lower','java.util.Date',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2883,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getWeeklyCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',0,'/**\r\n * Gets a weekly local zip code count and regional count of a specified diagnosis code over a time period\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A list of beans containing the local and regional count for each week in the time period\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getWeeklyCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    ArrayList<DiagnosisStatisticsBean> weekStats = new ArrayList<DiagnosisStatisticsBean>();\r\n    do {\r\n        DiagnosisStatisticsBean db = getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n        weekStats.add(db);\r\n        cal.setTime(upperDate);\r\n        cal.add(Calendar.HOUR, 24);\r\n        lowerDate = cal.getTime();\r\n        cal.add(Calendar.HOUR, (24 * 6));\r\n        upperDate = cal.getTime();\r\n    } while (lowerDate.before(upper) );\r\n    return weekStats;\r\n}'),(1568,'Date upper','java.util.Date',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2883,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getWeeklyCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)',0,'/**\r\n * Gets a weekly local zip code count and regional count of a specified diagnosis code over a time period\r\n *\r\n * @param icdCode\r\n * 		The diagnosis code\r\n * @param zipCode\r\n * 		The zip code to evaluate\r\n * @param lower\r\n * 		The starting date\r\n * @param upper\r\n * 		The ending date\r\n * @return A list of beans containing the local and regional count for each week in the time period\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getWeeklyCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    ArrayList<DiagnosisStatisticsBean> weekStats = new ArrayList<DiagnosisStatisticsBean>();\r\n    do {\r\n        DiagnosisStatisticsBean db = getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n        weekStats.add(db);\r\n        cal.setTime(upperDate);\r\n        cal.add(Calendar.HOUR, 24);\r\n        lowerDate = cal.getTime();\r\n        cal.add(Calendar.HOUR, (24 * 6));\r\n        upperDate = cal.getTime();\r\n    } while (lowerDate.before(upper) );\r\n    return weekStats;\r\n}'),(1569,'String icdCode','java.lang.String',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2880,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getCountForWeekOf(java.lang.String,java.lang.String,java.util.Date)',0,'public DiagnosisStatisticsBean getCountForWeekOf(String icdCode, String zipCode, Date lower) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    return getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n}'),(1570,'edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean','edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean',249,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2880,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getCountForWeekOf(java.lang.String,java.lang.String,java.util.Date)',1,'public DiagnosisStatisticsBean getCountForWeekOf(String icdCode, String zipCode, Date lower) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    return getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n}'),(1571,'String zipCode','java.lang.String',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2880,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getCountForWeekOf(java.lang.String,java.lang.String,java.util.Date)',0,'public DiagnosisStatisticsBean getCountForWeekOf(String icdCode, String zipCode, Date lower) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    return getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n}'),(1572,'Date lower','java.util.Date',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2880,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getCountForWeekOf(java.lang.String,java.lang.String,java.util.Date)',0,'public DiagnosisStatisticsBean getCountForWeekOf(String icdCode, String zipCode, Date lower) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    return getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n}'),(1573,'String icdCode','java.lang.String',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2879,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.findEarliestIncident(java.lang.String)',0,'public Date findEarliestIncident(String icdCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT MIN(visitDate) AS visitDate FROM ovdiagnosis d INNER JOIN officevisits o \" + (\" ON d.VisitID=o.ID \" + \" WHERE ICDCode LIKE ?\")));\r\n        ps.setString(1, (icdCode + \"%\"));\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            Date date = rs.getDate(\"visitDate\");\r\n            return date;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return null;\r\n}'),(1574,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2877,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.add(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Adds a diagnosis bean to the database.\r\n *\r\n * @param pres\r\n * 		The prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(DiagnosisBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO ovdiagnosis \" + \"(VisitID,ICDCode) VALUES (?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getICDCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1575,'DiagnosisBean bean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2878,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.edit(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Edits an existing prescription bean.\r\n *\r\n * @param pres\r\n * 		The newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long edit(DiagnosisBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        // String statement = \"UPDATE ovdiagnosis \" +\r\n        // \"SET VisitID=?, ICDCode=? \" +\r\n        // \"WHERE ID=?\";\r\n        String statement = \"UPDATE ovdiagnosis \" + (\"SET VisitID=?, ICDCode=? \" + \"WHERE ID = ?\");\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getICDCode());\r\n        ps.setLong(3, bean.getOvDiagnosisID());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1576,'long ovDiagnosisID','long',0,389,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO',2884,'edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.remove(long)',0,'/**\r\n * Removes the given diagnosis from its office visit\r\n *\r\n * @param ovMedicationID\r\n * 		The unique ID of the medication to be removed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void remove(long ovDiagnosisID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ovdiagnosis WHERE ID=? \");\r\n        ps.setLong(1, ovDiagnosisID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1577,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,390,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO',2885,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic DrugInteractionDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    interactionLoader = new DrugInteractionBeanLoader();\r\n}'),(1578,'String drugCode','java.lang.String',0,390,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO',2887,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.getInteractions(java.lang.String)',0,'/**\r\n * Returns a list of all drug interactions for the input drug name\r\n *\r\n * @return A java.util.List of DrugInteractionBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<DrugInteractionBean> getInteractions(String drugCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM druginteractions WHERE FirstDrug = ? OR SecondDrug = ?\");\r\n        ps.setString(1, drugCode);\r\n        ps.setString(2, drugCode);\r\n        ResultSet rs = ps.executeQuery();\r\n        return interactionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1579,'String firstDrug','java.lang.String',0,390,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO',2888,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.reportInteraction(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param firstDrug\r\n * 		The name of the first drug in an interaction.\r\n * @param secondDrug\r\n * 		The name of the second drug in an interaction.\r\n * @param description\r\n * 		Explanation of the drug interaction.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean reportInteraction(String firstDrug, String secondDrug, String description) throws DBException, iTrustException {\r\n    if (firstDrug.equals(secondDrug))\r\n        throw new iTrustException(\"Drug cannot interact with itself.\");\r\n\r\n    List<DrugInteractionBean> currentIntsDrug2 = getInteractions(secondDrug);\r\n    for (DrugInteractionBean dib : currentIntsDrug2) {\r\n        if (dib.getSecondDrug().equals(firstDrug)) {\r\n            throw new iTrustException(\"Error: Interaction between these drugs already exists.\");\r\n        }\r\n    }\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO druginteractions (FirstDrug, SecondDrug, Description) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, firstDrug);\r\n        ps.setString(2, secondDrug);\r\n        ps.setString(3, description);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Interaction between these drugs already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1580,'String secondDrug','java.lang.String',0,390,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO',2888,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.reportInteraction(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param firstDrug\r\n * 		The name of the first drug in an interaction.\r\n * @param secondDrug\r\n * 		The name of the second drug in an interaction.\r\n * @param description\r\n * 		Explanation of the drug interaction.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean reportInteraction(String firstDrug, String secondDrug, String description) throws DBException, iTrustException {\r\n    if (firstDrug.equals(secondDrug))\r\n        throw new iTrustException(\"Drug cannot interact with itself.\");\r\n\r\n    List<DrugInteractionBean> currentIntsDrug2 = getInteractions(secondDrug);\r\n    for (DrugInteractionBean dib : currentIntsDrug2) {\r\n        if (dib.getSecondDrug().equals(firstDrug)) {\r\n            throw new iTrustException(\"Error: Interaction between these drugs already exists.\");\r\n        }\r\n    }\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO druginteractions (FirstDrug, SecondDrug, Description) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, firstDrug);\r\n        ps.setString(2, secondDrug);\r\n        ps.setString(3, description);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Interaction between these drugs already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1581,'String description','java.lang.String',0,390,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO',2888,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.reportInteraction(java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param firstDrug\r\n * 		The name of the first drug in an interaction.\r\n * @param secondDrug\r\n * 		The name of the second drug in an interaction.\r\n * @param description\r\n * 		Explanation of the drug interaction.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean reportInteraction(String firstDrug, String secondDrug, String description) throws DBException, iTrustException {\r\n    if (firstDrug.equals(secondDrug))\r\n        throw new iTrustException(\"Drug cannot interact with itself.\");\r\n\r\n    List<DrugInteractionBean> currentIntsDrug2 = getInteractions(secondDrug);\r\n    for (DrugInteractionBean dib : currentIntsDrug2) {\r\n        if (dib.getSecondDrug().equals(firstDrug)) {\r\n            throw new iTrustException(\"Error: Interaction between these drugs already exists.\");\r\n        }\r\n    }\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO druginteractions (FirstDrug, SecondDrug, Description) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, firstDrug);\r\n        ps.setString(2, secondDrug);\r\n        ps.setString(3, description);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Interaction between these drugs already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1582,'String firstDrug','java.lang.String',0,390,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO',2886,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.deleteInteraction(java.lang.String,java.lang.String)',0,'/**\r\n * Remove an interaction from the database\r\n *\r\n * @param firstDrug\r\n * 		The name of the first patient\r\n * @param secondDrug\r\n * 		The name of the second patient\r\n * @return true if removed successfully, false if not in list\r\n */\r\npublic boolean deleteInteraction(String firstDrug, String secondDrug) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM druginteractions WHERE (FirstDrug = ? OR SecondDrug = ?) AND (FirstDrug = ? OR SecondDrug = ?)\");\r\n        ps.setString(1, firstDrug);\r\n        ps.setString(2, firstDrug);\r\n        ps.setString(3, secondDrug);\r\n        ps.setString(4, secondDrug);\r\n        if ((ps.executeUpdate()) == 0)\r\n            return false;\r\n\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1583,'String secondDrug','java.lang.String',0,390,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO',2886,'edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.deleteInteraction(java.lang.String,java.lang.String)',0,'/**\r\n * Remove an interaction from the database\r\n *\r\n * @param firstDrug\r\n * 		The name of the first patient\r\n * @param secondDrug\r\n * 		The name of the second patient\r\n * @return true if removed successfully, false if not in list\r\n */\r\npublic boolean deleteInteraction(String firstDrug, String secondDrug) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM druginteractions WHERE (FirstDrug = ? OR SecondDrug = ?) AND (FirstDrug = ? OR SecondDrug = ?)\");\r\n        ps.setString(1, firstDrug);\r\n        ps.setString(2, firstDrug);\r\n        ps.setString(3, secondDrug);\r\n        ps.setString(4, secondDrug);\r\n        if ((ps.executeUpdate()) == 0)\r\n            return false;\r\n\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1584,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,391,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO',2889,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic DrugReactionOverrideCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1585,'String code','java.lang.String',0,391,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO',2892,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.getORCode(java.lang.String)',0,'/**\r\n * Returns a particular description for a given code.\r\n *\r\n * @param code\r\n * 		The override reason code to be looked up.\r\n * @return A bean representing the override reason that was looked up.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic OverrideReasonBean getORCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM drugreactionoverridecodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return orcLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1586,'edu.ncsu.csc.itrust.beans.OverrideReasonBean','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,391,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO',2892,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.getORCode(java.lang.String)',1,'/**\r\n * Returns a particular description for a given code.\r\n *\r\n * @param code\r\n * 		The override reason code to be looked up.\r\n * @return A bean representing the override reason that was looked up.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic OverrideReasonBean getORCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM drugreactionoverridecodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return orcLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1587,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,391,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO',2890,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Adds a new override reason code, returns whether or not the change was made. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param orc\r\n * 		The overridereason bean to be added.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addORCode(OverrideReasonBean orc) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO drugreactionoverridecodes (Code, Description) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, orc.getORCode());\r\n        ps.setString(2, orc.getDescription());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1588,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,391,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO',2893,'edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Updates a particular codes description\r\n *\r\n * @param orc\r\n * 		A bean representing the particular override reason to be updated.\r\n * @return An int representing the number of updated rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateCode(OverrideReasonBean orc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE drugreactionoverridecodes SET Description = ? \" + \"WHERE Code = ?\"));\r\n        ps.setString(1, orc.getDescription());\r\n        ps.setString(2, orc.getORCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1589,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,392,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO',2894,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic FakeEmailDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1590,'String email','java.lang.String',0,392,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO',2897,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.getEmailsByPerson(java.lang.String)',0,'/**\r\n * Return all emails that a person has sent\r\n *\r\n * @param email\r\n * 		The \"From\" email address as a string.\r\n * @return A java.util.List of fake emails.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<Email> getEmailsByPerson(String email) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM fakeemail WHERE ToAddr LIKE ? ORDER BY AddedDate DESC\");\r\n        ps.setString(1, ((\"%\" + email) + \"%\"));\r\n        ResultSet rs = ps.executeQuery();\r\n        return emailBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1591,'Email email','edu.ncsu.csc.itrust.beans.Email',251,392,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO',2898,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.sendEmailRecord(edu.ncsu.csc.itrust.beans.Email)',0,'/**\r\n * \"Send\" an email, which just inserts it into the database.\r\n *\r\n * @param email\r\n * 		The Email object to insert.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void sendEmailRecord(Email email) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO fakeemail (ToAddr, FromAddr, Subject, Body) \" + \"VALUES (?,?,?,?)\"));\r\n        emailBeanLoader.loadParameters(ps, email);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1592,'String bodySubstring','java.lang.String',0,392,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO',2896,'edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.getEmailWithBody(java.lang.String)',0,'/**\r\n * Returns a list of emails that have the given string as a substring of the body\r\n *\r\n * @param string\r\n * 		The string to search within the body.\r\n * @return A java.util.List of fake emails.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<Email> getEmailWithBody(String bodySubstring) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM fakeemail WHERE Instr(Body,?)>0 ORDER BY AddedDate DESC\");\r\n        ps.setString(1, bodySubstring);\r\n        ResultSet rs = ps.executeQuery();\r\n        return emailBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1593,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2899,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic FamilyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1594,'long pid','long',0,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2902,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getParents(long)',0,'/**\r\n * Return the information of the mother and father of this patient\r\n *\r\n * @param pid\r\n * 		-\r\n * 		this patient\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<FamilyMemberBean> getParents(long pid) throws DBException {\r\n    return getFamilyMembers(pid, \"Parent\", (\"SELECT p2.FirstName AS FirstName, p2.LastName AS LastName, p2.MID as MID \" + (\"FROM patients p1, patients p2 \" + \"WHERE p1.MID=? AND (p1.MotherMID=p2.MID OR p1.FatherMID=p2.MID)\")), false);\r\n}'),(1595,'long pid','long',0,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2903,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getSiblings(long)',0,'/**\r\n * Return a list of patients who share at least one parent (and that parent is not 0) with this patient\r\n *\r\n * @param pid\r\n * 		-\r\n * 		this patient\r\n * @return A java.util.list of FamilyMemberBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<FamilyMemberBean> getSiblings(long pid) throws DBException {\r\n    return getFamilyMembers(pid, \"Sibling\", (\"SELECT p2.FirstName AS FirstName, p2.LastName AS LastName, p2.MID as MID \" + (((\"FROM patients p1, patients p2 \" + \"WHERE p1.MID=? AND p1.MID<>p2.MID \") + \"AND( (p1.MotherMID=p2.MotherMID AND p2.MotherMID<>0)\") + \"  OR (p1.FatherMID=p2.FatherMID AND p1.FatherMID<>0))\")), false);\r\n}'),(1596,'long pid','long',0,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2900,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getChildren(long)',0,'/**\r\n * Return a list of patients whose mother or father is this patient\r\n *\r\n * @param pid\r\n * 		-\r\n * 		this patient\r\n * @return A java.util.List of FamilyMemberBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<FamilyMemberBean> getChildren(long pid) throws DBException {\r\n    return getFamilyMembers(pid, \"Child\", (\"SELECT FirstName, LastName, MID FROM patients \" + \"WHERE MotherMID=? or FatherMID=?\"), true);\r\n}'),(1597,'long pid','long',0,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2901,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getFamilyMembers(long,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Private helper method (since all three are alike)\r\n *\r\n * @param pid\r\n * 		\r\n * @param relation\r\n * 		\r\n * @param query\r\n * 		\r\n * @param secondParam\r\n * 		-\r\n * 		add the pid as the second parameter (the 3rd query was a little different)\r\n * @return A java.util.List of FamilyMemberBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate List<FamilyMemberBean> getFamilyMembers(long pid, String relation, String query, boolean secondParam) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    familyBeanLoader = new FamilyBeanLoader(relation);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(query);\r\n        ps.setLong(1, pid);\r\n        if (secondParam)\r\n            ps.setLong(2, pid);\r\n\r\n        ResultSet rs = ps.executeQuery();\r\n        return familyBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1598,'String relation','java.lang.String',0,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2901,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getFamilyMembers(long,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Private helper method (since all three are alike)\r\n *\r\n * @param pid\r\n * 		\r\n * @param relation\r\n * 		\r\n * @param query\r\n * 		\r\n * @param secondParam\r\n * 		-\r\n * 		add the pid as the second parameter (the 3rd query was a little different)\r\n * @return A java.util.List of FamilyMemberBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate List<FamilyMemberBean> getFamilyMembers(long pid, String relation, String query, boolean secondParam) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    familyBeanLoader = new FamilyBeanLoader(relation);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(query);\r\n        ps.setLong(1, pid);\r\n        if (secondParam)\r\n            ps.setLong(2, pid);\r\n\r\n        ResultSet rs = ps.executeQuery();\r\n        return familyBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1599,'String query','java.lang.String',0,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2901,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getFamilyMembers(long,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Private helper method (since all three are alike)\r\n *\r\n * @param pid\r\n * 		\r\n * @param relation\r\n * 		\r\n * @param query\r\n * 		\r\n * @param secondParam\r\n * 		-\r\n * 		add the pid as the second parameter (the 3rd query was a little different)\r\n * @return A java.util.List of FamilyMemberBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate List<FamilyMemberBean> getFamilyMembers(long pid, String relation, String query, boolean secondParam) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    familyBeanLoader = new FamilyBeanLoader(relation);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(query);\r\n        ps.setLong(1, pid);\r\n        if (secondParam)\r\n            ps.setLong(2, pid);\r\n\r\n        ResultSet rs = ps.executeQuery();\r\n        return familyBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1600,'boolean secondParam','boolean',0,393,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO',2901,'edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getFamilyMembers(long,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Private helper method (since all three are alike)\r\n *\r\n * @param pid\r\n * 		\r\n * @param relation\r\n * 		\r\n * @param query\r\n * 		\r\n * @param secondParam\r\n * 		-\r\n * 		add the pid as the second parameter (the 3rd query was a little different)\r\n * @return A java.util.List of FamilyMemberBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate List<FamilyMemberBean> getFamilyMembers(long pid, String relation, String query, boolean secondParam) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    familyBeanLoader = new FamilyBeanLoader(relation);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(query);\r\n        ps.setLong(1, pid);\r\n        if (secondParam)\r\n            ps.setLong(2, pid);\r\n\r\n        ResultSet rs = ps.executeQuery();\r\n        return familyBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1601,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,394,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO',2904,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic HealthRecordsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1602,'long mid','long',0,394,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO',2906,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.getAllHealthRecords(long)',0,'/**\r\n * Returns a list of all health records for a particular patient\r\n *\r\n * @param mid\r\n * 		The MID of the patient to look up.\r\n * @return A java.util.List of HealthRecords.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<HealthRecord> getAllHealthRecords(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM personalhealthinformation \" + \"WHERE PatientID=? ORDER BY ASOFDATE DESC\"));\r\n        ps.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1603,'HealthRecord record','edu.ncsu.csc.itrust.beans.HealthRecord',257,394,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO',2905,'edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.add(edu.ncsu.csc.itrust.beans.HealthRecord)',0,'/**\r\n * Adds a health record for a particular patient\r\n *\r\n * @param record\r\n * 		The HealthRecord object to insert.\r\n * @return A boolean indicating whether the insert was successful.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean add(HealthRecord record) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO personalhealthinformation(PatientID,Height,Weight,\" + (\"Smoker,SmokingStatus,BloodPressureN,BloodPressureD,CholesterolHDL,CholesterolLDL,CholesterolTri,\" + \"HCPID) VALUES(?,?,?,?,?,?,?,?,?,?,?)\")));\r\n        loader.loadParameters(ps, record);\r\n        int numInserted = ps.executeUpdate();\r\n        return numInserted == 1;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1604,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2907,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic HospitalsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1605,'String id','java.lang.String',0,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2912,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.getHospital(java.lang.String)',0,'/**\r\n * Returns a particular hospital given its ID\r\n *\r\n * @param id\r\n * 		The String ID of the hospital.\r\n * @return A HospitalBean representing this hospital.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic HospitalBean getHospital(String id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals WHERE HospitalID = ?\");\r\n        ps.setString(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return hospitalLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1606,'edu.ncsu.csc.itrust.beans.HospitalBean','edu.ncsu.csc.itrust.beans.HospitalBean',258,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2912,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.getHospital(java.lang.String)',1,'/**\r\n * Returns a particular hospital given its ID\r\n *\r\n * @param id\r\n * 		The String ID of the hospital.\r\n * @return A HospitalBean representing this hospital.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic HospitalBean getHospital(String id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals WHERE HospitalID = ?\");\r\n        ps.setString(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return hospitalLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1607,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2908,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Adds a hospital\r\n *\r\n * @param hosp\r\n * 		The HospitalBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addHospital(HospitalBean hosp) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO hospitals (HospitalID, HospitalName, Address, City, State, Zip) \" + \"VALUES (?,?,?,?,?,?)\"));\r\n        ps.setString(1, hosp.getHospitalID());\r\n        ps.setString(2, hosp.getHospitalName());\r\n        ps.setString(3, hosp.getHospitalAddress());\r\n        ps.setString(4, hosp.getHospitalCity());\r\n        ps.setString(5, hosp.getHospitalState());\r\n        ps.setString(6, hosp.getHospitalZip());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Hospital already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1608,'HospitalBean hosp','edu.ncsu.csc.itrust.beans.HospitalBean',258,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2915,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Updates a particular hospitals description. Returns the number of rows affected (should be 1)\r\n *\r\n * @param hosp\r\n * 		The HospitalBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateHospital(HospitalBean hosp) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE hospitals SET HospitalName=?,Address=?,City=?,State=?,Zip=?\" + \"WHERE HospitalID = ?\"));\r\n        ps.setString(1, hosp.getHospitalName());\r\n        ps.setString(2, hosp.getHospitalAddress());\r\n        ps.setString(3, hosp.getHospitalCity());\r\n        ps.setString(4, hosp.getHospitalState());\r\n        ps.setString(5, hosp.getHospitalZip());\r\n        ps.setString(6, hosp.getHospitalID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1609,'long hcpID','long',0,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2909,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.assignHospital(long,java.lang.String)',0,'/**\r\n * Assign an HCP to a hospital. If they have already been assigned to that hospital, then an\r\n * iTrustException is thrown.\r\n *\r\n * @param hcpID\r\n * 		The HCPs MID to assign to the hospital.\r\n * @param hospitalID\r\n * 		The ID of the hospital to assign them to.\r\n * @return A boolean indicating whether the assignment was a success.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean assignHospital(long hcpID, String hospitalID) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO hcpassignedhos (HCPID, HosID) VALUES (?,?)\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setString(2, hospitalID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"HCP \" + hcpID) + \" already assigned to hospital \") + hospitalID));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1610,'String hospitalID','java.lang.String',0,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2909,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.assignHospital(long,java.lang.String)',0,'/**\r\n * Assign an HCP to a hospital. If they have already been assigned to that hospital, then an\r\n * iTrustException is thrown.\r\n *\r\n * @param hcpID\r\n * 		The HCPs MID to assign to the hospital.\r\n * @param hospitalID\r\n * 		The ID of the hospital to assign them to.\r\n * @return A boolean indicating whether the assignment was a success.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean assignHospital(long hcpID, String hospitalID) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO hcpassignedhos (HCPID, HosID) VALUES (?,?)\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setString(2, hospitalID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"HCP \" + hcpID) + \" already assigned to hospital \") + hospitalID));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1611,'long hcpID','long',0,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2914,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.removeHospitalAssignment(long,java.lang.String)',0,'/**\r\n * Unassigns an HCP to a hospital. Returns whether or not any changes were made\r\n *\r\n * @param hcpID\r\n * 		The MID of the HCP to remove.\r\n * @param hospitalID\r\n * 		The ID of the hospital being removed from.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeHospitalAssignment(long hcpID, String hospitalID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM hcpassignedhos WHERE HCPID = ? AND HosID = ?\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setString(2, hospitalID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1612,'String hospitalID','java.lang.String',0,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2914,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.removeHospitalAssignment(long,java.lang.String)',0,'/**\r\n * Unassigns an HCP to a hospital. Returns whether or not any changes were made\r\n *\r\n * @param hcpID\r\n * 		The MID of the HCP to remove.\r\n * @param hospitalID\r\n * 		The ID of the hospital being removed from.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeHospitalAssignment(long hcpID, String hospitalID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM hcpassignedhos WHERE HCPID = ? AND HosID = ?\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setString(2, hospitalID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1613,'long hcpID','long',0,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2913,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.removeAllHospitalAssignmentsFrom(long)',0,'/**\r\n * Removes all hospital assignments for a particular HCP. Returns the number of rows affected.\r\n *\r\n * @param hcpID\r\n * 		The MID of the HCP.\r\n * @return An int representing the number of hospital assignments removed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int removeAllHospitalAssignmentsFrom(long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM hcpassignedhos WHERE HCPID = ?\");\r\n        ps.setLong(1, hcpID);\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1614,'long hcpID','long',0,395,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO',2910,'edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.checkLTHasHospital(long)',0,'/**\r\n * Checks to see if the LT has an assigned hospital\r\n *\r\n * @param hcpID\r\n * 		The MID of the LT.\r\n * @return true If the LT has an assigned hospital to them\r\n * @return false If the LT does not have an assigned hospital to them\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean checkLTHasHospital(long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hcpassignedhos WHERE HCPID = ?\");\r\n        ps.setLong(1, hcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1615,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,396,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO',2916,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ICDCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1616,'String code','java.lang.String',0,396,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO',2919,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.getICDCode(java.lang.String)',0,'/**\r\n * Returns a particular description for a given code\r\n *\r\n * @param code\r\n * 		The String representation of the code.\r\n * @return A DiagnosisBean of the code.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic DiagnosisBean getICDCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM icdcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return diagnosisLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1617,'edu.ncsu.csc.itrust.beans.DiagnosisBean','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,396,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO',2919,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.getICDCode(java.lang.String)',1,'/**\r\n * Returns a particular description for a given code\r\n *\r\n * @param code\r\n * 		The String representation of the code.\r\n * @return A DiagnosisBean of the code.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic DiagnosisBean getICDCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM icdcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return diagnosisLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1618,'DiagnosisBean diag','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,396,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO',2917,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Adds an ICD9CM code. Returns whether or not the change was made.\r\n *\r\n * @param diag\r\n * 		The DiagnosisBean representing the changes.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addICDCode(DiagnosisBean diag) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO icdcodes (Code, Description, Chronic) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, diag.getICDCode());\r\n        ps.setString(2, diag.getDescription());\r\n        ps.setString(3, diag.getClassification());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1619,'DiagnosisBean diag','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,396,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO',2920,'edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Changes a the description of a particular code.\r\n *\r\n * @param diag\r\n * 		A DiagnosisBean representing the changes.\r\n * @return A boolean indicating the number of updated rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateCode(DiagnosisBean diag) throws DBException {\r\n    int rows;\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE icdcodes SET Description = ?, Chronic = ?, URL = ? WHERE Code = ?\");\r\n        ps.setString(1, diag.getDescription());\r\n        ps.setString(2, diag.getClassification());\r\n        ps.setString(3, diag.getURL());\r\n        ps.setString(4, diag.getICDCode());\r\n        rows = ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return rows;\r\n}'),(1620,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,397,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO',2921,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic LOINCDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    LOINCLoader = new LOINCBeanLoader();\r\n}'),(1621,'LOINCbean hosp','edu.ncsu.csc.itrust.beans.LOINCbean',259,397,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO',2922,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.addLOINC(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Adds a LOINC\r\n *\r\n * @param hosp\r\n * 		The LOINCbean representing the new code to be added.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic void addLOINC(LOINCbean hosp) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO loinc (LaboratoryProcedureCode, Component, KindOfProperty, TimeAspect, System, ScaleType, MethodType) \" + \"VALUES (?,?,?,?,?,?,?)\"));\r\n        ps.setString(1, hosp.getLabProcedureCode());\r\n        ps.setString(2, hosp.getComponent());\r\n        ps.setString(3, hosp.getKindOfProperty());\r\n        ps.setString(4, hosp.getTimeAspect());\r\n        ps.setString(5, hosp.getSystem());\r\n        ps.setString(6, hosp.getScaleType());\r\n        ps.setString(7, hosp.getMethodType());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: LOINC already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1622,'String labProcCode','java.lang.String',0,397,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO',2924,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.getProcedures(java.lang.String)',0,'/**\r\n * Returns all LOINCs associated with LaboratoryProcedureCode\r\n *\r\n * @param labProcCode\r\n * 		The code of the Laboratory Procedure Code as a String.\r\n * @return A java.util.List of LOINCBeans matching the Laboratory Procedure Code.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LOINCbean> getProcedures(String labProcCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From loinc Where LaboratoryProcedureCode = ? \");\r\n        ps.setString(1, labProcCode);\r\n        ResultSet rs = ps.executeQuery();\r\n        return LOINCLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1623,'LOINCbean ov','edu.ncsu.csc.itrust.beans.LOINCbean',259,397,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO',2925,'edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.update(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Updates the information in LOINC.\r\n *\r\n * @param ov\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int update(LOINCbean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE loinc SET Component=?, KindOfProperty=?, TimeAspect=?, System=?, ScaleType=?, MethodType=? WHERE LaboratoryProcedureCode=?\");\r\n        ps.setString(1, ov.getComponent());\r\n        ps.setString(2, ov.getKindOfProperty());\r\n        ps.setString(3, ov.getTimeAspect());\r\n        ps.setString(4, ov.getSystem());\r\n        ps.setString(5, ov.getScaleType());\r\n        ps.setString(6, ov.getMethodType());\r\n        ps.setString(7, ov.getLabProcedureCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1624,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2926,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic LabProcedureDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    labProcedureLoader = new LabProcedureBeanLoader();\r\n}'),(1625,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2939,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatient(long)',0,'/**\r\n * Get a list of the lab procedures associated with a given patient.\r\n *\r\n * @param id\r\n * 		The MID of the patient as a long.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProceduresForPatient(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND Rights = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.Allow);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1626,'long ovid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2941,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatientOV(long)',0,'/**\r\n * Get lab procedures for a specific office visit, but excluding lab\r\n * procedures which a patient does not have access to.\r\n *\r\n * @param ovid\r\n * 		Office visit id.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProceduresForPatientOV(long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE OfficeVisitID = ? AND Rights = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, ovid);\r\n        ps.setString(2, LabProcedureBean.Allow);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1627,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2940,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatientForNextMonth(long)',0,'/**\r\n * Gets all the lab procedures for a given patient that occur within the next month.\r\n *\r\n * @param id\r\n * 		The MID of the patient as a long.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProceduresForPatientForNextMonth(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND Rights = ? AND Status = ? AND (DateDiff(SYSDATE(),UpdatedDate) <= 30) ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.Allow);\r\n        ps.setString(3, LabProcedureBean.Completed);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1628,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2936,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProcedure(long)',0,'/**\r\n * Gets an individual lab procedure.\r\n *\r\n * @param id\r\n * 		The ID of the lab procedure.\r\n * @return A LabProcedureBean representing the procedure.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic LabProcedureBean getLabProcedure(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LaboratoryProcedureID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return labProcedureLoader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1629,'edu.ncsu.csc.itrust.beans.LabProcedureBean','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2936,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProcedure(long)',1,'/**\r\n * Gets an individual lab procedure.\r\n *\r\n * @param id\r\n * 		The ID of the lab procedure.\r\n * @return A LabProcedureBean representing the procedure.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic LabProcedureBean getLabProcedure(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LaboratoryProcedureID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return labProcedureLoader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1630,'long mid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2929,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresDate(long)',0,'/**\r\n * Gets all procedures for Patient\r\n *\r\n * @param mid\r\n * 		patient id\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresDate(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1631,'long mid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2931,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresForDocOV(long,long)',0,'/**\r\n * This gets all the procedures for a particular patient on a particular office visit\r\n *\r\n * @param mid\r\n * 		The MID of the patient.\r\n * @param ovid\r\n * 		The Office Visit ID.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresForDocOV(long mid, long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND OfficeVisitID = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, mid);\r\n        ps.setLong(2, ovid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1632,'long ovid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2931,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresForDocOV(long,long)',0,'/**\r\n * This gets all the procedures for a particular patient on a particular office visit\r\n *\r\n * @param mid\r\n * 		The MID of the patient.\r\n * @param ovid\r\n * 		The Office Visit ID.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresForDocOV(long mid, long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND OfficeVisitID = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, mid);\r\n        ps.setLong(2, ovid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1633,'long ovid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2930,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresForDocOV(long)',0,'/**\r\n * This gets all the procedures for a particular patient on a particular office visit\r\n *\r\n * @param ovid\r\n * 		The Office Visit ID.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresForDocOV(long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE OfficeVisitID = ? \");\r\n        ps.setLong(1, ovid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1634,'long mid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2934,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getHCPLabProcedures(long)',0,'/**\r\n * Get all lab procedures associated with a particular HCP.\r\n *\r\n * @param mid\r\n * 		The HCPs id.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getHCPLabProcedures(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"HCP id cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM LabProcedure WHERE labprocedure.OfficeVisitID IN \" + \"(SELECT officevisits.ID FROM officevisits WHERE officevisits.HCPID = ?)\"));\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1635,'long mid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2937,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProcedures(long,long)',0,'/**\r\n * Get all lab procedures associated with a particular HCP and Patient.\r\n *\r\n * @param mid\r\n * 		The HCPs id.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProcedures(long mid, long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"HCP id cannot be null\");\r\n\r\n        if (pid == 0L)\r\n            throw new SQLException(\"HCP id cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM labprocedure WHERE labprocedure.OfficeVisitID IN \" + (\"(SELECT officevisits.ID FROM officevisits WHERE \" + \" officevisits.HCPID = ? AND officevisits.PatientID = ?)\")));\r\n        ps.setLong(1, mid);\r\n        ps.setLong(2, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1636,'long pid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2937,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProcedures(long,long)',0,'/**\r\n * Get all lab procedures associated with a particular HCP and Patient.\r\n *\r\n * @param mid\r\n * 		The HCPs id.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProcedures(long mid, long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"HCP id cannot be null\");\r\n\r\n        if (pid == 0L)\r\n            throw new SQLException(\"HCP id cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM labprocedure WHERE labprocedure.OfficeVisitID IN \" + (\"(SELECT officevisits.ID FROM officevisits WHERE \" + \" officevisits.HCPID = ? AND officevisits.PatientID = ?)\")));\r\n        ps.setLong(1, mid);\r\n        ps.setLong(2, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1637,'long mid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2935,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getHCPPendingCount(long)',0,'/**\r\n * Get a count of all pending lab procedures for a particular HCP.\r\n *\r\n * @param mid\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic int getHCPPendingCount(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        int count = 0;\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT COUNT(*) FROM labprocedure WHERE Status = ? AND labprocedure.OfficeVisitID IN \" + \"(SELECT officevisits.ID FROM officevisits WHERE officevisits.HCPID = ?)\"));\r\n        ps.setString(1, LabProcedureBean.Pending);\r\n        ps.setLong(2, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            count = rs.getInt(1);\r\n        }\r\n        return count;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1638,'long ovid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2938,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForLHCPForNextMonth(long)',0,'/**\r\n * Gets the lab procedures for a given LHCP that occur within the next month.\r\n *\r\n * @param ovid\r\n * 		The Office Visit ID conducted by the LHCP in question.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProceduresForLHCPForNextMonth(long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (ovid == 0L)\r\n            throw new SQLException(\"OfficeVisitID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE OfficeVisitID = ? AND Status = ? AND (DateDiff(SYSDATE(),UpdatedDate) <= 30) ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, ovid);\r\n        ps.setString(2, LabProcedureBean.Completed);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1639,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2927,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Inserts a lab procedure into the database.\r\n *\r\n * @param b\r\n * 		The LabProcedureBean to be inserted.\r\n * @return A long containing the ID of the newly inserted lab procedure bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long addLabProcedure(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO labprocedure \" + (((\"(PatientMID, LaboratoryProcedureCode, Status, Commentary, \" + \"Results, OfficeVisitID, Rights, LabTechID, PriorityCode, \") + \"NumericalResults, LowerBound, UpperBound) \") + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?)\")));\r\n        ps.setLong(1, b.getPid());\r\n        ps.setString(2, b.getLoinc());\r\n        ps.setString(3, b.getStatus());\r\n        ps.setString(4, b.getCommentary());\r\n        ps.setString(5, b.getResults());\r\n        ps.setLong(6, b.getOvID());\r\n        ps.setString(7, b.getRights());\r\n        ps.setLong(8, b.getLTID());\r\n        ps.setInt(9, b.getPriorityCode());\r\n        ps.setString(10, b.getNumericalResult());\r\n        ps.setString(11, b.getLowerBound());\r\n        ps.setString(12, b.getUpperBound());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1640,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2953,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Updates an existing lab procedure.\r\n *\r\n * @param b\r\n * 		The LabProcedureBean representing the procedure to be updated.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void updateLabProcedure(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE labprocedure SET \" + (((\" Status = ?, Commentary = ?, Results = ?, UpdatedDate = ?, \" + \" LabTechID = ?, PriorityCode = ? , NumericalResults = ?, \") + \" LowerBound = ?, UpperBound = ? \") + \" WHERE LaboratoryProcedureID=?\")));\r\n        ps.setString(1, b.getStatus());\r\n        ps.setString(2, b.getCommentary());\r\n        ps.setString(3, b.getResults());\r\n        ps.setTimestamp(4, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(5, b.getLTID());\r\n        ps.setInt(6, b.getPriorityCode());\r\n        ps.setString(7, b.getNumericalResult());\r\n        ps.setString(8, b.getLowerBound());\r\n        ps.setString(9, b.getUpperBound());\r\n        ps.setLong(10, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1641,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2948,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.markViewed(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Marks a lab procedure as viewed by the patient\r\n *\r\n * @param b\r\n * 		The LabProcedureBean representing the procedure to be marked as viewed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void markViewed(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET ViewedByPatient = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setBoolean(1, b.isViewedByPatient());\r\n        ps.setLong(2, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1642,'long pid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2947,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getPatientUnviewedCount(long)',0,'/**\r\n * Get the count of unviewed lab procedures for a particular patient.\r\n *\r\n * @param pid\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic int getPatientUnviewedCount(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        int count = 0;\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT COUNT(*) FROM labprocedure WHERE PatientMID = ? AND Rights = ? AND Status = ? AND ViewedByPatient = FALSE \");\r\n        ps.setLong(1, pid);\r\n        ps.setString(2, LabProcedureBean.Allow);\r\n        ps.setString(3, LabProcedureBean.Completed);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            count = rs.getInt(1);\r\n        }\r\n        return count;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1643,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2933,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresLOINC(long,java.lang.String)',0,'/**\r\n * Gets all the lab procedures that correspond to a particular LOINC.\r\n *\r\n * @param id\r\n * 		The LOINC in question.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresLOINC(long id, String loinc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND LaboratoryProcedureCode = ? AND Status = ?\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, loinc);\r\n        ps.setString(3, \"Completed\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1644,'String loinc','java.lang.String',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2933,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresLOINC(long,java.lang.String)',0,'/**\r\n * Gets all the lab procedures that correspond to a particular LOINC.\r\n *\r\n * @param id\r\n * 		The LOINC in question.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresLOINC(long id, String loinc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND LaboratoryProcedureCode = ? AND Status = ?\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, loinc);\r\n        ps.setString(3, \"Completed\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1645,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2954,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateRights(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Updates the rights of a user on a given lab procedure.\r\n *\r\n * @param b\r\n * 		The LabProcedureBean in question.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void updateRights(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET Rights = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, b.getRights());\r\n        ps.setTimestamp(2, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(3, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1646,'long procedureID','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2949,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.removeLabProcedure(long)',0,'/**\r\n * Delete a given lab procedure form the database.\r\n *\r\n * @param procedureID\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void removeLabProcedure(long procedureID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM labprocedure WHERE LaboratoryProcedureID=? \");\r\n        ps.setLong(1, procedureID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1647,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2942,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresInTransitForLabTech(long)',0,'/**\r\n * Get a list of the lab procedures in transit associated with a given Lab Tech.\r\n *\r\n * @param id\r\n * 		The MID of the LT as a long.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProceduresInTransitForLabTech(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LabTechID = ? AND Status = ? ORDER BY UpdatedDate ASC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.In_Transit);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1648,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2943,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresReceivedForLabTech(long)',0,'/**\r\n * Get a list of the lab procedures received for a given Lab Tech.\r\n *\r\n * @param id\r\n * 		The MID of the LT as a long.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProceduresReceivedForLabTech(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LabTechID = ? AND Status = ? ORDER BY PriorityCode ASC, UpdatedDate DESC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.Received);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1649,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2944,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresTestingForLabTech(long)',0,'/**\r\n * Get a list of the lab procedures testing for a given Lab Tech.\r\n *\r\n * @param id\r\n * 		The MID of the LT as a long.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<LabProcedureBean> getLabProceduresTestingForLabTech(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LabTechID = ? AND Status = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.Testing);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1650,'long mid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2945,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabTechQueueSize(long)',0,'/**\r\n * Get the count of the In_Transit and Received lab procedures assigned to\r\n * a specific lab tech.\r\n *\r\n * @param mid\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic int getLabTechQueueSize(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        int count = 0;\r\n        ps = conn.prepareStatement(\"SELECT COUNT(*) FROM labprocedure WHERE LabTechID = ? AND (Status = ? OR Status = ?)\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, LabProcedureBean.In_Transit);\r\n        ps.setString(3, LabProcedureBean.Received);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            count = rs.getInt(1);\r\n        }\r\n        return count;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1651,'long mid','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2946,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabTechQueueSizeByPriority(long)',0,'/**\r\n * Get the count of the In_Transit and Received lab procedures assigned to\r\n * a specific lab tech grouped by priority.\r\n *\r\n * @param mid\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic int[] getLabTechQueueSizeByPriority(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    int[] sizes = new int[4];\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        for (int i = 1; i <= 3; i++) {\r\n            int count = 0;\r\n            ps = conn.prepareStatement(\"SELECT COUNT(*) FROM labprocedure WHERE LabTechID = ? AND (Status = ? OR Status = ?) AND PriorityCode = ?\");\r\n            ps.setLong(1, mid);\r\n            ps.setString(2, LabProcedureBean.In_Transit);\r\n            ps.setString(3, LabProcedureBean.Received);\r\n            ps.setInt(4, i);\r\n            ResultSet rs = ps.executeQuery();\r\n            if (rs.next()) {\r\n                count = rs.getInt(1);\r\n            }\r\n            sizes[i] = count;\r\n        }\r\n        return sizes;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1652,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2952,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitTestResults(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param id\r\n * 		\r\n * @param parseLong\r\n * 		\r\n * @param parseLong2\r\n * 		\r\n * @param parseLong3\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void submitTestResults(long id, String numericalResult, String numericalResultUnit, String upper, String lower) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET NumericalResults = ?, NumericalResultsUnit = ?, UpperBound = ?, LowerBound = ?, Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, numericalResult);\r\n        ps.setString(2, numericalResultUnit);\r\n        ps.setString(3, upper);\r\n        ps.setString(4, lower);\r\n        ps.setString(5, \"Pending\");\r\n        ps.setTimestamp(6, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(7, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1653,'String numericalResult','java.lang.String',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2952,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitTestResults(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param id\r\n * 		\r\n * @param parseLong\r\n * 		\r\n * @param parseLong2\r\n * 		\r\n * @param parseLong3\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void submitTestResults(long id, String numericalResult, String numericalResultUnit, String upper, String lower) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET NumericalResults = ?, NumericalResultsUnit = ?, UpperBound = ?, LowerBound = ?, Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, numericalResult);\r\n        ps.setString(2, numericalResultUnit);\r\n        ps.setString(3, upper);\r\n        ps.setString(4, lower);\r\n        ps.setString(5, \"Pending\");\r\n        ps.setTimestamp(6, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(7, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1654,'String numericalResultUnit','java.lang.String',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2952,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitTestResults(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param id\r\n * 		\r\n * @param parseLong\r\n * 		\r\n * @param parseLong2\r\n * 		\r\n * @param parseLong3\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void submitTestResults(long id, String numericalResult, String numericalResultUnit, String upper, String lower) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET NumericalResults = ?, NumericalResultsUnit = ?, UpperBound = ?, LowerBound = ?, Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, numericalResult);\r\n        ps.setString(2, numericalResultUnit);\r\n        ps.setString(3, upper);\r\n        ps.setString(4, lower);\r\n        ps.setString(5, \"Pending\");\r\n        ps.setTimestamp(6, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(7, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1655,'String upper','java.lang.String',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2952,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitTestResults(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param id\r\n * 		\r\n * @param parseLong\r\n * 		\r\n * @param parseLong2\r\n * 		\r\n * @param parseLong3\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void submitTestResults(long id, String numericalResult, String numericalResultUnit, String upper, String lower) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET NumericalResults = ?, NumericalResultsUnit = ?, UpperBound = ?, LowerBound = ?, Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, numericalResult);\r\n        ps.setString(2, numericalResultUnit);\r\n        ps.setString(3, upper);\r\n        ps.setString(4, lower);\r\n        ps.setString(5, \"Pending\");\r\n        ps.setTimestamp(6, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(7, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1656,'String lower','java.lang.String',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2952,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitTestResults(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param id\r\n * 		\r\n * @param parseLong\r\n * 		\r\n * @param parseLong2\r\n * 		\r\n * @param parseLong3\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void submitTestResults(long id, String numericalResult, String numericalResultUnit, String upper, String lower) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET NumericalResults = ?, NumericalResultsUnit = ?, UpperBound = ?, LowerBound = ?, Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, numericalResult);\r\n        ps.setString(2, numericalResultUnit);\r\n        ps.setString(3, upper);\r\n        ps.setString(4, lower);\r\n        ps.setString(5, \"Pending\");\r\n        ps.setTimestamp(6, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(7, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1657,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2951,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitReceivedLP(long)',0,'/**\r\n *\r\n *\r\n * @param parseLong\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void submitReceivedLP(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, \"Received\");\r\n        ps.setTimestamp(2, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(3, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1658,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2950,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.setLPToTesting(long)',0,'/**\r\n *\r\n *\r\n * @param parseLong\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void setLPToTesting(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, \"Testing\");\r\n        ps.setTimestamp(2, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(3, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1659,'long id','long',0,398,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO',2932,'edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresLOINC(long)',0,'public List<LabProcedureBean> getAllLabProceduresLOINC(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? ORDER BY LaboratoryProcedureCode ASC\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1660,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2955,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic MessageDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.mbLoader = new MessageBeanLoader();\r\n}'),(1661,'long mid','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2959,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFor(long)',0,'/**\r\n * Gets all the messages for a certain user MID.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<MessageBean> getMessagesFor(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE to_id = ? ORDER BY sent_date DESC\");\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1662,'long mid','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2966,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesTimeAscending(long)',0,'/**\r\n * Gets all the messages for a certain user MID sorted by ascending time.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<MessageBean> getMessagesTimeAscending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE to_id = ? ORDER BY sent_date ASC\");\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1663,'long mid','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2964,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesNameAscending(long)',0,'/**\r\n * Gets all the messages for a certain user MID sorted by name ascending.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<MessageBean> getMessagesNameAscending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.from_id=patients.mid AND message.to_id=? ORDER BY patients.lastName ASC, patients.firstName ASC, message.sent_date ASC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.from_id=personnel.mid AND message.to_id=? ORDER BY personnel.lastName ASC, personnel.firstName ASC, message.sent_date ASC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    }\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1664,'long mid','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2965,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesNameDescending(long)',0,'/**\r\n * Gets all the messages for a certain user MID sorted by name descending.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<MessageBean> getMessagesNameDescending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.from_id=patients.mid AND message.to_id=? ORDER BY patients.lastName DESC, patients.firstName DESC, message.sent_date DESC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.from_id=personnel.mid AND message.to_id=? ORDER BY personnel.lastName DESC, personnel.firstName DESC, message.sent_date DESC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    }\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1665,'long mid','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2960,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFrom(long)',0,'/**\r\n * Gets all the messages from a certain user MID.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<MessageBean> getMessagesFrom(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE from_id = ? ORDER BY sent_date DESC\");\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1666,'long mid','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2963,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromTimeAscending(long)',0,'/**\r\n * Gets all the messages for a certain user MID sorted by ascending time.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<MessageBean> getMessagesFromTimeAscending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE from_id = ? ORDER BY sent_date ASC\");\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1667,'long mid','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2961,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromNameAscending(long)',0,'/**\r\n * Gets all the messages for a certain user MID sorted by name ascending.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<MessageBean> getMessagesFromNameAscending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.to_id=patients.mid AND message.from_id=? ORDER BY patients.lastName ASC, patients.firstName ASC, message.sent_date ASC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.to_id=personnel.mid AND message.from_id=? ORDER BY personnel.lastName ASC, personnel.firstName ASC, message.sent_date ASC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    }\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1668,'long mid','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2962,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromNameDescending(long)',0,'/**\r\n * Gets all the messages for a certain user MID sorted by name descending.\r\n *\r\n * @param mid\r\n * 		The MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic List<MessageBean> getMessagesFromNameDescending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.to_id=patients.mid AND message.from_id=? ORDER BY patients.lastName DESC, patients.firstName DESC, message.sent_date DESC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.to_id=personnel.mid AND message.from_id=? ORDER BY personnel.lastName DESC, personnel.firstName DESC, message.sent_date DESC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    }\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1669,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2956,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.addMessage(edu.ncsu.csc.itrust.beans.MessageBean)',0,'/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * 		A bean representing the message to be added.\r\n * @throws SQLException\r\n * 		\r\n */\r\npublic void addMessage(MessageBean mBean) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO message (from_id, to_id, sent_date, message, subject, been_read, parent_msg_id, original_msg_id) \" + \"  VALUES (?, ?, NOW(), ?, ?, ?, ?, ?)\"));\r\n    this.mbLoader.loadParameters(ps, mBean);\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}'),(1670,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2967,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.updateRead(edu.ncsu.csc.itrust.beans.MessageBean)',0,'public void updateRead(MessageBean mBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE message SET been_read=1 WHERE message_id=?\");\r\n        ps.setLong(1, mBean.getMessageId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1671,'long refID','long',0,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2957,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getCCdMessages(long)',0,'public List<MessageBean> getCCdMessages(long refID) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE original_msg_id=?\");\r\n    ps.setLong(1, refID);\r\n    rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}'),(1672,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,399,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO',2958,'edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessageID(edu.ncsu.csc.itrust.beans.MessageBean)',0,'public long getMessageID(MessageBean mBean) throws DBException {\r\n    return mBean.getMessageId();\r\n}'),(1673,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2968,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic NDCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1674,'String code','java.lang.String',0,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2971,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.getNDCode(java.lang.String)',0,'/**\r\n * Returns a particular description for a given code.\r\n *\r\n * @param code\r\n * 		The ND code to be looked up.\r\n * @return A bean representing the Medication that was looked up.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic MedicationBean getNDCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ndcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return medicationLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1675,'edu.ncsu.csc.itrust.beans.MedicationBean','edu.ncsu.csc.itrust.beans.MedicationBean',261,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2971,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.getNDCode(java.lang.String)',1,'/**\r\n * Returns a particular description for a given code.\r\n *\r\n * @param code\r\n * 		The ND code to be looked up.\r\n * @return A bean representing the Medication that was looked up.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic MedicationBean getNDCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ndcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return medicationLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1676,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2969,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Adds a new ND code, returns whether or not the change was made. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param med\r\n * 		The medication bean to be added.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addNDCode(MedicationBean med) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO ndcodes (Code, Description) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, med.getNDCode());\r\n        ps.setString(2, med.getDescription());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1677,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2973,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Updates a particular codes description\r\n *\r\n * @param med\r\n * 		A bean representing the particular medication to be updated.\r\n * @return An int representing the number of updated rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateCode(MedicationBean med) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE ndcodes SET Description = ? \" + \"WHERE Code = ?\"));\r\n        ps.setString(1, med.getDescription());\r\n        ps.setString(2, med.getNDCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1678,'MedicationBean med','edu.ncsu.csc.itrust.beans.MedicationBean',261,400,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO',2972,'edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Removes a ND code, returns whether or not the change was made.\r\n *\r\n * @param med\r\n * 		The medication bean to be removed.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean removeNDCode(MedicationBean med) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ndcodes WHERE Code=?\");\r\n        ps.setString(1, med.getNDCode());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1679,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2974,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/* private PrescriptionBeanLoader prescriptionLoader = new PrescriptionBeanLoader();\nprivate PrescriptionReportBeanLoader prescriptionReportBeanLoader = new PrescriptionReportBeanLoader();\nprivate ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader(true);\n */\r\n/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic OfficeVisitDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1680,'OfficeVisitBean ov','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2975,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.add(edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'/**\r\n * Adds an visit and return its ID\r\n *\r\n * @param ov\r\n * 		The OfficeVisitBean to be added.\r\n * @return A long indicating the unique ID for the office visit.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(OfficeVisitBean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits (VisitDate, Notes, HCPID, PatientID, HospitalID, IsERIncident) VALUES (?,?,?,?,?,?)\");\r\n        setValues(ps, ov);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1681,'PreparedStatement ps','java.sql.PreparedStatement',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2983,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.setValues(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'private void setValues(PreparedStatement ps, OfficeVisitBean ov) throws SQLException {\r\n    ps.setDate(1, new Date(ov.getVisitDate().getTime()));\r\n    ps.setString(2, ov.getNotes());\r\n    ps.setLong(3, ov.getHcpID());\r\n    ps.setLong(4, ov.getPatientID());\r\n    ps.setString(5, ov.getHospitalID());\r\n    ps.setBoolean(6, ov.isERIncident());\r\n}'),(1682,'OfficeVisitBean ov','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2983,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.setValues(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'private void setValues(PreparedStatement ps, OfficeVisitBean ov) throws SQLException {\r\n    ps.setDate(1, new Date(ov.getVisitDate().getTime()));\r\n    ps.setString(2, ov.getNotes());\r\n    ps.setLong(3, ov.getHcpID());\r\n    ps.setLong(4, ov.getPatientID());\r\n    ps.setString(5, ov.getHospitalID());\r\n    ps.setBoolean(6, ov.isERIncident());\r\n}'),(1683,'OfficeVisitBean ov','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2984,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.update(edu.ncsu.csc.itrust.beans.OfficeVisitBean)',0,'/**\r\n * Updates the information in a particular office visit.\r\n *\r\n * @param ov\r\n * 		The Office Visit bean representing the changes.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void update(OfficeVisitBean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE officevisits SET VisitDate=?, Notes=?, HCPID=?, \" + \"PatientID=?, HospitalID=? WHERE ID=?\"));\r\n        setValues(ps, ov);\r\n        ps.setLong(6, ov.getID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1684,'long visitID','long',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2980,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisit(long)',0,'/**\r\n * Returns a particular office visit given an ID\r\n *\r\n * @param visitID\r\n * 		The unique ID of the office visit.\r\n * @return An OfficeVisitBean with the specifics for that office visit.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic OfficeVisitBean getOfficeVisit(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From officevisits Where ID = ?\");\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return officeVisitLoader.loadSingle(rs);\r\n        else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1685,'edu.ncsu.csc.itrust.beans.OfficeVisitBean','edu.ncsu.csc.itrust.beans.OfficeVisitBean',263,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2980,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisit(long)',1,'/**\r\n * Returns a particular office visit given an ID\r\n *\r\n * @param visitID\r\n * 		The unique ID of the office visit.\r\n * @return An OfficeVisitBean with the specifics for that office visit.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic OfficeVisitBean getOfficeVisit(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From officevisits Where ID = ?\");\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return officeVisitLoader.loadSingle(rs);\r\n        else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1686,'long ovID','long',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2976,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.checkOfficeVisitExists(long,long)',0,'/**\r\n * Returns whether or not an office visit actually exists\r\n *\r\n * @param ovID\r\n * 		The ID of the office visit to be checked.\r\n * @param pid\r\n * 		The MID of the patient associated with this transaction.\r\n * @return A boolean indicating its existence.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean checkOfficeVisitExists(long ovID, long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE ID=? AND PatientID=?\");\r\n        ps.setLong(1, ovID);\r\n        ps.setLong(2, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1687,'long pid','long',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2976,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.checkOfficeVisitExists(long,long)',0,'/**\r\n * Returns whether or not an office visit actually exists\r\n *\r\n * @param ovID\r\n * 		The ID of the office visit to be checked.\r\n * @param pid\r\n * 		The MID of the patient associated with this transaction.\r\n * @return A boolean indicating its existence.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean checkOfficeVisitExists(long ovID, long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE ID=? AND PatientID=?\");\r\n        ps.setLong(1, ovID);\r\n        ps.setLong(2, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1688,'long pid','long',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2977,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisits(long)',0,'/**\r\n * Returns a list of all office visits for a given patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of OfficeVisitBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisits(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE PatientID=? ORDER BY VisitDate DESC\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return officeVisitLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1689,'long mid','long',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2979,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisitsForLHCP(long)',0,'/**\r\n * Returns a list of all office visits for a given patient\r\n *\r\n * @param mid\r\n * 		The MID of the LHCP you are looking up.\r\n * @return A java.util.List of Office Visits.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisitsForLHCP(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"HCPID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE HCPID=? ORDER BY VisitDate DESC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return officeVisitLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1690,'long pid','long',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2982,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisitsWithNoSurvey(long)',0,'/**\r\n * Returns a list of all office visits for a given patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient.\r\n * @return A java.util.List of Office Visits.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<OfficeVisitBean> getOfficeVisitsWithNoSurvey(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits where id not in (select visitid from ovsurvey) and PatientID = ? ORDER BY VisitDate DESC\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return officeVisitLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1691,'String hospitalID','java.lang.String',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2981,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisitsFromHospital(java.lang.String)',0,'/**\r\n * Returns a list of all office visits at a given hospital\r\n *\r\n * @param hospitalID\r\n * 		the id of the hospital\r\n * @return a list of the OfficeVisitBeans that hold the office visits\r\n * @throws DBException\r\n * 		in the event of a database error\r\n */\r\npublic List<OfficeVisitBean> getOfficeVisitsFromHospital(String hospitalID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE hospitalID = ? ORDER BY ID DESC\");\r\n        ps.setString(1, hospitalID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return officeVisitLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1692,'String icdcode','java.lang.String',0,401,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO',2978,'edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(java.lang.String)',0,'/**\r\n * Gets all office visits corresponding to a particular ICD diagnosis.\r\n *\r\n * @param icdcode\r\n * 		A string represnting the ICD diagnosis to look up.\r\n * @return A java.util.List of Office visits.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisitsForDiagnosis(String icdcode) throws DBException {\r\n    List<DiagnosisBean> diags = null;\r\n    List<OfficeVisitBean> ovs = new ArrayList<OfficeVisitBean>();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        if (icdcode == null)\r\n            throw new SQLException(\"icdcode cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis ovd, icdcodes icd WHERE ovd.ICDCode=? and icd.Code=?\");\r\n        ps.setString(1, icdcode);\r\n        ps.setString(2, icdcode);\r\n        rs = ps.executeQuery();\r\n        diags = diagnosisLoader.loadList(rs);\r\n        rs.close();\r\n        ps.close();\r\n        ps = null;\r\n        rs = null;\r\n        for (DiagnosisBean bean : diags) {\r\n            ps = conn.prepareStatement(\"SELECT * FROM officevisits ov WHERE ov.ID=?\");\r\n            ps.setInt(1, ((int) (bean.getVisitID())));\r\n            rs = ps.executeQuery();\r\n            if (rs.next()) {\r\n                ovs.add(officeVisitLoader.loadSingle(rs));\r\n            }\r\n            rs.close();\r\n            ps.close();\r\n        }\r\n        return ovs;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1693,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2985,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic PatientDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.patientLoader = new PatientLoader();\r\n    this.personnelLoader = new PersonnelLoader();\r\n    this.diagnosisLoader = new DiagnosisBeanLoader(true);\r\n    this.prescriptionLoader = new PrescriptionBeanLoader();\r\n    this.procedureLoader = new ProcedureBeanLoader(true);\r\n}'),(1694,'long mid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3000,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getName(long)',0,'/**\r\n * Returns the name for the given MID\r\n *\r\n * @param mid\r\n * 		The MID of the patient in question.\r\n * @return A String representing the patients first name and last name.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String getName(long mid) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT firstName, lastName FROM patients WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return ((rs.getString(\"firstName\")) + \" \") + (rs.getString(\"lastName\"));\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1695,'long mid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3008,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRole(long,java.lang.String)',0,'/**\r\n * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO\r\n *\r\n * @param mid\r\n * 		The MID of the patient in question.\r\n * @param role\r\n * 		A String representing the role of the patient.\r\n * @return A String representing the patients role.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String getRole(long mid, String role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT role FROM users WHERE MID=? AND Role=?\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, role);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getString(\"role\");\r\n        } else {\r\n            throw new iTrustException(\"User does not exist with the designated role\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1696,'String role','java.lang.String',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3008,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRole(long,java.lang.String)',0,'/**\r\n * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO\r\n *\r\n * @param mid\r\n * 		The MID of the patient in question.\r\n * @param role\r\n * 		A String representing the role of the patient.\r\n * @return A String representing the patients role.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String getRole(long mid, String role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT role FROM users WHERE MID=? AND Role=?\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, role);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getString(\"role\");\r\n        } else {\r\n            throw new iTrustException(\"User does not exist with the designated role\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1697,'long mid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3001,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPatient(long)',0,'/**\r\n * Returns the patients information for a given ID\r\n *\r\n * @param mid\r\n * 		The MID of the patient to retrieve.\r\n * @return A PatientBean representing the patient.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return patientLoader.loadSingle(rs);\r\n        } else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1698,'edu.ncsu.csc.itrust.beans.PatientBean','edu.ncsu.csc.itrust.beans.PatientBean',266,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3001,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPatient(long)',1,'/**\r\n * Returns the patients information for a given ID\r\n *\r\n * @param mid\r\n * 		The MID of the patient to retrieve.\r\n * @return A PatientBean representing the patient.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PatientBean getPatient(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return patientLoader.loadSingle(rs);\r\n        } else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1699,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2992,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.editPatient(edu.ncsu.csc.itrust.beans.PatientBean,long)',0,'/**\r\n * Updates a patients information for the given MID\r\n *\r\n * @param p\r\n * 		The patient bean representing the new information for the patient.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void editPatient(PatientBean p, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE patients SET firstName=?,lastName=?,email=?,\" + ((((((\"address1=?,address2=?,city=?,state=?,zip=?,phone=?,\" + \"eName=?,ePhone=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\") + \"ICState=?,iCZip=?,iCPhone=?,iCID=?,DateOfBirth=?,\") + \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\") + \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, \") + \"DirectionsToHome=?, Religion=?, Language=?, SpiritualPractices=?, \") + \"AlternateName=?, DateOfDeactivation=? WHERE MID=?\")));\r\n        patientLoader.loadParameters(ps, p);\r\n        ps.setLong(37, p.getMID());\r\n        ps.executeUpdate();\r\n        addHistory(p.getMID(), hcpid);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1700,'long hcpid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2992,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.editPatient(edu.ncsu.csc.itrust.beans.PatientBean,long)',0,'/**\r\n * Updates a patients information for the given MID\r\n *\r\n * @param p\r\n * 		The patient bean representing the new information for the patient.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void editPatient(PatientBean p, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE patients SET firstName=?,lastName=?,email=?,\" + ((((((\"address1=?,address2=?,city=?,state=?,zip=?,phone=?,\" + \"eName=?,ePhone=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\") + \"ICState=?,iCZip=?,iCPhone=?,iCID=?,DateOfBirth=?,\") + \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\") + \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, \") + \"DirectionsToHome=?, Religion=?, Language=?, SpiritualPractices=?, \") + \"AlternateName=?, DateOfDeactivation=? WHERE MID=?\")));\r\n        patientLoader.loadParameters(ps, p);\r\n        ps.setLong(37, p.getMID());\r\n        ps.executeUpdate();\r\n        addHistory(p.getMID(), hcpid);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1701,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2987,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addHistory(long,long)',0,'public void addHistory(long pid, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO historypatients SELECT null, CURDATE(), ?, p.* FROM patients p WHERE p.mid=?\");\r\n        ps.setLong(1, hcpid);\r\n        ps.setLong(2, pid);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1702,'long hcpid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2987,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addHistory(long,long)',0,'public void addHistory(long pid, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO historypatients SELECT null, CURDATE(), ?, p.* FROM patients p WHERE p.mid=?\");\r\n        ps.setLong(1, hcpid);\r\n        ps.setLong(2, pid);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1703,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3009,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.hasHistory(long)',0,'public boolean hasHistory(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    boolean hasHistory = false;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM historypatients WHERE mid=?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        hasHistory = rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return hasHistory;\r\n}'),(1704,'long mid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3002,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPatientHistory(long)',0,'public List<PatientHistoryBean> getPatientHistory(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ArrayList<PatientHistoryBean> pList;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM historypatients WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        pList = new ArrayList<PatientHistoryBean>();\r\n        while (rs.next()) {\r\n            pList.add(patientLoader.loadSingleHistory(rs));\r\n        } \r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return pList;\r\n}'),(1705,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2990,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.checkPatientExists(long)',0,'/**\r\n * Returns whether or not the patient exists\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A boolean indicating whether the patient exists.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean checkPatientExists(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE MID=?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1706,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2996,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getDeclaredHCPs(long)',0,'/**\r\n * Returns a list of HCPs who are declared by the given patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of Personnel Beans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PersonnelBean> getDeclaredHCPs(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM declaredhcp, personnel \" + \"WHERE PatientID=? AND personnel.MID=declaredhcp.HCPID\"));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1707,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2991,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.declareHCP(long,long)',0,'/**\r\n * Declares an HCP for a particular patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @param hcpID\r\n * 		The HCPs MID.\r\n * @return A boolean as to whether the insertion was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean declareHCP(long pid, long hcpID) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO declaredhcp(PatientID, HCPID) VALUES(?,?)\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"HCP \" + hcpID) + \" has already been declared for patient \") + pid));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1708,'long hcpID','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2991,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.declareHCP(long,long)',0,'/**\r\n * Declares an HCP for a particular patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @param hcpID\r\n * 		The HCPs MID.\r\n * @return A boolean as to whether the insertion was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean declareHCP(long pid, long hcpID) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO declaredhcp(PatientID, HCPID) VALUES(?,?)\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"HCP \" + hcpID) + \" has already been declared for patient \") + pid));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1709,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3013,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.undeclareHCP(long,long)',0,'/**\r\n * Undeclare an HCP for a given patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @param hcpID\r\n * 		The MID of the HCP in question.\r\n * @return A boolean indicating whether the action was successful.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean undeclareHCP(long pid, long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM declaredhcp WHERE PatientID=? AND HCPID=?\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1710,'long hcpID','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3013,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.undeclareHCP(long,long)',0,'/**\r\n * Undeclare an HCP for a given patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @param hcpID\r\n * 		The MID of the HCP in question.\r\n * @return A boolean indicating whether the action was successful.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean undeclareHCP(long pid, long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM declaredhcp WHERE PatientID=? AND HCPID=?\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1711,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2989,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.checkDeclaredHCP(long,long)',0,'/**\r\n * Check if a patient has declared the given HCP\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question as a long.\r\n * @param hcpid\r\n * 		The MID of the HCP in question as a long.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean checkDeclaredHCP(long pid, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM declaredhcp WHERE PatientID=? AND HCPID=?\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpid);\r\n        return ps.executeQuery().next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1712,'long hcpid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2989,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.checkDeclaredHCP(long,long)',0,'/**\r\n * Check if a patient has declared the given HCP\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question as a long.\r\n * @param hcpid\r\n * 		The MID of the HCP in question as a long.\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean checkDeclaredHCP(long pid, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM declaredhcp WHERE PatientID=? AND HCPID=?\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpid);\r\n        return ps.executeQuery().next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1713,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3006,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRepresented(long)',0,'/**\r\n * Return a list of patients that the given patient represents\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of PatientBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> getRepresented(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT patients.* FROM representatives, patients \" + \"WHERE RepresenterMID=? AND RepresenteeMID=patients.MID\"));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1714,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3007,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRepresenting(long)',0,'/**\r\n * Return a list of patients that the given patient is represented by\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> getRepresenting(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT patients.* FROM representatives, patients \" + \"WHERE RepresenteeMID=? AND RepresenterMID=patients.MID\"));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1715,'long representer','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3011,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.represents(long,long)',0,'/**\r\n * Check if the given representer represents the representee\r\n *\r\n * @param representer\r\n * 		The MID of the representer in question.\r\n * @param representee\r\n * 		The MID of the representee in question.\r\n * @return A boolean indicating whether represenation is in place.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean represents(long representer, long representee) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1716,'long representee','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3011,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.represents(long,long)',0,'/**\r\n * Check if the given representer represents the representee\r\n *\r\n * @param representer\r\n * 		The MID of the representer in question.\r\n * @param representee\r\n * 		The MID of the representee in question.\r\n * @return A boolean indicating whether represenation is in place.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean represents(long representer, long representee) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1717,'long representer','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2988,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addRepresentative(long,long)',0,'/**\r\n * Assign a representer to the representee\r\n *\r\n * @param representer\r\n * 		The MID of the representer as a long.\r\n * @param representee\r\n * 		The MID of the representee as a long.\r\n * @return A boolean as to whether the insertion was correct.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addRepresentative(long representer, long representee) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO representatives(RepresenterMID,RepresenteeMID) VALUES (?,?)\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"Patient \" + representer) + \" already represents patient \") + representee));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1718,'long representee','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2988,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addRepresentative(long,long)',0,'/**\r\n * Assign a representer to the representee\r\n *\r\n * @param representer\r\n * 		The MID of the representer as a long.\r\n * @param representee\r\n * 		The MID of the representee as a long.\r\n * @return A boolean as to whether the insertion was correct.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addRepresentative(long representer, long representee) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO representatives(RepresenterMID,RepresenteeMID) VALUES (?,?)\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"Patient \" + representer) + \" already represents patient \") + representee));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1719,'long representer','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3010,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.removeRepresentative(long,long)',0,'/**\r\n * Unassign the representation\r\n *\r\n * @param representer\r\n * 		The MID of the representer in question.\r\n * @param representee\r\n * 		The MID of the representee in question.\r\n * @return A boolean indicating whether the unassignment was sucessful.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeRepresentative(long representer, long representee) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1720,'long representee','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3010,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.removeRepresentative(long,long)',0,'/**\r\n * Unassign the representation\r\n *\r\n * @param representer\r\n * 		The MID of the representer in question.\r\n * @param representee\r\n * 		The MID of the representee in question.\r\n * @return A boolean indicating whether the unassignment was sucessful.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeRepresentative(long representer, long representee) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1721,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2997,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getDiagnoses(long)',0,'/**\r\n * Return a list of all diagnoses for a given patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of Diagnoses.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<DiagnosisBean> getDiagnoses(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, icdcodes icd \" + (\"WHERE ovd.VisitID=ov.ID and icd.Code=ovd.ICDCode and ov.PatientID=? \" + \"ORDER BY ov.visitDate DESC\")));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return diagnosisLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1722,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3004,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getProcedures(long)',0,'/**\r\n * Return a list of all procedures for a given patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of all the procedures.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ProcedureBean> getProcedures(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure ovp, officevisits ov, cptcodes cpt \" + (\"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? \" + \"ORDER BY ov.visitDate desc\")));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1723,'long pid','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2999,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getImmunizationProcedures(long)',0,'/**\r\n * Return a list of all immunization procedures for a given patient\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of the procedures.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ProcedureBean> getImmunizationProcedures(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure ovp, officevisits ov, cptcodes cpt \" + (\"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? and cpt.attribute=immunization\" + \"ORDER BY ov.visitDate desc\")));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1724,'long patientID','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3003,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPrescriptions(long)',0,'/**\r\n * Return a list of all prescriptions for a patient\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of prescriptions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionBean> getPrescriptions(long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovmedication,ndcodes,officevisits \" + ((\"Where officevisits.PatientID = ? AND ovmedication.VisitID = \" + \"officevisits.ID AND ndcodes.Code=ovmedication.NDCode \") + \"ORDER BY officevisits.visitDate DESC, ovmedication.NDCode ASC;\")));\r\n        ps.setLong(1, patientID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1725,'long patientID','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2995,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getCurrentPrescriptions(long)',0,'/**\r\n * Return a list of prescriptions which are currently prescribed for a patient\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of prescription beans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionBean> getCurrentPrescriptions(long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovmedication,ndcodes,officevisits \" + (((\"Where officevisits.PatientID = ? AND ovmedication.VisitID = \" + \"officevisits.ID AND ndcodes.Code=ovmedication.NDCode AND \") + \"ovmedication.EndDate >= ?\") + \"ORDER BY ovmedication.ID DESC;\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1726,'long patientID','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2998,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getExpiredPrescriptions(long)',0,'/**\r\n * Return a list of prescriptions which are expired prescription for a patient\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of prescriptions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionBean> getExpiredPrescriptions(long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovmedication,ndcodes,officevisits \" + (((\"Where officevisits.PatientID = ? AND ovmedication.VisitID = \" + \"officevisits.ID AND ndcodes.Code=ovmedication.NDCode AND \") + \"ovmedication.EndDate < ?\") + \"ORDER BY ovmedication.ID DESC;\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1727,'long hcpMID','long',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3005,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRenewalNeedsPatients(long)',0,'/**\r\n * Return a list of patients with a special-diagnosis-history who\r\n * have the logged in HCP as a DHCP and whose medications are going to\r\n * expire within seven days.\r\n *\r\n * @param hcpMID\r\n * 		The MID of the logged in HCP\r\n * @return A list of patients satisfying the conditions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> getRenewalNeedsPatients(long hcpMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ( \" + (((((((((((((((((((((((\"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \" + \"Where \") + \"declaredhcp.HCPID = ? AND \") + \"patients.MID = declaredhcp.PatientID AND \") + \"( \") + \"ovdiagnosis.VisitID = officevisits.ID AND officevisits.PatientID = declaredhcp.PatientID \") + \"AND \") + \"((ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \") + \"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \") + \"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?)) \") + \") \") + \"UNION ALL \") + \"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \") + \"Where \") + \"declaredhcp.HCPID = ? AND \") + \"patients.MID = declaredhcp.PatientID AND \") + \"( \") + \"declaredhcp.PatientID = officevisits.PatientID AND officevisits.ID = ovmedication.VisitID \") + \"AND \") + \"ovmedication.EndDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) \") + \") \") + \") AS final \") + \"GROUP BY final.MID HAVING COUNT(*) = 2 \") + \"ORDER BY final.lastname ASC, final.firstname ASC\")));\r\n        ps.setLong(1, hcpMID);\r\n        ps.setFloat(2, 250.0F);\r\n        ps.setFloat(3, 251.0F);\r\n        ps.setFloat(4, 493.0F);\r\n        ps.setFloat(5, 494.0F);\r\n        ps.setFloat(6, 390.0F);\r\n        ps.setFloat(7, 460.99F);\r\n        ps.setLong(8, hcpMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1728,'String first','java.lang.String',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3012,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.searchForPatientsWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all patients with names \"LIKE\" (as in SQL) the passed in parameters.\r\n *\r\n * @param first\r\n * 		The patients first name.\r\n * @param last\r\n * 		The patients last name.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> searchForPatientsWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PatientBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, first);\r\n        ps.setString(2, last);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1729,'String last','java.lang.String',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',3012,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.searchForPatientsWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all patients with names \"LIKE\" (as in SQL) the passed in parameters.\r\n *\r\n * @param first\r\n * 		The patients first name.\r\n * @param last\r\n * 		The patients last name.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> searchForPatientsWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PatientBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, first);\r\n        ps.setString(2, last);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1730,'String first','java.lang.String',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2993,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.fuzzySearchForPatientsWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all patients with names \"LIKE\" with wildcards (as in SQL) the passed in parameters.\r\n *\r\n * @param first\r\n * 		The patients first name.\r\n * @param last\r\n * 		The patients last name.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> fuzzySearchForPatientsWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PatientBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, ((\"%\" + first) + \"%\"));\r\n        ps.setString(2, ((\"%\" + last) + \"%\"));\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1731,'String last','java.lang.String',0,402,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO',2993,'edu.ncsu.csc.itrust.dao.mysql.PatientDAO.fuzzySearchForPatientsWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all patients with names \"LIKE\" with wildcards (as in SQL) the passed in parameters.\r\n *\r\n * @param first\r\n * 		The patients first name.\r\n * @param last\r\n * 		The patients last name.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientBean> fuzzySearchForPatientsWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PatientBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, ((\"%\" + first) + \"%\"));\r\n        ps.setString(2, ((\"%\" + last) + \"%\"));\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1732,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3014,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PatientInstructionsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1733,'long visitID','long',0,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3017,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.getList(long)',0,'/**\r\n * Get a list of patient instructions for a given office visit.\r\n *\r\n * @param visitID\r\n * 		The id of the office visit to lookup.\r\n * @return The list of patient instructions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PatientInstructionsBean> getList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From patientspecificinstructions Where patientspecificinstructions.VisitID = ? \");\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1734,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3015,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.add(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Add a new patient instructions record.\r\n *\r\n * @param bean\r\n * 		The instructions to add.\r\n * @return The id of the newly added instructions record.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(PatientInstructionsBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO patientspecificinstructions \" + \"(VisitID,Modified,Name,URL,Comment) VALUES (?,?,?,?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps = loader.loadParameters(ps, bean);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1735,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3016,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.edit(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/**\r\n * Edit an existing patient instructions record in the database.\r\n *\r\n * @param bean\r\n * 		The instruction to modify.\r\n * @return The id of the modified instruction.  This will be that same as the id given in the bean itself.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long edit(PatientInstructionsBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"UPDATE patientspecificinstructions \" + (\"SET VisitID=?, Modified=?, Name=?, URL=?, Comment=? \" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        loader.loadParameters(ps, bean);\r\n        ps.setLong(6, bean.getId());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1736,'long patientInstructionsID','long',0,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3019,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.remove(long)',0,'/**\r\n * Remove a patient instructions record from the database.\r\n *\r\n * @param patientInstructionsID\r\n * 		The id of the record to delete.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void remove(long patientInstructionsID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM patientspecificinstructions WHERE ID=? \");\r\n        ps.setLong(1, patientInstructionsID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1737,'long pid','long',0,403,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO',3018,'edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.getOfficeVisitsWithInstructions(long)',0,'/**\r\n * Get a list of all office visits by a given patient which has patient specific instructions.\r\n *\r\n * @param pid\r\n * 		The patient id to look up.\r\n * @return A list of office visits.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<OfficeVisitBean> getOfficeVisitsWithInstructions(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        OfficeVisitLoader ovloader = new OfficeVisitLoader();\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From officevisits Where \" + (\"officevisits.ID in (Select VisitID From patientspecificinstructions) \" + \"and officevisits.PatientID = ?\")));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return ovloader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1738,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3020,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic PersonnelDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    personnelLoader = new PersonnelLoader();\r\n    hospitalBeanLoader = new HospitalBeanLoader();\r\n}'),(1739,'long mid','long',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3027,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getName(long)',0,'/**\r\n * Returns the name for a given MID\r\n *\r\n * @param mid\r\n * 		The MID of the personnel in question.\r\n * @return A String representing the name of the personnel.\r\n * @throws iTrustException\r\n * 		\r\n * @throws DBException\r\n * 		\r\n */\r\npublic String getName(long mid) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"SELECT firstName, lastName FROM personnel WHERE MID=?\");\r\n        pstmt.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = pstmt.executeQuery();\r\n        if (rs.next()) {\r\n            return ((rs.getString(\"firstName\")) + \" \") + (rs.getString(\"lastName\"));\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}'),(1740,'Role role','edu.ncsu.csc.itrust.enums.Role',486,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3028,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getNextID(edu.ncsu.csc.itrust.enums.Role)',0,'public long getNextID(Role role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    // long newID = 9000000000L;\r\n    long minID = (role.getMidFirstDigit()) * 1000000000L;\r\n    minID = (minID == 0) ? 1 : minID;// Do not use 0 as an ID.\r\n\r\n    long maxID = minID + 999999998L;\r\n    long nextID = minID;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT MAX(users.mid) FROM users WHERE mid BETWEEN ? AND ?\");\r\n        ps.setLong(1, minID);\r\n        ps.setLong(2, maxID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            nextID = (rs.getLong(1)) + 1;\r\n            if (nextID < minID) {\r\n                nextID = minID;\r\n            }\r\n        }\r\n        return nextID;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1741,'Role role','edu.ncsu.csc.itrust.enums.Role',486,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3021,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.addEmptyPersonnel(edu.ncsu.csc.itrust.enums.Role)',0,'/**\r\n * Adds an empty personnel, and returns the MID.\r\n *\r\n * @return A long indicating the new MID.\r\n * @param role\r\n * 		A {@link Role} enum indicating the personnels specific role.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic long addEmptyPersonnel(Role role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    long nextID = getNextID(role);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO personnel(MID, Role) VALUES(?,?)\");\r\n        ps.setString(1, (\"\" + nextID));\r\n        ps.setString(2, role.name());\r\n        ps.executeUpdate();\r\n        return nextID;\r\n    } catch (SQLException e) {\r\n        System.out.println(e.getMessage());\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1742,'long mid','long',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3029,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnel(long)',0,'/**\r\n * Retrieves a PersonnelBean with all of the specific information for a given employee.\r\n *\r\n * @param mid\r\n * 		The MID of the personnel in question.\r\n * @return A PersonnelBean representing the employee.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return personnelLoader.loadSingle(rs);\r\n        } else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1743,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3029,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnel(long)',1,'/**\r\n * Retrieves a PersonnelBean with all of the specific information for a given employee.\r\n *\r\n * @param mid\r\n * 		The MID of the personnel in question.\r\n * @return A PersonnelBean representing the employee.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return personnelLoader.loadSingle(rs);\r\n        } else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1744,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3023,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.editPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Updates the demographics for a personnel.\r\n *\r\n * @param p\r\n * 		The personnel bean with the updated information.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void editPersonnel(PersonnelBean p) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE personnel SET AMID=?,firstName=?,lastName=?,\" + (\"phone=?, address1=?,address2=?,city=?, state=?, zip=?, specialty=?, email=?\" + \" WHERE MID=?\")));\r\n        personnelLoader.loadParameters(ps, p);\r\n        ps.setLong(12, p.getMID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1745,'long pid','long',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3022,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.checkPersonnelExists(long)',0,'/**\r\n * Indicates whether a certain personnel is in the database.\r\n *\r\n * @param pid\r\n * 		The MID of the personnel in question.\r\n * @return A boolean indicating whether this personnel exists.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean checkPersonnelExists(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID=?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1746,'long mid','long',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3025,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getHospitals(long)',0,'/**\r\n * Returns all of the hospitals this LHCP is associated with.\r\n *\r\n * @param mid\r\n * 		The MID of the personnel in question.\r\n * @return A java.util.List of HospitalBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<HospitalBean> getHospitals(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM hcpassignedhos hah,hospitals h \" + \"WHERE hah.HCPID=? AND hah.HosID=h.HospitalID ORDER BY HospitalName ASC\"));\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return hospitalBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1747,'String hosid','java.lang.String',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3031,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnelFromHospital(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all personnel of specified specialty from the specified hospital.\r\n *\r\n * @param hosid,\r\n * 		the ID of the Hospital to get personnel from\r\n * @param specialty,\r\n * 		the type of specialty to search for\r\n * @return A java.util.List of PersonnelBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PersonnelBean> getPersonnelFromHospital(String hosid, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hcpassignedhos hah inner join personnel p where hah.hosID = ? and hah.HCPID = p.MID and p.specialty = ? and p.role = hcp\");\r\n        ps.setString(1, hosid);\r\n        ps.setString(2, specialty);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1748,'String specialty','java.lang.String',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3031,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnelFromHospital(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all personnel of specified specialty from the specified hospital.\r\n *\r\n * @param hosid,\r\n * 		the ID of the Hospital to get personnel from\r\n * @param specialty,\r\n * 		the type of specialty to search for\r\n * @return A java.util.List of PersonnelBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PersonnelBean> getPersonnelFromHospital(String hosid, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hcpassignedhos hah inner join personnel p where hah.hosID = ? and hah.HCPID = p.MID and p.specialty = ? and p.role = hcp\");\r\n        ps.setString(1, hosid);\r\n        ps.setString(2, specialty);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1749,'String hosid','java.lang.String',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3030,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnelFromHospital(java.lang.String)',0,'/**\r\n * Returns all personnel of specified specialty from the specified hospital.\r\n *\r\n * @param hosid,\r\n * 		the ID of the Hospital to get personnel from\r\n * @param specialty,\r\n * 		the type of specialty to search for\r\n * @return A java.util.List of PersonnelBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PersonnelBean> getPersonnelFromHospital(String hosid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hcpassignedhos hah inner join personnel p where hah.hosID = ? and hah.HCPID = p.MID and p.role = hcp\");\r\n        ps.setString(1, hosid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1750,'long hcpid','long',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3033,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getUAPsForHCP(long)',0,'/**\r\n * Returns a list of UAPs who work for this LHCP.\r\n *\r\n * @param hcpid\r\n * 		The MID of the personnel in question.\r\n * @return A java.util.List of UAPs.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PersonnelBean> getUAPsForHCP(long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT UAP FROM hcprelations WHERE HCP=?)\");\r\n        ps.setLong(1, hcpid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1751,'PrescriptionBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3032,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Given a prescription that has been given, this method returns all the information for the\r\n * doctor who authorized that prescription.\r\n *\r\n * @param prescription\r\n * 		The PrescriptionBean describing the prescription in question.\r\n * @return The PersonnelBean describing the doctor who authorized it.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT HCPID FROM officevisits WHERE ID=?)\");\r\n        ps.setLong(1, prescription.getVisitID());\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs).get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1752,'edu.ncsu.csc.itrust.beans.PersonnelBean','edu.ncsu.csc.itrust.beans.PersonnelBean',270,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3032,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)',1,'/**\r\n * Given a prescription that has been given, this method returns all the information for the\r\n * doctor who authorized that prescription.\r\n *\r\n * @param prescription\r\n * 		The PrescriptionBean describing the prescription in question.\r\n * @return The PersonnelBean describing the doctor who authorized it.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT HCPID FROM officevisits WHERE ID=?)\");\r\n        ps.setLong(1, prescription.getVisitID());\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs).get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1753,'String first','java.lang.String',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3034,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.searchForPersonnelWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.\r\n *\r\n * @param first\r\n * 		The first name to be searched for.\r\n * @param last\r\n * 		The last name to be searched for.\r\n * @return A java.util.List of personnel who match these names.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PersonnelBean> searchForPersonnelWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PersonnelBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, first);\r\n        ps.setString(2, last);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1754,'String last','java.lang.String',0,404,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO',3034,'edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.searchForPersonnelWithName(java.lang.String,java.lang.String)',0,'/**\r\n * Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.\r\n *\r\n * @param first\r\n * 		The first name to be searched for.\r\n * @param last\r\n * 		The last name to be searched for.\r\n * @return A java.util.List of personnel who match these names.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PersonnelBean> searchForPersonnelWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PersonnelBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, first);\r\n        ps.setString(2, last);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1755,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,405,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO',3035,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PrescriptionOverrideDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1756,'long medID','long',0,405,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO',3037,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.getList(long)',0,'public List<OverrideReasonBean> getList(long medID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From ovreactionoverride Where ovmedicationID = ? \");\r\n        ps.setLong(1, medID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1757,'OverrideReasonBean pres','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,405,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO',3036,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.add(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Adds a prescription bean to the database.\r\n *\r\n * @param pres\r\n * 		The prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(OverrideReasonBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovreactionoverride (OVMedicationID,OverrideCode) VALUES (?,?)\");\r\n        ps.setLong(1, pres.getPresID());\r\n        ps.setString(2, pres.getORCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1758,'long ovMedicationID','long',0,405,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO',3038,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.remove(long)',0,'/**\r\n * Removes the given medication from its office visit\r\n *\r\n * @param ovMedicationID\r\n * 		The unique ID of the medication to be removed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void remove(long ovMedicationID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ovreactionoverride WHERE OVMedicationID=? \");\r\n        ps.setLong(1, ovMedicationID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1759,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3039,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PrescriptionReportDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1760,'long patientID','long',0,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3041,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byDate(long,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of information related to prescription reports given all of the office visits and the\r\n * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\r\n * disambiguation is for security reasons).\r\n *\r\n * @param ovIDs\r\n * 		A java.util.List of Longs for the office visits.\r\n * @param patientID\r\n * 		A long representing the MID of the patient in question.\r\n * @return A java.util.List of prescription reports.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionReportBean> byDate(long patientID, String startDate, String endDate) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ndcodes, ovmedication, officevisits \" + ((((\"WHERE ndcodes.Code=ovmedication.NDCode AND ovmedication.VisitID=officevisits.ID \" + \"AND PatientID=? AND ((DATE(?) < ovmedication.EndDate AND DATE(?) > ovmedication.StartDate)\") + \"OR (DATE(?) > ovmedication.StartDate  AND DATE(?) < ovmedication.EndDate ) OR \") + \"(DATE(?) <= ovmedication.StartDate AND DATE(?) >= ovmedication.StartDate)) \") + \"ORDER BY VisitDate DESC\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setString(2, startDate);\r\n        ps.setString(3, startDate);\r\n        ps.setString(4, endDate);\r\n        ps.setString(5, endDate);\r\n        ps.setString(6, startDate);\r\n        ps.setString(7, endDate);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1761,'String startDate','java.lang.String',0,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3041,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byDate(long,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of information related to prescription reports given all of the office visits and the\r\n * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\r\n * disambiguation is for security reasons).\r\n *\r\n * @param ovIDs\r\n * 		A java.util.List of Longs for the office visits.\r\n * @param patientID\r\n * 		A long representing the MID of the patient in question.\r\n * @return A java.util.List of prescription reports.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionReportBean> byDate(long patientID, String startDate, String endDate) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ndcodes, ovmedication, officevisits \" + ((((\"WHERE ndcodes.Code=ovmedication.NDCode AND ovmedication.VisitID=officevisits.ID \" + \"AND PatientID=? AND ((DATE(?) < ovmedication.EndDate AND DATE(?) > ovmedication.StartDate)\") + \"OR (DATE(?) > ovmedication.StartDate  AND DATE(?) < ovmedication.EndDate ) OR \") + \"(DATE(?) <= ovmedication.StartDate AND DATE(?) >= ovmedication.StartDate)) \") + \"ORDER BY VisitDate DESC\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setString(2, startDate);\r\n        ps.setString(3, startDate);\r\n        ps.setString(4, endDate);\r\n        ps.setString(5, endDate);\r\n        ps.setString(6, startDate);\r\n        ps.setString(7, endDate);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1762,'String endDate','java.lang.String',0,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3041,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byDate(long,java.lang.String,java.lang.String)',0,'/**\r\n * Returns a list of information related to prescription reports given all of the office visits and the\r\n * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\r\n * disambiguation is for security reasons).\r\n *\r\n * @param ovIDs\r\n * 		A java.util.List of Longs for the office visits.\r\n * @param patientID\r\n * 		A long representing the MID of the patient in question.\r\n * @return A java.util.List of prescription reports.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionReportBean> byDate(long patientID, String startDate, String endDate) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ndcodes, ovmedication, officevisits \" + ((((\"WHERE ndcodes.Code=ovmedication.NDCode AND ovmedication.VisitID=officevisits.ID \" + \"AND PatientID=? AND ((DATE(?) < ovmedication.EndDate AND DATE(?) > ovmedication.StartDate)\") + \"OR (DATE(?) > ovmedication.StartDate  AND DATE(?) < ovmedication.EndDate ) OR \") + \"(DATE(?) <= ovmedication.StartDate AND DATE(?) >= ovmedication.StartDate)) \") + \"ORDER BY VisitDate DESC\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setString(2, startDate);\r\n        ps.setString(3, startDate);\r\n        ps.setString(4, endDate);\r\n        ps.setString(5, endDate);\r\n        ps.setString(6, startDate);\r\n        ps.setString(7, endDate);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1763,'List<Long> ovIDs','java.util.List',0,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3042,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byOfficeVisitAndPatient(java.util.List,long)',0,'/**\r\n * Returns a list of information related to prescription reports given all of the office visits and the\r\n * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\r\n * disambiguation is for security reasons).\r\n *\r\n * @param ovIDs\r\n * 		A java.util.List of Longs for the office visits.\r\n * @param patientID\r\n * 		A long representing the MID of the patient in question.\r\n * @return A java.util.List of prescription reports.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionReportBean> byOfficeVisitAndPatient(List<Long> ovIDs, long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String preps = buildPreps(ovIDs.size());\r\n        ps = conn.prepareStatement((((\"SELECT * FROM ndcodes, ovmedication, officevisits \" + (\"WHERE ndcodes.Code=ovmedication.NDCode AND ovmedication.VisitID=officevisits.ID \" + \"AND PatientID=? AND VisitID IN(\")) + preps) + \") ORDER BY VisitDate DESC\"));\r\n        ps.setLong(1, patientID);\r\n        prepareOVIDs(ps, ovIDs);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1764,'long patientID','long',0,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3042,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byOfficeVisitAndPatient(java.util.List,long)',0,'/**\r\n * Returns a list of information related to prescription reports given all of the office visits and the\r\n * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\r\n * disambiguation is for security reasons).\r\n *\r\n * @param ovIDs\r\n * 		A java.util.List of Longs for the office visits.\r\n * @param patientID\r\n * 		A long representing the MID of the patient in question.\r\n * @return A java.util.List of prescription reports.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PrescriptionReportBean> byOfficeVisitAndPatient(List<Long> ovIDs, long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String preps = buildPreps(ovIDs.size());\r\n        ps = conn.prepareStatement((((\"SELECT * FROM ndcodes, ovmedication, officevisits \" + (\"WHERE ndcodes.Code=ovmedication.NDCode AND ovmedication.VisitID=officevisits.ID \" + \"AND PatientID=? AND VisitID IN(\")) + preps) + \") ORDER BY VisitDate DESC\"));\r\n        ps.setLong(1, patientID);\r\n        prepareOVIDs(ps, ovIDs);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1765,'PreparedStatement ps','java.sql.PreparedStatement',0,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3043,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.prepareOVIDs(java.sql.PreparedStatement,java.util.List)',0,'private void prepareOVIDs(PreparedStatement ps, List<Long> ovIDs) throws SQLException {\r\n    for (int i = 0; i < (ovIDs.size()); i++) {\r\n        ps.setLong((i + 2), ovIDs.get(i));\r\n    }\r\n}'),(1766,'List<Long> ovIDs','java.util.List',0,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3043,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.prepareOVIDs(java.sql.PreparedStatement,java.util.List)',0,'private void prepareOVIDs(PreparedStatement ps, List<Long> ovIDs) throws SQLException {\r\n    for (int i = 0; i < (ovIDs.size()); i++) {\r\n        ps.setLong((i + 2), ovIDs.get(i));\r\n    }\r\n}'),(1767,'int size','int',0,406,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO',3040,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.buildPreps(int)',0,'private String buildPreps(int size) {\r\n    String prep = \"\";\r\n    for (int i = 0; i < size; i++) {\r\n        prep += \"?,\";\r\n    }\r\n    if ((prep.length()) > 0)\r\n        return prep.substring(0, ((prep.length()) - 1));\r\n    else\r\n        return prep;\r\n\r\n}'),(1768,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,407,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO',3044,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PrescriptionsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1769,'long visitID','long',0,407,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO',3047,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.getList(long)',0,'public List<PrescriptionBean> getList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovmedication,ndcodes Where ovmedication.VisitID = ? \" + \"AND ndcodes.Code=ovmedication.NDCode\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1770,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,407,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO',3045,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.add(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Adds a prescription bean to the database.\r\n *\r\n * @param pres\r\n * 		The prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(PrescriptionBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovmedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions,OverrideOther) VALUES (?,?,?,?,?,?,?)\");\r\n        loader.loadParameters(ps, pres);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1771,'PrescriptionBean pres','edu.ncsu.csc.itrust.beans.PrescriptionBean',271,407,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO',3046,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.edit(edu.ncsu.csc.itrust.beans.PrescriptionBean)',0,'/**\r\n * Edits an existing prescription bean.\r\n *\r\n * @param pres\r\n * 		The newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long edit(PrescriptionBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        // ps = conn.prepareStatement(\"UPDATE OVMedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions) VALUES (?,?,?,?,?,?)\");\r\n        String statement = \"UPDATE ovmedication \" + (\"SET VisitID=?, NDCode=?, StartDate=?, EndDate=?, Dosage=?, Instructions=?, OverrideOther=? \" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        loader.loadParameters(ps, pres);\r\n        ps.setLong(8, pres.getId());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1772,'long ovMedicationID','long',0,407,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO',3048,'edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.remove(long)',0,'/**\r\n * Removes the given medication from its office visit\r\n *\r\n * @param ovMedicationID\r\n * 		The unique ID of the medication to be removed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void remove(long ovMedicationID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ovmedication WHERE ID=? \");\r\n        ps.setLong(1, ovMedicationID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1773,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3049,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param factory\r\n * 		\r\n */\r\npublic ProceduresDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1774,'long visitID','long',0,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3053,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getList(long)',0,'/**\r\n * List procedure bean in database\r\n *\r\n * @param visitID\r\n * 		\r\n * @return procedure\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ProcedureBean> getList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure,cptcodes,officevisits Where ovprocedure.VisitID = ? \" + \"AND officevisits.ID=ovprocedure.VisitID AND cptcodes.Code=ovprocedure.CPTCode\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1775,'long visitID','long',0,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3052,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getImmunizationList(long)',0,'/**\r\n *\r\n *\r\n * @param visitID\r\n * 		\r\n * @return list of inmmunization\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ProcedureBean> getImmunizationList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure,cptcodes,officevisits Where ovprocedure.VisitID = ? \" + \"AND officevisits.ID=ovprocedure.VisitID AND cptcodes.Code=ovprocedure.CPTCode AND cptcodes.attribute=immunization\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1776,'long visitID','long',0,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3054,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getMedProceduresList(long)',0,'public List<ProcedureBean> getMedProceduresList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure,cptcodes,officevisits Where ovprocedure.VisitID = ? \" + \"AND officevisits.ID=ovprocedure.VisitID AND cptcodes.Code=ovprocedure.CPTCode AND cptcodes.attribute is NULL\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1777,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3050,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.add(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Adds a diagnosis bean to the database.\r\n *\r\n * @param pres\r\n * 		The prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long add(ProcedureBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO ovprocedure \" + \"(VisitID,CPTCode) VALUES (?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getCPTCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1778,'ProcedureBean bean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3051,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.edit(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Edits an existing procedure bean.\r\n *\r\n * @param pres\r\n * 		The newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long edit(ProcedureBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"UPDATE ovprocedure \" + (\"SET VisitID=?, CPTCode=?\" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getCPTCode());\r\n        ps.setLong(3, bean.getOvProcedureID());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1779,'long ovProcedureID','long',0,408,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO',3055,'edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.remove(long)',0,'/**\r\n * Removes the given medication from its office visit\r\n *\r\n * @param ovMedicationID\r\n * 		The unique ID of the medication to be removed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void remove(long ovProcedureID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ovprocedure WHERE ID=? \");\r\n        ps.setLong(1, ovProcedureID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1780,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3056,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ReferralDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    referralLoader = new ReferralBeanLoader();\r\n    verboseLoader = new VerboseReferralBeanLoader();\r\n}'),(1781,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3078,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Create a new ReferralListQuery object.\r\n *\r\n * @param factory\r\n * 		\r\n * @param userid\r\n * 		\r\n */\r\npublic ReferralListQuery(DAOFactory factory, long userid) {\r\n    this.factory = factory;\r\n    this.userid = userid;\r\n    // initialize lookup map\r\n    sortColumns = new HashMap<String, String>();\r\n    sortColumns.put(\"patientName\", \"CONCAT(patients.lastName,  , patients.firstName)\");\r\n    sortColumns.put(\"receiverName\", \"CONCAT(preceiver.lastName, preceiver.firstName)\");\r\n    sortColumns.put(\"senderName\", \"CONCAT(psender.lastName, psender.firstName)\");\r\n    sortColumns.put(\"timestamp\", \"referrals.timestamp\");\r\n    sortColumns.put(\"priority\", \"referrals.PriorityCode\");\r\n}'),(1782,'long userid','long',0,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3078,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Create a new ReferralListQuery object.\r\n *\r\n * @param factory\r\n * 		\r\n * @param userid\r\n * 		\r\n */\r\npublic ReferralListQuery(DAOFactory factory, long userid) {\r\n    this.factory = factory;\r\n    this.userid = userid;\r\n    // initialize lookup map\r\n    sortColumns = new HashMap<String, String>();\r\n    sortColumns.put(\"patientName\", \"CONCAT(patients.lastName,  , patients.firstName)\");\r\n    sortColumns.put(\"receiverName\", \"CONCAT(preceiver.lastName, preceiver.firstName)\");\r\n    sortColumns.put(\"senderName\", \"CONCAT(psender.lastName, psender.firstName)\");\r\n    sortColumns.put(\"timestamp\", \"referrals.timestamp\");\r\n    sortColumns.put(\"priority\", \"referrals.PriorityCode\");\r\n}'),(1783,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,412,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery',3084,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public SenderReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(1784,'long userid','long',0,412,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery',3084,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public SenderReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(1785,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,410,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery',3076,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ReceiverReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(1786,'long userid','long',0,410,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery',3076,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public ReceiverReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(1787,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,409,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery',3074,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public PatientReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(1788,'long userid','long',0,409,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery',3074,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public PatientReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}'),(1789,'long ovid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3067,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsFromOV(long)',0,'/**\r\n * Get all referrals associated with a particular office visit.\r\n *\r\n * @param ovid\r\n * 		The office visit id.\r\n * @return A list of ReferralBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReferralBean> getReferralsFromOV(long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ovID = ?\");\r\n        ps.setLong(1, ovid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1790,'long mid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3068,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsSentFrom(long)',0,'/**\r\n * Gets a list of all referrals sent from an HCP\r\n *\r\n * @param mid\r\n * 		The HCPs mid.\r\n * @return The list of the referrals they sent.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReferralBean> getReferralsSentFrom(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE SenderID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1791,'long id','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3062,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferral(long)',0,'/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * 		The id of the referral to retrieve.\r\n * @return A ReferralBean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE id = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return referralLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1792,'edu.ncsu.csc.itrust.beans.ReferralBean','edu.ncsu.csc.itrust.beans.ReferralBean',274,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3062,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferral(long)',1,'/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * 		The id of the referral to retrieve.\r\n * @return A ReferralBean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE id = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return referralLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1793,'long messageID','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3073,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.setReferralMessage(long,long)',0,'/**\r\n * Set referral message.\r\n *\r\n * @param id\r\n * 		The id of the referral to retrieve.\r\n * @return A ReferralBean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean setReferralMessage(long messageID, long referralID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO referralmessage (messageID,referralID) VALUES (?,?) \");\r\n        ps.setLong(1, messageID);\r\n        ps.setLong(2, referralID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return true;\r\n}'),(1794,'long referralID','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3073,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.setReferralMessage(long,long)',0,'/**\r\n * Set referral message.\r\n *\r\n * @param id\r\n * 		The id of the referral to retrieve.\r\n * @return A ReferralBean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean setReferralMessage(long messageID, long referralID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO referralmessage (messageID,referralID) VALUES (?,?) \");\r\n        ps.setLong(1, messageID);\r\n        ps.setLong(2, referralID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return true;\r\n}'),(1795,'long messageID','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3071,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.isReferralMessage(long)',0,'/**\r\n * Set referral message.\r\n *\r\n * @param id\r\n * 		The id of the referral to retrieve.\r\n * @return A ReferralBean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long isReferralMessage(long messageID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referralmessage WHERE messageID = ?\");\r\n        ps.setLong(1, messageID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getLong(2);\r\n        } else {\r\n            return 0;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1796,'long mid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3069,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsSentTo(long)',0,'/**\r\n * Gets a list of all referrals sent to an HCP\r\n *\r\n * @param mid\r\n * 		The HCPs mid.\r\n * @return The list of the referrals sent to them.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReferralBean> getReferralsSentTo(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ReceiverID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1797,'long mid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3065,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForReceivingHCP(long)',0,'/**\r\n * Gets a list of all referrals a HCP has received\r\n *\r\n * @param mid\r\n * 		The patientss mid.\r\n * @return The list of the referrals they received.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReferralBean> getReferralsForReceivingHCP(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ReceiverID = ? ORDER BY PriorityCode ASC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1798,'long mid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3063,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForPatient(long)',0,'/**\r\n * Gets a list of all referrals sent to a patient.\r\n *\r\n * @param mid\r\n * 		The patientss mid.\r\n * @return The list of the referrals they received.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReferralBean> getReferralsForPatient(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE PatientID = ? ORDER BY viewed_by_patient, PriorityCode ASC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1799,'long mid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3066,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForReceivingHCPUnread(long)',0,'/**\r\n * Gets a list of all referrals sent to a patient\r\n *\r\n * @param mid\r\n * 		The patientss mid.\r\n * @return The list of the referrals they received that were unread.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReferralBean> getReferralsForReceivingHCPUnread(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ReceiverID = ? AND viewed_by_HCP = false\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1800,'long mid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3064,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForPatientUnread(long)',0,'/**\r\n * Gets a list of all referrals sent to a patient\r\n *\r\n * @param mid\r\n * 		The patientss mid.\r\n * @return The list of the referrals they received that were unread.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReferralBean> getReferralsForPatientUnread(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE PatientID = ? AND viewed_by_patient = false\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1801,'ReferralBean r','edu.ncsu.csc.itrust.beans.ReferralBean',274,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3059,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Updates a given referral in the database.\r\n *\r\n * @param r\r\n * 		The referral to update.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void editReferral(ReferralBean r) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE referrals SET PatientID=?,SenderID=?,ReceiverID=?,\" + \"ReferralDetails=?,OVID=?,viewed_by_patient=?,viewed_by_HCP=?,PriorityCode=?  WHERE ID=?\"));\r\n        referralLoader.loadParameters(ps, r);\r\n        ps.setLong(9, r.getId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1802,'ReferralBean r','edu.ncsu.csc.itrust.beans.ReferralBean',274,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3058,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Adds a given referral to the database.\r\n *\r\n * @param r\r\n * 		The referral to add.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long addReferral(ReferralBean r) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO referrals (PatientID,SenderID,ReceiverID,\" + (\"ReferralDetails,OVID,viewed_by_patient,viewed_by_HCP,PriorityCode,TimeStamp)  \" + \"VALUES (?,?,?,?,?,?,?,?,NOW())\")));\r\n        ps = referralLoader.loadParameters(ps, r);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1803,'long id','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3072,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.removeReferral(long)',0,'/**\r\n * Removes the given referral.\r\n *\r\n * @param id\r\n * 		The unique ID of the referral to be removed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void removeReferral(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM referrals WHERE ID=? \");\r\n        ps.setLong(1, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1804,'String sortField','java.lang.String',0,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3080,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.doquery(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * 		The pseudo-field name in which to sort.\r\n * @param dir\r\n * 		The direction of the desired sort (ascending or\r\n * 		descending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\nprotected List<VerboseReferralBean> doquery(String sortField, SortDirection dir) throws DBException {\r\n    String stmt = \"SELECT \" + (((((((((((((((\"CONCAT(psender.firstName, ,psender.lastName) AS senderName, \" + \"CONCAT(preceiver.firstName, ,preceiver.lastName) AS receiverName, \") + \"referrals.*, \") + \"officevisits.visitDate, \") + \"CONCAT(patients.firstName, ,patients.lastName) AS patientName \") + \"FROM \") + \"referrals, \") + \"personnel AS psender, \") + \"personnel AS preceiver, \") + \"patients, \") + \"officevisits \") + \"WHERE \") + \"referrals.SenderID=psender.mid \") + \"AND referrals.ReceiverID=preceiver.mid \") + \"AND referrals.PatientID=patients.mid \") + \"AND referrals.ovid=officevisits.id \");\r\n    stmt += String.format(\"AND %s = ? \", getUserField());\r\n    stmt += buildSort(sortField, dir);\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(stmt);\r\n        ps.setLong(1, getUserId());\r\n        ResultSet rs = ps.executeQuery();\r\n        return verboseLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1805,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3080,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.doquery(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * 		The pseudo-field name in which to sort.\r\n * @param dir\r\n * 		The direction of the desired sort (ascending or\r\n * 		descending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\nprotected List<VerboseReferralBean> doquery(String sortField, SortDirection dir) throws DBException {\r\n    String stmt = \"SELECT \" + (((((((((((((((\"CONCAT(psender.firstName, ,psender.lastName) AS senderName, \" + \"CONCAT(preceiver.firstName, ,preceiver.lastName) AS receiverName, \") + \"referrals.*, \") + \"officevisits.visitDate, \") + \"CONCAT(patients.firstName, ,patients.lastName) AS patientName \") + \"FROM \") + \"referrals, \") + \"personnel AS psender, \") + \"personnel AS preceiver, \") + \"patients, \") + \"officevisits \") + \"WHERE \") + \"referrals.SenderID=psender.mid \") + \"AND referrals.ReceiverID=preceiver.mid \") + \"AND referrals.PatientID=patients.mid \") + \"AND referrals.ovid=officevisits.id \");\r\n    stmt += String.format(\"AND %s = ? \", getUserField());\r\n    stmt += buildSort(sortField, dir);\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(stmt);\r\n        ps.setLong(1, getUserId());\r\n        ResultSet rs = ps.executeQuery();\r\n        return verboseLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1806,'String sortField','java.lang.String',0,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3083,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.query(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * 		The pseudo-field name in which to sort.\r\n * @param dir\r\n * 		The direction of the desired sort (ascending or\r\n * 		descending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> query(String sortField, SortDirection dir) throws DBException {\r\n    List<VerboseReferralBean> beans = doquery(sortField, dir);\r\n    return beans;\r\n}'),(1807,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3083,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.query(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * 		The pseudo-field name in which to sort.\r\n * @param dir\r\n * 		The direction of the desired sort (ascending or\r\n * 		descending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VerboseReferralBean> query(String sortField, SortDirection dir) throws DBException {\r\n    List<VerboseReferralBean> beans = doquery(sortField, dir);\r\n    return beans;\r\n}'),(1808,'String sortField','java.lang.String',0,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3079,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.buildSort(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Builds the sort portion of the SQL query (i.e. the ORDER BY... portion).\r\n *\r\n * @param sortField\r\n * 		The pseudo-field to sort on.\r\n * @param dir\r\n * 		The sort direction.\r\n * @return A string which can be a part of an SQL query.\r\n */\r\nprotected String buildSort(String sortField, SortDirection dir) {\r\n    String sortexp = sortColumns.get(sortField);\r\n    return String.format(\" ORDER BY %s %s \", sortexp, dir);\r\n}'),(1809,'SortDirection dir','edu.ncsu.csc.itrust.enums.SortDirection',487,411,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery',3079,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.buildSort(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)',0,'/**\r\n * Builds the sort portion of the SQL query (i.e. the ORDER BY... portion).\r\n *\r\n * @param sortField\r\n * 		The pseudo-field to sort on.\r\n * @param dir\r\n * 		The sort direction.\r\n * @return A string which can be a part of an SQL query.\r\n */\r\nprotected String buildSort(String sortField, SortDirection dir) {\r\n    String sortexp = sortColumns.get(sortField);\r\n    return String.format(\" ORDER BY %s %s \", sortexp, dir);\r\n}'),(1810,'long mid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3070,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getSenderQuery(long)',0,'/**\r\n * Get a referral query for a sending HCP.\r\n *\r\n * @param mid\r\n * 		The HCP id.\r\n * @return A ReferralListQuery object.\r\n */\r\npublic ReferralDAO.ReferralListQuery getSenderQuery(long mid) {\r\n    return new ReferralDAO.SenderReferralListQuery(this.factory, mid);\r\n}'),(1811,'long mid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3061,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReceiverQuery(long)',0,'/**\r\n * Get a referral query for a receiving HCP.\r\n *\r\n * @param mid\r\n * 		The HCP id.\r\n * @return A ReferralListQuery object.\r\n */\r\npublic ReferralDAO.ReferralListQuery getReceiverQuery(long mid) {\r\n    return new ReferralDAO.ReceiverReferralListQuery(this.factory, mid);\r\n}'),(1812,'long pid','long',0,413,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO',3060,'edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getPatientQuery(long)',0,'/**\r\n * Get a referral query for a patient.\r\n *\r\n * @param mid\r\n * 		The patient id.\r\n * @return A ReferralListQuery object.\r\n */\r\npublic ReferralDAO.ReferralListQuery getPatientQuery(long pid) {\r\n    return new ReferralDAO.PatientReferralListQuery(this.factory, pid);\r\n}'),(1813,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3086,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic RemoteMonitoringDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1814,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3093,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getTelemedicineBean(long)',0,'/**\r\n * Return remote monitoring list data for a given patient.\r\n *\r\n * @param patientMID\r\n * 		Patient to retrieve data for.\r\n * @return List of TelemedicineBeans\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TelemedicineBean> getTelemedicineBean(long patientMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE PatientMID=?\");\r\n        ps.setLong(1, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rmListLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1815,'long loggedInMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3092,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientsData(long)',0,'/**\r\n * Returns patient data for a given HCP\r\n *\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientsData(long loggedInMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE HCPMID=? ORDER BY PatientMID\");\r\n        ps.setLong(1, loggedInMID);\r\n        ResultSet patientRS = ps.executeQuery();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE timelogged >= CURRENT_DATE ORDER BY PatientID, timeLogged DESC\");\r\n        ResultSet dataRS = ps.executeQuery();\r\n        List<String> patientList = new ArrayList<String>();\r\n        while (patientRS.next()) {\r\n            patientList.add(((patientRS.getLong(\"PatientMID\")) + \"\"));\r\n        } \r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(dataRS);\r\n        int i;\r\n        int j;\r\n        // Go through all patients and remove any that arent monitored by this HCP\r\n        for (i = 0; i < (dataList.size()); i++) {\r\n            if (!(patientList.contains(((dataList.get(i).getPatientMID()) + \"\")))) {\r\n                dataList.remove(i);\r\n                i--;\r\n            }\r\n        }\r\n        // Add values in patient list with no data for today to list.\r\n        boolean itsThere;\r\n        for (i = 0; i < (patientList.size()); i++) {\r\n            itsThere = false;\r\n            for (j = 0; j < (dataList.size()); j++) {\r\n                if (((dataList.get(j).getPatientMID()) + \"\").equals(patientList.get(i))) {\r\n                    itsThere = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!itsThere) {\r\n                dataList.add(new RemoteMonitoringDataBean(Long.parseLong(patientList.get(i))));\r\n            }\r\n        }\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1816,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3090,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByDate(long,java.util.Date,java.util.Date)',0,'public List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1817,'Date lower','java.util.Date',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3090,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByDate(long,java.util.Date,java.util.Date)',0,'public List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1818,'Date upper','java.util.Date',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3090,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByDate(long,java.util.Date,java.util.Date)',0,'public List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1819,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3091,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByType(long,java.lang.String)',0,'/**\r\n * Get the requested type of data for the specified patient.\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param dataType\r\n * 		The type of telemedicine data to return\r\n * @return A list of beans which all contain information of the requested type\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByType(long patientMID, String dataType) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND \" + dataType) + \" != -1 ORDER BY timeLogged ASC\"));\r\n        ps.setLong(1, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1820,'String dataType','java.lang.String',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3091,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByType(long,java.lang.String)',0,'/**\r\n * Get the requested type of data for the specified patient.\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param dataType\r\n * 		The type of telemedicine data to return\r\n * @return A list of beans which all contain information of the requested type\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByType(long patientMID, String dataType) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND \" + dataType) + \" != -1 ORDER BY timeLogged ASC\"));\r\n        ps.setLong(1, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1821,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3095,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.storePatientData(long,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean,java.lang.String,long)',0,'/**\r\n * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param height\r\n * 		The height of the patient\r\n * @param weight\r\n * 		The weight of the patient\r\n * @param pedometerReading\r\n * 		The pedometer reading of the patient\r\n * @param reporterRole\r\n * 		The role of the person that reported these monitoring stats\r\n * @param reporterMID\r\n * 		The MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void storePatientData(long patientMID, RemoteMonitoringDataBean bean, String reporterRole, long reporterMID) throws DBException, iTrustException {\r\n    float height = bean.getHeight();\r\n    float weight = bean.getWeight();\r\n    int pedometer = bean.getPedometerReading();\r\n    int sbp = bean.getSystolicBloodPressure();\r\n    int dbp = bean.getDiastolicBloodPressure();\r\n    int glucose = bean.getGlucoseLevel();\r\n    if (height == 0)\r\n        height = -1;\r\n\r\n    if (weight == 0)\r\n        weight = -1;\r\n\r\n    if (pedometer == 0)\r\n        pedometer = -1;\r\n\r\n    if (sbp == 0)\r\n        sbp = -1;\r\n\r\n    if (dbp == 0)\r\n        dbp = -1;\r\n\r\n    if (glucose == 0)\r\n        glucose = -1;\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"height\")) >= 1) && (height != (-1)))\r\n        throw new iTrustException(\"Patient height entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"weight\")) >= 1) && (weight != (-1)))\r\n        throw new iTrustException(\"Patient weight entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"pedometerReading\")) >= 1) && (pedometer != (-1)))\r\n        throw new iTrustException(\"Patient pedometer reading entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"glucoseLevel\")) >= 10) && (glucose != (-1)))\r\n        throw new iTrustException(\"Patient glucose level entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"systolicBloodPressure\")) >= 10) && (sbp != (-1)))\r\n        throw new iTrustException(\"Patient systolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"diastolicBloodPressure\")) >= 10) && (dbp != (-1)))\r\n        throw new iTrustException(\"Patient diastolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO remotemonitoringdata(PatientID, height, weight, \" + \"pedometerReading, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setFloat(2, height);\r\n        ps.setFloat(3, weight);\r\n        ps.setInt(4, pedometer);\r\n        ps.setInt(5, sbp);\r\n        ps.setInt(6, dbp);\r\n        ps.setInt(7, glucose);\r\n        ps.setString(8, reporterRole);\r\n        ps.setLong(9, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1822,'RemoteMonitoringDataBean bean','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3095,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.storePatientData(long,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean,java.lang.String,long)',0,'/**\r\n * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param height\r\n * 		The height of the patient\r\n * @param weight\r\n * 		The weight of the patient\r\n * @param pedometerReading\r\n * 		The pedometer reading of the patient\r\n * @param reporterRole\r\n * 		The role of the person that reported these monitoring stats\r\n * @param reporterMID\r\n * 		The MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void storePatientData(long patientMID, RemoteMonitoringDataBean bean, String reporterRole, long reporterMID) throws DBException, iTrustException {\r\n    float height = bean.getHeight();\r\n    float weight = bean.getWeight();\r\n    int pedometer = bean.getPedometerReading();\r\n    int sbp = bean.getSystolicBloodPressure();\r\n    int dbp = bean.getDiastolicBloodPressure();\r\n    int glucose = bean.getGlucoseLevel();\r\n    if (height == 0)\r\n        height = -1;\r\n\r\n    if (weight == 0)\r\n        weight = -1;\r\n\r\n    if (pedometer == 0)\r\n        pedometer = -1;\r\n\r\n    if (sbp == 0)\r\n        sbp = -1;\r\n\r\n    if (dbp == 0)\r\n        dbp = -1;\r\n\r\n    if (glucose == 0)\r\n        glucose = -1;\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"height\")) >= 1) && (height != (-1)))\r\n        throw new iTrustException(\"Patient height entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"weight\")) >= 1) && (weight != (-1)))\r\n        throw new iTrustException(\"Patient weight entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"pedometerReading\")) >= 1) && (pedometer != (-1)))\r\n        throw new iTrustException(\"Patient pedometer reading entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"glucoseLevel\")) >= 10) && (glucose != (-1)))\r\n        throw new iTrustException(\"Patient glucose level entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"systolicBloodPressure\")) >= 10) && (sbp != (-1)))\r\n        throw new iTrustException(\"Patient systolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"diastolicBloodPressure\")) >= 10) && (dbp != (-1)))\r\n        throw new iTrustException(\"Patient diastolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO remotemonitoringdata(PatientID, height, weight, \" + \"pedometerReading, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setFloat(2, height);\r\n        ps.setFloat(3, weight);\r\n        ps.setInt(4, pedometer);\r\n        ps.setInt(5, sbp);\r\n        ps.setInt(6, dbp);\r\n        ps.setInt(7, glucose);\r\n        ps.setString(8, reporterRole);\r\n        ps.setLong(9, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1823,'String reporterRole','java.lang.String',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3095,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.storePatientData(long,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean,java.lang.String,long)',0,'/**\r\n * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param height\r\n * 		The height of the patient\r\n * @param weight\r\n * 		The weight of the patient\r\n * @param pedometerReading\r\n * 		The pedometer reading of the patient\r\n * @param reporterRole\r\n * 		The role of the person that reported these monitoring stats\r\n * @param reporterMID\r\n * 		The MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void storePatientData(long patientMID, RemoteMonitoringDataBean bean, String reporterRole, long reporterMID) throws DBException, iTrustException {\r\n    float height = bean.getHeight();\r\n    float weight = bean.getWeight();\r\n    int pedometer = bean.getPedometerReading();\r\n    int sbp = bean.getSystolicBloodPressure();\r\n    int dbp = bean.getDiastolicBloodPressure();\r\n    int glucose = bean.getGlucoseLevel();\r\n    if (height == 0)\r\n        height = -1;\r\n\r\n    if (weight == 0)\r\n        weight = -1;\r\n\r\n    if (pedometer == 0)\r\n        pedometer = -1;\r\n\r\n    if (sbp == 0)\r\n        sbp = -1;\r\n\r\n    if (dbp == 0)\r\n        dbp = -1;\r\n\r\n    if (glucose == 0)\r\n        glucose = -1;\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"height\")) >= 1) && (height != (-1)))\r\n        throw new iTrustException(\"Patient height entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"weight\")) >= 1) && (weight != (-1)))\r\n        throw new iTrustException(\"Patient weight entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"pedometerReading\")) >= 1) && (pedometer != (-1)))\r\n        throw new iTrustException(\"Patient pedometer reading entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"glucoseLevel\")) >= 10) && (glucose != (-1)))\r\n        throw new iTrustException(\"Patient glucose level entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"systolicBloodPressure\")) >= 10) && (sbp != (-1)))\r\n        throw new iTrustException(\"Patient systolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"diastolicBloodPressure\")) >= 10) && (dbp != (-1)))\r\n        throw new iTrustException(\"Patient diastolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO remotemonitoringdata(PatientID, height, weight, \" + \"pedometerReading, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setFloat(2, height);\r\n        ps.setFloat(3, weight);\r\n        ps.setInt(4, pedometer);\r\n        ps.setInt(5, sbp);\r\n        ps.setInt(6, dbp);\r\n        ps.setInt(7, glucose);\r\n        ps.setString(8, reporterRole);\r\n        ps.setLong(9, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1824,'long reporterMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3095,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.storePatientData(long,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean,java.lang.String,long)',0,'/**\r\n * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param height\r\n * 		The height of the patient\r\n * @param weight\r\n * 		The weight of the patient\r\n * @param pedometerReading\r\n * 		The pedometer reading of the patient\r\n * @param reporterRole\r\n * 		The role of the person that reported these monitoring stats\r\n * @param reporterMID\r\n * 		The MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void storePatientData(long patientMID, RemoteMonitoringDataBean bean, String reporterRole, long reporterMID) throws DBException, iTrustException {\r\n    float height = bean.getHeight();\r\n    float weight = bean.getWeight();\r\n    int pedometer = bean.getPedometerReading();\r\n    int sbp = bean.getSystolicBloodPressure();\r\n    int dbp = bean.getDiastolicBloodPressure();\r\n    int glucose = bean.getGlucoseLevel();\r\n    if (height == 0)\r\n        height = -1;\r\n\r\n    if (weight == 0)\r\n        weight = -1;\r\n\r\n    if (pedometer == 0)\r\n        pedometer = -1;\r\n\r\n    if (sbp == 0)\r\n        sbp = -1;\r\n\r\n    if (dbp == 0)\r\n        dbp = -1;\r\n\r\n    if (glucose == 0)\r\n        glucose = -1;\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"height\")) >= 1) && (height != (-1)))\r\n        throw new iTrustException(\"Patient height entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"weight\")) >= 1) && (weight != (-1)))\r\n        throw new iTrustException(\"Patient weight entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"pedometerReading\")) >= 1) && (pedometer != (-1)))\r\n        throw new iTrustException(\"Patient pedometer reading entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"glucoseLevel\")) >= 10) && (glucose != (-1)))\r\n        throw new iTrustException(\"Patient glucose level entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"systolicBloodPressure\")) >= 10) && (sbp != (-1)))\r\n        throw new iTrustException(\"Patient systolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"diastolicBloodPressure\")) >= 10) && (dbp != (-1)))\r\n        throw new iTrustException(\"Patient diastolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO remotemonitoringdata(PatientID, height, weight, \" + \"pedometerReading, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setFloat(2, height);\r\n        ps.setFloat(3, weight);\r\n        ps.setInt(4, pedometer);\r\n        ps.setInt(5, sbp);\r\n        ps.setInt(6, dbp);\r\n        ps.setInt(7, glucose);\r\n        ps.setString(8, reporterRole);\r\n        ps.setLong(9, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1825,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3089,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getNumberOfDailyEntries(long,java.lang.String)',0,'/**\r\n * Private method to get the number of entries for a certain patientID for today.\r\n *\r\n * @param patientMID\r\n * 		\r\n * @return the number of entries\r\n * @throws DBException\r\n * 		\r\n */\r\n/* private int getNumberOfDailyEntries(long patientMID) throws DBException{\nConnection conn = null;\nPreparedStatement ps = null;\ntry {\nconn = factory.getConnection();\nps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE PatientID=? AND DATE(timeLogged)=CURRENT_DATE\");\nps.setLong(1, patientMID);\nResultSet rs = ps.executeQuery();\nList<RemoteMonitoringDataBean> patients = loader.loadList(rs);\nreturn patients.size();\n\n} catch (SQLException e) {\ne.printStackTrace();\nthrow new DBException(e);\n} finally {\nDBUtil.closeConnection(conn, ps);\n}\n}\n */\r\n/**\r\n * Private method to get the number of entries for a certain patientID and a certain\r\n * data type for today.\r\n *\r\n * @param patientMID\r\n * 		\r\n * @param dataType\r\n * 		\r\n * @return the number of entries\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int getNumberOfDailyEntries(long patientMID, String dataType) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND \" + dataType) + \"!=? AND DATE(timeLogged)=CURRENT_DATE\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setInt(2, (-1));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> patients = loader.loadList(rs);\r\n        return patients.size();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1826,'String dataType','java.lang.String',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3089,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getNumberOfDailyEntries(long,java.lang.String)',0,'/**\r\n * Private method to get the number of entries for a certain patientID for today.\r\n *\r\n * @param patientMID\r\n * 		\r\n * @return the number of entries\r\n * @throws DBException\r\n * 		\r\n */\r\n/* private int getNumberOfDailyEntries(long patientMID) throws DBException{\nConnection conn = null;\nPreparedStatement ps = null;\ntry {\nconn = factory.getConnection();\nps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE PatientID=? AND DATE(timeLogged)=CURRENT_DATE\");\nps.setLong(1, patientMID);\nResultSet rs = ps.executeQuery();\nList<RemoteMonitoringDataBean> patients = loader.loadList(rs);\nreturn patients.size();\n\n} catch (SQLException e) {\ne.printStackTrace();\nthrow new DBException(e);\n} finally {\nDBUtil.closeConnection(conn, ps);\n}\n}\n */\r\n/**\r\n * Private method to get the number of entries for a certain patientID and a certain\r\n * data type for today.\r\n *\r\n * @param patientMID\r\n * 		\r\n * @param dataType\r\n * 		\r\n * @return the number of entries\r\n * @throws DBException\r\n * 		\r\n */\r\nprivate int getNumberOfDailyEntries(long patientMID, String dataType) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND \" + dataType) + \"!=? AND DATE(timeLogged)=CURRENT_DATE\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setInt(2, (-1));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> patients = loader.loadList(rs);\r\n        return patients.size();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1827,'long representativeMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3096,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.validatePR(long,long)',0,'public void validatePR(long representativeMID, long patientMID) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representativeMID);\r\n        ps.setLong(2, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        // no rows\r\n        if (!(rs.next()))\r\n            throw new iTrustException((\"Representer is not valid for patient \" + patientMID));\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1828,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3096,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.validatePR(long,long)',0,'public void validatePR(long representativeMID, long patientMID) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representativeMID);\r\n        ps.setLong(2, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        // no rows\r\n        if (!(rs.next()))\r\n            throw new iTrustException((\"Representer is not valid for patient \" + patientMID));\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1829,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3088,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getMonitoringHCPs(long)',0,'/**\r\n * Show the list of HCPs monitoring this patient\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @return list of HCPs monitoring the provided patient\r\n */\r\npublic List<PersonnelBean> getMonitoringHCPs(long patientMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM personnel, remotemonitoringlists \" + \"WHERE remotemonitoringlists.PatientMID=? AND remotemonitoringlists.HCPMID=personnel.MID\"));\r\n        ps.setLong(1, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1830,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3087,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.addPatientToList(long,long,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'/**\r\n * Add a patient to the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param HCPMID\r\n * 		The MID of the HCP\r\n * @param tBean\r\n * 		The TelemedicineBean indicating what telemedicine data the patient is allowed to enter.\r\n * @return true if added successfully, false if already in list\r\n */\r\npublic boolean addPatientToList(long patientMID, long HCPMID, TelemedicineBean tBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return false;\r\n\r\n        String permissionPS = \"SystolicBloodPressure, DiastolicBloodPressure, GlucoseLevel, Height, Weight, PedometerReading\";\r\n        ps = conn.prepareStatement(((\"INSERT INTO remotemonitoringlists(PatientMID, HCPMID, \" + permissionPS) + \") VALUES(?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ps.setBoolean(3, tBean.isSystolicBloodPressureAllowed());\r\n        ps.setBoolean(4, tBean.isDiastolicBloodPressureAllowed());\r\n        ps.setBoolean(5, tBean.isGlucoseLevelAllowed());\r\n        ps.setBoolean(6, tBean.isHeightAllowed());\r\n        ps.setBoolean(7, tBean.isWeightAllowed());\r\n        ps.setBoolean(8, tBean.isPedometerReadingAllowed());\r\n        ps.executeUpdate();\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1831,'long HCPMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3087,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.addPatientToList(long,long,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'/**\r\n * Add a patient to the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param HCPMID\r\n * 		The MID of the HCP\r\n * @param tBean\r\n * 		The TelemedicineBean indicating what telemedicine data the patient is allowed to enter.\r\n * @return true if added successfully, false if already in list\r\n */\r\npublic boolean addPatientToList(long patientMID, long HCPMID, TelemedicineBean tBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return false;\r\n\r\n        String permissionPS = \"SystolicBloodPressure, DiastolicBloodPressure, GlucoseLevel, Height, Weight, PedometerReading\";\r\n        ps = conn.prepareStatement(((\"INSERT INTO remotemonitoringlists(PatientMID, HCPMID, \" + permissionPS) + \") VALUES(?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ps.setBoolean(3, tBean.isSystolicBloodPressureAllowed());\r\n        ps.setBoolean(4, tBean.isDiastolicBloodPressureAllowed());\r\n        ps.setBoolean(5, tBean.isGlucoseLevelAllowed());\r\n        ps.setBoolean(6, tBean.isHeightAllowed());\r\n        ps.setBoolean(7, tBean.isWeightAllowed());\r\n        ps.setBoolean(8, tBean.isPedometerReadingAllowed());\r\n        ps.executeUpdate();\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1832,'TelemedicineBean tBean','edu.ncsu.csc.itrust.beans.TelemedicineBean',280,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3087,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.addPatientToList(long,long,edu.ncsu.csc.itrust.beans.TelemedicineBean)',0,'/**\r\n * Add a patient to the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param HCPMID\r\n * 		The MID of the HCP\r\n * @param tBean\r\n * 		The TelemedicineBean indicating what telemedicine data the patient is allowed to enter.\r\n * @return true if added successfully, false if already in list\r\n */\r\npublic boolean addPatientToList(long patientMID, long HCPMID, TelemedicineBean tBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return false;\r\n\r\n        String permissionPS = \"SystolicBloodPressure, DiastolicBloodPressure, GlucoseLevel, Height, Weight, PedometerReading\";\r\n        ps = conn.prepareStatement(((\"INSERT INTO remotemonitoringlists(PatientMID, HCPMID, \" + permissionPS) + \") VALUES(?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ps.setBoolean(3, tBean.isSystolicBloodPressureAllowed());\r\n        ps.setBoolean(4, tBean.isDiastolicBloodPressureAllowed());\r\n        ps.setBoolean(5, tBean.isGlucoseLevelAllowed());\r\n        ps.setBoolean(6, tBean.isHeightAllowed());\r\n        ps.setBoolean(7, tBean.isWeightAllowed());\r\n        ps.setBoolean(8, tBean.isPedometerReadingAllowed());\r\n        ps.executeUpdate();\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1833,'long patientMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3094,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.removePatientFromList(long,long)',0,'/**\r\n * Remove a patient from the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param HCPMID\r\n * 		The MID of the HCP\r\n * @return true if removed successfully, false if not in list\r\n */\r\npublic boolean removePatientFromList(long patientMID, long HCPMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        if ((ps.executeUpdate()) == 0)\r\n            return false;\r\n\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1834,'long HCPMID','long',0,414,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO',3094,'edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.removePatientFromList(long,long)',0,'/**\r\n * Remove a patient from the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * 		The MID of the patient\r\n * @param HCPMID\r\n * 		The MID of the HCP\r\n * @return true if removed successfully, false if not in list\r\n */\r\npublic boolean removePatientFromList(long patientMID, long HCPMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        if ((ps.executeUpdate()) == 0)\r\n            return false;\r\n\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1835,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3097,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ReportRequestDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    loader = new ReportRequestBeanLoader();\r\n}'),(1836,'long id','long',0,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3101,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getReportRequest(long)',0,'/**\r\n * Returns a full bean describing a given report request.\r\n *\r\n * @param id\r\n * 		The unique ID of the bean in the database.\r\n * @return The bean describing this report request.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReportRequestBean getReportRequest(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"ID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM reportrequests WHERE ID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return loader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1837,'edu.ncsu.csc.itrust.beans.ReportRequestBean','edu.ncsu.csc.itrust.beans.ReportRequestBean',276,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3101,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getReportRequest(long)',1,'/**\r\n * Returns a full bean describing a given report request.\r\n *\r\n * @param id\r\n * 		The unique ID of the bean in the database.\r\n * @return The bean describing this report request.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic ReportRequestBean getReportRequest(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"ID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM reportrequests WHERE ID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return loader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1838,'long mid','long',0,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3100,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getAllReportRequestsForRequester(long)',0,'/**\r\n * Returns all report requests associated with a given requester.\r\n *\r\n * @param mid\r\n * 		The MID of the personnel in question.\r\n * @return A java.util.List of report requests.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReportRequestBean> getAllReportRequestsForRequester(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"RequesterMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM reportrequests WHERE RequesterMID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1839,'long pid','long',0,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3099,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getAllReportRequestsForPatient(long)',0,'/**\r\n * Returns all of the report requests associated with a specific patient.\r\n *\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of report requests.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<ReportRequestBean> getAllReportRequestsForPatient(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM reportrequests WHERE PatientMID = ?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1840,'long requesterMID','long',0,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3098,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.addReportRequest(long,long,java.util.Date)',0,'// /**\r\n// * Returns every report request in the database.\r\n// * @return A java.util.List of report requests.\r\n// * @throws DBException\r\n// */\r\n// public List<ReportRequestBean> getAllReportRequests() throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// \r\n// try {\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"SELECT * FROM ReportRequests\");\r\n// ResultSet rs = ps.executeQuery();\r\n// return loader.loadList(rs);\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n/**\r\n * Adds a request for a report.\r\n *\r\n * @param requesterMID\r\n * 		The MID of the requester.\r\n * @param patientMID\r\n * 		The MID of the patient in question.\r\n * @param date\r\n * 		The date the request was made.\r\n * @return A long of the unique ID of the report request.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long addReportRequest(long requesterMID, long patientMID, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (requesterMID == 0L)\r\n            throw new SQLException(\"RequesterMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO reportrequests (ID, RequesterMID, PatientMID, RequestedDate, Status) VALUES (null,?,?,?,Requested)\");\r\n        ps.setLong(1, requesterMID);\r\n        ps.setLong(2, patientMID);\r\n        ps.setTimestamp(3, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1841,'long patientMID','long',0,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3098,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.addReportRequest(long,long,java.util.Date)',0,'// /**\r\n// * Returns every report request in the database.\r\n// * @return A java.util.List of report requests.\r\n// * @throws DBException\r\n// */\r\n// public List<ReportRequestBean> getAllReportRequests() throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// \r\n// try {\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"SELECT * FROM ReportRequests\");\r\n// ResultSet rs = ps.executeQuery();\r\n// return loader.loadList(rs);\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n/**\r\n * Adds a request for a report.\r\n *\r\n * @param requesterMID\r\n * 		The MID of the requester.\r\n * @param patientMID\r\n * 		The MID of the patient in question.\r\n * @param date\r\n * 		The date the request was made.\r\n * @return A long of the unique ID of the report request.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long addReportRequest(long requesterMID, long patientMID, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (requesterMID == 0L)\r\n            throw new SQLException(\"RequesterMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO reportrequests (ID, RequesterMID, PatientMID, RequestedDate, Status) VALUES (null,?,?,?,Requested)\");\r\n        ps.setLong(1, requesterMID);\r\n        ps.setLong(2, patientMID);\r\n        ps.setTimestamp(3, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1842,'Date date','java.util.Date',0,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3098,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.addReportRequest(long,long,java.util.Date)',0,'// /**\r\n// * Returns every report request in the database.\r\n// * @return A java.util.List of report requests.\r\n// * @throws DBException\r\n// */\r\n// public List<ReportRequestBean> getAllReportRequests() throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// \r\n// try {\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"SELECT * FROM ReportRequests\");\r\n// ResultSet rs = ps.executeQuery();\r\n// return loader.loadList(rs);\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n/**\r\n * Adds a request for a report.\r\n *\r\n * @param requesterMID\r\n * 		The MID of the requester.\r\n * @param patientMID\r\n * 		The MID of the patient in question.\r\n * @param date\r\n * 		The date the request was made.\r\n * @return A long of the unique ID of the report request.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic long addReportRequest(long requesterMID, long patientMID, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (requesterMID == 0L)\r\n            throw new SQLException(\"RequesterMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO reportrequests (ID, RequesterMID, PatientMID, RequestedDate, Status) VALUES (null,?,?,?,Requested)\");\r\n        ps.setLong(1, requesterMID);\r\n        ps.setLong(2, patientMID);\r\n        ps.setTimestamp(3, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1843,'long ID','long',0,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3102,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.setViewed(long,java.util.Date)',0,'// /**\r\n// * Sets the status of a request to Approved\r\n// *\r\n// * @param ID The unique ID of the report.\r\n// * @param approverMID The MID of the person approving the request.\r\n// * @param date The date the approval was made.\r\n// * @throws DBException\r\n// */\r\n// public void approveReportRequest(long ID, long approverMID, Date date) throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// try {\r\n// if (ID == 0L) throw new SQLException(\"ID cannot be null\");\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = Approved where ID = ?\");\r\n// ps.setLong(1, approverMID);\r\n// ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\r\n// ps.setLong(3, ID);\r\n// ps.executeUpdate();\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n// \r\n// /**\r\n// * Sets the status of a report request to Rejected\r\n// *\r\n// * @param ID The unique ID of the request in question.\r\n// * @param approverMID The MID of the rejecter in question.\r\n// * @param date The date the rejection was made.\r\n// * @param comment A comment describing why the request was rejected.\r\n// * @throws DBException\r\n// */\r\n// public void rejectReportRequest(long ID, long approverMID, Date date, String comment) throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// try {\r\n// if (ID == 0L) throw new SQLException(\"ID cannot be null\");\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = Rejected, comment = ? where ID = ?\");\r\n// ps.setLong(1, approverMID);\r\n// ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\r\n// ps.setString(3, comment);\r\n// ps.setLong(4, ID);\r\n// ps.executeUpdate();\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n/**\r\n * Sets the status of a report request to Viewed\r\n *\r\n * @param ID\r\n * 		The unique ID of the request in question.\r\n * @param date\r\n * 		The date the request was viewed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void setViewed(long ID, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (ID == 0L)\r\n            throw new SQLException(\"ID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE reportrequests set ViewedDate = ?, Status = Viewed where ID = ?\");\r\n        ps.setTimestamp(1, new Timestamp(date.getTime()));\r\n        ps.setLong(2, ID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1844,'Date date','java.util.Date',0,415,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO',3102,'edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.setViewed(long,java.util.Date)',0,'// /**\r\n// * Sets the status of a request to Approved\r\n// *\r\n// * @param ID The unique ID of the report.\r\n// * @param approverMID The MID of the person approving the request.\r\n// * @param date The date the approval was made.\r\n// * @throws DBException\r\n// */\r\n// public void approveReportRequest(long ID, long approverMID, Date date) throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// try {\r\n// if (ID == 0L) throw new SQLException(\"ID cannot be null\");\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = Approved where ID = ?\");\r\n// ps.setLong(1, approverMID);\r\n// ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\r\n// ps.setLong(3, ID);\r\n// ps.executeUpdate();\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n// \r\n// /**\r\n// * Sets the status of a report request to Rejected\r\n// *\r\n// * @param ID The unique ID of the request in question.\r\n// * @param approverMID The MID of the rejecter in question.\r\n// * @param date The date the rejection was made.\r\n// * @param comment A comment describing why the request was rejected.\r\n// * @throws DBException\r\n// */\r\n// public void rejectReportRequest(long ID, long approverMID, Date date, String comment) throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// try {\r\n// if (ID == 0L) throw new SQLException(\"ID cannot be null\");\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = Rejected, comment = ? where ID = ?\");\r\n// ps.setLong(1, approverMID);\r\n// ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\r\n// ps.setString(3, comment);\r\n// ps.setLong(4, ID);\r\n// ps.executeUpdate();\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n/**\r\n * Sets the status of a report request to Viewed\r\n *\r\n * @param ID\r\n * 		The unique ID of the request in question.\r\n * @param date\r\n * 		The date the request was viewed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void setViewed(long ID, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (ID == 0L)\r\n            throw new SQLException(\"ID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE reportrequests set ViewedDate = ?, Status = Viewed where ID = ?\");\r\n        ps.setTimestamp(1, new Timestamp(date.getTime()));\r\n        ps.setLong(2, ID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1845,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3103,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic RiskDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1846,'long patientID','long',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3108,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hasFamilyHistory(long,double,double)',0,'/**\r\n * This method is implemented using {@link FamilyDAO} for 2 reasons: (a) definitions of family members\r\n * might change, so its better to centralize that code and (2) to make this code a little bit \"nicer\"\r\n * even though it executes one query per family member. If this method gets slow, then you will need to\r\n * refactor. Otherwise, lets just keep it simple...\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param icdLower\r\n * 		A double of the lower bound for the codes.\r\n * @param icdUpper\r\n * 		A double of the upper bound for the codes.\r\n * @return A boolean indicating whether a family member had a match in this range.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hasFamilyHistory(long patientID, double icdLower, double icdUpper) throws DBException {\r\n    List<FamilyMemberBean> familyMembers = getFamilyMembers(patientID);\r\n    for (FamilyMemberBean famMember : familyMembers) {\r\n        if (hadPriorDiagnoses(famMember.getMid(), icdLower, icdUpper))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(1847,'double icdLower','double',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3108,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hasFamilyHistory(long,double,double)',0,'/**\r\n * This method is implemented using {@link FamilyDAO} for 2 reasons: (a) definitions of family members\r\n * might change, so its better to centralize that code and (2) to make this code a little bit \"nicer\"\r\n * even though it executes one query per family member. If this method gets slow, then you will need to\r\n * refactor. Otherwise, lets just keep it simple...\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param icdLower\r\n * 		A double of the lower bound for the codes.\r\n * @param icdUpper\r\n * 		A double of the upper bound for the codes.\r\n * @return A boolean indicating whether a family member had a match in this range.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hasFamilyHistory(long patientID, double icdLower, double icdUpper) throws DBException {\r\n    List<FamilyMemberBean> familyMembers = getFamilyMembers(patientID);\r\n    for (FamilyMemberBean famMember : familyMembers) {\r\n        if (hadPriorDiagnoses(famMember.getMid(), icdLower, icdUpper))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(1848,'double icdUpper','double',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3108,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hasFamilyHistory(long,double,double)',0,'/**\r\n * This method is implemented using {@link FamilyDAO} for 2 reasons: (a) definitions of family members\r\n * might change, so its better to centralize that code and (2) to make this code a little bit \"nicer\"\r\n * even though it executes one query per family member. If this method gets slow, then you will need to\r\n * refactor. Otherwise, lets just keep it simple...\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param icdLower\r\n * 		A double of the lower bound for the codes.\r\n * @param icdUpper\r\n * 		A double of the upper bound for the codes.\r\n * @return A boolean indicating whether a family member had a match in this range.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hasFamilyHistory(long patientID, double icdLower, double icdUpper) throws DBException {\r\n    List<FamilyMemberBean> familyMembers = getFamilyMembers(patientID);\r\n    for (FamilyMemberBean famMember : familyMembers) {\r\n        if (hadPriorDiagnoses(famMember.getMid(), icdLower, icdUpper))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(1849,'long patientID','long',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3105,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.getFamilyMembers(long)',0,'private List<FamilyMemberBean> getFamilyMembers(long patientID) throws DBException {\r\n    FamilyDAO famDAO = factory.getFamilyDAO();\r\n    List<FamilyMemberBean> familyMembers = famDAO.getParents(patientID);\r\n    familyMembers.addAll(famDAO.getSiblings(patientID));\r\n    return familyMembers;\r\n}'),(1850,'long patientID','long',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3106,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadChildhoodInfection(long,double[])',0,'/**\r\n * Returns whether or not a patient had a childhood infection for the exact, given ICD codes.\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param icdCodes\r\n * 		A parameter list of the ICD codes to match.\r\n * @return A boolean indicating whether this patient had all the listed ICD codes.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hadChildhoodInfection(long patientID, double... icdCodes) throws DBException {\r\n    // Note the datediff call - this is a MySQL function that takes the difference between two\r\n    // dates and returns that value in terms of days. 6570 days is 18 years (not counting leap years)\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, patients p \" + (\"WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? \" + \"AND datediff(ov.visitdate,p.dateofbirth) < 6570 AND ovd.icdcode IN (\")) + (createPrepared(icdCodes.length))) + \")\"));\r\n        ps.setLong(1, patientID);\r\n        setICDs(2, ps, icdCodes);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1851,'double... icdCodes','double[]',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3106,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadChildhoodInfection(long,double[])',0,'/**\r\n * Returns whether or not a patient had a childhood infection for the exact, given ICD codes.\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param icdCodes\r\n * 		A parameter list of the ICD codes to match.\r\n * @return A boolean indicating whether this patient had all the listed ICD codes.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hadChildhoodInfection(long patientID, double... icdCodes) throws DBException {\r\n    // Note the datediff call - this is a MySQL function that takes the difference between two\r\n    // dates and returns that value in terms of days. 6570 days is 18 years (not counting leap years)\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, patients p \" + (\"WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? \" + \"AND datediff(ov.visitdate,p.dateofbirth) < 6570 AND ovd.icdcode IN (\")) + (createPrepared(icdCodes.length))) + \")\"));\r\n        ps.setLong(1, patientID);\r\n        setICDs(2, ps, icdCodes);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1852,'int length','int',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3104,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.createPrepared(int)',0,'private String createPrepared(int length) {\r\n    String str = \"\";\r\n    for (int i = 0; i < length; i++)\r\n        str += \"?,\";\r\n\r\n    return str.substring(0, ((str.length()) - 1));\r\n}'),(1853,'int start','int',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3110,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.setICDs(int,java.sql.PreparedStatement,double[])',0,'private void setICDs(int start, PreparedStatement ps, double[] icdCodes) throws SQLException {\r\n    for (double icdCode : icdCodes) {\r\n        ps.setDouble((start++), icdCode);\r\n    }\r\n}'),(1854,'PreparedStatement ps','java.sql.PreparedStatement',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3110,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.setICDs(int,java.sql.PreparedStatement,double[])',0,'private void setICDs(int start, PreparedStatement ps, double[] icdCodes) throws SQLException {\r\n    for (double icdCode : icdCodes) {\r\n        ps.setDouble((start++), icdCode);\r\n    }\r\n}'),(1855,'double[] icdCodes','double[]',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3110,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.setICDs(int,java.sql.PreparedStatement,double[])',0,'private void setICDs(int start, PreparedStatement ps, double[] icdCodes) throws SQLException {\r\n    for (double icdCode : icdCodes) {\r\n        ps.setDouble((start++), icdCode);\r\n    }\r\n}'),(1856,'long patientID','long',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3109,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hasSmoked(long)',0,'/**\r\n * Returns if the patient has ever smoked in their life\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @return A boolean indicating whether the patient smoked.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hasSmoked(long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personalhealthinformation WHERE PatientID=? AND Smoker=1\");\r\n        ps.setLong(1, patientID);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1857,'long patientID','long',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3107,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadPriorDiagnoses(long,double,double)',0,'/**\r\n * Returns if a patient has ever been diagnosed with the given ICD code, in the range [lower,upper)\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param lowerICDCode\r\n * 		A double of the lower ICD code.\r\n * @param upperICDCode\r\n * 		A double of the upper ICD code.\r\n * @return A boolean indicating whether there was a match in the given range.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hadPriorDiagnoses(long patientID, double lowerICDCode, double upperICDCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, patients p \" + (\"WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? \" + \"AND ovd.icdcode>=? AND ovd.icdcode<?\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setDouble(2, lowerICDCode);\r\n        ps.setDouble(3, upperICDCode);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1858,'double lowerICDCode','double',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3107,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadPriorDiagnoses(long,double,double)',0,'/**\r\n * Returns if a patient has ever been diagnosed with the given ICD code, in the range [lower,upper)\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param lowerICDCode\r\n * 		A double of the lower ICD code.\r\n * @param upperICDCode\r\n * 		A double of the upper ICD code.\r\n * @return A boolean indicating whether there was a match in the given range.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hadPriorDiagnoses(long patientID, double lowerICDCode, double upperICDCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, patients p \" + (\"WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? \" + \"AND ovd.icdcode>=? AND ovd.icdcode<?\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setDouble(2, lowerICDCode);\r\n        ps.setDouble(3, upperICDCode);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1859,'double upperICDCode','double',0,416,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO',3107,'edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadPriorDiagnoses(long,double,double)',0,'/**\r\n * Returns if a patient has ever been diagnosed with the given ICD code, in the range [lower,upper)\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param lowerICDCode\r\n * 		A double of the lower ICD code.\r\n * @param upperICDCode\r\n * 		A double of the upper ICD code.\r\n * @return A boolean indicating whether there was a match in the given range.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean hadPriorDiagnoses(long patientID, double lowerICDCode, double upperICDCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, patients p \" + (\"WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? \" + \"AND ovd.icdcode>=? AND ovd.icdcode<?\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setDouble(2, lowerICDCode);\r\n        ps.setDouble(3, upperICDCode);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1860,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,417,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO',3111,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic SurveyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.surveyLoader = new SurveyLoader();\r\n}'),(1861,'SurveyBean surveyBean','edu.ncsu.csc.itrust.beans.SurveyBean',278,417,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO',3112,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.addCompletedSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,java.util.Date)',0,'/**\r\n * Insert survey data into database.\r\n *\r\n * @param surveyBean\r\n * 		The Bean representing the users responses which will be inserted.\r\n * @param date\r\n * 		The date the survey was completed.\r\n */\r\npublic void addCompletedSurvey(SurveyBean surveyBean, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovsurvey (VisitID, SurveyDate) VALUES (?,?)\");\r\n        ps.setLong(1, surveyBean.getVisitID());\r\n        ps.setTimestamp(2, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        if ((surveyBean.getWaitingRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set WaitingRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getWaitingRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getExamRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set ExamRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getExamRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getVisitSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set VisitSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getVisitSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getTreatmentSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set TreatmentSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getTreatmentSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1862,'Date date','java.util.Date',0,417,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO',3112,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.addCompletedSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,java.util.Date)',0,'/**\r\n * Insert survey data into database.\r\n *\r\n * @param surveyBean\r\n * 		The Bean representing the users responses which will be inserted.\r\n * @param date\r\n * 		The date the survey was completed.\r\n */\r\npublic void addCompletedSurvey(SurveyBean surveyBean, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovsurvey (VisitID, SurveyDate) VALUES (?,?)\");\r\n        ps.setLong(1, surveyBean.getVisitID());\r\n        ps.setTimestamp(2, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        if ((surveyBean.getWaitingRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set WaitingRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getWaitingRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getExamRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set ExamRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getExamRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getVisitSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set VisitSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getVisitSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getTreatmentSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set TreatmentSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getTreatmentSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1863,'long id','long',0,417,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO',3113,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.getSurveyData(long)',0,'/**\r\n * Gets survey data from the database by the office visit id. Creates an instance of an\r\n * SurveyBean with data and returns it.\r\n *\r\n * @param id\r\n * 		The unique ID of the survey in question.\r\n * @return A bean containing the SurveyBean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic SurveyBean getSurveyData(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovsurvey WHERE VisitID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return surveyLoader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1864,'edu.ncsu.csc.itrust.beans.SurveyBean','edu.ncsu.csc.itrust.beans.SurveyBean',278,417,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO',3113,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.getSurveyData(long)',1,'/**\r\n * Gets survey data from the database by the office visit id. Creates an instance of an\r\n * SurveyBean with data and returns it.\r\n *\r\n * @param id\r\n * 		The unique ID of the survey in question.\r\n * @return A bean containing the SurveyBean.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic SurveyBean getSurveyData(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovsurvey WHERE VisitID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return surveyLoader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1865,'long visitID','long',0,417,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO',3114,'edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.isSurveyCompleted(long)',0,'/**\r\n * Has this survey been completed?\r\n *\r\n * @param visitID\r\n * 		The unique ID of the office visit we are wondering about.\r\n * @return boolean indicating whether this survey is completed.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean isSurveyCompleted(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT count(*) FROM ovsurvey WHERE VisitID = ?\");\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return (rs.getInt(1)) == 0 ? false : true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1866,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,418,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO',3115,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic SurveyResultDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.loader = new SurveyResultBeanLoader();\r\n}'),(1867,'String zip','java.lang.String',0,418,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO',3117,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.getSurveyResultsForZip(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all the survey results in the database that correspond to a particular zip code.\r\n *\r\n * @param zip\r\n * 		The zipcode we are interested in as a String.\r\n * @param specialty\r\n * 		The specialty we are interested in as a String.\r\n * @return A java.util.List of SurveyResultBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForZip(String zip, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    StringBuffer sql = new StringBuffer();\r\n    sql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\r\n    sql.append(\"na hospitalID, \");\r\n    sql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\r\n    sql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\r\n    sql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\r\n    sql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\r\n    sql.append(\"count(*) / \");\r\n    sql.append(\"	(select count(*) from personnel p1, officevisits v1 \");\r\n    sql.append(\"	 where v1.hcpid = p1.mid \");\r\n    sql.append(\"	 and substr(p1.zip,1,3) = ? \");\r\n    sql.append(\"	 and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\r\n    sql.append(\"from ovsurvey s, personnel p, officevisits v \");\r\n    sql.append(\"where s.visitid = v.id \");\r\n    sql.append(\"and v.hcpid = p.mid \");\r\n    sql.append(\"and substr(p.zip,1,3) = ? \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\"and specialty = ?\");\r\n\r\n    sql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\", p.specialty \");\r\n\r\n    sql.append(\"order by p.mid \");\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(sql.toString());\r\n        ps.setString(1, zip.substring(0, 3));\r\n        ps.setString(2, zip.substring(0, 3));\r\n        if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n            ps.setString(3, specialty);\r\n\r\n        return loader.loadList(ps.executeQuery());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1868,'String specialty','java.lang.String',0,418,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO',3117,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.getSurveyResultsForZip(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all the survey results in the database that correspond to a particular zip code.\r\n *\r\n * @param zip\r\n * 		The zipcode we are interested in as a String.\r\n * @param specialty\r\n * 		The specialty we are interested in as a String.\r\n * @return A java.util.List of SurveyResultBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForZip(String zip, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    StringBuffer sql = new StringBuffer();\r\n    sql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\r\n    sql.append(\"na hospitalID, \");\r\n    sql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\r\n    sql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\r\n    sql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\r\n    sql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\r\n    sql.append(\"count(*) / \");\r\n    sql.append(\"	(select count(*) from personnel p1, officevisits v1 \");\r\n    sql.append(\"	 where v1.hcpid = p1.mid \");\r\n    sql.append(\"	 and substr(p1.zip,1,3) = ? \");\r\n    sql.append(\"	 and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\r\n    sql.append(\"from ovsurvey s, personnel p, officevisits v \");\r\n    sql.append(\"where s.visitid = v.id \");\r\n    sql.append(\"and v.hcpid = p.mid \");\r\n    sql.append(\"and substr(p.zip,1,3) = ? \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\"and specialty = ?\");\r\n\r\n    sql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\", p.specialty \");\r\n\r\n    sql.append(\"order by p.mid \");\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(sql.toString());\r\n        ps.setString(1, zip.substring(0, 3));\r\n        ps.setString(2, zip.substring(0, 3));\r\n        if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n            ps.setString(3, specialty);\r\n\r\n        return loader.loadList(ps.executeQuery());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1869,'String hospitalID','java.lang.String',0,418,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO',3116,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.getSurveyResultsForHospital(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all the survey data associated with a given hospital and a certain specialty.\r\n *\r\n * @param hospitalID\r\n * 		The unique ID of the iTrust hospital we are querying about.\r\n * @param specialty\r\n * 		A string representing the specialty we are interested in.\r\n * @return A java.util.List of SurveyResultBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForHospital(String hospitalID, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    StringBuffer sql = new StringBuffer();\r\n    sql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\r\n    sql.append(\"h.hosid hospitalID, \");\r\n    sql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\r\n    sql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\r\n    sql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\r\n    sql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\r\n    sql.append(\"count(*) / \");\r\n    sql.append(\"	(select count(*) from personnel p1, officevisits v1, hcpassignedhos h1 \");\r\n    sql.append(\"	 where v1.hcpid = p1.mid \");\r\n    sql.append(\"	 and v1.hcpid = h1.hcpid \");\r\n    sql.append(\"	 and h1.hosid = ? \");\r\n    sql.append(\"	 and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\r\n    sql.append(\"from ovsurvey s, personnel p, officevisits v, hcpassignedhos h \");\r\n    sql.append(\"where s.visitid = v.id \");\r\n    sql.append(\"and v.hcpid = p.mid \");\r\n    sql.append(\"and v.hcpid = h.hcpid \");\r\n    sql.append(\"and h.hosid = ? \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\"and p.specialty = ?\");\r\n\r\n    sql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\", p.specialty \");\r\n\r\n    sql.append(\"order by p.mid \");\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(sql.toString());\r\n        ps.setString(1, hospitalID);\r\n        ps.setString(2, hospitalID);\r\n        if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY))) {\r\n            ps.setString(3, specialty);\r\n        }\r\n        return loader.loadList(ps.executeQuery());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1870,'String specialty','java.lang.String',0,418,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO',3116,'edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.getSurveyResultsForHospital(java.lang.String,java.lang.String)',0,'/**\r\n * Returns all the survey data associated with a given hospital and a certain specialty.\r\n *\r\n * @param hospitalID\r\n * 		The unique ID of the iTrust hospital we are querying about.\r\n * @param specialty\r\n * 		A string representing the specialty we are interested in.\r\n * @return A java.util.List of SurveyResultBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForHospital(String hospitalID, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    StringBuffer sql = new StringBuffer();\r\n    sql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\r\n    sql.append(\"h.hosid hospitalID, \");\r\n    sql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\r\n    sql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\r\n    sql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\r\n    sql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\r\n    sql.append(\"count(*) / \");\r\n    sql.append(\"	(select count(*) from personnel p1, officevisits v1, hcpassignedhos h1 \");\r\n    sql.append(\"	 where v1.hcpid = p1.mid \");\r\n    sql.append(\"	 and v1.hcpid = h1.hcpid \");\r\n    sql.append(\"	 and h1.hosid = ? \");\r\n    sql.append(\"	 and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\r\n    sql.append(\"from ovsurvey s, personnel p, officevisits v, hcpassignedhos h \");\r\n    sql.append(\"where s.visitid = v.id \");\r\n    sql.append(\"and v.hcpid = p.mid \");\r\n    sql.append(\"and v.hcpid = h.hcpid \");\r\n    sql.append(\"and h.hosid = ? \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\"and p.specialty = ?\");\r\n\r\n    sql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\", p.specialty \");\r\n\r\n    sql.append(\"order by p.mid \");\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(sql.toString());\r\n        ps.setString(1, hospitalID);\r\n        ps.setString(2, hospitalID);\r\n        if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY))) {\r\n            ps.setString(3, specialty);\r\n        }\r\n        return loader.loadList(ps.executeQuery());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1871,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3118,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic TransactionDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1872,'TransactionType type','edu.ncsu.csc.itrust.enums.TransactionType',490,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3125,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long)',0,'/**\r\n * Log a transaction, just giving it the person who is logged in and the type\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID) throws DBException {\r\n    logTransaction(type, loggedInMID, 0L, \"\");\r\n}'),(1873,'long loggedInMID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3125,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long)',0,'/**\r\n * Log a transaction, just giving it the person who is logged in and the type\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID) throws DBException {\r\n    logTransaction(type, loggedInMID, 0L, \"\");\r\n}'),(1874,'TransactionType type','edu.ncsu.csc.itrust.enums.TransactionType',490,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3126,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO transactionlog(loggedInMID, secondaryMID, \" + \"transactionCode, addedInfo) VALUES(?,?,?,?)\"));\r\n        ps.setLong(1, loggedInMID);\r\n        ps.setLong(2, secondaryMID);\r\n        ps.setInt(3, type.getCode());\r\n        ps.setString(4, addedInfo);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1875,'long loggedInMID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3126,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO transactionlog(loggedInMID, secondaryMID, \" + \"transactionCode, addedInfo) VALUES(?,?,?,?)\"));\r\n        ps.setLong(1, loggedInMID);\r\n        ps.setLong(2, secondaryMID);\r\n        ps.setInt(3, type.getCode());\r\n        ps.setString(4, addedInfo);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1876,'long secondaryMID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3126,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO transactionlog(loggedInMID, secondaryMID, \" + \"transactionCode, addedInfo) VALUES(?,?,?,?)\"));\r\n        ps.setLong(1, loggedInMID);\r\n        ps.setLong(2, secondaryMID);\r\n        ps.setInt(3, type.getCode());\r\n        ps.setString(4, addedInfo);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1877,'String addedInfo','java.lang.String',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3126,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * 		The {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * 		The MID of the user who is logged in.\r\n * @param secondaryMID\r\n * 		Typically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * 		A note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * 		\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO transactionlog(loggedInMID, secondaryMID, \" + \"transactionCode, addedInfo) VALUES(?,?,?,?)\"));\r\n        ps.setLong(1, loggedInMID);\r\n        ps.setLong(2, secondaryMID);\r\n        ps.setInt(3, type.getCode());\r\n        ps.setString(4, addedInfo);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1878,'long patientID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3120,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getAllRecordAccesses(long,long,boolean)',0,'/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getAllRecordAccesses(long patientID, long dlhcpID, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode \" + \"IN(\") + (TransactionType.patientViewableStr)) + \") AND loggedInMID!=? ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setLong(2, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1879,'long dlhcpID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3120,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getAllRecordAccesses(long,long,boolean)',0,'/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getAllRecordAccesses(long patientID, long dlhcpID, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode \" + \"IN(\") + (TransactionType.patientViewableStr)) + \") AND loggedInMID!=? ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setLong(2, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1880,'boolean getByRole','boolean',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3120,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getAllRecordAccesses(long,long,boolean)',0,'/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getAllRecordAccesses(long patientID, long dlhcpID, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode \" + \"IN(\") + (TransactionType.patientViewableStr)) + \") AND loggedInMID!=? ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setLong(2, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1881,'long mid','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3124,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getTransactionsAffecting(long,long,java.util.Date,int)',0,'/**\r\n * The Most Thorough Fetch\r\n *\r\n * @param mid\r\n * 		MID of the logged in user\r\n * @param dlhcpID\r\n * 		MID of the users DLHCP\r\n * @param start\r\n * 		Index to start pulling entries from\r\n * @param range\r\n * 		Number of entries to retrieve\r\n * @return List of <range> TransactionBeans affecting the user starting from the <start>th entry\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getTransactionsAffecting(long mid, long dlhcpID, Date start, int range) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((((((((\"SELECT * FROM transactionlog WHERE ((timeLogged < ?) \" + (\"AND  (secondaryMID=? AND transactionCode \" + \"IN (\")) + (TransactionType.patientViewableStr)) + \")) \") + \"OR (loggedInMID=? AND transactionCode=?) ) \") + \"AND NOT (loggedInMID=? AND transactionCode IN (\")// exclude if DLHCP as specified in UC43\r\n         + (TransactionType.dlhcpHiddenStr)) + \")) \") + \"ORDER BY timeLogged DESC LIMIT 0,?\"));\r\n        ps.setString(2, (mid + \"\"));\r\n        ps.setString(3, (mid + \"\"));\r\n        ps.setInt(4, TransactionType.LOGIN_SUCCESS.getCode());\r\n        ps.setTimestamp(1, new Timestamp(start.getTime()));\r\n        ps.setLong(5, dlhcpID);\r\n        ps.setInt(6, range);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1882,'long dlhcpID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3124,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getTransactionsAffecting(long,long,java.util.Date,int)',0,'/**\r\n * The Most Thorough Fetch\r\n *\r\n * @param mid\r\n * 		MID of the logged in user\r\n * @param dlhcpID\r\n * 		MID of the users DLHCP\r\n * @param start\r\n * 		Index to start pulling entries from\r\n * @param range\r\n * 		Number of entries to retrieve\r\n * @return List of <range> TransactionBeans affecting the user starting from the <start>th entry\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getTransactionsAffecting(long mid, long dlhcpID, Date start, int range) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((((((((\"SELECT * FROM transactionlog WHERE ((timeLogged < ?) \" + (\"AND  (secondaryMID=? AND transactionCode \" + \"IN (\")) + (TransactionType.patientViewableStr)) + \")) \") + \"OR (loggedInMID=? AND transactionCode=?) ) \") + \"AND NOT (loggedInMID=? AND transactionCode IN (\")// exclude if DLHCP as specified in UC43\r\n         + (TransactionType.dlhcpHiddenStr)) + \")) \") + \"ORDER BY timeLogged DESC LIMIT 0,?\"));\r\n        ps.setString(2, (mid + \"\"));\r\n        ps.setString(3, (mid + \"\"));\r\n        ps.setInt(4, TransactionType.LOGIN_SUCCESS.getCode());\r\n        ps.setTimestamp(1, new Timestamp(start.getTime()));\r\n        ps.setLong(5, dlhcpID);\r\n        ps.setInt(6, range);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1883,'Date start','java.util.Date',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3124,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getTransactionsAffecting(long,long,java.util.Date,int)',0,'/**\r\n * The Most Thorough Fetch\r\n *\r\n * @param mid\r\n * 		MID of the logged in user\r\n * @param dlhcpID\r\n * 		MID of the users DLHCP\r\n * @param start\r\n * 		Index to start pulling entries from\r\n * @param range\r\n * 		Number of entries to retrieve\r\n * @return List of <range> TransactionBeans affecting the user starting from the <start>th entry\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getTransactionsAffecting(long mid, long dlhcpID, Date start, int range) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((((((((\"SELECT * FROM transactionlog WHERE ((timeLogged < ?) \" + (\"AND  (secondaryMID=? AND transactionCode \" + \"IN (\")) + (TransactionType.patientViewableStr)) + \")) \") + \"OR (loggedInMID=? AND transactionCode=?) ) \") + \"AND NOT (loggedInMID=? AND transactionCode IN (\")// exclude if DLHCP as specified in UC43\r\n         + (TransactionType.dlhcpHiddenStr)) + \")) \") + \"ORDER BY timeLogged DESC LIMIT 0,?\"));\r\n        ps.setString(2, (mid + \"\"));\r\n        ps.setString(3, (mid + \"\"));\r\n        ps.setInt(4, TransactionType.LOGIN_SUCCESS.getCode());\r\n        ps.setTimestamp(1, new Timestamp(start.getTime()));\r\n        ps.setLong(5, dlhcpID);\r\n        ps.setInt(6, range);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1884,'int range','int',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3124,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getTransactionsAffecting(long,long,java.util.Date,int)',0,'/**\r\n * The Most Thorough Fetch\r\n *\r\n * @param mid\r\n * 		MID of the logged in user\r\n * @param dlhcpID\r\n * 		MID of the users DLHCP\r\n * @param start\r\n * 		Index to start pulling entries from\r\n * @param range\r\n * 		Number of entries to retrieve\r\n * @return List of <range> TransactionBeans affecting the user starting from the <start>th entry\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getTransactionsAffecting(long mid, long dlhcpID, Date start, int range) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((((((((\"SELECT * FROM transactionlog WHERE ((timeLogged < ?) \" + (\"AND  (secondaryMID=? AND transactionCode \" + \"IN (\")) + (TransactionType.patientViewableStr)) + \")) \") + \"OR (loggedInMID=? AND transactionCode=?) ) \") + \"AND NOT (loggedInMID=? AND transactionCode IN (\")// exclude if DLHCP as specified in UC43\r\n         + (TransactionType.dlhcpHiddenStr)) + \")) \") + \"ORDER BY timeLogged DESC LIMIT 0,?\"));\r\n        ps.setString(2, (mid + \"\"));\r\n        ps.setString(3, (mid + \"\"));\r\n        ps.setInt(4, TransactionType.LOGIN_SUCCESS.getCode());\r\n        ps.setTimestamp(1, new Timestamp(start.getTime()));\r\n        ps.setLong(5, dlhcpID);\r\n        ps.setInt(6, range);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1885,'long patientID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3123,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getRecordAccesses(long,long,java.util.Date,java.util.Date,boolean)',0,'/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record, within the dates\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param lower\r\n * 		The starting date as a java.util.Date\r\n * @param upper\r\n * 		The ending date as a java.util.Date\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getRecordAccesses(long patientID, long dlhcpID, Date lower, Date upper, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode IN (\" + (TransactionType.patientViewableStr)) + \") \") + \"AND timeLogged >= ? AND timeLogged <= ? \") + \"AND loggedInMID!=? \") + \"ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ps.setLong(4, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1886,'long dlhcpID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3123,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getRecordAccesses(long,long,java.util.Date,java.util.Date,boolean)',0,'/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record, within the dates\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param lower\r\n * 		The starting date as a java.util.Date\r\n * @param upper\r\n * 		The ending date as a java.util.Date\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getRecordAccesses(long patientID, long dlhcpID, Date lower, Date upper, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode IN (\" + (TransactionType.patientViewableStr)) + \") \") + \"AND timeLogged >= ? AND timeLogged <= ? \") + \"AND loggedInMID!=? \") + \"ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ps.setLong(4, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1887,'Date lower','java.util.Date',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3123,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getRecordAccesses(long,long,java.util.Date,java.util.Date,boolean)',0,'/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record, within the dates\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param lower\r\n * 		The starting date as a java.util.Date\r\n * @param upper\r\n * 		The ending date as a java.util.Date\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getRecordAccesses(long patientID, long dlhcpID, Date lower, Date upper, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode IN (\" + (TransactionType.patientViewableStr)) + \") \") + \"AND timeLogged >= ? AND timeLogged <= ? \") + \"AND loggedInMID!=? \") + \"ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ps.setLong(4, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1888,'Date upper','java.util.Date',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3123,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getRecordAccesses(long,long,java.util.Date,java.util.Date,boolean)',0,'/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record, within the dates\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param lower\r\n * 		The starting date as a java.util.Date\r\n * @param upper\r\n * 		The ending date as a java.util.Date\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getRecordAccesses(long patientID, long dlhcpID, Date lower, Date upper, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode IN (\" + (TransactionType.patientViewableStr)) + \") \") + \"AND timeLogged >= ? AND timeLogged <= ? \") + \"AND loggedInMID!=? \") + \"ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ps.setLong(4, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1889,'boolean getByRole','boolean',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3123,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getRecordAccesses(long,long,java.util.Date,java.util.Date,boolean)',0,'/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record, within the dates\r\n *\r\n * @param patientID\r\n * 		The MID of the patient in question.\r\n * @param lower\r\n * 		The starting date as a java.util.Date\r\n * @param upper\r\n * 		The ending date as a java.util.Date\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<TransactionBean> getRecordAccesses(long patientID, long dlhcpID, Date lower, Date upper, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode IN (\" + (TransactionType.patientViewableStr)) + \") \") + \"AND timeLogged >= ? AND timeLogged <= ? \") + \"AND loggedInMID!=? \") + \"ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ps.setLong(4, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1890,'List<TransactionBean> tbList','java.util.List',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3119,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.addAndSortRoles(java.util.List,long,boolean)',0,'/**\r\n *\r\n *\r\n * @param tbList\r\n * 		\r\n * @param patientID\r\n * 		\r\n * @param sortByRole\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\nprivate List<TransactionBean> addAndSortRoles(List<TransactionBean> tbList, long patientID, boolean sortByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        for (TransactionBean t : tbList) {\r\n            ps = conn.prepareStatement(\"SELECT Role FROM users WHERE MID=?\");\r\n            ps.setLong(1, t.getLoggedInMID());\r\n            ResultSet rs = ps.executeQuery();\r\n            String role = \"\";\r\n            if (rs.next())\r\n                role = rs.getString(\"Role\");\r\n\r\n            if (role.equals(\"er\"))\r\n                role = \"Emergency Responder\";\r\n            else\r\n                if (role.equals(\"uap\"))\r\n                    role = \"UAP\";\r\n                else\r\n                    if (role.equals(\"hcp\")) {\r\n                        role = \"LHCP\";\r\n                        ps = conn.prepareStatement(\"SELECT PatientID FROM declaredhcp WHERE HCPID=?\");\r\n                        ps.setLong(1, t.getLoggedInMID());\r\n                        ResultSet rs2 = ps.executeQuery();\r\n                        while (rs2.next()) {\r\n                            if ((rs2.getLong(\"PatientID\")) == patientID) {\r\n                                role = \"DLHCP\";\r\n                                break;\r\n                            }\r\n                        } \r\n                    } else\r\n                        if (role.equals(\"patient\")) {\r\n                            role = \"Patient\";\r\n                            ps = conn.prepareStatement(\"SELECT representeeMID FROM representatives WHERE representerMID=?\");\r\n                            ps.setLong(1, t.getLoggedInMID());\r\n                            ResultSet rs2 = ps.executeQuery();\r\n                            while (rs2.next()) {\r\n                                if ((rs2.getLong(\"representeeMID\")) == patientID) {\r\n                                    role = \"Personal Health Representative\";\r\n                                    break;\r\n                                }\r\n                            } \r\n                        }\r\n\r\n\r\n\r\n            t.setRole(role);\r\n        }\r\n        if (sortByRole) {\r\n            TransactionBean[] array = new TransactionBean[tbList.size()];\r\n            array[0] = tbList.get(0);\r\n            TransactionBean t;\r\n            for (int i = 1; i < (tbList.size()); i++) {\r\n                t = tbList.get(i);\r\n                String role = t.getRole();\r\n                int j = 0;\r\n                while (((array[j]) != null) && ((role.compareToIgnoreCase(array[j].getRole())) >= 0))\r\n                    j++;\r\n\r\n                for (int k = i; k > j; k--) {\r\n                    array[k] = array[(k - 1)];\r\n                }\r\n                array[j] = t;\r\n            }\r\n            int size = tbList.size();\r\n            for (int i = 0; i < size; i++)\r\n                tbList.set(i, array[i]);\r\n\r\n        }\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1891,'long patientID','long',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3119,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.addAndSortRoles(java.util.List,long,boolean)',0,'/**\r\n *\r\n *\r\n * @param tbList\r\n * 		\r\n * @param patientID\r\n * 		\r\n * @param sortByRole\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\nprivate List<TransactionBean> addAndSortRoles(List<TransactionBean> tbList, long patientID, boolean sortByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        for (TransactionBean t : tbList) {\r\n            ps = conn.prepareStatement(\"SELECT Role FROM users WHERE MID=?\");\r\n            ps.setLong(1, t.getLoggedInMID());\r\n            ResultSet rs = ps.executeQuery();\r\n            String role = \"\";\r\n            if (rs.next())\r\n                role = rs.getString(\"Role\");\r\n\r\n            if (role.equals(\"er\"))\r\n                role = \"Emergency Responder\";\r\n            else\r\n                if (role.equals(\"uap\"))\r\n                    role = \"UAP\";\r\n                else\r\n                    if (role.equals(\"hcp\")) {\r\n                        role = \"LHCP\";\r\n                        ps = conn.prepareStatement(\"SELECT PatientID FROM declaredhcp WHERE HCPID=?\");\r\n                        ps.setLong(1, t.getLoggedInMID());\r\n                        ResultSet rs2 = ps.executeQuery();\r\n                        while (rs2.next()) {\r\n                            if ((rs2.getLong(\"PatientID\")) == patientID) {\r\n                                role = \"DLHCP\";\r\n                                break;\r\n                            }\r\n                        } \r\n                    } else\r\n                        if (role.equals(\"patient\")) {\r\n                            role = \"Patient\";\r\n                            ps = conn.prepareStatement(\"SELECT representeeMID FROM representatives WHERE representerMID=?\");\r\n                            ps.setLong(1, t.getLoggedInMID());\r\n                            ResultSet rs2 = ps.executeQuery();\r\n                            while (rs2.next()) {\r\n                                if ((rs2.getLong(\"representeeMID\")) == patientID) {\r\n                                    role = \"Personal Health Representative\";\r\n                                    break;\r\n                                }\r\n                            } \r\n                        }\r\n\r\n\r\n\r\n            t.setRole(role);\r\n        }\r\n        if (sortByRole) {\r\n            TransactionBean[] array = new TransactionBean[tbList.size()];\r\n            array[0] = tbList.get(0);\r\n            TransactionBean t;\r\n            for (int i = 1; i < (tbList.size()); i++) {\r\n                t = tbList.get(i);\r\n                String role = t.getRole();\r\n                int j = 0;\r\n                while (((array[j]) != null) && ((role.compareToIgnoreCase(array[j].getRole())) >= 0))\r\n                    j++;\r\n\r\n                for (int k = i; k > j; k--) {\r\n                    array[k] = array[(k - 1)];\r\n                }\r\n                array[j] = t;\r\n            }\r\n            int size = tbList.size();\r\n            for (int i = 0; i < size; i++)\r\n                tbList.set(i, array[i]);\r\n\r\n        }\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1892,'boolean sortByRole','boolean',0,419,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO',3119,'edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.addAndSortRoles(java.util.List,long,boolean)',0,'/**\r\n *\r\n *\r\n * @param tbList\r\n * 		\r\n * @param patientID\r\n * 		\r\n * @param sortByRole\r\n * 		\r\n * @return \r\n * @throws DBException\r\n * 		\r\n */\r\nprivate List<TransactionBean> addAndSortRoles(List<TransactionBean> tbList, long patientID, boolean sortByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        for (TransactionBean t : tbList) {\r\n            ps = conn.prepareStatement(\"SELECT Role FROM users WHERE MID=?\");\r\n            ps.setLong(1, t.getLoggedInMID());\r\n            ResultSet rs = ps.executeQuery();\r\n            String role = \"\";\r\n            if (rs.next())\r\n                role = rs.getString(\"Role\");\r\n\r\n            if (role.equals(\"er\"))\r\n                role = \"Emergency Responder\";\r\n            else\r\n                if (role.equals(\"uap\"))\r\n                    role = \"UAP\";\r\n                else\r\n                    if (role.equals(\"hcp\")) {\r\n                        role = \"LHCP\";\r\n                        ps = conn.prepareStatement(\"SELECT PatientID FROM declaredhcp WHERE HCPID=?\");\r\n                        ps.setLong(1, t.getLoggedInMID());\r\n                        ResultSet rs2 = ps.executeQuery();\r\n                        while (rs2.next()) {\r\n                            if ((rs2.getLong(\"PatientID\")) == patientID) {\r\n                                role = \"DLHCP\";\r\n                                break;\r\n                            }\r\n                        } \r\n                    } else\r\n                        if (role.equals(\"patient\")) {\r\n                            role = \"Patient\";\r\n                            ps = conn.prepareStatement(\"SELECT representeeMID FROM representatives WHERE representerMID=?\");\r\n                            ps.setLong(1, t.getLoggedInMID());\r\n                            ResultSet rs2 = ps.executeQuery();\r\n                            while (rs2.next()) {\r\n                                if ((rs2.getLong(\"representeeMID\")) == patientID) {\r\n                                    role = \"Personal Health Representative\";\r\n                                    break;\r\n                                }\r\n                            } \r\n                        }\r\n\r\n\r\n\r\n            t.setRole(role);\r\n        }\r\n        if (sortByRole) {\r\n            TransactionBean[] array = new TransactionBean[tbList.size()];\r\n            array[0] = tbList.get(0);\r\n            TransactionBean t;\r\n            for (int i = 1; i < (tbList.size()); i++) {\r\n                t = tbList.get(i);\r\n                String role = t.getRole();\r\n                int j = 0;\r\n                while (((array[j]) != null) && ((role.compareToIgnoreCase(array[j].getRole())) >= 0))\r\n                    j++;\r\n\r\n                for (int k = i; k > j; k--) {\r\n                    array[k] = array[(k - 1)];\r\n                }\r\n                array[j] = t;\r\n            }\r\n            int size = tbList.size();\r\n            for (int i = 0; i < size; i++)\r\n                tbList.set(i, array[i]);\r\n\r\n        }\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1893,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,420,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO',3127,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic VisitRemindersDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1894,'long hcpid','long',0,420,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO',3130,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getPatients(long)',0,'/**\r\n * Returns a list of patients associated with a given HCP.\r\n *\r\n * @param hcpid\r\n * 		The MID of the HCP in question.\r\n * @return A java.util.List of Visit Reminder Forms.\r\n */\r\npublic List<VisitReminderReturnForm> getPatients(long hcpid) throws DBException {\r\n    VisitReminderReturnForm temp;\r\n    VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\r\n    List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT DISTINCT\" + (((((((((((((((\"       ? as hid, \" + \"       dhcp.patientid, \") + \"       p.lastName, \") + \"       p.firstName, \") + \"       p.phone \") + \"  FROM \") + \"       patients p, \") + \"       declaredhcp dhcp \") + \" WHERE \") + \"		dhcp.hcpid = ? \") + \" AND \") + \"     p.MID = dhcp.patientid \") + \" AND \") + \"		p.dateofdeath is null \") + \" AND \") + \"     p.dateofbirth > DATE_SUB(CURDATE(), INTERVAL 19 YEAR) \")));\r\n        ps.setLong(1, hcpid);\r\n        ps.setLong(2, hcpid);\r\n        rs = ps.executeQuery();\r\n        while (rs.next()) {\r\n            temp = loader.loadSingle(rs);\r\n            patients.add(temp);\r\n        } \r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return patients;\r\n}'),(1895,'long hcpid','long',0,420,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO',3128,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getDiagnosedVisitNeeders(long)',0,'/**\r\n * Returns a list of patients who need a visit for this HCP. This means:\r\n *\r\n * Alive patient, no office visit for > 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx -\r\n * Circulatory-System Disease: [ 390.00 , 459.99 ]\r\n *\r\n * @param hcpid\r\n * 		The MID of the HCP in question.\r\n * @return A java.util.List of visit reminders.\r\n */\r\npublic List<VisitReminderReturnForm> getDiagnosedVisitNeeders(long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT  hid, MID, lastName, firstName, phone, ICDcode, visitDate FROM \" + (((((((((((((((((((((((((((((((((((((((((((((\"(SELECT DISTINCT \" + \"  ? as hid, \") + \"  p.MID as MID, \") + \"  p.lastName, \") + \"  p.firstName, \") + \"  p.phone, \") + \"  ovd.ICDcode \") + \" FROM \") + \"  patients p, \") + \"  officevisits ov, \") + \"  ovdiagnosis ovd \") + \" WHERE \") + \"  p.MID = ov.PatientID \") + \" AND \") + \"  p.DateOfDeath is null \") + \" AND \") + \"  ov.ID = ovd.VisitID \") + \" AND \") + \"  (\") + \"    ovd.ICDCode BETWEEN ? AND ? \") + \"   OR \") + \"    ovd.ICDCode BETWEEN ? AND ? \") + \"   OR \") + \"    ovd.ICDCode BETWEEN ? AND ? \") + \"  ) \") + \" AND \") + \"  p.MID NOT IN \") + \"   ( \") + \"    SELECT p.MID FROM patients p, officevisits ov \") + \"    WHERE \") + \"     p.MID = ov.PatientID \") + \"	 AND \") + \"     ov.visitDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) \") + \"   ) \") + \") a \") + \" INNER JOIN \") + \"  ( \") + \"   SELECT p.MID, MAX(ov.visitDate) as visitDate FROM patients p, officevisits ov \") + \"   WHERE \") + \"    p.MID = ov.PatientID \") + \"   GROUP BY \") + \"    p.mid \") + \"  ) b \") + \" USING(MID) \") + \"ORDER BY \") + \" lastName, firstName, MID, ICDcode \")));\r\n        ps.setLong(1, hcpid);\r\n        ps.setFloat(2, 250.0F);\r\n        ps.setFloat(3, 250.99F);\r\n        ps.setFloat(4, 390.0F);\r\n        ps.setFloat(5, 459.99F);\r\n        ps.setFloat(6, 493.0F);\r\n        ps.setFloat(7, 493.99F);\r\n        rs = ps.executeQuery();\r\n        List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\r\n        VisitReminderReturnForm temp = null;\r\n        VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\r\n        long lastId = -1;\r\n        while (rs.next()) {\r\n            if (lastId == (rs.getLong(2))) {\r\n                patients.get(((patients.size()) - 1)).addVisitFlag(new VisitFlag(VisitFlag.DIAGNOSED, rs.getString(6)));\r\n            } else {\r\n                lastId = rs.getLong(2);\r\n                temp = loader.loadSingle(rs);\r\n                temp.addVisitFlag(new VisitFlag(VisitFlag.DIAGNOSED, rs.getString(6)));\r\n                temp.addVisitFlag(new VisitFlag(VisitFlag.LAST_VISIT, rs.getString(7)));\r\n                patients.add(temp);\r\n            }\r\n        } \r\n        return patients;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1896,'long hcpid','long',0,420,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO',3129,'edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getFluShotDelinquents(long)',0,'/**\r\n * Returns a list of old people who need a flu shot\r\n *\r\n * CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months\r\n * 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if\r\n * not in 09 - 12\r\n *\r\n * Determines current date and calls one of two private methods these methods return different sets of\r\n * people - a: people who havent had a flu shot yet this year and need one - b: people who missed last\r\n * years flu shot and need a check-up\r\n *\r\n * @return A java.util.List of Visit Reminder Forms.\r\n * @param hcpid\r\n * 		The MID of the HCP in question.\r\n * @param patientBirthday\r\n * 		The birthday of the patient in question.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<VisitReminderReturnForm> getFluShotDelinquents(long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    /* Fall 2007 Bug Fix: Use the correct range for a zero-based calendar (eg January is 0) */\r\n    boolean thisYear = DateUtil.currentlyInMonthRange(8, 11);\r\n    String flagType = (thisYear) ? VisitFlag.MISSING_MEDICATION : VisitFlag.MISSED_MEDICATION;\r\n    Date september = new Date(0L);\r\n    Date december = new Date(0L);\r\n    DateUtil.setSQLMonthRange(september, 8, (thisYear ? 0 : 1), december, 11, (thisYear ? 0 : 1));\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT DISTINCT \" + ((((((((((((\"? as hid, p.mid as patientid, p.lastname, p.firstname, p.phone \" + \"FROM officevisits ov, patients p \") + \"WHERE (ov.patientid=p.mid \") + \"OR p.mid NOT IN (SELECT ov.patientid FROM officevisits ov)) \") + \"AND p.dateofdeath IS NULL \") + \"AND p.dateofbirth < DATE_SUB(CURDATE(), INTERVAL 50 YEAR) \") + \"AND p.mid NOT IN \") + \"(SELECT patientid AS mid FROM officevisits ov, ovprocedure op \") + \"WHERE ov.id=op.visitid \") + \"AND CPTCode IN (90656, 90658, 90660) \") + \"AND ((ov.visitdate BETWEEN ? AND ?) \") + \"OR (ov.visitdate BETWEEN ? AND ?))) \") + \"ORDER BY lastname, firstname, p.mid\")));\r\n        // ps = conn.prepareStatement(\"SELECT DISTINCT \"\r\n        // + \"? as hid, ov.patientid, p.lastname, p.firstname, \" + \"p.phone1, p.phone2, p.phone3 \"\r\n        // + \"FROM OfficeVisits ov, Patients p \" + \"WHERE ov.patientid=p.mid \"\r\n        // + \"AND p.dateofdeath IS NULL \"\r\n        // + \"AND p.dateofbirth < DATE_SUB(CURDATE(), INTERVAL 50 YEAR) \" + \"AND patientid NOT IN \"\r\n        // + \"(SELECT patientid FROM OfficeVisits ov, OVMedication om \" + \"WHERE ov.id=om.visitid \"\r\n        // + \"AND NDCode IN (90656, 90658, 90660) \" + \"AND ((StartDate BETWEEN ? AND ?) \"\r\n        // + \"OR (EndDate BETWEEN ? AND ?))) \" + \"ORDER BY lastname, firstname, ov.patientid\");\r\n        ps.setLong(1, hcpid);\r\n        ps.setDate(2, september);\r\n        ps.setDate(3, december);\r\n        ps.setDate(4, september);\r\n        ps.setDate(5, december);\r\n        rs = ps.executeQuery();\r\n        List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\r\n        VisitReminderReturnForm temp;\r\n        VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\r\n        while (rs.next()) {\r\n            temp = loader.loadSingle(rs);\r\n            temp.addVisitFlag(new VisitFlag(flagType, \"Flu Shot\"));\r\n            patients.add(temp);\r\n        } \r\n        return patients;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1897,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3131,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * 		The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic WardDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(1898,'String id','java.lang.String',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3139,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardsByHospitalID(java.lang.String)',0,'/**\r\n * Returns a list of all wards under a hospital sorted alphabetically\r\n *\r\n * @param id\r\n * 		The ID of the hospital to get wards from\r\n * @return A java.util.List of WardBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<WardBean> getAllWardsByHospitalID(String id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM WARDS WHERE InHospital = ? ORDER BY RequiredSpecialty\");\r\n        ps.setString(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1899,'WardBean ward','edu.ncsu.csc.itrust.beans.WardBean',284,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3132,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWard(edu.ncsu.csc.itrust.beans.WardBean)',0,'/**\r\n * Adds a Ward\r\n *\r\n * @param ward\r\n * 		The WardBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addWard(WardBean ward) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO Wards (RequiredSpecialty, InHospital) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, ward.getRequiredSpecialty());\r\n        ps.setLong(2, ward.getInHospital());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Ward already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1900,'WardBean ward','edu.ncsu.csc.itrust.beans.WardBean',284,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3148,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWard(edu.ncsu.csc.itrust.beans.WardBean)',0,'/**\r\n * Updates a particular wards information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param ward\r\n * 		The WardBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateWard(WardBean ward) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wards SET RequiredSpecialty=?, InHospital=? \" + \"WHERE WardID = ?\"));\r\n        ps.setString(1, ward.getRequiredSpecialty());\r\n        ps.setLong(2, ward.getInHospital());\r\n        ps.setLong(3, ward.getWardID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1901,'long id','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3145,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWard(long)',0,'/**\r\n * Removes a ward from a hospital. Returns whether or not any changes were made\r\n *\r\n * @param id\r\n * 		The WardId of the Ward to remove.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeWard(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM Wards WHERE WardID = ?\");\r\n        ps.setLong(1, id);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1902,'long id','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3137,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardRoomsByWardID(long)',0,'/**\r\n * Returns a list of all wardrooms under a ward sorted alphabetically\r\n *\r\n * @param id\r\n * 		The id of the ward to get all rooms for\r\n * @return A java.util.List of all WardRoomBeans in a ward.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<WardRoomBean> getAllWardRoomsByWardID(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM WARDROOMS WHERE InWard = ? ORDER BY RoomName\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardRoomLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1903,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3133,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'/**\r\n * Adds a WardRoom\r\n *\r\n * @param wardRoom\r\n * 		The WardRoomBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * 		\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean addWardRoom(WardRoomBean wardRoom) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO WardRooms (InWard, RoomName, Status) \" + \"VALUES (?,?,?)\"));\r\n        ps.setLong(1, wardRoom.getInWard());\r\n        ps.setString(2, wardRoom.getRoomName());\r\n        ps.setString(3, wardRoom.getStatus());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: WardRoom already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1904,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3149,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'/**\r\n * Updates a particular wardrooms information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param wardRoom\r\n * 		The WardRoomBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateWardRoom(WardRoomBean wardRoom) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wardrooms SET InWard=?, RoomName=?, Status=? \" + \"WHERE RoomID = ?\"));\r\n        ps.setLong(1, wardRoom.getInWard());\r\n        ps.setString(2, wardRoom.getRoomName());\r\n        ps.setString(3, wardRoom.getStatus());\r\n        ps.setLong(4, wardRoom.getRoomID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1905,'long id','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3147,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWardRoom(long)',0,'/**\r\n * Removes a room from a ward. Returns whether or not any changes were made\r\n *\r\n * @param id\r\n * 		The RoomId of the Room to remove.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeWardRoom(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM WardRooms WHERE RoomID = ?\");\r\n        ps.setLong(1, id);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1906,'long id','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3138,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardsByHCP(long)',0,'/**\r\n * Returns a list of all wards assigned to a HCP sorted alphabetically\r\n *\r\n * @param id\r\n * 		The id of the HCP to get wards for\r\n * @return A java.util.List of all WardBeans.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<WardBean> getAllWardsByHCP(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM HCPAssignedToWard haw INNER JOIN Wards w WHERE HCP = ? AND haw.ward = w.wardid ORDER BY RequiredSpecialty\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1907,'long id','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3136,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllHCPsAssignedToWard(long)',0,'/**\r\n * Returns a list of all HCPs assigned to a ward sorted alphabetically\r\n *\r\n * @param id\r\n * 		The id of the ward to get HCPs for\r\n * @return A java.util.List of PersonnelBean that represent the HCPs assigned to a ward.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<PersonnelBean> getAllHCPsAssignedToWard(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM HCPAssignedToWard haw INNER JOIN Personnel p WHERE haw.HCP = p.MID AND WARD = ? ORDER BY lastName\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1908,'long hcpID','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3134,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.assignHCPToWard(long,long)',0,'/**\r\n * Assigns an HCP to a the specified ward.\r\n *\r\n * @param hcpID\r\n * 		The id of the HCP to assign\r\n * @param wardID\r\n * 		The ward to assign the HCP to.\r\n * @return A boolean whether or not the insert worked correctly.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean assignHCPToWard(long hcpID, long wardID) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO HCPAssignedToWard (HCP, WARD) Values(?,?)\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setLong(2, wardID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: HCP or WARD ID dont exist!\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1909,'long wardID','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3134,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.assignHCPToWard(long,long)',0,'/**\r\n * Assigns an HCP to a the specified ward.\r\n *\r\n * @param hcpID\r\n * 		The id of the HCP to assign\r\n * @param wardID\r\n * 		The ward to assign the HCP to.\r\n * @return A boolean whether or not the insert worked correctly.\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean assignHCPToWard(long hcpID, long wardID) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO HCPAssignedToWard (HCP, WARD) Values(?,?)\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setLong(2, wardID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: HCP or WARD ID dont exist!\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1910,'long hcpID','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3146,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWard(long,long)',0,'/**\r\n * Removes a HCP and Ward association\r\n *\r\n * @param wardID\r\n * 		The Ward ID of the Ward associated to the HCP.\r\n * @param hcpID\r\n * 		The HCP ID of the HCP associated with the Ward.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeWard(long hcpID, long wardID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM HCPAssignedToWard WHERE Ward = ? and hcp = ?\");\r\n        ps.setLong(1, wardID);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1911,'long wardID','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3146,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWard(long,long)',0,'/**\r\n * Removes a HCP and Ward association\r\n *\r\n * @param wardID\r\n * 		The Ward ID of the Ward associated to the HCP.\r\n * @param hcpID\r\n * 		The HCP ID of the HCP associated with the Ward.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic boolean removeWard(long hcpID, long wardID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM HCPAssignedToWard WHERE Ward = ? and hcp = ?\");\r\n        ps.setLong(1, wardID);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1912,'WardRoomBean wardRoom','edu.ncsu.csc.itrust.beans.WardRoomBean',285,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3150,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoomOccupant(edu.ncsu.csc.itrust.beans.WardRoomBean)',0,'/**\r\n * Updates a particular wardrooms occupiedBy information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param wardRoom\r\n * 		The WardRoomBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic int updateWardRoomOccupant(WardRoomBean wardRoom) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wardRooms SET OccupiedBy=? \" + \"WHERE RoomID = ?\"));\r\n        if ((wardRoom.getOccupiedBy()) == null) {\r\n            ps.setNull(1, Types.BIGINT);\r\n        } else {\r\n            ps.setLong(1, wardRoom.getOccupiedBy());\r\n        }\r\n        ps.setLong(2, wardRoom.getRoomID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1913,'String status','java.lang.String',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3144,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWardRoomsByStatus(java.lang.String,java.lang.Long)',0,'/**\r\n * Returns a list of all wards with the status specified that the hcp has access to\r\n *\r\n * @param status\r\n * 		The Status to search on\r\n * @param hcpID\r\n * 		The id of the HCP to get wards for\r\n * @return A java.util.List of WardRoomBeans that the specified hcp has access too.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<WardRoomBean> getWardRoomsByStatus(String status, Long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wardrooms wr inner join hcpassignedtoward hw where wr.status = ? and wr.inward = hw.ward and hw.hcp = ?\");\r\n        ps.setString(1, status);\r\n        ps.setLong(2, hcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardRoomLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1914,'Long hcpID','java.lang.Long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3144,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWardRoomsByStatus(java.lang.String,java.lang.Long)',0,'/**\r\n * Returns a list of all wards with the status specified that the hcp has access to\r\n *\r\n * @param status\r\n * 		The Status to search on\r\n * @param hcpID\r\n * 		The id of the HCP to get wards for\r\n * @return A java.util.List of WardRoomBeans that the specified hcp has access too.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic List<WardRoomBean> getWardRoomsByStatus(String status, Long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wardrooms wr inner join hcpassignedtoward hw where wr.status = ? and wr.inward = hw.ward and hw.hcp = ?\");\r\n        ps.setString(1, status);\r\n        ps.setLong(2, hcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardRoomLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1915,'String wardRoomID','java.lang.String',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3143,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWardRoom(java.lang.String)',0,'/**\r\n * Returns a WardRoom specified by the id\r\n *\r\n * @param wardRoomID\r\n * 		The id of the ward room to get\r\n * @return A WardRoomBean with the ID specified\r\n * @throws DBException\r\n * 		\r\n */\r\npublic WardRoomBean getWardRoom(String wardRoomID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wardrooms where RoomID = ?\");\r\n        ps.setString(1, wardRoomID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return wardRoomLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1916,'edu.ncsu.csc.itrust.beans.WardRoomBean','edu.ncsu.csc.itrust.beans.WardRoomBean',285,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3143,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWardRoom(java.lang.String)',1,'/**\r\n * Returns a WardRoom specified by the id\r\n *\r\n * @param wardRoomID\r\n * 		The id of the ward room to get\r\n * @return A WardRoomBean with the ID specified\r\n * @throws DBException\r\n * 		\r\n */\r\npublic WardRoomBean getWardRoom(String wardRoomID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wardrooms where RoomID = ?\");\r\n        ps.setString(1, wardRoomID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return wardRoomLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1917,'String wardID','java.lang.String',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3142,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWard(java.lang.String)',0,'/**\r\n * Returns a Ward specified by the id\r\n *\r\n * @param wardID\r\n * 		The id of the ward to get\r\n * @return A WardBean with the ID specified\r\n * @throws DBException\r\n * 		\r\n */\r\npublic WardBean getWard(String wardID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wards where wardid = ?\");\r\n        ps.setString(1, wardID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return wardLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1918,'edu.ncsu.csc.itrust.beans.WardBean','edu.ncsu.csc.itrust.beans.WardBean',284,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3142,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWard(java.lang.String)',1,'/**\r\n * Returns a Ward specified by the id\r\n *\r\n * @param wardID\r\n * 		The id of the ward to get\r\n * @return A WardBean with the ID specified\r\n * @throws DBException\r\n * 		\r\n */\r\npublic WardBean getWard(String wardID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wards where wardid = ?\");\r\n        ps.setString(1, wardID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return wardLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1919,'String wardRoomID','java.lang.String',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3141,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getHospitalByWard(java.lang.String)',0,'/**\r\n * Returns the hospital that the specified ward room is located in\r\n *\r\n * @param wardRoomID\r\n * 		The id of the ward room to get the hospital for\r\n * @return The HospitalBean that the specified ward room is located in.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic HospitalBean getHospitalByWard(String wardRoomID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals h inner join wards ward inner join wardrooms room where room.RoomID = ? and room.inward = ward.wardid and ward.inhospital = h.hospitalid\");\r\n        ps.setString(1, wardRoomID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return hospitalLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1920,'edu.ncsu.csc.itrust.beans.HospitalBean','edu.ncsu.csc.itrust.beans.HospitalBean',258,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3141,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getHospitalByWard(java.lang.String)',1,'/**\r\n * Returns the hospital that the specified ward room is located in\r\n *\r\n * @param wardRoomID\r\n * 		The id of the ward room to get the hospital for\r\n * @return The HospitalBean that the specified ward room is located in.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic HospitalBean getHospitalByWard(String wardRoomID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals h inner join wards ward inner join wardrooms room where room.RoomID = ? and room.inward = ward.wardid and ward.inhospital = h.hospitalid\");\r\n        ps.setString(1, wardRoomID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return hospitalLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1921,'long mid','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3135,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.checkOutPatientReason(long,java.lang.String)',0,'/**\r\n * Logs the checkout reason for a patient\r\n *\r\n * @param mid\r\n * 		The mid of the Patient checking out\r\n * @param reason\r\n * 		The reason the patient is being checked out.\r\n * @return Whether 1 patient was inserted\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean checkOutPatientReason(long mid, String reason) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO WardRoomCheckout (PID, Reason) Values(?,?)\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, reason);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1922,'String reason','java.lang.String',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3135,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.checkOutPatientReason(long,java.lang.String)',0,'/**\r\n * Logs the checkout reason for a patient\r\n *\r\n * @param mid\r\n * 		The mid of the Patient checking out\r\n * @param reason\r\n * 		The reason the patient is being checked out.\r\n * @return Whether 1 patient was inserted\r\n * @throws iTrustException\r\n * 		\r\n */\r\npublic boolean checkOutPatientReason(long mid, String reason) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO WardRoomCheckout (PID, Reason) Values(?,?)\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, reason);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1923,'long pid','long',0,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3140,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getHospitalByPatientID(long)',0,'/**\r\n * Returns the hospital that the specified user is located in\r\n *\r\n * @param pid\r\n * 		The id of the user to get the hospital for\r\n * @return The HospitalBean that the specified patient is located in.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic HospitalBean getHospitalByPatientID(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals h inner join wards ward inner join wardrooms room where room.OccupiedBy = ? and room.inward = ward.wardid and ward.inhospital = h.hospitalid\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return hospitalLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1924,'edu.ncsu.csc.itrust.beans.HospitalBean','edu.ncsu.csc.itrust.beans.HospitalBean',258,421,'edu.ncsu.csc.itrust.dao.mysql.WardDAO',3140,'edu.ncsu.csc.itrust.dao.mysql.WardDAO.getHospitalByPatientID(long)',1,'/**\r\n * Returns the hospital that the specified user is located in\r\n *\r\n * @param pid\r\n * 		The id of the user to get the hospital for\r\n * @return The HospitalBean that the specified patient is located in.\r\n * @throws DBException\r\n * 		\r\n */\r\npublic HospitalBean getHospitalByPatientID(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals h inner join wards ward inner join wardrooms room where room.OccupiedBy = ? and room.inward = ward.wardid and ward.inhospital = h.hospitalid\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return hospitalLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(1925,'PrescriptionReportBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionReportBean',272,425,'edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest',3168,'edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)',0,'private void assertPrescription(PrescriptionReportBean prescription) {\r\n    TestCase.assertEquals(\"009042407\", prescription.getPrescription().getMedication().getNDCode());\r\n    TestCase.assertEquals(\"Tetracycline\", prescription.getPrescription().getMedication().getDescription());\r\n    TestCase.assertEquals(955L, prescription.getPrescription().getVisitID());\r\n    TestCase.assertEquals(5, prescription.getPrescription().getDosage());\r\n    TestCase.assertEquals(\"10/10/2006\", prescription.getPrescription().getStartDateStr());\r\n    TestCase.assertEquals(\"10/11/2006\", prescription.getPrescription().getEndDateStr());\r\n    TestCase.assertEquals(\"Take twice daily\", prescription.getPrescription().getInstructions());\r\n    TestCase.assertEquals(9000000000L, prescription.getOfficeVisit().getHcpID());\r\n    TestCase.assertEquals(\"1\", prescription.getOfficeVisit().getHospitalID());\r\n    TestCase.assertEquals(2L, prescription.getOfficeVisit().getPatientID());\r\n    TestCase.assertEquals(\"06/10/2007\", prescription.getOfficeVisit().getVisitDateStr());\r\n}'),(1926,'PrescriptionReportBean prescription','edu.ncsu.csc.itrust.beans.PrescriptionReportBean',272,425,'edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest',3169,'edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription2(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)',0,'private void assertPrescription2(PrescriptionReportBean prescription) {\r\n    TestCase.assertEquals(\"647641512\", prescription.getPrescription().getMedication().getNDCode());\r\n    TestCase.assertEquals(\"Prioglitazone\", prescription.getPrescription().getMedication().getDescription());\r\n    TestCase.assertEquals(955L, prescription.getPrescription().getVisitID());\r\n    TestCase.assertEquals(5, prescription.getPrescription().getDosage());\r\n    TestCase.assertEquals(\"10/10/2006\", prescription.getPrescription().getStartDateStr());\r\n    TestCase.assertEquals(\"10/11/2020\", prescription.getPrescription().getEndDateStr());\r\n    TestCase.assertEquals(\"Take twice daily\", prescription.getPrescription().getInstructions());\r\n    TestCase.assertEquals(9000000000L, prescription.getOfficeVisit().getHcpID());\r\n    TestCase.assertEquals(\"1\", prescription.getOfficeVisit().getHospitalID());\r\n    TestCase.assertEquals(2L, prescription.getOfficeVisit().getPatientID());\r\n    TestCase.assertEquals(\"06/10/2007\", prescription.getOfficeVisit().getVisitDateStr());\r\n}'),(1927,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,437,'edu.ncsu.csc.itrust.dao.patient.EditPatientTest',3234,'edu.ncsu.csc.itrust.dao.patient.EditPatientTest.assertIsPatient2(edu.ncsu.csc.itrust.beans.PatientBean)',0,'private void assertIsPatient2(PatientBean p) {\r\n    TestCase.assertEquals(2L, p.getMID());\r\n    TestCase.assertEquals(\"Andy\", p.getFirstName());\r\n    TestCase.assertEquals(\"Programmer\", p.getLastName());\r\n    TestCase.assertEquals(\"05/19/1984\", p.getDateOfBirthStr());\r\n    TestCase.assertEquals(\"250.10\", p.getCauseOfDeath());\r\n    TestCase.assertEquals(\"andy.programmer@gmail.com\", p.getEmail());\r\n    TestCase.assertEquals(\"344 Bob Street\", p.getStreetAddress1());\r\n    TestCase.assertEquals(\"\", p.getStreetAddress2());\r\n    TestCase.assertEquals(\"Raleigh\", p.getCity());\r\n    TestCase.assertEquals(\"NC\", p.getState());\r\n    TestCase.assertEquals(\"27607\", p.getZip());\r\n    TestCase.assertEquals(\"555-555-5555\", p.getPhone());\r\n    TestCase.assertEquals(\"Mr Emergency\", p.getEmergencyName());\r\n    TestCase.assertEquals(\"555-555-5551\", p.getEmergencyPhone());\r\n    TestCase.assertEquals(\"IC\", p.getIcName());\r\n    TestCase.assertEquals(\"Street1\", p.getIcAddress1());\r\n    TestCase.assertEquals(\"Street2\", p.getIcAddress2());\r\n    TestCase.assertEquals(\"City\", p.getIcCity());\r\n    TestCase.assertEquals(\"PA\", p.getIcState());\r\n    TestCase.assertEquals(\"19003-2715\", p.getIcZip());\r\n    TestCase.assertEquals(\"555-555-5555\", p.getIcPhone());\r\n    TestCase.assertEquals(\"1\", p.getIcID());\r\n    TestCase.assertEquals(\"1\", p.getMotherMID());\r\n    TestCase.assertEquals(\"0\", p.getFatherMID());\r\n    TestCase.assertEquals(\"O-\", p.getBloodType().getName());\r\n    TestCase.assertEquals(Ethnicity.Caucasian, p.getEthnicity());\r\n    TestCase.assertEquals(Gender.Male, p.getGender());\r\n    TestCase.assertEquals(\"This person is absolutely crazy. Do not touch them.\", p.getTopicalNotes());\r\n}'),(1928,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,447,'edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest',3309,'edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.assertIsPersonnel2(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'private void assertIsPersonnel2(PersonnelBean p) {\r\n    TestCase.assertEquals(8000000009L, p.getMID());\r\n    TestCase.assertEquals(\"FirstUAP\", p.getFirstName());\r\n    TestCase.assertEquals(\"LastUAP\", p.getLastName());\r\n    // assertEquals(\"opposite of yin\", p.getSecurityQuestion());\r\n    // assertEquals(\"yang\", p.getSecurityAnswer());\r\n    TestCase.assertEquals(\"100 Ave\", p.getStreetAddress1());\r\n    TestCase.assertEquals(\"\", p.getStreetAddress2());\r\n    TestCase.assertEquals(\"Raleigh\", p.getCity());\r\n    TestCase.assertEquals(\"NC\", p.getState());\r\n    TestCase.assertEquals(\"27607\", p.getZip());\r\n    TestCase.assertEquals(\"111-111-1111\", p.getPhone());\r\n}'),(1929,'String code','java.lang.String',0,460,'edu.ncsu.csc.itrust.dao.standards.CPTCodeTest',3399,'edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.genericAdd(java.lang.String,java.lang.String)',0,'private ProcedureBean genericAdd(String code, String desc) throws DBException, iTrustException {\r\n    ProcedureBean proc = new ProcedureBean(code, desc);\r\n    TestCase.assertTrue(cptDAO.addCPTCode(proc));\r\n    TestCase.assertEquals(desc, cptDAO.getCPTCode(code).getDescription());\r\n    return proc;\r\n}'),(1930,'edu.ncsu.csc.itrust.beans.ProcedureBean','edu.ncsu.csc.itrust.beans.ProcedureBean',273,460,'edu.ncsu.csc.itrust.dao.standards.CPTCodeTest',3399,'edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.genericAdd(java.lang.String,java.lang.String)',1,'private ProcedureBean genericAdd(String code, String desc) throws DBException, iTrustException {\r\n    ProcedureBean proc = new ProcedureBean(code, desc);\r\n    TestCase.assertTrue(cptDAO.addCPTCode(proc));\r\n    TestCase.assertEquals(desc, cptDAO.getCPTCode(code).getDescription());\r\n    return proc;\r\n}'),(1931,'String desc','java.lang.String',0,460,'edu.ncsu.csc.itrust.dao.standards.CPTCodeTest',3399,'edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.genericAdd(java.lang.String,java.lang.String)',0,'private ProcedureBean genericAdd(String code, String desc) throws DBException, iTrustException {\r\n    ProcedureBean proc = new ProcedureBean(code, desc);\r\n    TestCase.assertTrue(cptDAO.addCPTCode(proc));\r\n    TestCase.assertEquals(desc, cptDAO.getCPTCode(code).getDescription());\r\n    return proc;\r\n}'),(1932,'String code','java.lang.String',0,464,'edu.ncsu.csc.itrust.dao.standards.NDCodeTest',3426,'edu.ncsu.csc.itrust.dao.standards.NDCodeTest.genericAdd(java.lang.String,java.lang.String)',0,'private MedicationBean genericAdd(String code, String desc) throws DBException, iTrustException {\r\n    MedicationBean proc = new MedicationBean(code, desc);\r\n    TestCase.assertTrue(ndDAO.addNDCode(proc));\r\n    TestCase.assertEquals(desc, ndDAO.getNDCode(code).getDescription());\r\n    return proc;\r\n}'),(1933,'edu.ncsu.csc.itrust.beans.MedicationBean','edu.ncsu.csc.itrust.beans.MedicationBean',261,464,'edu.ncsu.csc.itrust.dao.standards.NDCodeTest',3426,'edu.ncsu.csc.itrust.dao.standards.NDCodeTest.genericAdd(java.lang.String,java.lang.String)',1,'private MedicationBean genericAdd(String code, String desc) throws DBException, iTrustException {\r\n    MedicationBean proc = new MedicationBean(code, desc);\r\n    TestCase.assertTrue(ndDAO.addNDCode(proc));\r\n    TestCase.assertEquals(desc, ndDAO.getNDCode(code).getDescription());\r\n    return proc;\r\n}'),(1934,'String desc','java.lang.String',0,464,'edu.ncsu.csc.itrust.dao.standards.NDCodeTest',3426,'edu.ncsu.csc.itrust.dao.standards.NDCodeTest.genericAdd(java.lang.String,java.lang.String)',0,'private MedicationBean genericAdd(String code, String desc) throws DBException, iTrustException {\r\n    MedicationBean proc = new MedicationBean(code, desc);\r\n    TestCase.assertTrue(ndDAO.addNDCode(proc));\r\n    TestCase.assertEquals(desc, ndDAO.getNDCode(code).getDescription());\r\n    return proc;\r\n}'),(1935,'String projectHome','java.lang.String',0,476,'edu.ncsu.csc.itrust.datagenerators.TestDataGenerator',3499,'edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public TestDataGenerator(String projectHome, DAOFactory factory) {\r\n    this.DIR = projectHome + \"/sql/data\";\r\n    this.factory = factory;\r\n}'),(1936,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,476,'edu.ncsu.csc.itrust.datagenerators.TestDataGenerator',3499,'edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public TestDataGenerator(String projectHome, DAOFactory factory) {\r\n    this.DIR = projectHome + \"/sql/data\";\r\n    this.factory = factory;\r\n}'),(1937,'String[] args','java.lang.String[]',0,476,'edu.ncsu.csc.itrust.datagenerators.TestDataGenerator',3557,'edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.main(java.lang.String[])',0,'public static void main(String[] args) throws IOException, SQLException {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}'),(1938,'String name','java.lang.String',0,479,'edu.ncsu.csc.itrust.enums.BloodType',3651,'edu.ncsu.csc.itrust.enums.BloodType.-init-(java.lang.String)',0,'private BloodType(String name) {\r\n    this.name = name;\r\n}'),(1939,'String bloodTypeStr','java.lang.String',0,479,'edu.ncsu.csc.itrust.enums.BloodType',3653,'edu.ncsu.csc.itrust.enums.BloodType.parse(java.lang.String)',0,'public static BloodType parse(String bloodTypeStr) {\r\n    for (BloodType type : BloodType.values()) {\r\n        if (type.getName().equals(bloodTypeStr)) {\r\n            return type;\r\n        }\r\n    }\r\n    return BloodType.NS;\r\n}'),(1940,'edu.ncsu.csc.itrust.enums.BloodType','edu.ncsu.csc.itrust.enums.BloodType',479,479,'edu.ncsu.csc.itrust.enums.BloodType',3653,'edu.ncsu.csc.itrust.enums.BloodType.parse(java.lang.String)',1,'public static BloodType parse(String bloodTypeStr) {\r\n    for (BloodType type : BloodType.values()) {\r\n        if (type.getName().equals(bloodTypeStr)) {\r\n            return type;\r\n        }\r\n    }\r\n    return BloodType.NS;\r\n}'),(1941,'String name','java.lang.String',0,481,'edu.ncsu.csc.itrust.enums.Ethnicity',3657,'edu.ncsu.csc.itrust.enums.Ethnicity.-init-(java.lang.String)',0,'private Ethnicity(String name) {\r\n    this.name = name;\r\n}'),(1942,'String input','java.lang.String',0,481,'edu.ncsu.csc.itrust.enums.Ethnicity',3659,'edu.ncsu.csc.itrust.enums.Ethnicity.parse(java.lang.String)',0,'public static Ethnicity parse(String input) {\r\n    for (Ethnicity ethnicity : Ethnicity.values()) {\r\n        if (ethnicity.name.equals(input))\r\n            return ethnicity;\r\n\r\n    }\r\n    return Ethnicity.NotSpecified;\r\n}'),(1943,'edu.ncsu.csc.itrust.enums.Ethnicity','edu.ncsu.csc.itrust.enums.Ethnicity',481,481,'edu.ncsu.csc.itrust.enums.Ethnicity',3659,'edu.ncsu.csc.itrust.enums.Ethnicity.parse(java.lang.String)',1,'public static Ethnicity parse(String input) {\r\n    for (Ethnicity ethnicity : Ethnicity.values()) {\r\n        if (ethnicity.name.equals(input))\r\n            return ethnicity;\r\n\r\n    }\r\n    return Ethnicity.NotSpecified;\r\n}'),(1944,'String name','java.lang.String',0,483,'edu.ncsu.csc.itrust.enums.Gender',3663,'edu.ncsu.csc.itrust.enums.Gender.-init-(java.lang.String)',0,'private Gender(String name) {\r\n    this.name = name;\r\n}'),(1945,'String input','java.lang.String',0,483,'edu.ncsu.csc.itrust.enums.Gender',3665,'edu.ncsu.csc.itrust.enums.Gender.parse(java.lang.String)',0,'public static Gender parse(String input) {\r\n    for (Gender gender : Gender.values()) {\r\n        if (gender.name.equals(input))\r\n            return gender;\r\n\r\n    }\r\n    return Gender.NotSpecified;\r\n}'),(1946,'edu.ncsu.csc.itrust.enums.Gender','edu.ncsu.csc.itrust.enums.Gender',483,483,'edu.ncsu.csc.itrust.enums.Gender',3665,'edu.ncsu.csc.itrust.enums.Gender.parse(java.lang.String)',1,'public static Gender parse(String input) {\r\n    for (Gender gender : Gender.values()) {\r\n        if (gender.name.equals(input))\r\n            return gender;\r\n\r\n    }\r\n    return Gender.NotSpecified;\r\n}'),(1947,'String rName','java.lang.String',0,485,'edu.ncsu.csc.itrust.enums.PrescriptionAlerts',3669,'edu.ncsu.csc.itrust.enums.PrescriptionAlerts.-init-(java.lang.String,java.lang.String)',0,'private PrescriptionAlerts(String rName, String rNDCode) {\r\n    this.name = rName;\r\n    this.NDCode = rNDCode;\r\n}'),(1948,'String rNDCode','java.lang.String',0,485,'edu.ncsu.csc.itrust.enums.PrescriptionAlerts',3669,'edu.ncsu.csc.itrust.enums.PrescriptionAlerts.-init-(java.lang.String,java.lang.String)',0,'private PrescriptionAlerts(String rName, String rNDCode) {\r\n    this.name = rName;\r\n    this.NDCode = rNDCode;\r\n}'),(1949,'String code','java.lang.String',0,485,'edu.ncsu.csc.itrust.enums.PrescriptionAlerts',3672,'edu.ncsu.csc.itrust.enums.PrescriptionAlerts.isAlert(java.lang.String)',0,'public static boolean isAlert(String code) {\r\n    for (PrescriptionAlerts thisone : PrescriptionAlerts.values()) {\r\n        if (thisone.getNDCode().equals(code))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}'),(1950,'String userRolesString','java.lang.String',0,486,'edu.ncsu.csc.itrust.enums.Role',3673,'edu.ncsu.csc.itrust.enums.Role.-init-(java.lang.String,java.lang.String,long)',0,'Role(String userRolesString, String dbTable, long midFirstDigit) {\r\n    this.userRolesString = userRolesString;\r\n    this.dbTable = dbTable;\r\n    this.midFirstDigit = midFirstDigit;\r\n}'),(1951,'String dbTable','java.lang.String',0,486,'edu.ncsu.csc.itrust.enums.Role',3673,'edu.ncsu.csc.itrust.enums.Role.-init-(java.lang.String,java.lang.String,long)',0,'Role(String userRolesString, String dbTable, long midFirstDigit) {\r\n    this.userRolesString = userRolesString;\r\n    this.dbTable = dbTable;\r\n    this.midFirstDigit = midFirstDigit;\r\n}'),(1952,'long midFirstDigit','long',0,486,'edu.ncsu.csc.itrust.enums.Role',3673,'edu.ncsu.csc.itrust.enums.Role.-init-(java.lang.String,java.lang.String,long)',0,'Role(String userRolesString, String dbTable, long midFirstDigit) {\r\n    this.userRolesString = userRolesString;\r\n    this.dbTable = dbTable;\r\n    this.midFirstDigit = midFirstDigit;\r\n}'),(1953,'String str','java.lang.String',0,486,'edu.ncsu.csc.itrust.enums.Role',3677,'edu.ncsu.csc.itrust.enums.Role.parse(java.lang.String)',0,'public static Role parse(String str) {\r\n    for (Role role : Role.values()) {\r\n        if (role.userRolesString.toLowerCase().equals(str.toLowerCase()))\r\n            return role;\r\n\r\n    }\r\n    throw new IllegalArgumentException(((\"Role \" + str) + \" does not exist\"));\r\n}'),(1954,'edu.ncsu.csc.itrust.enums.Role','edu.ncsu.csc.itrust.enums.Role',486,486,'edu.ncsu.csc.itrust.enums.Role',3677,'edu.ncsu.csc.itrust.enums.Role.parse(java.lang.String)',1,'public static Role parse(String str) {\r\n    for (Role role : Role.values()) {\r\n        if (role.userRolesString.toLowerCase().equals(str.toLowerCase()))\r\n            return role;\r\n\r\n    }\r\n    throw new IllegalArgumentException(((\"Role \" + str) + \" does not exist\"));\r\n}'),(1955,'String dirString','java.lang.String',0,487,'edu.ncsu.csc.itrust.enums.SortDirection',3678,'edu.ncsu.csc.itrust.enums.SortDirection.-init-(java.lang.String)',0,'SortDirection(String dirString) {\r\n    this.dirString = dirString;\r\n}'),(1956,'String str','java.lang.String',0,487,'edu.ncsu.csc.itrust.enums.SortDirection',3679,'edu.ncsu.csc.itrust.enums.SortDirection.parse(java.lang.String)',0,'public static SortDirection parse(String str) {\r\n    for (SortDirection sort : SortDirection.values()) {\r\n        if (sort.dirString.toLowerCase().equals(str.toLowerCase()))\r\n            return sort;\r\n\r\n    }\r\n    if (str.toLowerCase().equals(\"ascending\")) {\r\n        return SortDirection.ASCENDING;\r\n    }\r\n    if (str.toLowerCase().equals(\"descending\")) {\r\n        return SortDirection.DESCENDING;\r\n    }\r\n    throw new IllegalArgumentException(((\"SortDirection \" + str) + \" does not exist\"));\r\n}'),(1957,'edu.ncsu.csc.itrust.enums.SortDirection','edu.ncsu.csc.itrust.enums.SortDirection',487,487,'edu.ncsu.csc.itrust.enums.SortDirection',3679,'edu.ncsu.csc.itrust.enums.SortDirection.parse(java.lang.String)',1,'public static SortDirection parse(String str) {\r\n    for (SortDirection sort : SortDirection.values()) {\r\n        if (sort.dirString.toLowerCase().equals(str.toLowerCase()))\r\n            return sort;\r\n\r\n    }\r\n    if (str.toLowerCase().equals(\"ascending\")) {\r\n        return SortDirection.ASCENDING;\r\n    }\r\n    if (str.toLowerCase().equals(\"descending\")) {\r\n        return SortDirection.DESCENDING;\r\n    }\r\n    throw new IllegalArgumentException(((\"SortDirection \" + str) + \" does not exist\"));\r\n}'),(1958,'String name','java.lang.String',0,488,'edu.ncsu.csc.itrust.enums.State',3681,'edu.ncsu.csc.itrust.enums.State.-init-(java.lang.String)',0,'private State(String name) {\r\n    this.name = name;\r\n}'),(1959,'String state','java.lang.String',0,488,'edu.ncsu.csc.itrust.enums.State',3684,'edu.ncsu.csc.itrust.enums.State.parse(java.lang.String)',0,'public static State parse(String state) {\r\n    State[] values = State.values();\r\n    for (State myState : values) {\r\n        if ((myState.getName().equals(state)) || (myState.getAbbrev().equals(state)))\r\n            return myState;\r\n\r\n    }\r\n    return State.NC;\r\n}'),(1960,'edu.ncsu.csc.itrust.enums.State','edu.ncsu.csc.itrust.enums.State',488,488,'edu.ncsu.csc.itrust.enums.State',3684,'edu.ncsu.csc.itrust.enums.State.parse(java.lang.String)',1,'public static State parse(String state) {\r\n    State[] values = State.values();\r\n    for (State myState : values) {\r\n        if ((myState.getName().equals(state)) || (myState.getAbbrev().equals(state)))\r\n            return myState;\r\n\r\n    }\r\n    return State.NC;\r\n}'),(1961,'int code','int',0,490,'edu.ncsu.csc.itrust.enums.TransactionType',3688,'edu.ncsu.csc.itrust.enums.TransactionType.-init-(int,java.lang.String,java.lang.String,boolean)',0,'private TransactionType(int code, String description, String actionPhrase, boolean patientViewable) {\r\n    this.code = code;\r\n    this.description = description;\r\n    this.actionPhrase = actionPhrase;\r\n    this.patientView = patientViewable;\r\n}'),(1962,'String description','java.lang.String',0,490,'edu.ncsu.csc.itrust.enums.TransactionType',3688,'edu.ncsu.csc.itrust.enums.TransactionType.-init-(int,java.lang.String,java.lang.String,boolean)',0,'private TransactionType(int code, String description, String actionPhrase, boolean patientViewable) {\r\n    this.code = code;\r\n    this.description = description;\r\n    this.actionPhrase = actionPhrase;\r\n    this.patientView = patientViewable;\r\n}'),(1963,'String actionPhrase','java.lang.String',0,490,'edu.ncsu.csc.itrust.enums.TransactionType',3688,'edu.ncsu.csc.itrust.enums.TransactionType.-init-(int,java.lang.String,java.lang.String,boolean)',0,'private TransactionType(int code, String description, String actionPhrase, boolean patientViewable) {\r\n    this.code = code;\r\n    this.description = description;\r\n    this.actionPhrase = actionPhrase;\r\n    this.patientView = patientViewable;\r\n}'),(1964,'boolean patientViewable','boolean',0,490,'edu.ncsu.csc.itrust.enums.TransactionType',3688,'edu.ncsu.csc.itrust.enums.TransactionType.-init-(int,java.lang.String,java.lang.String,boolean)',0,'private TransactionType(int code, String description, String actionPhrase, boolean patientViewable) {\r\n    this.code = code;\r\n    this.description = description;\r\n    this.actionPhrase = actionPhrase;\r\n    this.patientView = patientViewable;\r\n}'),(1965,'int code','int',0,490,'edu.ncsu.csc.itrust.enums.TransactionType',3693,'edu.ncsu.csc.itrust.enums.TransactionType.parse(int)',0,'public static TransactionType parse(int code) {\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if ((type.code) == code)\r\n            return type;\r\n\r\n    }\r\n    throw new IllegalArgumentException((\"No transaction type exists for code \" + code));\r\n}'),(1966,'edu.ncsu.csc.itrust.enums.TransactionType','edu.ncsu.csc.itrust.enums.TransactionType',490,490,'edu.ncsu.csc.itrust.enums.TransactionType',3693,'edu.ncsu.csc.itrust.enums.TransactionType.parse(int)',1,'public static TransactionType parse(int code) {\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if ((type.code) == code)\r\n            return type;\r\n\r\n    }\r\n    throw new IllegalArgumentException((\"No transaction type exists for code \" + code));\r\n}'),(1967,'String string','java.lang.String',0,492,'edu.ncsu.csc.itrust.exception.AddPatientFileException',3697,'edu.ncsu.csc.itrust.exception.AddPatientFileException.-init-(java.lang.String)',0,'/**\r\n * Constructor initializing the error message string\r\n *\r\n * @param string\r\n * 		The error message string\r\n */\r\npublic AddPatientFileException(String string) {\r\n    message = string;\r\n}'),(1968,'String string','java.lang.String',0,494,'edu.ncsu.csc.itrust.exception.CSVFormatException',3701,'edu.ncsu.csc.itrust.exception.CSVFormatException.-init-(java.lang.String)',0,'/**\r\n * Constructor initializing the error message string\r\n *\r\n * @param string\r\n * 		The error message string\r\n */\r\npublic CSVFormatException(String string) {\r\n    message = string;\r\n}'),(1969,'SQLException e','java.sql.SQLException',0,495,'edu.ncsu.csc.itrust.exception.DBException',3703,'edu.ncsu.csc.itrust.exception.DBException.-init-(java.sql.SQLException)',0,'public DBException(SQLException e) {\r\n    super(\"A database exception has occurred. Please see the log in the console for stacktrace\");\r\n    this.sqlException = e;\r\n}'),(1970,'String errorMessage','java.lang.String',0,496,'edu.ncsu.csc.itrust.exception.ErrorList',3707,'edu.ncsu.csc.itrust.exception.ErrorList.addIfNotNull(java.lang.String)',0,'/**\r\n * Adds a message to the list if its not a Java null or empty string.\r\n *\r\n * @param errorMessage\r\n * 		\r\n */\r\npublic void addIfNotNull(String errorMessage) {\r\n    if ((errorMessage != null) && (!(\"\".equals(errorMessage))))\r\n        errorList.add(errorMessage);\r\n\r\n}'),(1971,'String... errorMessages','java.lang.String[]',0,497,'edu.ncsu.csc.itrust.exception.FormValidationException',3712,'edu.ncsu.csc.itrust.exception.FormValidationException.-init-(java.lang.String[])',0,'/**\r\n * Constructor with error messages passed as a list of parameters to the method.\r\n *\r\n * @param errorMessages\r\n * 		The list of error messages to be returned in the special form validation box.\r\n */\r\npublic FormValidationException(String... errorMessages) {\r\n    errorList = new ErrorList();\r\n    for (String msg : errorMessages) {\r\n        errorList.addIfNotNull(msg);\r\n    }\r\n}'),(1972,'ErrorList errorList','edu.ncsu.csc.itrust.exception.ErrorList',496,497,'edu.ncsu.csc.itrust.exception.FormValidationException',3713,'edu.ncsu.csc.itrust.exception.FormValidationException.-init-(edu.ncsu.csc.itrust.exception.ErrorList)',0,'/**\r\n * Constructor with error messages as a special ErrorList data type.\r\n *\r\n * @param errorList\r\n * 		An ErrorList object which contains the list of error messages.\r\n */\r\npublic FormValidationException(ErrorList errorList) {\r\n    this.errorList = errorList;\r\n}'),(1973,'JspWriter out','javax.servlet.jsp.JspWriter',0,497,'edu.ncsu.csc.itrust.exception.FormValidationException',3716,'edu.ncsu.csc.itrust.exception.FormValidationException.printHTML(javax.servlet.jsp.JspWriter)',0,'/**\r\n * The special formatting for error messages is then kept in one place.\r\n *\r\n * @param out\r\n * 		The output writer (in this case a JSPWriter) where the formatted list will go.\r\n * @throws IOException\r\n * 		If the writer is incorrect.\r\n */\r\npublic void printHTML(JspWriter out) throws IOException {\r\n    out.print(\"<h2>Information not valid</h2><div class=\"errorList\">\");\r\n    for (String errorMessage : errorList) {\r\n        out.print(((StringEscapeUtils.escapeHtml(errorMessage)) + \"<br />\"));\r\n    }\r\n    out.print(\"</div>\");\r\n}'),(1974,'String arg0','java.lang.String',0,499,'edu.ncsu.csc.itrust.exception.MockJSPWriter',3721,'edu.ncsu.csc.itrust.exception.MockJSPWriter.print(java.lang.String)',0,'@Override\r\npublic void print(String arg0) throws IOException {\r\n    this.input += arg0;\r\n}'),(1975,'String message','java.lang.String',0,501,'edu.ncsu.csc.itrust.exception.PrescriptionFieldException',3723,'edu.ncsu.csc.itrust.exception.PrescriptionFieldException.-init-(java.lang.String)',0,'public PrescriptionFieldException(String message) {\r\n    super(message);\r\n}'),(1976,'List<String> warnings','java.util.List',0,502,'edu.ncsu.csc.itrust.exception.PrescriptionWarningException',3724,'edu.ncsu.csc.itrust.exception.PrescriptionWarningException.-init-(java.util.List)',0,'/**\r\n * Warning if providing wrong prescription\r\n *\r\n * @param warnings\r\n * 		\r\n */\r\npublic PrescriptionWarningException(List<String> warnings) {\r\n    super(\"\");\r\n    this.warnings = warnings;\r\n}'),(1977,'String message','java.lang.String',0,503,'edu.ncsu.csc.itrust.exception.iTrustException',3726,'edu.ncsu.csc.itrust.exception.iTrustException.-init-(java.lang.String)',0,'/**\r\n * The typical constructor.\r\n *\r\n * @param message\r\n * 		A message to be displayed to the screen.\r\n */\r\npublic iTrustException(String message) {\r\n    this.message = message;\r\n}'),(1978,'String description','java.lang.String',0,522,'edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest',3835,'edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.getRowNumber(java.lang.String)',0,'public int getRowNumber(String description) {\r\n    TransactionType[] values = TransactionType.values();\r\n    int rownumber = 0;\r\n    for (int i = 0; i < (values.length); i++) {\r\n        if (description.equals(values[i].getDescription()))\r\n            rownumber = i + 1;\r\n\r\n    }\r\n    return rownumber;\r\n}'),(1979,'WebResponse wr','com.meterware.httpunit.WebResponse',0,562,'edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest',4109,'edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.getVisitID(com.meterware.httpunit.WebResponse)',0,'/* private String dateString(String d) {\nSimpleDateFormat(\"MM/dd/yyyy\").format()\n}\n */\r\nprivate long getVisitID(WebResponse wr) throws Exception {\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    String ovIDStr = form.getParameterValue(\"ovID\");\r\n    return Long.parseLong(ovIDStr);\r\n}'),(1980,'int offset','int',0,562,'edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest',4121,'edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.todayOffsetStr(int)',0,'private String todayOffsetStr(int offset) {\r\n    return dateOffsetStr(new Date(), offset);\r\n}'),(1981,'Date date','java.util.Date',0,562,'edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest',4108,'edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.dateOffsetStr(java.util.Date,int)',0,'private String dateOffsetStr(Date date, int offset) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(date);\r\n    cal.add(Calendar.DATE, offset);\r\n    return dateFormat.format(cal.getTime());\r\n}'),(1982,'int offset','int',0,562,'edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest',4108,'edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.dateOffsetStr(java.util.Date,int)',0,'private String dateOffsetStr(Date date, int offset) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(date);\r\n    cal.add(Calendar.DATE, offset);\r\n    return dateFormat.format(cal.getTime());\r\n}'),(1983,'String username','java.lang.String',0,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4259,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.login(java.lang.String,java.lang.String)',0,'/**\r\n * Helper method for logging in to iTrust\r\n *\r\n * @param username\r\n * 		\r\n * @param password\r\n * 		\r\n * @return {@link WebConversation}\r\n * @throws Exception\r\n * 		\r\n */\r\npublic WebConversation login(String username, String password) throws Exception {\r\n    try {\r\n        // begin at the iTrust home page\r\n        WebConversation wc = new WebConversation();\r\n        WebResponse loginResponse = wc.getResponse(iTrustHTTPTest.ADDRESS);\r\n        // log in using the given username and password\r\n        WebForm form = loginResponse.getForms()[0];\r\n        form.setParameter(\"j_username\", username);\r\n        form.setParameter(\"j_password\", password);\r\n        WebResponse homePage = loginResponse.getForms()[0].submit();\r\n        if (homePage.getTitle().equals(\"iTrust Login\")) {\r\n            throw new IllegalArgumentException(\"Error logging in, user not in database?\");\r\n        }\r\n        iTrustHTTPTest.assertLogged(TransactionType.LOGIN_SUCCESS, Long.parseLong(username), Long.parseLong(username), \"\");\r\n        return wc;\r\n    } catch (ConnectException e) {\r\n        throw new ConnectException(\"Tomcat must be running to run HTTP tests.\");\r\n    }\r\n}'),(1984,'String password','java.lang.String',0,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4259,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.login(java.lang.String,java.lang.String)',0,'/**\r\n * Helper method for logging in to iTrust\r\n *\r\n * @param username\r\n * 		\r\n * @param password\r\n * 		\r\n * @return {@link WebConversation}\r\n * @throws Exception\r\n * 		\r\n */\r\npublic WebConversation login(String username, String password) throws Exception {\r\n    try {\r\n        // begin at the iTrust home page\r\n        WebConversation wc = new WebConversation();\r\n        WebResponse loginResponse = wc.getResponse(iTrustHTTPTest.ADDRESS);\r\n        // log in using the given username and password\r\n        WebForm form = loginResponse.getForms()[0];\r\n        form.setParameter(\"j_username\", username);\r\n        form.setParameter(\"j_password\", password);\r\n        WebResponse homePage = loginResponse.getForms()[0].submit();\r\n        if (homePage.getTitle().equals(\"iTrust Login\")) {\r\n            throw new IllegalArgumentException(\"Error logging in, user not in database?\");\r\n        }\r\n        iTrustHTTPTest.assertLogged(TransactionType.LOGIN_SUCCESS, Long.parseLong(username), Long.parseLong(username), \"\");\r\n        return wc;\r\n    } catch (ConnectException e) {\r\n        throw new ConnectException(\"Tomcat must be running to run HTTP tests.\");\r\n    }\r\n}'),(1985,'TransactionType code','edu.ncsu.csc.itrust.enums.TransactionType',490,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4257,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if ((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) {\r\n            TestCase.assertTrue(((t.getTransactionType()) == code));\r\n            if (!(t.getAddedInfo().trim().contains(addedInfo.trim()))) {\r\n                TestCase.fail(\"Additional Information is not logged correctly.\");\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    TestCase.fail(\"Event not logged as specified.\");\r\n}'),(1986,'long loggedInMID','long',0,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4257,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if ((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) {\r\n            TestCase.assertTrue(((t.getTransactionType()) == code));\r\n            if (!(t.getAddedInfo().trim().contains(addedInfo.trim()))) {\r\n                TestCase.fail(\"Additional Information is not logged correctly.\");\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    TestCase.fail(\"Event not logged as specified.\");\r\n}'),(1987,'long secondaryMID','long',0,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4257,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if ((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) {\r\n            TestCase.assertTrue(((t.getTransactionType()) == code));\r\n            if (!(t.getAddedInfo().trim().contains(addedInfo.trim()))) {\r\n                TestCase.fail(\"Additional Information is not logged correctly.\");\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    TestCase.fail(\"Event not logged as specified.\");\r\n}'),(1988,'String addedInfo','java.lang.String',0,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4257,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if ((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) {\r\n            TestCase.assertTrue(((t.getTransactionType()) == code));\r\n            if (!(t.getAddedInfo().trim().contains(addedInfo.trim()))) {\r\n                TestCase.fail(\"Additional Information is not logged correctly.\");\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    TestCase.fail(\"Event not logged as specified.\");\r\n}'),(1989,'TransactionType code','edu.ncsu.csc.itrust.enums.TransactionType',490,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4258,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertNotLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertNotLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if (((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) && (t.getAddedInfo().trim().contains(addedInfo))) {\r\n            TestCase.fail(\"Event was logged, but should NOT have been logged\");\r\n            return;\r\n        }\r\n    }\r\n}'),(1990,'long loggedInMID','long',0,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4258,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertNotLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertNotLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if (((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) && (t.getAddedInfo().trim().contains(addedInfo))) {\r\n            TestCase.fail(\"Event was logged, but should NOT have been logged\");\r\n            return;\r\n        }\r\n    }\r\n}'),(1991,'long secondaryMID','long',0,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4258,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertNotLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertNotLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if (((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) && (t.getAddedInfo().trim().contains(addedInfo))) {\r\n            TestCase.fail(\"Event was logged, but should NOT have been logged\");\r\n            return;\r\n        }\r\n    }\r\n}'),(1992,'String addedInfo','java.lang.String',0,584,'edu.ncsu.csc.itrust.http.iTrustHTTPTest',4258,'edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertNotLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertNotLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if (((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) && (t.getAddedInfo().trim().contains(addedInfo))) {\r\n            TestCase.fail(\"Event was logged, but should NOT have been logged\");\r\n            return;\r\n        }\r\n    }\r\n}'),(1993,'String name','java.lang.String',0,585,'edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType',4269,'edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType.-init-(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param name\r\n * 		\r\n */\r\nprivate DemographicReportFilterType(String name) {\r\n    this.name = name;\r\n}'),(1994,'DemographicReportFilter.DemographicReportFilterType filterType','edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType',585,586,'edu.ncsu.csc.itrust.report.DemographicReportFilter',4262,'edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    fDAO = factory.getFamilyDAO();\r\n}'),(1995,'String filterValue','java.lang.String',0,586,'edu.ncsu.csc.itrust.report.DemographicReportFilter',4262,'edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    fDAO = factory.getFamilyDAO();\r\n}'),(1996,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,586,'edu.ncsu.csc.itrust.report.DemographicReportFilter',4262,'edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    fDAO = factory.getFamilyDAO();\r\n}'),(1997,'String name','java.lang.String',0,586,'edu.ncsu.csc.itrust.report.DemographicReportFilter',4264,'edu.ncsu.csc.itrust.report.DemographicReportFilter.filterTypeFromString(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param name\r\n * 		\r\n * @return \r\n */\r\npublic static DemographicReportFilter.DemographicReportFilterType filterTypeFromString(String name) {\r\n    for (DemographicReportFilter.DemographicReportFilterType type : DemographicReportFilter.DemographicReportFilterType.values()) {\r\n        if (type.name().equalsIgnoreCase(name)) {\r\n            return type;\r\n        }\r\n    }\r\n    return null;\r\n}'),(1998,'List<PatientBean> patients','java.util.List',0,586,'edu.ncsu.csc.itrust.report.DemographicReportFilter',4263,'edu.ncsu.csc.itrust.report.DemographicReportFilter.filter(java.util.List)',0,'/**\r\n *\r\n */\r\n@Override\r\npublic List<PatientBean> filter(List<PatientBean> patients) {\r\n    List<PatientBean> prunedList = new ArrayList<PatientBean>();\r\n    boolean add = ((filterValue) != null) && (!(filterValue.isEmpty()));\r\n    if (add) {\r\n        for (PatientBean patient : patients) {\r\n            add = false;\r\n            switch (filterType) {\r\n                case MID :\r\n                    add = filterValue.equalsIgnoreCase(Long.toString(patient.getMID()));\r\n                    break;\r\n                case GENDER :\r\n                    add = filterValue.equalsIgnoreCase(patient.getGender().toString());\r\n                    break;\r\n                case LAST_NAME :\r\n                    add = patient.getLastName().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case FIRST_NAME :\r\n                    add = patient.getFirstName().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case CONTACT_EMAIL :\r\n                    add = patient.getEmail().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case STREET_ADDR :\r\n                    add = ((patient.getStreetAddress1().equalsIgnoreCase(filterValue)) || (patient.getStreetAddress2().equalsIgnoreCase(filterValue))) || ((((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2())).equalsIgnoreCase(filterValue));\r\n                    break;\r\n                case CITY :\r\n                    add = patient.getCity().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case STATE :\r\n                    add = patient.getState().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case ZIP :\r\n                    add = patient.getZip().contains(filterValue);\r\n                    break;\r\n                case PHONE :\r\n                    add = patient.getPhone().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case EMER_CONTACT_NAME :\r\n                    add = patient.getEmergencyName().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case EMER_CONTACT_PHONE :\r\n                    add = patient.getEmergencyPhone().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_NAME :\r\n                    add = patient.getIcName().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_ADDR :\r\n                    add = ((patient.getIcAddress1().equalsIgnoreCase(filterValue)) || (patient.getIcAddress2().equalsIgnoreCase(filterValue))) || ((((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2())).equalsIgnoreCase(filterValue));\r\n                    break;\r\n                case INSURE_CITY :\r\n                    add = patient.getIcCity().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_STATE :\r\n                    add = patient.getIcState().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_ZIP :\r\n                    add = patient.getIcZip().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_PHONE :\r\n                    add = patient.getIcPhone().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_ID :\r\n                    add = patient.getIcID().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case PARENT_FIRST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                        for (FamilyMemberBean parent : parents) {\r\n                            if (filterValue.equalsIgnoreCase(parent.getFirstName())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case PARENT_LAST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                        for (FamilyMemberBean parent : parents) {\r\n                            if (parent.getLastName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case CHILD_FIRST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                        for (FamilyMemberBean child : children) {\r\n                            if (child.getFirstName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case CHILD_LAST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                        for (FamilyMemberBean child : children) {\r\n                            if (child.getLastName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case SIBLING_FIRST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                        for (FamilyMemberBean sibling : siblings) {\r\n                            if (sibling.getFirstName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case SIBLING_LAST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                        for (FamilyMemberBean sibling : siblings) {\r\n                            if (sibling.getLastName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                    // case DOB:\r\n                    // String dates[] = filterValue.split(\"-\");\r\n                    // if (dates.length != 2)\r\n                    // break;\r\n                    // try {\r\n                    // SimpleDateFormat frmt = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n                    // Date d1 = frmt.parse(dates[0]);\r\n                    // Date d2 = frmt.parse(dates[1]);\r\n                    // add = patient.getDateOfBirth().compareTo(d1) >= 0 && patient.getDateOfBirth().compareTo(d2)\r\n                    // <= 0;\r\n                    // } catch (Exception e) {\r\n                    // break;\r\n                    // }\r\n                    // break;\r\n                case LOWER_AGE_LIMIT :\r\n                    int lalval = Integer.parseInt(filterValue);\r\n                    if (lalval < 0) {\r\n                        throw new NumberFormatException(\"Age must be GTE 0!\");\r\n                    }\r\n                    add = lalval <= (patient.getAge());\r\n                    break;\r\n                case UPPER_AGE_LIMIT :\r\n                    int ualval = Integer.parseInt(filterValue);\r\n                    if (ualval < 0) {\r\n                        throw new NumberFormatException(\"Age must be GTE 0!\");\r\n                    }\r\n                    add = ((patient.getAge()) > 0) && (ualval >= (patient.getAge()));\r\n                    break;\r\n                case DEACTIVATED :\r\n                    if (filterValue.equals(\"exclude\")) {\r\n                        add = patient.getDateOfDeactivationStr().equals(\"\");\r\n                    } else\r\n                        if (filterValue.equals(\"only\")) {\r\n                            add = !(patient.getDateOfDeactivationStr().equals(\"\"));\r\n                        } else {\r\n                            add = true;\r\n                        }\r\n\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n            if (add) {\r\n                prunedList.add(patient);\r\n            }\r\n        }\r\n    }\r\n    return prunedList;\r\n}'),(1999,'String name','java.lang.String',0,588,'edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType',4331,'edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType.-init-(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param name\r\n * 		\r\n */\r\nprivate MedicalReportFilterType(String name) {\r\n    this.name = name;\r\n}'),(2000,'MedicalReportFilter.MedicalReportFilterType filterType','edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType',588,589,'edu.ncsu.csc.itrust.report.MedicalReportFilter',4324,'edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}'),(2001,'String filterValue','java.lang.String',0,589,'edu.ncsu.csc.itrust.report.MedicalReportFilter',4324,'edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}'),(2002,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,589,'edu.ncsu.csc.itrust.report.MedicalReportFilter',4324,'edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n *\r\n *\r\n * @param filterType\r\n * 		\r\n * @param filterValue\r\n * 		\r\n */\r\npublic MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}'),(2003,'String name','java.lang.String',0,589,'edu.ncsu.csc.itrust.report.MedicalReportFilter',4326,'edu.ncsu.csc.itrust.report.MedicalReportFilter.filterTypeFromString(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param name\r\n * 		\r\n * @return \r\n */\r\npublic static MedicalReportFilter.MedicalReportFilterType filterTypeFromString(String name) {\r\n    for (MedicalReportFilter.MedicalReportFilterType type : MedicalReportFilter.MedicalReportFilterType.values()) {\r\n        if (type.name().equalsIgnoreCase(name)) {\r\n            return type;\r\n        }\r\n    }\r\n    return null;\r\n}'),(2004,'List<PatientBean> patients','java.util.List',0,589,'edu.ncsu.csc.itrust.report.MedicalReportFilter',4325,'edu.ncsu.csc.itrust.report.MedicalReportFilter.filter(java.util.List)',0,'/**\r\n *\r\n */\r\n@Override\r\npublic List<PatientBean> filter(List<PatientBean> patients) {\r\n    List<PatientBean> prunedList = new ArrayList<PatientBean>();\r\n    boolean add = ((filterValue) != null) && (!(filterValue.isEmpty()));\r\n    if (add) {\r\n        for (PatientBean patient : patients) {\r\n            add = false;\r\n            switch (filterType) {\r\n                case ALLERGY :\r\n                    try {\r\n                        List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                        for (AllergyBean allergy : allergies) {\r\n                            if (filterValue.equalsIgnoreCase(allergy.getNDCode())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case CURRENT_PRESCRIPTIONS :\r\n                    try {\r\n                        List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                        for (PrescriptionBean prescription : prescriptions) {\r\n                            if ((filterValue.equalsIgnoreCase(prescription.getMedication().getNDCode())) || (filterValue.equalsIgnoreCase(prescription.getMedication().getNDCodeFormatted()))) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case DIAGNOSIS_ICD_CODE :\r\n                    try {\r\n                        List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                        for (DiagnosisBean diagnosis : diagnoses) {\r\n                            if (filterValue.equalsIgnoreCase(diagnosis.getICDCode())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                    // case OFFICE_VISIT_DATE:\r\n                    // String dates[] = filterValue.split(\"-\");\r\n                    // if (dates.length != 2)\r\n                    // break;\r\n                    // try {\r\n                    // SimpleDateFormat frmt = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n                    // Date d1 = frmt.parse(dates[0]);\r\n                    // Date d2 = frmt.parse(dates[1]);\r\n                    // \r\n                    // List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                    // for (OfficeVisitBean visit : visits) {\r\n                    // if (d1.compareTo(visit.getVisitDate()) <= 0\r\n                    // && d2.compareTo(visit.getVisitDate()) >= 0) {\r\n                    // add = true;\r\n                    // break;\r\n                    // }\r\n                    // }\r\n                    // } catch (Exception e) {\r\n                    // break;\r\n                    // }\r\n                    // break;\r\n                case PASTCURRENT_PRESCRIPTIONS :\r\n                    try {\r\n                        List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                        for (PrescriptionBean prescription : prescriptions) {\r\n                            if ((filterValue.equalsIgnoreCase(prescription.getMedication().getNDCode())) || (filterValue.equalsIgnoreCase(prescription.getMedication().getNDCodeFormatted()))) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case PROCEDURE :\r\n                    try {\r\n                        List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                        for (ProcedureBean procedure : procedures) {\r\n                            if (filterValue.equalsIgnoreCase(procedure.getCPTCode())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case MISSING_DIAGNOSIS_ICD_CODE :\r\n                    try {\r\n                        List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                        add = true;\r\n                        for (DiagnosisBean diagnosis : diagnoses) {\r\n                            if (filterValue.equalsIgnoreCase(diagnosis.getICDCode())) {\r\n                                add = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case LOWER_OFFICE_VISIT_DATE :\r\n                    try {\r\n                        SimpleDateFormat frmt = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n                        Date d = frmt.parse(filterValue);\r\n                        List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                        for (OfficeVisitBean visit : visits) {\r\n                            if ((d.compareTo(visit.getVisitDate())) <= 0) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UPPER_OFFICE_VISIT_DATE :\r\n                    try {\r\n                        SimpleDateFormat frmt = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n                        Date d = frmt.parse(filterValue);\r\n                        List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                        for (OfficeVisitBean visit : visits) {\r\n                            if ((d.compareTo(visit.getVisitDate())) >= 0) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n            if (add)\r\n                prunedList.add(patient);\r\n\r\n        }\r\n    }\r\n    return prunedList;\r\n}'),(2005,'String name','java.lang.String',0,591,'edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType',4359,'edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType.-init-(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param name\r\n * 		\r\n */\r\nprivate PersonnelReportFilterType(String name) {\r\n    this.name = name;\r\n}'),(2006,'PersonnelReportFilter.PersonnelReportFilterType filterType','edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType',591,592,'edu.ncsu.csc.itrust.report.PersonnelReportFilter',4352,'edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n}'),(2007,'String filterValue','java.lang.String',0,592,'edu.ncsu.csc.itrust.report.PersonnelReportFilter',4352,'edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n}'),(2008,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,592,'edu.ncsu.csc.itrust.report.PersonnelReportFilter',4352,'edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)',0,'public PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n}'),(2009,'String name','java.lang.String',0,592,'edu.ncsu.csc.itrust.report.PersonnelReportFilter',4354,'edu.ncsu.csc.itrust.report.PersonnelReportFilter.filterTypeFromString(java.lang.String)',0,'/**\r\n *\r\n *\r\n * @param name\r\n * 		\r\n * @return \r\n */\r\npublic static PersonnelReportFilter.PersonnelReportFilterType filterTypeFromString(String name) {\r\n    for (PersonnelReportFilter.PersonnelReportFilterType type : PersonnelReportFilter.PersonnelReportFilterType.values()) {\r\n        if (type.name().equalsIgnoreCase(name)) {\r\n            return type;\r\n        }\r\n    }\r\n    return null;\r\n}'),(2010,'List<PatientBean> patients','java.util.List',0,592,'edu.ncsu.csc.itrust.report.PersonnelReportFilter',4353,'edu.ncsu.csc.itrust.report.PersonnelReportFilter.filter(java.util.List)',0,'/**\r\n *\r\n */\r\n@Override\r\npublic List<PatientBean> filter(List<PatientBean> patients) {\r\n    List<PatientBean> prunedList = new ArrayList<PatientBean>();\r\n    boolean add = ((filterValue) != null) && (!(filterValue.isEmpty()));\r\n    if (add) {\r\n        for (PatientBean patient : patients) {\r\n            add = false;\r\n            switch (filterType) {\r\n                case DLHCP :\r\n                    try {\r\n                        List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                        for (PersonnelBean dlhcp : dlhcps) {\r\n                            if (filterValue.equalsIgnoreCase(dlhcp.getFullName())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n            if (add)\r\n                prunedList.add(patient);\r\n\r\n        }\r\n    }\r\n    return prunedList;\r\n}'),(2011,'List<PatientBean> patients','java.util.List',0,594,'edu.ncsu.csc.itrust.report.ReportFilter',4370,'edu.ncsu.csc.itrust.report.ReportFilter.filter(java.util.List)',0,'/**\r\n *\r\n *\r\n * @param patients\r\n * 		\r\n * @return \r\n */\r\npublic abstract List<PatientBean> filter(List<PatientBean> patients);'),(2012,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,595,'edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator',4374,'edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Given a factory and patient ID, and sets up a list of all risk checkers\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating the necessary DAOs to perform the checks.\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic ChronicDiseaseMediator(DAOFactory factory, long pid) throws DBException, NoHealthRecordsException {\r\n    riskCheckers = new ArrayList<RiskChecker>();\r\n    riskCheckers.add(new HeartDiseaseRisks(factory, pid));\r\n    riskCheckers.add(new Type1DiabetesRisks(factory, pid));\r\n    riskCheckers.add(new Type2DiabetesRisks(factory, pid));\r\n}'),(2013,'long pid','long',0,595,'edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator',4374,'edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'/**\r\n * Given a factory and patient ID, and sets up a list of all risk checkers\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used in creating the necessary DAOs to perform the checks.\r\n * @param pid\r\n * 		The MID of the patient in question.\r\n * @throws DBException\r\n * 		\r\n * @throws NoHealthRecordsException\r\n * 		\r\n */\r\npublic ChronicDiseaseMediator(DAOFactory factory, long pid) throws DBException, NoHealthRecordsException {\r\n    riskCheckers = new ArrayList<RiskChecker>();\r\n    riskCheckers.add(new HeartDiseaseRisks(factory, pid));\r\n    riskCheckers.add(new Type1DiabetesRisks(factory, pid));\r\n    riskCheckers.add(new Type2DiabetesRisks(factory, pid));\r\n}'),(2014,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,597,'edu.ncsu.csc.itrust.risk.HeartDiseaseRisks',4380,'edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public HeartDiseaseRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(2015,'long patientID','long',0,597,'edu.ncsu.csc.itrust.risk.HeartDiseaseRisks',4380,'edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public HeartDiseaseRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(2016,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,599,'edu.ncsu.csc.itrust.risk.RiskChecker',4388,'edu.ncsu.csc.itrust.risk.RiskChecker.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public RiskChecker(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    this.factory = factory;\r\n    HealthRecordsDAO hrDAO = factory.getHealthRecordsDAO();\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(patientID);\r\n    if ((records.size()) > 0)\r\n        currentHealthRecord = records.get(0);\r\n    else\r\n        throw new NoHealthRecordsException();\r\n\r\n    patient = factory.getPatientDAO().getPatient(patientID);\r\n}'),(2017,'long patientID','long',0,599,'edu.ncsu.csc.itrust.risk.RiskChecker',4388,'edu.ncsu.csc.itrust.risk.RiskChecker.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public RiskChecker(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    this.factory = factory;\r\n    HealthRecordsDAO hrDAO = factory.getHealthRecordsDAO();\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(patientID);\r\n    if ((records.size()) > 0)\r\n        currentHealthRecord = records.get(0);\r\n    else\r\n        throw new NoHealthRecordsException();\r\n\r\n    patient = factory.getPatientDAO().getPatient(patientID);\r\n}'),(2018,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,600,'edu.ncsu.csc.itrust.risk.Type1DiabetesRisks',4394,'edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public Type1DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(2019,'long patientID','long',0,600,'edu.ncsu.csc.itrust.risk.Type1DiabetesRisks',4394,'edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public Type1DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(2020,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,602,'edu.ncsu.csc.itrust.risk.Type2DiabetesRisks',4403,'edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public Type2DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(2021,'long patientID','long',0,602,'edu.ncsu.csc.itrust.risk.Type2DiabetesRisks',4403,'edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public Type2DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}'),(2022,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,604,'edu.ncsu.csc.itrust.risk.factors.AgeFactor',4411,'edu.ncsu.csc.itrust.risk.factors.AgeFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,int)',0,'public AgeFactor(PatientBean patient, int age) {\r\n    this.age = age;\r\n    this.patient = patient;\r\n}'),(2023,'int age','int',0,604,'edu.ncsu.csc.itrust.risk.factors.AgeFactor',4411,'edu.ncsu.csc.itrust.risk.factors.AgeFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,int)',0,'public AgeFactor(PatientBean patient, int age) {\r\n    this.age = age;\r\n    this.patient = patient;\r\n}'),(2024,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,606,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor',4418,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double[])',0,'public ChildhoodInfectionFactor(DAOFactory factory, long mid, double... icdCodes) {\r\n    this.factory = factory;\r\n    this.patientID = mid;\r\n    this.icdCodes = icdCodes.clone();\r\n}'),(2025,'long mid','long',0,606,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor',4418,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double[])',0,'public ChildhoodInfectionFactor(DAOFactory factory, long mid, double... icdCodes) {\r\n    this.factory = factory;\r\n    this.patientID = mid;\r\n    this.icdCodes = icdCodes.clone();\r\n}'),(2026,'double... icdCodes','double[]',0,606,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor',4418,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double[])',0,'public ChildhoodInfectionFactor(DAOFactory factory, long mid, double... icdCodes) {\r\n    this.factory = factory;\r\n    this.patientID = mid;\r\n    this.icdCodes = icdCodes.clone();\r\n}'),(2027,'Date date','java.util.Date',0,607,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest',4422,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.addInfection(java.util.Date,double)',0,'private void addInfection(Date date, double icd) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits(VisitDate,PatientID, hcpid, hospitalid) VALUES(?, 2, 9000000000, 1)\");\r\n        ps.setDate(1, new java.sql.Date(date.getTime()));\r\n        ps.executeUpdate();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovdiagnosis(VisitID, ICDCode) VALUES(?,?)\");\r\n        ps.setLong(1, DBUtil.getLastInsert(conn));\r\n        ps.setDouble(2, icd);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(2028,'double icd','double',0,607,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest',4422,'edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.addInfection(java.util.Date,double)',0,'private void addInfection(Date date, double icd) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits(VisitDate,PatientID, hcpid, hospitalid) VALUES(?, 2, 9000000000, 1)\");\r\n        ps.setDate(1, new java.sql.Date(date.getTime()));\r\n        ps.executeUpdate();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovdiagnosis(VisitID, ICDCode) VALUES(?,?)\");\r\n        ps.setLong(1, DBUtil.getLastInsert(conn));\r\n        ps.setDouble(2, icd);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(2029,'HealthRecord currentHealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,608,'edu.ncsu.csc.itrust.risk.factors.CholesterolFactor',4430,'edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord)',0,'public CholesterolFactor(HealthRecord currentHealthRecord) {\r\n    this.record = currentHealthRecord;\r\n}'),(2030,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,610,'edu.ncsu.csc.itrust.risk.factors.EthnicityFactor',4439,'edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Ethnicity[])',0,'public EthnicityFactor(PatientBean patient, Ethnicity... atRisks) {\r\n    this.atRisk = atRisks.clone();\r\n    this.patient = patient;\r\n}'),(2031,'Ethnicity... atRisks','edu.ncsu.csc.itrust.enums.Ethnicity[]',0,610,'edu.ncsu.csc.itrust.risk.factors.EthnicityFactor',4439,'edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Ethnicity[])',0,'public EthnicityFactor(PatientBean patient, Ethnicity... atRisks) {\r\n    this.atRisk = atRisks.clone();\r\n    this.patient = patient;\r\n}'),(2032,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,612,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor',4448,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.icdLower = icdLower;\r\n    this.icdUpper = icdUpper;\r\n}'),(2033,'long patientID','long',0,612,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor',4448,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.icdLower = icdLower;\r\n    this.icdUpper = icdUpper;\r\n}'),(2034,'double icdLower','double',0,612,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor',4448,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.icdLower = icdLower;\r\n    this.icdUpper = icdUpper;\r\n}'),(2035,'double icdUpper','double',0,612,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor',4448,'edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.icdLower = icdLower;\r\n    this.icdUpper = icdUpper;\r\n}'),(2036,'PatientBean patient','edu.ncsu.csc.itrust.beans.PatientBean',266,614,'edu.ncsu.csc.itrust.risk.factors.GenderFactor',4457,'edu.ncsu.csc.itrust.risk.factors.GenderFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Gender)',0,'public GenderFactor(PatientBean patient, Gender gender) {\r\n    this.patient = patient;\r\n    this.gender = gender;\r\n}'),(2037,'Gender gender','edu.ncsu.csc.itrust.enums.Gender',483,614,'edu.ncsu.csc.itrust.risk.factors.GenderFactor',4457,'edu.ncsu.csc.itrust.risk.factors.GenderFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Gender)',0,'public GenderFactor(PatientBean patient, Gender gender) {\r\n    this.patient = patient;\r\n    this.gender = gender;\r\n}'),(2038,'HealthRecord currentHealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,616,'edu.ncsu.csc.itrust.risk.factors.HypertensionFactor',4464,'edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord)',0,'public HypertensionFactor(HealthRecord currentHealthRecord) {\r\n    this.record = currentHealthRecord;\r\n}'),(2039,'Date date','java.util.Date',0,619,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest',4477,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.addInfection(java.util.Date,double)',0,'private void addInfection(Date date, double icd) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits(VisitDate, hcpid, PatientID, hospitalid) VALUES(?,9000000000, 2, 1)\");\r\n        ps.setDate(1, new java.sql.Date(date.getTime()));\r\n        ps.executeUpdate();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovdiagnosis(VisitID, ICDCode) VALUES(?,?)\");\r\n        ps.setLong(1, DBUtil.getLastInsert(conn));\r\n        ps.setDouble(2, icd);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(2040,'double icd','double',0,619,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest',4477,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.addInfection(java.util.Date,double)',0,'private void addInfection(Date date, double icd) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits(VisitDate, hcpid, PatientID, hospitalid) VALUES(?,9000000000, 2, 1)\");\r\n        ps.setDate(1, new java.sql.Date(date.getTime()));\r\n        ps.executeUpdate();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovdiagnosis(VisitID, ICDCode) VALUES(?,?)\");\r\n        ps.setLong(1, DBUtil.getLastInsert(conn));\r\n        ps.setDouble(2, icd);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}'),(2041,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,620,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor',4483,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.lowerICDCode = lowerICDCode;\r\n    this.upperICDCode = upperICDCode;\r\n}'),(2042,'long patientID','long',0,620,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor',4483,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.lowerICDCode = lowerICDCode;\r\n    this.upperICDCode = upperICDCode;\r\n}'),(2043,'double lowerICDCode','double',0,620,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor',4483,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.lowerICDCode = lowerICDCode;\r\n    this.upperICDCode = upperICDCode;\r\n}'),(2044,'double upperICDCode','double',0,620,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor',4483,'edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)',0,'public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.lowerICDCode = lowerICDCode;\r\n    this.upperICDCode = upperICDCode;\r\n}'),(2045,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,621,'edu.ncsu.csc.itrust.risk.factors.SmokingFactor',4486,'edu.ncsu.csc.itrust.risk.factors.SmokingFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public SmokingFactor(DAOFactory factory, long patientID) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n}'),(2046,'long patientID','long',0,621,'edu.ncsu.csc.itrust.risk.factors.SmokingFactor',4486,'edu.ncsu.csc.itrust.risk.factors.SmokingFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)',0,'public SmokingFactor(DAOFactory factory, long patientID) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n}'),(2047,'HealthRecord currentHealthRecord','edu.ncsu.csc.itrust.beans.HealthRecord',257,623,'edu.ncsu.csc.itrust.risk.factors.WeightFactor',4495,'edu.ncsu.csc.itrust.risk.factors.WeightFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord,int)',0,'public WeightFactor(HealthRecord currentHealthRecord, int bmiThreshold) {\r\n    this.currentHealthRecord = currentHealthRecord;\r\n    this.bmiThreshold = bmiThreshold;\r\n}'),(2048,'int bmiThreshold','int',0,623,'edu.ncsu.csc.itrust.risk.factors.WeightFactor',4495,'edu.ncsu.csc.itrust.risk.factors.WeightFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord,int)',0,'public WeightFactor(HealthRecord currentHealthRecord, int bmiThreshold) {\r\n    this.currentHealthRecord = currentHealthRecord;\r\n    this.bmiThreshold = bmiThreshold;\r\n}'),(2049,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,625,'edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet',4505,'edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'/**\r\n * doPost method that takes a user request and serves them a downloadable xml based on their defined search criteria.\r\n */\r\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) {\r\n    grga = new GroupReportGeneratorAction(factory, request);\r\n    try {\r\n        grga.generateReport();\r\n        doc = XmlGenerator.generateXml(grga.getReportHeaders(), grga.getReportData());\r\n        // Set the headers.\r\n        response.setContentType(\"application/x-download\");\r\n        response.setHeader(\"Content-Disposition\", ((\"attachment; filename=patientReport-\" + (Calendar.getInstance().getTimeInMillis())) + \".xml\"));\r\n        DOMSource source = new DOMSource(doc);\r\n        Transformer transformer = TransformerFactory.newInstance().newTransformer();\r\n        Writer writer = new OutputStreamWriter(response.getOutputStream());\r\n        StreamResult result = new StreamResult(writer);\r\n        transformer.transform(source, result);\r\n    } catch (Exception e) {\r\n        System.out.println(e);\r\n    }\r\n}'),(2050,'HttpServletResponse response','javax.servlet.http.HttpServletResponse',0,625,'edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet',4505,'edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'/**\r\n * doPost method that takes a user request and serves them a downloadable xml based on their defined search criteria.\r\n */\r\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) {\r\n    grga = new GroupReportGeneratorAction(factory, request);\r\n    try {\r\n        grga.generateReport();\r\n        doc = XmlGenerator.generateXml(grga.getReportHeaders(), grga.getReportData());\r\n        // Set the headers.\r\n        response.setContentType(\"application/x-download\");\r\n        response.setHeader(\"Content-Disposition\", ((\"attachment; filename=patientReport-\" + (Calendar.getInstance().getTimeInMillis())) + \".xml\"));\r\n        DOMSource source = new DOMSource(doc);\r\n        Transformer transformer = TransformerFactory.newInstance().newTransformer();\r\n        Writer writer = new OutputStreamWriter(response.getOutputStream());\r\n        StreamResult result = new StreamResult(writer);\r\n        transformer.transform(source, result);\r\n    } catch (Exception e) {\r\n        System.out.println(e);\r\n    }\r\n}'),(2051,'DAOFactory factory','edu.ncsu.csc.itrust.dao.DAOFactory',336,626,'edu.ncsu.csc.itrust.server.SessionTimeoutListener',4507,'edu.ncsu.csc.itrust.server.SessionTimeoutListener.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)',0,'/**\r\n * The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified\r\n * timeout limit.\r\n *\r\n * @param factory\r\n * 		The DAOFactory to be used.\r\n */\r\npublic SessionTimeoutListener(DAOFactory factory) {\r\n    this.factory = factory;\r\n}'),(2052,'HttpSessionEvent arg0','javax.servlet.http.HttpSessionEvent',0,626,'edu.ncsu.csc.itrust.server.SessionTimeoutListener',4508,'edu.ncsu.csc.itrust.server.SessionTimeoutListener.sessionCreated(javax.servlet.http.HttpSessionEvent)',0,'/**\r\n * Called when the HttpSession is created, this method pulls the pre-specified limit from the\r\n * database and sets it as a property of the HttpSession.\r\n *\r\n * @param arg0\r\n * 		The HttpSessionEven which just occurred.\r\n */\r\npublic void sessionCreated(HttpSessionEvent arg0) {\r\n    HttpSession session = arg0.getSession();\r\n    int mins = 20;\r\n    try {\r\n        mins = factory.getAccessDAO().getSessionTimeoutMins();\r\n    } catch (DBException e) {\r\n        System.err.println(\"Unable to set session timeout, defaulting to 20 minutes\");\r\n        e.printStackTrace();\r\n    }\r\n    if (mins < 1)\r\n        mins = 1;\r\n\r\n    session.setMaxInactiveInterval((mins * 60));\r\n}'),(2053,'HttpSessionEvent arg0','javax.servlet.http.HttpSessionEvent',0,626,'edu.ncsu.csc.itrust.server.SessionTimeoutListener',4509,'edu.ncsu.csc.itrust.server.SessionTimeoutListener.sessionDestroyed(javax.servlet.http.HttpSessionEvent)',0,'/**\r\n * Must be declared for compliance with the interface. Not implemented.\r\n */\r\npublic void sessionDestroyed(HttpSessionEvent arg0) {\r\n    // nothing to do here\r\n}'),(2054,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,627,'edu.ncsu.csc.itrust.server.WardCRUDServlet',4512,'edu.ncsu.csc.itrust.server.WardCRUDServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardBean ward = new WardBean(0, request.getParameter(\"requiredSpecialty\"), Long.parseLong(request.getParameter(\"inHospital\")));\r\n        wardDAO.addWard(ward);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2055,'HttpServletResponse response','javax.servlet.http.HttpServletResponse',0,627,'edu.ncsu.csc.itrust.server.WardCRUDServlet',4512,'edu.ncsu.csc.itrust.server.WardCRUDServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardBean ward = new WardBean(0, request.getParameter(\"requiredSpecialty\"), Long.parseLong(request.getParameter(\"inHospital\")));\r\n        wardDAO.addWard(ward);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2056,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,627,'edu.ncsu.csc.itrust.server.WardCRUDServlet',4513,'edu.ncsu.csc.itrust.server.WardCRUDServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardBean ward = new WardBean(Long.parseLong(request.getParameter(\"wardID\")), request.getParameter(\"requiredSpecialty\"), Long.parseLong(request.getParameter(\"inHospital\")));\r\n        wardDAO.updateWard(ward);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2057,'HttpServletResponse response','javax.servlet.http.HttpServletResponse',0,627,'edu.ncsu.csc.itrust.server.WardCRUDServlet',4513,'edu.ncsu.csc.itrust.server.WardCRUDServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardBean ward = new WardBean(Long.parseLong(request.getParameter(\"wardID\")), request.getParameter(\"requiredSpecialty\"), Long.parseLong(request.getParameter(\"inHospital\")));\r\n        wardDAO.updateWard(ward);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2058,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,627,'edu.ncsu.csc.itrust.server.WardCRUDServlet',4511,'edu.ncsu.csc.itrust.server.WardCRUDServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        wardDAO.removeWard(Long.parseLong(request.getParameter(\"wardID\")));\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2059,'HttpServletResponse response','javax.servlet.http.HttpServletResponse',0,627,'edu.ncsu.csc.itrust.server.WardCRUDServlet',4511,'edu.ncsu.csc.itrust.server.WardCRUDServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        wardDAO.removeWard(Long.parseLong(request.getParameter(\"wardID\")));\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2060,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,628,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet',4516,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardRoomBean wardRoom = new WardRoomBean(0, 0, Long.parseLong(request.getParameter(\"inWard\")), request.getParameter(\"roomName\"), request.getParameter(\"status\"));\r\n        wardDAO.addWardRoom(wardRoom);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2061,'HttpServletResponse response','javax.servlet.http.HttpServletResponse',0,628,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet',4516,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardRoomBean wardRoom = new WardRoomBean(0, 0, Long.parseLong(request.getParameter(\"inWard\")), request.getParameter(\"roomName\"), request.getParameter(\"status\"));\r\n        wardDAO.addWardRoom(wardRoom);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2062,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,628,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet',4517,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardRoomBean wardRoom = new WardRoomBean(0, Long.parseLong(request.getParameter(\"occupiedBy\")), Long.parseLong(request.getParameter(\"inWard\")), request.getParameter(\"roomName\"), request.getParameter(\"status\"));\r\n        wardDAO.updateWardRoom(wardRoom);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2063,'HttpServletResponse response','javax.servlet.http.HttpServletResponse',0,628,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet',4517,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardRoomBean wardRoom = new WardRoomBean(0, Long.parseLong(request.getParameter(\"occupiedBy\")), Long.parseLong(request.getParameter(\"inWard\")), request.getParameter(\"roomName\"), request.getParameter(\"status\"));\r\n        wardDAO.updateWardRoom(wardRoom);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2064,'HttpServletRequest request','javax.servlet.http.HttpServletRequest',0,628,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet',4515,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        wardDAO.removeWardRoom(Long.parseLong(request.getParameter(\"roomID\")));\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2065,'HttpServletResponse response','javax.servlet.http.HttpServletResponse',0,628,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet',4515,'edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        wardDAO.removeWardRoom(Long.parseLong(request.getParameter(\"roomID\")));\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}'),(2066,'HttpServletRequest req','javax.servlet.http.HttpServletRequest',0,630,'edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet',4530,'edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) {\r\n    super.doPost(req, resp);\r\n}'),(2067,'HttpServletResponse resp','javax.servlet.http.HttpServletResponse',0,630,'edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet',4530,'edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) {\r\n    super.doPost(req, resp);\r\n}'),(2068,'int arg0','int',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4549,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.setMaxInactiveInterval(int)',0,'public void setMaxInactiveInterval(int arg0) {\r\n    MockHttpSession.mins = arg0;\r\n}'),(2069,'String arg0','java.lang.String',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4533,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.getAttribute(java.lang.String)',0,'public Object getAttribute(String arg0) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}'),(2070,'String arg0','java.lang.String',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4541,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.getValue(java.lang.String)',0,'public Object getValue(String arg0) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}'),(2071,'String arg0','java.lang.String',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4545,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.putValue(java.lang.String,java.lang.Object)',0,'public void putValue(String arg0, Object arg1) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}'),(2072,'Object arg1','java.lang.Object',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4545,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.putValue(java.lang.String,java.lang.Object)',0,'public void putValue(String arg0, Object arg1) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}'),(2073,'String arg0','java.lang.String',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4546,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.removeAttribute(java.lang.String)',0,'public void removeAttribute(String arg0) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}'),(2074,'String arg0','java.lang.String',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4547,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.removeValue(java.lang.String)',0,'public void removeValue(String arg0) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}'),(2075,'String arg0','java.lang.String',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4548,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.setAttribute(java.lang.String,java.lang.Object)',0,'public void setAttribute(String arg0, Object arg1) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}'),(2076,'Object arg1','java.lang.Object',0,632,'edu.ncsu.csc.itrust.serverutils.MockHttpSession',4548,'edu.ncsu.csc.itrust.serverutils.MockHttpSession.setAttribute(java.lang.String,java.lang.Object)',0,'public void setAttribute(String arg0, Object arg1) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}'),(2077,'HttpServletRequest req','javax.servlet.http.HttpServletRequest',0,636,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet',4570,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPost(req, resp);\r\n}'),(2078,'HttpServletResponse resp','javax.servlet.http.HttpServletResponse',0,636,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet',4570,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPost(req, resp);\r\n}'),(2079,'HttpServletRequest req','javax.servlet.http.HttpServletRequest',0,636,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet',4571,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPut(req, resp);\r\n}'),(2080,'HttpServletResponse resp','javax.servlet.http.HttpServletResponse',0,636,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet',4571,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPut(req, resp);\r\n}'),(2081,'HttpServletRequest req','javax.servlet.http.HttpServletRequest',0,636,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet',4569,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doDelete(req, resp);\r\n}'),(2082,'HttpServletResponse resp','javax.servlet.http.HttpServletResponse',0,636,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet',4569,'edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doDelete(req, resp);\r\n}'),(2083,'HttpServletRequest req','javax.servlet.http.HttpServletRequest',0,638,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet',4583,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPost(req, resp);\r\n}'),(2084,'HttpServletResponse resp','javax.servlet.http.HttpServletResponse',0,638,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet',4583,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPost(req, resp);\r\n}'),(2085,'HttpServletRequest req','javax.servlet.http.HttpServletRequest',0,638,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet',4584,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPut(req, resp);\r\n}'),(2086,'HttpServletResponse resp','javax.servlet.http.HttpServletResponse',0,638,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet',4584,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPut(req, resp);\r\n}'),(2087,'HttpServletRequest req','javax.servlet.http.HttpServletRequest',0,638,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet',4582,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doDelete(req, resp);\r\n}'),(2088,'HttpServletResponse resp','javax.servlet.http.HttpServletResponse',0,638,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet',4582,'edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)',0,'@Override\r\nprotected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doDelete(req, resp);\r\n}'),(2089,'PageContext pageContext','javax.servlet.jsp.PageContext',0,640,'edu.ncsu.csc.itrust.tags.ICD9CMLink',4594,'edu.ncsu.csc.itrust.tags.ICD9CMLink.setPageContext(javax.servlet.jsp.PageContext)',0,'public void setPageContext(PageContext pageContext) {\r\n    this.pageContext = pageContext;\r\n}'),(2090,'Tag parent','javax.servlet.jsp.tagext.Tag',0,640,'edu.ncsu.csc.itrust.tags.ICD9CMLink',4595,'edu.ncsu.csc.itrust.tags.ICD9CMLink.setParent(javax.servlet.jsp.tagext.Tag)',0,'public void setParent(Tag parent) {\r\n    this.parent = parent;\r\n}'),(2091,'String code','java.lang.String',0,640,'edu.ncsu.csc.itrust.tags.ICD9CMLink',4593,'edu.ncsu.csc.itrust.tags.ICD9CMLink.setCode(java.lang.String)',0,'public void setCode(String code) {\r\n    this.code = code;\r\n}'),(2092,'double code','double',0,640,'edu.ncsu.csc.itrust.tags.ICD9CMLink',4592,'edu.ncsu.csc.itrust.tags.ICD9CMLink.setCode(double)',0,'public void setCode(double code) {\r\n    this.code = String.valueOf(code);\r\n}'),(2093,'PageContext pageContext','javax.servlet.jsp.PageContext',0,641,'edu.ncsu.csc.itrust.tags.PatientNavigation',4602,'edu.ncsu.csc.itrust.tags.PatientNavigation.setPageContext(javax.servlet.jsp.PageContext)',0,'public void setPageContext(PageContext pageContext) {\r\n    this.pageContext = pageContext;\r\n}'),(2094,'Tag parent','javax.servlet.jsp.tagext.Tag',0,641,'edu.ncsu.csc.itrust.tags.PatientNavigation',4603,'edu.ncsu.csc.itrust.tags.PatientNavigation.setParent(javax.servlet.jsp.tagext.Tag)',0,'public void setParent(Tag parent) {\r\n    this.parent = parent;\r\n}'),(2095,'String thisPage','java.lang.String',0,641,'edu.ncsu.csc.itrust.tags.PatientNavigation',4604,'edu.ncsu.csc.itrust.tags.PatientNavigation.setThisTitle(java.lang.String)',0,'public void setThisTitle(String thisPage) {\r\n    this.thisTitle = thisPage;\r\n}'),(2096,'PageContext pageContext','javax.servlet.jsp.PageContext',0,642,'edu.ncsu.csc.itrust.tags.StateSelect',4613,'edu.ncsu.csc.itrust.tags.StateSelect.setPageContext(javax.servlet.jsp.PageContext)',0,'public void setPageContext(PageContext pageContext) {\r\n    this.pageContext = pageContext;\r\n}'),(2097,'Tag parent','javax.servlet.jsp.tagext.Tag',0,642,'edu.ncsu.csc.itrust.tags.StateSelect',4614,'edu.ncsu.csc.itrust.tags.StateSelect.setParent(javax.servlet.jsp.tagext.Tag)',0,'public void setParent(Tag parent) {\r\n    this.parent = parent;\r\n}'),(2098,'String name','java.lang.String',0,642,'edu.ncsu.csc.itrust.tags.StateSelect',4612,'edu.ncsu.csc.itrust.tags.StateSelect.setName(java.lang.String)',0,'public void setName(String name) {\r\n    this.name = name;\r\n}'),(2099,'String value','java.lang.String',0,642,'edu.ncsu.csc.itrust.tags.StateSelect',4615,'edu.ncsu.csc.itrust.tags.StateSelect.setValue(java.lang.String)',0,'public void setValue(String value) {\r\n    this.value = value;\r\n}'),(2100,'String str','java.lang.String',0,644,'edu.ncsu.csc.itrust.testutils.BadBean',4622,'edu.ncsu.csc.itrust.testutils.BadBean.setThing(java.lang.String)',0,'public void setThing(String str) {\r\n}'),(2101,'Integer str','java.lang.Integer',0,644,'edu.ncsu.csc.itrust.testutils.BadBean',4621,'edu.ncsu.csc.itrust.testutils.BadBean.setThing(java.lang.Integer)',0,'public void setThing(Integer str) {\r\n}'),(2102,'int numCorrect','int',0,645,'edu.ncsu.csc.itrust.testutils.EvilDAOFactory',4624,'edu.ncsu.csc.itrust.testutils.EvilDAOFactory.-init-(int)',0,'// Heres how this behavior works: you can set EvilDAOFactory to count down to 0, giving correct\r\n// connections the whole way. Then, when you want it to, it starts throwing exceptions\r\npublic EvilDAOFactory(int numCorrect) {\r\n    this.driver = TestDAOFactory.getTestInstance();\r\n    this.numCorrect = numCorrect;\r\n}'),(2103,'TransactionType transType','edu.ncsu.csc.itrust.enums.TransactionType',490,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4630,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionOnly(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertTransactionOnly(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TestCase.assertEquals(\"Only one transaction should have been logged\", 1, transList.size());\r\n    JUnitiTrustUtils.assertTransaction(transType, loggedInMID, secondaryMID, addedInfo, transList.get(0));\r\n}'),(2104,'long loggedInMID','long',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4630,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionOnly(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertTransactionOnly(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TestCase.assertEquals(\"Only one transaction should have been logged\", 1, transList.size());\r\n    JUnitiTrustUtils.assertTransaction(transType, loggedInMID, secondaryMID, addedInfo, transList.get(0));\r\n}'),(2105,'long secondaryMID','long',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4630,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionOnly(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertTransactionOnly(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TestCase.assertEquals(\"Only one transaction should have been logged\", 1, transList.size());\r\n    JUnitiTrustUtils.assertTransaction(transType, loggedInMID, secondaryMID, addedInfo, transList.get(0));\r\n}'),(2106,'String addedInfo','java.lang.String',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4630,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionOnly(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertTransactionOnly(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TestCase.assertEquals(\"Only one transaction should have been logged\", 1, transList.size());\r\n    JUnitiTrustUtils.assertTransaction(transType, loggedInMID, secondaryMID, addedInfo, transList.get(0));\r\n}'),(2107,'TransactionType code','edu.ncsu.csc.itrust.enums.TransactionType',490,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4628,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TransactionBean lastRecordedAction = transList.get(0);\r\n    TestCase.assertTrue(((lastRecordedAction.getTransactionType()) == code));\r\n    TestCase.assertTrue(((lastRecordedAction.getLoggedInMID()) == loggedInMID));\r\n    TestCase.assertTrue(((lastRecordedAction.getSecondaryMID()) == secondaryMID));\r\n    TestCase.assertTrue(lastRecordedAction.getAddedInfo().equals(addedInfo));\r\n}'),(2108,'long loggedInMID','long',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4628,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TransactionBean lastRecordedAction = transList.get(0);\r\n    TestCase.assertTrue(((lastRecordedAction.getTransactionType()) == code));\r\n    TestCase.assertTrue(((lastRecordedAction.getLoggedInMID()) == loggedInMID));\r\n    TestCase.assertTrue(((lastRecordedAction.getSecondaryMID()) == secondaryMID));\r\n    TestCase.assertTrue(lastRecordedAction.getAddedInfo().equals(addedInfo));\r\n}'),(2109,'long secondaryMID','long',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4628,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TransactionBean lastRecordedAction = transList.get(0);\r\n    TestCase.assertTrue(((lastRecordedAction.getTransactionType()) == code));\r\n    TestCase.assertTrue(((lastRecordedAction.getLoggedInMID()) == loggedInMID));\r\n    TestCase.assertTrue(((lastRecordedAction.getSecondaryMID()) == secondaryMID));\r\n    TestCase.assertTrue(lastRecordedAction.getAddedInfo().equals(addedInfo));\r\n}'),(2110,'String addedInfo','java.lang.String',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4628,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)',0,'public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TransactionBean lastRecordedAction = transList.get(0);\r\n    TestCase.assertTrue(((lastRecordedAction.getTransactionType()) == code));\r\n    TestCase.assertTrue(((lastRecordedAction.getLoggedInMID()) == loggedInMID));\r\n    TestCase.assertTrue(((lastRecordedAction.getSecondaryMID()) == secondaryMID));\r\n    TestCase.assertTrue(lastRecordedAction.getAddedInfo().equals(addedInfo));\r\n}'),(2111,'TransactionType transType','edu.ncsu.csc.itrust.enums.TransactionType',490,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4629,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    TestCase.assertEquals(transType, trans.getTransactionType());\r\n    TestCase.assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    TestCase.assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    TestCase.assertEquals(addedInfo, trans.getAddedInfo());\r\n}'),(2112,'long loggedInMID','long',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4629,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    TestCase.assertEquals(transType, trans.getTransactionType());\r\n    TestCase.assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    TestCase.assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    TestCase.assertEquals(addedInfo, trans.getAddedInfo());\r\n}'),(2113,'long secondaryMID','long',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4629,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    TestCase.assertEquals(transType, trans.getTransactionType());\r\n    TestCase.assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    TestCase.assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    TestCase.assertEquals(addedInfo, trans.getAddedInfo());\r\n}'),(2114,'String addedInfo','java.lang.String',0,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4629,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    TestCase.assertEquals(transType, trans.getTransactionType());\r\n    TestCase.assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    TestCase.assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    TestCase.assertEquals(addedInfo, trans.getAddedInfo());\r\n}'),(2115,'TransactionBean trans','edu.ncsu.csc.itrust.beans.TransactionBean',281,646,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils',4629,'edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)',0,'private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    TestCase.assertEquals(transType, trans.getTransactionType());\r\n    TestCase.assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    TestCase.assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    TestCase.assertEquals(addedInfo, trans.getAddedInfo());\r\n}'),(2116,'String thing','java.lang.String',0,647,'edu.ncsu.csc.itrust.testutils.OkayBean',4638,'edu.ncsu.csc.itrust.testutils.OkayBean.setThing(java.lang.String)',0,'public void setThing(String thing) {\r\n    this.thing = thing;\r\n}'),(2117,'Object obj','java.lang.Object',0,647,'edu.ncsu.csc.itrust.testutils.OkayBean',4635,'edu.ncsu.csc.itrust.testutils.OkayBean.equals(java.lang.Object)',0,'@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((OkayBean) (obj))));\r\n}'),(2118,'OkayBean other','edu.ncsu.csc.itrust.testutils.OkayBean',647,647,'edu.ncsu.csc.itrust.testutils.OkayBean',4634,'edu.ncsu.csc.itrust.testutils.OkayBean.equals(edu.ncsu.csc.itrust.testutils.OkayBean)',0,'private boolean equals(OkayBean other) {\r\n    return true;\r\n}'),(2119,'String fileName','java.lang.String',0,648,'edu.ncsu.csc.itrust.testutils.SQLFileCache',4641,'edu.ncsu.csc.itrust.testutils.SQLFileCache.getQueries(java.lang.String)',0,'public List<String> getQueries(String fileName) throws FileNotFoundException, IOException {\r\n    List<String> queries = cache.get(fileName);\r\n    if (queries != null)\r\n        return queries;\r\n    else\r\n        return parseAndCache(fileName);\r\n\r\n}'),(2120,'String fileName','java.lang.String',0,648,'edu.ncsu.csc.itrust.testutils.SQLFileCache',4642,'edu.ncsu.csc.itrust.testutils.SQLFileCache.parseAndCache(java.lang.String)',0,'private List<String> parseAndCache(String fileName) throws FileNotFoundException, IOException {\r\n    List<String> queries = parseSQLFile(fileName);\r\n    cache.put(fileName, queries);\r\n    return queries;\r\n}'),(2121,'String filepath','java.lang.String',0,648,'edu.ncsu.csc.itrust.testutils.SQLFileCache',4643,'edu.ncsu.csc.itrust.testutils.SQLFileCache.parseSQLFile(java.lang.String)',0,'private List<String> parseSQLFile(String filepath) throws FileNotFoundException, IOException {\r\n    List<String> queries = new ArrayList<String>();\r\n    BufferedReader reader = new BufferedReader(new FileReader(new File(filepath)));\r\n    String line = \"\";\r\n    String currentQuery = \"\";\r\n    while ((line = reader.readLine()) != null) {\r\n        for (int i = 0; i < (line.length()); i++) {\r\n            if ((line.charAt(i)) == ;) {\r\n                queries.add(currentQuery);\r\n                currentQuery = \"\";\r\n            } else\r\n                currentQuery += line.charAt(i);\r\n\r\n        }\r\n    } \r\n    reader.close();\r\n    return queries;\r\n}'),(2122,'Document document','org.w3c.dom.Document',0,650,'edu.ncsu.csc.itrust.testutils.TestDAOFactory',4646,'edu.ncsu.csc.itrust.testutils.TestDAOFactory.getAttribute(org.w3c.dom.Document,java.lang.String)',0,'private String getAttribute(Document document, String attribute) throws XPathExpressionException {\r\n    return ((String) (XPathFactory.newInstance().newXPath().compile((\"/Context/Resource/\" + attribute)).evaluate(document.getDocumentElement(), XPathConstants.STRING)));\r\n}'),(2123,'String attribute','java.lang.String',0,650,'edu.ncsu.csc.itrust.testutils.TestDAOFactory',4646,'edu.ncsu.csc.itrust.testutils.TestDAOFactory.getAttribute(org.w3c.dom.Document,java.lang.String)',0,'private String getAttribute(Document document, String attribute) throws XPathExpressionException {\r\n    return ((String) (XPathFactory.newInstance().newXPath().compile((\"/Context/Resource/\" + attribute)).evaluate(document.getDocumentElement(), XPathConstants.STRING)));\r\n}'),(2124,'BufferedReader reader','java.io.BufferedReader',0,650,'edu.ncsu.csc.itrust.testutils.TestDAOFactory',4649,'edu.ncsu.csc.itrust.testutils.TestDAOFactory.parseXML(java.io.BufferedReader)',0,'private Document parseXML(BufferedReader reader) throws Exception {\r\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n    factory.setValidating(false);\r\n    DocumentBuilder builder = factory.newDocumentBuilder();\r\n    return builder.parse(new InputSource(reader));\r\n}'),(2125,'String name','java.lang.String',0,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, Long value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(2126,'Long value','java.lang.Long',0,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, Long value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(2127,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, Long value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(2128,'boolean isNullable','boolean',0,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, Long value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(2129,'String name','java.lang.String',0,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4652,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(2130,'String value','java.lang.String',0,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4652,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(2131,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4652,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(2132,'boolean isNullable','boolean',0,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4652,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'@Override\r\npublic String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}'),(2133,'TestBean bean','edu.ncsu.csc.itrust.testutils.TestBean',649,651,'edu.ncsu.csc.itrust.testutils.ValidatorProxy',4653,'edu.ncsu.csc.itrust.testutils.ValidatorProxy.validate(edu.ncsu.csc.itrust.testutils.TestBean)',0,'@Override\r\npublic void validate(TestBean bean) throws FormValidationException {\r\n    throw new IllegalStateException(\"Mock object acts as a proxy to protected BeanValidator classes. Do not call this method\");\r\n}'),(2134,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,652,'edu.ncsu.csc.itrust.validate.AddPatientValidator',4655,'edu.ncsu.csc.itrust.validate.AddPatientValidator.validate(edu.ncsu.csc.itrust.beans.PatientBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PatientBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2135,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,653,'edu.ncsu.csc.itrust.validate.AddPersonnelValidator',4657,'edu.ncsu.csc.itrust.validate.AddPersonnelValidator.validate(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PersonnelBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2136,'AdverseEventBean b','edu.ncsu.csc.itrust.beans.AdverseEventBean',243,654,'edu.ncsu.csc.itrust.validate.AdverseEventValidator',4659,'edu.ncsu.csc.itrust.validate.AdverseEventValidator.validate(edu.ncsu.csc.itrust.beans.AdverseEventBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param d\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(AdverseEventBean b) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"comment\", b.getDescription(), ValidationFormat.ADVERSE_EVENT_COMMENTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2137,'AllergyBean m','edu.ncsu.csc.itrust.beans.AllergyBean',244,655,'edu.ncsu.csc.itrust.validate.AllergyBeanValidator',4661,'edu.ncsu.csc.itrust.validate.AllergyBeanValidator.validate(edu.ncsu.csc.itrust.beans.AllergyBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(AllergyBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Allergy Description\", m.getDescription(), ValidationFormat.ALLERGY_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2138,'ApptBean bean','edu.ncsu.csc.itrust.beans.ApptBean',245,656,'edu.ncsu.csc.itrust.validate.ApptBeanValidator',4663,'edu.ncsu.csc.itrust.validate.ApptBeanValidator.validate(edu.ncsu.csc.itrust.beans.ApptBean)',0,'@Override\r\npublic void validate(ApptBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((bean.getComment()) == null)\r\n        return;\r\n\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Comment\", bean.getComment(), ValidationFormat.APPT_COMMENT, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2139,'ApptTypeBean a','edu.ncsu.csc.itrust.beans.ApptTypeBean',247,657,'edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator',4665,'edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator.validate(edu.ncsu.csc.itrust.beans.ApptTypeBean)',0,'@Override\r\npublic void validate(ApptTypeBean a) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Type Name\", a.getName(), ValidationFormat.APPT_TYPE_NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Type Duration\", ((a.getDuration()) + \"\"), ValidationFormat.APPT_TYPE_DURATION, false));\r\n    if ((a.getDuration()) <= 0) {\r\n        errorList.addIfNotNull(\"Appointment duration must be greater than zero.\");\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2140,'T bean','T',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4675,'edu.ncsu.csc.itrust.validate.BeanValidator.validate(java.lang.Object)',0,'public abstract void validate(T bean) throws FormValidationException;'),(2141,'String name','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4671,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if the string is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String errorMessage = (name + \": \") + (format.getDescription());\r\n    if ((value == null) || (\"\".equals(value)))\r\n        return isNullable ? \"\" : errorMessage;\r\n    else\r\n        if (format.getRegex().matcher(value).matches())\r\n            return \"\";\r\n        else\r\n            return errorMessage;\r\n\r\n\r\n}'),(2142,'String value','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4671,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if the string is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String errorMessage = (name + \": \") + (format.getDescription());\r\n    if ((value == null) || (\"\".equals(value)))\r\n        return isNullable ? \"\" : errorMessage;\r\n    else\r\n        if (format.getRegex().matcher(value).matches())\r\n            return \"\";\r\n        else\r\n            return errorMessage;\r\n\r\n\r\n}'),(2143,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4671,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if the string is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String errorMessage = (name + \": \") + (format.getDescription());\r\n    if ((value == null) || (\"\".equals(value)))\r\n        return isNullable ? \"\" : errorMessage;\r\n    else\r\n        if (format.getRegex().matcher(value).matches())\r\n            return \"\";\r\n        else\r\n            return errorMessage;\r\n\r\n\r\n}'),(2144,'boolean isNullable','boolean',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4671,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if the string is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String errorMessage = (name + \": \") + (format.getDescription());\r\n    if ((value == null) || (\"\".equals(value)))\r\n        return isNullable ? \"\" : errorMessage;\r\n    else\r\n        if (format.getRegex().matcher(value).matches())\r\n            return \"\";\r\n        else\r\n            return errorMessage;\r\n\r\n\r\n}'),(2145,'String name','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4670,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check a long value against a particular format. isNullable will check if it is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param longValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (longValue != null)\r\n        str = String.valueOf(longValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2146,'Long longValue','java.lang.Long',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4670,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check a long value against a particular format. isNullable will check if it is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param longValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (longValue != null)\r\n        str = String.valueOf(longValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2147,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4670,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check a long value against a particular format. isNullable will check if it is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param longValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (longValue != null)\r\n        str = String.valueOf(longValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2148,'boolean isNullable','boolean',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4670,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check a long value against a particular format. isNullable will check if it is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param longValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (longValue != null)\r\n        str = String.valueOf(longValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2149,'String name','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4669,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Double,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an\r\n * error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param doubleValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (doubleValue != null)\r\n        str = String.valueOf(doubleValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2150,'Double doubleValue','java.lang.Double',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4669,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Double,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an\r\n * error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param doubleValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (doubleValue != null)\r\n        str = String.valueOf(doubleValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2151,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4669,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Double,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an\r\n * error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param doubleValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (doubleValue != null)\r\n        str = String.valueOf(doubleValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2152,'boolean isNullable','boolean',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4669,'edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Double,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an\r\n * error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * 		\r\n * @param doubleValue\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (doubleValue != null)\r\n        str = String.valueOf(doubleValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2153,'String name','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4672,'edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * 		\r\n * @param gen\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2154,'Gender gen','edu.ncsu.csc.itrust.enums.Gender',483,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4672,'edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * 		\r\n * @param gen\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2155,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4672,'edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * 		\r\n * @param gen\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2156,'boolean isNullable','boolean',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4672,'edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * 		\r\n * @param gen\r\n * 		\r\n * @param format\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}'),(2157,'String name','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4673,'edu.ncsu.csc.itrust.validate.BeanValidator.checkInt(java.lang.String,java.lang.String,int,int,boolean)',0,'/**\r\n * The that an integer is the proper format, and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkInt(String name, String value, int lower, int upper, boolean isNullable) {\r\n    if (isNullable && ((value == null) || (\"\".equals(value))))\r\n        return \"\";\r\n\r\n    try {\r\n        int intValue = Integer.valueOf(value);\r\n        if ((lower <= intValue) && (intValue <= upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be an integer in [\") + lower) + \",\") + upper) + \"]\";\r\n}'),(2158,'String value','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4673,'edu.ncsu.csc.itrust.validate.BeanValidator.checkInt(java.lang.String,java.lang.String,int,int,boolean)',0,'/**\r\n * The that an integer is the proper format, and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkInt(String name, String value, int lower, int upper, boolean isNullable) {\r\n    if (isNullable && ((value == null) || (\"\".equals(value))))\r\n        return \"\";\r\n\r\n    try {\r\n        int intValue = Integer.valueOf(value);\r\n        if ((lower <= intValue) && (intValue <= upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be an integer in [\") + lower) + \",\") + upper) + \"]\";\r\n}'),(2159,'int lower','int',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4673,'edu.ncsu.csc.itrust.validate.BeanValidator.checkInt(java.lang.String,java.lang.String,int,int,boolean)',0,'/**\r\n * The that an integer is the proper format, and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkInt(String name, String value, int lower, int upper, boolean isNullable) {\r\n    if (isNullable && ((value == null) || (\"\".equals(value))))\r\n        return \"\";\r\n\r\n    try {\r\n        int intValue = Integer.valueOf(value);\r\n        if ((lower <= intValue) && (intValue <= upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be an integer in [\") + lower) + \",\") + upper) + \"]\";\r\n}'),(2160,'int upper','int',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4673,'edu.ncsu.csc.itrust.validate.BeanValidator.checkInt(java.lang.String,java.lang.String,int,int,boolean)',0,'/**\r\n * The that an integer is the proper format, and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkInt(String name, String value, int lower, int upper, boolean isNullable) {\r\n    if (isNullable && ((value == null) || (\"\".equals(value))))\r\n        return \"\";\r\n\r\n    try {\r\n        int intValue = Integer.valueOf(value);\r\n        if ((lower <= intValue) && (intValue <= upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be an integer in [\") + lower) + \",\") + upper) + \"]\";\r\n}'),(2161,'boolean isNullable','boolean',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4673,'edu.ncsu.csc.itrust.validate.BeanValidator.checkInt(java.lang.String,java.lang.String,int,int,boolean)',0,'/**\r\n * The that an integer is the proper format, and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @param isNullable\r\n * 		\r\n * @return \r\n */\r\nprotected String checkInt(String name, String value, int lower, int upper, boolean isNullable) {\r\n    if (isNullable && ((value == null) || (\"\".equals(value))))\r\n        return \"\";\r\n\r\n    try {\r\n        int intValue = Integer.valueOf(value);\r\n        if ((lower <= intValue) && (intValue <= upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be an integer in [\") + lower) + \",\") + upper) + \"]\";\r\n}'),(2162,'String name','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4668,'edu.ncsu.csc.itrust.validate.BeanValidator.checkDouble(java.lang.String,java.lang.String,double,double)',0,'/**\r\n * Check that a double is in the proper format and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @return \r\n */\r\nprotected String checkDouble(String name, String value, double lower, double upper) {\r\n    try {\r\n        double doubleValue = Double.valueOf(value);\r\n        if ((lower <= doubleValue) && (doubleValue < upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be a decimal in [\") + lower) + \",\") + upper) + \")\";\r\n}'),(2163,'String value','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4668,'edu.ncsu.csc.itrust.validate.BeanValidator.checkDouble(java.lang.String,java.lang.String,double,double)',0,'/**\r\n * Check that a double is in the proper format and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @return \r\n */\r\nprotected String checkDouble(String name, String value, double lower, double upper) {\r\n    try {\r\n        double doubleValue = Double.valueOf(value);\r\n        if ((lower <= doubleValue) && (doubleValue < upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be a decimal in [\") + lower) + \",\") + upper) + \")\";\r\n}'),(2164,'double lower','double',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4668,'edu.ncsu.csc.itrust.validate.BeanValidator.checkDouble(java.lang.String,java.lang.String,double,double)',0,'/**\r\n * Check that a double is in the proper format and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @return \r\n */\r\nprotected String checkDouble(String name, String value, double lower, double upper) {\r\n    try {\r\n        double doubleValue = Double.valueOf(value);\r\n        if ((lower <= doubleValue) && (doubleValue < upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be a decimal in [\") + lower) + \",\") + upper) + \")\";\r\n}'),(2165,'double upper','double',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4668,'edu.ncsu.csc.itrust.validate.BeanValidator.checkDouble(java.lang.String,java.lang.String,double,double)',0,'/**\r\n * Check that a double is in the proper format and is in the correct range\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @param lower\r\n * 		\r\n * @param upper\r\n * 		\r\n * @return \r\n */\r\nprotected String checkDouble(String name, String value, double lower, double upper) {\r\n    try {\r\n        double doubleValue = Double.valueOf(value);\r\n        if ((lower <= doubleValue) && (doubleValue < upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be a decimal in [\") + lower) + \",\") + upper) + \")\";\r\n}'),(2166,'String name','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4667,'edu.ncsu.csc.itrust.validate.BeanValidator.checkBoolean(java.lang.String,java.lang.String)',0,'/**\r\n * Check that the value fits the \"true\" or \"false\"\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @return \r\n */\r\nprotected String checkBoolean(String name, String value) {\r\n    if ((\"true\".equals(value)) || (\"false\".equals(value)))\r\n        return \"\";\r\n    else\r\n        return name + \" must be either true or false\";\r\n\r\n}'),(2167,'String value','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4667,'edu.ncsu.csc.itrust.validate.BeanValidator.checkBoolean(java.lang.String,java.lang.String)',0,'/**\r\n * Check that the value fits the \"true\" or \"false\"\r\n *\r\n * @param name\r\n * 		\r\n * @param value\r\n * 		\r\n * @return \r\n */\r\nprotected String checkBoolean(String name, String value) {\r\n    if ((\"true\".equals(value)) || (\"false\".equals(value)))\r\n        return \"\";\r\n    else\r\n        return name + \" must be either true or false\";\r\n\r\n}'),(2168,'String name','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4674,'edu.ncsu.csc.itrust.validate.BeanValidator.checkNotZero(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'protected String checkNotZero(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String s = checkFormat(name, value, format, isNullable);\r\n    if (s.equals(\"\")) {\r\n        if ((Double.valueOf(value)) < 0.1) {\r\n            return name + \" must be greater than 0\";\r\n        }\r\n    }\r\n    return s;\r\n}'),(2169,'String value','java.lang.String',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4674,'edu.ncsu.csc.itrust.validate.BeanValidator.checkNotZero(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'protected String checkNotZero(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String s = checkFormat(name, value, format, isNullable);\r\n    if (s.equals(\"\")) {\r\n        if ((Double.valueOf(value)) < 0.1) {\r\n            return name + \" must be greater than 0\";\r\n        }\r\n    }\r\n    return s;\r\n}'),(2170,'ValidationFormat format','edu.ncsu.csc.itrust.validate.ValidationFormat',682,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4674,'edu.ncsu.csc.itrust.validate.BeanValidator.checkNotZero(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'protected String checkNotZero(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String s = checkFormat(name, value, format, isNullable);\r\n    if (s.equals(\"\")) {\r\n        if ((Double.valueOf(value)) < 0.1) {\r\n            return name + \" must be greater than 0\";\r\n        }\r\n    }\r\n    return s;\r\n}'),(2171,'boolean isNullable','boolean',0,658,'edu.ncsu.csc.itrust.validate.BeanValidator',4674,'edu.ncsu.csc.itrust.validate.BeanValidator.checkNotZero(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)',0,'protected String checkNotZero(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String s = checkFormat(name, value, format, isNullable);\r\n    if (s.equals(\"\")) {\r\n        if ((Double.valueOf(value)) < 0.1) {\r\n            return name + \" must be greater than 0\";\r\n        }\r\n    }\r\n    return s;\r\n}'),(2172,'DiagnosisBean d','edu.ncsu.csc.itrust.beans.DiagnosisBean',248,660,'edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator',4688,'edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator.validate(edu.ncsu.csc.itrust.beans.DiagnosisBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(DiagnosisBean d) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"ICD9CM Code\", d.getICDCode(), ValidationFormat.ICD9CM, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", d.getDescription(), ValidationFormat.ICD_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2173,'DrugInteractionBean d','edu.ncsu.csc.itrust.beans.DrugInteractionBean',250,661,'edu.ncsu.csc.itrust.validate.DrugInteractionValidator',4690,'edu.ncsu.csc.itrust.validate.DrugInteractionValidator.validate(edu.ncsu.csc.itrust.beans.DrugInteractionBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param d\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(DrugInteractionBean d) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"FirstDrug\", d.getFirstDrug(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"SecondDrug\", d.getSecondDrug(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"description\", d.getDescription(), ValidationFormat.DRUG_INT_COMMENTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2174,'MessageBean m','edu.ncsu.csc.itrust.beans.MessageBean',262,662,'edu.ncsu.csc.itrust.validate.EMailValidator',4692,'edu.ncsu.csc.itrust.validate.EMailValidator.validate(edu.ncsu.csc.itrust.beans.MessageBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param m\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(MessageBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"body\", m.getBody(), ValidationFormat.EMAILS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2175,'EditOfficeVisitForm form','edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm',286,663,'edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator',4694,'edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator.validate(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm)',0,'/* public EditOfficeVisitValidator(boolean validatePrescription) {\nthis.validatePrescription = validatePrescription;\n}\n */\r\n/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(EditOfficeVisitForm form) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"HCP ID\", form.getHcpID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", form.getHospitalID(), ValidationFormat.HOSPITAL_ID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", form.getNotes(), ValidationFormat.NOTES, true));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", form.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Visit Date\", form.getVisitDate(), ValidationFormat.DATE, false));\r\n    /* if (validatePrescription) {\n    errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE,\n    false));\n    errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\n    errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(),\n    ValidationFormat.NOTES, true));\n    errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\n    if ((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\"\n    && (checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\") {\n    Date sd = null;\n    Date ed = null;\n    try {\n    sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\n    ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\n    String dateError = null;\n    if (sd.after(ed)) {\n    dateError = \"The start date of the prescription must be before the end date.\";\n    }\n    errorList.addIfNotNull(dateError);\n    } catch (ParseException e) {\n    errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\n    }\n\n    }\n    }\n     */\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2176,'String defaultInstructions','java.lang.String',0,664,'edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator',4695,'edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator.-init-(java.lang.String)',0,'public EditPrescriptionsValidator(String defaultInstructions) {\r\n    this.defaultInstructions = defaultInstructions;\r\n}'),(2177,'EditPrescriptionsForm form','edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm',287,664,'edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator',4696,'edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator.validate(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)\n */\r\n@Override\r\npublic void validate(EditPrescriptionsForm form) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(), ValidationFormat.NOTES, false));\r\n    errorList.addIfNotNull((form.getInstructions().equals(defaultInstructions) ? \"Instructions: \" + (ValidationFormat.NOTES.getDescription()) : \"\"));\r\n    errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\r\n    if (((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\") && ((checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\")) {\r\n        Date sd = null;\r\n        Date ed = null;\r\n        try {\r\n            sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\r\n            ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\r\n            String dateError = null;\r\n            if (sd.after(ed)) {\r\n                dateError = \"The start date of the prescription must be before the end date.\";\r\n            }\r\n            errorList.addIfNotNull(dateError);\r\n        } catch (ParseException e) {\r\n            errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\r\n        }\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2178,'HealthRecordForm bean','edu.ncsu.csc.itrust.beans.forms.HealthRecordForm',288,665,'edu.ncsu.csc.itrust.validate.HealthRecordFormValidator',4698,'edu.ncsu.csc.itrust.validate.HealthRecordFormValidator.validate(edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(HealthRecordForm bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkInt(\"Systolic blood pressure\", bean.getBloodPressureN(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Diastolic blood pressure\", bean.getBloodPressureD(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol HDL\", bean.getCholesterolHDL(), 0, 89, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol LDL\", bean.getCholesterolLDL(), 0, 600, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol Triglycerides\", bean.getCholesterolTri(), 100, 600, false));\r\n    errorList.addIfNotNull(checkNotZero(\"Height\", bean.getHeight(), ValidationFormat.Height, false));\r\n    errorList.addIfNotNull(checkNotZero(\"Weight\", bean.getWeight(), ValidationFormat.Weight, false));\r\n    errorList.addIfNotNull(checkInt(\"Smoker\", bean.getIsSmoker(), 0, 10, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2179,'HospitalBean h','edu.ncsu.csc.itrust.beans.HospitalBean',258,666,'edu.ncsu.csc.itrust.validate.HospitalBeanValidator',4700,'edu.ncsu.csc.itrust.validate.HospitalBeanValidator.validate(edu.ncsu.csc.itrust.beans.HospitalBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(HospitalBean h) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", h.getHospitalID(), ValidationFormat.HOSPITAL_ID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital Name\", h.getHospitalName(), ValidationFormat.HOSPITAL_NAME, false));\r\n    if (!(h.getHospitalAddress().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital Address\", h.getHospitalAddress(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(h.getHospitalCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital City\", h.getHospitalCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(h.getHospitalState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital State\", h.getHospitalState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(h.getHospitalZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital Zip\", h.getHospitalZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (errorList.hasErrors()) {\r\n        throw new FormValidationException(errorList);\r\n    }\r\n}'),(2180,'LOINCbean m','edu.ncsu.csc.itrust.beans.LOINCbean',259,667,'edu.ncsu.csc.itrust.validate.LOINCBeanValidator',4702,'edu.ncsu.csc.itrust.validate.LOINCBeanValidator.validate(edu.ncsu.csc.itrust.beans.LOINCbean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(LOINCbean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((((m.getLabProcedureCode()) == null) || ((m.getComponent()) == null)) || ((m.getKindOfProperty()) == null)) {\r\n        throw new FormValidationException(\"You must have a Lab Procedure Code, Component and Kind Of Property\");\r\n    }\r\n    errorList.addIfNotNull(checkFormat(\"LaboratoryProcedureCode\", m.getLabProcedureCode(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Component\", m.getComponent(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"KindOfProperty\", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"TimeAspect\", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"System\", m.getSystem(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"ScaleType\", m.getScaleType(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"MethodType\", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2181,'LabProcedureBean b','edu.ncsu.csc.itrust.beans.LabProcedureBean',260,668,'edu.ncsu.csc.itrust.validate.LabProcedureValidator',4704,'edu.ncsu.csc.itrust.validate.LabProcedureValidator.validate(edu.ncsu.csc.itrust.beans.LabProcedureBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\npublic void validate(LabProcedureBean b) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"LOINC\", b.getLoinc(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Commentary\", b.getCommentary(), ValidationFormat.LABPROCEDURE_COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Results\", b.getResults(), ValidationFormat.LABPROCEDURE_COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Status\", b.getStatus(), ValidationFormat.LAB_STATUS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Rights\", b.getRights(), ValidationFormat.LAB_RIGHTS, false));\r\n    if (((b.getNumericalResult()) != null) && ((b.getNumericalResult().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Numerical Result\", b.getNumericalResult(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Numerical Result\", b.getNumericalResult(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (((b.getUpperBound()) != null) && ((b.getUpperBound().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Upper Bound\", b.getUpperBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Upper Bound\", b.getUpperBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (((b.getLowerBound()) != null) && ((b.getLowerBound().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Lower Bound\", b.getLowerBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Lower Bound\", b.getLowerBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2182,'String email','java.lang.String',0,669,'edu.ncsu.csc.itrust.validate.MailValidator',4706,'edu.ncsu.csc.itrust.validate.MailValidator.validateEmail(java.lang.String)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\npublic boolean validateEmail(String email) throws FormValidationException {\r\n    MailValidator val = new MailValidator();\r\n    return val.isValid(email);\r\n}'),(2183,'MedicationBean m','edu.ncsu.csc.itrust.beans.MedicationBean',261,670,'edu.ncsu.csc.itrust.validate.MedicationBeanValidator',4708,'edu.ncsu.csc.itrust.validate.MedicationBeanValidator.validate(edu.ncsu.csc.itrust.beans.MedicationBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(MedicationBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"ND Code\", m.getNDCode(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", m.getDescription(), ValidationFormat.ND_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2184,'MessageBean mBean','edu.ncsu.csc.itrust.beans.MessageBean',262,671,'edu.ncsu.csc.itrust.validate.MessageValidator',4710,'edu.ncsu.csc.itrust.validate.MessageValidator.validate(edu.ncsu.csc.itrust.beans.MessageBean)',0,'@Override\r\npublic void validate(MessageBean mBean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"body\", mBean.getBody(), ValidationFormat.MESSAGES_BODY, false));\r\n    errorList.addIfNotNull(checkFormat(\"subject\", mBean.getSubject(), ValidationFormat.MESSAGES_SUBJECT, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2185,'OverrideReasonBean orc','edu.ncsu.csc.itrust.beans.OverrideReasonBean',265,672,'edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator',4712,'edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator.validate(edu.ncsu.csc.itrust.beans.OverrideReasonBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(OverrideReasonBean orc) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Reason Code\", orc.getORCode(), ValidationFormat.ORC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", orc.getDescription(), ValidationFormat.OR_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2186,'PatientInstructionsBean bean','edu.ncsu.csc.itrust.beans.PatientInstructionsBean',268,673,'edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator',4714,'edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator.validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)',0,'/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)\n */\r\n@Override\r\npublic void validate(PatientInstructionsBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Name\", bean.getName(), ValidationFormat.PATIENT_INSTRUCTIONS_NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Comments\", bean.getComment(), ValidationFormat.PATIENT_INSTRUCTIONS_COMMENTS, false));\r\n    // The following checks URL length.\r\n    errorList.addIfNotNull(checkFormat(\"URL\", bean.getUrl(), ValidationFormat.PATIENT_INSTRUCTIONS_URL, false));\r\n    // The following checks URL format.\r\n    UrlValidator urlValidator = new UrlValidator();\r\n    if (!(urlValidator.isValid(bean.getUrl()))) {\r\n        errorList.addIfNotNull(\"URL: A valid URL is required.\");\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2187,'PatientBean p','edu.ncsu.csc.itrust.beans.PatientBean',266,674,'edu.ncsu.csc.itrust.validate.PatientValidator',4716,'edu.ncsu.csc.itrust.validate.PatientValidator.validate(edu.ncsu.csc.itrust.beans.PatientBean)',0,'@Override\r\npublic void validate(PatientBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    // First name, last name, and email are all required\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (!(p.getDateOfBirthStr().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Date of Birth\", p.getDateOfBirthStr(), ValidationFormat.DATE, false));\r\n    }\r\n    if (!(p.getDateOfDeathStr().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Date of Death\", p.getDateOfDeathStr(), ValidationFormat.DATE, true));\r\n    }\r\n    try {\r\n        if ((\"\".equals(p.getDateOfDeathStr())) || ((p.getDateOfDeath()) == null)) {\r\n            if (!(p.getCauseOfDeath().equals(\"\"))) {\r\n                errorList.addIfNotNull(\"Cause of Death cannot be specified without Date of Death!\");\r\n            }\r\n        } else {\r\n            if (p.getDateOfDeath().before(p.getDateOfBirth()))\r\n                errorList.addIfNotNull(\"Death date cannot be before birth date!\");\r\n\r\n            if (p.getDateOfDeath().after(new Date())) {\r\n                errorList.addIfNotNull(\"Death date cannot be in the future!\");\r\n            }\r\n        }\r\n        if (p.getDateOfBirth().after(new Date())) {\r\n            errorList.addIfNotNull(\"Birth date cannot be in the future!\");\r\n        }\r\n    } catch (NullPointerException e) {\r\n        // ignore this\r\n    }\r\n    if (!(p.getCauseOfDeath().isEmpty())) {\r\n        boolean deathCauseNull = (null == (p.getDateOfDeathStr())) || (p.getDateOfDeathStr().equals(\"\"));\r\n        errorList.addIfNotNull(checkFormat(\"Cause of Death\", p.getCauseOfDeath(), ValidationFormat.ICD9CM, deathCauseNull));\r\n    }\r\n    if (!(p.getStreetAddress1().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(p.getStreetAddress2().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    }\r\n    if (!(p.getCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(p.getState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(p.getZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (!(p.getPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getEmergencyName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Emergency Contact Name\", p.getEmergencyName(), ValidationFormat.NAME, false));\r\n    }\r\n    if (!(p.getEmergencyPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Emergency Contact Phone\", p.getEmergencyPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getIcName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Name\", p.getIcName(), ValidationFormat.NAME, false));\r\n    }\r\n    if (!(p.getIcAddress1().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Address 1\", p.getIcAddress1(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(p.getIcAddress2().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Address 2\", p.getIcAddress2(), ValidationFormat.ADDRESS, true));\r\n    }\r\n    if (!(p.getIcCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company City\", p.getIcCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(p.getIcState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company State\", p.getIcState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(p.getIcZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Zip\", p.getIcZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (!(p.getIcPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Phone\", p.getIcPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getIcID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company ID\", p.getIcID(), ValidationFormat.INSURANCE_ID, false));\r\n    }\r\n    if (!(p.getMotherMID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Mother MID\", p.getMotherMID(), ValidationFormat.NPMID, true));\r\n    }\r\n    if (!(p.getFatherMID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Father MID\", p.getFatherMID(), ValidationFormat.NPMID, true));\r\n    }\r\n    if (!(p.getTopicalNotes().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Topical Notes\", p.getTopicalNotes(), ValidationFormat.NOTES, true));\r\n    }\r\n    /* This block was added for Theme 5 by Tyler Arehart */\r\n    if (!(p.getCreditCardNumber().isEmpty())) {\r\n        if (!((p.getCreditCardNumber().equals(\"\")) && (p.getCreditCardType().equals(\"\")))) {\r\n            String s = null;\r\n            CreditCardValidator c;\r\n            int type = -1;\r\n            if (p.getCreditCardType().equals(\"VISA\"))\r\n                type = CreditCardValidator.VISA;\r\n\r\n            if (p.getCreditCardType().equals(\"MASTERCARD\"))\r\n                type = CreditCardValidator.MASTERCARD;\r\n\r\n            if (p.getCreditCardType().equals(\"DISCOVER\"))\r\n                type = CreditCardValidator.DISCOVER;\r\n\r\n            if (p.getCreditCardType().equals(\"AMEX\"))\r\n                type = CreditCardValidator.AMEX;\r\n\r\n            if (type != (-1)) {\r\n                c = new CreditCardValidator(type);\r\n                if (!(c.isValid(p.getCreditCardNumber()))) {\r\n                    s = \"Credit Card Number\";\r\n                }\r\n            } else {\r\n                s = \"Credit Card Type\";\r\n            }\r\n            errorList.addIfNotNull(s);\r\n        }\r\n    }\r\n    if (!(p.getDirectionsToHome().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Directions to Home\", p.getDirectionsToHome(), ValidationFormat.COMMENTS, true));\r\n    }\r\n    if (!(p.getReligion().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Religion\", p.getReligion(), ValidationFormat.NAME, true));\r\n    }\r\n    if (!(p.getLanguage().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Language\", p.getLanguage(), ValidationFormat.NAME, true));\r\n    }\r\n    if (!(p.getSpiritualPractices().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Spiritual Practices\", p.getSpiritualPractices(), ValidationFormat.COMMENTS, true));\r\n    }\r\n    if (!(p.getAlternateName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Alternate Name\", p.getAlternateName(), ValidationFormat.NAME, true));\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2188,'PersonnelBean p','edu.ncsu.csc.itrust.beans.PersonnelBean',270,675,'edu.ncsu.csc.itrust.validate.PersonnelValidator',4718,'edu.ncsu.csc.itrust.validate.PersonnelValidator.validate(edu.ncsu.csc.itrust.beans.PersonnelBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PersonnelBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2189,'ProcedureBean p','edu.ncsu.csc.itrust.beans.ProcedureBean',273,676,'edu.ncsu.csc.itrust.validate.ProcedureBeanValidator',4720,'edu.ncsu.csc.itrust.validate.ProcedureBeanValidator.validate(edu.ncsu.csc.itrust.beans.ProcedureBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(ProcedureBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"CPT Code\", p.getCPTCode(), ValidationFormat.CPT, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", p.getDescription(), ValidationFormat.CPT_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2190,'ReferralBean p','edu.ncsu.csc.itrust.beans.ReferralBean',274,677,'edu.ncsu.csc.itrust.validate.ReferralBeanValidator',4722,'edu.ncsu.csc.itrust.validate.ReferralBeanValidator.validate(edu.ncsu.csc.itrust.beans.ReferralBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(ReferralBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", p.getReferralDetails(), ValidationFormat.REFERRAL_NOTES, false));\r\n    errorList.addIfNotNull(checkFormat(\"Priority\", Integer.toString(p.getPriority()), ValidationFormat.PRIORITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", p.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Receiver ID\", p.getReceiverID(), ValidationFormat.MID, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2191,'RemoteMonitoringDataBean m','edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean',275,678,'edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator',4724,'edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator.validate(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(RemoteMonitoringDataBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    // Skip validation if values were not submitted (0 or -1)\r\n    if (!(((m.getSystolicBloodPressure()) == 0) || ((m.getSystolicBloodPressure()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Systolic Blood Pressure\", (\"\" + (m.getSystolicBloodPressure())), ValidationFormat.SYSTOLIC_BLOOD_PRESSURE, true));\r\n\r\n    if (!(((m.getDiastolicBloodPressure()) == 0) || ((m.getDiastolicBloodPressure()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Diastolic Blood Pressure\", (\"\" + (m.getDiastolicBloodPressure())), ValidationFormat.DIASTOLIC_BLOOD_PRESSURE, true));\r\n\r\n    if (!(((m.getGlucoseLevel()) == 0) || ((m.getGlucoseLevel()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Glucose Level\", (\"\" + (m.getGlucoseLevel())), ValidationFormat.GLUCOSE_LEVEL, true));\r\n\r\n    if (!(((m.getPedometerReading()) == 0) || ((m.getPedometerReading()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Pedometer Reading\", (\"\" + (m.getPedometerReading())), ValidationFormat.PEDOMETER_READING, true));\r\n\r\n    if (!(((m.getHeight()) == 0) || ((m.getHeight()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Height\", (\"\" + (m.getHeight())), ValidationFormat.HEIGHT, true));\r\n\r\n    if (!(((m.getWeight()) == 0) || ((m.getWeight()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Weight\", (\"\" + (m.getWeight())), ValidationFormat.WEIGHT, true));\r\n\r\n    if (errorList.hasErrors()) {\r\n        throw new FormValidationException(errorList);\r\n    }\r\n}'),(2192,'SecurityQA bean','edu.ncsu.csc.itrust.beans.SecurityQA',277,679,'edu.ncsu.csc.itrust.validate.SecurityQAValidator',4726,'edu.ncsu.csc.itrust.validate.SecurityQAValidator.validate(edu.ncsu.csc.itrust.beans.SecurityQA)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(SecurityQA bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if (null == bean)\r\n        throw new FormValidationException(\"Null form\");\r\n\r\n    if (null == (bean.getConfirmAnswer()))\r\n        throw new FormValidationException(\"Confirm answer cannot be empty\");\r\n\r\n    if (!(bean.getAnswer().equals(bean.getConfirmAnswer())))\r\n        throw new FormValidationException(\"Security answers do not match\");\r\n\r\n    errorList.addIfNotNull(checkFormat(\"Security Question\", bean.getQuestion(), ValidationFormat.QUESTION, false));\r\n    errorList.addIfNotNull(checkFormat(\"Security Answer\", bean.getAnswer(), ValidationFormat.ANSWER, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2193,'SurveyResultBean bean','edu.ncsu.csc.itrust.beans.SurveyResultBean',279,680,'edu.ncsu.csc.itrust.validate.SurveySearchValidator',4728,'edu.ncsu.csc.itrust.validate.SurveySearchValidator.validate(edu.ncsu.csc.itrust.beans.SurveyResultBean)',0,'/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * 		A bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(SurveyResultBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", bean.getHCPzip(), ValidationFormat.ZIPCODE, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}'),(2194,'String regex','java.lang.String',0,682,'edu.ncsu.csc.itrust.validate.ValidationFormat',4733,'edu.ncsu.csc.itrust.validate.ValidationFormat.-init-(java.lang.String,java.lang.String)',0,'ValidationFormat(String regex, String errorMessage) {\r\n    this.regex = Pattern.compile(regex);\r\n    this.description = errorMessage;\r\n}'),(2195,'String errorMessage','java.lang.String',0,682,'edu.ncsu.csc.itrust.validate.ValidationFormat',4733,'edu.ncsu.csc.itrust.validate.ValidationFormat.-init-(java.lang.String,java.lang.String)',0,'ValidationFormat(String regex, String errorMessage) {\r\n    this.regex = Pattern.compile(regex);\r\n    this.description = errorMessage;\r\n}'),(2196,'int n','int',0,693,'edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest',4775,'edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.longString(int)',0,'private String longString(int n) {\r\n    StringBuilder builder = new StringBuilder();\r\n    for (int i = 0; i < n; i++) {\r\n        builder.append(x);\r\n    }\r\n    return builder.toString();\r\n}'),(2197,'int n','int',0,696,'edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest',4798,'edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.longString(int)',0,'private String longString(int n) {\r\n    StringBuilder builder = new StringBuilder();\r\n    for (int i = 0; i < n; i++) {\r\n        builder.append(x);\r\n    }\r\n    return builder.toString();\r\n}');
/*!40000 ALTER TABLE `parameters` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-05-07 15:43:17
