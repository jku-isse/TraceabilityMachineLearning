-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: databasejhotdraw
-- ------------------------------------------------------
-- Server version	8.0.11

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `parameters`
--

DROP TABLE IF EXISTS `parameters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameters` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parametername` varchar(200) DEFAULT NULL,
  `parametertype` varchar(200) DEFAULT NULL,
  `parameterclass` int(11) DEFAULT NULL,
  `classid` int(11) DEFAULT NULL,
  `classname` varchar(200) DEFAULT NULL,
  `methodid` int(11) DEFAULT NULL,
  `methodname` longtext,
  `isreturn` tinyint(4) NOT NULL,
  `sourcecode` longtext,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1804 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameters`
--

LOCK TABLES `parameters` WRITE;
/*!40000 ALTER TABLE `parameters` DISABLE KEYS */;
INSERT INTO `parameters` VALUES (1,'ApplicationModel newValue','org.jhotdraw.app.ApplicationModel',4,1,'org.jhotdraw.app.AbstractApplication',28,'org.jhotdraw.app.AbstractApplication.setModel(org.jhotdraw.app.ApplicationModel)',0,'public void setModel(ApplicationModel newValue) {\r\n    ApplicationModel oldValue = model;\r\n    model = newValue;\r\n    firePropertyChange(\"model\", oldValue, newValue);\r\n}'),(2,'View newValue','org.jhotdraw.app.View',15,1,'org.jhotdraw.app.AbstractApplication',26,'org.jhotdraw.app.AbstractApplication.setActiveView(org.jhotdraw.app.View)',0,'/**\r\n * Sets the active view. Calls deactivate on the previously\r\n * active view, and then calls activate on the given view.\r\n *\r\n * @param newValue\r\n * 		Active view, can be null.\r\n */\r\npublic void setActiveView(View newValue) {\r\n    View oldValue = activeView;\r\n    if ((activeView) != null) {\r\n        activeView.deactivate();\r\n    }\r\n    activeView = newValue;\r\n    if ((activeView) != null) {\r\n        activeView.activate();\r\n    }\r\n    firePropertyChange(Application.ACTIVE_VIEW_PROPERTY, oldValue, newValue);\r\n}'),(3,'View p','org.jhotdraw.app.View',15,1,'org.jhotdraw.app.AbstractApplication',19,'org.jhotdraw.app.AbstractApplication.initViewActions(org.jhotdraw.app.View)',0,'protected abstract void initViewActions(View p);'),(4,'View p','org.jhotdraw.app.View',15,1,'org.jhotdraw.app.AbstractApplication',23,'org.jhotdraw.app.AbstractApplication.remove(org.jhotdraw.app.View)',0,'public void remove(View p) {\r\n    hide(p);\r\n    int oldCount = views.size();\r\n    views.remove(p);\r\n    p.setApplication(null);\r\n    firePropertyChange(AbstractApplication.VIEW_COUNT_PROPERTY, oldCount, views.size());\r\n}'),(5,'View p','org.jhotdraw.app.View',15,1,'org.jhotdraw.app.AbstractApplication',2,'org.jhotdraw.app.AbstractApplication.add(org.jhotdraw.app.View)',0,'public void add(View p) {\r\n    if ((p.getApplication()) != (this)) {\r\n        int oldCount = views.size();\r\n        views.add(p);\r\n        p.setApplication(this);\r\n        firePropertyChange(AbstractApplication.VIEW_COUNT_PROPERTY, oldCount, views.size());\r\n    }\r\n}'),(6,'View p','org.jhotdraw.app.View',15,1,'org.jhotdraw.app.AbstractApplication',11,'org.jhotdraw.app.AbstractApplication.dispose(org.jhotdraw.app.View)',0,'public void dispose(View p) {\r\n    remove(p);\r\n    p.dispose();\r\n}'),(7,'View p','org.jhotdraw.app.View',15,1,'org.jhotdraw.app.AbstractApplication',5,'org.jhotdraw.app.AbstractApplication.addWindow(java.awt.Window,org.jhotdraw.app.View)',0,'public void addWindow(Window window, View p) {\r\n}'),(8,'Application newValue','org.jhotdraw.app.Application',3,2,'org.jhotdraw.app.AbstractView',54,'org.jhotdraw.app.AbstractView.setApplication(org.jhotdraw.app.Application)',0,'// Variables declaration - do not modify//GEN-BEGIN:variables\r\n// End of variables declaration//GEN-END:variables\r\npublic void setApplication(Application newValue) {\r\n    Application oldValue = application;\r\n    application = newValue;\r\n    firePropertyChange(\"application\", oldValue, newValue);\r\n}'),(9,'View p','org.jhotdraw.app.View',15,3,'org.jhotdraw.app.Application',62,'org.jhotdraw.app.Application.add(org.jhotdraw.app.View)',0,'/**\r\n * Adds a view to this application.\r\n * Fires a \"documentCount\" property change event.\r\n * Invokes method setApplication(this) on the view object.\r\n */\r\npublic void add(View p);'),(10,'View p','org.jhotdraw.app.View',15,3,'org.jhotdraw.app.Application',83,'org.jhotdraw.app.Application.remove(org.jhotdraw.app.View)',0,'/**\r\n * Removes a view from this application and removes it from the users\r\n * view.\r\n * Fires a \"documentCount\" property change event.\r\n * Invokes method setApplication(null) on the view object.\r\n */\r\npublic void remove(View p);'),(11,'View p','org.jhotdraw.app.View',15,3,'org.jhotdraw.app.Application',89,'org.jhotdraw.app.Application.show(org.jhotdraw.app.View)',0,'/**\r\n * Shows a view.\r\n */\r\npublic void show(View p);'),(12,'View p','org.jhotdraw.app.View',15,3,'org.jhotdraw.app.Application',77,'org.jhotdraw.app.Application.hide(org.jhotdraw.app.View)',0,'/**\r\n * Hides a view.\r\n */\r\npublic void hide(View p);'),(13,'View p','org.jhotdraw.app.View',15,3,'org.jhotdraw.app.Application',70,'org.jhotdraw.app.Application.dispose(org.jhotdraw.app.View)',0,'/**\r\n * This is a convenience method for removing a view and disposing it.\r\n */\r\npublic void dispose(View p);'),(14,'ApplicationModel newValue','org.jhotdraw.app.ApplicationModel',4,3,'org.jhotdraw.app.Application',88,'org.jhotdraw.app.Application.setModel(org.jhotdraw.app.ApplicationModel)',0,'/**\r\n * Sets the application model.\r\n */\r\npublic void setModel(ApplicationModel newValue);'),(15,'View view','org.jhotdraw.app.View',15,3,'org.jhotdraw.app.Application',66,'org.jhotdraw.app.Application.addWindow(java.awt.Window,org.jhotdraw.app.View)',0,'/**\r\n * Adds a (non-palette) window to the application.\r\n *\r\n * @param window\r\n * 		The window.\r\n * @param view\r\n * 		The View to which this window is associated, or null,\r\n * 		if the window is associated to the application.\r\n */\r\npublic void addWindow(Window window, View view);'),(16,'Application a','org.jhotdraw.app.Application',3,4,'org.jhotdraw.app.ApplicationModel',101,'org.jhotdraw.app.ApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View v);'),(17,'View v','org.jhotdraw.app.View',15,4,'org.jhotdraw.app.ApplicationModel',101,'org.jhotdraw.app.ApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View v);'),(18,'Application a','org.jhotdraw.app.Application',3,4,'org.jhotdraw.app.ApplicationModel',100,'org.jhotdraw.app.ApplicationModel.initApplication(org.jhotdraw.app.Application)',0,'public void initApplication(Application a);'),(19,'Application a','org.jhotdraw.app.Application',3,4,'org.jhotdraw.app.ApplicationModel',94,'org.jhotdraw.app.ApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates tool bars.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * 		Application.\r\n * @param v\r\n * 		The view for which the toolbars need to be created, or null\r\n * 		if the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View v);'),(20,'View v','org.jhotdraw.app.View',15,4,'org.jhotdraw.app.ApplicationModel',94,'org.jhotdraw.app.ApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates tool bars.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * 		Application.\r\n * @param v\r\n * 		The view for which the toolbars need to be created, or null\r\n * 		if the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View v);'),(21,'Application a','org.jhotdraw.app.Application',3,4,'org.jhotdraw.app.ApplicationModel',93,'org.jhotdraw.app.ApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates menus.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * 		Application.\r\n * @param v\r\n * 		The view for which the toolbars need to be created, or null\r\n * 		if the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JMenu> createMenus(Application a, View v);'),(22,'View v','org.jhotdraw.app.View',15,4,'org.jhotdraw.app.ApplicationModel',93,'org.jhotdraw.app.ApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates menus.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * 		Application.\r\n * @param v\r\n * 		The view for which the toolbars need to be created, or null\r\n * 		if the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JMenu> createMenus(Application a, View v);'),(23,'View v','org.jhotdraw.app.View',15,5,'org.jhotdraw.app.DefaultAppletApplication',109,'org.jhotdraw.app.DefaultAppletApplication.show(org.jhotdraw.app.View)',0,'public void show(View v) {\r\n    this.view = v;\r\n    applet.getContentPane().removeAll();\r\n    applet.getContentPane().add(v.getComponent());\r\n    v.start();\r\n    v.activate();\r\n}'),(24,'View v','org.jhotdraw.app.View',15,5,'org.jhotdraw.app.DefaultAppletApplication',106,'org.jhotdraw.app.DefaultAppletApplication.hide(org.jhotdraw.app.View)',0,'public void hide(View v) {\r\n    v.deactivate();\r\n    v.stop();\r\n    applet.getContentPane().removeAll();\r\n    this.view = null;\r\n}'),(25,'View p','org.jhotdraw.app.View',15,5,'org.jhotdraw.app.DefaultAppletApplication',107,'org.jhotdraw.app.DefaultAppletApplication.initViewActions(org.jhotdraw.app.View)',0,'protected void initViewActions(View p) {\r\n}'),(26,'Application app','org.jhotdraw.app.Application',3,6,'org.jhotdraw.app.DefaultApplicationModel',113,'org.jhotdraw.app.DefaultApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class creates a standard toolbar with the following buttons in it:\r\n * <ul>\r\n * <li>File New</li>\r\n * <li>File Open</li>\r\n * <li>File Save</li>\r\n * <li>Undo</li>\r\n * <li>Redo</li>\r\n * <li>Cut</li>\r\n * <li>Copy</li>\r\n * <li>Paste</li>\r\n * </ul>\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JToolBar tb = new JToolBar();\r\n    tb.setName(labels.getString(\"standardToolBarTitle\"));\r\n    JButton b;\r\n    Action a;\r\n    if (null != (a = getAction(NewAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(OpenAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(LoadAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    b = tb.add(getAction(SaveAction.ID));\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(UndoAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(RedoAction.ID));\r\n    b.setFocusable(false);\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(CutAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(CopyAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(PasteAction.ID));\r\n    b.setFocusable(false);\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    list.add(tb);\r\n    return list;\r\n}'),(27,'View p','org.jhotdraw.app.View',15,6,'org.jhotdraw.app.DefaultApplicationModel',113,'org.jhotdraw.app.DefaultApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class creates a standard toolbar with the following buttons in it:\r\n * <ul>\r\n * <li>File New</li>\r\n * <li>File Open</li>\r\n * <li>File Save</li>\r\n * <li>Undo</li>\r\n * <li>Redo</li>\r\n * <li>Cut</li>\r\n * <li>Copy</li>\r\n * <li>Paste</li>\r\n * </ul>\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JToolBar tb = new JToolBar();\r\n    tb.setName(labels.getString(\"standardToolBarTitle\"));\r\n    JButton b;\r\n    Action a;\r\n    if (null != (a = getAction(NewAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(OpenAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(LoadAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    b = tb.add(getAction(SaveAction.ID));\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(UndoAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(RedoAction.ID));\r\n    b.setFocusable(false);\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(CutAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(CopyAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(PasteAction.ID));\r\n    b.setFocusable(false);\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    list.add(tb);\r\n    return list;\r\n}'),(28,'Application a','org.jhotdraw.app.Application',3,6,'org.jhotdraw.app.DefaultApplicationModel',112,'org.jhotdraw.app.DefaultApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> list = new LinkedList<JMenu>();\r\n    list.add(createEditMenu(a, p));\r\n    return list;\r\n}'),(29,'View p','org.jhotdraw.app.View',15,6,'org.jhotdraw.app.DefaultApplicationModel',112,'org.jhotdraw.app.DefaultApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> list = new LinkedList<JMenu>();\r\n    list.add(createEditMenu(a, p));\r\n    return list;\r\n}'),(30,'Application a','org.jhotdraw.app.Application',3,6,'org.jhotdraw.app.DefaultApplicationModel',111,'org.jhotdraw.app.DefaultApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'protected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"edit\");\r\n    mi = m.add(getAction(UndoAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(RedoAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(CutAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(CopyAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(PasteAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DuplicateAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DeleteAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(SelectAllAction.ID));\r\n    mi.setIcon(null);\r\n    if ((getAction(FindAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(getAction(FindAction.ID));\r\n    }\r\n    return m;\r\n}'),(31,'View p','org.jhotdraw.app.View',15,6,'org.jhotdraw.app.DefaultApplicationModel',111,'org.jhotdraw.app.DefaultApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'protected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"edit\");\r\n    mi = m.add(getAction(UndoAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(RedoAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(CutAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(CopyAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(PasteAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DuplicateAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DeleteAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(SelectAllAction.ID));\r\n    mi.setIcon(null);\r\n    if ((getAction(FindAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(getAction(FindAction.ID));\r\n    }\r\n    return m;\r\n}'),(32,'Application a','org.jhotdraw.app.Application',3,6,'org.jhotdraw.app.DefaultApplicationModel',121,'org.jhotdraw.app.DefaultApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n}'),(33,'View p','org.jhotdraw.app.View',15,6,'org.jhotdraw.app.DefaultApplicationModel',121,'org.jhotdraw.app.DefaultApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n}'),(34,'Application a','org.jhotdraw.app.Application',3,6,'org.jhotdraw.app.DefaultApplicationModel',120,'org.jhotdraw.app.DefaultApplicationModel.initApplication(org.jhotdraw.app.Application)',0,'public void initApplication(Application a) {\r\n}'),(35,'View p','org.jhotdraw.app.View',15,7,'org.jhotdraw.app.DefaultMDIApplication',139,'org.jhotdraw.app.DefaultMDIApplication.initViewActions(org.jhotdraw.app.View)',0,'protected void initViewActions(View p) {\r\n    p.putAction(FocusAction.ID, new FocusAction(p));\r\n}'),(36,'final View p','org.jhotdraw.app.View',15,7,'org.jhotdraw.app.DefaultMDIApplication',142,'org.jhotdraw.app.DefaultMDIApplication.show(org.jhotdraw.app.View)',0,'public void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JInternalFrame f = new JInternalFrame();\r\n        f.setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE);\r\n        f.setClosable(true);\r\n        f.setMaximizable(true);\r\n        f.setResizable(true);\r\n        f.setIconifiable(false);\r\n        updateViewTitle(p, f);\r\n        PreferencesUtil.installInternalFramePrefsHandler(prefs, \"view\", f, desktopPane);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && (aView.isShowing())) && (SwingUtilities.getRootPane(aView.getComponent()).getParent().getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        // paletteHandler.add(f, v);\r\n        f.addInternalFrameListener(new InternalFrameAdapter() {\r\n            @Override\r\n            public void internalFrameClosing(final InternalFrameEvent evt) {\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void internalFrameClosed(final InternalFrameEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if ((name == (View.HAS_UNSAVED_CHANGES_PROPERTY)) || (name == (View.FILE_PROPERTY))) {\r\n                    updateViewTitle(p, f);\r\n                }\r\n            }\r\n        });\r\n        f.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (name.equals(\"selected\")) {\r\n                    if (evt.getNewValue().equals(Boolean.TRUE)) {\r\n                        setActiveView(p);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // f.setJMenuBar(createMenuBar(v));\r\n        f.getContentPane().add(p.getComponent());\r\n        f.setVisible(true);\r\n        desktopPane.add(f);\r\n        f.toFront();\r\n        try {\r\n            f.setSelected(true);\r\n        } catch (PropertyVetoException e) {\r\n            // Dont care.\r\n        }\r\n        p.getComponent().requestFocusInWindow();\r\n        p.start();\r\n    }\r\n}'),(37,'View p','org.jhotdraw.app.View',15,7,'org.jhotdraw.app.DefaultMDIApplication',135,'org.jhotdraw.app.DefaultMDIApplication.hide(org.jhotdraw.app.View)',0,'public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        JInternalFrame f = ((JInternalFrame) (SwingUtilities.getRootPane(p.getComponent()).getParent()));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        desktopPane.remove(f);\r\n        f.dispose();\r\n    }\r\n}'),(38,'View v','org.jhotdraw.app.View',15,7,'org.jhotdraw.app.DefaultMDIApplication',144,'org.jhotdraw.app.DefaultMDIApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JInternalFrame)',0,'/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param v\r\n * 		The view.\r\n * @param f\r\n * 		The frame.\r\n */\r\nprotected void updateViewTitle(View v, JInternalFrame f) {\r\n    File file = v.getFile();\r\n    String title;\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    if (v.hasUnsavedChanges()) {\r\n        title += \"*\";\r\n    }\r\n    v.setTitle(labels.getFormatted(\"internalFrame.title\", title, getName(), v.getMultipleOpenId()));\r\n    f.setTitle(v.getTitle());\r\n}'),(39,'View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',161,'org.jhotdraw.app.DefaultOSXApplication.initViewActions(org.jhotdraw.app.View)',0,'protected void initViewActions(View p) {\r\n    p.putAction(FocusAction.ID, new FocusAction(p));\r\n}'),(40,'final View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',149,'org.jhotdraw.app.DefaultOSXApplication.addWindow(java.awt.Window,org.jhotdraw.app.View)',0,'@Override\r\npublic void addWindow(Window window, final View p) {\r\n    if (window instanceof JFrame) {\r\n        ((JFrame) (window)).setJMenuBar(createMenuBar(p));\r\n    } else\r\n        if (window instanceof JDialog) {\r\n            // ((JDialog) window).setJMenuBar(createMenuBar(null));\r\n        }\r\n\r\n    paletteHandler.add(window, p);\r\n}'),(41,'final View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',166,'org.jhotdraw.app.DefaultOSXApplication.show(org.jhotdraw.app.View)',0,'public void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JFrame f = new JFrame();\r\n        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n        f.setPreferredSize(new Dimension(400, 400));\r\n        updateViewTitle(p, f);\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"view\", f);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && (aView.isShowing())) && (SwingUtilities.getWindowAncestor(aView.getComponent()).getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        f.addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(final WindowEvent evt) {\r\n                setActiveView(p);\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void windowClosed(final WindowEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n\r\n            @Override\r\n            public void windowActivated(WindowEvent evt) {\r\n                setActiveView(p);\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (name.equals(View.HAS_UNSAVED_CHANGES_PROPERTY)) {\r\n                    f.getRootPane().putClientProperty(\"windowModified\", new Boolean(p.hasUnsavedChanges()));\r\n                } else\r\n                    if (name.equals(View.FILE_PROPERTY)) {\r\n                        updateViewTitle(p, f);\r\n                    }\r\n\r\n            }\r\n        });\r\n        // f.setJMenuBar(createMenuBar(p));\r\n        // paletteHandler.add(f, p);\r\n        addWindow(f, p);\r\n        f.getContentPane().add(p.getComponent());\r\n        f.setVisible(true);\r\n        p.start();\r\n    }\r\n}'),(42,'View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',168,'org.jhotdraw.app.DefaultOSXApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JFrame)',0,'/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param p\r\n * 		The view.\r\n * @param f\r\n * 		The frame.\r\n */\r\nprotected void updateViewTitle(View p, JFrame f) {\r\n    String title;\r\n    File file = p.getFile();\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    p.setTitle(labels.getFormatted(\"frame.title\", title, getName(), p.getMultipleOpenId()));\r\n    f.setTitle(p.getTitle());\r\n    // Adds a proxy icon for the file to the title bar\r\n    // See http://developer.apple.com/technotes/tn2007/tn2196.html#WINDOW_DOCUMENTFILE\r\n    f.getRootPane().putClientProperty(\"Window.documentFile\", file);\r\n}'),(43,'View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',155,'org.jhotdraw.app.DefaultOSXApplication.hide(org.jhotdraw.app.View)',0,'public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        JFrame f = ((JFrame) (SwingUtilities.getWindowAncestor(p.getComponent())));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        // paletteHandler.remove(f, p);\r\n        removeWindow(f);\r\n        f.dispose();\r\n    }\r\n}'),(44,'View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',152,'org.jhotdraw.app.DefaultOSXApplication.createMenuBar(org.jhotdraw.app.View)',0,'/**\r\n * Creates a menu bar.\r\n *\r\n * @param p\r\n * 		The view for which the menu bar is created. This may be\r\n * 		<code>null</code> if the menu bar is attached to an application\r\n * 		component, such as the screen menu bar or a floating palette window.\r\n */\r\nprotected JMenuBar createMenuBar(View p) {\r\n    JMenuBar mb = new JMenuBar();\r\n    mb.add(createFileMenu(p));\r\n    for (JMenu mm : getModel().createMenus(this, p)) {\r\n        mb.add(mm);\r\n    }\r\n    // Determine the index of the help menu, if one has been provided\r\n    // Merge the help menu if one has been provided by the application model,\r\n    // otherwise just add it.\r\n    String helpMenuText = labels.getString(\"help.text\");\r\n    int index = mb.getComponentCount();\r\n    for (int i = 0, n = mb.getComponentCount(); i < n; i++) {\r\n        JMenu m = ((JMenu) (mb.getComponent(i)));\r\n        if (((m.getText()) != null) && (m.getText().equals(helpMenuText))) {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n    mb.add(createWindowMenu(p), index);\r\n    return mb;\r\n}'),(45,'final View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',153,'org.jhotdraw.app.DefaultOSXApplication.createWindowMenu(org.jhotdraw.app.View)',0,'protected JMenu createWindowMenu(final View p) {\r\n    ApplicationModel model = getModel();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    final JMenu windowMenu = m;\r\n    labels.configureMenu(m, \"window\");\r\n    addViewWindowMenuItems(m, p);\r\n    m.addSeparator();\r\n    for (View pr : views()) {\r\n        if ((pr.getAction(FocusAction.ID)) != null) {\r\n            windowMenu.add(pr.getAction(FocusAction.ID));\r\n        }\r\n    }\r\n    if ((paletteActions.size()) > 0) {\r\n        m.addSeparator();\r\n        for (Action a : paletteActions) {\r\n            JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(a);\r\n            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n            cbmi.setIcon(null);\r\n            m.add(cbmi);\r\n        }\r\n    }\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if ((name == \"viewCount\") || (name == \"paletteCount\")) {\r\n                if ((p == null) || (views().contains(p))) {\r\n                    JMenu m = windowMenu;\r\n                    m.removeAll();\r\n                    addViewWindowMenuItems(m, p);\r\n                    m.addSeparator();\r\n                    for (Iterator i = views().iterator(); i.hasNext();) {\r\n                        View pr = ((View) (i.next()));\r\n                        if ((pr.getAction(FocusAction.ID)) != null) {\r\n                            m.add(pr.getAction(FocusAction.ID));\r\n                        }\r\n                    }\r\n                    if ((paletteActions.size()) > 0) {\r\n                        m.addSeparator();\r\n                        for (Action a : paletteActions) {\r\n                            JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(a);\r\n                            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n                            cbmi.setIcon(null);\r\n                            m.add(cbmi);\r\n                        }\r\n                    }\r\n                } else {\r\n                    removePropertyChangeListener(this);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return m;\r\n}'),(46,'View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',148,'org.jhotdraw.app.DefaultOSXApplication.addViewWindowMenuItems(javax.swing.JMenu,org.jhotdraw.app.View)',0,'protected void addViewWindowMenuItems(JMenu m, View p) {\r\n    JMenuItem mi;\r\n    ApplicationModel model = getModel();\r\n    mi = m.add(model.getAction(MinimizeAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(MaximizeAction.ID));\r\n    mi.setIcon(null);\r\n}'),(47,'View p','org.jhotdraw.app.View',15,8,'org.jhotdraw.app.DefaultOSXApplication',151,'org.jhotdraw.app.DefaultOSXApplication.createFileMenu(org.jhotdraw.app.View)',0,'protected JMenu createFileMenu(View p) {\r\n    // ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ApplicationModel model = getModel();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"file\");\r\n    mi = m.add(model.getAction(NewAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(OpenAction.ID));\r\n    mi.setIcon(null);\r\n    if ((model.getAction(OpenDirectoryAction.ID)) != null) {\r\n        mi = m.add(model.getAction(OpenDirectoryAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    openRecentMenu = new JMenu();\r\n    labels.configureMenu(openRecentMenu, \"file.openRecent\");\r\n    openRecentMenu.setIcon(null);\r\n    openRecentMenu.add(model.getAction(ClearRecentFilesAction.ID));\r\n    updateOpenRecentMenu(openRecentMenu);\r\n    m.add(openRecentMenu);\r\n    m.addSeparator();\r\n    mi = m.add(model.getAction(CloseAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(SaveAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(SaveAsAction.ID));\r\n    mi.setIcon(null);\r\n    if ((model.getAction(ExportAction.ID)) != null) {\r\n        mi = m.add(model.getAction(ExportAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    if ((model.getAction(PrintAction.ID)) != null) {\r\n        m.addSeparator();\r\n        mi = m.add(model.getAction(PrintAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name == \"recentFiles\") {\r\n                updateOpenRecentMenu(openRecentMenu);\r\n            }\r\n        }\r\n    });\r\n    return m;\r\n}'),(48,'View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',184,'org.jhotdraw.app.DefaultSDIApplication.remove(org.jhotdraw.app.View)',0,'@Override\r\npublic void remove(View p) {\r\n    super.remove(p);\r\n    if ((views().size()) == 0) {\r\n        stop();\r\n    }\r\n}'),(49,'View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',181,'org.jhotdraw.app.DefaultSDIApplication.initViewActions(org.jhotdraw.app.View)',0,'protected void initViewActions(View p) {\r\n    ApplicationModel m = getModel();\r\n    p.putAction(LoadAction.ID, m.getAction(LoadAction.ID));\r\n}'),(50,'final View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',185,'org.jhotdraw.app.DefaultSDIApplication.show(org.jhotdraw.app.View)',0,'@SuppressWarnings(\"unchecked\")\r\npublic void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JFrame f = new JFrame();\r\n        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n        updateViewTitle(p, f);\r\n        JPanel panel = ((JPanel) (wrapViewComponent(p)));\r\n        f.add(panel);\r\n        f.setMinimumSize(new Dimension(200, 200));\r\n        f.setPreferredSize(new Dimension(600, 400));\r\n        f.setJMenuBar(createMenuBar(p, ((List<Action>) (panel.getClientProperty(\"toolBarActions\")))));\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"view\", f);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && ((SwingUtilities.getWindowAncestor(aView.getComponent())) != null)) && (SwingUtilities.getWindowAncestor(aView.getComponent()).getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        f.addWindowListener(new WindowAdapter() {\r\n            public void windowClosing(final WindowEvent evt) {\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void windowClosed(final WindowEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n\r\n            public void windowActivated(WindowEvent e) {\r\n                setActiveView(p);\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (((name.equals(View.HAS_UNSAVED_CHANGES_PROPERTY)) || (name.equals(View.FILE_PROPERTY))) || (name.equals(View.MULTIPLE_OPEN_ID_PROPERTY))) {\r\n                    updateViewTitle(p, f);\r\n                }\r\n            }\r\n        });\r\n        f.setVisible(true);\r\n        p.start();\r\n    }\r\n}'),(51,'View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',188,'org.jhotdraw.app.DefaultSDIApplication.wrapViewComponent(org.jhotdraw.app.View)',0,'/**\r\n * Returns the view component. Eventually wraps it into\r\n * another component in order to provide additional functionality.\r\n */\r\nprotected Component wrapViewComponent(View p) {\r\n    JComponent c = p.getComponent();\r\n    if ((getModel()) != null) {\r\n        LinkedList<Action> toolBarActions = new LinkedList<Action>();\r\n        int id = 0;\r\n        for (JToolBar tb : new ReversedList<JToolBar>(getModel().createToolBars(this, p))) {\r\n            id++;\r\n            JPanel panel = new JPanel(new BorderLayout());\r\n            panel.add(tb, BorderLayout.NORTH);\r\n            panel.add(c, BorderLayout.CENTER);\r\n            c = panel;\r\n            PreferencesUtil.installToolBarPrefsHandler(prefs, (\"toolbar.\" + id), tb);\r\n            toolBarActions.addFirst(new ToggleVisibleAction(tb, tb.getName()));\r\n        }\r\n        c.putClientProperty(\"toolBarActions\", toolBarActions);\r\n    }\r\n    return c;\r\n}'),(52,'View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',177,'org.jhotdraw.app.DefaultSDIApplication.hide(org.jhotdraw.app.View)',0,'public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        p.setShowing(false);\r\n        JFrame f = ((JFrame) (SwingUtilities.getWindowAncestor(p.getComponent())));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        f.dispose();\r\n    }\r\n}'),(53,'View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',175,'org.jhotdraw.app.DefaultSDIApplication.dispose(org.jhotdraw.app.View)',0,'public void dispose(View p) {\r\n    super.dispose(p);\r\n    if ((views().size()) == 0) {\r\n        stop();\r\n    }\r\n}'),(54,'final View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',173,'org.jhotdraw.app.DefaultSDIApplication.createMenuBar(org.jhotdraw.app.View,java.util.List)',0,'/**\r\n * The view menu bar is displayed for a view.\r\n * The default implementation returns a new screen menu bar.\r\n */\r\nprotected JMenuBar createMenuBar(final View p, List<Action> toolBarActions) {\r\n    JMenuBar mb = new JMenuBar();\r\n    mb.add(createFileMenu(p));\r\n    JMenu lastMenu = null;\r\n    for (JMenu mm : getModel().createMenus(this, p)) {\r\n        mb.add(mm);\r\n        lastMenu = mm;\r\n    }\r\n    JMenu viewMenu = createViewMenu(p, toolBarActions);\r\n    if (viewMenu != null) {\r\n        if ((lastMenu != null) && (lastMenu.getText().equals(viewMenu.getText()))) {\r\n            for (Component c : lastMenu.getMenuComponents()) {\r\n                viewMenu.add(c);\r\n            }\r\n            mb.remove(lastMenu);\r\n        }\r\n        mb.add(viewMenu);\r\n    }\r\n    // Merge the help menu if one has been provided by the application model,\r\n    // otherwise just add it.\r\n    JMenu helpMenu = createHelpMenu(p);\r\n    for (Component mc : mb.getComponents()) {\r\n        JMenu m = ((JMenu) (mc));\r\n        if (m.getText().equals(helpMenu.getText())) {\r\n            for (Component c : helpMenu.getMenuComponents()) {\r\n                m.add(c);\r\n            }\r\n            helpMenu = null;\r\n            break;\r\n        }\r\n    }\r\n    if (helpMenu != null) {\r\n        mb.add(helpMenu);\r\n    }\r\n    return mb;\r\n}'),(55,'final View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',171,'org.jhotdraw.app.DefaultSDIApplication.createFileMenu(org.jhotdraw.app.View)',0,'protected JMenu createFileMenu(final View p) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenuBar mb = new JMenuBar();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"file\");\r\n    m.add(model.getAction(ClearAction.ID));\r\n    m.add(model.getAction(NewAction.ID));\r\n    m.add(model.getAction(LoadAction.ID));\r\n    if ((model.getAction(LoadDirectoryAction.ID)) != null) {\r\n        m.add(model.getAction(LoadDirectoryAction.ID));\r\n    }\r\n    openRecentMenu = new JMenu();\r\n    labels.configureMenu(openRecentMenu, \"file.openRecent\");\r\n    openRecentMenu.add(model.getAction(ClearRecentFilesAction.ID));\r\n    updateOpenRecentMenu(openRecentMenu);\r\n    m.add(openRecentMenu);\r\n    m.addSeparator();\r\n    m.add(model.getAction(SaveAction.ID));\r\n    m.add(model.getAction(SaveAsAction.ID));\r\n    if ((model.getAction(ExportAction.ID)) != null) {\r\n        mi = m.add(model.getAction(ExportAction.ID));\r\n    }\r\n    if ((model.getAction(PrintAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(model.getAction(PrintAction.ID));\r\n    }\r\n    m.addSeparator();\r\n    m.add(model.getAction(ExitAction.ID));\r\n    mb.add(m);\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name == \"viewCount\") {\r\n                if ((p == null) || (views().contains(p))) {\r\n                } else {\r\n                    removePropertyChangeListener(this);\r\n                }\r\n            } else\r\n                if (name == \"recentFiles\") {\r\n                    updateOpenRecentMenu(openRecentMenu);\r\n                }\r\n\r\n        }\r\n    });\r\n    return m;\r\n}'),(56,'View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',187,'org.jhotdraw.app.DefaultSDIApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JFrame)',0,'/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param p\r\n * 		The view.\r\n * @param f\r\n * 		The frame.\r\n */\r\nprotected void updateViewTitle(View p, JFrame f) {\r\n    File file = p.getFile();\r\n    String title;\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    if (p.hasUnsavedChanges()) {\r\n        title += \"*\";\r\n    }\r\n    p.setTitle(labels.getFormatted(\"frame.title\", title, getName(), p.getMultipleOpenId()));\r\n    f.setTitle(p.getTitle());\r\n}'),(57,'final View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',174,'org.jhotdraw.app.DefaultSDIApplication.createViewMenu(org.jhotdraw.app.View,java.util.List)',0,'/**\r\n * Creates the view menu.\r\n *\r\n * @param p\r\n * 		The View\r\n * @param viewActions\r\n * 		Actions for the view menu\r\n * @return A JMenu or null, if no view actions are provided\r\n */\r\nprotected JMenu createViewMenu(final View p, List<Action> viewActions) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JCheckBoxMenuItem cbmi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    if ((viewActions != null) && ((viewActions.size()) > 0)) {\r\n        m2 = ((viewActions.size()) == 1) ? m : new JMenu(labels.getString(\"toolBars\"));\r\n        labels.configureMenu(m, \"view\");\r\n        for (Action a : viewActions) {\r\n            cbmi = new JCheckBoxMenuItem(a);\r\n            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n            m2.add(cbmi);\r\n        }\r\n        if (m2 != m) {\r\n            m.add(m2);\r\n        }\r\n    }\r\n    return (m.getComponentCount()) > 0 ? m : null;\r\n}'),(58,'View p','org.jhotdraw.app.View',15,9,'org.jhotdraw.app.DefaultSDIApplication',172,'org.jhotdraw.app.DefaultSDIApplication.createHelpMenu(org.jhotdraw.app.View)',0,'protected JMenu createHelpMenu(View p) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"help\");\r\n    m.add(model.getAction(AboutAction.ID));\r\n    return m;\r\n}'),(59,'DefaultOSXApplication app','org.jhotdraw.app.DefaultOSXApplication',8,13,'org.jhotdraw.app.OSXPaletteHandler',197,'org.jhotdraw.app.OSXPaletteHandler.-init-(org.jhotdraw.app.DefaultOSXApplication)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic OSXPaletteHandler(DefaultOSXApplication app) {\r\n    this.app = app;\r\n    timer = new Timer(60, new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            maybeHidePalettes();\r\n        }\r\n    });\r\n    timer.setRepeats(false);\r\n}'),(60,'View view','org.jhotdraw.app.View',15,13,'org.jhotdraw.app.OSXPaletteHandler',198,'org.jhotdraw.app.OSXPaletteHandler.add(java.awt.Window,org.jhotdraw.app.View)',0,'public void add(Window window, View view) {\r\n    window.addWindowFocusListener(focusHandler);\r\n    windows.put(window, view);\r\n}'),(61,'Application newValue','org.jhotdraw.app.Application',3,15,'org.jhotdraw.app.View',232,'org.jhotdraw.app.View.setApplication(org.jhotdraw.app.Application)',0,'/**\r\n * Sets the application of the view.\r\n * By convention, this is only invoked by Application.add() and\r\n * Application.remove().\r\n * This is a bound property.\r\n */\r\npublic void setApplication(Application newValue);'),(62,'Application app','org.jhotdraw.app.Application',3,16,'org.jhotdraw.app.action.AboutAction',241,'org.jhotdraw.app.action.AboutAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AboutAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, AboutAction.ID);\r\n}'),(63,'Application app','org.jhotdraw.app.Application',3,17,'org.jhotdraw.app.action.AbstractApplicationAction',243,'org.jhotdraw.app.action.AbstractApplicationAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractApplicationAction(Application app) {\r\n    this.app = app;\r\n    installApplicationListeners(app);\r\n    updateApplicationEnabled();\r\n}'),(64,'Application app','org.jhotdraw.app.Application',3,17,'org.jhotdraw.app.action.AbstractApplicationAction',247,'org.jhotdraw.app.action.AbstractApplicationAction.installApplicationListeners(org.jhotdraw.app.Application)',0,'/**\r\n * Installs listeners on the application object.\r\n */\r\nprotected void installApplicationListeners(Application app) {\r\n    if ((applicationListener) == null) {\r\n        applicationListener = createApplicationListener();\r\n    }\r\n    app.addPropertyChangeListener(applicationListener);\r\n}'),(65,'Application app','org.jhotdraw.app.Application',3,17,'org.jhotdraw.app.action.AbstractApplicationAction',250,'org.jhotdraw.app.action.AbstractApplicationAction.uninstallApplicationListeners(org.jhotdraw.app.Application)',0,'/**\r\n * Installs listeners on the application object.\r\n */\r\nprotected void uninstallApplicationListeners(Application app) {\r\n    app.removePropertyChangeListener(applicationListener);\r\n}'),(66,'Application app','org.jhotdraw.app.Application',3,18,'org.jhotdraw.app.action.AbstractSaveBeforeAction',252,'org.jhotdraw.app.action.AbstractSaveBeforeAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractSaveBeforeAction(Application app) {\r\n    super(app);\r\n}'),(67,'final View p','org.jhotdraw.app.View',15,18,'org.jhotdraw.app.action.AbstractSaveBeforeAction',257,'org.jhotdraw.app.action.AbstractSaveBeforeAction.saveChanges(org.jhotdraw.app.View)',0,'protected void saveChanges(final View p) {\r\n    if ((p.getFile()) == null) {\r\n        JFileChooser fileChooser = p.getSaveChooser();\r\n        // int option = fileChooser.showSaveDialog(this);\r\n        JSheet.showSaveSheet(fileChooser, p.getComponent(), new SheetListener() {\r\n            public void optionSelected(final SheetEvent evt) {\r\n                if ((evt.getOption()) == (JFileChooser.APPROVE_OPTION)) {\r\n                    final File file;\r\n                    if ((evt.getFileChooser().getFileFilter()) instanceof ExtensionFileFilter) {\r\n                        file = ((ExtensionFileFilter) (evt.getFileChooser().getFileFilter())).makeAcceptable(evt.getFileChooser().getSelectedFile());\r\n                    } else {\r\n                        file = evt.getFileChooser().getSelectedFile();\r\n                    }\r\n                    saveToFile(p, file);\r\n                } else {\r\n                    p.setEnabled(true);\r\n                    if ((oldFocusOwner) != null) {\r\n                        oldFocusOwner.requestFocus();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        saveToFile(p, p.getFile());\r\n    }\r\n}'),(68,'final View p','org.jhotdraw.app.View',15,18,'org.jhotdraw.app.action.AbstractSaveBeforeAction',258,'org.jhotdraw.app.action.AbstractSaveBeforeAction.saveToFile(org.jhotdraw.app.View,java.io.File)',0,'protected void saveToFile(final View p, final File file) {\r\n    p.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                p.write(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileSaved(p, file, value);\r\n        }\r\n    });\r\n}'),(69,'View p','org.jhotdraw.app.View',15,18,'org.jhotdraw.app.action.AbstractSaveBeforeAction',256,'org.jhotdraw.app.action.AbstractSaveBeforeAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)',0,'protected void fileSaved(View p, File file, Object value) {\r\n    if (value == null) {\r\n        p.setFile(file);\r\n        p.markChangesAsSaved();\r\n        doIt(p);\r\n    } else {\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n        } else {\r\n            message = value.toString();\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(getActiveView().getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.saveBefore.couldntSave.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    p.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}'),(70,'View p','org.jhotdraw.app.View',15,18,'org.jhotdraw.app.action.AbstractSaveBeforeAction',255,'org.jhotdraw.app.action.AbstractSaveBeforeAction.doIt(org.jhotdraw.app.View)',0,'protected abstract void doIt(View p);'),(71,'Application app','org.jhotdraw.app.Application',3,19,'org.jhotdraw.app.action.AbstractViewAction',260,'org.jhotdraw.app.action.AbstractViewAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractViewAction(Application app) {\r\n    this.app = app;\r\n    this.enabled = true;\r\n    if (app != null) {\r\n        app.addPropertyChangeListener(applicationListener);\r\n        updateView(null, app.getActiveView());\r\n    }\r\n}'),(72,'View oldValue','org.jhotdraw.app.View',15,19,'org.jhotdraw.app.action.AbstractViewAction',271,'org.jhotdraw.app.action.AbstractViewAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)',0,'/**\r\n * Updates the listeners of this action depending on the current view\r\n * of the application.\r\n */\r\nprotected void updateView(View oldValue, View newValue) {\r\n    if (oldValue != null) {\r\n        uninstallViewListeners(oldValue);\r\n    }\r\n    if (newValue != null) {\r\n        installViewListeners(newValue);\r\n    }\r\n    firePropertyChange(AbstractViewAction.VIEW_PROPERTY, oldValue, newValue);\r\n    updateEnabled(((oldValue != null) && (oldValue.isEnabled())), ((newValue != null) && (newValue.isEnabled())));\r\n    updateView();\r\n}'),(73,'View newValue','org.jhotdraw.app.View',15,19,'org.jhotdraw.app.action.AbstractViewAction',271,'org.jhotdraw.app.action.AbstractViewAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)',0,'/**\r\n * Updates the listeners of this action depending on the current view\r\n * of the application.\r\n */\r\nprotected void updateView(View oldValue, View newValue) {\r\n    if (oldValue != null) {\r\n        uninstallViewListeners(oldValue);\r\n    }\r\n    if (newValue != null) {\r\n        installViewListeners(newValue);\r\n    }\r\n    firePropertyChange(AbstractViewAction.VIEW_PROPERTY, oldValue, newValue);\r\n    updateEnabled(((oldValue != null) && (oldValue.isEnabled())), ((newValue != null) && (newValue.isEnabled())));\r\n    updateView();\r\n}'),(74,'View p','org.jhotdraw.app.View',15,19,'org.jhotdraw.app.action.AbstractViewAction',264,'org.jhotdraw.app.action.AbstractViewAction.installViewListeners(org.jhotdraw.app.View)',0,'/**\r\n * Installs listeners on the view object.\r\n */\r\nprotected void installViewListeners(View p) {\r\n    p.addPropertyChangeListener(viewListener);\r\n}'),(75,'View p','org.jhotdraw.app.View',15,19,'org.jhotdraw.app.action.AbstractViewAction',268,'org.jhotdraw.app.action.AbstractViewAction.uninstallViewListeners(org.jhotdraw.app.View)',0,'/**\r\n * Uninstalls listeners on the view object.\r\n */\r\nprotected void uninstallViewListeners(View p) {\r\n    p.removePropertyChangeListener(viewListener);\r\n}'),(76,'Arrangeable arrangeable','org.jhotdraw.gui.Arrangeable',365,21,'org.jhotdraw.app.action.ArrangeAction',275,'org.jhotdraw.app.action.ArrangeAction.-init-(org.jhotdraw.gui.Arrangeable,org.jhotdraw.gui.Arrangeable$Arrangement)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ArrangeAction(Arrangeable arrangeable, Arrangeable.Arrangement arrangement) {\r\n    this.arrangeable = arrangeable;\r\n    this.arrangement = arrangement;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    String labelID;\r\n    switch (arrangement) {\r\n        case VERTICAL :\r\n            labelID = ArrangeAction.VERTICAL_ID;\r\n            break;\r\n        case HORIZONTAL :\r\n            labelID = ArrangeAction.HORIZONTAL_ID;\r\n            break;\r\n        case CASCADE :\r\n        default :\r\n            labelID = ArrangeAction.CASCADE_ID;\r\n            break;\r\n    }\r\n    labels.configureAction(this, labelID);\r\n}'),(77,'Arrangeable.Arrangement arrangement','org.jhotdraw.gui.Arrangeable$Arrangement',364,21,'org.jhotdraw.app.action.ArrangeAction',275,'org.jhotdraw.app.action.ArrangeAction.-init-(org.jhotdraw.gui.Arrangeable,org.jhotdraw.gui.Arrangeable$Arrangement)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ArrangeAction(Arrangeable arrangeable, Arrangeable.Arrangement arrangement) {\r\n    this.arrangeable = arrangeable;\r\n    this.arrangement = arrangement;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    String labelID;\r\n    switch (arrangement) {\r\n        case VERTICAL :\r\n            labelID = ArrangeAction.VERTICAL_ID;\r\n            break;\r\n        case HORIZONTAL :\r\n            labelID = ArrangeAction.HORIZONTAL_ID;\r\n            break;\r\n        case CASCADE :\r\n        default :\r\n            labelID = ArrangeAction.CASCADE_ID;\r\n            break;\r\n    }\r\n    labels.configureAction(this, labelID);\r\n}'),(78,'Application app','org.jhotdraw.app.Application',3,22,'org.jhotdraw.app.action.ClearAction',277,'org.jhotdraw.app.action.ClearAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ClearAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.new\");\r\n}'),(79,'final View view','org.jhotdraw.app.View',15,22,'org.jhotdraw.app.action.ClearAction',279,'org.jhotdraw.app.action.ClearAction.doIt(org.jhotdraw.app.View)',0,'@Override\r\npublic void doIt(final View view) {\r\n    view.setEnabled(false);\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            view.clear();\r\n            return null;\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            view.setEnabled(true);\r\n        }\r\n    });\r\n}'),(80,'Application app','org.jhotdraw.app.Application',3,23,'org.jhotdraw.app.action.ClearRecentFilesAction',280,'org.jhotdraw.app.action.ClearRecentFilesAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ClearRecentFilesAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ClearRecentFilesAction.ID);\r\n    updateEnabled();\r\n}'),(81,'Application app','org.jhotdraw.app.Application',3,23,'org.jhotdraw.app.action.ClearRecentFilesAction',284,'org.jhotdraw.app.action.ClearRecentFilesAction.installApplicationListeners(org.jhotdraw.app.Application)',0,'/**\r\n * Installs listeners on the application object.\r\n */\r\n@Override\r\nprotected void installApplicationListeners(Application app) {\r\n    super.installApplicationListeners(app);\r\n    if ((applicationListener) == null) {\r\n        applicationListener = createApplicationListener();\r\n    }\r\n    app.addPropertyChangeListener(applicationListener);\r\n}'),(82,'Application app','org.jhotdraw.app.Application',3,23,'org.jhotdraw.app.action.ClearRecentFilesAction',285,'org.jhotdraw.app.action.ClearRecentFilesAction.uninstallApplicationListeners(org.jhotdraw.app.Application)',0,'/**\r\n * Installs listeners on the application object.\r\n */\r\n@Override\r\nprotected void uninstallApplicationListeners(Application app) {\r\n    super.uninstallApplicationListeners(app);\r\n    app.removePropertyChangeListener(applicationListener);\r\n}'),(83,'Application app','org.jhotdraw.app.Application',3,25,'org.jhotdraw.app.action.CloseAction',289,'org.jhotdraw.app.action.CloseAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic CloseAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, CloseAction.ID);\r\n}'),(84,'View view','org.jhotdraw.app.View',15,25,'org.jhotdraw.app.action.CloseAction',290,'org.jhotdraw.app.action.CloseAction.doIt(org.jhotdraw.app.View)',0,'@Override\r\nprotected void doIt(View view) {\r\n    if ((view != null) && ((view.getApplication()) != null)) {\r\n        view.getApplication().dispose(view);\r\n    }\r\n}'),(85,'Application app','org.jhotdraw.app.Application',3,30,'org.jhotdraw.app.action.ExitAction',300,'org.jhotdraw.app.action.ExitAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ExitAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ExitAction.ID);\r\n}'),(86,'View unsavedView','org.jhotdraw.app.View',15,30,'org.jhotdraw.app.action.ExitAction',304,'org.jhotdraw.app.action.ExitAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)',0,'protected void fileSaved(View unsavedView, File file, Object value) {\r\n    if (value == null) {\r\n        unsavedView.setFile(file);\r\n        doExit();\r\n    } else {\r\n        JSheet.showMessageSheet(unsavedView.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 save to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    unsavedView.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n    getApplication().setEnabled(true);\r\n}'),(87,'View unsavedView','org.jhotdraw.app.View',15,30,'org.jhotdraw.app.action.ExitAction',305,'org.jhotdraw.app.action.ExitAction.fileSavedAndReviewNext(org.jhotdraw.app.View,java.io.File,java.lang.Object)',0,'protected void fileSavedAndReviewNext(View unsavedView, File file, Object value) {\r\n    if (value == null) {\r\n        unsavedView.setFile(file);\r\n        getApplication().dispose(unsavedView);\r\n        reviewNext();\r\n        return;\r\n    } else {\r\n        JSheet.showMessageSheet(unsavedView.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 save to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    unsavedView.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n    getApplication().setEnabled(true);\r\n}'),(88,'Application app','org.jhotdraw.app.Application',3,31,'org.jhotdraw.app.action.ExportAction',312,'org.jhotdraw.app.action.ExportAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ExportAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ExportAction.ID);\r\n}'),(89,'final ExportableView view','org.jhotdraw.app.ExportableView',12,31,'org.jhotdraw.app.action.ExportAction',315,'org.jhotdraw.app.action.ExportAction.exportToFile(org.jhotdraw.app.ExportableView,java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)',0,'protected void exportToFile(final ExportableView view, final File file, final FileFilter filter, final Component accessory) {\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.export(file, filter, accessory);\r\n                return null;\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileExported(view, file, value);\r\n        }\r\n    });\r\n}'),(90,'ExportableView view','org.jhotdraw.app.ExportableView',12,31,'org.jhotdraw.app.action.ExportAction',316,'org.jhotdraw.app.action.ExportAction.fileExported(org.jhotdraw.app.ExportableView,java.io.File,java.lang.Object)',0,'protected void fileExported(ExportableView view, File file, Object value) {\r\n    if (value != null) {\r\n        System.out.flush();\r\n        ((Throwable) (value)).printStackTrace();\r\n        // FIXME localize this error messsage\r\n        JSheet.showMessageSheet(view.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 export to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    view.setEnabled(true);\r\n    SwingUtilities.getWindowAncestor(view.getComponent()).toFront();\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}'),(91,'Application app','org.jhotdraw.app.Application',3,32,'org.jhotdraw.app.action.FindAction',317,'org.jhotdraw.app.action.FindAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic FindAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, FindAction.ID);\r\n}'),(92,'View view','org.jhotdraw.app.View',15,33,'org.jhotdraw.app.action.FocusAction',319,'org.jhotdraw.app.action.FocusAction.-init-(org.jhotdraw.app.View)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic FocusAction(View view) {\r\n    this.view = view;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, FocusAction.ID);\r\n    // setEnabled(false);\r\n    setEnabled((view != null));\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n            String name = evt.getPropertyName();\r\n            if (name.equals(View.FILE_PROPERTY)) {\r\n                putValue(Action.NAME, ((evt.getNewValue()) == null ? labels.getString(\"unnamedFile\") : ((File) (evt.getNewValue())).getName()));\r\n            }\r\n        }\r\n    });\r\n}'),(93,'Application app','org.jhotdraw.app.Application',3,34,'org.jhotdraw.app.action.LoadAction',326,'org.jhotdraw.app.action.LoadAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic LoadAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.open\");\r\n}'),(94,'View view','org.jhotdraw.app.View',15,34,'org.jhotdraw.app.action.LoadAction',330,'org.jhotdraw.app.action.LoadAction.getFileChooser(org.jhotdraw.app.View)',0,'protected JFileChooser getFileChooser(View view) {\r\n    return view.getOpenChooser();\r\n}'),(95,'View view','org.jhotdraw.app.View',15,34,'org.jhotdraw.app.action.LoadAction',328,'org.jhotdraw.app.action.LoadAction.doIt(org.jhotdraw.app.View)',0,'public void doIt(View view) {\r\n    JFileChooser fileChooser = getFileChooser(view);\r\n    if ((fileChooser.showOpenDialog(view.getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n        openFile(view, fileChooser);\r\n    } else {\r\n        view.setEnabled(true);\r\n    }\r\n}'),(96,'final View view','org.jhotdraw.app.View',15,34,'org.jhotdraw.app.action.LoadAction',331,'org.jhotdraw.app.action.LoadAction.openFile(org.jhotdraw.app.View,javax.swing.JFileChooser)',0,'protected void openFile(final View view, JFileChooser fileChooser) {\r\n    final File file = fileChooser.getSelectedFile();\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.read(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}'),(97,'final View view','org.jhotdraw.app.View',15,34,'org.jhotdraw.app.action.LoadAction',329,'org.jhotdraw.app.action.LoadAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)',0,'protected void fileOpened(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        getApplication().addRecentFile(file);\r\n    } else {\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 open the file \"\") + file) + \"\".</b><br>\") + value), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                view.clear();\r\n                view.setEnabled(true);\r\n            }\r\n        });\r\n    }\r\n}'),(98,'Application app','org.jhotdraw.app.Application',3,35,'org.jhotdraw.app.action.LoadDirectoryAction',332,'org.jhotdraw.app.action.LoadDirectoryAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic LoadDirectoryAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.openDirectory\");\r\n}'),(99,'View view','org.jhotdraw.app.View',15,35,'org.jhotdraw.app.action.LoadDirectoryAction',333,'org.jhotdraw.app.action.LoadDirectoryAction.getFileChooser(org.jhotdraw.app.View)',0,'@Override\r\nprotected JFileChooser getFileChooser(View view) {\r\n    return ((DirectoryView) (view)).getOpenDirectoryChooser();\r\n}'),(100,'Application app','org.jhotdraw.app.Application',3,36,'org.jhotdraw.app.action.LoadRecentAction',334,'org.jhotdraw.app.action.LoadRecentAction.-init-(org.jhotdraw.app.Application,java.io.File)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic LoadRecentAction(Application app, File file) {\r\n    super(app);\r\n    this.file = file;\r\n    putValue(Action.NAME, file.getName());\r\n}'),(101,'final View view','org.jhotdraw.app.View',15,36,'org.jhotdraw.app.action.LoadRecentAction',336,'org.jhotdraw.app.action.LoadRecentAction.doIt(org.jhotdraw.app.View)',0,'public void doIt(final View view) {\r\n    final Application app = getApplication();\r\n    app.setEnabled(true);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.read(file);\r\n                return null;\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}'),(102,'final View view','org.jhotdraw.app.View',15,36,'org.jhotdraw.app.action.LoadRecentAction',337,'org.jhotdraw.app.action.LoadRecentAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)',0,'protected void fileOpened(final View view, File file, Object value) {\r\n    final Application app = getApplication();\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.getComponent().requestFocus();\r\n        if (app != null) {\r\n            app.setEnabled(true);\r\n        }\r\n    } else {\r\n        if (value instanceof Throwable) {\r\n            ((Throwable) (value)).printStackTrace();\r\n        }\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn	 open the file \"\") + file) + \"\".</b><br>\") + value), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                // app.dispose(view);\r\n            }\r\n        });\r\n    }\r\n}'),(103,'Application app','org.jhotdraw.app.Application',3,37,'org.jhotdraw.app.action.MaximizeAction',338,'org.jhotdraw.app.action.MaximizeAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic MaximizeAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, MaximizeAction.ID);\r\n}'),(104,'Application app','org.jhotdraw.app.Application',3,38,'org.jhotdraw.app.action.MinimizeAction',341,'org.jhotdraw.app.action.MinimizeAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic MinimizeAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, MinimizeAction.ID);\r\n}'),(105,'Application app','org.jhotdraw.app.Application',3,39,'org.jhotdraw.app.action.NewAction',344,'org.jhotdraw.app.action.NewAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic NewAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, NewAction.ID);\r\n}'),(106,'Application app','org.jhotdraw.app.Application',3,40,'org.jhotdraw.app.action.OSXDropOnDockAction',347,'org.jhotdraw.app.action.OSXDropOnDockAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic OSXDropOnDockAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    putValue(Action.NAME, \"OSX Drop On Dock\");\r\n}'),(107,'DefaultOSXApplication app','org.jhotdraw.app.DefaultOSXApplication',8,41,'org.jhotdraw.app.action.OSXTogglePaletteAction',350,'org.jhotdraw.app.action.OSXTogglePaletteAction.-init-(org.jhotdraw.app.DefaultOSXApplication,java.awt.Window,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic OSXTogglePaletteAction(DefaultOSXApplication app, Window palette, String label) {\r\n    super(label);\r\n    this.app = app;\r\n    windowHandler = new WindowAdapter() {\r\n        public void windowClosing(WindowEvent evt) {\r\n            putValue(Actions.SELECTED_KEY, false);\r\n        }\r\n    };\r\n    setPalette(palette);\r\n    putValue(Actions.SELECTED_KEY, true);\r\n}'),(108,'Application app','org.jhotdraw.app.Application',3,42,'org.jhotdraw.app.action.OpenAction',355,'org.jhotdraw.app.action.OpenAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic OpenAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, OpenAction.ID);\r\n}'),(109,'View view','org.jhotdraw.app.View',15,42,'org.jhotdraw.app.action.OpenAction',359,'org.jhotdraw.app.action.OpenAction.getFileChooser(org.jhotdraw.app.View)',0,'protected JFileChooser getFileChooser(View view) {\r\n    return view.getOpenChooser();\r\n}'),(110,'final View view','org.jhotdraw.app.View',15,42,'org.jhotdraw.app.action.OpenAction',360,'org.jhotdraw.app.action.OpenAction.openFile(javax.swing.JFileChooser,org.jhotdraw.app.View)',0,'protected void openFile(JFileChooser fileChooser, final View view) {\r\n    final Application app = getApplication();\r\n    final File file = fileChooser.getSelectedFile();\r\n    app.setEnabled(true);\r\n    view.setEnabled(false);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                if (file.exists()) {\r\n                    view.read(file);\r\n                    return null;\r\n                } else {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n                    return new IOException(labels.getFormatted(\"file.open.fileDoesNotExist.message\", file.getName()));\r\n                }\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}'),(111,'final View view','org.jhotdraw.app.View',15,42,'org.jhotdraw.app.action.OpenAction',358,'org.jhotdraw.app.action.OpenAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)',0,'protected void fileOpened(final View view, File file, Object value) {\r\n    final Application app = getApplication();\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.getComponent().requestFocus();\r\n        app.addRecentFile(file);\r\n        app.setEnabled(true);\r\n    } else {\r\n        view.setEnabled(true);\r\n        app.setEnabled(true);\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n            ((Throwable) (value)).printStackTrace();\r\n        } else\r\n            if (value instanceof Throwable) {\r\n                message = value.toString();\r\n                ((Throwable) (value)).printStackTrace();\r\n            } else {\r\n                message = value.toString();\r\n            }\r\n\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.open.couldntOpen.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n}'),(112,'Application app','org.jhotdraw.app.Application',3,43,'org.jhotdraw.app.action.OpenDirectoryAction',361,'org.jhotdraw.app.action.OpenDirectoryAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic OpenDirectoryAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, OpenDirectoryAction.ID);\r\n}'),(113,'View view','org.jhotdraw.app.View',15,43,'org.jhotdraw.app.action.OpenDirectoryAction',362,'org.jhotdraw.app.action.OpenDirectoryAction.getFileChooser(org.jhotdraw.app.View)',0,'@Override\r\nprotected JFileChooser getFileChooser(View view) {\r\n    return ((DirectoryView) (view)).getOpenDirectoryChooser();\r\n}'),(114,'Application app','org.jhotdraw.app.Application',3,44,'org.jhotdraw.app.action.OpenRecentAction',363,'org.jhotdraw.app.action.OpenRecentAction.-init-(org.jhotdraw.app.Application,java.io.File)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic OpenRecentAction(Application app, File file) {\r\n    super(app);\r\n    this.file = file;\r\n    putValue(Action.NAME, file.getName());\r\n}'),(115,'final View view','org.jhotdraw.app.View',15,44,'org.jhotdraw.app.action.OpenRecentAction',367,'org.jhotdraw.app.action.OpenRecentAction.openFile(org.jhotdraw.app.View)',0,'protected void openFile(final View view) {\r\n    final Application app = getApplication();\r\n    app.setEnabled(true);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                if (file.exists()) {\r\n                    view.read(file);\r\n                    return null;\r\n                } else {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n                    return new IOException(labels.getFormatted(\"file.open.fileDoesNotExist.message\", file.getName()));\r\n                }\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}'),(116,'final View view','org.jhotdraw.app.View',15,44,'org.jhotdraw.app.action.OpenRecentAction',366,'org.jhotdraw.app.action.OpenRecentAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)',0,'protected void fileOpened(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.setEnabled(true);\r\n        view.getComponent().requestFocus();\r\n    } else {\r\n        String message = null;\r\n        if (value instanceof Throwable) {\r\n            ((Throwable) (value)).printStackTrace();\r\n            message = ((Throwable) (value)).getMessage();\r\n            if (message == null) {\r\n                message = value.toString();\r\n            }\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.open.couldntOpen.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                view.setEnabled(true);\r\n            }\r\n        });\r\n    }\r\n}'),(117,'Application app','org.jhotdraw.app.Application',3,46,'org.jhotdraw.app.action.PrintAction',370,'org.jhotdraw.app.action.PrintAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PrintAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, PrintAction.ID);\r\n}'),(118,'Application app','org.jhotdraw.app.Application',3,47,'org.jhotdraw.app.action.RedoAction',378,'org.jhotdraw.app.action.RedoAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic RedoAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, RedoAction.ID);\r\n}'),(119,'View oldValue','org.jhotdraw.app.View',15,47,'org.jhotdraw.app.action.RedoAction',384,'org.jhotdraw.app.action.RedoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)',0,'@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(RedoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(RedoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}'),(120,'View newValue','org.jhotdraw.app.View',15,47,'org.jhotdraw.app.action.RedoAction',384,'org.jhotdraw.app.action.RedoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)',0,'@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(RedoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(RedoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}'),(121,'View p','org.jhotdraw.app.View',15,47,'org.jhotdraw.app.action.RedoAction',381,'org.jhotdraw.app.action.RedoAction.installViewListeners(org.jhotdraw.app.View)',0,'/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    if ((p.getAction(RedoAction.ID)) != null) {\r\n        p.getAction(RedoAction.ID).addPropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}'),(122,'View p','org.jhotdraw.app.View',15,47,'org.jhotdraw.app.action.RedoAction',382,'org.jhotdraw.app.action.RedoAction.uninstallViewListeners(org.jhotdraw.app.View)',0,'/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    if ((p.getAction(RedoAction.ID)) != null) {\r\n        p.getAction(RedoAction.ID).removePropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}'),(123,'Application app','org.jhotdraw.app.Application',3,48,'org.jhotdraw.app.action.SaveAction',385,'org.jhotdraw.app.action.SaveAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAction(Application app) {\r\n    this(app, false);\r\n}'),(124,'Application app','org.jhotdraw.app.Application',3,48,'org.jhotdraw.app.action.SaveAction',386,'org.jhotdraw.app.action.SaveAction.-init-(org.jhotdraw.app.Application,boolean)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAction(Application app, boolean saveAs) {\r\n    super(app);\r\n    this.saveAs = saveAs;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, SaveAction.ID);\r\n}'),(125,'final View view','org.jhotdraw.app.View',15,48,'org.jhotdraw.app.action.SaveAction',390,'org.jhotdraw.app.action.SaveAction.saveToFile(org.jhotdraw.app.View,java.io.File)',0,'protected void saveToFile(final View view, final File file) {\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.write(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileSaved(view, file, value);\r\n        }\r\n    });\r\n}'),(126,'final View view','org.jhotdraw.app.View',15,48,'org.jhotdraw.app.action.SaveAction',389,'org.jhotdraw.app.action.SaveAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)',0,'/**\r\n * XXX - Change type of value to Throwable\r\n *\r\n * @param value\r\n * 		is either null for success or a Throwable on failure.\r\n */\r\nprotected void fileSaved(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.markChangesAsSaved();\r\n        int multiOpenId = 1;\r\n        for (View p : view.getApplication().views()) {\r\n            if (((p != view) && ((p.getFile()) != null)) && (p.getFile().equals(file))) {\r\n                multiOpenId = Math.max(multiOpenId, ((p.getMultipleOpenId()) + 1));\r\n            }\r\n        }\r\n        getApplication().addRecentFile(file);\r\n        view.setMultipleOpenId(multiOpenId);\r\n    } else {\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n        } else {\r\n            message = value.toString();\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(getActiveView().getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"couldntSave\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    view.setEnabled(true);\r\n    SwingUtilities.getWindowAncestor(view.getComponent()).toFront();\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}'),(127,'Application app','org.jhotdraw.app.Application',3,49,'org.jhotdraw.app.action.SaveAsAction',391,'org.jhotdraw.app.action.SaveAsAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAsAction(Application app) {\r\n    super(app, true);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, SaveAsAction.ID);\r\n}'),(128,'Application app','org.jhotdraw.app.Application',3,52,'org.jhotdraw.app.action.ToggleViewPropertyAction',400,'org.jhotdraw.app.action.ToggleViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleViewPropertyAction(Application app, String propertyName) {\r\n    this(app, propertyName, Boolean.TYPE, true, false);\r\n}'),(129,'Application app','org.jhotdraw.app.Application',3,52,'org.jhotdraw.app.action.ToggleViewPropertyAction',401,'org.jhotdraw.app.action.ToggleViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Class,java.lang.Object,java.lang.Object)',0,'public ToggleViewPropertyAction(Application app, String propertyName, Class propertyClass, Object selectedPropertyValue, Object deselectedPropertyValue) {\r\n    super(app);\r\n    this.propertyName = propertyName;\r\n    this.parameterClass = new Class[]{ propertyClass };\r\n    this.selectedPropertyValue = selectedPropertyValue;\r\n    this.deselectedPropertyValue = deselectedPropertyValue;\r\n    setterName = (\"set\" + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    getterName = (((propertyClass == (Boolean.TYPE)) || (propertyClass == (Boolean.class)) ? \"is\" : \"get\") + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    updateView();\r\n}'),(130,'View p','org.jhotdraw.app.View',15,52,'org.jhotdraw.app.action.ToggleViewPropertyAction',404,'org.jhotdraw.app.action.ToggleViewPropertyAction.installViewListeners(org.jhotdraw.app.View)',0,'protected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    p.addPropertyChangeListener(viewListener);\r\n    updateView();\r\n}'),(131,'View p','org.jhotdraw.app.View',15,52,'org.jhotdraw.app.action.ToggleViewPropertyAction',405,'org.jhotdraw.app.action.ToggleViewPropertyAction.uninstallViewListeners(org.jhotdraw.app.View)',0,'/**\r\n * Installs listeners on the view object.\r\n */\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    p.removePropertyChangeListener(viewListener);\r\n}'),(132,'Application app','org.jhotdraw.app.Application',3,54,'org.jhotdraw.app.action.UndoAction',411,'org.jhotdraw.app.action.UndoAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic UndoAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, UndoAction.ID);\r\n}'),(133,'View oldValue','org.jhotdraw.app.View',15,54,'org.jhotdraw.app.action.UndoAction',417,'org.jhotdraw.app.action.UndoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)',0,'@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(UndoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(UndoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}'),(134,'View newValue','org.jhotdraw.app.View',15,54,'org.jhotdraw.app.action.UndoAction',417,'org.jhotdraw.app.action.UndoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)',0,'@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(UndoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(UndoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}'),(135,'View p','org.jhotdraw.app.View',15,54,'org.jhotdraw.app.action.UndoAction',414,'org.jhotdraw.app.action.UndoAction.installViewListeners(org.jhotdraw.app.View)',0,'/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    if ((p.getAction(UndoAction.ID)) != null) {\r\n        p.getAction(UndoAction.ID).addPropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}'),(136,'View p','org.jhotdraw.app.View',15,54,'org.jhotdraw.app.action.UndoAction',415,'org.jhotdraw.app.action.UndoAction.uninstallViewListeners(org.jhotdraw.app.View)',0,'/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    if ((p.getAction(UndoAction.ID)) != null) {\r\n        p.getAction(UndoAction.ID).removePropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}'),(137,'Application app','org.jhotdraw.app.Application',3,55,'org.jhotdraw.app.action.ViewPropertyAction',419,'org.jhotdraw.app.action.ViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ViewPropertyAction(Application app, String propertyName, Object propertyValue) {\r\n    this(app, propertyName, propertyValue.getClass(), propertyValue);\r\n}'),(138,'Application app','org.jhotdraw.app.Application',3,55,'org.jhotdraw.app.action.ViewPropertyAction',420,'org.jhotdraw.app.action.ViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Class,java.lang.Object)',0,'public ViewPropertyAction(Application app, String propertyName, Class propertyClass, Object propertyValue) {\r\n    super(app);\r\n    this.propertyName = propertyName;\r\n    this.parameterClass = new Class[]{ propertyClass };\r\n    this.propertyValue = propertyValue;\r\n    setterName = (\"set\" + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    getterName = (((propertyClass == (Boolean.TYPE)) || (propertyClass == (Boolean.class)) ? \"is\" : \"get\") + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    updateSelectedState();\r\n}'),(139,'View p','org.jhotdraw.app.View',15,55,'org.jhotdraw.app.action.ViewPropertyAction',422,'org.jhotdraw.app.action.ViewPropertyAction.installViewListeners(org.jhotdraw.app.View)',0,'@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    p.addPropertyChangeListener(viewListener);\r\n    updateSelectedState();\r\n}'),(140,'View p','org.jhotdraw.app.View',15,55,'org.jhotdraw.app.action.ViewPropertyAction',423,'org.jhotdraw.app.action.ViewPropertyAction.uninstallViewListeners(org.jhotdraw.app.View)',0,'/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    p.removePropertyChangeListener(viewListener);\r\n}'),(141,'ColorSystem newValue','org.jhotdraw.color.ColorSystem',68,64,'org.jhotdraw.color.ColorSliderModel',474,'org.jhotdraw.color.ColorSliderModel.setColorSystem(org.jhotdraw.color.ColorSystem)',0,'/**\r\n * Changes the ColorSystem used by this ColorSliderModel.\r\n *\r\n * @param newValue\r\n * 		ColorSystem.\r\n */\r\npublic void setColorSystem(ColorSystem newValue);'),(142,'CompositeColor newValue','org.jhotdraw.color.CompositeColor',72,64,'org.jhotdraw.color.ColorSliderModel',476,'org.jhotdraw.color.ColorSliderModel.setCompositeColor(org.jhotdraw.color.CompositeColor)',0,'/**\r\n * Sets the composite color value of the model.\r\n *\r\n * @param newValue\r\n * 		.\r\n */\r\npublic void setCompositeColor(CompositeColor newValue);'),(143,'ColorSliderModel colorizer','org.jhotdraw.color.ColorSliderModel',64,69,'org.jhotdraw.color.ColorTrackImageProducer',522,'org.jhotdraw.color.ColorTrackImageProducer.setColorSliderModel(org.jhotdraw.color.ColorSliderModel)',0,'public void setColorSliderModel(ColorSliderModel colorizer) {\r\n    this.colorizer = colorizer;\r\n    isDirty = true;\r\n}'),(144,'ColorSystem sys','org.jhotdraw.color.ColorSystem',68,71,'org.jhotdraw.color.ColorWheelImageProducer',531,'org.jhotdraw.color.ColorWheelImageProducer.-init-(org.jhotdraw.color.ColorSystem,int,int)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ColorWheelImageProducer(ColorSystem sys, int w, int h) {\r\n    super(w, h, null, 0, w);\r\n    pixels = new int[w * h];\r\n    this.w = w;\r\n    this.h = h;\r\n    this.colorSystem = sys;\r\n    setAnimated(true);\r\n    newPixels(pixels, ColorModel.getRGBdefault(), 0, w);\r\n}'),(145,'CompositeColor c','org.jhotdraw.color.CompositeColor',72,71,'org.jhotdraw.color.ColorWheelImageProducer',538,'org.jhotdraw.color.ColorWheelImageProducer.getColorLocation(org.jhotdraw.color.CompositeColor,int,int)',0,'protected Point getColorLocation(CompositeColor c, int width, int height) {\r\n    return getColorLocation(c.getComponents(), width, height);\r\n}'),(146,'ColorSystem system','org.jhotdraw.color.ColorSystem',68,72,'org.jhotdraw.color.CompositeColor',546,'org.jhotdraw.color.CompositeColor.-init-(org.jhotdraw.color.ColorSystem,float[])',0,'public CompositeColor(ColorSystem system, float... components) {\r\n    this.system = system;\r\n    this.components = components.clone();\r\n}'),(147,'ColorSystem system','org.jhotdraw.color.ColorSystem',68,72,'org.jhotdraw.color.CompositeColor',547,'org.jhotdraw.color.CompositeColor.-init-(org.jhotdraw.color.ColorSystem,java.awt.Color)',0,'public CompositeColor(ColorSystem system, Color color) {\r\n    this.system = system;\r\n    this.components = system.toComponents(color.getRGB(), null);\r\n}'),(148,'ColorSystem sys','org.jhotdraw.color.ColorSystem',68,73,'org.jhotdraw.color.DefaultColorSliderModel',556,'org.jhotdraw.color.DefaultColorSliderModel.-init-(org.jhotdraw.color.ColorSystem)',0,'public DefaultColorSliderModel(ColorSystem sys) {\r\n    setColorSystem(sys);\r\n}'),(149,'ColorSystem newValue','org.jhotdraw.color.ColorSystem',68,73,'org.jhotdraw.color.DefaultColorSliderModel',570,'org.jhotdraw.color.DefaultColorSliderModel.setColorSystem(org.jhotdraw.color.ColorSystem)',0,'public void setColorSystem(ColorSystem newValue) {\r\n    ColorSystem oldValue = system;\r\n    system = newValue;\r\n    componentModels = new DefaultBoundedRangeModel[system.getComponentCount()];\r\n    for (int i = 0; i < (componentModels.length); i++) {\r\n        componentModels[i] = new DefaultBoundedRangeModel();\r\n        final int componentIndex = i;\r\n        componentModels[i].addChangeListener(new ChangeListener() {\r\n            public void stateChanged(ChangeEvent e) {\r\n                fireColorChanged(componentIndex);\r\n                fireStateChanged();\r\n            }\r\n        });\r\n    }\r\n}'),(150,'CompositeColor newValue','org.jhotdraw.color.CompositeColor',72,73,'org.jhotdraw.color.DefaultColorSliderModel',572,'org.jhotdraw.color.DefaultColorSliderModel.setCompositeColor(org.jhotdraw.color.CompositeColor)',0,'public void setCompositeColor(CompositeColor newValue) {\r\n    float[] c = newValue.getComponents();\r\n    int i = 0;\r\n    for (DefaultBoundedRangeModel m : componentModels) {\r\n        m.setValue(((int) ((c[i]) * (((m.getMaximum()) - (m.getMinimum())) + (m.getMinimum())))));\r\n        i++;\r\n    }\r\n}'),(151,'CompositeColor newValue','org.jhotdraw.color.CompositeColor',72,74,'org.jhotdraw.color.DefaultHarmonicColorModel',596,'org.jhotdraw.color.DefaultHarmonicColorModel.set(int,org.jhotdraw.color.CompositeColor)',0,'public void set(int index, CompositeColor newValue) {\r\n    (adjusting)++;\r\n    CompositeColor oldValue = colors.set(index, newValue);\r\n    for (HarmonicRule r : rules) {\r\n        r.colorChanged(this, index, oldValue, newValue);\r\n    }\r\n    for (HarmonicRule r : rules) {\r\n        if ((r.getBaseIndex()) == index) {\r\n            r.apply(this);\r\n        }\r\n    }\r\n    (adjusting)--;\r\n    fireContentsChanged(this, index, index);\r\n}'),(152,'CompositeColor c','org.jhotdraw.color.CompositeColor',72,74,'org.jhotdraw.color.DefaultHarmonicColorModel',577,'org.jhotdraw.color.DefaultHarmonicColorModel.add(org.jhotdraw.color.CompositeColor)',0,'public boolean add(CompositeColor c) {\r\n    boolean b = colors.add(c);\r\n    if (b) {\r\n        fireIntervalAdded(this, ((size()) - 1), ((size()) - 1));\r\n    }\r\n    return b;\r\n}'),(153,'HarmonicRule newValue','org.jhotdraw.color.HarmonicRule',82,74,'org.jhotdraw.color.DefaultHarmonicColorModel',580,'org.jhotdraw.color.DefaultHarmonicColorModel.addRule(org.jhotdraw.color.HarmonicRule)',0,'public void addRule(HarmonicRule newValue) {\r\n    rules.add(newValue);\r\n}'),(154,'ColorSystem newValue','org.jhotdraw.color.ColorSystem',68,74,'org.jhotdraw.color.DefaultHarmonicColorModel',598,'org.jhotdraw.color.DefaultHarmonicColorModel.setColorSystem(org.jhotdraw.color.ColorSystem)',0,'public void setColorSystem(ColorSystem newValue) {\r\n    ColorSystem oldValue = sliderModel.getColorSystem();\r\n    sliderModel.setColorSystem(newValue);\r\n    firePropertyChange(HarmonicColorModel.COLOR_SYSTEM_PROPERTY, oldValue, newValue);\r\n    for (int i = 0; i < (colors.size()); i++) {\r\n        if ((get(i)) != null) {\r\n            set(i, new CompositeColor(newValue, get(i).getColor()));\r\n        }\r\n    }\r\n    fireContentsChanged(this, 0, ((size()) - 1));\r\n}'),(155,'ColorSystem sys','org.jhotdraw.color.ColorSystem',68,75,'org.jhotdraw.color.HSLHarmonicColorWheelImageProducer',602,'org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.-init-(org.jhotdraw.color.ColorSystem,int,int)',0,'public HSLHarmonicColorWheelImageProducer(ColorSystem sys, int w, int h) {\r\n    super(sys, w, h);\r\n}'),(156,'HarmonicRule rule','org.jhotdraw.color.HarmonicRule',82,81,'org.jhotdraw.color.HarmonicColorModel',637,'org.jhotdraw.color.HarmonicColorModel.addRule(org.jhotdraw.color.HarmonicRule)',0,'public void addRule(HarmonicRule rule);'),(157,'ColorSystem newValue','org.jhotdraw.color.ColorSystem',68,81,'org.jhotdraw.color.HarmonicColorModel',648,'org.jhotdraw.color.HarmonicColorModel.setColorSystem(org.jhotdraw.color.ColorSystem)',0,'public void setColorSystem(ColorSystem newValue);'),(158,'CompositeColor c','org.jhotdraw.color.CompositeColor',72,81,'org.jhotdraw.color.HarmonicColorModel',635,'org.jhotdraw.color.HarmonicColorModel.add(org.jhotdraw.color.CompositeColor)',0,'public boolean add(CompositeColor c);'),(159,'CompositeColor color','org.jhotdraw.color.CompositeColor',72,81,'org.jhotdraw.color.HarmonicColorModel',646,'org.jhotdraw.color.HarmonicColorModel.set(int,org.jhotdraw.color.CompositeColor)',0,'public void set(int index, CompositeColor color);'),(160,'HarmonicColorModel model','org.jhotdraw.color.HarmonicColorModel',81,82,'org.jhotdraw.color.HarmonicRule',651,'org.jhotdraw.color.HarmonicRule.apply(org.jhotdraw.color.HarmonicColorModel)',0,'public void apply(HarmonicColorModel model);'),(161,'HarmonicColorModel model','org.jhotdraw.color.HarmonicColorModel',81,82,'org.jhotdraw.color.HarmonicRule',652,'org.jhotdraw.color.HarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)',0,'public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue);'),(162,'CompositeColor oldValue','org.jhotdraw.color.CompositeColor',72,82,'org.jhotdraw.color.HarmonicRule',652,'org.jhotdraw.color.HarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)',0,'public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue);'),(163,'CompositeColor newValue','org.jhotdraw.color.CompositeColor',72,82,'org.jhotdraw.color.HarmonicRule',652,'org.jhotdraw.color.HarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)',0,'public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue);'),(164,'ColorSystem sys','org.jhotdraw.color.ColorSystem',68,85,'org.jhotdraw.color.JColorWheel',658,'org.jhotdraw.color.JColorWheel.-init-(org.jhotdraw.color.ColorSystem)',0,'public JColorWheel(ColorSystem sys) {\r\n    this.sys = sys;\r\n    wheelInsets = new Insets(0, 0, 0, 0);\r\n    model = new DefaultColorSliderModel(sys);\r\n    initComponents();\r\n    colorWheelProducer = createWheelProducer(0, 0);\r\n    modelHandler = new JColorWheel.ModelHandler();\r\n    model.addChangeListener(modelHandler);\r\n    installMouseListeners();\r\n    setOpaque(false);\r\n}'),(165,'ColorSliderModel m','org.jhotdraw.color.ColorSliderModel',64,85,'org.jhotdraw.color.JColorWheel',675,'org.jhotdraw.color.JColorWheel.setModel(org.jhotdraw.color.ColorSliderModel)',0,'public void setModel(ColorSliderModel m) {\r\n    if ((model) != null) {\r\n        model.removeChangeListener(modelHandler);\r\n    }\r\n    model = m;\r\n    if ((model) != null) {\r\n        model.addChangeListener(modelHandler);\r\n        colorWheelProducer = createWheelProducer(getWidth(), getHeight());\r\n        repaint();\r\n    }\r\n}'),(166,'ColorSystem newValue','org.jhotdraw.color.ColorSystem',68,88,'org.jhotdraw.color.JHarmonicColorWheel',697,'org.jhotdraw.color.JHarmonicColorWheel.setColorSystem(org.jhotdraw.color.ColorSystem)',0,'public void setColorSystem(ColorSystem newValue) {\r\n    harmonicModel.setColorSystem(newValue);\r\n    getModel().setColorSystem(newValue);\r\n    getModel().setComponentValue(1, 1.0F);\r\n}'),(167,'HarmonicColorModel newValue','org.jhotdraw.color.HarmonicColorModel',81,88,'org.jhotdraw.color.JHarmonicColorWheel',698,'org.jhotdraw.color.JHarmonicColorWheel.setHarmonicColorModel(org.jhotdraw.color.HarmonicColorModel)',0,'public void setHarmonicColorModel(HarmonicColorModel newValue) {\r\n    HarmonicColorModel oldValue = harmonicModel;\r\n    if (oldValue != null) {\r\n        oldValue.removePropertyChangeListener(modelHandler);\r\n        oldValue.removeListDataListener(modelHandler);\r\n    }\r\n    harmonicModel = newValue;\r\n    if (newValue != null) {\r\n        newValue.addPropertyChangeListener(modelHandler);\r\n        newValue.addListDataListener(modelHandler);\r\n        colorWheelProducer = createWheelProducer(getWidth(), getHeight());\r\n    }\r\n}'),(168,'CompositeColor c','org.jhotdraw.color.CompositeColor',72,88,'org.jhotdraw.color.JHarmonicColorWheel',688,'org.jhotdraw.color.JHarmonicColorWheel.getColorLocation(org.jhotdraw.color.CompositeColor)',0,'protected Point getColorLocation(CompositeColor c) {\r\n    Point p = colorWheelProducer.getColorLocation(c, (((getWidth()) - (wheelInsets.left)) - (wheelInsets.right)), (((getHeight()) - (wheelInsets.top)) - (wheelInsets.bottom)));\r\n    p.x += wheelInsets.left;\r\n    p.y += wheelInsets.top;\r\n    return p;\r\n}'),(169,'HarmonicColorModel model','org.jhotdraw.color.HarmonicColorModel',81,90,'org.jhotdraw.color.SimpleHarmonicRule',719,'org.jhotdraw.color.SimpleHarmonicRule.apply(org.jhotdraw.color.HarmonicColorModel)',0,'public void apply(HarmonicColorModel model) {\r\n    if ((derivedIndices) != null) {\r\n        CompositeColor baseColor = model.get(getBaseIndex());\r\n        if (baseColor != null) {\r\n            float[] derivedComponents = null;\r\n            for (int i = 0; i < (derivedIndices.length); i++) {\r\n                derivedComponents = baseColor.getComponents(derivedComponents);\r\n                derivedComponents[componentIndex] = (baseColor.getComponent(componentIndex)) + ((difference) * (i + 1));\r\n                model.set(derivedIndices[i], new CompositeColor(model.getColorSystem(), derivedComponents));\r\n            }\r\n        }\r\n    }\r\n}'),(170,'HarmonicColorModel model','org.jhotdraw.color.HarmonicColorModel',81,90,'org.jhotdraw.color.SimpleHarmonicRule',720,'org.jhotdraw.color.SimpleHarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)',0,'public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue) {\r\n    // \r\n}'),(171,'CompositeColor oldValue','org.jhotdraw.color.CompositeColor',72,90,'org.jhotdraw.color.SimpleHarmonicRule',720,'org.jhotdraw.color.SimpleHarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)',0,'public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue) {\r\n    // \r\n}'),(172,'CompositeColor newValue','org.jhotdraw.color.CompositeColor',72,90,'org.jhotdraw.color.SimpleHarmonicRule',720,'org.jhotdraw.color.SimpleHarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)',0,'public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue) {\r\n    // \r\n}'),(173,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',747,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)',0,'public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}'),(174,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',741,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.isAttributeEnabled(org.jhotdraw.draw.AttributeKey)',0,'public boolean isAttributeEnabled(AttributeKey key) {\r\n    return ((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)));\r\n}'),(175,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',746,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\n@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        Object oldValue = attributes.put(key, newValue);\r\n        setAttributeOnChildren(key, newValue);\r\n        fireAttributeChanged(key, oldValue, newValue);\r\n    }\r\n}'),(176,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',748,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'protected <T> void setAttributeOnChildren(AttributeKey<T> key, T newValue) {\r\n    for (Figure child : getChildren()) {\r\n        key.basicSet(child, newValue);\r\n    }\r\n}'),(177,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',733,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Gets an attribute from the figure.\r\n */\r\n@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return hasAttribute(key) ? key.get(attributes) : key.getDefaultValue();\r\n}'),(178,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',751,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)',0,'protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}'),(179,'DOMInput in','org.jhotdraw.xml.DOMInput',650,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',743,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.readAttributes(org.jhotdraw.xml.DOMInput)',0,'@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    key.basicSet(this, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}'),(180,'Figure that','org.jhotdraw.draw.Figure',174,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',726,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.applyAttributesTo(org.jhotdraw.draw.Figure)',0,'/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}'),(181,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',750,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeAttributes(out);\r\n}'),(182,'DOMInput in','org.jhotdraw.xml.DOMInput',650,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',742,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readAttributes(in);\r\n}'),(183,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',744,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.removeAttribute(org.jhotdraw.draw.AttributeKey)',0,'public <T> void removeAttribute(AttributeKey<T> key) {\r\n    if (hasAttribute(key)) {\r\n        T oldValue = getAttribute(key);\r\n        attributes.remove(key);\r\n        fireAttributeChanged(key, oldValue, key.getDefaultValue());\r\n    }\r\n}'),(184,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,91,'org.jhotdraw.draw.AbstractAttributedCompositeFigure',740,'org.jhotdraw.draw.AbstractAttributedCompositeFigure.hasAttribute(org.jhotdraw.draw.AttributeKey)',0,'public boolean hasAttribute(AttributeKey key) {\r\n    return attributes.containsKey(key);\r\n}'),(185,'Figure newValue','org.jhotdraw.draw.Figure',174,92,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure',764,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure.setDecorator(org.jhotdraw.draw.Figure)',0,'public void setDecorator(Figure newValue) {\r\n    willChange();\r\n    decorator = newValue;\r\n    if ((decorator) != null) {\r\n        decorator.setBounds(getStartPoint(), getEndPoint());\r\n    }\r\n    changed();\r\n}'),(186,'DOMInput in','org.jhotdraw.xml.DOMInput',650,92,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure',762,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readDecorator(in);\r\n}'),(187,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,92,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure',766,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeDecorator(out);\r\n}'),(188,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,92,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure',767,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure.writeDecorator(org.jhotdraw.xml.DOMOutput)',0,'protected void writeDecorator(DOMOutput out) throws IOException {\r\n    if ((decorator) != null) {\r\n        out.openElement(\"decorator\");\r\n        out.writeObject(decorator);\r\n        out.closeElement();\r\n    }\r\n}'),(189,'DOMInput in','org.jhotdraw.xml.DOMInput',650,92,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure',763,'org.jhotdraw.draw.AbstractAttributedDecoratedFigure.readDecorator(org.jhotdraw.xml.DOMInput)',0,'protected void readDecorator(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"decorator\")) > 0) {\r\n        in.openElement(\"decorator\");\r\n        decorator = ((Figure) (in.readObject()));\r\n        in.closeElement();\r\n    } else {\r\n        decorator = null;\r\n    }\r\n}'),(190,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,93,'org.jhotdraw.draw.AbstractAttributedFigure',789,'org.jhotdraw.draw.AbstractAttributedFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)',0,'public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}'),(191,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,93,'org.jhotdraw.draw.AbstractAttributedFigure',783,'org.jhotdraw.draw.AbstractAttributedFigure.isAttributeEnabled(org.jhotdraw.draw.AttributeKey)',0,'public boolean isAttributeEnabled(AttributeKey key) {\r\n    return ((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)));\r\n}'),(192,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,93,'org.jhotdraw.draw.AbstractAttributedFigure',788,'org.jhotdraw.draw.AbstractAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        T oldValue = ((T) (key.put(attributes, newValue)));\r\n        fireAttributeChanged(key, oldValue, newValue);\r\n    }\r\n}'),(193,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,93,'org.jhotdraw.draw.AbstractAttributedFigure',775,'org.jhotdraw.draw.AbstractAttributedFigure.getAttribute(org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Gets an attribute from the figure.\r\n */\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return hasAttribute(key) ? key.get(attributes) : key.getDefaultValue();\r\n}'),(194,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,93,'org.jhotdraw.draw.AbstractAttributedFigure',792,'org.jhotdraw.draw.AbstractAttributedFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)',0,'protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}'),(195,'DOMInput in','org.jhotdraw.xml.DOMInput',650,93,'org.jhotdraw.draw.AbstractAttributedFigure',785,'org.jhotdraw.draw.AbstractAttributedFigure.readAttributes(org.jhotdraw.xml.DOMInput)',0,'@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    setAttribute(key, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}'),(196,'Figure that','org.jhotdraw.draw.Figure',174,93,'org.jhotdraw.draw.AbstractAttributedFigure',769,'org.jhotdraw.draw.AbstractAttributedFigure.applyAttributesTo(org.jhotdraw.draw.Figure)',0,'/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}'),(197,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,93,'org.jhotdraw.draw.AbstractAttributedFigure',791,'org.jhotdraw.draw.AbstractAttributedFigure.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double r = getBounds();\r\n    out.addAttribute(\"x\", r.x);\r\n    out.addAttribute(\"y\", r.y);\r\n    out.addAttribute(\"w\", r.width);\r\n    out.addAttribute(\"h\", r.height);\r\n    writeAttributes(out);\r\n}'),(198,'DOMInput in','org.jhotdraw.xml.DOMInput',650,93,'org.jhotdraw.draw.AbstractAttributedFigure',784,'org.jhotdraw.draw.AbstractAttributedFigure.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    double x = in.getAttribute(\"x\", 0.0);\r\n    double y = in.getAttribute(\"y\", 0.0);\r\n    double w = in.getAttribute(\"w\", 0.0);\r\n    double h = in.getAttribute(\"h\", 0.0);\r\n    setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    readAttributes(in);\r\n}'),(199,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,93,'org.jhotdraw.draw.AbstractAttributedFigure',786,'org.jhotdraw.draw.AbstractAttributedFigure.removeAttribute(org.jhotdraw.draw.AttributeKey)',0,'public <T> void removeAttribute(AttributeKey<T> key) {\r\n    if (hasAttribute(key)) {\r\n        T oldValue = key.get(this);\r\n        attributes.remove(key);\r\n        fireAttributeChanged(key, oldValue, key.getDefaultValue());\r\n    }\r\n}'),(200,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,93,'org.jhotdraw.draw.AbstractAttributedFigure',782,'org.jhotdraw.draw.AbstractAttributedFigure.hasAttribute(org.jhotdraw.draw.AttributeKey)',0,'public boolean hasAttribute(AttributeKey key) {\r\n    return attributes.containsKey(key);\r\n}'),(201,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,94,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler',857,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    remove(e.getFigure());\r\n}'),(202,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,94,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler',855,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    invalidate();\r\n    fireFigureChanged(e.getInvalidatedArea());\r\n}'),(203,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,94,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler',852,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    fireAreaInvalidated(e);\r\n}'),(204,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,94,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler',853,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    invalidate();\r\n}'),(205,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,94,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler',854,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureAdded(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureAdded(FigureEvent e) {\r\n    invalidate();\r\n}'),(206,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,94,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler',856,'org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureRemoved(FigureEvent e) {\r\n    invalidate();\r\n}'),(207,'Figure figure','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',795,'org.jhotdraw.draw.AbstractCompositeFigure.add(org.jhotdraw.draw.Figure)',0,'public boolean add(Figure figure) {\r\n    add(getChildCount(), figure);\r\n    return true;\r\n}'),(208,'Figure figure','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',794,'org.jhotdraw.draw.AbstractCompositeFigure.add(int,org.jhotdraw.draw.Figure)',0,'public void add(int index, Figure figure) {\r\n    basicAdd(index, figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n    fireFigureAdded(figure, index);\r\n    invalidate();\r\n}'),(209,'Figure figure','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',801,'org.jhotdraw.draw.AbstractCompositeFigure.basicAdd(org.jhotdraw.draw.Figure)',0,'public void basicAdd(Figure figure) {\r\n    basicAdd(getChildCount(), figure);\r\n}'),(210,'Drawing drawing','org.jhotdraw.draw.Drawing',168,95,'org.jhotdraw.draw.AbstractCompositeFigure',799,'org.jhotdraw.draw.AbstractCompositeFigure.addNotify(org.jhotdraw.draw.Drawing)',0,'public void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    for (Figure child : getChildren()) {\r\n        child.addNotify(drawing);\r\n    }\r\n}'),(211,'Drawing drawing','org.jhotdraw.draw.Drawing',168,95,'org.jhotdraw.draw.AbstractCompositeFigure',841,'org.jhotdraw.draw.AbstractCompositeFigure.removeNotify(org.jhotdraw.draw.Drawing)',0,'public void removeNotify(Drawing drawing) {\r\n    super.removeNotify(drawing);\r\n    // Copy children collection to avoid concurrent modification exception\r\n    for (Figure child : new LinkedList<Figure>(getChildren())) {\r\n        child.removeNotify(drawing);\r\n    }\r\n}'),(212,'final Figure figure','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',836,'org.jhotdraw.draw.AbstractCompositeFigure.remove(org.jhotdraw.draw.Figure)',0,'public boolean remove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index == (-1)) {\r\n        return false;\r\n    } else {\r\n        basicRemoveChild(index);\r\n        if ((getDrawing()) != null) {\r\n            figure.removeNotify(getDrawing());\r\n        }\r\n        fireFigureRemoved(figure, index);\r\n        return true;\r\n    }\r\n}'),(213,'Figure figure','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',844,'org.jhotdraw.draw.AbstractCompositeFigure.sendToBack(org.jhotdraw.draw.Figure)',0,'/**\r\n * Sends a figure to the back of the composite figure.\r\n *\r\n * @param figure\r\n * 		that is part of this composite figure\r\n */\r\npublic synchronized void sendToBack(Figure figure) {\r\n    if ((basicRemove(figure)) != (-1)) {\r\n        basicAdd(0, figure);\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(214,'Figure figure','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',807,'org.jhotdraw.draw.AbstractCompositeFigure.bringToFront(org.jhotdraw.draw.Figure)',0,'/**\r\n * Sends a figure to the front of the drawing.\r\n *\r\n * @param figure\r\n * 		that is part of the drawing\r\n */\r\npublic synchronized void bringToFront(Figure figure) {\r\n    if ((basicRemove(figure)) != (-1)) {\r\n        basicAdd(figure);\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(215,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,95,'org.jhotdraw.draw.AbstractCompositeFigure',845,'org.jhotdraw.draw.AbstractCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'public <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    for (Figure child : getChildren()) {\r\n        child.setAttribute(key, value);\r\n    }\r\n    invalidate();\r\n}'),(216,'AttributeKey<T> name','org.jhotdraw.draw.AttributeKey',109,95,'org.jhotdraw.draw.AbstractCompositeFigure',819,'org.jhotdraw.draw.AbstractCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)',0,'public <T> T getAttribute(AttributeKey<T> name) {\r\n    return null;\r\n}'),(217,'Figure f','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',810,'org.jhotdraw.draw.AbstractCompositeFigure.contains(org.jhotdraw.draw.Figure)',0,'public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}'),(218,'Layouter newLayouter','org.jhotdraw.draw.Layouter',207,95,'org.jhotdraw.draw.AbstractCompositeFigure',847,'org.jhotdraw.draw.AbstractCompositeFigure.setLayouter(org.jhotdraw.draw.Layouter)',0,'/**\r\n * Set a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation. It is a good idea to set\r\n * the Layouter in the protected initialize() method\r\n * so it can be recreated if a GraphicalCompositeFigure is\r\n * read and restored from a StorableInput stream.\r\n *\r\n * @param newLayouter	encapsulation\r\n * 		of a layout algorithm.\r\n */\r\npublic void setLayouter(Layouter newLayouter) {\r\n    this.layouter = newLayouter;\r\n}'),(219,'DOMInput in','org.jhotdraw.xml.DOMInput',650,95,'org.jhotdraw.draw.AbstractCompositeFigure',835,'org.jhotdraw.draw.AbstractCompositeFigure.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    in.openElement(\"children\");\r\n    for (int i = 0; i < (in.getElementCount()); i++) {\r\n        basicAdd(((Figure) (in.readObject(i))));\r\n    }\r\n    in.closeElement();\r\n}'),(220,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,95,'org.jhotdraw.draw.AbstractCompositeFigure',850,'org.jhotdraw.draw.AbstractCompositeFigure.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    out.openElement(\"children\");\r\n    for (Figure child : getChildren()) {\r\n        out.writeObject(child);\r\n    }\r\n    out.closeElement();\r\n}'),(221,'Figure figure','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',800,'org.jhotdraw.draw.AbstractCompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)',0,'public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    figure.addFigureListener(eventHandler);\r\n}'),(222,'Figure child','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',803,'org.jhotdraw.draw.AbstractCompositeFigure.basicRemove(org.jhotdraw.draw.Figure)',0,'public int basicRemove(Figure child) {\r\n    int index = children.indexOf(child);\r\n    if (index != (-1)) {\r\n        basicRemoveChild(index);\r\n    }\r\n    return index;\r\n}'),(223,'Figure child','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',832,'org.jhotdraw.draw.AbstractCompositeFigure.indexOf(org.jhotdraw.draw.Figure)',0,'public int indexOf(Figure child) {\r\n    return children.indexOf(child);\r\n}'),(224,'Figure f','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',817,'org.jhotdraw.draw.AbstractCompositeFigure.fireFigureAdded(org.jhotdraw.draw.Figure,int)',0,'/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureAdded(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n            }\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureAdded(event);\r\n        }\r\n    }\r\n}'),(225,'Figure f','org.jhotdraw.draw.Figure',174,95,'org.jhotdraw.draw.AbstractCompositeFigure',818,'org.jhotdraw.draw.AbstractCompositeFigure.fireFigureRemoved(org.jhotdraw.draw.Figure,int)',0,'/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureRemoved(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n            }\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureRemoved(event);\r\n        }\r\n    }\r\n}'),(226,'CompositeFigureListener listener','org.jhotdraw.draw.CompositeFigureListener',138,95,'org.jhotdraw.draw.AbstractCompositeFigure',840,'org.jhotdraw.draw.AbstractCompositeFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)',0,'public void removeCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.remove(CompositeFigureListener.class, listener);\r\n}'),(227,'CompositeFigureListener listener','org.jhotdraw.draw.CompositeFigureListener',138,95,'org.jhotdraw.draw.AbstractCompositeFigure',798,'org.jhotdraw.draw.AbstractCompositeFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)',0,'public void addCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.add(CompositeFigureListener.class, listener);\r\n}'),(228,'ConnectionFigure owner','org.jhotdraw.draw.ConnectionFigure',142,96,'org.jhotdraw.draw.AbstractConnectionHandle',859,'org.jhotdraw.draw.AbstractConnectionHandle.-init-(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Initializes the change connection handle.\r\n */\r\nprotected AbstractConnectionHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}'),(229,'Handle handle','org.jhotdraw.draw.Handle',191,96,'org.jhotdraw.draw.AbstractConnectionHandle',877,'org.jhotdraw.draw.AbstractConnectionHandle.isCombinableWith(org.jhotdraw.draw.Handle)',0,'public boolean isCombinableWith(Handle handle) {\r\n    return false;\r\n}'),(230,'Connector c','org.jhotdraw.draw.Connector',145,96,'org.jhotdraw.draw.AbstractConnectionHandle',862,'org.jhotdraw.draw.AbstractConnectionHandle.connect(org.jhotdraw.draw.Connector)',0,'/**\r\n * Connect the connection with the given figure.\r\n */\r\nprotected abstract void connect(Connector c);'),(231,'Drawing drawing','org.jhotdraw.draw.Drawing',168,96,'org.jhotdraw.draw.AbstractConnectionHandle',867,'org.jhotdraw.draw.AbstractConnectionHandle.findConnectionTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',0,'private Connector findConnectionTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure targetFigure = findConnectableFigure(p, drawing);\r\n    if (((getSource()) == null) && (targetFigure != null)) {\r\n        return findConnector(p, targetFigure, getOwner());\r\n    } else\r\n        if (targetFigure != null) {\r\n            Connector target = findConnector(p, targetFigure, getOwner());\r\n            if (((((targetFigure != null) && (targetFigure.canConnect()))// \r\n             && (targetFigure != (savedTarget)))// \r\n             && (!(targetFigure.includes(getOwner()))))// \r\n             && (canConnect(getSource(), target))) {\r\n                return target;\r\n            }\r\n        }\r\n\r\n    return null;\r\n}'),(232,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,96,'org.jhotdraw.draw.AbstractConnectionHandle',867,'org.jhotdraw.draw.AbstractConnectionHandle.findConnectionTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',1,'private Connector findConnectionTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure targetFigure = findConnectableFigure(p, drawing);\r\n    if (((getSource()) == null) && (targetFigure != null)) {\r\n        return findConnector(p, targetFigure, getOwner());\r\n    } else\r\n        if (targetFigure != null) {\r\n            Connector target = findConnector(p, targetFigure, getOwner());\r\n            if (((((targetFigure != null) && (targetFigure.canConnect()))// \r\n             && (targetFigure != (savedTarget)))// \r\n             && (!(targetFigure.includes(getOwner()))))// \r\n             && (canConnect(getSource(), target))) {\r\n                return target;\r\n            }\r\n        }\r\n\r\n    return null;\r\n}'),(233,'Connector existingEnd','org.jhotdraw.draw.Connector',145,96,'org.jhotdraw.draw.AbstractConnectionHandle',861,'org.jhotdraw.draw.AbstractConnectionHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'protected abstract boolean canConnect(Connector existingEnd, Connector targetEnd);'),(234,'Connector targetEnd','org.jhotdraw.draw.Connector',145,96,'org.jhotdraw.draw.AbstractConnectionHandle',861,'org.jhotdraw.draw.AbstractConnectionHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'protected abstract boolean canConnect(Connector existingEnd, Connector targetEnd);'),(235,'Figure f','org.jhotdraw.draw.Figure',174,96,'org.jhotdraw.draw.AbstractConnectionHandle',868,'org.jhotdraw.draw.AbstractConnectionHandle.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)',0,'protected Connector findConnector(Point2D.Double p, Figure f, ConnectionFigure prototype) {\r\n    return f.findConnector(p, prototype);\r\n}'),(236,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,96,'org.jhotdraw.draw.AbstractConnectionHandle',868,'org.jhotdraw.draw.AbstractConnectionHandle.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)',1,'protected Connector findConnector(Point2D.Double p, Figure f, ConnectionFigure prototype) {\r\n    return f.findConnector(p, prototype);\r\n}'),(237,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,96,'org.jhotdraw.draw.AbstractConnectionHandle',868,'org.jhotdraw.draw.AbstractConnectionHandle.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)',0,'protected Connector findConnector(Point2D.Double p, Figure f, ConnectionFigure prototype) {\r\n    return f.findConnector(p, prototype);\r\n}'),(238,'Drawing drawing','org.jhotdraw.draw.Drawing',168,96,'org.jhotdraw.draw.AbstractConnectionHandle',866,'org.jhotdraw.draw.AbstractConnectionHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',0,'private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        if (((!(f.includes(getOwner()))) && (f.canConnect())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(239,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,96,'org.jhotdraw.draw.AbstractConnectionHandle',866,'org.jhotdraw.draw.AbstractConnectionHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',1,'private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        if (((!(f.includes(getOwner()))) && (f.canConnect())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(240,'Connector newTarget','org.jhotdraw.draw.Connector',145,96,'org.jhotdraw.draw.AbstractConnectionHandle',880,'org.jhotdraw.draw.AbstractConnectionHandle.setPotentialTarget(org.jhotdraw.draw.Connector)',0,'protected void setPotentialTarget(Connector newTarget) {\r\n    this.connectableConnector = newTarget;\r\n}'),(241,'Figure owner','org.jhotdraw.draw.Figure',174,97,'org.jhotdraw.draw.AbstractConnector',885,'org.jhotdraw.draw.AbstractConnector.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Constructs a connector with the given owner figure.\r\n */\r\npublic AbstractConnector(Figure owner) {\r\n    this.owner = owner;\r\n}'),(242,'Figure f','org.jhotdraw.draw.Figure',174,97,'org.jhotdraw.draw.AbstractConnector',894,'org.jhotdraw.draw.AbstractConnector.getConnectorTarget(org.jhotdraw.draw.Figure)',0,'protected final Figure getConnectorTarget(Figure f) {\r\n    return (isConnectToDecorator) && ((((DecoratedFigure) (f)).getDecorator()) != null) ? ((DecoratedFigure) (f)).getDecorator() : f;\r\n}'),(243,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,97,'org.jhotdraw.draw.AbstractConnector',894,'org.jhotdraw.draw.AbstractConnector.getConnectorTarget(org.jhotdraw.draw.Figure)',1,'protected final Figure getConnectorTarget(Figure f) {\r\n    return (isConnectToDecorator) && ((((DecoratedFigure) (f)).getDecorator()) != null) ? ((DecoratedFigure) (f)).getDecorator() : f;\r\n}'),(244,'ConnectionFigure connection','org.jhotdraw.draw.ConnectionFigure',142,97,'org.jhotdraw.draw.AbstractConnector',891,'org.jhotdraw.draw.AbstractConnector.findStart(org.jhotdraw.draw.ConnectionFigure)',0,'public Point2D.Double findStart(ConnectionFigure connection) {\r\n    return findPoint(connection);\r\n}'),(245,'ConnectionFigure connection','org.jhotdraw.draw.ConnectionFigure',142,97,'org.jhotdraw.draw.AbstractConnector',889,'org.jhotdraw.draw.AbstractConnector.findEnd(org.jhotdraw.draw.ConnectionFigure)',0,'public Point2D.Double findEnd(ConnectionFigure connection) {\r\n    return findPoint(connection);\r\n}'),(246,'ConnectionFigure connection','org.jhotdraw.draw.ConnectionFigure',142,97,'org.jhotdraw.draw.AbstractConnector',890,'org.jhotdraw.draw.AbstractConnector.findPoint(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Gets the connection point. Override when the connector\r\n * does not need to distinguish between the start and end\r\n * point of a connection.\r\n */\r\nprotected Point2D.Double findPoint(ConnectionFigure connection) {\r\n    return Geom.center(getBounds());\r\n}'),(247,'Figure newValue','org.jhotdraw.draw.Figure',174,97,'org.jhotdraw.draw.AbstractConnector',900,'org.jhotdraw.draw.AbstractConnector.setOwner(org.jhotdraw.draw.Figure)',0,'/**\r\n * Sets the connectors owner.\r\n */\r\nprotected void setOwner(Figure newValue) {\r\n    owner = newValue;\r\n}'),(248,'DOMInput in','org.jhotdraw.xml.DOMInput',650,97,'org.jhotdraw.draw.AbstractConnector',898,'org.jhotdraw.draw.AbstractConnector.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    if (isStatePersistent) {\r\n        isConnectToDecorator = in.getAttribute(\"connectToDecorator\", false);\r\n    }\r\n    if ((in.getElementCount(\"Owner\")) != 0) {\r\n        in.openElement(\"Owner\");\r\n    } else {\r\n        in.openElement(\"owner\");\r\n    }\r\n    this.owner = ((Figure) (in.readObject(0)));\r\n    in.closeElement();\r\n}'),(249,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,97,'org.jhotdraw.draw.AbstractConnector',904,'org.jhotdraw.draw.AbstractConnector.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    if (isStatePersistent) {\r\n        if (isConnectToDecorator) {\r\n            out.addAttribute(\"connectToDecorator\", true);\r\n        }\r\n    }\r\n    out.openElement(\"Owner\");\r\n    out.writeObject(getOwner());\r\n    out.closeElement();\r\n}'),(250,'DOMInput in','org.jhotdraw.xml.DOMInput',650,99,'org.jhotdraw.draw.AbstractDrawing',920,'org.jhotdraw.draw.AbstractDrawing.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    in.openElement(\"figures\");\r\n    for (int i = 0; i < (in.getElementCount()); i++) {\r\n        Figure f;\r\n        add((f = ((Figure) (in.readObject(i)))));\r\n    }\r\n    in.closeElement();\r\n}'),(251,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,99,'org.jhotdraw.draw.AbstractDrawing',925,'org.jhotdraw.draw.AbstractDrawing.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    out.openElement(\"figures\");\r\n    for (Figure f : getChildren()) {\r\n        out.writeObject(f);\r\n    }\r\n    out.closeElement();\r\n}'),(252,'InputFormat format','org.jhotdraw.draw.InputFormat',203,99,'org.jhotdraw.draw.AbstractDrawing',911,'org.jhotdraw.draw.AbstractDrawing.addInputFormat(org.jhotdraw.draw.InputFormat)',0,'public void addInputFormat(InputFormat format) {\r\n    inputFormats.add(format);\r\n}'),(253,'OutputFormat format','org.jhotdraw.draw.OutputFormat',221,99,'org.jhotdraw.draw.AbstractDrawing',912,'org.jhotdraw.draw.AbstractDrawing.addOutputFormat(org.jhotdraw.draw.OutputFormat)',0,'public void addOutputFormat(OutputFormat format) {\r\n    outputFormats.add(format);\r\n    if (AbstractDrawing.DEBUG) {\r\n        System.out.println(((((this) + \".addOutputFormat(\") + format) + \")\"));\r\n    }\r\n}'),(254,'FigureListener l','org.jhotdraw.draw.FigureListener',178,100,'org.jhotdraw.draw.AbstractFigure',927,'org.jhotdraw.draw.AbstractFigure.addFigureListener(org.jhotdraw.draw.FigureListener)',0,'// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\npublic void addFigureListener(FigureListener l) {\r\n    listenerList.add(FigureListener.class, l);\r\n}'),(255,'FigureListener l','org.jhotdraw.draw.FigureListener',178,100,'org.jhotdraw.draw.AbstractFigure',973,'org.jhotdraw.draw.AbstractFigure.removeFigureListener(org.jhotdraw.draw.FigureListener)',0,'public void removeFigureListener(FigureListener l) {\r\n    listenerList.remove(FigureListener.class, l);\r\n}'),(256,'Drawing d','org.jhotdraw.draw.Drawing',168,100,'org.jhotdraw.draw.AbstractFigure',928,'org.jhotdraw.draw.AbstractFigure.addNotify(org.jhotdraw.draw.Drawing)',0,'public void addNotify(Drawing d) {\r\n    this.drawing = d;\r\n    fireFigureAdded();\r\n}'),(257,'Drawing d','org.jhotdraw.draw.Drawing',168,100,'org.jhotdraw.draw.AbstractFigure',974,'org.jhotdraw.draw.AbstractFigure.removeNotify(org.jhotdraw.draw.Drawing)',0,'public void removeNotify(Drawing d) {\r\n    fireFigureRemoved();\r\n    this.drawing = null;\r\n}'),(258,'FigureEvent event','org.jhotdraw.draw.FigureEvent',176,100,'org.jhotdraw.draw.AbstractFigure',939,'org.jhotdraw.draw.AbstractFigure.fireAreaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAreaInvalidated(FigureEvent event) {\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (FigureListener.class)) {\r\n            ((FigureListener) (listeners[(i + 1)])).areaInvalidated(event);\r\n        }\r\n    }\r\n}'),(259,'FigureEvent event','org.jhotdraw.draw.FigureEvent',176,100,'org.jhotdraw.draw.AbstractFigure',944,'org.jhotdraw.draw.AbstractFigure.fireFigureChanged(org.jhotdraw.draw.FigureEvent)',0,'protected void fireFigureChanged(FigureEvent event) {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                ((FigureListener) (listeners[(i + 1)])).figureChanged(event);\r\n            }\r\n        }\r\n    }\r\n}'),(260,'AttributeKey attribute','org.jhotdraw.draw.AttributeKey',109,100,'org.jhotdraw.draw.AbstractFigure',940,'org.jhotdraw.draw.AbstractFigure.fireAttributeChanged(org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)',0,'/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAttributeChanged(AttributeKey attribute, Object oldValue, Object newValue) {\r\n    if (((listenerList.getListenerCount()) > 0) && (((oldValue == null) || (newValue == null)) || (!(oldValue.equals(newValue))))) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, attribute, oldValue, newValue);\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).attributeChanged(event);\r\n            }\r\n        }\r\n    }\r\n}'),(261,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,100,'org.jhotdraw.draw.AbstractFigure',935,'org.jhotdraw.draw.AbstractFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopBoxConnector is returned.\r\n *\r\n * @see ChopRectangleConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRectangleConnector(this);\r\n}'),(262,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,100,'org.jhotdraw.draw.AbstractFigure',935,'org.jhotdraw.draw.AbstractFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopBoxConnector is returned.\r\n *\r\n * @see ChopRectangleConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRectangleConnector(this);\r\n}'),(263,'Figure figure','org.jhotdraw.draw.Figure',174,100,'org.jhotdraw.draw.AbstractFigure',965,'org.jhotdraw.draw.AbstractFigure.includes(org.jhotdraw.draw.Figure)',0,'public boolean includes(Figure figure) {\r\n    return figure == (this);\r\n}'),(264,'Connector c','org.jhotdraw.draw.Connector',145,100,'org.jhotdraw.draw.AbstractFigure',934,'org.jhotdraw.draw.AbstractFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopRectangleConnector(this);\r\n}'),(265,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,100,'org.jhotdraw.draw.AbstractFigure',934,'org.jhotdraw.draw.AbstractFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopRectangleConnector(this);\r\n}'),(266,'DrawingView view','org.jhotdraw.draw.DrawingView',171,100,'org.jhotdraw.draw.AbstractFigure',964,'org.jhotdraw.draw.AbstractFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Handles a mouse click.\r\n */\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    return false;\r\n}'),(267,'DrawingView view','org.jhotdraw.draw.DrawingView',171,100,'org.jhotdraw.draw.AbstractFigure',963,'org.jhotdraw.draw.AbstractFigure.handleDrop(java.awt.geom.Point2D$Double,java.util.Collection,org.jhotdraw.draw.DrawingView)',0,'public boolean handleDrop(Point2D.Double p, Collection<Figure> droppedFigures, DrawingView view) {\r\n    return false;\r\n}'),(268,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,100,'org.jhotdraw.draw.AbstractFigure',951,'org.jhotdraw.draw.AbstractFigure.getConnectors(org.jhotdraw.draw.ConnectionFigure)',0,'public Collection<Connector> getConnectors(ConnectionFigure prototype) {\r\n    LinkedList<Connector> connectors = new LinkedList<Connector>();\r\n    connectors.add(new ChopRectangleConnector(this));\r\n    return connectors;\r\n}'),(269,'Figure owner','org.jhotdraw.draw.Figure',174,101,'org.jhotdraw.draw.AbstractHandle',985,'org.jhotdraw.draw.AbstractHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractHandle(Figure owner) {\r\n    if (owner == null) {\r\n        throw new IllegalArgumentException(\"owner must not be null\");\r\n    }\r\n    this.owner = owner;\r\n    owner.addFigureListener(this);\r\n}'),(270,'HandleListener l','org.jhotdraw.draw.HandleListener',194,101,'org.jhotdraw.draw.AbstractHandle',986,'org.jhotdraw.draw.AbstractHandle.addHandleListener(org.jhotdraw.draw.HandleListener)',0,'/**\r\n * Adds a listener for this handle.\r\n */\r\npublic void addHandleListener(HandleListener l) {\r\n    listenerList.add(HandleListener.class, l);\r\n}'),(271,'HandleListener l','org.jhotdraw.draw.HandleListener',194,101,'org.jhotdraw.draw.AbstractHandle',1019,'org.jhotdraw.draw.AbstractHandle.removeHandleListener(org.jhotdraw.draw.HandleListener)',0,'/**\r\n * Removes a listener for this handle.\r\n */\r\npublic void removeHandleListener(HandleListener l) {\r\n    listenerList.remove(HandleListener.class, l);\r\n}'),(272,'DrawingView view','org.jhotdraw.draw.DrawingView',171,101,'org.jhotdraw.draw.AbstractHandle',1020,'org.jhotdraw.draw.AbstractHandle.setView(org.jhotdraw.draw.DrawingView)',0,'public void setView(DrawingView view) {\r\n    this.view = view;\r\n}'),(273,'FigureEvent evt','org.jhotdraw.draw.FigureEvent',176,101,'org.jhotdraw.draw.AbstractHandle',987,'org.jhotdraw.draw.AbstractHandle.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when a region used by the figure needs to be repainted.\r\n * The implementation of this method assumes that the handle\r\n * is located on the bounds of the figure or inside the figure.\r\n * If the handle is located elsewhere this method must be reimpleted\r\n * by the subclass.\r\n */\r\npublic void areaInvalidated(FigureEvent evt) {\r\n    updateBounds();\r\n}'),(274,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,101,'org.jhotdraw.draw.AbstractHandle',997,'org.jhotdraw.draw.AbstractHandle.figureAdded(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when a figure was added.\r\n */\r\npublic void figureAdded(FigureEvent e) {\r\n    // Empty\r\n}'),(275,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,101,'org.jhotdraw.draw.AbstractHandle',1000,'org.jhotdraw.draw.AbstractHandle.figureRemoved(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when a figure was removed.\r\n */\r\npublic void figureRemoved(FigureEvent e) {\r\n    // Empty\r\n}'),(276,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,101,'org.jhotdraw.draw.AbstractHandle',1001,'org.jhotdraw.draw.AbstractHandle.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when a figure requests to be removed.\r\n */\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    // Empty\r\n}'),(277,'FigureEvent evt','org.jhotdraw.draw.FigureEvent',176,101,'org.jhotdraw.draw.AbstractHandle',998,'org.jhotdraw.draw.AbstractHandle.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when the bounds or shape of a figure has changed.\r\n */\r\npublic void figureChanged(FigureEvent evt) {\r\n    updateBounds();\r\n}'),(278,'Handle handle','org.jhotdraw.draw.Handle',191,101,'org.jhotdraw.draw.AbstractHandle',1015,'org.jhotdraw.draw.AbstractHandle.isCombinableWith(org.jhotdraw.draw.Handle)',0,'/**\r\n * Returns true, if the given handle is an instance of the same\r\n * class or of a subclass of this handle,.\r\n */\r\npublic boolean isCombinableWith(Handle handle) {\r\n    return getClass().isAssignableFrom(handle.getClass());\r\n}'),(279,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,101,'org.jhotdraw.draw.AbstractHandle',988,'org.jhotdraw.draw.AbstractHandle.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'public void attributeChanged(FigureEvent e) {\r\n}'),(280,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,101,'org.jhotdraw.draw.AbstractHandle',999,'org.jhotdraw.draw.AbstractHandle.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureHandlesChanged(FigureEvent e) {\r\n}'),(281,'Figure child','org.jhotdraw.draw.Figure',174,102,'org.jhotdraw.draw.AbstractLayouter',1025,'org.jhotdraw.draw.AbstractLayouter.getInsets(org.jhotdraw.draw.Figure)',0,'public Insets2D.Double getInsets(Figure child) {\r\n    Insets2D.Double value = CompositeFigure.LAYOUT_INSETS.get(child);\r\n    return value == null ? new Insets2D.Double() : ((Insets2D.Double) (value.clone()));\r\n}'),(282,'Figure f','org.jhotdraw.draw.Figure',174,103,'org.jhotdraw.draw.AbstractLineDecoration',1027,'org.jhotdraw.draw.AbstractLineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/**\r\n * Draws the arrow tip in the direction specified by the given two\r\n * Points.. (template method)\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getTransformedDecoratorPath(f, p1, p2);\r\n    Color color;\r\n    if (isFilled) {\r\n        if (isSolid) {\r\n            color = AttributeKeys.STROKE_COLOR.get(f);\r\n        } else {\r\n            color = AttributeKeys.FILL_COLOR.get(f);\r\n        }\r\n        if (color != null) {\r\n            g.setColor(color);\r\n            g.fill(path);\r\n        }\r\n    }\r\n    if (isStroked) {\r\n        color = AttributeKeys.STROKE_COLOR.get(f);\r\n        if (color != null) {\r\n            g.setColor(color);\r\n            g.setStroke(AttributeKeys.getStroke(f));\r\n            g.draw(path);\r\n        }\r\n    }\r\n}'),(283,'Figure f','org.jhotdraw.draw.Figure',174,103,'org.jhotdraw.draw.AbstractLineDecoration',1031,'org.jhotdraw.draw.AbstractLineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/**\r\n * Returns the drawing area of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getTransformedDecoratorPath(f, p1, p2);\r\n    Rectangle2D b = path.getBounds2D();\r\n    Rectangle2D.Double area = new Rectangle2D.Double(b.getX(), b.getY(), b.getWidth(), b.getHeight());\r\n    if (isStroked) {\r\n        double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n        int strokeJoin = AttributeKeys.STROKE_JOIN.get(f);\r\n        double miterLimit = (AttributeKeys.STROKE_MITER_LIMIT.get(f)) * strokeWidth;\r\n        double grow;\r\n        if (strokeJoin == (BasicStroke.JOIN_MITER)) {\r\n            grow = ((int) (1 + ((strokeWidth / 2) * miterLimit)));\r\n        } else {\r\n            grow = ((int) (1 + (strokeWidth / 2)));\r\n        }\r\n        Geom.grow(area, grow, grow);\r\n    } else {\r\n        Geom.grow(area, 1, 1);// grow due to antialiasing\r\n\r\n    }\r\n    return area;\r\n}'),(284,'Figure f','org.jhotdraw.draw.Figure',174,103,'org.jhotdraw.draw.AbstractLineDecoration',1028,'org.jhotdraw.draw.AbstractLineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)',0,'public double getDecorationRadius(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    double scaleFactor;\r\n    if (strokeWidth > 1.0F) {\r\n        scaleFactor = 1.0 + ((strokeWidth - 1.0) / 2.0);\r\n    } else {\r\n        scaleFactor = 1.0;\r\n    }\r\n    return (getDecoratorPathRadius(f)) * scaleFactor;\r\n}'),(285,'Figure f','org.jhotdraw.draw.Figure',174,103,'org.jhotdraw.draw.AbstractLineDecoration',1032,'org.jhotdraw.draw.AbstractLineDecoration.getTransformedDecoratorPath(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'private GeneralPath getTransformedDecoratorPath(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getDecoratorPath(f);\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    AffineTransform transform = new AffineTransform();\r\n    transform.translate(p1.x, p1.y);\r\n    transform.rotate(Math.atan2(((p1.x) - (p2.x)), ((p2.y) - (p1.y))));\r\n    // transform.rotate(Math.PI / 2);\r\n    if (strokeWidth > 1.0F) {\r\n        transform.scale((1.0 + ((strokeWidth - 1.0) / 2.0)), (1.0 + ((strokeWidth - 1.0) / 2.0)));\r\n    }\r\n    path.transform(transform);\r\n    return path;\r\n}'),(286,'Figure f','org.jhotdraw.draw.Figure',174,103,'org.jhotdraw.draw.AbstractLineDecoration',1029,'org.jhotdraw.draw.AbstractLineDecoration.getDecoratorPath(org.jhotdraw.draw.Figure)',0,'/**\r\n * Hook method to calculates the path of the decorator.\r\n */\r\nprotected abstract GeneralPath getDecoratorPath(Figure f);'),(287,'Figure f','org.jhotdraw.draw.Figure',174,103,'org.jhotdraw.draw.AbstractLineDecoration',1030,'org.jhotdraw.draw.AbstractLineDecoration.getDecoratorPathRadius(org.jhotdraw.draw.Figure)',0,'/**\r\n * Hook method to calculates the radius of the decorator path.\r\n */\r\nprotected abstract double getDecoratorPathRadius(Figure f);'),(288,'Figure owner','org.jhotdraw.draw.Figure',174,104,'org.jhotdraw.draw.AbstractLocator',1040,'org.jhotdraw.draw.AbstractLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}'),(289,'Figure dependent','org.jhotdraw.draw.Figure',174,104,'org.jhotdraw.draw.AbstractLocator',1040,'org.jhotdraw.draw.AbstractLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}'),(290,'Figure owner','org.jhotdraw.draw.Figure',174,105,'org.jhotdraw.draw.AbstractRotateHandle',1041,'org.jhotdraw.draw.AbstractRotateHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractRotateHandle(Figure owner) {\r\n    super(owner);\r\n}'),(291,'Handle h','org.jhotdraw.draw.Handle',191,105,'org.jhotdraw.draw.AbstractRotateHandle',1051,'org.jhotdraw.draw.AbstractRotateHandle.isCombinableWith(org.jhotdraw.draw.Handle)',0,'@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}'),(292,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,106,'org.jhotdraw.draw.AbstractTool',1057,'org.jhotdraw.draw.AbstractTool.activate(org.jhotdraw.draw.DrawingEditor)',0,'public void activate(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    editorProxy.setTarget(editor);\r\n    isActive = true;\r\n    // Repaint all handles\r\n    for (DrawingView v : editor.getDrawingViews()) {\r\n        v.repaintHandles();\r\n    }\r\n}'),(293,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,106,'org.jhotdraw.draw.AbstractTool',1064,'org.jhotdraw.draw.AbstractTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'public void deactivate(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    isActive = false;\r\n}'),(294,'ToolListener l','org.jhotdraw.draw.ToolListener',264,106,'org.jhotdraw.draw.AbstractTool',1058,'org.jhotdraw.draw.AbstractTool.addToolListener(org.jhotdraw.draw.ToolListener)',0,'public void addToolListener(ToolListener l) {\r\n    listenerList.add(ToolListener.class, l);\r\n}'),(295,'ToolListener l','org.jhotdraw.draw.ToolListener',264,106,'org.jhotdraw.draw.AbstractTool',1091,'org.jhotdraw.draw.AbstractTool.removeToolListener(org.jhotdraw.draw.ToolListener)',0,'public void removeToolListener(ToolListener l) {\r\n    listenerList.remove(ToolListener.class, l);\r\n}'),(296,'DrawingView view','org.jhotdraw.draw.DrawingView',171,106,'org.jhotdraw.draw.AbstractTool',1074,'org.jhotdraw.draw.AbstractTool.fireToolStarted(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireToolStarted(DrawingView view) {\r\n    ToolEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (ToolListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new ToolEvent(this, view, new Rectangle(0, 0, (-1), (-1)));\r\n\r\n            ((ToolListener) (listeners[(i + 1)])).toolStarted(event);\r\n        }\r\n    }\r\n}'),(297,'DrawingView view','org.jhotdraw.draw.DrawingView',171,106,'org.jhotdraw.draw.AbstractTool',1096,'org.jhotdraw.draw.AbstractTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)',0,'public void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        Handle handle = view.findHandle(p);\r\n        if (handle != null) {\r\n            view.setCursor(handle.getCursor());\r\n        } else {\r\n            Figure figure = view.findFigure(p);\r\n            Point2D.Double point = view.viewToDrawing(p);\r\n            Drawing drawing = view.getDrawing();\r\n            while ((figure != null) && (!(figure.isSelectable()))) {\r\n                figure = drawing.findFigureBehind(point, figure);\r\n            } \r\n            if (figure != null) {\r\n                view.setCursor(figure.getCursor(view.viewToDrawing(p)));\r\n            } else {\r\n                view.setCursor(Cursor.getDefaultCursor());\r\n            }\r\n        }\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}'),(298,'DrawingView view','org.jhotdraw.draw.DrawingView',171,106,'org.jhotdraw.draw.AbstractTool',1079,'org.jhotdraw.draw.AbstractTool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)',0,'public String getToolTipText(DrawingView view, MouseEvent evt) {\r\n    return null;\r\n}'),(299,'Figure f','org.jhotdraw.draw.Figure',174,107,'org.jhotdraw.draw.ArrowTip',1101,'org.jhotdraw.draw.ArrowTip.getDecoratorPath(org.jhotdraw.draw.Figure)',0,'protected GeneralPath getDecoratorPath(Figure f) {\r\n    // FIXME - This should take the stroke join an the outer radius into\r\n    // account to compute the offset properly.\r\n    double offset = (isStroked()) ? 1 : 0;\r\n    GeneralPath path = new GeneralPath();\r\n    path.moveTo(((float) ((outerRadius) * (Math.sin((-(angle)))))), ((float) (offset + ((outerRadius) * (Math.cos((-(angle))))))));\r\n    path.lineTo(0, ((float) (offset)));\r\n    path.lineTo(((float) ((outerRadius) * (Math.sin(angle)))), ((float) (offset + ((outerRadius) * (Math.cos(angle))))));\r\n    if ((innerRadius) != 0) {\r\n        path.lineTo(0, ((float) ((innerRadius) + offset)));\r\n        path.closePath();\r\n    }\r\n    return path;\r\n}'),(300,'Figure f','org.jhotdraw.draw.Figure',174,107,'org.jhotdraw.draw.ArrowTip',1102,'org.jhotdraw.draw.ArrowTip.getDecoratorPathRadius(org.jhotdraw.draw.Figure)',0,'protected double getDecoratorPathRadius(Figure f) {\r\n    double offset = (isStroked()) ? 0.5 : -0.1;\r\n    return (innerRadius) + offset;\r\n}'),(301,'DOMInput in','org.jhotdraw.xml.DOMInput',650,107,'org.jhotdraw.draw.ArrowTip',1103,'org.jhotdraw.draw.ArrowTip.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) {\r\n    angle = in.getAttribute(\"angle\", 0.35F);\r\n    innerRadius = in.getAttribute(\"innerRadius\", 12.0F);\r\n    outerRadius = in.getAttribute(\"outerRadius\", 12.0F);\r\n    setFilled(in.getAttribute(\"isFilled\", false));\r\n    setStroked(in.getAttribute(\"isStroked\", false));\r\n    setSolid(in.getAttribute(\"isSolid\", false));\r\n}'),(302,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,107,'org.jhotdraw.draw.ArrowTip',1104,'org.jhotdraw.draw.ArrowTip.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) {\r\n    out.addAttribute(\"angle\", angle);\r\n    out.addAttribute(\"innerRadius\", innerRadius);\r\n    out.addAttribute(\"outerRadius\", outerRadius);\r\n    out.addAttribute(\"isFilled\", isFilled());\r\n    out.addAttribute(\"isStroked\", isStroked());\r\n    out.addAttribute(\"isSolid\", isSolid());\r\n}'),(303,'Figure owner','org.jhotdraw.draw.Figure',174,108,'org.jhotdraw.draw.AttributeChangeEdit',1105,'org.jhotdraw.draw.AttributeChangeEdit.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeChangeEdit(Figure owner, AttributeKey<T> name, T oldValue, T newValue) {\r\n    this.owner = owner;\r\n    this.name = name;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(304,'AttributeKey<T> name','org.jhotdraw.draw.AttributeKey',109,108,'org.jhotdraw.draw.AttributeChangeEdit',1105,'org.jhotdraw.draw.AttributeChangeEdit.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeChangeEdit(Figure owner, AttributeKey<T> name, T oldValue, T newValue) {\r\n    this.owner = owner;\r\n    this.name = name;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(305,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,109,'org.jhotdraw.draw.AttributeKey',1112,'org.jhotdraw.draw.AttributeKey.-init-(java.lang.String,java.lang.Class,java.lang.Object,boolean,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a new instance with the specified attribute key, type token class,\r\n * default value, and allowing or disallowing null values.\r\n *\r\n * @param key\r\n * 		The key string.\r\n * @param clazz\r\n * 		This is used as a \"type token\" for assignability checks\r\n * 		at runtime.\r\n * @param isNullValueAllowed\r\n * 		whether null values are allowed.\r\n * @param labels\r\n * 		ResourceBundle for human friendly representation of this\r\n * 		attribute key. The ResourceBundle must have a property named\r\n * 		{@code \"attribute.\" + key + \".text\"}.\r\n */\r\npublic AttributeKey(String key, Class<T> clazz, T defaultValue, boolean isNullValueAllowed, ResourceBundleUtil labels) {\r\n    this.key = key;\r\n    this.clazz = clazz;\r\n    this.defaultValue = defaultValue;\r\n    this.isNullValueAllowed = isNullValueAllowed;\r\n    this.labels = labels;\r\n}'),(306,'Figure f','org.jhotdraw.draw.Figure',174,109,'org.jhotdraw.draw.AttributeKey',1119,'org.jhotdraw.draw.AttributeKey.getClone(org.jhotdraw.draw.Figure)',0,'/**\r\n * Gets a clone of the value from the Figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic T getClone(Figure f) {\r\n    T value = get(f);\r\n    try {\r\n        return value == null ? null : clazz.cast(Methods.invoke(value, \"clone\"));\r\n    } catch (NoSuchMethodException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(307,'Figure f','org.jhotdraw.draw.Figure',174,109,'org.jhotdraw.draw.AttributeKey',1118,'org.jhotdraw.draw.AttributeKey.get(org.jhotdraw.draw.Figure)',0,'/**\r\n * Gets the value of the attribute denoted by this AttributeKey from\r\n * a Figure.\r\n *\r\n * @param f\r\n * 		A figure.\r\n * @return The value of the attribute.\r\n */\r\npublic T get(Figure f) {\r\n    T value = ((T) (f.getAttribute(this)));\r\n    return (value == null) && (!(isNullValueAllowed)) ? defaultValue : value;\r\n}'),(308,'Figure f','org.jhotdraw.draw.Figure',174,109,'org.jhotdraw.draw.AttributeKey',1128,'org.jhotdraw.draw.AttributeKey.set(org.jhotdraw.draw.Figure,java.lang.Object)',0,'/**\r\n * Convenience method for setting a value on the\r\n * specified figure and calling willChange before and changed\r\n * after setting the value.\r\n *\r\n * @param f\r\n * 		the Figure\r\n * @param value\r\n * 		the attribute value\r\n */\r\npublic void set(Figure f, T value) {\r\n    f.willChange();\r\n    basicSet(f, value);\r\n    f.changed();\r\n}'),(309,'Figure f','org.jhotdraw.draw.Figure',174,109,'org.jhotdraw.draw.AttributeKey',1114,'org.jhotdraw.draw.AttributeKey.basicSet(org.jhotdraw.draw.Figure,java.lang.Object)',0,'/**\r\n * Sets a value on the specified figure without invoking {@code willChange}\r\n * and {@code changed} on the figure.\r\n * <p>\r\n * This method can be used to efficiently build a drawing from an\r\n * {@link InputFormat}.\r\n *\r\n * @param f\r\n * 		the Figure\r\n * @param value\r\n * 		the attribute value\r\n */\r\npublic void basicSet(Figure f, T value) {\r\n    if ((value == null) && (!(isNullValueAllowed))) {\r\n        throw new NullPointerException((\"Null value not allowed for AttributeKey \" + (key)));\r\n    }\r\n    f.setAttribute(this, value);\r\n}'),(310,'final Figure figure','org.jhotdraw.draw.Figure',174,109,'org.jhotdraw.draw.AttributeKey',1131,'org.jhotdraw.draw.AttributeKey.setUndoable(org.jhotdraw.draw.Figure,java.lang.Object)',0,'/**\r\n * Sets the attribute and returns an UndoableEditEvent which can be used\r\n * to undo it.\r\n */\r\npublic UndoableEdit setUndoable(final Figure figure, final T value) {\r\n    if ((value == null) && (!(isNullValueAllowed))) {\r\n        throw new NullPointerException((\"Null value not allowed for AttributeKey \" + (key)));\r\n    }\r\n    final Object restoreData = figure.getAttributesRestoreData();\r\n    figure.willChange();\r\n    figure.setAttribute(this, value);\r\n    figure.changed();\r\n    UndoableEdit edit = new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            return AttributeKey.this.getPresentationName();\r\n        }\r\n\r\n        @Override\r\n        public void undo() {\r\n            super.undo();\r\n            figure.willChange();\r\n            figure.restoreAttributesTo(restoreData);\r\n            figure.changed();\r\n        }\r\n\r\n        @Override\r\n        public void redo() {\r\n            super.redo();\r\n            figure.willChange();\r\n            figure.setAttribute(AttributeKey.this, value);\r\n            figure.changed();\r\n        }\r\n    };\r\n    return edit;\r\n}'),(311,'Figure f','org.jhotdraw.draw.Figure',174,109,'org.jhotdraw.draw.AttributeKey',1130,'org.jhotdraw.draw.AttributeKey.setClone(org.jhotdraw.draw.Figure,java.lang.Object)',0,'/**\r\n * Convenience method for seting a clone of a value on the\r\n * specified figure and calling willChange before and changed\r\n * after setting the value.\r\n *\r\n * @param f\r\n * 		the Figure\r\n * @param value\r\n * 		the attribute value\r\n */\r\npublic void setClone(Figure f, T value) {\r\n    f.willChange();\r\n    basicSetClone(f, value);\r\n    f.changed();\r\n}'),(312,'Figure f','org.jhotdraw.draw.Figure',174,109,'org.jhotdraw.draw.AttributeKey',1115,'org.jhotdraw.draw.AttributeKey.basicSetClone(org.jhotdraw.draw.Figure,java.lang.Object)',0,'/**\r\n * Sets a clone of a value on the specified figure, without invoking\r\n * {@code willChange} and {@code changed} on the figure.\r\n * <p>\r\n * This method can be used to efficiently build a drawing from an\r\n * {@link InputFormat}.\r\n *\r\n * @param f\r\n * 		the Figure\r\n * @param value\r\n * 		the attribute value\r\n */\r\npublic void basicSetClone(Figure f, T value) {\r\n    try {\r\n        basicSet(f, (value == null ? null : clazz.cast(Methods.invoke(value, \"clone\"))));\r\n    } catch (NoSuchMethodException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(313,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1142,'org.jhotdraw.draw.AttributeKeys.getStrokeTotalWidth(org.jhotdraw.draw.Figure)',0,'/**\r\n * Convenience method for computing the total stroke width from the\r\n * STROKE_WIDTH, STROKE_INNER_WIDTH and STROKE_TYPE attributes.\r\n */\r\npublic static double getStrokeTotalWidth(Figure f) {\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return AttributeKeys.STROKE_WIDTH.get(f);\r\n            // break; not reached\r\n        case DOUBLE :\r\n            return (AttributeKeys.STROKE_WIDTH.get(f)) * (1.0 + (AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)));\r\n            // break; not reached\r\n    }\r\n}'),(314,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1141,'org.jhotdraw.draw.AttributeKeys.getStrokeTotalMiterLimit(org.jhotdraw.draw.Figure)',0,'/**\r\n * Convenience method for computing the total stroke miter limit from the\r\n * STROKE_MITER_LIMIT, and IS_STROKE_MITER_LIMIT factor.\r\n */\r\npublic static double getStrokeTotalMiterLimit(Figure f) {\r\n    if (AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.get(f)) {\r\n        return (AttributeKeys.STROKE_MITER_LIMIT.get(f)) * (AttributeKeys.STROKE_WIDTH.get(f));\r\n    } else {\r\n        return AttributeKeys.STROKE_MITER_LIMIT.get(f);\r\n    }\r\n}'),(315,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1140,'org.jhotdraw.draw.AttributeKeys.getStroke(org.jhotdraw.draw.Figure)',0,'public static Stroke getStroke(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    float miterLimit = ((float) (AttributeKeys.getStrokeTotalMiterLimit(f)));\r\n    double dashFactor = (AttributeKeys.IS_STROKE_DASH_FACTOR.get(f)) ? strokeWidth : 1.0;\r\n    double dashPhase = AttributeKeys.STROKE_DASH_PHASE.get(f);\r\n    double[] ddashes = AttributeKeys.STROKE_DASHES.get(f);\r\n    float[] dashes = null;\r\n    boolean isAllZeroes = true;\r\n    if (ddashes != null) {\r\n        dashes = new float[ddashes.length];\r\n        double dashSize = 0.0F;\r\n        for (int i = 0; i < (dashes.length); i++) {\r\n            dashes[i] = Math.max(0.0F, ((float) ((ddashes[i]) * dashFactor)));\r\n            dashSize += dashes[i];\r\n            if (isAllZeroes && ((dashes[i]) != 0)) {\r\n                isAllZeroes = false;\r\n            }\r\n        }\r\n        if (((dashes.length) % 2) == 1) {\r\n            dashSize *= 2;\r\n        }\r\n        if (dashPhase < 0) {\r\n            dashPhase = dashSize + (dashPhase % dashSize);\r\n        }\r\n    }\r\n    if (isAllZeroes) {\r\n        // dont draw dashes, if all values are 0.\r\n        dashes = null;\r\n    }\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return new BasicStroke(((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, dashes, Math.max(0, ((float) (dashPhase * dashFactor))));\r\n            // not reached\r\n        case DOUBLE :\r\n            return new DoubleStroke(((float) ((AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)) * strokeWidth)), ((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, dashes, Math.max(0, ((float) (dashPhase * dashFactor))));\r\n            // not reached\r\n    }\r\n}'),(316,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1136,'org.jhotdraw.draw.AttributeKeys.getHitStroke(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns a stroke which is useful for hit-testing.\r\n * The stroke reflects the stroke width, but not the stroke dashes\r\n * attribute.\r\n *\r\n * @param f\r\n * 		\r\n * @return A stroke suited for creating a shape for hit testing.\r\n */\r\npublic static Stroke getHitStroke(Figure f) {\r\n    double strokeWidth = Math.max(1, AttributeKeys.STROKE_WIDTH.get(f));\r\n    float miterLimit = ((float) (AttributeKeys.getStrokeTotalMiterLimit(f)));\r\n    double dashFactor = (AttributeKeys.IS_STROKE_DASH_FACTOR.get(f)) ? strokeWidth : 1.0;\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return new BasicStroke(((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, null, Math.max(0, ((float) ((AttributeKeys.STROKE_DASH_PHASE.get(f)) * dashFactor))));\r\n            // not reached\r\n        case DOUBLE :\r\n            return new DoubleStroke(((float) ((AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)) * strokeWidth)), ((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, null, Math.max(0, ((float) ((AttributeKeys.STROKE_DASH_PHASE.get(f).floatValue()) * dashFactor))));\r\n            // not reached\r\n    }\r\n}'),(317,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1134,'org.jhotdraw.draw.AttributeKeys.getFont(org.jhotdraw.draw.Figure)',0,'public static Font getFont(Figure f) {\r\n    Font prototype = AttributeKeys.FONT_FACE.get(f);\r\n    if (prototype == null) {\r\n        return null;\r\n    }\r\n    if ((AttributeKeys.getFontStyle(f)) != (Font.PLAIN)) {\r\n        return prototype.deriveFont(AttributeKeys.getFontStyle(f), AttributeKeys.FONT_SIZE.get(f).floatValue());\r\n    } else {\r\n        return prototype.deriveFont(AttributeKeys.FONT_SIZE.get(f).floatValue());\r\n    }\r\n}'),(318,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1135,'org.jhotdraw.draw.AttributeKeys.getFontStyle(org.jhotdraw.draw.Figure)',0,'public static int getFontStyle(Figure f) {\r\n    int style = Font.PLAIN;\r\n    if (AttributeKeys.FONT_BOLD.get(f)) {\r\n        style |= Font.BOLD;\r\n    }\r\n    if (AttributeKeys.FONT_ITALIC.get(f)) {\r\n        style |= Font.ITALIC;\r\n    }\r\n    return style;\r\n}'),(319,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1138,'org.jhotdraw.draw.AttributeKeys.getPerpendicularFillGrowth(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * fill its shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularFillGrowth(Figure f) {\r\n    double grow;\r\n    double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n    AttributeKeys.StrokePlacement placement = AttributeKeys.STROKE_PLACEMENT.get(f);\r\n    switch (AttributeKeys.FILL_UNDER_STROKE.get(f)) {\r\n        case FULL :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = 0.0F;\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = strokeWidth;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = strokeWidth / 2.0;\r\n                    break;\r\n            }\r\n            break;\r\n        case NONE :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = -strokeWidth;\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = 0.0F;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = strokeWidth / (-2.0);\r\n                    break;\r\n            }\r\n            break;\r\n        case CENTER :\r\n        default :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = strokeWidth / (-2.0);\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = strokeWidth / 2.0;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = 0.0;\r\n                    break;\r\n            }\r\n            break;\r\n    }\r\n    return grow;\r\n}'),(320,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1137,'org.jhotdraw.draw.AttributeKeys.getPerpendicularDrawGrowth(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * draw (aka stroke) its shape as specified by the FILL_UNDER_STROKE and\r\n * STROKE_POSITION attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularDrawGrowth(Figure f) {\r\n    double grow;\r\n    double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(f)) {\r\n        case INSIDE :\r\n            grow = strokeWidth / (-2.0);\r\n            break;\r\n        case OUTSIDE :\r\n            grow = strokeWidth / 2.0;\r\n            break;\r\n        case CENTER :\r\n        default :\r\n            grow = 0.0F;\r\n            break;\r\n    }\r\n    return grow;\r\n}'),(321,'Figure f','org.jhotdraw.draw.Figure',174,116,'org.jhotdraw.draw.AttributeKeys',1139,'org.jhotdraw.draw.AttributeKeys.getPerpendicularHitGrowth(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * make hit detections on a shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularHitGrowth(Figure f) {\r\n    double grow;\r\n    if ((AttributeKeys.STROKE_COLOR.get(f)) == null) {\r\n        grow = AttributeKeys.getPerpendicularFillGrowth(f);\r\n    } else {\r\n        double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n        grow = (AttributeKeys.getPerpendicularDrawGrowth(f)) + (strokeWidth / 2.0);\r\n    }\r\n    return grow;\r\n}'),(322,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,117,'org.jhotdraw.draw.BezierControlPointHandle',1149,'org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,int)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierControlPointHandle(BezierFigure owner, int index, int coord) {\r\n    this(owner, index, coord, owner);\r\n}'),(323,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,117,'org.jhotdraw.draw.BezierControlPointHandle',1150,'org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,int,org.jhotdraw.draw.Figure)',0,'public BezierControlPointHandle(BezierFigure owner, int index, int coord, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.controlPointIndex = coord;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}'),(324,'Figure transformOwner','org.jhotdraw.draw.Figure',174,117,'org.jhotdraw.draw.BezierControlPointHandle',1150,'org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,int,org.jhotdraw.draw.Figure)',0,'public BezierControlPointHandle(BezierFigure owner, int index, int coord, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.controlPointIndex = coord;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}'),(325,'BezierPath.Node v','org.jhotdraw.geom.BezierPath$Node',342,117,'org.jhotdraw.draw.BezierControlPointHandle',1155,'org.jhotdraw.draw.BezierControlPointHandle.fireAreaInvalidated(org.jhotdraw.geom.BezierPath$Node)',0,'private void fireAreaInvalidated(BezierPath.Node v) {\r\n    Rectangle2D.Double dr = new Rectangle2D.Double(v.x[0], v.y[0], 0, 0);\r\n    for (int i = 1; i < 3; i++) {\r\n        dr.add(v.x[i], v.y[i]);\r\n    }\r\n    Rectangle vr = view.drawingToView(dr);\r\n    vr.grow(getHandlesize(), getHandlesize());\r\n    fireAreaInvalidated(vr);\r\n}'),(326,'Handle h','org.jhotdraw.draw.Handle',191,117,'org.jhotdraw.draw.BezierControlPointHandle',1162,'org.jhotdraw.draw.BezierControlPointHandle.isCombinableWith(org.jhotdraw.draw.Handle)',0,'@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    if (super.isCombinableWith(h)) {\r\n        BezierControlPointHandle that = ((BezierControlPointHandle) (h));\r\n        return (((that.index) == (this.index)) && ((that.controlPointIndex) == (this.controlPointIndex))) && ((that.getBezierFigure().getNodeCount()) == (this.getBezierFigure().getNodeCount()));\r\n    }\r\n    return false;\r\n}'),(327,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,118,'org.jhotdraw.draw.BezierFigure',1180,'org.jhotdraw.draw.BezierFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopBezierConnector(this);\r\n}'),(328,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,118,'org.jhotdraw.draw.BezierFigure',1180,'org.jhotdraw.draw.BezierFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopBezierConnector(this);\r\n}'),(329,'Connector c','org.jhotdraw.draw.Connector',145,118,'org.jhotdraw.draw.BezierFigure',1179,'org.jhotdraw.draw.BezierFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopBezierConnector(this);\r\n}'),(330,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,118,'org.jhotdraw.draw.BezierFigure',1179,'org.jhotdraw.draw.BezierFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopBezierConnector(this);\r\n}'),(331,'BezierPath newValue','org.jhotdraw.geom.BezierPath',343,118,'org.jhotdraw.draw.BezierFigure',1209,'org.jhotdraw.draw.BezierFigure.setBezierPath(org.jhotdraw.geom.BezierPath)',0,'public void setBezierPath(BezierPath newValue) {\r\n    path = ((BezierPath) (newValue.clone()));\r\n    this.setClosed(newValue.isClosed());\r\n}'),(332,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,118,'org.jhotdraw.draw.BezierFigure',1208,'org.jhotdraw.draw.BezierFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.CLOSED)) {\r\n        path.setClosed(((Boolean) (newValue)));\r\n    } else\r\n        if (key == (AttributeKeys.WINDING_RULE)) {\r\n            path.setWindingRule((newValue == (AttributeKeys.WindingRule.EVEN_ODD) ? GeneralPath.WIND_EVEN_ODD : GeneralPath.WIND_NON_ZERO));\r\n        }\r\n\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}'),(333,'BezierPath.Node p','org.jhotdraw.geom.BezierPath$Node',342,118,'org.jhotdraw.draw.BezierFigure',1170,'org.jhotdraw.draw.BezierFigure.addNode(org.jhotdraw.geom.BezierPath$Node)',0,'/**\r\n * Adds a control point.\r\n */\r\npublic void addNode(BezierPath.Node p) {\r\n    addNode(getNodeCount(), p);\r\n}'),(334,'BezierPath.Node p','org.jhotdraw.geom.BezierPath$Node',342,118,'org.jhotdraw.draw.BezierFigure',1169,'org.jhotdraw.draw.BezierFigure.addNode(int,org.jhotdraw.geom.BezierPath$Node)',0,'/**\r\n * Adds a node to the list of points.\r\n */\r\npublic void addNode(final int index, BezierPath.Node p) {\r\n    final BezierPath.Node newPoint = new BezierPath.Node(p);\r\n    path.add(index, p);\r\n    invalidate();\r\n}'),(335,'BezierPath.Node p','org.jhotdraw.geom.BezierPath$Node',342,118,'org.jhotdraw.draw.BezierFigure',1213,'org.jhotdraw.draw.BezierFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)',0,'/**\r\n * Sets a control point.\r\n */\r\npublic void setNode(int index, BezierPath.Node p) {\r\n    path.set(index, p);\r\n    invalidate();\r\n}'),(336,'DrawingView view','org.jhotdraw.draw.DrawingView',171,118,'org.jhotdraw.draw.BezierFigure',1197,'org.jhotdraw.draw.BezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                    return labels.getString(\"edit.bezierPath.splitSegment.text\");\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(337,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,118,'org.jhotdraw.draw.BezierFigure',1221,'org.jhotdraw.draw.BezierFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    writePoints(out);\r\n    writeAttributes(out);\r\n}'),(338,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,118,'org.jhotdraw.draw.BezierFigure',1222,'org.jhotdraw.draw.BezierFigure.writePoints(org.jhotdraw.xml.DOMOutput)',0,'protected void writePoints(DOMOutput out) throws IOException {\r\n    out.openElement(\"points\");\r\n    if (isClosed()) {\r\n        out.addAttribute(\"closed\", true);\r\n    }\r\n    for (int i = 0, n = getNodeCount(); i < n; i++) {\r\n        BezierPath.Node node = getNode(i);\r\n        out.openElement(\"p\");\r\n        out.addAttribute(\"mask\", node.mask, 0);\r\n        out.addAttribute(\"colinear\", true);\r\n        out.addAttribute(\"x\", node.x[0]);\r\n        out.addAttribute(\"y\", node.y[0]);\r\n        out.addAttribute(\"c1x\", node.x[1], node.x[0]);\r\n        out.addAttribute(\"c1y\", node.y[1], node.y[0]);\r\n        out.addAttribute(\"c2x\", node.x[2], node.x[0]);\r\n        out.addAttribute(\"c2y\", node.y[2], node.y[0]);\r\n        out.closeElement();\r\n    }\r\n    out.closeElement();\r\n}'),(339,'DOMInput in','org.jhotdraw.xml.DOMInput',650,118,'org.jhotdraw.draw.BezierFigure',1203,'org.jhotdraw.draw.BezierFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    readPoints(in);\r\n    readAttributes(in);\r\n}'),(340,'DOMInput in','org.jhotdraw.xml.DOMInput',650,118,'org.jhotdraw.draw.BezierFigure',1204,'org.jhotdraw.draw.BezierFigure.readPoints(org.jhotdraw.xml.DOMInput)',0,'protected void readPoints(DOMInput in) throws IOException {\r\n    path.clear();\r\n    in.openElement(\"points\");\r\n    setClosed(in.getAttribute(\"closed\", false));\r\n    for (int i = 0, n = in.getElementCount(\"p\"); i < n; i++) {\r\n        in.openElement(\"p\", i);\r\n        BezierPath.Node node = new BezierPath.Node(in.getAttribute(\"mask\", 0), in.getAttribute(\"x\", 0.0), in.getAttribute(\"y\", 0.0), in.getAttribute(\"c1x\", in.getAttribute(\"x\", 0.0)), in.getAttribute(\"c1y\", in.getAttribute(\"y\", 0.0)), in.getAttribute(\"c2x\", in.getAttribute(\"x\", 0.0)), in.getAttribute(\"c2y\", in.getAttribute(\"y\", 0.0)));\r\n        node.keepColinear = in.getAttribute(\"colinear\", true);\r\n        path.add(node);\r\n        path.invalidatePath();\r\n        in.closeElement();\r\n    }\r\n    in.closeElement();\r\n}'),(341,'Figure owner','org.jhotdraw.draw.Figure',174,119,'org.jhotdraw.draw.BezierLabelLocator',1227,'org.jhotdraw.draw.BezierLabelLocator.locate(org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner) {\r\n    return getRelativePoint(((BezierFigure) (owner)));\r\n}'),(342,'Figure owner','org.jhotdraw.draw.Figure',174,119,'org.jhotdraw.draw.BezierLabelLocator',1228,'org.jhotdraw.draw.BezierLabelLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner, Figure label) {\r\n    Point2D.Double relativePoint = getRelativeLabelPoint(((BezierFigure) (owner)), label);\r\n    return relativePoint;\r\n}'),(343,'Figure label','org.jhotdraw.draw.Figure',174,119,'org.jhotdraw.draw.BezierLabelLocator',1228,'org.jhotdraw.draw.BezierLabelLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner, Figure label) {\r\n    Point2D.Double relativePoint = getRelativeLabelPoint(((BezierFigure) (owner)), label);\r\n    return relativePoint;\r\n}'),(344,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,119,'org.jhotdraw.draw.BezierLabelLocator',1226,'org.jhotdraw.draw.BezierLabelLocator.getRelativePoint(org.jhotdraw.draw.BezierFigure)',0,'/**\r\n * Returns a Point2D.Double on the polyline that is at the provided relative position.\r\n */\r\npublic Point2D.Double getRelativePoint(BezierFigure owner) {\r\n    Point2D.Double point = owner.getPointOnPath(((float) (relativePosition)), 3);\r\n    Point2D.Double nextPoint = owner.getPointOnPath(((relativePosition) < 0.5 ? ((float) (relativePosition)) + 0.1F : ((float) (relativePosition)) - 0.1F), 3);\r\n    double dir = Math.atan2(((nextPoint.y) - (point.y)), ((nextPoint.x) - (point.x)));\r\n    if ((relativePosition) >= 0.5) {\r\n        dir += Math.PI;\r\n    }\r\n    double alpha = dir + (angle);\r\n    Point2D.Double p = new Point2D.Double(((point.x) + ((distance) * (Math.cos(alpha)))), ((point.y) + ((distance) * (Math.sin(alpha)))));\r\n    if (Double.isNaN(p.x))\r\n        p = point;\r\n\r\n    return p;\r\n}'),(345,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,119,'org.jhotdraw.draw.BezierLabelLocator',1225,'org.jhotdraw.draw.BezierLabelLocator.getRelativeLabelPoint(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns a Point2D.Double on the polyline that is at the provided relative position.\r\n * XXX - Implement this and move it to BezierPath\r\n */\r\npublic Point2D.Double getRelativeLabelPoint(BezierFigure owner, Figure label) {\r\n    // Get a point on the path an the next point on the path\r\n    Point2D.Double point = owner.getPointOnPath(((float) (relativePosition)), 3);\r\n    if (point == null) {\r\n        return new Point2D.Double(0, 0);\r\n    }\r\n    Point2D.Double nextPoint = owner.getPointOnPath(((relativePosition) < 0.5 ? ((float) (relativePosition)) + 0.1F : ((float) (relativePosition)) - 0.1F), 3);\r\n    double dir = Math.atan2(((nextPoint.y) - (point.y)), ((nextPoint.x) - (point.x)));\r\n    if ((relativePosition) >= 0.5) {\r\n        dir += Math.PI;\r\n    }\r\n    double alpha = dir + (angle);\r\n    Point2D.Double p = new Point2D.Double(((point.x) + ((distance) * (Math.cos(alpha)))), ((point.y) + ((distance) * (Math.sin(alpha)))));\r\n    if (Double.isNaN(p.x))\r\n        p = point;\r\n\r\n    Dimension2DDouble labelDim = label.getPreferredSize();\r\n    if ((((relativePosition) == 0.5) && ((p.x) >= ((point.x) - ((distance) / 2)))) && ((p.x) <= ((point.x) + ((distance) / 2)))) {\r\n        if ((p.y) >= (point.y)) {\r\n            // South East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), p.y);\r\n        } else {\r\n            // North East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), ((p.y) - (labelDim.height)));\r\n        }\r\n    } else {\r\n        if ((p.x) >= (point.x)) {\r\n            if ((p.y) >= (point.y)) {\r\n                // South East\r\n                return new Point2D.Double(p.x, p.y);\r\n            } else {\r\n                // North East\r\n                return new Point2D.Double(p.x, ((p.y) - (labelDim.height)));\r\n            }\r\n        } else {\r\n            if ((p.y) >= (point.y)) {\r\n                // South West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), p.y);\r\n            } else {\r\n                // North West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), ((p.y) - (labelDim.height)));\r\n            }\r\n        }\r\n    }\r\n    /* int percentage = (int) (relativePosition * 100);\n\n    int segment; // relative segment\n    Point2D.Double segPoint; // relative Point2D.Double on the segment\n    int nPoints = owner.getPointCount();\n    Point2D.Double[] Points = owner.getPoints();\n\n    if (nPoints < 2) return new Point2D.Double(0, 0);\n\n    switch (percentage) {\n    case 0 :\n    segment = 0;\n    segPoint = owner.getStartPoint();\n    break;\n    case 100 :\n    segment = owner.getPointCount() - 2;\n    segPoint = owner.getEndPoint();\n    break;\n    default :\n    double totalLength = 0d;\n    double[] segLength = new double[nPoints - 1];\n    for (int i=1; i < nPoints; i++) {\n    segLength[i-1] = Geom.length(Points[i-1].x, Points[i-1].y, Points[i].x, Points[i].y);\n    totalLength += segLength[i-1];\n    }\n    double relativeProgress = percentage * totalLength / 101d;\n    segment = 0;\n    double segMin = 0d;\n    for (segment=0; segment < segLength.length - 1; segment++) {\n    if (segMin + segLength[segment] > relativeProgress) break;\n    segMin += segLength[segment];\n    }\n\n    // Compute the relative Point2D.Double on the line\n    segPoint = new Point2D.Double();\n    relativeProgress -= segMin;\n    segPoint.x = (int) ((Points[segment].x * (segLength[segment] - relativeProgress) + Points[segment + 1].x * relativeProgress) / segLength[segment] +.5);\n    segPoint.y = (int) ((Points[segment].y * (segLength[segment] - relativeProgress) + Points[segment + 1].y * relativeProgress) / segLength[segment] +.5);\n\n    break;\n    }\n\n    Dimension2DDouble labelDim = label.getPreferredSize();\n\n    Line2D.Double line = new Line2D.Double(Points[segment].x, Points[segment].y, Points[segment + 1].x, Points[segment + 1].y);\n    double dir = Math.atan2(Points[segment + 1].y - Points[segment].y, Points[segment + 1].x - Points[segment].x);\n    double alpha = dir + angle;\n\n    Point2D.Double p = new Point2D.Double(\n    (int) (segPoint.x + distance * Math.cos(alpha)),\n    (int) (segPoint.y + distance * Math.sin(alpha))\n    );\n\n    if (p.x >= segPoint.x) {\n    if (p.y >= segPoint.y) {\n    // South East\n    return new Point2D.Double(p.x, p.y);\n    } else {\n    // North East\n    return new Point2D.Double(p.x, p.y - labelDim.height);\n    }\n    } else {\n    if (p.y >= segPoint.y) {\n    // South West\n    return new Point2D.Double(p.x - labelDim.width,  p.y);\n    } else {\n    // North West\n    return new Point2D.Double(p.x - labelDim.width, p.y - labelDim.height);\n    }\n    }\n     */\r\n}'),(346,'Figure label','org.jhotdraw.draw.Figure',174,119,'org.jhotdraw.draw.BezierLabelLocator',1225,'org.jhotdraw.draw.BezierLabelLocator.getRelativeLabelPoint(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns a Point2D.Double on the polyline that is at the provided relative position.\r\n * XXX - Implement this and move it to BezierPath\r\n */\r\npublic Point2D.Double getRelativeLabelPoint(BezierFigure owner, Figure label) {\r\n    // Get a point on the path an the next point on the path\r\n    Point2D.Double point = owner.getPointOnPath(((float) (relativePosition)), 3);\r\n    if (point == null) {\r\n        return new Point2D.Double(0, 0);\r\n    }\r\n    Point2D.Double nextPoint = owner.getPointOnPath(((relativePosition) < 0.5 ? ((float) (relativePosition)) + 0.1F : ((float) (relativePosition)) - 0.1F), 3);\r\n    double dir = Math.atan2(((nextPoint.y) - (point.y)), ((nextPoint.x) - (point.x)));\r\n    if ((relativePosition) >= 0.5) {\r\n        dir += Math.PI;\r\n    }\r\n    double alpha = dir + (angle);\r\n    Point2D.Double p = new Point2D.Double(((point.x) + ((distance) * (Math.cos(alpha)))), ((point.y) + ((distance) * (Math.sin(alpha)))));\r\n    if (Double.isNaN(p.x))\r\n        p = point;\r\n\r\n    Dimension2DDouble labelDim = label.getPreferredSize();\r\n    if ((((relativePosition) == 0.5) && ((p.x) >= ((point.x) - ((distance) / 2)))) && ((p.x) <= ((point.x) + ((distance) / 2)))) {\r\n        if ((p.y) >= (point.y)) {\r\n            // South East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), p.y);\r\n        } else {\r\n            // North East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), ((p.y) - (labelDim.height)));\r\n        }\r\n    } else {\r\n        if ((p.x) >= (point.x)) {\r\n            if ((p.y) >= (point.y)) {\r\n                // South East\r\n                return new Point2D.Double(p.x, p.y);\r\n            } else {\r\n                // North East\r\n                return new Point2D.Double(p.x, ((p.y) - (labelDim.height)));\r\n            }\r\n        } else {\r\n            if ((p.y) >= (point.y)) {\r\n                // South West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), p.y);\r\n            } else {\r\n                // North West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), ((p.y) - (labelDim.height)));\r\n            }\r\n        }\r\n    }\r\n    /* int percentage = (int) (relativePosition * 100);\n\n    int segment; // relative segment\n    Point2D.Double segPoint; // relative Point2D.Double on the segment\n    int nPoints = owner.getPointCount();\n    Point2D.Double[] Points = owner.getPoints();\n\n    if (nPoints < 2) return new Point2D.Double(0, 0);\n\n    switch (percentage) {\n    case 0 :\n    segment = 0;\n    segPoint = owner.getStartPoint();\n    break;\n    case 100 :\n    segment = owner.getPointCount() - 2;\n    segPoint = owner.getEndPoint();\n    break;\n    default :\n    double totalLength = 0d;\n    double[] segLength = new double[nPoints - 1];\n    for (int i=1; i < nPoints; i++) {\n    segLength[i-1] = Geom.length(Points[i-1].x, Points[i-1].y, Points[i].x, Points[i].y);\n    totalLength += segLength[i-1];\n    }\n    double relativeProgress = percentage * totalLength / 101d;\n    segment = 0;\n    double segMin = 0d;\n    for (segment=0; segment < segLength.length - 1; segment++) {\n    if (segMin + segLength[segment] > relativeProgress) break;\n    segMin += segLength[segment];\n    }\n\n    // Compute the relative Point2D.Double on the line\n    segPoint = new Point2D.Double();\n    relativeProgress -= segMin;\n    segPoint.x = (int) ((Points[segment].x * (segLength[segment] - relativeProgress) + Points[segment + 1].x * relativeProgress) / segLength[segment] +.5);\n    segPoint.y = (int) ((Points[segment].y * (segLength[segment] - relativeProgress) + Points[segment + 1].y * relativeProgress) / segLength[segment] +.5);\n\n    break;\n    }\n\n    Dimension2DDouble labelDim = label.getPreferredSize();\n\n    Line2D.Double line = new Line2D.Double(Points[segment].x, Points[segment].y, Points[segment + 1].x, Points[segment + 1].y);\n    double dir = Math.atan2(Points[segment + 1].y - Points[segment].y, Points[segment + 1].x - Points[segment].x);\n    double alpha = dir + angle;\n\n    Point2D.Double p = new Point2D.Double(\n    (int) (segPoint.x + distance * Math.cos(alpha)),\n    (int) (segPoint.y + distance * Math.sin(alpha))\n    );\n\n    if (p.x >= segPoint.x) {\n    if (p.y >= segPoint.y) {\n    // South East\n    return new Point2D.Double(p.x, p.y);\n    } else {\n    // North East\n    return new Point2D.Double(p.x, p.y - labelDim.height);\n    }\n    } else {\n    if (p.y >= segPoint.y) {\n    // South West\n    return new Point2D.Double(p.x - labelDim.width,  p.y);\n    } else {\n    // North West\n    return new Point2D.Double(p.x - labelDim.width, p.y - labelDim.height);\n    }\n    }\n     */\r\n}'),(347,'DOMInput in','org.jhotdraw.xml.DOMInput',650,119,'org.jhotdraw.draw.BezierLabelLocator',1229,'org.jhotdraw.draw.BezierLabelLocator.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) {\r\n    relativePosition = in.getAttribute(\"relativePosition\", 0.0);\r\n    angle = in.getAttribute(\"angle\", 0.0);\r\n    distance = in.getAttribute(\"distance\", 0);\r\n}'),(348,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,119,'org.jhotdraw.draw.BezierLabelLocator',1230,'org.jhotdraw.draw.BezierLabelLocator.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) {\r\n    out.addAttribute(\"relativePosition\", relativePosition);\r\n    out.addAttribute(\"angle\", angle);\r\n    out.addAttribute(\"distance\", distance);\r\n}'),(349,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,120,'org.jhotdraw.draw.BezierNodeEdit',1231,'org.jhotdraw.draw.BezierNodeEdit.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeEdit(BezierFigure owner, int index, BezierPath.Node oldValue, BezierPath.Node newValue) {\r\n    this.owner = owner;\r\n    this.index = index;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(350,'BezierPath.Node oldValue','org.jhotdraw.geom.BezierPath$Node',342,120,'org.jhotdraw.draw.BezierNodeEdit',1231,'org.jhotdraw.draw.BezierNodeEdit.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeEdit(BezierFigure owner, int index, BezierPath.Node oldValue, BezierPath.Node newValue) {\r\n    this.owner = owner;\r\n    this.index = index;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(351,'BezierPath.Node newValue','org.jhotdraw.geom.BezierPath$Node',342,120,'org.jhotdraw.draw.BezierNodeEdit',1231,'org.jhotdraw.draw.BezierNodeEdit.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeEdit(BezierFigure owner, int index, BezierPath.Node oldValue, BezierPath.Node newValue) {\r\n    this.owner = owner;\r\n    this.index = index;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(352,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,121,'org.jhotdraw.draw.BezierNodeHandle',1236,'org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeHandle(BezierFigure owner, int index) {\r\n    this(owner, index, owner);\r\n}'),(353,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,121,'org.jhotdraw.draw.BezierNodeHandle',1237,'org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.draw.Figure)',0,'public BezierNodeHandle(BezierFigure owner, int index, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}'),(354,'Figure transformOwner','org.jhotdraw.draw.Figure',174,121,'org.jhotdraw.draw.BezierNodeHandle',1237,'org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.draw.Figure)',0,'public BezierNodeHandle(BezierFigure owner, int index, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}'),(355,'BezierPath.Node v','org.jhotdraw.geom.BezierPath$Node',342,121,'org.jhotdraw.draw.BezierNodeHandle',1244,'org.jhotdraw.draw.BezierNodeHandle.fireAreaInvalidated(org.jhotdraw.geom.BezierPath$Node)',0,'private void fireAreaInvalidated(BezierPath.Node v) {\r\n    Rectangle2D.Double dr = new Rectangle2D.Double(v.x[0], v.y[0], 0, 0);\r\n    for (int i = 1; i < 3; i++) {\r\n        dr.add(v.x[i], v.y[i]);\r\n    }\r\n    Rectangle vr = view.drawingToView(dr);\r\n    vr.grow(getHandlesize(), getHandlesize());\r\n    fireAreaInvalidated(vr);\r\n}'),(356,'Handle h','org.jhotdraw.draw.Handle',191,121,'org.jhotdraw.draw.BezierNodeHandle',1250,'org.jhotdraw.draw.BezierNodeHandle.isCombinableWith(org.jhotdraw.draw.Handle)',0,'@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    /* if (super.isCombinableWith(h)) {\n    BezierNodeHandle that = (BezierNodeHandle) h;\n    return that.index == this.index &&\n    that.getOwner().getNodeCount() ==\n    this.getOwner().getNodeCount();\n    }\n     */\r\n    return false;\r\n}'),(357,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,122,'org.jhotdraw.draw.BezierOutlineHandle',1256,'org.jhotdraw.draw.BezierOutlineHandle.-init-(org.jhotdraw.draw.BezierFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierOutlineHandle(BezierFigure owner) {\r\n    this(owner, false);\r\n}'),(358,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,122,'org.jhotdraw.draw.BezierOutlineHandle',1257,'org.jhotdraw.draw.BezierOutlineHandle.-init-(org.jhotdraw.draw.BezierFigure,boolean)',0,'public BezierOutlineHandle(BezierFigure owner, boolean isHoverHandle) {\r\n    super(owner);\r\n    this.isHoverHandle = isHoverHandle;\r\n}'),(359,'Figure owner','org.jhotdraw.draw.Figure',174,123,'org.jhotdraw.draw.BezierPointLocator',1267,'org.jhotdraw.draw.BezierPointLocator.locate(org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner) {\r\n    BezierFigure plf = ((BezierFigure) (owner));\r\n    if ((index) < (plf.getNodeCount())) {\r\n        return plf.getPoint(index, coord);\r\n    }\r\n    return new Point2D.Double(0, 0);\r\n}'),(360,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,123,'org.jhotdraw.draw.BezierPointLocator',1269,'org.jhotdraw.draw.BezierPointLocator.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) {\r\n    out.addAttribute(\"index\", index, 0);\r\n    out.addAttribute(\"coord\", coord, 0);\r\n}'),(361,'DOMInput in','org.jhotdraw.xml.DOMInput',650,123,'org.jhotdraw.draw.BezierPointLocator',1268,'org.jhotdraw.draw.BezierPointLocator.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) {\r\n    index = in.getAttribute(\"index\", 0);\r\n    coord = in.getAttribute(\"coord\", 0);\r\n}'),(362,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,124,'org.jhotdraw.draw.BezierScaleHandle',1270,'org.jhotdraw.draw.BezierScaleHandle.-init-(org.jhotdraw.draw.BezierFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierScaleHandle(BezierFigure owner) {\r\n    super(owner);\r\n}'),(363,'Handle h','org.jhotdraw.draw.Handle',191,124,'org.jhotdraw.draw.BezierScaleHandle',1276,'org.jhotdraw.draw.BezierScaleHandle.isCombinableWith(org.jhotdraw.draw.Handle)',0,'public boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}'),(364,'BezierFigure prototype','org.jhotdraw.draw.BezierFigure',118,125,'org.jhotdraw.draw.BezierTool',1280,'org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierTool(BezierFigure prototype) {\r\n    this(prototype, null);\r\n}'),(365,'BezierFigure prototype','org.jhotdraw.draw.BezierFigure',118,125,'org.jhotdraw.draw.BezierTool',1281,'org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BezierTool(BezierFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}'),(366,'BezierFigure prototype','org.jhotdraw.draw.BezierFigure',118,125,'org.jhotdraw.draw.BezierTool',1282,'org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure,java.util.Map,java.lang.String)',0,'public BezierTool(BezierFigure prototype, Map<AttributeKey, Object> attributes, String name) {\r\n    this.prototype = prototype;\r\n    this.attributes = attributes;\r\n    if (name == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        name = labels.getString(\"edit.createFigure.text\");\r\n    }\r\n    this.presentationName = name;\r\n}'),(367,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,125,'org.jhotdraw.draw.BezierTool',1284,'org.jhotdraw.draw.BezierTool.activate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n}'),(368,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,125,'org.jhotdraw.draw.BezierTool',1288,'org.jhotdraw.draw.BezierTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    getView().setCursor(Cursor.getDefaultCursor());\r\n    if ((createdFigure) != null) {\r\n        if (((anchor) != null) && ((mouseLocation) != null)) {\r\n            Rectangle r = new Rectangle(anchor);\r\n            r.add(mouseLocation);\r\n            if (((createdFigure.getNodeCount()) > 0) && (createdFigure.isClosed())) {\r\n                r.add(getView().drawingToView(createdFigure.getStartPoint()));\r\n            }\r\n            fireAreaInvalidated(r);\r\n        }\r\n        finishCreation(createdFigure, creationView);\r\n        createdFigure = null;\r\n    }\r\n}'),(369,'Figure createdFigure','org.jhotdraw.draw.Figure',174,125,'org.jhotdraw.draw.BezierTool',1291,'org.jhotdraw.draw.BezierTool.fireUndoEvent(org.jhotdraw.draw.Figure,org.jhotdraw.draw.DrawingView)',0,'protected void fireUndoEvent(Figure createdFigure, DrawingView creationView) {\r\n    final Figure addedFigure = createdFigure;\r\n    final Drawing addedDrawing = creationView.getDrawing();\r\n    final DrawingView addedView = creationView;\r\n    getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        public String getPresentationName() {\r\n            return presentationName;\r\n        }\r\n\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            addedDrawing.remove(addedFigure);\r\n        }\r\n\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            addedView.clearSelection();\r\n            addedDrawing.add(addedFigure);\r\n            addedView.addToSelection(addedFigure);\r\n        }\r\n    });\r\n}'),(370,'DrawingView creationView','org.jhotdraw.draw.DrawingView',171,125,'org.jhotdraw.draw.BezierTool',1291,'org.jhotdraw.draw.BezierTool.fireUndoEvent(org.jhotdraw.draw.Figure,org.jhotdraw.draw.DrawingView)',0,'protected void fireUndoEvent(Figure createdFigure, DrawingView creationView) {\r\n    final Figure addedFigure = createdFigure;\r\n    final Drawing addedDrawing = creationView.getDrawing();\r\n    final DrawingView addedView = creationView;\r\n    getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        public String getPresentationName() {\r\n            return presentationName;\r\n        }\r\n\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            addedDrawing.remove(addedFigure);\r\n        }\r\n\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            addedView.clearSelection();\r\n            addedDrawing.add(addedFigure);\r\n            addedView.addToSelection(addedFigure);\r\n        }\r\n    });\r\n}'),(371,'BezierFigure createdFigure','org.jhotdraw.draw.BezierFigure',118,125,'org.jhotdraw.draw.BezierTool',1290,'org.jhotdraw.draw.BezierTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)',0,'protected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    fireUndoEvent(createdFigure, creationView);\r\n    creationView.addToSelection(createdFigure);\r\n    if (isToolDoneAfterCreation) {\r\n        fireToolDone();\r\n    }\r\n}'),(372,'DrawingView creationView','org.jhotdraw.draw.DrawingView',171,125,'org.jhotdraw.draw.BezierTool',1290,'org.jhotdraw.draw.BezierTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)',0,'protected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    fireUndoEvent(createdFigure, creationView);\r\n    creationView.addToSelection(createdFigure);\r\n    if (isToolDoneAfterCreation) {\r\n        fireToolDone();\r\n    }\r\n}'),(373,'BezierPath path','org.jhotdraw.geom.BezierPath',343,125,'org.jhotdraw.draw.BezierTool',1286,'org.jhotdraw.draw.BezierTool.calculateFittedCurve(org.jhotdraw.geom.BezierPath)',0,'protected BezierPath calculateFittedCurve(BezierPath path) {\r\n    return Bezier.fitBezierPath(path, (1.5 / (getView().getScaleFactor())));\r\n}'),(374,'org.jhotdraw.geom.BezierPath','org.jhotdraw.geom.BezierPath',343,125,'org.jhotdraw.draw.BezierTool',1286,'org.jhotdraw.draw.BezierTool.calculateFittedCurve(org.jhotdraw.geom.BezierPath)',1,'protected BezierPath calculateFittedCurve(BezierPath path) {\r\n    return Bezier.fitBezierPath(path, (1.5 / (getView().getScaleFactor())));\r\n}'),(375,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1302,'org.jhotdraw.draw.BidirectionalConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BidirectionalConnectionTool(ConnectionFigure prototype) {\r\n    this.prototype = prototype;\r\n}'),(376,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1303,'org.jhotdraw.draw.BidirectionalConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map)',0,'public BidirectionalConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this.prototype = prototype;\r\n    this.attributes = attributes;\r\n}'),(377,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1304,'org.jhotdraw.draw.BidirectionalConnectionTool.activate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().clearSelection();\r\n}'),(378,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1308,'org.jhotdraw.draw.BidirectionalConnectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n}'),(379,'Drawing drawing','org.jhotdraw.draw.Drawing',168,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1319,'org.jhotdraw.draw.BidirectionalConnectionTool.findSource(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findSource(Point2D.Double p, Drawing drawing) {\r\n    return findConnectableFigure(p, drawing);\r\n}'),(380,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1319,'org.jhotdraw.draw.BidirectionalConnectionTool.findSource(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',1,'/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findSource(Point2D.Double p, Drawing drawing) {\r\n    return findConnectableFigure(p, drawing);\r\n}'),(381,'Drawing drawing','org.jhotdraw.draw.Drawing',168,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1320,'org.jhotdraw.draw.BidirectionalConnectionTool.findTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    Connector targetConnector = (target == null) ? null : target.findConnector(p, prototype);\r\n    Connector startConnector = getStartConnector();\r\n    if ((((targetConnector != null) && ((getConnection()) != null)) && (target.canConnect())) && ((getConnection().canConnect(startConnector, targetConnector)) || (getConnection().canConnect(targetConnector, startConnector)))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(382,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1320,'org.jhotdraw.draw.BidirectionalConnectionTool.findTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',1,'/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    Connector targetConnector = (target == null) ? null : target.findConnector(p, prototype);\r\n    Connector startConnector = getStartConnector();\r\n    if ((((targetConnector != null) && ((getConnection()) != null)) && (target.canConnect())) && ((getConnection().canConnect(startConnector, targetConnector)) || (getConnection().canConnect(targetConnector, startConnector)))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(383,'Drawing drawing','org.jhotdraw.draw.Drawing',168,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1316,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnection(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Finds an existing connection figure.\r\n */\r\nprotected ConnectionFigure findConnection(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        Figure fInside = f.findFigureInside(p);\r\n        if ((fInside != null) && (fInside instanceof ConnectionFigure)) {\r\n            return ((ConnectionFigure) (fInside));\r\n        }\r\n    }\r\n    return null;\r\n}'),(384,'org.jhotdraw.draw.ConnectionFigure','org.jhotdraw.draw.ConnectionFigure',142,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1316,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnection(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',1,'/**\r\n * Finds an existing connection figure.\r\n */\r\nprotected ConnectionFigure findConnection(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        Figure fInside = f.findFigureInside(p);\r\n        if ((fInside != null) && (fInside instanceof ConnectionFigure)) {\r\n            return ((ConnectionFigure) (fInside));\r\n        }\r\n    }\r\n    return null;\r\n}'),(385,'ConnectionFigure newConnection','org.jhotdraw.draw.ConnectionFigure',142,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1331,'org.jhotdraw.draw.BidirectionalConnectionTool.setConnection(org.jhotdraw.draw.ConnectionFigure)',0,'private void setConnection(ConnectionFigure newConnection) {\r\n    connection = newConnection;\r\n}'),(386,'Figure target','org.jhotdraw.draw.Figure',174,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1318,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)',0,'private Connector findConnector(Point2D.Double p, Figure target, ConnectionFigure f) {\r\n    return target.findConnector(p, f);\r\n}'),(387,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1318,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)',1,'private Connector findConnector(Point2D.Double p, Figure target, ConnectionFigure f) {\r\n    return target.findConnector(p, f);\r\n}'),(388,'ConnectionFigure f','org.jhotdraw.draw.ConnectionFigure',142,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1318,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)',0,'private Connector findConnector(Point2D.Double p, Figure target, ConnectionFigure f) {\r\n    return target.findConnector(p, f);\r\n}'),(389,'Drawing drawing','org.jhotdraw.draw.Drawing',168,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1317,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnectionStart(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Finds a connection start figure.\r\n */\r\nprotected Figure findConnectionStart(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    if ((target != null) && (target.canConnect())) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(390,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1317,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnectionStart(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',1,'/**\r\n * Finds a connection start figure.\r\n */\r\nprotected Figure findConnectionStart(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    if ((target != null) && (target.canConnect())) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(391,'Drawing drawing','org.jhotdraw.draw.Drawing',168,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1315,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',0,'private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    return drawing.findFigureExcept(p, createdFigure);\r\n}'),(392,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1315,'org.jhotdraw.draw.BidirectionalConnectionTool.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',1,'private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    return drawing.findFigureExcept(p, createdFigure);\r\n}'),(393,'Connector newStartConnector','org.jhotdraw.draw.Connector',145,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1334,'org.jhotdraw.draw.BidirectionalConnectionTool.setStartConnector(org.jhotdraw.draw.Connector)',0,'private void setStartConnector(Connector newStartConnector) {\r\n    startConnector = newStartConnector;\r\n}'),(394,'Connector newEndConnector','org.jhotdraw.draw.Connector',145,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1333,'org.jhotdraw.draw.BidirectionalConnectionTool.setEndConnector(org.jhotdraw.draw.Connector)',0,'private void setEndConnector(Connector newEndConnector) {\r\n    endConnector = newEndConnector;\r\n}'),(395,'Connector newTargetConnector','org.jhotdraw.draw.Connector',145,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1335,'org.jhotdraw.draw.BidirectionalConnectionTool.setTargetConnector(org.jhotdraw.draw.Connector)',0,'private void setTargetConnector(Connector newTargetConnector) {\r\n    targetConnector = newTargetConnector;\r\n}'),(396,'Figure newTarget','org.jhotdraw.draw.Figure',174,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1336,'org.jhotdraw.draw.BidirectionalConnectionTool.setTargetFigure(org.jhotdraw.draw.Figure)',0,'private void setTargetFigure(Figure newTarget) {\r\n    target = newTarget;\r\n}'),(397,'Figure newCreatedFigure','org.jhotdraw.draw.Figure',174,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1332,'org.jhotdraw.draw.BidirectionalConnectionTool.setCreatedFigure(org.jhotdraw.draw.Figure)',0,'private void setCreatedFigure(Figure newCreatedFigure) {\r\n    createdFigure = newCreatedFigure;\r\n}'),(398,'FigureEvent evt','org.jhotdraw.draw.FigureEvent',176,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1305,'org.jhotdraw.draw.BidirectionalConnectionTool.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'public void areaInvalidated(FigureEvent evt) {\r\n    fireAreaInvalidated(evt.getInvalidatedArea());\r\n}'),(399,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1310,'org.jhotdraw.draw.BidirectionalConnectionTool.figureAdded(org.jhotdraw.draw.FigureEvent)',0,'public void figureAdded(FigureEvent e) {\r\n}'),(400,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1311,'org.jhotdraw.draw.BidirectionalConnectionTool.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureChanged(FigureEvent e) {\r\n}'),(401,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1313,'org.jhotdraw.draw.BidirectionalConnectionTool.figureRemoved(org.jhotdraw.draw.FigureEvent)',0,'public void figureRemoved(FigureEvent e) {\r\n}'),(402,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1314,'org.jhotdraw.draw.BidirectionalConnectionTool.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'public void figureRequestRemove(FigureEvent e) {\r\n}'),(403,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1306,'org.jhotdraw.draw.BidirectionalConnectionTool.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'public void attributeChanged(FigureEvent e) {\r\n}'),(404,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,126,'org.jhotdraw.draw.BidirectionalConnectionTool',1312,'org.jhotdraw.draw.BidirectionalConnectionTool.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureHandlesChanged(FigureEvent e) {\r\n}'),(405,'Figure owner','org.jhotdraw.draw.Figure',174,128,'org.jhotdraw.draw.BoundsOutlineHandle',1340,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a bounds outline handle for resizing a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner) {\r\n    this(owner, false, false);\r\n}'),(406,'Figure owner','org.jhotdraw.draw.Figure',174,128,'org.jhotdraw.draw.BoundsOutlineHandle',1341,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,boolean,boolean)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, boolean isTransformHandle, boolean isHoverHandle) {\r\n    super(owner);\r\n    if (isTransformHandle) {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;\r\n    } else {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;\r\n    }\r\n}'),(407,'Figure owner','org.jhotdraw.draw.Figure',174,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(408,'// \r\nAttributeKey<Stroke> stroke1Enabled','org.jhotdraw.draw.AttributeKey',109,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(409,'AttributeKey<Color> strokeColor1Enabled','org.jhotdraw.draw.AttributeKey',109,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(410,'// \r\nAttributeKey<Stroke> stroke2Enabled','org.jhotdraw.draw.AttributeKey',109,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(411,'AttributeKey<Color> strokeColor2Enabled','org.jhotdraw.draw.AttributeKey',109,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(412,'// \r\nAttributeKey<Stroke> stroke1Disabled','org.jhotdraw.draw.AttributeKey',109,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(413,'AttributeKey<Color> strokeColor1Disabled','org.jhotdraw.draw.AttributeKey',109,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(414,'// \r\nAttributeKey<Stroke> stroke2Disabled','org.jhotdraw.draw.AttributeKey',109,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(415,'AttributeKey<Color> strokeColor2Disabled','org.jhotdraw.draw.AttributeKey',109,128,'org.jhotdraw.draw.BoundsOutlineHandle',1342,'org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(416,'BezierFigure owner','org.jhotdraw.draw.BezierFigure',118,129,'org.jhotdraw.draw.ChopBezierConnector',1350,'org.jhotdraw.draw.ChopBezierConnector.-init-(org.jhotdraw.draw.BezierFigure)',0,'public ChopBezierConnector(BezierFigure owner) {\r\n    super(owner);\r\n}'),(417,'Figure target','org.jhotdraw.draw.Figure',174,129,'org.jhotdraw.draw.ChopBezierConnector',1351,'org.jhotdraw.draw.ChopBezierConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    BezierFigure bf = ((BezierFigure) (getConnectorTarget(target)));\r\n    return bf.chop(from);\r\n}'),(418,'Figure owner','org.jhotdraw.draw.Figure',174,130,'org.jhotdraw.draw.ChopDiamondConnector',1353,'org.jhotdraw.draw.ChopDiamondConnector.-init-(org.jhotdraw.draw.Figure)',0,'public ChopDiamondConnector(Figure owner) {\r\n    super(owner);\r\n}'),(419,'Figure target','org.jhotdraw.draw.Figure',174,130,'org.jhotdraw.draw.ChopDiamondConnector',1354,'org.jhotdraw.draw.ChopDiamondConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'/**\r\n * Return an appropriate connection point on the edge of a diamond figure\r\n */\r\nprotected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if (DiamondFigure.IS_QUADRATIC.get(target)) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    double growx;\r\n    double growy;\r\n    // FIXME - This code is wrong. Copy correct code from DiamondFigure.\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n        case INSIDE :\r\n            {\r\n                growx = growy = 0.0F;\r\n                break;\r\n            }\r\n        case OUTSIDE :\r\n            {\r\n                double lineLength = Math.sqrt((((r.width) * (r.width)) + ((r.height) * (r.height))));\r\n                double scale = ((AttributeKeys.getStrokeTotalWidth(target)) * 2.0) / lineLength;\r\n                growx = scale * (r.height);\r\n                growy = scale * (r.width);\r\n                // growy = getStrokeTotalWidth() * SQRT2;\r\n                break;\r\n            }\r\n        case CENTER :\r\n        default :\r\n            double lineLength = Math.sqrt((((r.width) * (r.width)) + ((r.height) * (r.height))));\r\n            double scale = (AttributeKeys.getStrokeTotalWidth(target)) / lineLength;\r\n            growx = scale * (r.height);\r\n            growy = scale * (r.width);\r\n            // growx = growy = getStrokeTotalWidth() / 2d * SQRT2;\r\n            break;\r\n    }\r\n    Geom.grow(r, growx, growy);\r\n    // Center point\r\n    Point2D.Double c1 = new Point2D.Double(((r.x) + ((r.width) / 2)), ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double p2 = new Point2D.Double(((r.x) + ((r.width) / 2)), ((r.y) + (r.height)));\r\n    Point2D.Double p4 = new Point2D.Double(((r.x) + ((r.width) / 2)), r.y);\r\n    // If overlapping, just return the opposite corners\r\n    if (r.contains(from)) {\r\n        if (((from.y) > (r.y)) && ((from.y) < ((r.y) + ((r.height) / 2)))) {\r\n            return p2;\r\n        } else {\r\n            return p4;\r\n        }\r\n    }\r\n    // Calculate angle to determine quadrant\r\n    double ang = Geom.pointToAngle(r, from);\r\n    // Dermine line points\r\n    Point2D.Double p1 = new Point2D.Double(((r.x) + (r.width)), ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double p3 = new Point2D.Double(r.x, ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double rp = null;// This will be returned\r\n\r\n    // Get the intersection with edges\r\n    if ((ang > 0) && (ang < 1.57)) {\r\n        rp = Geom.intersect(p1.x, p1.y, p2.x, p2.y, c1.x, c1.y, from.x, from.y);\r\n    } else\r\n        if ((ang > 1.575) && (ang < 3.14)) {\r\n            rp = Geom.intersect(p2.x, p2.y, p3.x, p3.y, c1.x, c1.y, from.x, from.y);\r\n        } else\r\n            if ((ang > (-3.14)) && (ang < (-1.575))) {\r\n                rp = Geom.intersect(p3.x, p3.y, p4.x, p4.y, c1.x, c1.y, from.x, from.y);\r\n            } else\r\n                if ((ang > (-1.57)) && (ang < 0)) {\r\n                    rp = Geom.intersect(p4.x, p4.y, p1.x, p1.y, c1.x, c1.y, from.x, from.y);\r\n                }\r\n\r\n\r\n\r\n    // No proper edge found, we should send one of four corners\r\n    if (rp == null) {\r\n        rp = Geom.angleToPoint(r, ang);\r\n    }\r\n    return rp;\r\n}'),(420,'Figure owner','org.jhotdraw.draw.Figure',174,131,'org.jhotdraw.draw.ChopEllipseConnector',1356,'org.jhotdraw.draw.ChopEllipseConnector.-init-(org.jhotdraw.draw.Figure)',0,'public ChopEllipseConnector(Figure owner) {\r\n    super(owner);\r\n}'),(421,'Figure f','org.jhotdraw.draw.Figure',174,131,'org.jhotdraw.draw.ChopEllipseConnector',1358,'org.jhotdraw.draw.ChopEllipseConnector.getStrokeColor(org.jhotdraw.draw.Figure)',0,'private Color getStrokeColor(Figure f) {\r\n    return AttributeKeys.STROKE_COLOR.get(f);\r\n}'),(422,'Figure f','org.jhotdraw.draw.Figure',174,131,'org.jhotdraw.draw.ChopEllipseConnector',1359,'org.jhotdraw.draw.ChopEllipseConnector.getStrokeWidth(org.jhotdraw.draw.Figure)',0,'private float getStrokeWidth(Figure f) {\r\n    Double w = AttributeKeys.STROKE_WIDTH.get(f);\r\n    return w == null ? 1.0F : w.floatValue();\r\n}'),(423,'Figure target','org.jhotdraw.draw.Figure',174,131,'org.jhotdraw.draw.ChopEllipseConnector',1357,'org.jhotdraw.draw.ChopEllipseConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if ((getStrokeColor(target)) != null) {\r\n        double grow;\r\n        switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n            case CENTER :\r\n            default :\r\n                grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n                break;\r\n            case OUTSIDE :\r\n                grow = AttributeKeys.getStrokeTotalWidth(target);\r\n                break;\r\n            case INSIDE :\r\n                grow = 0.0F;\r\n                break;\r\n        }\r\n        Geom.grow(r, grow, grow);\r\n    }\r\n    double angle = Geom.pointToAngle(r, from);\r\n    return Geom.ovalAngleToPoint(r, angle);\r\n}'),(424,'Figure owner','org.jhotdraw.draw.Figure',174,132,'org.jhotdraw.draw.ChopRectangleConnector',1361,'org.jhotdraw.draw.ChopRectangleConnector.-init-(org.jhotdraw.draw.Figure)',0,'public ChopRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}'),(425,'ConnectionFigure connection','org.jhotdraw.draw.ConnectionFigure',142,132,'org.jhotdraw.draw.ChopRectangleConnector',1364,'org.jhotdraw.draw.ChopRectangleConnector.findStart(org.jhotdraw.draw.ConnectionFigure)',0,'@Override\r\npublic Point2D.Double findStart(ConnectionFigure connection) {\r\n    Figure startFigure = connection.getStartConnector().getOwner();\r\n    Point2D.Double from;\r\n    if (((connection.getNodeCount()) <= 2) || ((connection.getLiner()) != null)) {\r\n        if ((connection.getEndConnector()) == null) {\r\n            from = connection.getEndPoint();\r\n        } else {\r\n            Rectangle2D.Double r1 = getConnectorTarget(connection.getEndConnector().getOwner()).getBounds();\r\n            from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), ((r1.y) + ((r1.height) / 2)));\r\n        }\r\n    } else {\r\n        from = connection.getPoint(1);\r\n    }\r\n    return chop(startFigure, from);\r\n}'),(426,'ConnectionFigure connection','org.jhotdraw.draw.ConnectionFigure',142,132,'org.jhotdraw.draw.ChopRectangleConnector',1363,'org.jhotdraw.draw.ChopRectangleConnector.findEnd(org.jhotdraw.draw.ConnectionFigure)',0,'@Override\r\npublic Point2D.Double findEnd(ConnectionFigure connection) {\r\n    Figure endFigure = connection.getEndConnector().getOwner();\r\n    Point2D.Double from;\r\n    if (((((connection.getNodeCount()) <= 3) && ((connection.getStartFigure()) == (connection.getEndFigure()))) || ((connection.getNodeCount()) <= 2)) || ((connection.getLiner()) != null)) {\r\n        if ((connection.getStartConnector()) == null) {\r\n            from = connection.getStartPoint();\r\n        } else\r\n            if ((connection.getStartFigure()) == (connection.getEndFigure())) {\r\n                Rectangle2D.Double r1 = getConnectorTarget(connection.getStartConnector().getOwner()).getBounds();\r\n                from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), r1.y);\r\n            } else {\r\n                Rectangle2D.Double r1 = getConnectorTarget(connection.getStartConnector().getOwner()).getBounds();\r\n                from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), ((r1.y) + ((r1.height) / 2)));\r\n            }\r\n\r\n    } else {\r\n        from = connection.getPoint(((connection.getNodeCount()) - 2));\r\n    }\r\n    return chop(endFigure, from);\r\n}'),(427,'Figure target','org.jhotdraw.draw.Figure',174,132,'org.jhotdraw.draw.ChopRectangleConnector',1362,'org.jhotdraw.draw.ChopRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if ((AttributeKeys.STROKE_COLOR.get(target)) != null) {\r\n        double grow;\r\n        switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n            case CENTER :\r\n            default :\r\n                grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n                break;\r\n            case OUTSIDE :\r\n                grow = AttributeKeys.getStrokeTotalWidth(target);\r\n                break;\r\n            case INSIDE :\r\n                grow = 0.0;\r\n                break;\r\n        }\r\n        Geom.grow(r, grow, grow);\r\n    }\r\n    return Geom.angleToPoint(r, Geom.pointToAngle(r, from));\r\n}'),(428,'Figure owner','org.jhotdraw.draw.Figure',174,133,'org.jhotdraw.draw.ChopRoundRectangleConnector',1366,'org.jhotdraw.draw.ChopRoundRectangleConnector.-init-(org.jhotdraw.draw.Figure)',0,'public ChopRoundRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}'),(429,'Figure target','org.jhotdraw.draw.Figure',174,133,'org.jhotdraw.draw.ChopRoundRectangleConnector',1367,'org.jhotdraw.draw.ChopRoundRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    RoundRectangleFigure rrf = ((RoundRectangleFigure) (target));\r\n    Rectangle2D.Double outer = rrf.getBounds();\r\n    double grow;\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n        case CENTER :\r\n        default :\r\n            grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n            break;\r\n        case OUTSIDE :\r\n            grow = AttributeKeys.getStrokeTotalWidth(target);\r\n            break;\r\n        case INSIDE :\r\n            grow = 0;\r\n            break;\r\n    }\r\n    Geom.grow(outer, grow, grow);\r\n    Rectangle2D.Double inner = ((Rectangle2D.Double) (outer.clone()));\r\n    double gw = (-((rrf.getArcWidth()) + (grow * 2))) / 2;\r\n    double gh = (-((rrf.getArcHeight()) + (grow * 2))) / 2;\r\n    inner.x -= gw;\r\n    inner.y -= gh;\r\n    inner.width += gw * 2;\r\n    inner.height += gh * 2;\r\n    double angle = Geom.pointToAngle(outer, from);\r\n    Point2D.Double p = Geom.angleToPoint(outer, Geom.pointToAngle(outer, from));\r\n    if (((p.x) == (outer.x)) || ((p.x) == ((outer.x) + (outer.width)))) {\r\n        p.y = Math.min(Math.max(p.y, inner.y), ((inner.y) + (inner.height)));\r\n    } else {\r\n        p.x = Math.min(Math.max(p.x, inner.x), ((inner.x) + (inner.width)));\r\n    }\r\n    return p;\r\n}'),(430,'TriangleFigure owner','org.jhotdraw.draw.TriangleFigure',277,134,'org.jhotdraw.draw.ChopTriangleConnector',1369,'org.jhotdraw.draw.ChopTriangleConnector.-init-(org.jhotdraw.draw.TriangleFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ChopTriangleConnector(TriangleFigure owner) {\r\n    super(owner);\r\n}'),(431,'Figure target','org.jhotdraw.draw.Figure',174,134,'org.jhotdraw.draw.ChopTriangleConnector',1370,'org.jhotdraw.draw.ChopTriangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    TriangleFigure bf = ((TriangleFigure) (getConnectorTarget(target)));\r\n    return bf.chop(from);\r\n}'),(432,'Figure owner','org.jhotdraw.draw.Figure',174,135,'org.jhotdraw.draw.CloseHandle',1371,'org.jhotdraw.draw.CloseHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic CloseHandle(Figure owner) {\r\n    super(owner, new RelativeLocator(1.0, 0.0));\r\n}'),(433,'Figure child','org.jhotdraw.draw.Figure',174,136,'org.jhotdraw.draw.CompositeFigure',1379,'org.jhotdraw.draw.CompositeFigure.add(org.jhotdraw.draw.Figure)',0,'/**\r\n * Adds a child to the figure.\r\n * <p>\r\n * This is a convenience method for {@code add(getChildCount(), child);}\r\n * <p>\r\n * This method calls {@code figureAdded} on all registered\r\n * {@code CompositeFigureListener}s.\r\n *\r\n * @return {@code true} if this CompositeFigure changed as a result of the\r\ncall\r\n */\r\npublic boolean add(Figure child);'),(434,'Figure child','org.jhotdraw.draw.Figure',174,136,'org.jhotdraw.draw.CompositeFigure',1378,'org.jhotdraw.draw.CompositeFigure.add(int,org.jhotdraw.draw.Figure)',0,'/**\r\n * Adds a child to the figure at the specified index.\r\n * <p>\r\n * This method calls {@code figureAdded} on all registered\r\n * {@code CompositeFigureListener}s.\r\n */\r\npublic void add(int index, Figure child);'),(435,'Figure child','org.jhotdraw.draw.Figure',174,136,'org.jhotdraw.draw.CompositeFigure',1382,'org.jhotdraw.draw.CompositeFigure.basicAdd(org.jhotdraw.draw.Figure)',0,'/**\r\n * Adds a child to the figure without firing events.\r\n * <p>\r\n * This method can be used to reinsert a child figure which has been\r\n * temporarily removed from this CompositeFigure (for example to reorder\r\n * the sequence of the children) and to efficiently build a drawing from\r\n * an {@link InputFormat}.\r\n *\r\n * This is a convenience method for calling\r\n * {@code basicAdd(getChildCount(), child);}.\r\n */\r\npublic void basicAdd(Figure child);'),(436,'Figure child','org.jhotdraw.draw.Figure',174,136,'org.jhotdraw.draw.CompositeFigure',1381,'org.jhotdraw.draw.CompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)',0,'/**\r\n * Adds a child to the figure at the specified index without\r\n * firing events.\r\n * <p>\r\n * This method can be used to reinsert a child figure which has been\r\n * temporarily removed from this CompositeFigure (for example to reorder\r\n * the sequence of the children) and to efficiently build a drawing from\r\n * an {@link InputFormat}.\r\n */\r\npublic void basicAdd(int index, Figure child);'),(437,'Figure child','org.jhotdraw.draw.Figure',174,136,'org.jhotdraw.draw.CompositeFigure',1393,'org.jhotdraw.draw.CompositeFigure.remove(org.jhotdraw.draw.Figure)',0,'/**\r\n * Removes the specified child.\r\n * Returns true, if the Figure contained the removed child.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code removeChild(getChildren().indexOf(child));}\r\n * <p>\r\n * This method calls {@code figureRemoved} on all registered\r\n * {@code CompositeFigureListener}s.\r\n */\r\npublic boolean remove(Figure child);'),(438,'Figure child','org.jhotdraw.draw.Figure',174,136,'org.jhotdraw.draw.CompositeFigure',1383,'org.jhotdraw.draw.CompositeFigure.basicRemove(org.jhotdraw.draw.Figure)',0,'/**\r\n * Removes the specified child without firing events.\r\n * <p>\r\n * This method can be used to temporarily remove a child from this\r\n * CompositeFigure (for example to reorder the sequence of the children).\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code basicRemove(indexOf(child));}.\r\n * <p>\r\n * Returns the index of the removed figure. Returns -1 if the\r\n * figure was not a child of this CompositeFigure.\r\n */\r\npublic int basicRemove(Figure child);'),(439,'Figure child','org.jhotdraw.draw.Figure',174,136,'org.jhotdraw.draw.CompositeFigure',1391,'org.jhotdraw.draw.CompositeFigure.indexOf(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns the index of the specified child.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code getChildren().indexOf(index);}.\r\n *\r\n * @return The index of the child, or -1 if the specified figure is not\r\na child of this CompositeFigure.\r\n */\r\npublic int indexOf(Figure child);'),(440,'Figure f','org.jhotdraw.draw.Figure',174,136,'org.jhotdraw.draw.CompositeFigure',1386,'org.jhotdraw.draw.CompositeFigure.contains(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns true if this composite figure contains the specified figure.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code getChildren().contains(f);}.\r\n */\r\npublic boolean contains(Figure f);'),(441,'Layouter newValue','org.jhotdraw.draw.Layouter',207,136,'org.jhotdraw.draw.CompositeFigure',1397,'org.jhotdraw.draw.CompositeFigure.setLayouter(org.jhotdraw.draw.Layouter)',0,'/**\r\n * Set a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation. It is a good idea to set\r\n * the Layouter in the protected initialize() method\r\n * so it can be recreated if a GraphicalCompositeFigure is\r\n * read and restored from a StorableInput stream.\r\n *\r\n * @param newValue	encapsulation\r\n * 		of a layout algorithm.\r\n */\r\npublic void setLayouter(Layouter newValue);'),(442,'CompositeFigureListener listener','org.jhotdraw.draw.CompositeFigureListener',138,136,'org.jhotdraw.draw.CompositeFigure',1380,'org.jhotdraw.draw.CompositeFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)',0,'/**\r\n * Adds a listener for this composite figure.\r\n */\r\npublic void addCompositeFigureListener(CompositeFigureListener listener);'),(443,'CompositeFigureListener listener','org.jhotdraw.draw.CompositeFigureListener',138,136,'org.jhotdraw.draw.CompositeFigure',1396,'org.jhotdraw.draw.CompositeFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)',0,'/**\r\n * Removes a listener from this composite figure.\r\n */\r\npublic void removeCompositeFigureListener(CompositeFigureListener listener);'),(444,'CompositeFigure source','org.jhotdraw.draw.CompositeFigure',136,137,'org.jhotdraw.draw.CompositeFigureEvent',1398,'org.jhotdraw.draw.CompositeFigureEvent.-init-(org.jhotdraw.draw.CompositeFigure,org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double,int)',0,'/**\r\n * Constructs an event for the provided CompositeFigure.\r\n *\r\n * @param source\r\n * 		The composite figure.\r\n * @param child\r\n * 		The changed figure.\r\n * @param invalidatedArea\r\n * 		The bounds of the invalidated area on the drawing.\r\n */\r\npublic CompositeFigureEvent(CompositeFigure source, Figure child, Rectangle2D.Double invalidatedArea, int zIndex) {\r\n    super(source);\r\n    this.child = child;\r\n    this.invalidatedArea = invalidatedArea;\r\n    this.index = 0;\r\n}'),(445,'Figure child','org.jhotdraw.draw.Figure',174,137,'org.jhotdraw.draw.CompositeFigureEvent',1398,'org.jhotdraw.draw.CompositeFigureEvent.-init-(org.jhotdraw.draw.CompositeFigure,org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double,int)',0,'/**\r\n * Constructs an event for the provided CompositeFigure.\r\n *\r\n * @param source\r\n * 		The composite figure.\r\n * @param child\r\n * 		The changed figure.\r\n * @param invalidatedArea\r\n * 		The bounds of the invalidated area on the drawing.\r\n */\r\npublic CompositeFigureEvent(CompositeFigure source, Figure child, Rectangle2D.Double invalidatedArea, int zIndex) {\r\n    super(source);\r\n    this.child = child;\r\n    this.invalidatedArea = invalidatedArea;\r\n    this.index = 0;\r\n}'),(446,'CompositeFigureEvent e','org.jhotdraw.draw.CompositeFigureEvent',137,138,'org.jhotdraw.draw.CompositeFigureListener',1403,'org.jhotdraw.draw.CompositeFigureListener.figureAdded(org.jhotdraw.draw.CompositeFigureEvent)',0,'/**\r\n * Sent when a figure was added.\r\n */\r\npublic void figureAdded(CompositeFigureEvent e);'),(447,'CompositeFigureEvent e','org.jhotdraw.draw.CompositeFigureEvent',137,138,'org.jhotdraw.draw.CompositeFigureListener',1404,'org.jhotdraw.draw.CompositeFigureListener.figureRemoved(org.jhotdraw.draw.CompositeFigureEvent)',0,'/**\r\n * Sent when a figure was removed.\r\n */\r\npublic void figureRemoved(CompositeFigureEvent e);'),(448,'LineDecoration decoration1','org.jhotdraw.draw.LineDecoration',210,139,'org.jhotdraw.draw.CompositeLineDecoration',1406,'org.jhotdraw.draw.CompositeLineDecoration.-init-(org.jhotdraw.draw.LineDecoration,org.jhotdraw.draw.LineDecoration)',0,'/**\r\n * Constructs a composite line decoration with the two supplied decorations.\r\n */\r\npublic CompositeLineDecoration(LineDecoration decoration1, LineDecoration decoration2) {\r\n    addDecoration(decoration1);\r\n    addDecoration(decoration2);\r\n}'),(449,'LineDecoration decoration2','org.jhotdraw.draw.LineDecoration',210,139,'org.jhotdraw.draw.CompositeLineDecoration',1406,'org.jhotdraw.draw.CompositeLineDecoration.-init-(org.jhotdraw.draw.LineDecoration,org.jhotdraw.draw.LineDecoration)',0,'/**\r\n * Constructs a composite line decoration with the two supplied decorations.\r\n */\r\npublic CompositeLineDecoration(LineDecoration decoration1, LineDecoration decoration2) {\r\n    addDecoration(decoration1);\r\n    addDecoration(decoration2);\r\n}'),(450,'LineDecoration decoration','org.jhotdraw.draw.LineDecoration',210,139,'org.jhotdraw.draw.CompositeLineDecoration',1407,'org.jhotdraw.draw.CompositeLineDecoration.addDecoration(org.jhotdraw.draw.LineDecoration)',0,'/**\r\n * Add another line decoration into the composite line decoration.\r\n * The new decoration will be appended to the existing decorations\r\n * and is also the last drawn.\r\n */\r\npublic void addDecoration(LineDecoration decoration) {\r\n    if (decoration != null) {\r\n        decorations.add(decoration);\r\n    }\r\n}'),(451,'Figure f','org.jhotdraw.draw.Figure',174,139,'org.jhotdraw.draw.CompositeLineDecoration',1408,'org.jhotdraw.draw.CompositeLineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/**\r\n * Draws the arrow tip in the direction specified by the given two\r\n * Points.. (template method)\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    for (LineDecoration decoration : decorations) {\r\n        decoration.draw(g, f, p1, p2);\r\n    }\r\n}'),(452,'Figure f','org.jhotdraw.draw.Figure',174,139,'org.jhotdraw.draw.CompositeLineDecoration',1410,'org.jhotdraw.draw.CompositeLineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/**\r\n * Returns the drawing area of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    Rectangle2D.Double r = null;\r\n    for (LineDecoration decoration : decorations) {\r\n        Rectangle2D.Double aR = decoration.getDrawingArea(f, p1, p2);\r\n        if (r == null)\r\n            r = aR;\r\n        else\r\n            r.add(aR);\r\n\r\n    }\r\n    return r;\r\n}'),(453,'Figure f','org.jhotdraw.draw.Figure',174,139,'org.jhotdraw.draw.CompositeLineDecoration',1409,'org.jhotdraw.draw.CompositeLineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns the radius of the decorator.\r\n * This is used to crop the end of the line, to prevent it from being\r\n * drawn it over the decorator.\r\n */\r\npublic double getDecorationRadius(Figure f) {\r\n    double radius = 0;\r\n    for (LineDecoration decoration : decorations) {\r\n        radius = Math.max(radius, decoration.getDecorationRadius(f));\r\n    }\r\n    return radius;\r\n}'),(454,'DOMInput in','org.jhotdraw.xml.DOMInput',650,139,'org.jhotdraw.draw.CompositeLineDecoration',1411,'org.jhotdraw.draw.CompositeLineDecoration.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    for (int i = (in.getElementCount(\"decoration\")) - 1; i >= 0; i--) {\r\n        in.openElement(\"decoration\", i);\r\n        Object value = in.readObject();\r\n        if (value instanceof LineDecoration)\r\n            addDecoration(((LineDecoration) (value)));\r\n\r\n        in.closeElement();\r\n    }\r\n}'),(455,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,139,'org.jhotdraw.draw.CompositeLineDecoration',1412,'org.jhotdraw.draw.CompositeLineDecoration.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    for (LineDecoration decoration : decorations) {\r\n        out.openElement(\"decoration\");\r\n        out.writeObject(decoration);\r\n        out.closeElement();\r\n    }\r\n}'),(456,'AbstractFigure owner','org.jhotdraw.draw.AbstractFigure',100,140,'org.jhotdraw.draw.CompositeTransformEdit',1413,'org.jhotdraw.draw.CompositeTransformEdit.-init-(org.jhotdraw.draw.AbstractFigure,java.awt.geom.AffineTransform)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic CompositeTransformEdit(AbstractFigure owner, AffineTransform tx) {\r\n    this.owner = owner;\r\n    this.tx = ((AffineTransform) (tx.clone()));\r\n    inProgress = true;\r\n}'),(457,'ConnectionFigure owner','org.jhotdraw.draw.ConnectionFigure',142,141,'org.jhotdraw.draw.ConnectionEndHandle',1423,'org.jhotdraw.draw.ConnectionEndHandle.-init-(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Constructs the connection handle for the given start figure.\r\n */\r\npublic ConnectionEndHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}'),(458,'Connector c','org.jhotdraw.draw.Connector',145,141,'org.jhotdraw.draw.ConnectionEndHandle',1425,'org.jhotdraw.draw.ConnectionEndHandle.connect(org.jhotdraw.draw.Connector)',0,'/**\r\n * Sets the start of the connection.\r\n */\r\nprotected void connect(Connector c) {\r\n    getOwner().setEndConnector(c);\r\n}'),(459,'Connector existingEnd','org.jhotdraw.draw.Connector',145,141,'org.jhotdraw.draw.ConnectionEndHandle',1424,'org.jhotdraw.draw.ConnectionEndHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(existingEnd, targetEnd);\r\n}'),(460,'Connector targetEnd','org.jhotdraw.draw.Connector',145,141,'org.jhotdraw.draw.ConnectionEndHandle',1424,'org.jhotdraw.draw.ConnectionEndHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(existingEnd, targetEnd);\r\n}'),(461,'Connector start','org.jhotdraw.draw.Connector',145,142,'org.jhotdraw.draw.ConnectionFigure',1449,'org.jhotdraw.draw.ConnectionFigure.setStartConnector(org.jhotdraw.draw.Connector)',0,'// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Sets the start {@code Connector} of the connection.\r\n * Set this to null to disconnect the start connection.\r\n *\r\n * @param start\r\n * 		the start Connector of the connection\r\n */\r\npublic void setStartConnector(Connector start);'),(462,'Connector end','org.jhotdraw.draw.Connector',145,142,'org.jhotdraw.draw.ConnectionFigure',1444,'org.jhotdraw.draw.ConnectionFigure.setEndConnector(org.jhotdraw.draw.Connector)',0,'/**\r\n * Sets the end Connector of the connection.\r\n * Set this to null to disconnect the end connection.\r\n *\r\n * @param end\r\n * 		the end Connector of the connection\r\n */\r\npublic void setEndConnector(Connector end);'),(463,'Connector start','org.jhotdraw.draw.Connector',145,142,'org.jhotdraw.draw.ConnectionFigure',1432,'org.jhotdraw.draw.ConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Returns true, if this ConnectionFigure can connect the specified\r\n * {@code Connector}s.\r\n * Implement this method to constrain the allowed connections between figures.\r\n */\r\npublic boolean canConnect(Connector start, Connector end);'),(464,'Connector end','org.jhotdraw.draw.Connector',145,142,'org.jhotdraw.draw.ConnectionFigure',1432,'org.jhotdraw.draw.ConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Returns true, if this ConnectionFigure can connect the specified\r\n * {@code Connector}s.\r\n * Implement this method to constrain the allowed connections between figures.\r\n */\r\npublic boolean canConnect(Connector start, Connector end);'),(465,'Connector start','org.jhotdraw.draw.Connector',145,142,'org.jhotdraw.draw.ConnectionFigure',1431,'org.jhotdraw.draw.ConnectionFigure.canConnect(org.jhotdraw.draw.Connector)',0,'/**\r\n * Checks if this {@code ConnectionFigure} can be connect to the specified\r\n * {@code Connector}.\r\n * This is used to provide an early feedback to the user, when he/she\r\n * creates a new connection.\r\n */\r\npublic boolean canConnect(Connector start);'),(466,'BezierPath.Node node','org.jhotdraw.geom.BezierPath$Node',342,142,'org.jhotdraw.draw.ConnectionFigure',1447,'org.jhotdraw.draw.ConnectionFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)',0,'/**\r\n * Sets the specified node.\r\n */\r\npublic void setNode(int index, BezierPath.Node node);'),(467,'Liner newValue','org.jhotdraw.draw.Liner',212,142,'org.jhotdraw.draw.ConnectionFigure',1446,'org.jhotdraw.draw.ConnectionFigure.setLiner(org.jhotdraw.draw.Liner)',0,'/**\r\n * Set a Liner object which encapsulated a lineout\r\n * algorithm for this figure. Typically, a Liner\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation.\r\n *\r\n * @param newValue	encapsulation\r\n * 		of a lineout algorithm.\r\n */\r\npublic void setLiner(Liner newValue);'),(468,'ConnectionFigure owner','org.jhotdraw.draw.ConnectionFigure',142,143,'org.jhotdraw.draw.ConnectionStartHandle',1452,'org.jhotdraw.draw.ConnectionStartHandle.-init-(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Constructs the connection handle for the given start figure.\r\n */\r\npublic ConnectionStartHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}'),(469,'Connector c','org.jhotdraw.draw.Connector',145,143,'org.jhotdraw.draw.ConnectionStartHandle',1454,'org.jhotdraw.draw.ConnectionStartHandle.connect(org.jhotdraw.draw.Connector)',0,'/**\r\n * Sets the start of the connection.\r\n */\r\nprotected void connect(Connector c) {\r\n    getOwner().setStartConnector(c);\r\n}'),(470,'Connector existingEnd','org.jhotdraw.draw.Connector',145,143,'org.jhotdraw.draw.ConnectionStartHandle',1453,'org.jhotdraw.draw.ConnectionStartHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(targetEnd, existingEnd);\r\n}'),(471,'Connector targetEnd','org.jhotdraw.draw.Connector',145,143,'org.jhotdraw.draw.ConnectionStartHandle',1453,'org.jhotdraw.draw.ConnectionStartHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(targetEnd, existingEnd);\r\n}'),(472,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,144,'org.jhotdraw.draw.ConnectionTool',1460,'org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ConnectionTool(ConnectionFigure prototype) {\r\n    this(prototype, null, null);\r\n}'),(473,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,144,'org.jhotdraw.draw.ConnectionTool',1461,'org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map)',0,'public ConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}'),(474,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,144,'org.jhotdraw.draw.ConnectionTool',1462,'org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map,java.lang.String)',0,'public ConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes, String presentationName) {\r\n    this.prototype = prototype;\r\n    this.prototypeAttributes = attributes;\r\n    if (presentationName == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        presentationName = labels.getString(\"edit.createConnectionFigure.text\");\r\n    }\r\n    this.presentationName = presentationName;\r\n}'),(475,'ConnectionFigure f','org.jhotdraw.draw.ConnectionFigure',142,144,'org.jhotdraw.draw.ConnectionTool',1467,'org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector)',0,'/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to start a new connection.\r\n *\r\n * @param f\r\n * 		The ConnectionFigure.\r\n * @param startConnector\r\n * 		The Connector of the start Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector) {\r\n    return f.canConnect(startConnector);\r\n}'),(476,'Connector startConnector','org.jhotdraw.draw.Connector',145,144,'org.jhotdraw.draw.ConnectionTool',1467,'org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector)',0,'/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to start a new connection.\r\n *\r\n * @param f\r\n * 		The ConnectionFigure.\r\n * @param startConnector\r\n * 		The Connector of the start Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector) {\r\n    return f.canConnect(startConnector);\r\n}'),(477,'ConnectionFigure f','org.jhotdraw.draw.ConnectionFigure',142,144,'org.jhotdraw.draw.ConnectionTool',1468,'org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to end a new connection.\r\n *\r\n * @param f\r\n * 		The ConnectionFigure.\r\n * @param startConnector\r\n * 		The Connector of the start Figure.\r\n * @param endConnector\r\n * 		The Connector of the end Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector, Connector endConnector) {\r\n    return f.canConnect(startConnector, endConnector);\r\n}'),(478,'Connector startConnector','org.jhotdraw.draw.Connector',145,144,'org.jhotdraw.draw.ConnectionTool',1468,'org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to end a new connection.\r\n *\r\n * @param f\r\n * 		The ConnectionFigure.\r\n * @param startConnector\r\n * 		The Connector of the start Figure.\r\n * @param endConnector\r\n * 		The Connector of the end Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector, Connector endConnector) {\r\n    return f.canConnect(startConnector, endConnector);\r\n}'),(479,'Connector endConnector','org.jhotdraw.draw.Connector',145,144,'org.jhotdraw.draw.ConnectionTool',1468,'org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to end a new connection.\r\n *\r\n * @param f\r\n * 		The ConnectionFigure.\r\n * @param startConnector\r\n * 		The Connector of the start Figure.\r\n * @param endConnector\r\n * 		The Connector of the end Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector, Connector endConnector) {\r\n    return f.canConnect(startConnector, endConnector);\r\n}'),(480,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,144,'org.jhotdraw.draw.ConnectionTool',1466,'org.jhotdraw.draw.ConnectionTool.activate(org.jhotdraw.draw.DrawingEditor)',0,'public void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n}'),(481,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,144,'org.jhotdraw.draw.ConnectionTool',1471,'org.jhotdraw.draw.ConnectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    if ((createdFigure) != null) {\r\n        getDrawing().remove(createdFigure);\r\n        createdFigure = null;\r\n    }\r\n    targetFigure = null;\r\n    startConnector = endConnector = null;\r\n    super.deactivate(editor);\r\n}'),(482,'Figure createdFigure','org.jhotdraw.draw.Figure',174,144,'org.jhotdraw.draw.ConnectionTool',1470,'org.jhotdraw.draw.ConnectionTool.creationFinished(org.jhotdraw.draw.Figure)',0,'/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\nprotected void creationFinished(Figure createdFigure) {\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(483,'ConnectionFigure connection','org.jhotdraw.draw.ConnectionFigure',142,145,'org.jhotdraw.draw.Connector',1486,'org.jhotdraw.draw.Connector.findStart(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Finds the start point for the connection.\r\n */\r\npublic Point2D.Double findStart(ConnectionFigure connection);'),(484,'ConnectionFigure connection','org.jhotdraw.draw.ConnectionFigure',142,145,'org.jhotdraw.draw.Connector',1485,'org.jhotdraw.draw.Connector.findEnd(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Finds the end point for the connection.\r\n */\r\npublic Point2D.Double findEnd(ConnectionFigure connection);'),(485,'Connector connector','org.jhotdraw.draw.Connector',145,146,'org.jhotdraw.draw.ConnectorHandle',1492,'org.jhotdraw.draw.ConnectorHandle.-init-(org.jhotdraw.draw.Connector,org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ConnectorHandle(Connector connector, ConnectionFigure prototype) {\r\n    super(connector.getOwner());\r\n    this.connector = connector;\r\n    this.prototype = prototype;\r\n}'),(486,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,146,'org.jhotdraw.draw.ConnectorHandle',1492,'org.jhotdraw.draw.ConnectorHandle.-init-(org.jhotdraw.draw.Connector,org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ConnectorHandle(Connector connector, ConnectionFigure prototype) {\r\n    super(connector.getOwner());\r\n    this.connector = connector;\r\n    this.prototype = prototype;\r\n}'),(487,'ConnectionFigure newConnection','org.jhotdraw.draw.ConnectionFigure',142,146,'org.jhotdraw.draw.ConnectorHandle',1506,'org.jhotdraw.draw.ConnectorHandle.setConnection(org.jhotdraw.draw.ConnectionFigure)',0,'protected void setConnection(ConnectionFigure newConnection) {\r\n    createdConnection = newConnection;\r\n}'),(488,'Figure newTargetFigure','org.jhotdraw.draw.Figure',174,146,'org.jhotdraw.draw.ConnectorHandle',1507,'org.jhotdraw.draw.ConnectorHandle.setTargetFigure(org.jhotdraw.draw.Figure)',0,'protected void setTargetFigure(Figure newTargetFigure) {\r\n    connectableFigure = newTargetFigure;\r\n}'),(489,'Drawing drawing','org.jhotdraw.draw.Drawing',168,146,'org.jhotdraw.draw.ConnectorHandle',1498,'org.jhotdraw.draw.ConnectorHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',0,'private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure figure : drawing.getFiguresFrontToBack()) {\r\n        if (((!(figure.includes(getConnection()))) && (figure.canConnect())) && (figure.contains(p))) {\r\n            return figure;\r\n        }\r\n    }\r\n    return null;\r\n}'),(490,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,146,'org.jhotdraw.draw.ConnectorHandle',1498,'org.jhotdraw.draw.ConnectorHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)',1,'private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure figure : drawing.getFiguresFrontToBack()) {\r\n        if (((!(figure.includes(getConnection()))) && (figure.canConnect())) && (figure.contains(p))) {\r\n            return figure;\r\n        }\r\n    }\r\n    return null;\r\n}'),(491,'Figure connectableFigure','org.jhotdraw.draw.Figure',174,146,'org.jhotdraw.draw.ConnectorHandle',1497,'org.jhotdraw.draw.ConnectorHandle.findConnectableConnector(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'/**\r\n * Finds a connection end figure.\r\n */\r\nprotected Connector findConnectableConnector(Figure connectableFigure, Point2D.Double p) {\r\n    Connector target = (connectableFigure == null) ? null : connectableFigure.findConnector(p, getConnection());\r\n    if ((((connectableFigure != null) && (connectableFigure.canConnect())) && (!(connectableFigure.includes(getOwner())))) && (getConnection().canConnect(connector, target))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(492,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,146,'org.jhotdraw.draw.ConnectorHandle',1497,'org.jhotdraw.draw.ConnectorHandle.findConnectableConnector(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',1,'/**\r\n * Finds a connection end figure.\r\n */\r\nprotected Connector findConnectableConnector(Figure connectableFigure, Point2D.Double p) {\r\n    Connector target = (connectableFigure == null) ? null : connectableFigure.findConnector(p, getConnection());\r\n    if ((((connectableFigure != null) && (connectableFigure.canConnect())) && (!(connectableFigure.includes(getOwner())))) && (getConnection().canConnect(connector, target))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}'),(493,'Handle handle','org.jhotdraw.draw.Handle',191,146,'org.jhotdraw.draw.ConnectorHandle',1504,'org.jhotdraw.draw.ConnectorHandle.isCombinableWith(org.jhotdraw.draw.Handle)',0,'@Override\r\npublic boolean isCombinableWith(Handle handle) {\r\n    return false;\r\n}'),(494,'TranslationDirection dir','org.jhotdraw.draw.TranslationDirection',276,147,'org.jhotdraw.draw.Constrainer',1518,'org.jhotdraw.draw.Constrainer.translatePoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)',0,'/**\r\n * Moves a point to the closest constrained location in the specified\r\n * direction.\r\n * <p>\r\n * This method changes the point which is passed as a parameter.\r\n *\r\n * @param p\r\n * 		A point on the drawing.\r\n * @param dir\r\n * 		A direction.\r\n * @return Returns the constrained point.\r\n */\r\npublic Point2D.Double translatePoint(Point2D.Double p, TranslationDirection dir);'),(495,'TranslationDirection dir','org.jhotdraw.draw.TranslationDirection',276,147,'org.jhotdraw.draw.Constrainer',1519,'org.jhotdraw.draw.Constrainer.translateRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)',0,'/**\r\n * Moves a rectangle to the closest constrained location in the\r\n * specified direction.\r\n * <p>\r\n * This method changes the location of the rectangle which is passed as a\r\n * parameter. This method only performs a translation - it does not change\r\n * the size of the rectangle.\r\n *\r\n * @param r\r\n * 		A rectangle on the drawing.\r\n * @param dir\r\n * 		A direction.\r\n * @return Returns the constrained rectangle.\r\n */\r\npublic Rectangle2D.Double translateRectangle(Rectangle2D.Double r, TranslationDirection dir);'),(496,'RotationDirection dir','org.jhotdraw.draw.RotationDirection',243,147,'org.jhotdraw.draw.Constrainer',1517,'org.jhotdraw.draw.Constrainer.rotateAngle(double,org.jhotdraw.draw.RotationDirection)',0,'/**\r\n * Moves the given angle (in radians) to the closest constrained orientation\r\n * in the specified direction.\r\n *\r\n * @param angle\r\n * 		The angle (in radians).\r\n * @return The closest constrained angle (in radians) in the specified\r\ndirection.\r\n */\r\npublic double rotateAngle(double angle, RotationDirection dir);'),(497,'DrawingView view','org.jhotdraw.draw.DrawingView',171,147,'org.jhotdraw.draw.Constrainer',1515,'org.jhotdraw.draw.Constrainer.draw(java.awt.Graphics2D,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Draws the constrainer grid for the specified drawing view.\r\n */\r\npublic void draw(Graphics2D g, DrawingView view);'),(498,'Figure prototype','org.jhotdraw.draw.Figure',174,148,'org.jhotdraw.draw.CreationTool',1523,'org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance with the specified prototype but without an\r\n * attribute set. The CreationTool clones this prototype each time a new\r\n *  Figure needs to be created. When a new Figure is created, the\r\n * CreationTool applies the default attributes from the DrawingEditor to it.\r\n *\r\n * @param prototype\r\n * 		The prototype used to create a new Figure.\r\n */\r\npublic CreationTool(Figure prototype) {\r\n    this(prototype, null, null);\r\n}'),(499,'Figure prototype','org.jhotdraw.draw.Figure',174,148,'org.jhotdraw.draw.CreationTool',1524,'org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure,java.util.Map)',0,'/**\r\n * Creates a new instance with the specified prototype but without an\r\n * attribute set. The CreationTool clones this prototype each time a new\r\n * Figure needs to be created. When a new Figure is created, the\r\n * CreationTool applies the default attributes from the DrawingEditor to it,\r\n * and then it applies the attributes to it, that have been supplied in\r\n * this constructor.\r\n *\r\n * @param prototype\r\n * 		The prototype used to create a new Figure.\r\n * @param attributes\r\n * 		The CreationTool applies these attributes to the\r\n * 		prototype after having applied the default attributes from the DrawingEditor.\r\n */\r\npublic CreationTool(Figure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}'),(500,'Figure prototype','org.jhotdraw.draw.Figure',174,148,'org.jhotdraw.draw.CreationTool',1525,'org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure,java.util.Map,java.lang.String)',0,'/**\r\n * Creates a new instance with the specified prototype and attribute set.\r\n *\r\n * @param prototype\r\n * 		The prototype used to create a new Figure.\r\n * @param attributes\r\n * 		The CreationTool applies these attributes to the\r\n * 		prototype after having applied the default attributes from the DrawingEditor.\r\n * @param name\r\n * 		The name parameter is currently not used.\r\n * @deprecated This constructor might go away, because the name parameter\r\nis not used.\r\n */\r\npublic CreationTool(Figure prototype, Map<AttributeKey, Object> attributes, String name) {\r\n    this.prototype = prototype;\r\n    this.prototypeAttributes = attributes;\r\n    if (name == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        name = labels.getString(\"edit.createFigure.text\");\r\n    }\r\n    this.presentationName = name;\r\n}'),(501,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,148,'org.jhotdraw.draw.CreationTool',1527,'org.jhotdraw.draw.CreationTool.activate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    // getView().clearSelection();\r\n    getView().setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n}'),(502,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,148,'org.jhotdraw.draw.CreationTool',1530,'org.jhotdraw.draw.CreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    if ((getView()) != null) {\r\n        getView().setCursor(Cursor.getDefaultCursor());\r\n    }\r\n    if ((createdFigure) != null) {\r\n        if ((createdFigure) instanceof CompositeFigure) {\r\n            ((CompositeFigure) (createdFigure)).layout();\r\n        }\r\n        createdFigure = null;\r\n    }\r\n}'),(503,'Figure createdFigure','org.jhotdraw.draw.Figure',174,148,'org.jhotdraw.draw.CreationTool',1529,'org.jhotdraw.draw.CreationTool.creationFinished(org.jhotdraw.draw.Figure)',0,'/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\nprotected void creationFinished(Figure createdFigure) {\r\n    if (createdFigure.isSelectable()) {\r\n        getView().addToSelection(createdFigure);\r\n    }\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(504,'DrawingView view','org.jhotdraw.draw.DrawingView',171,148,'org.jhotdraw.draw.CreationTool',1539,'org.jhotdraw.draw.CreationTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)',0,'@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}'),(505,'DOMFactory factory','org.jhotdraw.xml.DOMFactory',649,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1540,'org.jhotdraw.draw.DOMStorableInputOutputFormat.-init-(org.jhotdraw.xml.DOMFactory)',0,'/**\r\n * Creates a new instance with format name \"Drawing\", file extension \"xml\"\r\n * and mime type \"image/x-jhotdraw\".\r\n */\r\npublic DOMStorableInputOutputFormat(DOMFactory factory) {\r\n    this(factory, \"Drawing\", \"xml\", \"image/x-jhotdraw\");\r\n}'),(506,'DOMFactory factory','org.jhotdraw.xml.DOMFactory',649,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1541,'org.jhotdraw.draw.DOMStorableInputOutputFormat.-init-(org.jhotdraw.xml.DOMFactory,java.lang.String,java.lang.String,java.lang.String)',0,'/**\r\n * Creates a new instance using the specified parameters.\r\n *\r\n * @param factory\r\n * 		The factory for creating Figures from XML elements.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param mimeType\r\n * 		The Mime Type is used for clipboard access.\r\n */\r\npublic DOMStorableInputOutputFormat(DOMFactory factory, String description, String fileExtension, String mimeType) {\r\n    this.factory = factory;\r\n    this.fileExtension = fileExtension;\r\n    this.mimeType = mimeType;\r\n    try {\r\n        this.dataFlavor = new DataFlavor(mimeType);\r\n    } catch (ClassNotFoundException ex) {\r\n        InternalError error = new InternalError((\"Unable to create data flavor for mime type:\" + mimeType));\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n}'),(507,'Drawing drawing','org.jhotdraw.draw.Drawing',168,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1552,'org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.net.URL,java.io.InputStream,org.jhotdraw.draw.Drawing,java.util.LinkedList)',0,'/**\r\n * Reads a list of figures into the specified drawing.\r\n * This method expects that there is a child element named \"figures\"\r\n * in the element that represents the drawing.\r\n */\r\nprotected void read(URL url, InputStream in, Drawing drawing, LinkedList<Figure> figures) throws IOException {\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(factory.getName(drawing));\r\n    domi.openElement(\"figures\", 0);\r\n    figures.clear();\r\n    for (int i = 0, n = domi.getElementCount(); i < n; i++) {\r\n        Figure f = ((Figure) (domi.readObject()));\r\n        figures.add(f);\r\n    }\r\n    domi.closeElement();\r\n    domi.closeElement();\r\n    drawing.basicAddAll(drawing.getChildCount(), figures);\r\n}'),(508,'Drawing drawing','org.jhotdraw.draw.Drawing',168,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1553,'org.jhotdraw.draw.DOMStorableInputOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(509,'Drawing drawing','org.jhotdraw.draw.Drawing',168,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1554,'org.jhotdraw.draw.DOMStorableInputOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)',0,'public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    NanoXMLDOMOutput domo = new NanoXMLDOMOutput(factory);\r\n    domo.openElement(factory.getName(drawing));\r\n    drawing.write(domo);\r\n    domo.closeElement();\r\n    domo.save(out);\r\n}'),(510,'Drawing drawing','org.jhotdraw.draw.Drawing',168,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1549,'org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(511,'Drawing drawing','org.jhotdraw.draw.Drawing',168,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1550,'org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(512,'Drawing drawing','org.jhotdraw.draw.Drawing',168,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1551,'org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(factory.getName(drawing));\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.read(domi);\r\n    domi.closeElement();\r\n}'),(513,'Drawing drawing','org.jhotdraw.draw.Drawing',168,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1548,'org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>();\r\n    InputStream in = ((InputStream) (t.getTransferData(new DataFlavor(mimeType, description))));\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(\"Drawing-Clip\");\r\n    for (int i = 0, n = domi.getElementCount(); i < n; i++) {\r\n        Figure f = ((Figure) (domi.readObject(i)));\r\n        figures.add(f);\r\n    }\r\n    domi.closeElement();\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n}'),(514,'Drawing drawing','org.jhotdraw.draw.Drawing',168,149,'org.jhotdraw.draw.DOMStorableInputOutputFormat',1542,'org.jhotdraw.draw.DOMStorableInputOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)',0,'public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    NanoXMLDOMOutput domo = new NanoXMLDOMOutput(factory);\r\n    domo.openElement(\"Drawing-Clip\");\r\n    for (Figure f : figures) {\r\n        domo.writeObject(f);\r\n    }\r\n    domo.closeElement();\r\n    domo.save(buf);\r\n    return new InputStreamTransferable(new DataFlavor(mimeType, description), buf.toByteArray());\r\n}'),(515,'Figure newValue','org.jhotdraw.draw.Figure',174,150,'org.jhotdraw.draw.DecoratedFigure',1556,'org.jhotdraw.draw.DecoratedFigure.setDecorator(org.jhotdraw.draw.Figure)',0,'/**\r\n * Sets a decorator Figure, for example a visual adornment to this Figure.\r\n * Set this to null, if no decorator is desired.\r\n * The decorator uses the same logical bounds as this Figure plus\r\n * AttributeKeys.DECORATOR_INSETS. The decorator does not handle events.\r\n * The decorator is drawn when the figure is drawn.\r\n */\r\npublic void setDecorator(Figure newValue);'),(516,'Figure figure','org.jhotdraw.draw.Figure',174,151,'org.jhotdraw.draw.DefaultDragTracker',1557,'org.jhotdraw.draw.DefaultDragTracker.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultDragTracker(Figure figure) {\r\n    anchorFigure = figure;\r\n}'),(517,'Figure f','org.jhotdraw.draw.Figure',174,151,'org.jhotdraw.draw.DefaultDragTracker',1563,'org.jhotdraw.draw.DefaultDragTracker.setDraggedFigure(org.jhotdraw.draw.Figure)',0,'public void setDraggedFigure(Figure f) {\r\n    anchorFigure = f;\r\n}'),(518,'Figure figure','org.jhotdraw.draw.Figure',174,152,'org.jhotdraw.draw.DefaultDrawing',1565,'org.jhotdraw.draw.DefaultDrawing.basicAdd(int,org.jhotdraw.draw.Figure)',0,'@Override\r\npublic void basicAdd(int index, Figure figure) {\r\n    super.basicAdd(index, figure);\r\n    invalidateSortOrder();\r\n}'),(519,'Figure ignore','org.jhotdraw.draw.Figure',174,152,'org.jhotdraw.draw.DefaultDrawing',1576,'org.jhotdraw.draw.DefaultDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',0,'public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (((f != ignore) && (f.isVisible())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(520,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,152,'org.jhotdraw.draw.DefaultDrawing',1576,'org.jhotdraw.draw.DefaultDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',1,'public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (((f != ignore) && (f.isVisible())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(521,'Figure figure','org.jhotdraw.draw.Figure',174,152,'org.jhotdraw.draw.DefaultDrawing',1574,'org.jhotdraw.draw.DefaultDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',0,'public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(522,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,152,'org.jhotdraw.draw.DefaultDrawing',1574,'org.jhotdraw.draw.DefaultDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',1,'public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(523,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,152,'org.jhotdraw.draw.DefaultDrawing',1584,'org.jhotdraw.draw.DefaultDrawing.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\nprotected void setAttributeOnChildren(AttributeKey key, Object newValue) {\r\n    // empty\r\n}'),(524,'Dimension2DDouble newValue','org.jhotdraw.geom.Dimension2DDouble',346,152,'org.jhotdraw.draw.DefaultDrawing',1585,'org.jhotdraw.draw.DefaultDrawing.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)',0,'public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = (newValue == null) ? null : ((Dimension2DDouble) (newValue.clone()));\r\n    firePropertyChange(Drawing.CANVAS_SIZE_PROPERTY, oldValue, newValue);\r\n}'),(525,'Figure figure','org.jhotdraw.draw.Figure',174,152,'org.jhotdraw.draw.DefaultDrawing',1582,'org.jhotdraw.draw.DefaultDrawing.indexOf(org.jhotdraw.draw.Figure)',0,'@Override\r\npublic int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}'),(526,'Tool newValue','org.jhotdraw.draw.Tool',262,153,'org.jhotdraw.draw.DefaultDrawingEditor',1605,'org.jhotdraw.draw.DefaultDrawingEditor.setTool(org.jhotdraw.draw.Tool)',0,'public void setTool(Tool newValue) {\r\n    Tool oldValue = tool;\r\n    if (newValue == (tool)) {\r\n        return;\r\n    }\r\n    if ((tool) != null) {\r\n        for (DrawingView v : views) {\r\n            v.removeMouseListener(tool);\r\n            v.removeMouseMotionListener(tool);\r\n            v.removeKeyListener(tool);\r\n        }\r\n        tool.deactivate(this);\r\n        tool.removeToolListener(this);\r\n    }\r\n    tool = newValue;\r\n    if ((tool) != null) {\r\n        tool.activate(this);\r\n        for (DrawingView v : views) {\r\n            v.addMouseListener(tool);\r\n            v.addMouseMotionListener(tool);\r\n            v.addKeyListener(tool);\r\n        }\r\n        tool.addToolListener(this);\r\n    }\r\n    firePropertyChange(DrawingEditor.TOOL_PROPERTY, oldValue, newValue);\r\n}'),(527,'ToolEvent evt','org.jhotdraw.draw.ToolEvent',263,153,'org.jhotdraw.draw.DefaultDrawingEditor',1590,'org.jhotdraw.draw.DefaultDrawingEditor.areaInvalidated(org.jhotdraw.draw.ToolEvent)',0,'public void areaInvalidated(ToolEvent evt) {\r\n    Rectangle r = evt.getInvalidatedArea();\r\n    evt.getView().getComponent().repaint(r.x, r.y, r.width, r.height);\r\n}'),(528,'ToolEvent evt','org.jhotdraw.draw.ToolEvent',263,153,'org.jhotdraw.draw.DefaultDrawingEditor',1607,'org.jhotdraw.draw.DefaultDrawingEditor.toolStarted(org.jhotdraw.draw.ToolEvent)',0,'public void toolStarted(ToolEvent evt) {\r\n    setActiveView(evt.getView());\r\n}'),(529,'DrawingView newValue','org.jhotdraw.draw.DrawingView',171,153,'org.jhotdraw.draw.DefaultDrawingEditor',1600,'org.jhotdraw.draw.DefaultDrawingEditor.setActiveView(org.jhotdraw.draw.DrawingView)',0,'public void setActiveView(DrawingView newValue) {\r\n    DrawingView oldValue = activeView;\r\n    activeView = newValue;\r\n    if ((newValue != null) && (newValue != oldValue)) {\r\n        preferredViewSize = activeView.getComponent().getPreferredSize();\r\n    }\r\n    firePropertyChange(DrawingEditor.ACTIVE_VIEW_PROPERTY, oldValue, newValue);\r\n}'),(530,'ToolEvent evt','org.jhotdraw.draw.ToolEvent',263,153,'org.jhotdraw.draw.DefaultDrawingEditor',1606,'org.jhotdraw.draw.DefaultDrawingEditor.toolDone(org.jhotdraw.draw.ToolEvent)',0,'public void toolDone(ToolEvent evt) {\r\n    // XXX - Maybe we should do this with all views of the editor??\r\n    DrawingView v = getActiveView();\r\n    if (v != null) {\r\n        JComponent c = v.getComponent();\r\n        Dimension oldPreferredViewSize = preferredViewSize;\r\n        preferredViewSize = c.getPreferredSize();\r\n        if ((oldPreferredViewSize == null) || (!(oldPreferredViewSize.equals(preferredViewSize)))) {\r\n            c.revalidate();\r\n        }\r\n    }\r\n}'),(531,'Figure f','org.jhotdraw.draw.Figure',174,153,'org.jhotdraw.draw.DefaultDrawingEditor',1589,'org.jhotdraw.draw.DefaultDrawingEditor.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)',0,'@SuppressWarnings(\"unchecked\")\r\npublic void applyDefaultAttributesTo(Figure f) {\r\n    for (Map.Entry<AttributeKey, Object> entry : defaultAttributes.entrySet()) {\r\n        entry.getKey().basicSet(f, entry.getValue());\r\n    }\r\n}'),(532,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,153,'org.jhotdraw.draw.DefaultDrawingEditor',1593,'org.jhotdraw.draw.DefaultDrawingEditor.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)',0,'public <T> T getDefaultAttribute(AttributeKey<T> key) {\r\n    if (defaultAttributes.containsKey(key)) {\r\n        return key.get(defaultAttributes);\r\n    } else {\r\n        return key.getDefaultValue();\r\n    }\r\n}'),(533,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,153,'org.jhotdraw.draw.DefaultDrawingEditor',1602,'org.jhotdraw.draw.DefaultDrawingEditor.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'public void setDefaultAttribute(AttributeKey key, Object newValue) {\r\n    Object oldValue = defaultAttributes.put(key, newValue);\r\n    firePropertyChange(key.getKey(), oldValue, newValue);\r\n}'),(534,'DrawingView view','org.jhotdraw.draw.DrawingView',171,153,'org.jhotdraw.draw.DefaultDrawingEditor',1599,'org.jhotdraw.draw.DefaultDrawingEditor.remove(org.jhotdraw.draw.DrawingView)',0,'public void remove(DrawingView view) {\r\n    view.getComponent().removeFocusListener(focusHandler);\r\n    views.remove(view);\r\n    if ((tool) != null) {\r\n        view.removeMouseListener(tool);\r\n        view.removeMouseMotionListener(tool);\r\n        view.removeKeyListener(tool);\r\n    }\r\n    view.removeNotify(this);\r\n    if ((activeView) == view) {\r\n        view = ((views.size()) > 0) ? views.iterator().next() : null;\r\n    }\r\n    updateActiveView();\r\n}'),(535,'DrawingView view','org.jhotdraw.draw.DrawingView',171,153,'org.jhotdraw.draw.DefaultDrawingEditor',1588,'org.jhotdraw.draw.DefaultDrawingEditor.add(org.jhotdraw.draw.DrawingView)',0,'public void add(DrawingView view) {\r\n    views.add(view);\r\n    view.addNotify(this);\r\n    view.getComponent().addFocusListener(focusHandler);\r\n    if ((tool) != null) {\r\n        view.addMouseListener(tool);\r\n        view.addMouseMotionListener(tool);\r\n        view.addKeyListener(tool);\r\n    }\r\n    updateActiveView();\r\n}'),(536,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,153,'org.jhotdraw.draw.DefaultDrawingEditor',1604,'org.jhotdraw.draw.DefaultDrawingEditor.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'public void setHandleAttribute(AttributeKey key, Object value) {\r\n    handleAttributes.put(key, value);\r\n}'),(537,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,153,'org.jhotdraw.draw.DefaultDrawingEditor',1596,'org.jhotdraw.draw.DefaultDrawingEditor.getHandleAttribute(org.jhotdraw.draw.AttributeKey)',0,'public <T> T getHandleAttribute(AttributeKey<T> key) {\r\n    if (handleAttributes.containsKey(key)) {\r\n        return key.get(handleAttributes);\r\n    } else {\r\n        return key.getDefaultValue();\r\n    }\r\n}'),(538,'CompositeFigureEvent evt','org.jhotdraw.draw.CompositeFigureEvent',137,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1684,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureAdded(org.jhotdraw.draw.CompositeFigureEvent)',0,'public void figureAdded(CompositeFigureEvent evt) {\r\n    if (((drawing.getChildCount()) == 1) && ((getEmptyDrawingMessage()) != null)) {\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(evt.getInvalidatedArea());\r\n    }\r\n    invalidateDimension();\r\n}'),(539,'CompositeFigureEvent evt','org.jhotdraw.draw.CompositeFigureEvent',137,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1688,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRemoved(org.jhotdraw.draw.CompositeFigureEvent)',0,'public void figureRemoved(CompositeFigureEvent evt) {\r\n    if (((drawing.getChildCount()) == 0) && ((getEmptyDrawingMessage()) != null)) {\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(evt.getInvalidatedArea());\r\n    }\r\n    removeFromSelection(evt.getChildFigure());\r\n    invalidateDimension();\r\n}'),(540,'FigureEvent evt','org.jhotdraw.draw.FigureEvent',176,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1681,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'public void areaInvalidated(FigureEvent evt) {\r\n    repaintDrawingArea(evt.getInvalidatedArea());\r\n    invalidateDimension();\r\n}'),(541,'HandleEvent evt','org.jhotdraw.draw.HandleEvent',193,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1682,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.areaInvalidated(org.jhotdraw.draw.HandleEvent)',0,'public void areaInvalidated(HandleEvent evt) {\r\n    repaint(evt.getInvalidatedArea());\r\n    invalidateDimension();\r\n}'),(542,'HandleEvent e','org.jhotdraw.draw.HandleEvent',193,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1694,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.handleRequestSecondaryHandles(org.jhotdraw.draw.HandleEvent)',0,'public void handleRequestSecondaryHandles(HandleEvent e) {\r\n    secondaryHandleOwner = e.getHandle();\r\n    secondaryHandles.clear();\r\n    secondaryHandles.addAll(secondaryHandleOwner.createSecondaryHandles());\r\n    for (Handle h : secondaryHandles) {\r\n        h.setView(this);\r\n        h.addHandleListener(eventHandler);\r\n    }\r\n    repaint();\r\n}'),(543,'HandleEvent e','org.jhotdraw.draw.HandleEvent',193,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1693,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.handleRequestRemove(org.jhotdraw.draw.HandleEvent)',0,'public void handleRequestRemove(HandleEvent e) {\r\n    selectionHandles.remove(e.getHandle());\r\n    e.getHandle().dispose();\r\n    invalidateHandles();\r\n    repaint(e.getInvalidatedArea());\r\n}'),(544,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1683,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'public void attributeChanged(FigureEvent e) {\r\n    if ((e.getSource()) == (drawing)) {\r\n        if ((e.getAttribute().equals(AttributeKeys.CANVAS_HEIGHT)) || (e.getAttribute().equals(AttributeKeys.CANVAS_WIDTH))) {\r\n            validateViewTranslation();\r\n        }\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(e.getInvalidatedArea());\r\n    }\r\n}'),(545,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1687,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureHandlesChanged(FigureEvent e) {\r\n}'),(546,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1686,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureChanged(FigureEvent e) {\r\n    repaintDrawingArea(e.getInvalidatedArea());\r\n}'),(547,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1685,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureAdded(org.jhotdraw.draw.FigureEvent)',0,'public void figureAdded(FigureEvent e) {\r\n}'),(548,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1689,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)',0,'public void figureRemoved(FigureEvent e) {\r\n}'),(549,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,154,'org.jhotdraw.draw.DefaultDrawingView$EventHandler',1690,'org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'public void figureRequestRemove(FigureEvent e) {\r\n}'),(550,'Drawing newValue','org.jhotdraw.draw.Drawing',168,155,'org.jhotdraw.draw.DefaultDrawingView',1668,'org.jhotdraw.draw.DefaultDrawingView.setDrawing(org.jhotdraw.draw.Drawing)',0,'public void setDrawing(Drawing newValue) {\r\n    Drawing oldValue = drawing;\r\n    if ((this.drawing) != null) {\r\n        this.drawing.removeCompositeFigureListener(eventHandler);\r\n        this.drawing.removeFigureListener(eventHandler);\r\n        clearSelection();\r\n    }\r\n    this.drawing = newValue;\r\n    if ((this.drawing) != null) {\r\n        this.drawing.addCompositeFigureListener(eventHandler);\r\n        this.drawing.addFigureListener(eventHandler);\r\n    }\r\n    invalidateDimension();\r\n    if ((getParent()) != null) {\r\n        getParent().validate();\r\n        if ((getParent()) instanceof JViewport) {\r\n            JViewport vp = ((JViewport) (getParent()));\r\n            Rectangle2D.Double r = getDrawingArea();\r\n            vp.setViewPosition(drawingToView(new Point2D.Double(Math.min(0, (-(r.x))), Math.min(0, (-(r.y))))));\r\n        }\r\n    }\r\n    firePropertyChange(DrawingView.DRAWING_PROPERTY, oldValue, newValue);\r\n    validateViewTranslation();\r\n    revalidate();\r\n    repaint();\r\n}'),(551,'Figure figure','org.jhotdraw.draw.Figure',174,155,'org.jhotdraw.draw.DefaultDrawingView',1613,'org.jhotdraw.draw.DefaultDrawingView.addToSelection(org.jhotdraw.draw.Figure)',0,'/**\r\n * Adds a figure to the current selection.\r\n */\r\npublic void addToSelection(Figure figure) {\r\n    if (DefaultDrawingView.DEBUG) {\r\n        System.out.println((((\"DefaultDrawingView\" + \".addToSelection(\") + figure) + \")\"));\r\n    }\r\n    Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n    if (selectedFigures.add(figure)) {\r\n        figure.addFigureListener(handleInvalidator);\r\n        Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n        Rectangle invalidatedArea = null;\r\n        if ((handlesAreValid) && ((getEditor()) != null)) {\r\n            for (Handle h : figure.createHandles(detailLevel)) {\r\n                h.setView(this);\r\n                selectionHandles.add(h);\r\n                h.addHandleListener(eventHandler);\r\n                if (invalidatedArea == null) {\r\n                    invalidatedArea = h.getDrawingArea();\r\n                } else {\r\n                    invalidatedArea.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        fireSelectionChanged(oldSelection, newSelection);\r\n        if (invalidatedArea != null) {\r\n            repaint(invalidatedArea);\r\n        }\r\n    }\r\n}'),(552,'Figure figure','org.jhotdraw.draw.Figure',174,155,'org.jhotdraw.draw.DefaultDrawingView',1660,'org.jhotdraw.draw.DefaultDrawingView.removeFromSelection(org.jhotdraw.draw.Figure)',0,'/**\r\n * Removes a figure from the selection.\r\n */\r\npublic void removeFromSelection(Figure figure) {\r\n    Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n    if (selectedFigures.remove(figure)) {\r\n        Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n        invalidateHandles();\r\n        figure.removeFigureListener(handleInvalidator);\r\n        fireSelectionChanged(oldSelection, newSelection);\r\n        repaint();\r\n    }\r\n}'),(553,'Figure figure','org.jhotdraw.draw.Figure',174,155,'org.jhotdraw.draw.DefaultDrawingView',1675,'org.jhotdraw.draw.DefaultDrawingView.toggleSelection(org.jhotdraw.draw.Figure)',0,'/**\r\n * If a figure isnt selected it is added to the selection.\r\n * Otherwise it is removed from the selection.\r\n */\r\npublic void toggleSelection(Figure figure) {\r\n    if (selectedFigures.contains(figure)) {\r\n        removeFromSelection(figure);\r\n    } else {\r\n        addToSelection(figure);\r\n    }\r\n}'),(554,'Figure checkFigure','org.jhotdraw.draw.Figure',174,155,'org.jhotdraw.draw.DefaultDrawingView',1656,'org.jhotdraw.draw.DefaultDrawingView.isFigureSelected(org.jhotdraw.draw.Figure)',0,'/**\r\n * Test whether a given figure is selected.\r\n */\r\npublic boolean isFigureSelected(Figure checkFigure) {\r\n    return selectedFigures.contains(checkFigure);\r\n}'),(555,'Handle master','org.jhotdraw.draw.Handle',191,155,'org.jhotdraw.draw.DefaultDrawingView',1633,'org.jhotdraw.draw.DefaultDrawingView.getCompatibleHandles(org.jhotdraw.draw.Handle)',0,'/**\r\n * Gets compatible handles.\r\n *\r\n * @return A collection containing the handle and all compatible handles.\r\n */\r\npublic Collection<Handle> getCompatibleHandles(Handle master) {\r\n    validateHandles();\r\n    HashSet<Figure> owners = new HashSet<Figure>();\r\n    LinkedList<Handle> compatibleHandles = new LinkedList<Handle>();\r\n    owners.add(master.getOwner());\r\n    compatibleHandles.add(master);\r\n    for (Handle handle : getSelectionHandles()) {\r\n        if ((!(owners.contains(handle.getOwner()))) && (handle.isCombinableWith(master))) {\r\n            owners.add(handle.getOwner());\r\n            compatibleHandles.add(handle);\r\n        }\r\n    }\r\n    return compatibleHandles;\r\n}'),(556,'FigureSelectionListener fsl','org.jhotdraw.draw.FigureSelectionListener',180,155,'org.jhotdraw.draw.DefaultDrawingView',1610,'org.jhotdraw.draw.DefaultDrawingView.addFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)',0,'public void addFigureSelectionListener(FigureSelectionListener fsl) {\r\n    listenerList.add(FigureSelectionListener.class, fsl);\r\n}'),(557,'FigureSelectionListener fsl','org.jhotdraw.draw.FigureSelectionListener',180,155,'org.jhotdraw.draw.DefaultDrawingView',1659,'org.jhotdraw.draw.DefaultDrawingView.removeFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)',0,'public void removeFigureSelectionListener(FigureSelectionListener fsl) {\r\n    listenerList.remove(FigureSelectionListener.class, fsl);\r\n}'),(558,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,155,'org.jhotdraw.draw.DefaultDrawingView',1661,'org.jhotdraw.draw.DefaultDrawingView.removeNotify(org.jhotdraw.draw.DrawingEditor)',0,'public void removeNotify(DrawingEditor editor) {\r\n    this.editor = null;\r\n    repaint();\r\n}'),(559,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,155,'org.jhotdraw.draw.DefaultDrawingView',1611,'org.jhotdraw.draw.DefaultDrawingView.addNotify(org.jhotdraw.draw.DrawingEditor)',0,'public void addNotify(DrawingEditor editor) {\r\n    DrawingEditor oldValue = editor;\r\n    this.editor = editor;\r\n    firePropertyChange(\"editor\", oldValue, editor);\r\n    invalidateHandles();\r\n    repaint();\r\n}'),(560,'Constrainer newValue','org.jhotdraw.draw.Constrainer',147,155,'org.jhotdraw.draw.DefaultDrawingView',1674,'org.jhotdraw.draw.DefaultDrawingView.setVisibleConstrainer(org.jhotdraw.draw.Constrainer)',0,'public void setVisibleConstrainer(Constrainer newValue) {\r\n    Constrainer oldValue = visibleConstrainer;\r\n    visibleConstrainer = newValue;\r\n    firePropertyChange(DrawingView.VISIBLE_CONSTRAINER_PROPERTY, oldValue, newValue);\r\n}'),(561,'Constrainer newValue','org.jhotdraw.draw.Constrainer',147,155,'org.jhotdraw.draw.DefaultDrawingView',1672,'org.jhotdraw.draw.DefaultDrawingView.setInvisibleConstrainer(org.jhotdraw.draw.Constrainer)',0,'public void setInvisibleConstrainer(Constrainer newValue) {\r\n    Constrainer oldValue = invisibleConstrainer;\r\n    invisibleConstrainer = newValue;\r\n    firePropertyChange(DrawingView.INVISIBLE_CONSTRAINER_PROPERTY, oldValue, newValue);\r\n}'),(562,'Handle newValue','org.jhotdraw.draw.Handle',191,155,'org.jhotdraw.draw.DefaultDrawingView',1665,'org.jhotdraw.draw.DefaultDrawingView.setActiveHandle(org.jhotdraw.draw.Handle)',0,'// End of variables declaration//GEN-END:variables\r\npublic void setActiveHandle(Handle newValue) {\r\n    Handle oldValue = activeHandle;\r\n    if (oldValue != null) {\r\n        repaint(oldValue.getDrawingArea());\r\n    }\r\n    activeHandle = newValue;\r\n    if (newValue != null) {\r\n        repaint(newValue.getDrawingArea());\r\n    }\r\n    firePropertyChange(DrawingView.ACTIVE_HANDLE_PROPERTY, oldValue, newValue);\r\n}'),(563,'DrawingView view','org.jhotdraw.draw.DrawingView',171,159,'org.jhotdraw.draw.DefaultDrawingViewTransferHandler',1712,'org.jhotdraw.draw.DefaultDrawingViewTransferHandler.createTransferable(org.jhotdraw.draw.DrawingView,java.util.Set)',0,'protected Transferable createTransferable(DrawingView view, Set<Figure> transferFigures) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println(((this) + \".createTransferable\"));\r\n    }\r\n    Transferable retValue;\r\n    Drawing drawing = view.getDrawing();\r\n    if (((drawing.getOutputFormats()) == null) || ((drawing.getOutputFormats().size()) == 0)) {\r\n        retValue = null;\r\n    } else {\r\n        List<Figure> toBeCopied = drawing.sort(transferFigures);\r\n        if ((toBeCopied.size()) > 0) {\r\n            try {\r\n                CompositeTransferable transfer = new CompositeTransferable();\r\n                for (OutputFormat format : drawing.getOutputFormats()) {\r\n                    Transferable t = format.createTransferable(drawing, toBeCopied, view.getScaleFactor());\r\n                    if (!(transfer.isDataFlavorSupported(t.getTransferDataFlavors()[0]))) {\r\n                        transfer.add(t);\r\n                    }\r\n                }\r\n                retValue = transfer;\r\n            } catch (IOException e) {\r\n                if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n                    e.printStackTrace();\r\n                }\r\n                retValue = null;\r\n            }\r\n        } else {\r\n            retValue = null;\r\n        }\r\n    }\r\n    return retValue;\r\n}'),(564,'Handle handle','org.jhotdraw.draw.Handle',191,160,'org.jhotdraw.draw.DefaultHandleTracker',1731,'org.jhotdraw.draw.DefaultHandleTracker.-init-(org.jhotdraw.draw.Handle)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultHandleTracker(Handle handle) {\r\n    masterHandle = handle;\r\n    multicaster = new HandleMulticaster(handle);\r\n}'),(565,'Handle master','org.jhotdraw.draw.Handle',191,160,'org.jhotdraw.draw.DefaultHandleTracker',1732,'org.jhotdraw.draw.DefaultHandleTracker.-init-(org.jhotdraw.draw.Handle,java.util.Collection)',0,'public DefaultHandleTracker(Handle master, Collection<Handle> handles) {\r\n    masterHandle = master;\r\n    multicaster = new HandleMulticaster(handles);\r\n}'),(566,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,160,'org.jhotdraw.draw.DefaultHandleTracker',1734,'org.jhotdraw.draw.DefaultHandleTracker.activate(org.jhotdraw.draw.DrawingEditor)',0,'/* FIXME - The handle should draw itself in selected mode\npublic void draw(Graphics2D g) {\ng.setColor(Color.RED);\ng.draw(\nmasterHandle.getBounds()\n);\n}\n */\r\n@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().setCursor(masterHandle.getCursor());\r\n    getView().setActiveHandle(masterHandle);\r\n    clearHoverHandles();\r\n}'),(567,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,160,'org.jhotdraw.draw.DefaultHandleTracker',1736,'org.jhotdraw.draw.DefaultHandleTracker.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    getView().setCursor(Cursor.getDefaultCursor());\r\n    getView().setActiveHandle(null);\r\n    clearHoverHandles();\r\n}'),(568,'DrawingView view','org.jhotdraw.draw.DrawingView',171,160,'org.jhotdraw.draw.DefaultHandleTracker',1749,'org.jhotdraw.draw.DefaultHandleTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)',0,'protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if (((hoverFigure) != null) && (hoverFigure.isSelectable())) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if ((hoverFigure) != null) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}'),(569,'Figure f','org.jhotdraw.draw.Figure',174,160,'org.jhotdraw.draw.DefaultHandleTracker',1749,'org.jhotdraw.draw.DefaultHandleTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)',0,'protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if (((hoverFigure) != null) && (hoverFigure.isSelectable())) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if ((hoverFigure) != null) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}'),(570,'Handle handle','org.jhotdraw.draw.Handle',191,160,'org.jhotdraw.draw.DefaultHandleTracker',1748,'org.jhotdraw.draw.DefaultHandleTracker.setHandles(org.jhotdraw.draw.Handle,java.util.Collection)',0,'public void setHandles(Handle handle, Collection<Handle> compatibleHandles) {\r\n    masterHandle = handle;\r\n    multicaster = new HandleMulticaster(handle);\r\n}'),(571,'DrawingView view','org.jhotdraw.draw.DrawingView',171,161,'org.jhotdraw.draw.DefaultSelectAreaTracker',1762,'org.jhotdraw.draw.DefaultSelectAreaTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)',0,'protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if ((hoverFigure) != null) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if (((hoverFigure) != null) && (f.isSelectable())) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}'),(572,'Figure f','org.jhotdraw.draw.Figure',174,161,'org.jhotdraw.draw.DefaultSelectAreaTracker',1762,'org.jhotdraw.draw.DefaultSelectAreaTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)',0,'protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if ((hoverFigure) != null) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if (((hoverFigure) != null) && (f.isSelectable())) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}'),(573,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,161,'org.jhotdraw.draw.DefaultSelectAreaTracker',1751,'org.jhotdraw.draw.DefaultSelectAreaTracker.activate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    clearHoverHandles();\r\n}'),(574,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,161,'org.jhotdraw.draw.DefaultSelectAreaTracker',1754,'org.jhotdraw.draw.DefaultSelectAreaTracker.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    clearHoverHandles();\r\n}'),(575,'Figure figure','org.jhotdraw.draw.Figure',174,162,'org.jhotdraw.draw.DelegationSelectionTool',1775,'org.jhotdraw.draw.DelegationSelectionTool.showPopupMenu(org.jhotdraw.draw.Figure,java.awt.Point,java.awt.Component)',0,'protected void showPopupMenu(Figure figure, Point p, Component c) {\r\n    if (DelegationSelectionTool.DEBUG) {\r\n        System.out.println((\"DelegationSelectionTool.showPopupMenu \" + figure));\r\n    }\r\n    JPopupMenu menu = new JPopupMenu();\r\n    popupMenu = menu;\r\n    JMenu submenu = null;\r\n    String submenuName = null;\r\n    LinkedList<Action> popupActions = new LinkedList<Action>();\r\n    if (figure != null) {\r\n        LinkedList<Action> figureActions = new LinkedList<Action>(figure.getActions(viewToDrawing(p)));\r\n        if (((popupActions.size()) != 0) && ((figureActions.size()) != 0)) {\r\n            popupActions.add(null);\r\n        }\r\n        popupActions.addAll(figureActions);\r\n        if (((popupActions.size()) != 0) && ((selectionActions.size()) != 0)) {\r\n            popupActions.add(null);\r\n        }\r\n        popupActions.addAll(selectionActions);\r\n    }\r\n    if (((popupActions.size()) != 0) && ((drawingActions.size()) != 0)) {\r\n        popupActions.add(null);\r\n    }\r\n    popupActions.addAll(drawingActions);\r\n    HashMap<Object, ButtonGroup> buttonGroups = new HashMap<Object, ButtonGroup>();\r\n    for (Action a : popupActions) {\r\n        if ((a != null) && ((a.getValue(Actions.SUBMENU_KEY)) != null)) {\r\n            if ((submenuName == null) || (!(submenuName.equals(a.getValue(Actions.SUBMENU_KEY))))) {\r\n                submenuName = ((String) (a.getValue(Actions.SUBMENU_KEY)));\r\n                submenu = new JMenu(submenuName);\r\n                menu.add(submenu);\r\n            }\r\n        } else {\r\n            submenuName = null;\r\n            submenu = null;\r\n        }\r\n        if (a == null) {\r\n            if (submenu != null) {\r\n                submenu.addSeparator();\r\n            } else {\r\n                menu.addSeparator();\r\n            }\r\n        } else {\r\n            AbstractButton button;\r\n            if ((a.getValue(Actions.BUTTON_GROUP_KEY)) != null) {\r\n                ButtonGroup bg = buttonGroups.get(a.getValue(Actions.BUTTON_GROUP_KEY));\r\n                if (bg == null) {\r\n                    bg = new ButtonGroup();\r\n                    buttonGroups.put(a.getValue(Actions.BUTTON_GROUP_KEY), bg);\r\n                }\r\n                button = new JRadioButtonMenuItem(a);\r\n                bg.add(button);\r\n                button.setSelected(((a.getValue(Actions.SELECTED_KEY)) == (Boolean.TRUE)));\r\n            } else\r\n                if ((a.getValue(Actions.SELECTED_KEY)) != null) {\r\n                    button = new JCheckBoxMenuItem(a);\r\n                    button.setSelected(((a.getValue(Actions.SELECTED_KEY)) == (Boolean.TRUE)));\r\n                } else {\r\n                    button = new JMenuItem(a);\r\n                }\r\n\r\n            if (submenu != null) {\r\n                submenu.add(button);\r\n            } else {\r\n                menu.add(button);\r\n            }\r\n        }\r\n    }\r\n    menu.show(c, p.x, p.y);\r\n}'),(576,'DrawingView view','org.jhotdraw.draw.DrawingView',171,162,'org.jhotdraw.draw.DelegationSelectionTool',1765,'org.jhotdraw.draw.DelegationSelectionTool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)',0,'@Override\r\npublic String getToolTipText(DrawingView view, MouseEvent evt) {\r\n    Handle handle = view.findHandle(evt.getPoint());\r\n    if (handle != null) {\r\n        return handle.getToolTipText(evt.getPoint());\r\n    }\r\n    Figure figure = view.findFigure(evt.getPoint());\r\n    if (figure != null) {\r\n        return figure.getToolTipText(viewToDrawing(evt.getPoint()));\r\n    }\r\n    return null;\r\n}'),(577,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,163,'org.jhotdraw.draw.DiamondFigure',1783,'org.jhotdraw.draw.DiamondFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopDiamondConnector(this);\r\n}'),(578,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,163,'org.jhotdraw.draw.DiamondFigure',1783,'org.jhotdraw.draw.DiamondFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopDiamondConnector(this);\r\n}'),(579,'Connector c','org.jhotdraw.draw.Connector',145,163,'org.jhotdraw.draw.DiamondFigure',1782,'org.jhotdraw.draw.DiamondFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopDiamondConnector(this);\r\n}'),(580,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,163,'org.jhotdraw.draw.DiamondFigure',1782,'org.jhotdraw.draw.DiamondFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopDiamondConnector(this);\r\n}'),(581,'Figure figure','org.jhotdraw.draw.Figure',174,165,'org.jhotdraw.draw.DnDTracker',1793,'org.jhotdraw.draw.DnDTracker.-init-(org.jhotdraw.draw.Figure)',0,'public DnDTracker(Figure figure) {\r\n    anchorFigure = figure;\r\n}'),(582,'Figure f','org.jhotdraw.draw.Figure',174,165,'org.jhotdraw.draw.DnDTracker',1798,'org.jhotdraw.draw.DnDTracker.setDraggedFigure(org.jhotdraw.draw.Figure)',0,'public void setDraggedFigure(Figure f) {\r\n    anchorFigure = f;\r\n}'),(583,'Figure owner','org.jhotdraw.draw.Figure',174,166,'org.jhotdraw.draw.DragHandle',1799,'org.jhotdraw.draw.DragHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DragHandle(Figure owner) {\r\n    super(owner);\r\n}'),(584,'Figure f','org.jhotdraw.draw.Figure',174,167,'org.jhotdraw.draw.DragTracker',1807,'org.jhotdraw.draw.DragTracker.setDraggedFigure(org.jhotdraw.draw.Figure)',0,'public void setDraggedFigure(Figure f);'),(585,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1809,'org.jhotdraw.draw.Drawing.add(org.jhotdraw.draw.Figure)',0,'/**\r\n * Adds a figure to the drawing.\r\n * The drawing sends an {@code addNotify} message to the figure\r\n * after it has been added.\r\n *\r\n * @see Figure#addNotify\r\n * @param figure\r\n * 		to be added to the drawing\r\n */\r\nboolean add(Figure figure);'),(586,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1808,'org.jhotdraw.draw.Drawing.add(int,org.jhotdraw.draw.Figure)',0,'/**\r\n * Adds a figure to the drawing.\r\n * The drawing sends an {@code addNotify} message to the figure\r\n * after it has been added.\r\n *\r\n * @see Figure#addNotify\r\n * @param index\r\n * 		The z-index of the figure.\r\n * @param figure\r\n * 		to be added to the drawing\r\n */\r\nvoid add(int index, Figure figure);'),(587,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1839,'org.jhotdraw.draw.Drawing.remove(org.jhotdraw.draw.Figure)',0,'/**\r\n * Removes a figure from the drawing.\r\n * The drawing sends a {@code removeNotify} message to the figure\r\n * before it is removed.\r\n *\r\n * @see Figure#removeNotify\r\n * @param figure\r\n * 		that is part of the drawing and should be removed\r\n */\r\nboolean remove(Figure figure);'),(588,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1818,'org.jhotdraw.draw.Drawing.basicRemove(org.jhotdraw.draw.Figure)',0,'/**\r\n * Removes a figure temporarily from the drawing.\r\n *\r\n * @see #basicAdd(Figure)\r\n * @param figure\r\n * 		that is part of the drawing and should be removed\r\n */\r\nint basicRemove(Figure figure);'),(589,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1816,'org.jhotdraw.draw.Drawing.basicAdd(org.jhotdraw.draw.Figure)',0,'/**\r\n * Reinserts a figure which was temporarily removed using basicRemove.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code basicAdd(size(), figure)}.\r\n *\r\n * @param figure\r\n * 		that is part of the drawing and should be removed\r\n * @see #basicRemove(Figure)\r\n */\r\nvoid basicAdd(Figure figure);'),(590,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1815,'org.jhotdraw.draw.Drawing.basicAdd(int,org.jhotdraw.draw.Figure)',0,'/**\r\n * Reinserts a figure which was temporarily removed using basicRemove.\r\n *\r\n * @see #basicRemove(Figure)\r\n * @param figure\r\n * 		that is part of the drawing and should be removed\r\n */\r\nvoid basicAdd(int index, Figure figure);'),(591,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1838,'org.jhotdraw.draw.Drawing.indexOf(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns the index of the specified figure.\r\n *\r\n * Returns -1 if the Figure is not directly contained in this Drawing, for\r\n * example if the Figure is a child of a CompositeFigure.\r\n */\r\nint indexOf(Figure figure);'),(592,'Figure ignore','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1826,'org.jhotdraw.draw.Drawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',0,'/**\r\n * Finds a top level Figure. Use this call for hit detection that\r\n * should not descend into the figures children.\r\n */\r\nFigure findFigureExcept(Point2D.Double p, Figure ignore);'),(593,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1826,'org.jhotdraw.draw.Drawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',1,'/**\r\n * Finds a top level Figure. Use this call for hit detection that\r\n * should not descend into the figures children.\r\n */\r\nFigure findFigureExcept(Point2D.Double p, Figure ignore);'),(594,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1824,'org.jhotdraw.draw.Drawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',0,'/**\r\n * Finds a top level Figure which is behind the specified Figure.\r\n */\r\nFigure findFigureBehind(Point2D.Double p, Figure figure);'),(595,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1824,'org.jhotdraw.draw.Drawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',1,'/**\r\n * Finds a top level Figure which is behind the specified Figure.\r\n */\r\nFigure findFigureBehind(Point2D.Double p, Figure figure);'),(596,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1842,'org.jhotdraw.draw.Drawing.sendToBack(org.jhotdraw.draw.Figure)',0,'/**\r\n * Sends a figure to the back of the drawing.\r\n *\r\n * @param figure\r\n * 		that is part of the drawing\r\n */\r\nvoid sendToBack(Figure figure);'),(597,'Figure figure','org.jhotdraw.draw.Figure',174,168,'org.jhotdraw.draw.Drawing',1820,'org.jhotdraw.draw.Drawing.bringToFront(org.jhotdraw.draw.Figure)',0,'/**\r\n * Brings a figure to the front.\r\n *\r\n * @param figure\r\n * 		that is part of the drawing\r\n */\r\nvoid bringToFront(Figure figure);'),(598,'InputFormat format','org.jhotdraw.draw.InputFormat',203,168,'org.jhotdraw.draw.Drawing',1812,'org.jhotdraw.draw.Drawing.addInputFormat(org.jhotdraw.draw.InputFormat)',0,'/**\r\n * Adds an input format to the drawing.\r\n */\r\nvoid addInputFormat(InputFormat format);'),(599,'OutputFormat format','org.jhotdraw.draw.OutputFormat',221,168,'org.jhotdraw.draw.Drawing',1813,'org.jhotdraw.draw.Drawing.addOutputFormat(org.jhotdraw.draw.OutputFormat)',0,'/**\r\n * Adds an output format to the drawing.\r\n */\r\nvoid addOutputFormat(OutputFormat format);'),(600,'DrawingView view','org.jhotdraw.draw.DrawingView',171,169,'org.jhotdraw.draw.DrawingEditor',1847,'org.jhotdraw.draw.DrawingEditor.add(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Gets the editors current drawing.\r\n * /\r\n * Drawing getDrawing();\r\n * /**\r\n * Sets the editors current drawing.\r\n * /\r\n * void setDrawing(Drawing drawing);\r\n */\r\n/**\r\n * Adds a drawing view to the editor.\r\n * The editor invokes addNotify on the view, and it registers its tool\r\n * as an event listener on the view.\r\n */\r\nvoid add(DrawingView view);'),(601,'DrawingView view','org.jhotdraw.draw.DrawingView',171,169,'org.jhotdraw.draw.DrawingEditor',1858,'org.jhotdraw.draw.DrawingEditor.remove(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Removes a drawing view from the editor.\r\n * The editor invokes removeNotify on the view, and it unregisters its tool\r\n * on the view.\r\n */\r\nvoid remove(DrawingView view);'),(602,'DrawingView newValue','org.jhotdraw.draw.DrawingView',171,169,'org.jhotdraw.draw.DrawingEditor',1860,'org.jhotdraw.draw.DrawingEditor.setActiveView(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Sets the editors active drawing view.\r\n * This can be set to null, if the editor has no views.\r\n */\r\nvoid setActiveView(DrawingView newValue);'),(603,'Tool t','org.jhotdraw.draw.Tool',262,169,'org.jhotdraw.draw.DrawingEditor',1865,'org.jhotdraw.draw.DrawingEditor.setTool(org.jhotdraw.draw.Tool)',0,'/**\r\n * Calls deactivate on the previously active tool of this drawing editor.\r\n * Calls activate on the provided tool.\r\n * Forwards all mouse, mouse moation and keyboard events that occur on the\r\n * DrawingView to the provided tool.\r\n * <p>\r\n * This is a bound property.\r\n */\r\nvoid setTool(Tool t);'),(604,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,169,'org.jhotdraw.draw.DrawingEditor',1862,'org.jhotdraw.draw.DrawingEditor.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Sets a default attribute of the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n */\r\npublic <T> void setDefaultAttribute(AttributeKey<T> key, T value);'),(605,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,169,'org.jhotdraw.draw.DrawingEditor',1852,'org.jhotdraw.draw.DrawingEditor.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Gets a default attribute from the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n */\r\npublic <T> T getDefaultAttribute(AttributeKey<T> key);'),(606,'Figure f','org.jhotdraw.draw.Figure',174,169,'org.jhotdraw.draw.DrawingEditor',1849,'org.jhotdraw.draw.DrawingEditor.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)',0,'/**\r\n * Applies the default attributes to the specified figure.\r\n */\r\npublic void applyDefaultAttributesTo(Figure f);'),(607,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,169,'org.jhotdraw.draw.DrawingEditor',1864,'org.jhotdraw.draw.DrawingEditor.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Sets a handle attribute of the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n *\r\n * @param key\r\n * 		AttributeKey.\r\n * @param value\r\n * 		Attribute value.\r\n */\r\npublic <T> void setHandleAttribute(AttributeKey<T> key, T value);'),(608,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,169,'org.jhotdraw.draw.DrawingEditor',1855,'org.jhotdraw.draw.DrawingEditor.getHandleAttribute(org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Gets a handle attribute from the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n *\r\n * @param key\r\n * 		AttributeKey.\r\n * @return If the handle attribute has been set, returns the previously\r\nset value. If the handle attribute has not been set, returns key.getDefaultValue().\r\n */\r\npublic <T> T getHandleAttribute(AttributeKey<T> key);'),(609,'Drawing drawing','org.jhotdraw.draw.Drawing',168,170,'org.jhotdraw.draw.DrawingPageable',1866,'org.jhotdraw.draw.DrawingPageable.-init-(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingPageable(Drawing drawing) {\r\n    this.drawing = drawing;\r\n    Paper paper = new Paper();\r\n    pageFormat = new PageFormat();\r\n    pageFormat.setPaper(paper);\r\n}'),(610,'Drawing d','org.jhotdraw.draw.Drawing',168,171,'org.jhotdraw.draw.DrawingView',1917,'org.jhotdraw.draw.DrawingView.setDrawing(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Sets and installs another drawing in the view.\r\n * This is a bound property.\r\n */\r\npublic void setDrawing(Drawing d);'),(611,'Figure checkFigure','org.jhotdraw.draw.Figure',174,171,'org.jhotdraw.draw.DrawingView',1903,'org.jhotdraw.draw.DrawingView.isFigureSelected(org.jhotdraw.draw.Figure)',0,'/**\r\n * Test whether a given figure is selected.\r\n */\r\npublic boolean isFigureSelected(Figure checkFigure);'),(612,'Figure figure','org.jhotdraw.draw.Figure',174,171,'org.jhotdraw.draw.DrawingView',1880,'org.jhotdraw.draw.DrawingView.addToSelection(org.jhotdraw.draw.Figure)',0,'/**\r\n * Adds a figure to the current selection.\r\n */\r\npublic void addToSelection(Figure figure);'),(613,'Figure figure','org.jhotdraw.draw.Figure',174,171,'org.jhotdraw.draw.DrawingView',1905,'org.jhotdraw.draw.DrawingView.removeFromSelection(org.jhotdraw.draw.Figure)',0,'/**\r\n * Removes a figure from the selection.\r\n */\r\npublic void removeFromSelection(Figure figure);'),(614,'Figure figure','org.jhotdraw.draw.Figure',174,171,'org.jhotdraw.draw.DrawingView',1923,'org.jhotdraw.draw.DrawingView.toggleSelection(org.jhotdraw.draw.Figure)',0,'/**\r\n * If a figure isnt selected it is added to the selection.\r\n * Otherwise it is removed from the selection.\r\n */\r\npublic void toggleSelection(Figure figure);'),(615,'Handle handle','org.jhotdraw.draw.Handle',191,171,'org.jhotdraw.draw.DrawingView',1889,'org.jhotdraw.draw.DrawingView.getCompatibleHandles(org.jhotdraw.draw.Handle)',0,'/**\r\n * Gets compatible handles.\r\n *\r\n * @return A collection containing the handle and all compatible handles.\r\n */\r\npublic Collection<Handle> getCompatibleHandles(Handle handle);'),(616,'Handle newValue','org.jhotdraw.draw.Handle',191,171,'org.jhotdraw.draw.DrawingView',1914,'org.jhotdraw.draw.DrawingView.setActiveHandle(org.jhotdraw.draw.Handle)',0,'/**\r\n * Sets the active handle.\r\n */\r\npublic void setActiveHandle(Handle newValue);'),(617,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,171,'org.jhotdraw.draw.DrawingView',1877,'org.jhotdraw.draw.DrawingView.addNotify(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Informs the view that it has been added to the specified editor.\r\n * The view must draw the tool of the editor, if getActiveView() of the\r\n * editor returns the view.\r\n */\r\npublic void addNotify(DrawingEditor editor);'),(618,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,171,'org.jhotdraw.draw.DrawingView',1909,'org.jhotdraw.draw.DrawingView.removeNotify(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Informs the view that it has been removed from the specified editor.\r\n * The view must not draw the tool from the editor anymore.\r\n */\r\npublic void removeNotify(DrawingEditor editor);'),(619,'FigureSelectionListener fsl','org.jhotdraw.draw.FigureSelectionListener',180,171,'org.jhotdraw.draw.DrawingView',1873,'org.jhotdraw.draw.DrawingView.addFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)',0,'/**\r\n * Add a listener for selection changes in this DrawingView.\r\n *\r\n * @param fsl\r\n * 		jhotdraw.framework.FigureSelectionListener\r\n */\r\npublic void addFigureSelectionListener(FigureSelectionListener fsl);'),(620,'FigureSelectionListener fsl','org.jhotdraw.draw.FigureSelectionListener',180,171,'org.jhotdraw.draw.DrawingView',1904,'org.jhotdraw.draw.DrawingView.removeFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)',0,'/**\r\n * Remove a listener for selection changes in this DrawingView.\r\n *\r\n * @param fsl\r\n * 		jhotdraw.framework.FigureSelectionListener\r\n */\r\npublic void removeFigureSelectionListener(FigureSelectionListener fsl);'),(621,'Constrainer constrainer','org.jhotdraw.draw.Constrainer',147,171,'org.jhotdraw.draw.DrawingView',1922,'org.jhotdraw.draw.DrawingView.setVisibleConstrainer(org.jhotdraw.draw.Constrainer)',0,'/**\r\n * Sets the editors constrainer for this view, for use, when the\r\n * visible constrainer is turned on.\r\n * This is a bound property.\r\n */\r\npublic void setVisibleConstrainer(Constrainer constrainer);'),(622,'Constrainer constrainer','org.jhotdraw.draw.Constrainer',147,171,'org.jhotdraw.draw.DrawingView',1920,'org.jhotdraw.draw.DrawingView.setInvisibleConstrainer(org.jhotdraw.draw.Constrainer)',0,'/**\r\n * Sets the editors constrainer for this view, for use, when the\r\n * visible constrainer is turned off.\r\n * This is a bound property.\r\n */\r\npublic void setInvisibleConstrainer(Constrainer constrainer);'),(623,'BezierPath path','org.jhotdraw.geom.BezierPath',343,172,'org.jhotdraw.draw.ElbowLiner',1929,'org.jhotdraw.draw.ElbowLiner.createHandles(org.jhotdraw.geom.BezierPath)',0,'public Collection<Handle> createHandles(BezierPath path) {\r\n    return null;\r\n}'),(624,'ConnectionFigure figure','org.jhotdraw.draw.ConnectionFigure',142,172,'org.jhotdraw.draw.ElbowLiner',1930,'org.jhotdraw.draw.ElbowLiner.lineout(org.jhotdraw.draw.ConnectionFigure)',0,'public void lineout(ConnectionFigure figure) {\r\n    BezierPath path = ((LineConnectionFigure) (figure)).getBezierPath();\r\n    Connector start = figure.getStartConnector();\r\n    Connector end = figure.getEndConnector();\r\n    if (((start == null) || (end == null)) || (path == null)) {\r\n        return;\r\n    }\r\n    // Special treatment if the connection connects the same figure\r\n    if ((figure.getStartFigure()) == (figure.getEndFigure())) {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 5) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 5) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            soutcode = Geom.outcode(sb, eb);\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            eoutcode = Geom.outcode(sb, eb);\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        switch (soutcode) {\r\n            case Geom.OUT_TOP :\r\n                eoutcode = Geom.OUT_LEFT;\r\n                break;\r\n            case Geom.OUT_RIGHT :\r\n                eoutcode = Geom.OUT_TOP;\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n                eoutcode = Geom.OUT_RIGHT;\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                eoutcode = Geom.OUT_BOTTOM;\r\n                break;\r\n            default :\r\n                eoutcode = Geom.OUT_TOP;\r\n                soutcode = Geom.OUT_RIGHT;\r\n                break;\r\n        }\r\n        path.get(1).moveTo(((sp.x) + (shoulderSize)), sp.y);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (shoulderSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (shoulderSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (shoulderSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (shoulderSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(3).moveTo(((ep.x) + (shoulderSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(3).moveTo(((ep.x) - (shoulderSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) + (shoulderSize)));\r\n                } else {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) - (shoulderSize)));\r\n                }\r\n\r\n\r\n        switch (soutcode) {\r\n            case Geom.OUT_RIGHT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_TOP :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n            default :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n        }\r\n    } else {\r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        path.clear();\r\n        path.add(new BezierPath.Node(sp.x, sp.y));\r\n        if (((sp.x) == (ep.x)) || ((sp.y) == (ep.y))) {\r\n            path.add(new BezierPath.Node(ep.x, ep.y));\r\n        } else {\r\n            Rectangle2D.Double sb = start.getBounds();\r\n            sb.x += 5.0;\r\n            sb.y += 5.0;\r\n            sb.width -= 10.0;\r\n            sb.height -= 10.0;\r\n            Rectangle2D.Double eb = end.getBounds();\r\n            eb.x += 5.0;\r\n            eb.y += 5.0;\r\n            eb.width -= 10.0;\r\n            eb.height -= 10.0;\r\n            int soutcode = sb.outcode(sp);\r\n            if (soutcode == 0) {\r\n                soutcode = Geom.outcode(sb, eb);\r\n            }\r\n            int eoutcode = eb.outcode(ep);\r\n            if (eoutcode == 0) {\r\n                eoutcode = Geom.outcode(eb, sb);\r\n            }\r\n            if (((soutcode & ((Geom.OUT_TOP) | (Geom.OUT_BOTTOM))) != 0) && ((eoutcode & ((Geom.OUT_TOP) | (Geom.OUT_BOTTOM))) != 0)) {\r\n                path.add(new BezierPath.Node(sp.x, (((sp.y) + (ep.y)) / 2)));\r\n                path.add(new BezierPath.Node(ep.x, (((sp.y) + (ep.y)) / 2)));\r\n            } else\r\n                if (((soutcode & ((Geom.OUT_LEFT) | (Geom.OUT_RIGHT))) != 0) && ((eoutcode & ((Geom.OUT_LEFT) | (Geom.OUT_RIGHT))) != 0)) {\r\n                    path.add(new BezierPath.Node((((sp.x) + (ep.x)) / 2), sp.y));\r\n                    path.add(new BezierPath.Node((((sp.x) + (ep.x)) / 2), ep.y));\r\n                } else\r\n                    if ((soutcode == (Geom.OUT_BOTTOM)) && (eoutcode == (Geom.OUT_LEFT))) {\r\n                        path.add(new BezierPath.Node(sp.x, ep.y));\r\n                    } else {\r\n                        path.add(new BezierPath.Node(ep.x, sp.y));\r\n                    }\r\n\r\n\r\n            path.add(new BezierPath.Node(ep.x, ep.y));\r\n        }\r\n    }\r\n    // Ensure all path nodes are straight\r\n    for (BezierPath.Node node : path) {\r\n        node.setMask(BezierPath.C0_MASK);\r\n    }\r\n    path.invalidatePath();\r\n}'),(625,'DOMInput in','org.jhotdraw.xml.DOMInput',650,172,'org.jhotdraw.draw.ElbowLiner',1931,'org.jhotdraw.draw.ElbowLiner.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) {\r\n}'),(626,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,172,'org.jhotdraw.draw.ElbowLiner',1932,'org.jhotdraw.draw.ElbowLiner.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) {\r\n}'),(627,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,173,'org.jhotdraw.draw.EllipseFigure',1940,'org.jhotdraw.draw.EllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopEllipseConnector(this);\r\n}'),(628,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,173,'org.jhotdraw.draw.EllipseFigure',1940,'org.jhotdraw.draw.EllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopEllipseConnector(this);\r\n}'),(629,'Connector c','org.jhotdraw.draw.Connector',145,173,'org.jhotdraw.draw.EllipseFigure',1939,'org.jhotdraw.draw.EllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopEllipseConnector(this);\r\n}'),(630,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,173,'org.jhotdraw.draw.EllipseFigure',1939,'org.jhotdraw.draw.EllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopEllipseConnector(this);\r\n}'),(631,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,174,'org.jhotdraw.draw.Figure',1987,'org.jhotdraw.draw.Figure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'// ATTRIBUTES\r\n/**\r\n * Sets an attribute of the figure and calls attributeChanged on all\r\n * registered FigureListeners.\r\n * <p>\r\n * For efficiency reasons, the drawing is not automatically repainted.\r\n * If you want the drawing to be repainted when the attribute is changed,\r\n * you can either use {@code key.set(figure, value);} or\r\n * {@code figure.willChange(); figure.setAttribute(key, value);\r\n * figure.changed();}.\r\n *\r\n * @see AttributeKey#set\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T value);'),(632,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,174,'org.jhotdraw.draw.Figure',1959,'org.jhotdraw.draw.Figure.getAttribute(org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Gets an attribute from the Figure.\r\n *\r\n * @see AttributeKey#get\r\n * @return Returns the attribute value. If the Figure does not have an\r\nattribute with the specified key, returns key.getDefaultValue().\r\n */\r\npublic <T> T getAttribute(AttributeKey<T> key);'),(633,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,174,'org.jhotdraw.draw.Figure',1956,'org.jhotdraw.draw.Figure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Gets a connector for this figure at the given location.\r\n * A figure can have different connectors at different locations.\r\n *\r\n * @param p\r\n * 		the location of the connector.\r\n * @param prototype\r\n * 		The prototype used to create a connection or null if\r\n * 		unknown. This allows for specific connectors for different\r\n * 		connection figures.\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype);'),(634,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,174,'org.jhotdraw.draw.Figure',1956,'org.jhotdraw.draw.Figure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'/**\r\n * Gets a connector for this figure at the given location.\r\n * A figure can have different connectors at different locations.\r\n *\r\n * @param p\r\n * 		the location of the connector.\r\n * @param prototype\r\n * 		The prototype used to create a connection or null if\r\n * 		unknown. This allows for specific connectors for different\r\n * 		connection figures.\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype);'),(635,'Connector c','org.jhotdraw.draw.Connector',145,174,'org.jhotdraw.draw.Figure',1955,'org.jhotdraw.draw.Figure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'/**\r\n * Gets a compatible connector.\r\n * If the provided connector is part of this figure, return the connector.\r\n * If the provided connector is part of another figure, return a connector\r\n * with the same semantics for this figure.\r\n * Return null, if no compatible connector is available.\r\n */\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector);'),(636,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,174,'org.jhotdraw.draw.Figure',1955,'org.jhotdraw.draw.Figure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'/**\r\n * Gets a compatible connector.\r\n * If the provided connector is part of this figure, return the connector.\r\n * If the provided connector is part of another figure, return a connector\r\n * with the same semantics for this figure.\r\n * Return null, if no compatible connector is available.\r\n */\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector);'),(637,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,174,'org.jhotdraw.draw.Figure',1963,'org.jhotdraw.draw.Figure.getConnectors(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Returns all connectors of this Figure for the specified prototype of\r\n * a ConnectionFigure.\r\n * <p>\r\n * This is used by connection tools and connection handles\r\n * to visualize the connectors when the user is about to\r\n * create a ConnectionFigure to this Figure.\r\n *\r\n * @param prototype\r\n * 		The prototype used to create a connection or null if\r\n * 		unknown. This allows for specific connectors for different\r\n * 		connection figures.\r\n */\r\npublic Collection<Connector> getConnectors(ConnectionFigure prototype);'),(638,'Figure figure','org.jhotdraw.draw.Figure',174,174,'org.jhotdraw.draw.Figure',1976,'org.jhotdraw.draw.Figure.includes(org.jhotdraw.draw.Figure)',0,'// COMPOSITE FIGURES\r\n/**\r\n * Checks whether the given figure is contained in this figure.\r\n * A figure includes itself.\r\n */\r\npublic boolean includes(Figure figure);'),(639,'Drawing d','org.jhotdraw.draw.Drawing',168,174,'org.jhotdraw.draw.Figure',1948,'org.jhotdraw.draw.Figure.addNotify(org.jhotdraw.draw.Drawing)',0,'// EVENT HANDLING\r\n/**\r\n * Informs a figure, that it has been added to a drawing.\r\n * The figure must inform all FigureListeners that it has been added.\r\n */\r\npublic void addNotify(Drawing d);'),(640,'Drawing d','org.jhotdraw.draw.Drawing',168,174,'org.jhotdraw.draw.Figure',1983,'org.jhotdraw.draw.Figure.removeNotify(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Informs a figure, that it has been removed from a drawing.\r\n * The figure must inform all FigureListeners that it has been removed.\r\n */\r\npublic void removeNotify(Drawing d);'),(641,'DrawingView view','org.jhotdraw.draw.DrawingView',171,174,'org.jhotdraw.draw.Figure',1974,'org.jhotdraw.draw.Figure.handleDrop(java.awt.geom.Point2D$Double,java.util.Collection,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Handles a drop.\r\n *\r\n * @param p\r\n * 		The location of the mouse event.\r\n * @param droppedFigures\r\n * 		The dropped figures.\r\n * @param view\r\n * 		The drawing view which is the source of the mouse event.\r\n * @return Returns true, if the figures should snap back to the location\r\nthey were dragged from.\r\n */\r\npublic boolean handleDrop(Point2D.Double p, Collection<Figure> droppedFigures, DrawingView view);'),(642,'DrawingView view','org.jhotdraw.draw.DrawingView',171,174,'org.jhotdraw.draw.Figure',1975,'org.jhotdraw.draw.Figure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Handles a mouse click.\r\n *\r\n * @param p\r\n * 		The location of the mouse event.\r\n * @param evt\r\n * 		The mouse event.\r\n * @param view\r\n * 		The drawing view which is the source of the mouse event.\r\n * @return Returns true, if the event was consumed.\r\n */\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view);'),(643,'FigureListener l','org.jhotdraw.draw.FigureListener',178,174,'org.jhotdraw.draw.Figure',1947,'org.jhotdraw.draw.Figure.addFigureListener(org.jhotdraw.draw.FigureListener)',0,'/**\r\n * Adds a listener for FigureEvents.\r\n */\r\npublic void addFigureListener(FigureListener l);'),(644,'FigureListener l','org.jhotdraw.draw.FigureListener',178,174,'org.jhotdraw.draw.Figure',1982,'org.jhotdraw.draw.Figure.removeFigureListener(org.jhotdraw.draw.FigureListener)',0,'/**\r\n * Removes a listener for FigureEvents.\r\n */\r\npublic void removeFigureListener(FigureListener l);'),(645,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,175,'org.jhotdraw.draw.FigureAdapter',1992,'org.jhotdraw.draw.FigureAdapter.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'public void areaInvalidated(FigureEvent e) {\r\n}'),(646,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,175,'org.jhotdraw.draw.FigureAdapter',1993,'org.jhotdraw.draw.FigureAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'public void attributeChanged(FigureEvent e) {\r\n}'),(647,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,175,'org.jhotdraw.draw.FigureAdapter',1994,'org.jhotdraw.draw.FigureAdapter.figureAdded(org.jhotdraw.draw.FigureEvent)',0,'public void figureAdded(FigureEvent e) {\r\n}'),(648,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,175,'org.jhotdraw.draw.FigureAdapter',1995,'org.jhotdraw.draw.FigureAdapter.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureChanged(FigureEvent e) {\r\n}'),(649,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,175,'org.jhotdraw.draw.FigureAdapter',1997,'org.jhotdraw.draw.FigureAdapter.figureRemoved(org.jhotdraw.draw.FigureEvent)',0,'public void figureRemoved(FigureEvent e) {\r\n}'),(650,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,175,'org.jhotdraw.draw.FigureAdapter',1998,'org.jhotdraw.draw.FigureAdapter.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'public void figureRequestRemove(FigureEvent e) {\r\n}'),(651,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,175,'org.jhotdraw.draw.FigureAdapter',1996,'org.jhotdraw.draw.FigureAdapter.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureHandlesChanged(FigureEvent e) {\r\n}'),(652,'Figure source','org.jhotdraw.draw.Figure',174,176,'org.jhotdraw.draw.FigureEvent',1999,'org.jhotdraw.draw.FigureEvent.-init-(org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double)',0,'/**\r\n * Constructs an event for the given source Figure.\r\n *\r\n * @param invalidatedArea\r\n * 		The bounds of the invalidated area on the drawing.\r\n */\r\npublic FigureEvent(Figure source, Rectangle2D.Double invalidatedArea) {\r\n    super(source);\r\n    this.invalidatedArea = invalidatedArea;\r\n}'),(653,'Figure source','org.jhotdraw.draw.Figure',174,176,'org.jhotdraw.draw.FigureEvent',2000,'org.jhotdraw.draw.FigureEvent.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)',0,'/**\r\n * Constructs an event for the given source Figure.\r\n */\r\npublic FigureEvent(Figure source, AttributeKey attribute, Object oldValue, Object newValue) {\r\n    super(source);\r\n    this.attribute = attribute;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(654,'AttributeKey attribute','org.jhotdraw.draw.AttributeKey',109,176,'org.jhotdraw.draw.FigureEvent',2000,'org.jhotdraw.draw.FigureEvent.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)',0,'/**\r\n * Constructs an event for the given source Figure.\r\n */\r\npublic FigureEvent(Figure source, AttributeKey attribute, Object oldValue, Object newValue) {\r\n    super(source);\r\n    this.attribute = attribute;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(655,'Figure f1','org.jhotdraw.draw.Figure',174,177,'org.jhotdraw.draw.FigureLayerComparator',2007,'org.jhotdraw.draw.FigureLayerComparator.compare(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'public int compare(Figure f1, Figure f2) {\r\n    return (f1.getLayer()) - (f2.getLayer());\r\n}'),(656,'Figure f2','org.jhotdraw.draw.Figure',174,177,'org.jhotdraw.draw.FigureLayerComparator',2007,'org.jhotdraw.draw.FigureLayerComparator.compare(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'public int compare(Figure f1, Figure f2) {\r\n    return (f1.getLayer()) - (f2.getLayer());\r\n}'),(657,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,178,'org.jhotdraw.draw.FigureListener',2008,'org.jhotdraw.draw.FigureListener.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when the drawing area used by the figure needs to be repainted.\r\n */\r\npublic void areaInvalidated(FigureEvent e);'),(658,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,178,'org.jhotdraw.draw.FigureListener',2009,'org.jhotdraw.draw.FigureListener.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when an attribute of the figure has changed.\r\n */\r\npublic void attributeChanged(FigureEvent e);'),(659,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,178,'org.jhotdraw.draw.FigureListener',2012,'org.jhotdraw.draw.FigureListener.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when handles of a Figure have been added, removed or replaced.\r\n * <p>\r\n * DrawingViews listen to this event to repopulate the Handles.\r\n * <p>\r\n * A Figure should not fire this event, if just the state or the location\r\n * of Handle has changed.\r\n */\r\npublic void figureHandlesChanged(FigureEvent e);'),(660,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,178,'org.jhotdraw.draw.FigureListener',2011,'org.jhotdraw.draw.FigureListener.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when the geometry (for example the bounds) of the figure has changed.\r\n */\r\npublic void figureChanged(FigureEvent e);'),(661,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,178,'org.jhotdraw.draw.FigureListener',2010,'org.jhotdraw.draw.FigureListener.figureAdded(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when a figure was added to a drawing.\r\n */\r\npublic void figureAdded(FigureEvent e);'),(662,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,178,'org.jhotdraw.draw.FigureListener',2013,'org.jhotdraw.draw.FigureListener.figureRemoved(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when a figure was removed from a drawing.\r\n */\r\npublic void figureRemoved(FigureEvent e);'),(663,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,178,'org.jhotdraw.draw.FigureListener',2014,'org.jhotdraw.draw.FigureListener.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'/**\r\n * Sent when the figure requests to be removed from a drawing.\r\n */\r\npublic void figureRequestRemove(FigureEvent e);'),(664,'DrawingView source','org.jhotdraw.draw.DrawingView',171,179,'org.jhotdraw.draw.FigureSelectionEvent',2015,'org.jhotdraw.draw.FigureSelectionEvent.-init-(org.jhotdraw.draw.DrawingView,java.util.Set,java.util.Set)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic FigureSelectionEvent(DrawingView source, Set<Figure> oldValue, Set<Figure> newValue) {\r\n    super(source);\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}'),(665,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,180,'org.jhotdraw.draw.FigureSelectionListener',2019,'org.jhotdraw.draw.FigureSelectionListener.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt);'),(666,'DrawingView view','org.jhotdraw.draw.DrawingView',171,181,'org.jhotdraw.draw.FloatingTextArea',2021,'org.jhotdraw.draw.FloatingTextArea.createOverlay(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Creates the overlay within the given container.\r\n *\r\n * @param view\r\n * 		the DrawingView\r\n */\r\npublic void createOverlay(DrawingView view) {\r\n    createOverlay(view, null);\r\n}'),(667,'DrawingView view','org.jhotdraw.draw.DrawingView',171,181,'org.jhotdraw.draw.FloatingTextArea',2022,'org.jhotdraw.draw.FloatingTextArea.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n *\r\n * @param view\r\n * 		the DrawingView\r\n * @param figure\r\n * 		the figure holding the text\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(editScrollContainer, 0);\r\n    editedFigure = figure;\r\n    this.view = view;\r\n    if ((editedFigure) != null) {\r\n        editedFigure.addFigureListener(figureHandler);\r\n        updateWidget();\r\n    }\r\n}'),(668,'TextHolderFigure figure','org.jhotdraw.draw.TextHolderFigure',259,181,'org.jhotdraw.draw.FloatingTextArea',2022,'org.jhotdraw.draw.FloatingTextArea.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n *\r\n * @param view\r\n * 		the DrawingView\r\n * @param figure\r\n * 		the figure holding the text\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(editScrollContainer, 0);\r\n    editedFigure = figure;\r\n    this.view = view;\r\n    if ((editedFigure) != null) {\r\n        editedFigure.addFigureListener(figureHandler);\r\n        updateWidget();\r\n    }\r\n}'),(669,'DrawingView view','org.jhotdraw.draw.DrawingView',171,182,'org.jhotdraw.draw.FloatingTextField',2031,'org.jhotdraw.draw.FloatingTextField.createOverlay(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Creates the overlay for the given Component.\r\n */\r\npublic void createOverlay(DrawingView view) {\r\n    createOverlay(view, null);\r\n}'),(670,'DrawingView view','org.jhotdraw.draw.DrawingView',171,182,'org.jhotdraw.draw.FloatingTextField',2032,'org.jhotdraw.draw.FloatingTextField.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(textField, 0);\r\n    textField.setText(figure.getText());\r\n    textField.setColumns(figure.getTextColumns());\r\n    textField.selectAll();\r\n    textField.setVisible(true);\r\n    editedFigure = figure;\r\n    editedFigure.addFigureListener(figureHandler);\r\n    this.view = view;\r\n    updateWidget();\r\n}'),(671,'TextHolderFigure figure','org.jhotdraw.draw.TextHolderFigure',259,182,'org.jhotdraw.draw.FloatingTextField',2032,'org.jhotdraw.draw.FloatingTextField.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(textField, 0);\r\n    textField.setText(figure.getText());\r\n    textField.setColumns(figure.getTextColumns());\r\n    textField.selectAll();\r\n    textField.setVisible(true);\r\n    editedFigure = figure;\r\n    editedFigure.addFigureListener(figureHandler);\r\n    this.view = view;\r\n    updateWidget();\r\n}'),(672,'TextHolderFigure owner','org.jhotdraw.draw.TextHolderFigure',259,183,'org.jhotdraw.draw.FontSizeHandle',2040,'org.jhotdraw.draw.FontSizeHandle.-init-(org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic FontSizeHandle(TextHolderFigure owner) {\r\n    super(owner, new FontSizeLocator());\r\n}'),(673,'TextHolderFigure owner','org.jhotdraw.draw.TextHolderFigure',259,183,'org.jhotdraw.draw.FontSizeHandle',2041,'org.jhotdraw.draw.FontSizeHandle.-init-(org.jhotdraw.draw.TextHolderFigure,org.jhotdraw.draw.Locator)',0,'public FontSizeHandle(TextHolderFigure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(674,'Locator locator','org.jhotdraw.draw.Locator',214,183,'org.jhotdraw.draw.FontSizeHandle',2041,'org.jhotdraw.draw.FontSizeHandle.-init-(org.jhotdraw.draw.TextHolderFigure,org.jhotdraw.draw.Locator)',0,'public FontSizeHandle(TextHolderFigure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(675,'Figure owner','org.jhotdraw.draw.Figure',174,184,'org.jhotdraw.draw.FontSizeLocator',2052,'org.jhotdraw.draw.FontSizeLocator.locate(org.jhotdraw.draw.Figure)',0,'/**\r\n * Locates a position on the provided figure.\r\n *\r\n * @return a Point2D.Double on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner) {\r\n    Point2D.Double p = ((Point2D.Double) (owner.getStartPoint().clone()));\r\n    if (owner instanceof TextHolderFigure) {\r\n        p.y += ((TextHolderFigure) (owner)).getFontSize();\r\n        p.y += ((TextHolderFigure) (owner)).getInsets().top;\r\n    } else {\r\n        p.y += AttributeKeys.FONT_SIZE.get(owner);\r\n    }\r\n    if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n        AttributeKeys.TRANSFORM.get(owner).transform(p, p);\r\n    }\r\n    return p;\r\n}'),(676,'Figure owner','org.jhotdraw.draw.Figure',174,184,'org.jhotdraw.draw.FontSizeLocator',2053,'org.jhotdraw.draw.FontSizeLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}'),(677,'Figure dependent','org.jhotdraw.draw.Figure',174,184,'org.jhotdraw.draw.FontSizeLocator',2053,'org.jhotdraw.draw.FontSizeLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}'),(678,'Figure f','org.jhotdraw.draw.Figure',174,185,'org.jhotdraw.draw.GeneralPathTip',2056,'org.jhotdraw.draw.GeneralPathTip.getDecoratorPath(org.jhotdraw.draw.Figure)',0,'protected GeneralPath getDecoratorPath(Figure f) {\r\n    return ((GeneralPath) (path.clone()));\r\n}'),(679,'Figure f','org.jhotdraw.draw.Figure',174,185,'org.jhotdraw.draw.GeneralPathTip',2057,'org.jhotdraw.draw.GeneralPathTip.getDecoratorPathRadius(org.jhotdraw.draw.Figure)',0,'protected double getDecoratorPathRadius(Figure f) {\r\n    return decorationRadius;\r\n}'),(680,'Figure owner','org.jhotdraw.draw.Figure',174,186,'org.jhotdraw.draw.GeometryEdit',2058,'org.jhotdraw.draw.GeometryEdit.-init-(org.jhotdraw.draw.Figure,java.lang.Object,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic GeometryEdit(Figure owner, Object oldGeometry, Object newGeometry) {\r\n    this.owner = owner;\r\n    this.oldGeometry = oldGeometry;\r\n    this.newGeometry = newGeometry;\r\n}'),(681,'GraphicalCompositeFigure owner','org.jhotdraw.draw.GraphicalCompositeFigure',188,187,'org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler',2092,'org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.-init-(org.jhotdraw.draw.GraphicalCompositeFigure)',0,'private PresentationFigureHandler(GraphicalCompositeFigure owner) {\r\n    this.owner = owner;\r\n}'),(682,'Figure newPresentationFigure','org.jhotdraw.draw.Figure',174,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2064,'org.jhotdraw.draw.GraphicalCompositeFigure.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Constructor which creates a GraphicalCompositeFigure with\r\n * a given graphical figure for presenting it.\r\n *\r\n * @param newPresentationFigure	figure\r\n * 		which renders the container\r\n */\r\npublic GraphicalCompositeFigure(Figure newPresentationFigure) {\r\n    super();\r\n    setPresentationFigure(newPresentationFigure);\r\n}'),(683,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,187,'org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler',2095,'org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    owner.remove(e.getFigure());\r\n}'),(684,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,187,'org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler',2094,'org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.willChange();\r\n        owner.fireFigureChanged(e);\r\n        owner.changed();\r\n    }\r\n}'),(685,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,187,'org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler',2093,'org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.fireAreaInvalidated(e.getInvalidatedArea());\r\n    }\r\n}'),(686,'Drawing drawing','org.jhotdraw.draw.Drawing',168,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2065,'org.jhotdraw.draw.GraphicalCompositeFigure.addNotify(org.jhotdraw.draw.Drawing)',0,'public void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().addNotify(drawing);\r\n    }\r\n}'),(687,'Drawing drawing','org.jhotdraw.draw.Drawing',168,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2083,'org.jhotdraw.draw.GraphicalCompositeFigure.removeNotify(org.jhotdraw.draw.Drawing)',0,'public void removeNotify(Drawing drawing) {\r\n    super.removeNotify(drawing);\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().removeNotify(drawing);\r\n    }\r\n}'),(688,'Figure newPresentationFigure','org.jhotdraw.draw.Figure',174,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2087,'org.jhotdraw.draw.GraphicalCompositeFigure.setPresentationFigure(org.jhotdraw.draw.Figure)',0,'/**\r\n * Set a figure which renders this BasicCompositeFigure. The presentation\r\n * tasks for the BasicCompositeFigure are delegated to this presentation\r\n * figure.\r\n *\r\n * @param newPresentationFigure	figure\r\n * 		takes over the presentation tasks\r\n */\r\npublic void setPresentationFigure(Figure newPresentationFigure) {\r\n    if ((this.presentationFigure) != null) {\r\n        this.presentationFigure.removeFigureListener(presentationFigureHandler);\r\n        if ((getDrawing()) != null) {\r\n            this.presentationFigure.removeNotify(getDrawing());\r\n        }\r\n    }\r\n    this.presentationFigure = newPresentationFigure;\r\n    if ((this.presentationFigure) != null) {\r\n        this.presentationFigure.addFigureListener(presentationFigureHandler);\r\n        if ((getDrawing()) != null) {\r\n            this.presentationFigure.addNotify(getDrawing());\r\n        }\r\n    }\r\n    // FIXME: We should calculate the layout here.\r\n}'),(689,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2084,'org.jhotdraw.draw.GraphicalCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\n@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        if ((getPresentationFigure()) != null) {\r\n            getPresentationFigure().setAttribute(key, newValue);\r\n        }\r\n        super.setAttribute(key, newValue);\r\n        Object oldValue = attributes.put(key, newValue);\r\n    }\r\n}'),(690,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2085,'org.jhotdraw.draw.GraphicalCompositeFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)',0,'public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}'),(691,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2074,'org.jhotdraw.draw.GraphicalCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Gets an attribute from the figure.\r\n */\r\n@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    if ((getPresentationFigure()) != null) {\r\n        return key.get(getPresentationFigure());\r\n    } else {\r\n        return !(attributes.containsKey(key)) ? key.getDefaultValue() : key.get(attributes);\r\n    }\r\n}'),(692,'Figure that','org.jhotdraw.draw.Figure',174,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2066,'org.jhotdraw.draw.GraphicalCompositeFigure.applyAttributesTo(org.jhotdraw.draw.Figure)',0,'/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}'),(693,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2091,'org.jhotdraw.draw.GraphicalCompositeFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)',0,'protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}'),(694,'DOMInput in','org.jhotdraw.xml.DOMInput',650,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2081,'org.jhotdraw.draw.GraphicalCompositeFigure.readAttributes(org.jhotdraw.xml.DOMInput)',0,'@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    key.basicSet(this, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}'),(695,'DOMInput in','org.jhotdraw.xml.DOMInput',650,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2080,'org.jhotdraw.draw.GraphicalCompositeFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readAttributes(in);\r\n}'),(696,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,188,'org.jhotdraw.draw.GraphicalCompositeFigure',2090,'org.jhotdraw.draw.GraphicalCompositeFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeAttributes(out);\r\n}'),(697,'TranslationDirection dir','org.jhotdraw.draw.TranslationDirection',276,189,'org.jhotdraw.draw.GridConstrainer',2103,'org.jhotdraw.draw.GridConstrainer.constrainPoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)',0,'/**\r\n * Constrains the placement of a point towards a direction.\r\n * <p>\r\n * This method changes the point which is passed as a parameter.\r\n *\r\n * @param p\r\n * 		A point on the drawing.\r\n * @param dir\r\n * 		A direction.\r\n * @return Returns the constrained point.\r\n */\r\nprotected Point2D.Double constrainPoint(Point2D.Double p, TranslationDirection dir) {\r\n    Point2D.Double p0 = constrainPoint(((Point2D.Double) (p.clone())));\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            if ((p0.y) < (p.y)) {\r\n                p.y = p0.y;\r\n            } else\r\n                if ((p0.y) > (p.y)) {\r\n                    p.y = (p0.y) - (height);\r\n                }\r\n\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            if ((p0.y) < (p.y)) {\r\n                p.y = (p0.y) + (height);\r\n            } else\r\n                if ((p0.y) > (p.y)) {\r\n                    p.y = p0.y;\r\n                }\r\n\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            if ((p0.x) < (p.x)) {\r\n                p.x = p0.x;\r\n            } else\r\n                if ((p0.x) > (p.x)) {\r\n                    p.x = (p0.x) - (width);\r\n                }\r\n\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            if ((p0.x) < (p.x)) {\r\n                p.x = (p0.x) + (width);\r\n            } else\r\n                if ((p0.x) > (p.x)) {\r\n                    p.x = p0.x;\r\n                }\r\n\r\n            break;\r\n    }\r\n    return p;\r\n}'),(698,'TranslationDirection dir','org.jhotdraw.draw.TranslationDirection',276,189,'org.jhotdraw.draw.GridConstrainer',2119,'org.jhotdraw.draw.GridConstrainer.translatePoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)',0,'/**\r\n * Moves a point to the closest grid point in a direction.\r\n */\r\npublic Point2D.Double translatePoint(Point2D.Double p, TranslationDirection dir) {\r\n    Point2D.Double p0 = constrainPoint(((Point2D.Double) (p.clone())));\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            p.y = (p0.y) - (height);\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            p.y = (p0.y) + (height);\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            p.x = (p0.x) - (width);\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            p.x = (p0.x) + (width);\r\n            break;\r\n    }\r\n    return p;\r\n}'),(699,'TranslationDirection dir','org.jhotdraw.draw.TranslationDirection',276,189,'org.jhotdraw.draw.GridConstrainer',2105,'org.jhotdraw.draw.GridConstrainer.constrainRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)',0,'/**\r\n * Constrains the placement of a rectangle towards a direction.\r\n * <p>\r\n * This method changes the location of the rectangle which is passed as a\r\n * parameter. This method does not change the size of the rectangle.\r\n *\r\n * @param r\r\n * 		A rectangle on the drawing.\r\n * @param dir\r\n * 		A direction.\r\n * @return Returns the constrained rectangle.\r\n */\r\nprotected Rectangle2D.Double constrainRectangle(Rectangle2D.Double r, TranslationDirection dir) {\r\n    Point2D.Double p0 = new Point2D.Double(r.x, r.y);\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case WEST :\r\n            constrainPoint(p0, dir);\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n            p0.x += r.width;\r\n            constrainPoint(p0, dir);\r\n            p0.x -= r.width;\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n            p0.y += r.height;\r\n            constrainPoint(p0, dir);\r\n            p0.y -= r.height;\r\n            break;\r\n        case SOUTH_EAST :\r\n            p0.y += r.height;\r\n            p0.x += r.width;\r\n            constrainPoint(p0, dir);\r\n            p0.y -= r.height;\r\n            p0.x -= r.width;\r\n            break;\r\n    }\r\n    r.x = p0.x;\r\n    r.y = p0.y;\r\n    return r;\r\n}'),(700,'TranslationDirection dir','org.jhotdraw.draw.TranslationDirection',276,189,'org.jhotdraw.draw.GridConstrainer',2120,'org.jhotdraw.draw.GridConstrainer.translateRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)',0,'public Rectangle2D.Double translateRectangle(Rectangle2D.Double r, TranslationDirection dir) {\r\n    double x = r.x;\r\n    double y = r.y;\r\n    constrainRectangle(r, dir);\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            if (y == (r.y)) {\r\n                r.y -= height;\r\n            }\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            if (y == (r.y)) {\r\n                r.y += height;\r\n            }\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            if (x == (r.x)) {\r\n                r.x -= width;\r\n            }\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            if (x == (r.x)) {\r\n                r.x += width;\r\n            }\r\n            break;\r\n    }\r\n    return r;\r\n}'),(701,'DrawingView view','org.jhotdraw.draw.DrawingView',171,189,'org.jhotdraw.draw.GridConstrainer',2106,'org.jhotdraw.draw.GridConstrainer.draw(java.awt.Graphics2D,org.jhotdraw.draw.DrawingView)',0,'public void draw(Graphics2D g, DrawingView view) {\r\n    if (isVisible) {\r\n        AffineTransform t = view.getDrawingToViewTransform();\r\n        Rectangle viewBounds = g.getClipBounds();\r\n        Rectangle2D.Double bounds = view.viewToDrawing(viewBounds);\r\n        Point2D.Double origin = constrainPoint(new Point2D.Double(bounds.x, bounds.y));\r\n        Point2D.Double point = new Point2D.Double();\r\n        Point2D.Double viewPoint = new Point2D.Double();\r\n        // vertical grid lines are only drawn, if they are at least two\r\n        // pixels apart on the view coordinate system.\r\n        if (((width) * (view.getScaleFactor())) > 2) {\r\n            g.setColor(GridConstrainer.minorColor);\r\n            for (int i = ((int) ((origin.x) / (width))), m = ((int) (((origin.x) + (bounds.width)) / (width))) + 1; i <= m; i++) {\r\n                g.setColor(((i % (majorGridSpacing)) == 0 ? GridConstrainer.majorColor : GridConstrainer.minorColor));\r\n                point.x = (width) * i;\r\n                t.transform(point, viewPoint);\r\n                g.drawLine(((int) (viewPoint.x)), ((int) (viewBounds.y)), ((int) (viewPoint.x)), ((int) ((viewBounds.y) + (viewBounds.height))));\r\n            }\r\n        } else\r\n            if ((((width) * (majorGridSpacing)) * (view.getScaleFactor())) > 2) {\r\n                g.setColor(GridConstrainer.majorColor);\r\n                for (int i = ((int) ((origin.x) / (width))), m = ((int) (((origin.x) + (bounds.width)) / (width))) + 1; i <= m; i++) {\r\n                    if ((i % (majorGridSpacing)) == 0) {\r\n                        point.x = (width) * i;\r\n                        t.transform(point, viewPoint);\r\n                        g.drawLine(((int) (viewPoint.x)), ((int) (viewBounds.y)), ((int) (viewPoint.x)), ((int) ((viewBounds.y) + (viewBounds.height))));\r\n                    }\r\n                }\r\n            }\r\n\r\n        // horizontal grid lines are only drawn, if they are at least two\r\n        // pixels apart on the view coordinate system.\r\n        if (((height) * (view.getScaleFactor())) > 2) {\r\n            g.setColor(GridConstrainer.minorColor);\r\n            for (int i = ((int) ((origin.y) / (height))), m = ((int) (((origin.y) + (bounds.height)) / (height))) + 1; i <= m; i++) {\r\n                g.setColor(((i % (majorGridSpacing)) == 0 ? GridConstrainer.majorColor : GridConstrainer.minorColor));\r\n                point.y = (height) * i;\r\n                t.transform(point, viewPoint);\r\n                g.drawLine(((int) (viewBounds.x)), ((int) (viewPoint.y)), ((int) ((viewBounds.x) + (viewBounds.width))), ((int) (viewPoint.y)));\r\n            }\r\n        } else\r\n            if ((((height) * (majorGridSpacing)) * (view.getScaleFactor())) > 2) {\r\n                g.setColor(GridConstrainer.majorColor);\r\n                for (int i = ((int) ((origin.y) / (height))), m = ((int) (((origin.y) + (bounds.height)) / (height))) + 1; i <= m; i++) {\r\n                    if ((i % (majorGridSpacing)) == 0) {\r\n                        point.y = (height) * i;\r\n                        t.transform(point, viewPoint);\r\n                        g.drawLine(((int) (viewBounds.x)), ((int) (viewPoint.y)), ((int) ((viewBounds.x) + (viewBounds.width))), ((int) (viewPoint.y)));\r\n                    }\r\n                }\r\n            }\r\n\r\n    }\r\n}'),(702,'RotationDirection dir','org.jhotdraw.draw.RotationDirection',243,189,'org.jhotdraw.draw.GridConstrainer',2112,'org.jhotdraw.draw.GridConstrainer.rotateAngle(double,org.jhotdraw.draw.RotationDirection)',0,'public double rotateAngle(double angle, RotationDirection dir) {\r\n    // Check parameters\r\n    if (dir == null) {\r\n        throw new IllegalArgumentException(\"dir must not be null\");\r\n    }\r\n    // Rotate into the specified direction by theta\r\n    angle = constrainAngle(angle);\r\n    switch (dir) {\r\n        case CLOCKWISE :\r\n            angle += theta;\r\n            break;\r\n        case COUNTER_CLOCKWISE :\r\n        default :\r\n            angle -= theta;\r\n            break;\r\n    }\r\n    return angle;\r\n}'),(703,'DrawingView view','org.jhotdraw.draw.DrawingView',171,191,'org.jhotdraw.draw.Handle',2137,'org.jhotdraw.draw.Handle.setView(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Sets the view of the handle.\r\n */\r\npublic void setView(DrawingView view);'),(704,'HandleListener l','org.jhotdraw.draw.HandleListener',194,191,'org.jhotdraw.draw.Handle',2124,'org.jhotdraw.draw.Handle.addHandleListener(org.jhotdraw.draw.HandleListener)',0,'/**\r\n * Adds a listener for this handle.\r\n */\r\npublic void addHandleListener(HandleListener l);'),(705,'HandleListener l','org.jhotdraw.draw.HandleListener',194,191,'org.jhotdraw.draw.Handle',2136,'org.jhotdraw.draw.Handle.removeHandleListener(org.jhotdraw.draw.HandleListener)',0,'/**\r\n * Removes a listener for this handle.\r\n */\r\nvoid removeHandleListener(HandleListener l);'),(706,'Handle handle','org.jhotdraw.draw.Handle',191,191,'org.jhotdraw.draw.Handle',2135,'org.jhotdraw.draw.Handle.isCombinableWith(org.jhotdraw.draw.Handle)',0,'/**\r\n * Returns true, if this handle is combinable with the specified handle.\r\n * This method is used to determine, if multiple handles need to be tracked,\r\n * when more than one figure is selected.\r\n */\r\npublic boolean isCombinableWith(Handle handle);'),(707,'Handle src','org.jhotdraw.draw.Handle',191,193,'org.jhotdraw.draw.HandleEvent',2144,'org.jhotdraw.draw.HandleEvent.-init-(org.jhotdraw.draw.Handle,java.awt.Rectangle)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic HandleEvent(Handle src, Rectangle invalidatedArea) {\r\n    super(src);\r\n    this.invalidatedArea = invalidatedArea;\r\n}'),(708,'HandleEvent e','org.jhotdraw.draw.HandleEvent',193,194,'org.jhotdraw.draw.HandleListener',2147,'org.jhotdraw.draw.HandleListener.areaInvalidated(org.jhotdraw.draw.HandleEvent)',0,'/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(HandleEvent e);'),(709,'HandleEvent e','org.jhotdraw.draw.HandleEvent',193,194,'org.jhotdraw.draw.HandleListener',2148,'org.jhotdraw.draw.HandleListener.handleRequestRemove(org.jhotdraw.draw.HandleEvent)',0,'/**\r\n * Sent when requesting to remove a handle.\r\n */\r\npublic void handleRequestRemove(HandleEvent e);'),(710,'HandleEvent e','org.jhotdraw.draw.HandleEvent',193,194,'org.jhotdraw.draw.HandleListener',2149,'org.jhotdraw.draw.HandleListener.handleRequestSecondaryHandles(org.jhotdraw.draw.HandleEvent)',0,'/**\r\n * Sent when requesting to add secondary handles.\r\n */\r\npublic void handleRequestSecondaryHandles(HandleEvent e);'),(711,'Handle handle','org.jhotdraw.draw.Handle',191,195,'org.jhotdraw.draw.HandleMulticaster',2150,'org.jhotdraw.draw.HandleMulticaster.-init-(org.jhotdraw.draw.Handle)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic HandleMulticaster(Handle handle) {\r\n    this.handles = new LinkedList<Handle>();\r\n    this.handles.add(handle);\r\n}'),(712,'DrawingView view','org.jhotdraw.draw.DrawingView',171,195,'org.jhotdraw.draw.HandleMulticaster',2157,'org.jhotdraw.draw.HandleMulticaster.trackEnd(java.awt.Point,java.awt.Point,int,org.jhotdraw.draw.DrawingView)',0,'public void trackEnd(Point current, Point anchor, int modifiersEx, DrawingView view) {\r\n    for (Handle h : new ReversedList<Handle>(handles)) {\r\n        h.trackEnd(current, anchor, modifiersEx);\r\n    }\r\n    view.getDrawing().fireUndoableEditHappened(edit);\r\n}'),(713,'DrawingView view','org.jhotdraw.draw.DrawingView',171,195,'org.jhotdraw.draw.HandleMulticaster',2158,'org.jhotdraw.draw.HandleMulticaster.trackStart(java.awt.Point,int,org.jhotdraw.draw.DrawingView)',0,'public void trackStart(Point anchor, int modifiersEx, DrawingView view) {\r\n    view.getDrawing().fireUndoableEditHappened((edit = new CompositeEdit()));\r\n    for (Handle h : handles) {\r\n        h.trackStart(anchor, modifiersEx);\r\n    }\r\n}'),(714,'DrawingView view','org.jhotdraw.draw.DrawingView',171,195,'org.jhotdraw.draw.HandleMulticaster',2156,'org.jhotdraw.draw.HandleMulticaster.trackDoubleClick(java.awt.Point,int,org.jhotdraw.draw.DrawingView)',0,'public void trackDoubleClick(Point p, int modifiersEx, DrawingView view) {\r\n    for (Handle h : handles) {\r\n        h.trackDoubleClick(p, modifiersEx);\r\n    }\r\n}'),(715,'DrawingView view','org.jhotdraw.draw.DrawingView',171,195,'org.jhotdraw.draw.HandleMulticaster',2159,'org.jhotdraw.draw.HandleMulticaster.trackStep(java.awt.Point,java.awt.Point,int,org.jhotdraw.draw.DrawingView)',0,'public void trackStep(Point anchor, Point lead, int modifiersEx, DrawingView view) {\r\n    for (Handle h : handles) {\r\n        h.trackStep(anchor, lead, modifiersEx);\r\n    }\r\n}'),(716,'Handle handle','org.jhotdraw.draw.Handle',191,196,'org.jhotdraw.draw.HandleTracker',2160,'org.jhotdraw.draw.HandleTracker.setHandles(org.jhotdraw.draw.Handle,java.util.Collection)',0,'public void setHandles(Handle handle, Collection<Handle> compatibleHandles);'),(717,'CompositeFigure compositeFigure','org.jhotdraw.draw.CompositeFigure',136,197,'org.jhotdraw.draw.HorizontalLayouter',2162,'org.jhotdraw.draw.HorizontalLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'public Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(compositeFigure);\r\n    Rectangle2D.Double layoutBounds = new Rectangle2D.Double(anchor.x, anchor.y, 0, 0);\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Dimension2DDouble preferredSize = child.getPreferredSize();\r\n            Insets2D.Double ins = getInsets(child);\r\n            layoutBounds.height = Math.max(layoutBounds.height, (((preferredSize.height) + (ins.top)) + (ins.bottom)));\r\n            layoutBounds.width += ((preferredSize.width) + (ins.left)) + (ins.right);\r\n        }\r\n    }\r\n    layoutBounds.width += (layoutInsets.left) + (layoutInsets.right);\r\n    layoutBounds.height += (layoutInsets.top) + (layoutInsets.bottom);\r\n    return layoutBounds;\r\n}'),(718,'CompositeFigure compositeFigure','org.jhotdraw.draw.CompositeFigure',136,197,'org.jhotdraw.draw.HorizontalLayouter',2163,'org.jhotdraw.draw.HorizontalLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'public Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(compositeFigure);\r\n    AttributeKeys.Alignment compositeAlignment = AttributeKeys.COMPOSITE_ALIGNMENT.get(compositeFigure);\r\n    Rectangle2D.Double layoutBounds = calculateLayout(compositeFigure, anchor, lead);\r\n    double x = (layoutBounds.x) + (layoutInsets.left);\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Insets2D.Double insets = getInsets(child);\r\n            double width = child.getPreferredSize().width;\r\n            double height = child.getPreferredSize().height;\r\n            // --\r\n            switch (compositeAlignment) {\r\n                case LEADING :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (insets.top))), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutInsets.top)) + (insets.top)) + height)));\r\n                    break;\r\n                case TRAILING :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom)) - height)), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom))));\r\n                    break;\r\n                case CENTER :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (((layoutBounds.height) - height) / 2.0))), new Point2D.Double(((x + (insets.left)) + width), (((layoutBounds.y) + (layoutInsets.top)) + (((layoutBounds.height) + height) / 2.0))));\r\n                    break;\r\n                case BLOCK :\r\n                default :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (insets.top))), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom))));\r\n                    break;\r\n            }\r\n            // ---\r\n            x += (width + (insets.left)) + (insets.right);\r\n        }\r\n    }\r\n    return layoutBounds;\r\n}'),(719,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,198,'org.jhotdraw.draw.ImageFigure',2173,'org.jhotdraw.draw.ImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}'),(720,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,198,'org.jhotdraw.draw.ImageFigure',2173,'org.jhotdraw.draw.ImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}'),(721,'Connector c','org.jhotdraw.draw.Connector',145,198,'org.jhotdraw.draw.ImageFigure',2172,'org.jhotdraw.draw.ImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}'),(722,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,198,'org.jhotdraw.draw.ImageFigure',2172,'org.jhotdraw.draw.ImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}'),(723,'DOMInput in','org.jhotdraw.xml.DOMInput',650,198,'org.jhotdraw.draw.ImageFigure',2182,'org.jhotdraw.draw.ImageFigure.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    if ((in.getElementCount(\"imageData\")) > 0) {\r\n        in.openElement(\"imageData\");\r\n        String base64Data = in.getText();\r\n        if (base64Data != null) {\r\n            setImageData(Base64.decode(base64Data));\r\n        }\r\n        in.closeElement();\r\n    }\r\n}'),(724,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,198,'org.jhotdraw.draw.ImageFigure',2189,'org.jhotdraw.draw.ImageFigure.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    if ((getImageData()) != null) {\r\n        out.openElement(\"imageData\");\r\n        out.addText(Base64.encodeBytes(getImageData()));\r\n        out.closeElement();\r\n    }\r\n}'),(725,'ImageHolderFigure prototype','org.jhotdraw.draw.ImageHolderFigure',199,200,'org.jhotdraw.draw.ImageInputFormat',2197,'org.jhotdraw.draw.ImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure)',0,'/**\r\n * Creates a new image output format for Portable Network Graphics PNG.\r\n */\r\npublic ImageInputFormat(ImageHolderFigure prototype) {\r\n    this(prototype, \"PNG\", \"Portable Network Graphics (PNG)\", \"png\", BufferedImage.TYPE_INT_ARGB);\r\n}'),(726,'ImageHolderFigure prototype','org.jhotdraw.draw.ImageHolderFigure',199,200,'org.jhotdraw.draw.ImageInputFormat',2198,'org.jhotdraw.draw.ImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure,java.lang.String,java.lang.String,java.lang.String,int)',0,'/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * 		The format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param bufferedImageType\r\n * 		The BufferedImage type used to produce the image.\r\n * 		The value of this parameter must match with the format name.\r\n */\r\npublic ImageInputFormat(ImageHolderFigure prototype, String formatName, String description, String fileExtension, int bufferedImageType) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.imageType = bufferedImageType;\r\n}'),(727,'Drawing drawing','org.jhotdraw.draw.Drawing',168,200,'org.jhotdraw.draw.ImageInputFormat',2206,'org.jhotdraw.draw.ImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n    figure.loadImage(file);\r\n    figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAdd(figure);\r\n}'),(728,'Drawing drawing','org.jhotdraw.draw.Drawing',168,200,'org.jhotdraw.draw.ImageInputFormat',2205,'org.jhotdraw.draw.ImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(729,'Drawing drawing','org.jhotdraw.draw.Drawing',168,200,'org.jhotdraw.draw.ImageInputFormat',2207,'org.jhotdraw.draw.ImageInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAdd(createImageHolder(in));\r\n}'),(730,'Drawing drawing','org.jhotdraw.draw.Drawing',168,200,'org.jhotdraw.draw.ImageInputFormat',2204,'org.jhotdraw.draw.ImageInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    // 1. Try to read the image using the Java Image Flavor\r\n    // This causes a NoSuchMethodError to be thrown on Mac OS X 10.5.2.\r\n    if (t.isDataFlavorSupported(DataFlavor.imageFlavor)) {\r\n        try {\r\n            Image img = ((Image) (t.getTransferData(DataFlavor.imageFlavor)));\r\n            img = Images.toBufferedImage(img);\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(((BufferedImage) (img)));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            LinkedList<Figure> list = new LinkedList<Figure>();\r\n            list.add(figure);\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.addAll(list);\r\n            return;\r\n        } catch (Throwable e) {\r\n            // no need to do anything here, because we try to read the\r\n            // image/png below.\r\n            // e.printStackTrace();\r\n        }\r\n    }\r\n    // 2. Try to read the image using our own image/png flavor.\r\n    if (t.isDataFlavorSupported(ImageTransferable.IMAGE_PNG_FLAVOR)) {\r\n        try {\r\n            InputStream in = ((InputStream) (t.getTransferData(ImageTransferable.IMAGE_PNG_FLAVOR)));\r\n            Image img = ImageIO.read(in);\r\n            img = Images.toBufferedImage(img);\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(((BufferedImage) (img)));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            LinkedList<Figure> list = new LinkedList<Figure>();\r\n            list.add(figure);\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.addAll(list);\r\n        } catch (Throwable e) {\r\n            e.printStackTrace();\r\n            IOException ex = new IOException(\"Couldnt import image as image/png flavor\");\r\n            ex.initCause(e);\r\n            throw ex;\r\n        }\r\n    } else {\r\n        throw new IOException(\"Couldnt import image.\");\r\n    }\r\n}'),(731,'Drawing drawing','org.jhotdraw.draw.Drawing',168,201,'org.jhotdraw.draw.ImageOutputFormat',2217,'org.jhotdraw.draw.ImageOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Writes the drawing to the specified file.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = null;\r\n    try {\r\n        out = new BufferedOutputStream(new FileOutputStream(file));\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(732,'Drawing drawing','org.jhotdraw.draw.Drawing',168,201,'org.jhotdraw.draw.ImageOutputFormat',2218,'org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Writes the drawing to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing, drawing.getChildren(), null, null);\r\n}'),(733,'Drawing drawing','org.jhotdraw.draw.Drawing',168,201,'org.jhotdraw.draw.ImageOutputFormat',2219,'org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.awt.geom.AffineTransform,java.awt.Dimension)',0,'/**\r\n * Writes the drawing to the specified output stream.\r\n * This method applies the specified transform to the drawing, and draws\r\n * it on an image of the specified size.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    write(out, drawing, drawing.getChildren(), drawingTransform, imageSize);\r\n}'),(734,'Drawing drawing','org.jhotdraw.draw.Drawing',168,201,'org.jhotdraw.draw.ImageOutputFormat',2210,'org.jhotdraw.draw.ImageOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)',0,'/**\r\n * Writes the drawing to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    return new ImageTransferable(toImage(drawing, figures, scaleFactor, true));\r\n}'),(735,'Drawing drawing','org.jhotdraw.draw.Drawing',168,201,'org.jhotdraw.draw.ImageOutputFormat',2220,'org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List)',0,'/**\r\n * Writes the figures to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures) throws IOException {\r\n    write(out, drawing, figures, null, null);\r\n}'),(736,'Drawing drawing','org.jhotdraw.draw.Drawing',168,201,'org.jhotdraw.draw.ImageOutputFormat',2221,'org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)',0,'/**\r\n * Writes the figures to the specified output stream.\r\n * This method applies the specified transform to the drawing, and draws\r\n * it on an image of the specified size.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    BufferedImage img;\r\n    if ((drawingTransform == null) || (imageSize == null)) {\r\n        img = toImage(drawing, figures, 1.0, false);\r\n    } else {\r\n        img = toImage(drawing, figures, drawingTransform, imageSize);\r\n    }\r\n    ImageIO.write(img, formatName, out);\r\n    img.flush();\r\n}'),(737,'Drawing drawing','org.jhotdraw.draw.Drawing',168,201,'org.jhotdraw.draw.ImageOutputFormat',2215,'org.jhotdraw.draw.ImageOutputFormat.toImage(org.jhotdraw.draw.Drawing,java.util.List,double,boolean)',0,'/**\r\n * Creates a BufferedImage from the specified list of figures.\r\n * <p>\r\n * The images are drawn using the specified scale factor. If some figures\r\n * have a drawing area located at negative coordinates, then the drawing\r\n * coordinates are translated, so that all figures are visible on the\r\n * image.\r\n *\r\n * @param drawing\r\n * 		The drawing.\r\n * @param figures\r\n * 		A list of figures of the drawing.\r\n * @param scaleFactor\r\n * 		The scale factor used when drawing the figures.\r\n * @param clipToFigures\r\n * 		If this is true, the image is clipped to the figures.\r\n * 		If this is false, the image includes the drawing area,\r\n */\r\npublic BufferedImage toImage(Drawing drawing, List<Figure> figures, double scaleFactor, boolean clipToFigures) {\r\n    // Determine the draw bounds of the figures\r\n    Rectangle2D.Double drawBounds = null;\r\n    for (Figure f : figures) {\r\n        if (drawBounds == null) {\r\n            drawBounds = f.getDrawingArea();\r\n        } else {\r\n            drawBounds.add(f.getDrawingArea());\r\n        }\r\n    }\r\n    if (clipToFigures) {\r\n        AffineTransform transform = new AffineTransform();\r\n        transform.translate(((-(drawBounds.x)) * scaleFactor), ((-(drawBounds.y)) * scaleFactor));\r\n        transform.scale(scaleFactor, scaleFactor);\r\n        return toImage(drawing, figures, transform, new Dimension(((int) ((drawBounds.width) * scaleFactor)), ((int) ((drawBounds.height) * scaleFactor))));\r\n    } else {\r\n        AffineTransform transform = new AffineTransform();\r\n        if ((drawBounds.x) < 0) {\r\n            transform.translate(((-(drawBounds.x)) * scaleFactor), 0);\r\n        }\r\n        if ((drawBounds.y) < 0) {\r\n            transform.translate(0, ((-(drawBounds.y)) * scaleFactor));\r\n        }\r\n        transform.scale(scaleFactor, scaleFactor);\r\n        return toImage(drawing, figures, transform, new Dimension(((int) (((Math.max(0, drawBounds.x)) + (drawBounds.width)) * scaleFactor)), ((int) (((Math.max(0, drawBounds.y)) + (drawBounds.height)) * scaleFactor))));\r\n    }\r\n}'),(738,'Drawing drawing','org.jhotdraw.draw.Drawing',168,201,'org.jhotdraw.draw.ImageOutputFormat',2216,'org.jhotdraw.draw.ImageOutputFormat.toImage(org.jhotdraw.draw.Drawing,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)',0,'/**\r\n * Creates a BufferedImage from the specified list of figures.\r\n *\r\n * @param drawing\r\n * 		The drawing.\r\n * @param figures\r\n * 		A list of figures of the drawing.\r\n * @param transform\r\n * 		The AffineTransform to be used when drawing\r\n * 		the figures.\r\n * @param imageSize\r\n * 		The width and height of the image.\r\n */\r\npublic BufferedImage toImage(Drawing drawing, List<Figure> figures, AffineTransform transform, Dimension imageSize) {\r\n    // Create the buffered image and clear it\r\n    Color background = AttributeKeys.CANVAS_FILL_COLOR.get(drawing);\r\n    double opacity = AttributeKeys.CANVAS_FILL_OPACITY.get(drawing);\r\n    if (background == null) {\r\n        background = new Color(255, 255, 255, ((int) (255 * opacity)));\r\n    } else {\r\n        background = new Color(background.getRed(), background.getGreen(), background.getBlue(), ((int) ((background.getAlpha()) * opacity)));\r\n    }\r\n    BufferedImage buf = new BufferedImage(imageSize.width, imageSize.height, ((background.getAlpha()) == 255 ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB));\r\n    Graphics2D g = buf.createGraphics();\r\n    // Clear the buffered image with the background color\r\n    Composite savedComposite = g.getComposite();\r\n    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));\r\n    g.setColor(background);\r\n    g.fillRect(0, 0, buf.getWidth(), buf.getHeight());\r\n    g.setComposite(savedComposite);\r\n    // Draw the figures onto the buffered image\r\n    setRenderingHints(g);\r\n    g.transform(transform);\r\n    for (Figure f : figures) {\r\n        f.draw(g);\r\n    }\r\n    g.dispose();\r\n    // Convert the image, if it does not have the specified image type\r\n    if ((imageType) != (BufferedImage.TYPE_INT_ARGB)) {\r\n        BufferedImage buf2 = new BufferedImage(buf.getWidth(), buf.getHeight(), imageType);\r\n        g = buf2.createGraphics();\r\n        setRenderingHints(g);\r\n        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));\r\n        g.drawImage(buf, 0, 0, null);\r\n        g.dispose();\r\n        buf.flush();\r\n        buf = buf2;\r\n    }\r\n    return buf;\r\n}'),(739,'ImageHolderFigure prototype','org.jhotdraw.draw.ImageHolderFigure',199,202,'org.jhotdraw.draw.ImageTool',2222,'org.jhotdraw.draw.ImageTool.-init-(org.jhotdraw.draw.ImageHolderFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ImageTool(ImageHolderFigure prototype) {\r\n    super(prototype);\r\n}'),(740,'ImageHolderFigure prototype','org.jhotdraw.draw.ImageHolderFigure',199,202,'org.jhotdraw.draw.ImageTool',2223,'org.jhotdraw.draw.ImageTool.-init-(org.jhotdraw.draw.ImageHolderFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ImageTool(ImageHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}'),(741,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,202,'org.jhotdraw.draw.ImageTool',2225,'org.jhotdraw.draw.ImageTool.activate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    if ((workerThread) != null) {\r\n        try {\r\n            workerThread.join();\r\n        } catch (InterruptedException ex) {\r\n            // ignore\r\n        }\r\n    }\r\n    final File file;\r\n    if (useFileDialog) {\r\n        getFileDialog().setVisible(true);\r\n        if ((getFileDialog().getFile()) != null) {\r\n            file = new File(getFileDialog().getDirectory(), getFileDialog().getFile());\r\n        } else {\r\n            file = null;\r\n        }\r\n    } else {\r\n        if ((getFileChooser().showOpenDialog(getView().getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n            file = getFileChooser().getSelectedFile();\r\n        } else {\r\n            file = null;\r\n        }\r\n    }\r\n    if (file != null) {\r\n        final ImageHolderFigure loaderFigure = ((ImageHolderFigure) (prototype.clone()));\r\n        Worker worker = new Worker() {\r\n            public Object construct() {\r\n                try {\r\n                    ((ImageHolderFigure) (loaderFigure)).loadImage(file);\r\n                } catch (Throwable t) {\r\n                    return t;\r\n                }\r\n                return null;\r\n            }\r\n\r\n            public void finished(Object value) {\r\n                if (value instanceof Throwable) {\r\n                    Throwable t = ((Throwable) (value));\r\n                    JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                    getDrawing().remove(createdFigure);\r\n                    fireToolDone();\r\n                } else {\r\n                    try {\r\n                        if ((createdFigure) == null) {\r\n                            ((ImageHolderFigure) (prototype)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                        } else {\r\n                            ((ImageHolderFigure) (createdFigure)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                        }\r\n                    } catch (IOException ex) {\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        workerThread = new Thread(worker);\r\n        workerThread.start();\r\n    } else {\r\n        // getDrawing().remove(createdFigure);\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    }\r\n}'),(742,'Drawing drawing','org.jhotdraw.draw.Drawing',168,203,'org.jhotdraw.draw.InputFormat',2234,'org.jhotdraw.draw.InputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Reads figures from a file and replaces the children of the drawing\r\n * with them.\r\n * <p>\r\n * This is a convenience method for calling read(File,Drawing,true).\r\n *\r\n * @param file\r\n * 		The file.\r\n * @param drawing\r\n * 		The drawing.\r\n */\r\npublic void read(File file, Drawing drawing) throws IOException;'),(743,'Drawing drawing','org.jhotdraw.draw.Drawing',168,203,'org.jhotdraw.draw.InputFormat',2235,'org.jhotdraw.draw.InputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)',0,'/**\r\n * Reads figures from a file and adds them to the specified drawing.\r\n *\r\n * @param file\r\n * 		The file.\r\n * @param drawing\r\n * 		The drawing.\r\n * @param replace\r\n * 		Set this to true, if the contents of the file replaces the\r\n * 		contents of the drawing (for example, when loading a drawing from a file).\r\n * 		Set this to false, to add the contents of the file to the drawing (for\r\n * 		example, when the file has been dropped into the drawing view).\r\n */\r\npublic void read(File file, Drawing drawing, boolean replace) throws IOException;'),(744,'Drawing drawing','org.jhotdraw.draw.Drawing',168,203,'org.jhotdraw.draw.InputFormat',2236,'org.jhotdraw.draw.InputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'/**\r\n * Reads figures from a file and adds them to the specified drawing.\r\n *\r\n * @param in\r\n * 		The input stream.\r\n * @param drawing\r\n * 		The drawing.\r\n * @param replace\r\n * 		Set this to true, if the contents of the stream replaces the\r\n * 		contents of the drawing (for example, when loading a drawing from a stream).\r\n * 		Set this to false, to add the contents of the file to the drawing (for\r\n * 		example, when the stream has been dropped into the drawing view).\r\n */\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException;'),(745,'Drawing drawing','org.jhotdraw.draw.Drawing',168,203,'org.jhotdraw.draw.InputFormat',2233,'org.jhotdraw.draw.InputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)',0,'/**\r\n * Reads figures from the specified Transferable and adds them to the\r\n * specified drawing.\r\n *\r\n * @param t\r\n * 		The Transferable.\r\n * @param drawing\r\n * 		The drawing.\r\n * @param replace\r\n * 		Set this to true, if the contents of the transferable\r\n * 		replaces the contents of the drawing (for example, when loading a drawing\r\n * 		from a transferable). Set this to false, to add the contents of the\r\n * 		transferable to the drawing (for example, when the transferable has been\r\n * 		dropped or pasted into the drawing view).\r\n */\r\npublic void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException;'),(746,'TextHolderFigure target','org.jhotdraw.draw.TextHolderFigure',259,204,'org.jhotdraw.draw.LabelFigure',2249,'org.jhotdraw.draw.LabelFigure.setLabelFor(org.jhotdraw.draw.TextHolderFigure)',0,'public void setLabelFor(TextHolderFigure target) {\r\n    if ((this.target) != null) {\r\n        this.target.removeFigureListener(this);\r\n    }\r\n    this.target = target;\r\n    if ((this.target) != null) {\r\n        this.target.addFigureListener(this);\r\n    }\r\n}'),(747,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,204,'org.jhotdraw.draw.LabelFigure',2239,'org.jhotdraw.draw.LabelFigure.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'public void areaInvalidated(FigureEvent e) {\r\n}'),(748,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,204,'org.jhotdraw.draw.LabelFigure',2240,'org.jhotdraw.draw.LabelFigure.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'public void attributeChanged(FigureEvent e) {\r\n}'),(749,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,204,'org.jhotdraw.draw.LabelFigure',2241,'org.jhotdraw.draw.LabelFigure.figureAdded(org.jhotdraw.draw.FigureEvent)',0,'public void figureAdded(FigureEvent e) {\r\n}'),(750,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,204,'org.jhotdraw.draw.LabelFigure',2242,'org.jhotdraw.draw.LabelFigure.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureChanged(FigureEvent e) {\r\n}'),(751,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,204,'org.jhotdraw.draw.LabelFigure',2244,'org.jhotdraw.draw.LabelFigure.figureRemoved(org.jhotdraw.draw.FigureEvent)',0,'public void figureRemoved(FigureEvent e) {\r\n    if ((e.getFigure()) == (target)) {\r\n        target.removeFigureListener(this);\r\n        target = null;\r\n    }\r\n}'),(752,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,204,'org.jhotdraw.draw.LabelFigure',2245,'org.jhotdraw.draw.LabelFigure.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'public void figureRequestRemove(FigureEvent e) {\r\n}'),(753,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,204,'org.jhotdraw.draw.LabelFigure',2243,'org.jhotdraw.draw.LabelFigure.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)',0,'public void figureHandlesChanged(FigureEvent e) {\r\n}'),(754,'LabeledLineConnectionFigure owner','org.jhotdraw.draw.LabeledLineConnectionFigure',206,205,'org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler',2288,'org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.-init-(org.jhotdraw.draw.LabeledLineConnectionFigure)',0,'private ChildHandler(LabeledLineConnectionFigure owner) {\r\n    this.owner = owner;\r\n}'),(755,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,205,'org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler',2291,'org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    owner.remove(e.getFigure());\r\n}'),(756,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,205,'org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler',2290,'org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.willChange();\r\n        owner.fireFigureChanged(e);\r\n        owner.changed();\r\n    }\r\n}'),(757,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,205,'org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler',2289,'org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.fireAreaInvalidated(e.getInvalidatedArea());\r\n    }\r\n}'),(758,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2283,'org.jhotdraw.draw.LabeledLineConnectionFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'// ATTRIBUTES\r\n/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    if (isAttributeEnabled(key)) {\r\n        if ((children) != null) {\r\n            for (Figure child : children) {\r\n                key.basicSet(child, newValue);\r\n            }\r\n        }\r\n    }\r\n}'),(759,'Figure figure','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2253,'org.jhotdraw.draw.LabeledLineConnectionFigure.add(org.jhotdraw.draw.Figure)',0,'public boolean add(Figure figure) {\r\n    basicAdd(figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n    return true;\r\n}'),(760,'Figure figure','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2252,'org.jhotdraw.draw.LabeledLineConnectionFigure.add(int,org.jhotdraw.draw.Figure)',0,'public void add(int index, Figure figure) {\r\n    basicAdd(index, figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n}'),(761,'Figure figure','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2257,'org.jhotdraw.draw.LabeledLineConnectionFigure.basicAdd(org.jhotdraw.draw.Figure)',0,'public void basicAdd(Figure figure) {\r\n    basicAdd(children.size(), figure);\r\n}'),(762,'Figure figure','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2256,'org.jhotdraw.draw.LabeledLineConnectionFigure.basicAdd(int,org.jhotdraw.draw.Figure)',0,'public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    figure.addFigureListener(childHandler);\r\n    invalidate();\r\n}'),(763,'final Figure figure','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2278,'org.jhotdraw.draw.LabeledLineConnectionFigure.remove(org.jhotdraw.draw.Figure)',0,'public boolean remove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index == (-1)) {\r\n        return false;\r\n    } else {\r\n        willChange();\r\n        basicRemoveChild(index);\r\n        if ((getDrawing()) != null) {\r\n            figure.removeNotify(getDrawing());\r\n        }\r\n        changed();\r\n        return true;\r\n    }\r\n}'),(764,'final Figure figure','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2258,'org.jhotdraw.draw.LabeledLineConnectionFigure.basicRemove(org.jhotdraw.draw.Figure)',0,'public int basicRemove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index != (-1)) {\r\n        basicRemoveChild(index);\r\n    }\r\n    return index;\r\n}'),(765,'Layouter newLayouter','org.jhotdraw.draw.Layouter',207,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2284,'org.jhotdraw.draw.LabeledLineConnectionFigure.setLayouter(org.jhotdraw.draw.Layouter)',0,'public void setLayouter(Layouter newLayouter) {\r\n    this.layouter = newLayouter;\r\n}'),(766,'Drawing drawing','org.jhotdraw.draw.Drawing',168,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2255,'org.jhotdraw.draw.LabeledLineConnectionFigure.addNotify(org.jhotdraw.draw.Drawing)',0,'public void addNotify(Drawing drawing) {\r\n    for (Figure child : new LinkedList<Figure>(children)) {\r\n        child.addNotify(drawing);\r\n    }\r\n    super.addNotify(drawing);\r\n}'),(767,'Drawing drawing','org.jhotdraw.draw.Drawing',168,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2282,'org.jhotdraw.draw.LabeledLineConnectionFigure.removeNotify(org.jhotdraw.draw.Drawing)',0,'public void removeNotify(Drawing drawing) {\r\n    for (Figure child : new LinkedList<Figure>(children)) {\r\n        child.removeNotify(drawing);\r\n    }\r\n    super.removeNotify(drawing);\r\n}'),(768,'CompositeFigureListener listener','org.jhotdraw.draw.CompositeFigureListener',138,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2281,'org.jhotdraw.draw.LabeledLineConnectionFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)',0,'public void removeCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.remove(CompositeFigureListener.class, listener);\r\n}'),(769,'CompositeFigureListener listener','org.jhotdraw.draw.CompositeFigureListener',138,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2254,'org.jhotdraw.draw.LabeledLineConnectionFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)',0,'public void addCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.add(CompositeFigureListener.class, listener);\r\n}'),(770,'Figure f','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2266,'org.jhotdraw.draw.LabeledLineConnectionFigure.fireFigureAdded(org.jhotdraw.draw.Figure,int)',0,'/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureAdded(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureAdded(event);\r\n        }\r\n    }\r\n}'),(771,'Figure f','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2267,'org.jhotdraw.draw.LabeledLineConnectionFigure.fireFigureRemoved(org.jhotdraw.draw.Figure,int)',0,'/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureRemoved(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureRemoved(event);\r\n        }\r\n    }\r\n}'),(772,'Figure f','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2263,'org.jhotdraw.draw.LabeledLineConnectionFigure.contains(org.jhotdraw.draw.Figure)',0,'public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}'),(773,'Figure child','org.jhotdraw.draw.Figure',174,206,'org.jhotdraw.draw.LabeledLineConnectionFigure',2274,'org.jhotdraw.draw.LabeledLineConnectionFigure.indexOf(org.jhotdraw.draw.Figure)',0,'public int indexOf(Figure child) {\r\n    return children.indexOf(child);\r\n}'),(774,'CompositeFigure compositeFigure','org.jhotdraw.draw.CompositeFigure',136,207,'org.jhotdraw.draw.Layouter',2293,'org.jhotdraw.draw.Layouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/* extends Serializable, Storable */\r\n/**\r\n * Calculate the layout for the figure and all its subelements. The\r\n * layout is not actually performed but just its dimensions are calculated.\r\n *\r\n * @param anchor\r\n * 		start point for the layout\r\n * @param lead\r\n * 		minimum lead point for the layout\r\n */\r\npublic Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead);'),(775,'CompositeFigure compositeFigure','org.jhotdraw.draw.CompositeFigure',136,207,'org.jhotdraw.draw.Layouter',2294,'org.jhotdraw.draw.Layouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/**\r\n * Method which lays out a figure. It is called by the figure\r\n * if a layout task is to be performed. Implementing classes\r\n * specify a certain layout algorithm in this method.\r\n *\r\n * @param anchor\r\n * 		start point for the layout\r\n * @param lead\r\n * 		minimum lead point for the layout\r\n */\r\npublic Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead);'),(776,'LineConnectionFigure owner','org.jhotdraw.draw.LineConnectionFigure',209,208,'org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler',2332,'org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.-init-(org.jhotdraw.draw.LineConnectionFigure)',0,'private ConnectionHandler(LineConnectionFigure owner) {\r\n    this.owner = owner;\r\n}'),(777,'FigureEvent evt','org.jhotdraw.draw.FigureEvent',176,208,'org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler',2334,'org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureRemoved(FigureEvent evt) {\r\n    // The commented lines below must stay commented out.\r\n    // This is because, we must not set our connectors to null,\r\n    // in order to support reconnection using redo.\r\n    /* if (evt.getFigure() == owner.getStartFigure()\n    || evt.getFigure() == owner.getEndFigure()) {\n    owner.setStartConnector(null);\n    owner.setEndConnector(null);\n    }\n     */\r\n    owner.fireFigureRequestRemove();\r\n}'),(778,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,208,'org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler',2333,'org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (((e.getSource()) == (owner.getStartFigure())) || ((e.getSource()) == (owner.getEndFigure()))) {\r\n        owner.willChange();\r\n        owner.updateConnection();\r\n        owner.changed();\r\n    }\r\n}'),(779,'Connector start','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2300,'org.jhotdraw.draw.LineConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'public boolean canConnect(Connector start, Connector end) {\r\n    return (start.getOwner().canConnect()) && (end.getOwner().canConnect());\r\n}'),(780,'Connector end','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2300,'org.jhotdraw.draw.LineConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'public boolean canConnect(Connector start, Connector end) {\r\n    return (start.getOwner().canConnect()) && (end.getOwner().canConnect());\r\n}'),(781,'Connector newEnd','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2319,'org.jhotdraw.draw.LineConnectionFigure.setEndConnector(org.jhotdraw.draw.Connector)',0,'public void setEndConnector(Connector newEnd) {\r\n    if (newEnd != (endConnector)) {\r\n        if ((endConnector) != null) {\r\n            getEndFigure().removeFigureListener(connectionHandler);\r\n            if ((getStartFigure()) != null) {\r\n                if ((getDrawing()) != null) {\r\n                    handleDisconnect(getStartConnector(), getEndConnector());\r\n                }\r\n            }\r\n        }\r\n        endConnector = newEnd;\r\n        if ((endConnector) != null) {\r\n            getEndFigure().addFigureListener(connectionHandler);\r\n            if (((getStartFigure()) != null) && ((getEndFigure()) != null)) {\r\n                if ((getDrawing()) != null) {\r\n                    handleConnect(getStartConnector(), getEndConnector());\r\n                    updateConnection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'),(782,'Connector newStart','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2324,'org.jhotdraw.draw.LineConnectionFigure.setStartConnector(org.jhotdraw.draw.Connector)',0,'public void setStartConnector(Connector newStart) {\r\n    if (newStart != (startConnector)) {\r\n        if ((startConnector) != null) {\r\n            getStartFigure().removeFigureListener(connectionHandler);\r\n            if ((getEndFigure()) != null) {\r\n                handleDisconnect(getStartConnector(), getEndConnector());\r\n            }\r\n        }\r\n        startConnector = newStart;\r\n        if ((startConnector) != null) {\r\n            getStartFigure().addFigureListener(connectionHandler);\r\n            if (((getStartFigure()) != null) && ((getEndFigure()) != null)) {\r\n                handleConnect(getStartConnector(), getEndConnector());\r\n                updateConnection();\r\n            }\r\n        }\r\n    }\r\n}'),(783,'Drawing drawing','org.jhotdraw.draw.Drawing',168,209,'org.jhotdraw.draw.LineConnectionFigure',2297,'org.jhotdraw.draw.LineConnectionFigure.addNotify(org.jhotdraw.draw.Drawing)',0,'// COMPOSITE FIGURES\r\n// LAYOUT\r\n/* public Liner getBezierPathLayouter() {\nreturn (Liner) getAttribute(BEZIER_PATH_LAYOUTER);\n}\npublic void setBezierPathLayouter(Liner newValue) {\nsetAttribute(BEZIER_PATH_LAYOUTER, newValue);\n}\n/**\nLays out the connection. This is called when the connection\nitself changes. By default the connection is recalculated\n/\npublic void layoutConnection() {\nif (getStartConnector() != null && getEndConnector() != null) {\nwillChange();\nLiner bpl = getBezierPathLayouter();\nif (bpl != null) {\nbpl.lineout(this);\n} else {\nif (getStartConnector() != null) {\nPoint2D.Double start = getStartConnector().findStart(this);\nif(start != null) {\nbasicSetStartPoint(start);\n}\n}\nif (getEndConnector() != null) {\nPoint2D.Double end = getEndConnector().findEnd(this);\n\nif(end != null) {\nbasicSetEndPoint(end);\n}\n}\n}\nchanged();\n}\n}\n */\r\n// CLONING\r\n// EVENT HANDLING\r\n/**\r\n * This method is invoked, when the Figure is being removed from a Drawing.\r\n * This method invokes handleConnect, if the Figure is connected.\r\n *\r\n * @see #handleConnect\r\n */\r\n@Override\r\npublic void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    if (((getStartConnector()) != null) && ((getEndConnector()) != null)) {\r\n        handleConnect(getStartConnector(), getEndConnector());\r\n        updateConnection();\r\n    }\r\n}'),(784,'Drawing drawing','org.jhotdraw.draw.Drawing',168,209,'org.jhotdraw.draw.LineConnectionFigure',2317,'org.jhotdraw.draw.LineConnectionFigure.removeNotify(org.jhotdraw.draw.Drawing)',0,'/**\r\n * This method is invoked, when the Figure is being removed from a Drawing.\r\n * This method invokes handleDisconnect, if the Figure is connected.\r\n *\r\n * @see #handleDisconnect\r\n */\r\n@Override\r\npublic void removeNotify(Drawing drawing) {\r\n    if (((getStartConnector()) != null) && ((getEndConnector()) != null)) {\r\n        handleDisconnect(getStartConnector(), getEndConnector());\r\n    }\r\n    // Note: we do not set the connectors to null here, because we\r\n    // need them when we are added back to a drawing again. For example,\r\n    // when an undo is performed, after the LineConnection has been\r\n    // deleted.\r\n    /* setStartConnector(null);\n    setEndConnector(null);\n     */\r\n    super.removeNotify(drawing);\r\n}'),(785,'Connector start','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2310,'org.jhotdraw.draw.LineConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is removed from a Drawing, this method is\r\n * invoked on behalf of the removeNotify call to the Figure.\r\n *\r\n * @see #removeNotify\r\n */\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n}'),(786,'Connector end','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2310,'org.jhotdraw.draw.LineConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is removed from a Drawing, this method is\r\n * invoked on behalf of the removeNotify call to the Figure.\r\n *\r\n * @see #removeNotify\r\n */\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n}'),(787,'Connector start','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2309,'org.jhotdraw.draw.LineConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is added to a Drawing this method is invoked\r\n * on behalf of the addNotify call to the Figure.\r\n */\r\nprotected void handleConnect(Connector start, Connector end) {\r\n}'),(788,'Connector end','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2309,'org.jhotdraw.draw.LineConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is added to a Drawing this method is invoked\r\n * on behalf of the addNotify call to the Figure.\r\n */\r\nprotected void handleConnect(Connector start, Connector end) {\r\n}'),(789,'Connector start','org.jhotdraw.draw.Connector',145,209,'org.jhotdraw.draw.LineConnectionFigure',2299,'org.jhotdraw.draw.LineConnectionFigure.canConnect(org.jhotdraw.draw.Connector)',0,'public boolean canConnect(Connector start) {\r\n    return start.getOwner().canConnect();\r\n}'),(790,'DrawingView view','org.jhotdraw.draw.DrawingView',171,209,'org.jhotdraw.draw.LineConnectionFigure',2311,'org.jhotdraw.draw.LineConnectionFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((getLiner()) == null) && ((evt.getClickCount()) == 2)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(791,'DOMInput in','org.jhotdraw.xml.DOMInput',650,209,'org.jhotdraw.draw.LineConnectionFigure',2315,'org.jhotdraw.draw.LineConnectionFigure.readPoints(org.jhotdraw.xml.DOMInput)',0,'// PERSISTENCE\r\n@Override\r\nprotected void readPoints(DOMInput in) throws IOException {\r\n    super.readPoints(in);\r\n    in.openElement(\"startConnector\");\r\n    setStartConnector(((Connector) (in.readObject())));\r\n    in.closeElement();\r\n    in.openElement(\"endConnector\");\r\n    setEndConnector(((Connector) (in.readObject())));\r\n    in.closeElement();\r\n}'),(792,'DOMInput in','org.jhotdraw.xml.DOMInput',650,209,'org.jhotdraw.draw.LineConnectionFigure',2313,'org.jhotdraw.draw.LineConnectionFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    readAttributes(in);\r\n    readLiner(in);\r\n    // Note: Points must be read after Liner, because Liner influences\r\n    // the location of the points.\r\n    readPoints(in);\r\n}'),(793,'DOMInput in','org.jhotdraw.xml.DOMInput',650,209,'org.jhotdraw.draw.LineConnectionFigure',2314,'org.jhotdraw.draw.LineConnectionFigure.readLiner(org.jhotdraw.xml.DOMInput)',0,'protected void readLiner(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"liner\")) > 0) {\r\n        in.openElement(\"liner\");\r\n        liner = ((Liner) (in.readObject()));\r\n        in.closeElement();\r\n    } else {\r\n        liner = null;\r\n    }\r\n}'),(794,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,209,'org.jhotdraw.draw.LineConnectionFigure',2329,'org.jhotdraw.draw.LineConnectionFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    writePoints(out);\r\n    writeAttributes(out);\r\n    writeLiner(out);\r\n}'),(795,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,209,'org.jhotdraw.draw.LineConnectionFigure',2330,'org.jhotdraw.draw.LineConnectionFigure.writeLiner(org.jhotdraw.xml.DOMOutput)',0,'protected void writeLiner(DOMOutput out) throws IOException {\r\n    if ((liner) != null) {\r\n        out.openElement(\"liner\");\r\n        out.writeObject(liner);\r\n        out.closeElement();\r\n    }\r\n}'),(796,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,209,'org.jhotdraw.draw.LineConnectionFigure',2331,'org.jhotdraw.draw.LineConnectionFigure.writePoints(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\nprotected void writePoints(DOMOutput out) throws IOException {\r\n    super.writePoints(out);\r\n    out.openElement(\"startConnector\");\r\n    out.writeObject(getStartConnector());\r\n    out.closeElement();\r\n    out.openElement(\"endConnector\");\r\n    out.writeObject(getEndConnector());\r\n    out.closeElement();\r\n}'),(797,'Liner newValue','org.jhotdraw.draw.Liner',212,209,'org.jhotdraw.draw.LineConnectionFigure',2321,'org.jhotdraw.draw.LineConnectionFigure.setLiner(org.jhotdraw.draw.Liner)',0,'public void setLiner(Liner newValue) {\r\n    this.liner = newValue;\r\n}'),(798,'BezierPath.Node p','org.jhotdraw.geom.BezierPath$Node',342,209,'org.jhotdraw.draw.LineConnectionFigure',2322,'org.jhotdraw.draw.LineConnectionFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)',0,'@Override\r\npublic void setNode(int index, BezierPath.Node p) {\r\n    if ((index != 0) && (index != ((getNodeCount()) - 1))) {\r\n        if ((getStartConnector()) != null) {\r\n            Point2D.Double start = getStartConnector().findStart(this);\r\n            if (start != null) {\r\n                setStartPoint(start);\r\n            }\r\n        }\r\n        if ((getEndConnector()) != null) {\r\n            Point2D.Double end = getEndConnector().findEnd(this);\r\n            if (end != null) {\r\n                setEndPoint(end);\r\n            }\r\n        }\r\n    }\r\n    super.setNode(index, p);\r\n}'),(799,'Figure f','org.jhotdraw.draw.Figure',174,210,'org.jhotdraw.draw.LineDecoration',2335,'org.jhotdraw.draw.LineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/**\r\n * Draws the decoration in the direction specified by the two Points.\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2);'),(800,'Figure f','org.jhotdraw.draw.Figure',174,210,'org.jhotdraw.draw.LineDecoration',2336,'org.jhotdraw.draw.LineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns the radius of the decorator.\r\n * This is used to crop the end of the line, to prevent it from being\r\n * drawn it over the decorator.\r\n */\r\npublic abstract double getDecorationRadius(Figure f);'),(801,'Figure f','org.jhotdraw.draw.Figure',174,210,'org.jhotdraw.draw.LineDecoration',2337,'org.jhotdraw.draw.LineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/**\r\n * Returns the drawing bounds of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2);'),(802,'DrawingView view','org.jhotdraw.draw.DrawingView',171,211,'org.jhotdraw.draw.LineFigure',2341,'org.jhotdraw.draw.LineFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && ((view.getHandleDetailLevel()) == 0)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(803,'ConnectionFigure figure','org.jhotdraw.draw.ConnectionFigure',142,212,'org.jhotdraw.draw.Liner',2344,'org.jhotdraw.draw.Liner.lineout(org.jhotdraw.draw.ConnectionFigure)',0,'/**\r\n * Layouts the Path. This may alter the number and type of points\r\n * in the Path.\r\n *\r\n * @param figure\r\n * 		The ConnectionFigure to be lined out.\r\n */\r\npublic void lineout(ConnectionFigure figure);'),(804,'BezierPath path','org.jhotdraw.geom.BezierPath',343,212,'org.jhotdraw.draw.Liner',2343,'org.jhotdraw.draw.Liner.createHandles(org.jhotdraw.geom.BezierPath)',0,'/**\r\n * Creates Handles for the Liner.\r\n * The ConnectionFigure can provide these handles to the user, in order\r\n * to let her control the lineout.\r\n *\r\n * @param path\r\n * 		The path for which to create handles.\r\n */\r\npublic Collection<Handle> createHandles(BezierPath path);'),(805,'Figure presentationFigure','org.jhotdraw.draw.Figure',174,213,'org.jhotdraw.draw.ListFigure',2346,'org.jhotdraw.draw.ListFigure.-init-(org.jhotdraw.draw.Figure)',0,'public ListFigure(Figure presentationFigure) {\r\n    super(presentationFigure);\r\n    setLayouter(new VerticalLayouter());\r\n    CompositeFigure.LAYOUT_INSETS.basicSet(this, new Insets2D.Double(4, 8, 4, 8));\r\n}'),(806,'Figure owner','org.jhotdraw.draw.Figure',174,214,'org.jhotdraw.draw.Locator',2347,'org.jhotdraw.draw.Locator.locate(org.jhotdraw.draw.Figure)',0,'/**\r\n * Locates a position on the provided figure.\r\n *\r\n * @return a point on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner);'),(807,'Figure owner','org.jhotdraw.draw.Figure',174,214,'org.jhotdraw.draw.Locator',2348,'org.jhotdraw.draw.Locator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'/**\r\n * Locates a position on the provided figure relative to the dependent\r\n * figure.\r\n *\r\n * @return a point on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner, Figure dependent);'),(808,'Figure dependent','org.jhotdraw.draw.Figure',174,214,'org.jhotdraw.draw.Locator',2348,'org.jhotdraw.draw.Locator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)',0,'/**\r\n * Locates a position on the provided figure relative to the dependent\r\n * figure.\r\n *\r\n * @return a point on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner, Figure dependent);'),(809,'Figure owner','org.jhotdraw.draw.Figure',174,215,'org.jhotdraw.draw.LocatorConnector',2350,'org.jhotdraw.draw.LocatorConnector.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'public LocatorConnector(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}'),(810,'Locator l','org.jhotdraw.draw.Locator',214,215,'org.jhotdraw.draw.LocatorConnector',2350,'org.jhotdraw.draw.LocatorConnector.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'public LocatorConnector(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}'),(811,'ConnectionFigure connection','org.jhotdraw.draw.ConnectionFigure',142,215,'org.jhotdraw.draw.LocatorConnector',2354,'org.jhotdraw.draw.LocatorConnector.locate(org.jhotdraw.draw.ConnectionFigure)',0,'protected Point2D.Double locate(ConnectionFigure connection) {\r\n    return locator.locate(getOwner());\r\n}'),(812,'DOMInput in','org.jhotdraw.xml.DOMInput',650,215,'org.jhotdraw.draw.LocatorConnector',2355,'org.jhotdraw.draw.LocatorConnector.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    in.openElement(\"locator\");\r\n    this.locator = ((Locator) (in.readObject(0)));\r\n    in.closeElement();\r\n}'),(813,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,215,'org.jhotdraw.draw.LocatorConnector',2356,'org.jhotdraw.draw.LocatorConnector.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.openElement(\"locator\");\r\n    out.writeObject(locator);\r\n    out.closeElement();\r\n}'),(814,'Figure owner','org.jhotdraw.draw.Figure',174,216,'org.jhotdraw.draw.LocatorHandle',2357,'org.jhotdraw.draw.LocatorHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'/**\r\n * Initializes the LocatorHandle with the given Locator.\r\n */\r\npublic LocatorHandle(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}'),(815,'Locator l','org.jhotdraw.draw.Locator',214,216,'org.jhotdraw.draw.LocatorHandle',2357,'org.jhotdraw.draw.LocatorHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'/**\r\n * Initializes the LocatorHandle with the given Locator.\r\n */\r\npublic LocatorHandle(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}'),(816,'CompositeFigure compositeFigure','org.jhotdraw.draw.CompositeFigure',136,217,'org.jhotdraw.draw.LocatorLayouter',2362,'org.jhotdraw.draw.LocatorLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'public Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Rectangle2D.Double bounds = null;\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        Locator locator = getLocator(child);\r\n        Rectangle2D.Double r;\r\n        if (locator == null) {\r\n            r = child.getBounds();\r\n        } else {\r\n            Point2D.Double p = locator.locate(compositeFigure);\r\n            Dimension2DDouble d = child.getPreferredSize();\r\n            r = new Rectangle2D.Double(p.x, p.y, d.width, d.height);\r\n        }\r\n        if (!(r.isEmpty())) {\r\n            if (bounds == null) {\r\n                bounds = r;\r\n            } else {\r\n                bounds.add(r);\r\n            }\r\n        }\r\n    }\r\n    return bounds == null ? new Rectangle2D.Double() : bounds;\r\n}'),(817,'CompositeFigure compositeFigure','org.jhotdraw.draw.CompositeFigure',136,217,'org.jhotdraw.draw.LocatorLayouter',2364,'org.jhotdraw.draw.LocatorLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'public Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Rectangle2D.Double bounds = null;\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        Locator locator = getLocator(child);\r\n        Rectangle2D.Double r;\r\n        if (locator == null) {\r\n            r = child.getBounds();\r\n        } else {\r\n            Point2D.Double p = locator.locate(compositeFigure, child);\r\n            Dimension2DDouble d = child.getPreferredSize();\r\n            r = new Rectangle2D.Double(p.x, p.y, d.width, d.height);\r\n        }\r\n        child.willChange();\r\n        child.setBounds(new Point2D.Double(r.getMinX(), r.getMinY()), new Point2D.Double(r.getMaxX(), r.getMaxY()));\r\n        child.changed();\r\n        if (!(r.isEmpty())) {\r\n            if (bounds == null) {\r\n                bounds = r;\r\n            } else {\r\n                bounds.add(r);\r\n            }\r\n        }\r\n    }\r\n    return bounds == null ? new Rectangle2D.Double() : bounds;\r\n}'),(818,'Figure f','org.jhotdraw.draw.Figure',174,217,'org.jhotdraw.draw.LocatorLayouter',2363,'org.jhotdraw.draw.LocatorLayouter.getLocator(org.jhotdraw.draw.Figure)',0,'private Locator getLocator(Figure f) {\r\n    return LocatorLayouter.LAYOUT_LOCATOR.get(f);\r\n}'),(819,'org.jhotdraw.draw.Locator','org.jhotdraw.draw.Locator',214,217,'org.jhotdraw.draw.LocatorLayouter',2363,'org.jhotdraw.draw.LocatorLayouter.getLocator(org.jhotdraw.draw.Figure)',1,'private Locator getLocator(Figure f) {\r\n    return LocatorLayouter.LAYOUT_LOCATOR.get(f);\r\n}'),(820,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2365,'org.jhotdraw.draw.MoveHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic MoveHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(821,'Locator locator','org.jhotdraw.draw.Locator',214,218,'org.jhotdraw.draw.MoveHandle',2365,'org.jhotdraw.draw.MoveHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic MoveHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(822,'Figure f','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2366,'org.jhotdraw.draw.MoveHandle.addMoveHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addMoveHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(MoveHandle.southEast(f));\r\n    handles.add(MoveHandle.southWest(f));\r\n    handles.add(MoveHandle.northEast(f));\r\n    handles.add(MoveHandle.northWest(f));\r\n}'),(823,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2374,'org.jhotdraw.draw.MoveHandle.south(org.jhotdraw.draw.Figure)',0,'public static Handle south(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.south());\r\n}'),(824,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,218,'org.jhotdraw.draw.MoveHandle',2374,'org.jhotdraw.draw.MoveHandle.south(org.jhotdraw.draw.Figure)',1,'public static Handle south(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.south());\r\n}'),(825,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2375,'org.jhotdraw.draw.MoveHandle.southEast(org.jhotdraw.draw.Figure)',0,'public static Handle southEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southEast());\r\n}'),(826,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,218,'org.jhotdraw.draw.MoveHandle',2375,'org.jhotdraw.draw.MoveHandle.southEast(org.jhotdraw.draw.Figure)',1,'public static Handle southEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southEast());\r\n}'),(827,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2376,'org.jhotdraw.draw.MoveHandle.southWest(org.jhotdraw.draw.Figure)',0,'public static Handle southWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southWest());\r\n}'),(828,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,218,'org.jhotdraw.draw.MoveHandle',2376,'org.jhotdraw.draw.MoveHandle.southWest(org.jhotdraw.draw.Figure)',1,'public static Handle southWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southWest());\r\n}'),(829,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2371,'org.jhotdraw.draw.MoveHandle.north(org.jhotdraw.draw.Figure)',0,'public static Handle north(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.north());\r\n}'),(830,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,218,'org.jhotdraw.draw.MoveHandle',2371,'org.jhotdraw.draw.MoveHandle.north(org.jhotdraw.draw.Figure)',1,'public static Handle north(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.north());\r\n}'),(831,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2372,'org.jhotdraw.draw.MoveHandle.northEast(org.jhotdraw.draw.Figure)',0,'public static Handle northEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northEast());\r\n}'),(832,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,218,'org.jhotdraw.draw.MoveHandle',2372,'org.jhotdraw.draw.MoveHandle.northEast(org.jhotdraw.draw.Figure)',1,'public static Handle northEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northEast());\r\n}'),(833,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2373,'org.jhotdraw.draw.MoveHandle.northWest(org.jhotdraw.draw.Figure)',0,'public static Handle northWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northWest());\r\n}'),(834,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,218,'org.jhotdraw.draw.MoveHandle',2373,'org.jhotdraw.draw.MoveHandle.northWest(org.jhotdraw.draw.Figure)',1,'public static Handle northWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northWest());\r\n}'),(835,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2368,'org.jhotdraw.draw.MoveHandle.east(org.jhotdraw.draw.Figure)',0,'public static Handle east(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.east());\r\n}'),(836,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,218,'org.jhotdraw.draw.MoveHandle',2368,'org.jhotdraw.draw.MoveHandle.east(org.jhotdraw.draw.Figure)',1,'public static Handle east(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.east());\r\n}'),(837,'Figure owner','org.jhotdraw.draw.Figure',174,218,'org.jhotdraw.draw.MoveHandle',2380,'org.jhotdraw.draw.MoveHandle.west(org.jhotdraw.draw.Figure)',0,'public static Handle west(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.west());\r\n}'),(838,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,218,'org.jhotdraw.draw.MoveHandle',2380,'org.jhotdraw.draw.MoveHandle.west(org.jhotdraw.draw.Figure)',1,'public static Handle west(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.west());\r\n}'),(839,'Figure owner','org.jhotdraw.draw.Figure',174,219,'org.jhotdraw.draw.NullHandle',2381,'org.jhotdraw.draw.NullHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic NullHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(840,'Locator locator','org.jhotdraw.draw.Locator',214,219,'org.jhotdraw.draw.NullHandle',2381,'org.jhotdraw.draw.NullHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic NullHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}'),(841,'Figure f','org.jhotdraw.draw.Figure',174,219,'org.jhotdraw.draw.NullHandle',2382,'org.jhotdraw.draw.NullHandle.addLeadHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Creates handles for each lead of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addLeadHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new NullHandle(f, new RelativeLocator(0.0F, 0.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(0.0F, 1.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(1.0F, 0.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(1.0F, 1.0F)));\r\n}'),(842,'Drawing drawing','org.jhotdraw.draw.Drawing',168,221,'org.jhotdraw.draw.OutputFormat',2395,'org.jhotdraw.draw.OutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Writes a Drawing into a file.\r\n *\r\n * @param file\r\n * 		The file.\r\n * @param drawing\r\n * 		The drawing.\r\n */\r\npublic void write(File file, Drawing drawing) throws IOException;'),(843,'Drawing drawing','org.jhotdraw.draw.Drawing',168,221,'org.jhotdraw.draw.OutputFormat',2396,'org.jhotdraw.draw.OutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Writes a Drawing into an output stream.\r\n *\r\n * @param out\r\n * 		The output stream.\r\n * @param drawing\r\n * 		The drawing.\r\n */\r\npublic void write(OutputStream out, Drawing drawing) throws IOException;'),(844,'Drawing drawing','org.jhotdraw.draw.Drawing',168,221,'org.jhotdraw.draw.OutputFormat',2391,'org.jhotdraw.draw.OutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)',0,'/**\r\n * Creates a Transferable for the specified list of Figures.\r\n *\r\n * @param drawing\r\n * 		The drawing.\r\n * @param figures\r\n * 		A list of figures of the drawing.\r\n * @param scaleFactor\r\n * 		The factor to be used, when the Transferable creates\r\n * 		an image with a fixed size from the figures.\r\n * @return The Transferable.\r\n */\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException;'),(845,'Figure f','org.jhotdraw.draw.Figure',174,222,'org.jhotdraw.draw.PerpendicularBar',2399,'org.jhotdraw.draw.PerpendicularBar.getDecoratorPath(org.jhotdraw.draw.Figure)',0,'/**\r\n * Calculates the path of the decorator...a simple line\r\n * perpendicular to the figure.\r\n */\r\nprotected GeneralPath getDecoratorPath(Figure f) {\r\n    GeneralPath path = new GeneralPath();\r\n    double halfHeight = (height) / 2;\r\n    path.moveTo(((float) (+halfHeight)), 0);\r\n    path.lineTo(((float) (-halfHeight)), 0);\r\n    return path;\r\n}'),(846,'Figure f','org.jhotdraw.draw.Figure',174,222,'org.jhotdraw.draw.PerpendicularBar',2400,'org.jhotdraw.draw.PerpendicularBar.getDecoratorPathRadius(org.jhotdraw.draw.Figure)',0,'/**\r\n * Calculates the radius of the decorator path.\r\n */\r\nprotected double getDecoratorPathRadius(Figure f) {\r\n    return 0.5;\r\n}'),(847,'DOMInput in','org.jhotdraw.xml.DOMInput',650,222,'org.jhotdraw.draw.PerpendicularBar',2401,'org.jhotdraw.draw.PerpendicularBar.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) {\r\n    height = in.getAttribute(\"height\", 10);\r\n}'),(848,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,222,'org.jhotdraw.draw.PerpendicularBar',2402,'org.jhotdraw.draw.PerpendicularBar.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) {\r\n    out.addAttribute(\"height\", height);\r\n}'),(849,'ImageHolderFigure prototype','org.jhotdraw.draw.ImageHolderFigure',199,223,'org.jhotdraw.draw.PictImageInputFormat',2403,'org.jhotdraw.draw.PictImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure)',0,'/**\r\n * Creates a new image output format for Portable Network Graphics PNG.\r\n */\r\npublic PictImageInputFormat(ImageHolderFigure prototype) {\r\n    this(prototype, \"PICT\", \"PICT (pct)\", \"pct\", BufferedImage.TYPE_INT_ARGB);\r\n}'),(850,'ImageHolderFigure prototype','org.jhotdraw.draw.ImageHolderFigure',199,223,'org.jhotdraw.draw.PictImageInputFormat',2404,'org.jhotdraw.draw.PictImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure,java.lang.String,java.lang.String,java.lang.String,int)',0,'/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * 		The format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param bufferedImageType\r\n * 		The BufferedImage type used to produce the image.\r\n * 		The value of this parameter must match with the format name.\r\n */\r\nprivate PictImageInputFormat(ImageHolderFigure prototype, String formatName, String description, String fileExtension, int bufferedImageType) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.imageType = bufferedImageType;\r\n}'),(851,'Drawing drawing','org.jhotdraw.draw.Drawing',168,223,'org.jhotdraw.draw.PictImageInputFormat',2412,'org.jhotdraw.draw.PictImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(852,'Drawing drawing','org.jhotdraw.draw.Drawing',168,223,'org.jhotdraw.draw.PictImageInputFormat',2413,'org.jhotdraw.draw.PictImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n        if (img == null) {\r\n            throw new IOException(\"Couldnt read pict image\");\r\n        }\r\n        ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n        figure.setBufferedImage(Images.toBufferedImage(img));\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n        if (replace) {\r\n            drawing.removeAllChildren();\r\n        }\r\n        drawing.basicAdd(figure);\r\n    } finally {\r\n        in.close();\r\n    }\r\n}'),(853,'Drawing drawing','org.jhotdraw.draw.Drawing',168,223,'org.jhotdraw.draw.PictImageInputFormat',2414,'org.jhotdraw.draw.PictImageInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    try {\r\n        Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n        if (img == null) {\r\n            throw new IOException(\"Couldnt read pict image\");\r\n        }\r\n        ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n        figure.setBufferedImage(Images.toBufferedImage(img));\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n        if (replace) {\r\n            drawing.removeAllChildren();\r\n        }\r\n        drawing.basicAdd(figure);\r\n    } finally {\r\n        in.close();\r\n    }\r\n}'),(854,'Drawing drawing','org.jhotdraw.draw.Drawing',168,223,'org.jhotdraw.draw.PictImageInputFormat',2411,'org.jhotdraw.draw.PictImageInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    Object data = t.getTransferData(PictImageInputFormat.PICT_FLAVOR);\r\n    if (data instanceof InputStream) {\r\n        InputStream in = null;\r\n        try {\r\n            in = ((InputStream) (data));\r\n            Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n            if (img == null) {\r\n                throw new IOException(\"Couldnt read pict image\");\r\n            }\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(Images.toBufferedImage(img));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.add(figure);\r\n        } finally {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(855,'Figure figure','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2436,'org.jhotdraw.draw.QuadTreeCompositeFigure.indexOf(org.jhotdraw.draw.Figure)',0,'public int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}'),(856,'Figure figure','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2416,'org.jhotdraw.draw.QuadTreeCompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)',0,'public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    quadTree.add(figure, figure.getDrawingArea());\r\n    figure.addFigureListener(figureHandler);\r\n    needsSorting = true;\r\n}'),(857,'Figure ignore','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2428,'org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',0,'public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p)))\r\n                        return f;\r\n\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(858,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2428,'org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',1,'public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p)))\r\n                        return f;\r\n\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(859,'Figure figure','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2426,'org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',0,'public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(860,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2426,'org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',1,'public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(861,'Figure figure','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2418,'org.jhotdraw.draw.QuadTreeCompositeFigure.bringToFront(org.jhotdraw.draw.Figure)',0,'public void bringToFront(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(862,'Figure figure','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2437,'org.jhotdraw.draw.QuadTreeCompositeFigure.sendToBack(org.jhotdraw.draw.Figure)',0,'public void sendToBack(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(0, figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(863,'Figure f','org.jhotdraw.draw.Figure',174,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2419,'org.jhotdraw.draw.QuadTreeCompositeFigure.contains(org.jhotdraw.draw.Figure)',0,'public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}'),(864,'Dimension2DDouble newValue','org.jhotdraw.geom.Dimension2DDouble',346,225,'org.jhotdraw.draw.QuadTreeCompositeFigure',2438,'org.jhotdraw.draw.QuadTreeCompositeFigure.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)',0,'public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = newValue;\r\n    firePropertyChange(\"canvasSize\", oldValue, newValue);\r\n}'),(865,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,224,'org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler',2441,'org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}'),(866,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,224,'org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler',2442,'org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    quadTree.remove(e.getFigure());\r\n    quadTree.add(e.getFigure(), e.getFigure().getDrawingArea());\r\n    needsSorting = true;\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}'),(867,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,224,'org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler',2443,'org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    remove(e.getFigure());\r\n}'),(868,'Figure figure','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2469,'org.jhotdraw.draw.QuadTreeDrawing.indexOf(org.jhotdraw.draw.Figure)',0,'@Override\r\npublic int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}'),(869,'Figure figure','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2446,'org.jhotdraw.draw.QuadTreeDrawing.basicAdd(int,org.jhotdraw.draw.Figure)',0,'@Override\r\npublic void basicAdd(int index, Figure figure) {\r\n    super.basicAdd(index, figure);\r\n    quadTree.add(figure, figure.getDrawingArea());\r\n    needsSorting = true;\r\n}'),(870,'Figure ignore','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2461,'org.jhotdraw.draw.QuadTreeDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',0,'public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p))) {\r\n                        return f;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(871,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2461,'org.jhotdraw.draw.QuadTreeDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',1,'public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p))) {\r\n                        return f;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}'),(872,'Figure figure','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2459,'org.jhotdraw.draw.QuadTreeDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',0,'public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(873,'org.jhotdraw.draw.Figure','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2459,'org.jhotdraw.draw.QuadTreeDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)',1,'public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}'),(874,'Figure figure','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2448,'org.jhotdraw.draw.QuadTreeDrawing.bringToFront(org.jhotdraw.draw.Figure)',0,'@Override\r\npublic void bringToFront(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(875,'Figure figure','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2470,'org.jhotdraw.draw.QuadTreeDrawing.sendToBack(org.jhotdraw.draw.Figure)',0,'@Override\r\npublic void sendToBack(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(0, figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}'),(876,'Figure f','org.jhotdraw.draw.Figure',174,227,'org.jhotdraw.draw.QuadTreeDrawing',2450,'org.jhotdraw.draw.QuadTreeDrawing.contains(org.jhotdraw.draw.Figure)',0,'@Override\r\npublic boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}'),(877,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,227,'org.jhotdraw.draw.QuadTreeDrawing',2471,'org.jhotdraw.draw.QuadTreeDrawing.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\nprotected void setAttributeOnChildren(AttributeKey key, Object newValue) {\r\n    // empty\r\n}'),(878,'Dimension2DDouble newValue','org.jhotdraw.geom.Dimension2DDouble',346,227,'org.jhotdraw.draw.QuadTreeDrawing',2472,'org.jhotdraw.draw.QuadTreeDrawing.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)',0,'public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = (newValue == null) ? null : ((Dimension2DDouble) (newValue.clone()));\r\n    firePropertyChange(\"canvasSize\", oldValue, newValue);\r\n}'),(879,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,226,'org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler',2475,'org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    quadTree.remove(e.getFigure());\r\n    quadTree.add(e.getFigure(), e.getFigure().getDrawingArea());\r\n    needsSorting = true;\r\n    invalidate();\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}'),(880,'Figure owner','org.jhotdraw.draw.Figure',174,229,'org.jhotdraw.draw.RelativeDecoratorLocator',2493,'org.jhotdraw.draw.RelativeDecoratorLocator.locate(org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner) {\r\n    Rectangle2D.Double r;\r\n    if ((owner instanceof DecoratedFigure) && ((((DecoratedFigure) (owner)).getDecorator()) != null)) {\r\n        r = ((DecoratedFigure) (owner)).getDecorator().getBounds();\r\n    } else {\r\n        r = owner.getBounds();\r\n    }\r\n    if (isQuadratic) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    return new Point2D.Double(((r.x) + ((r.width) * (relativeX))), ((r.y) + ((r.height) * (relativeY))));\r\n}'),(881,'Figure owner','org.jhotdraw.draw.Figure',174,230,'org.jhotdraw.draw.RelativeLocator',2510,'org.jhotdraw.draw.RelativeLocator.locate(org.jhotdraw.draw.Figure)',0,'public Point2D.Double locate(Figure owner) {\r\n    Rectangle2D.Double bounds = owner.getBounds();\r\n    if ((owner instanceof DecoratedFigure) && ((((DecoratedFigure) (owner)).getDecorator()) != null)) {\r\n        Insets2D.Double insets = AttributeKeys.DECORATOR_INSETS.get(owner);\r\n        if (insets != null) {\r\n            insets.addTo(bounds);\r\n        }\r\n    }\r\n    Point2D.Double location;\r\n    if (isTransform) {\r\n        location = new Point2D.Double(((bounds.x) + ((bounds.width) * (relativeX))), ((bounds.y) + ((bounds.height) * (relativeY))));\r\n        if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n            AttributeKeys.TRANSFORM.get(owner).transform(location, location);\r\n        }\r\n    } else {\r\n        if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n            Rectangle2D r = AttributeKeys.TRANSFORM.get(owner).createTransformedShape(bounds).getBounds2D();\r\n            bounds.x = r.getX();\r\n            bounds.y = r.getY();\r\n            bounds.width = r.getWidth();\r\n            bounds.height = r.getHeight();\r\n        }\r\n        location = new Point2D.Double(((bounds.x) + ((bounds.width) * (relativeX))), ((bounds.y) + ((bounds.height) * (relativeY))));\r\n    }\r\n    return location;\r\n}'),(882,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,230,'org.jhotdraw.draw.RelativeLocator',2526,'org.jhotdraw.draw.RelativeLocator.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) {\r\n    out.addAttribute(\"relativeX\", relativeX, 0.5);\r\n    out.addAttribute(\"relativeY\", relativeY, 0.5);\r\n}'),(883,'DOMInput in','org.jhotdraw.xml.DOMInput',650,230,'org.jhotdraw.draw.RelativeLocator',2517,'org.jhotdraw.draw.RelativeLocator.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) {\r\n    relativeX = in.getAttribute(\"relativeX\", 0.5);\r\n    relativeY = in.getAttribute(\"relativeY\", 0.5);\r\n}'),(884,'Figure owner','org.jhotdraw.draw.Figure',174,235,'org.jhotdraw.draw.ResizeHandleKit$ResizeHandle',2557,'org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'ResizeHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}'),(885,'Locator loc','org.jhotdraw.draw.Locator',214,235,'org.jhotdraw.draw.ResizeHandleKit$ResizeHandle',2557,'org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'ResizeHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}'),(886,'Figure owner','org.jhotdraw.draw.Figure',174,232,'org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle',2545,'org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle.-init-(org.jhotdraw.draw.Figure)',0,'NorthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northEast(true));\r\n}'),(887,'Figure owner','org.jhotdraw.draw.Figure',174,231,'org.jhotdraw.draw.ResizeHandleKit$EastHandle',2541,'org.jhotdraw.draw.ResizeHandleKit$EastHandle.-init-(org.jhotdraw.draw.Figure)',0,'EastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.east(true));\r\n}'),(888,'Figure owner','org.jhotdraw.draw.Figure',174,233,'org.jhotdraw.draw.ResizeHandleKit$NorthHandle',2549,'org.jhotdraw.draw.ResizeHandleKit$NorthHandle.-init-(org.jhotdraw.draw.Figure)',0,'NorthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.north(true));\r\n}'),(889,'Figure owner','org.jhotdraw.draw.Figure',174,234,'org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle',2553,'org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle.-init-(org.jhotdraw.draw.Figure)',0,'NorthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northWest(true));\r\n}'),(890,'Figure owner','org.jhotdraw.draw.Figure',174,236,'org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle',2565,'org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle.-init-(org.jhotdraw.draw.Figure)',0,'SouthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southEast(true));\r\n}'),(891,'Figure owner','org.jhotdraw.draw.Figure',174,237,'org.jhotdraw.draw.ResizeHandleKit$SouthHandle',2569,'org.jhotdraw.draw.ResizeHandleKit$SouthHandle.-init-(org.jhotdraw.draw.Figure)',0,'SouthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.south(true));\r\n}'),(892,'Figure owner','org.jhotdraw.draw.Figure',174,238,'org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle',2573,'org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle.-init-(org.jhotdraw.draw.Figure)',0,'SouthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southWest(true));\r\n}'),(893,'Figure owner','org.jhotdraw.draw.Figure',174,239,'org.jhotdraw.draw.ResizeHandleKit$WestHandle',2577,'org.jhotdraw.draw.ResizeHandleKit$WestHandle.-init-(org.jhotdraw.draw.Figure)',0,'WestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.west(true));\r\n}'),(894,'Figure f','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2530,'org.jhotdraw.draw.ResizeHandleKit.addCornerResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addCornerResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(ResizeHandleKit.southEast(f));\r\n    handles.add(ResizeHandleKit.southWest(f));\r\n    handles.add(ResizeHandleKit.northEast(f));\r\n    handles.add(ResizeHandleKit.northWest(f));\r\n}'),(895,'Figure f','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2531,'org.jhotdraw.draw.ResizeHandleKit.addEdgeResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addEdgeResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(ResizeHandleKit.south(f));\r\n    handles.add(ResizeHandleKit.north(f));\r\n    handles.add(ResizeHandleKit.east(f));\r\n    handles.add(ResizeHandleKit.west(f));\r\n}'),(896,'Figure f','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2532,'org.jhotdraw.draw.ResizeHandleKit.addResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f));\r\n    ResizeHandleKit.addCornerResizeHandles(f, handles);\r\n    ResizeHandleKit.addEdgeResizeHandles(f, handles);\r\n}'),(897,'Figure owner','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2537,'org.jhotdraw.draw.ResizeHandleKit.south(org.jhotdraw.draw.Figure)',0,'public static Handle south(Figure owner) {\r\n    return new ResizeHandleKit.SouthHandle(owner);\r\n}'),(898,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,240,'org.jhotdraw.draw.ResizeHandleKit',2537,'org.jhotdraw.draw.ResizeHandleKit.south(org.jhotdraw.draw.Figure)',1,'public static Handle south(Figure owner) {\r\n    return new ResizeHandleKit.SouthHandle(owner);\r\n}'),(899,'Figure owner','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2538,'org.jhotdraw.draw.ResizeHandleKit.southEast(org.jhotdraw.draw.Figure)',0,'public static Handle southEast(Figure owner) {\r\n    return new ResizeHandleKit.SouthEastHandle(owner);\r\n}'),(900,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,240,'org.jhotdraw.draw.ResizeHandleKit',2538,'org.jhotdraw.draw.ResizeHandleKit.southEast(org.jhotdraw.draw.Figure)',1,'public static Handle southEast(Figure owner) {\r\n    return new ResizeHandleKit.SouthEastHandle(owner);\r\n}'),(901,'Figure owner','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2539,'org.jhotdraw.draw.ResizeHandleKit.southWest(org.jhotdraw.draw.Figure)',0,'public static Handle southWest(Figure owner) {\r\n    return new ResizeHandleKit.SouthWestHandle(owner);\r\n}'),(902,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,240,'org.jhotdraw.draw.ResizeHandleKit',2539,'org.jhotdraw.draw.ResizeHandleKit.southWest(org.jhotdraw.draw.Figure)',1,'public static Handle southWest(Figure owner) {\r\n    return new ResizeHandleKit.SouthWestHandle(owner);\r\n}'),(903,'Figure owner','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2534,'org.jhotdraw.draw.ResizeHandleKit.north(org.jhotdraw.draw.Figure)',0,'public static Handle north(Figure owner) {\r\n    return new ResizeHandleKit.NorthHandle(owner);\r\n}'),(904,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,240,'org.jhotdraw.draw.ResizeHandleKit',2534,'org.jhotdraw.draw.ResizeHandleKit.north(org.jhotdraw.draw.Figure)',1,'public static Handle north(Figure owner) {\r\n    return new ResizeHandleKit.NorthHandle(owner);\r\n}'),(905,'Figure owner','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2535,'org.jhotdraw.draw.ResizeHandleKit.northEast(org.jhotdraw.draw.Figure)',0,'public static Handle northEast(Figure owner) {\r\n    return new ResizeHandleKit.NorthEastHandle(owner);\r\n}'),(906,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,240,'org.jhotdraw.draw.ResizeHandleKit',2535,'org.jhotdraw.draw.ResizeHandleKit.northEast(org.jhotdraw.draw.Figure)',1,'public static Handle northEast(Figure owner) {\r\n    return new ResizeHandleKit.NorthEastHandle(owner);\r\n}'),(907,'Figure owner','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2536,'org.jhotdraw.draw.ResizeHandleKit.northWest(org.jhotdraw.draw.Figure)',0,'public static Handle northWest(Figure owner) {\r\n    return new ResizeHandleKit.NorthWestHandle(owner);\r\n}'),(908,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,240,'org.jhotdraw.draw.ResizeHandleKit',2536,'org.jhotdraw.draw.ResizeHandleKit.northWest(org.jhotdraw.draw.Figure)',1,'public static Handle northWest(Figure owner) {\r\n    return new ResizeHandleKit.NorthWestHandle(owner);\r\n}'),(909,'Figure owner','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2533,'org.jhotdraw.draw.ResizeHandleKit.east(org.jhotdraw.draw.Figure)',0,'public static Handle east(Figure owner) {\r\n    return new ResizeHandleKit.EastHandle(owner);\r\n}'),(910,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,240,'org.jhotdraw.draw.ResizeHandleKit',2533,'org.jhotdraw.draw.ResizeHandleKit.east(org.jhotdraw.draw.Figure)',1,'public static Handle east(Figure owner) {\r\n    return new ResizeHandleKit.EastHandle(owner);\r\n}'),(911,'Figure owner','org.jhotdraw.draw.Figure',174,240,'org.jhotdraw.draw.ResizeHandleKit',2540,'org.jhotdraw.draw.ResizeHandleKit.west(org.jhotdraw.draw.Figure)',0,'public static Handle west(Figure owner) {\r\n    return new ResizeHandleKit.WestHandle(owner);\r\n}'),(912,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,240,'org.jhotdraw.draw.ResizeHandleKit',2540,'org.jhotdraw.draw.ResizeHandleKit.west(org.jhotdraw.draw.Figure)',1,'public static Handle west(Figure owner) {\r\n    return new ResizeHandleKit.WestHandle(owner);\r\n}'),(913,'Figure figure','org.jhotdraw.draw.Figure',174,241,'org.jhotdraw.draw.RestoreDataEdit',2581,'org.jhotdraw.draw.RestoreDataEdit.-init-(org.jhotdraw.draw.Figure,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic RestoreDataEdit(Figure figure, Object oldRestoreData) {\r\n    this.figure = figure;\r\n    this.oldRestoreData = oldRestoreData;\r\n    this.newRestoreData = figure.getTransformRestoreData();\r\n}'),(914,'Figure owner','org.jhotdraw.draw.Figure',174,242,'org.jhotdraw.draw.RotateHandle',2587,'org.jhotdraw.draw.RotateHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic RotateHandle(Figure owner) {\r\n    super(owner);\r\n}'),(915,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,244,'org.jhotdraw.draw.RoundRectangleFigure',2599,'org.jhotdraw.draw.RoundRectangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}'),(916,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,244,'org.jhotdraw.draw.RoundRectangleFigure',2599,'org.jhotdraw.draw.RoundRectangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}'),(917,'Connector c','org.jhotdraw.draw.Connector',145,244,'org.jhotdraw.draw.RoundRectangleFigure',2598,'org.jhotdraw.draw.RoundRectangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}'),(918,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,244,'org.jhotdraw.draw.RoundRectangleFigure',2598,'org.jhotdraw.draw.RoundRectangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}'),(919,'DOMInput in','org.jhotdraw.xml.DOMInput',650,244,'org.jhotdraw.draw.RoundRectangleFigure',2605,'org.jhotdraw.draw.RoundRectangleFigure.read(org.jhotdraw.xml.DOMInput)',0,'// EVENT HANDLING\r\n// PERSISTENCE\r\n@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    roundrect.arcwidth = in.getAttribute(\"arcWidth\", RoundRectangleFigure.DEFAULT_ARC);\r\n    roundrect.archeight = in.getAttribute(\"arcHeight\", RoundRectangleFigure.DEFAULT_ARC);\r\n}'),(920,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,244,'org.jhotdraw.draw.RoundRectangleFigure',2610,'org.jhotdraw.draw.RoundRectangleFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.addAttribute(\"arcWidth\", roundrect.arcwidth);\r\n    out.addAttribute(\"arcHeight\", roundrect.archeight);\r\n}'),(921,'Figure owner','org.jhotdraw.draw.Figure',174,245,'org.jhotdraw.draw.RoundRectangleRadiusHandle',2611,'org.jhotdraw.draw.RoundRectangleRadiusHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic RoundRectangleRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}'),(922,'RoundRectangleFigure owner','org.jhotdraw.draw.RoundRectangleFigure',244,246,'org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit',2620,'org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit.-init-(org.jhotdraw.draw.RoundRectangleFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'public RoundRectangleRadiusUndoableEdit(RoundRectangleFigure owner, Point2D.Double oldArc, Point2D.Double newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}'),(923,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,248,'org.jhotdraw.draw.SelectionTool',2627,'org.jhotdraw.draw.SelectionTool.activate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    tracker.activate(editor);\r\n}'),(924,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,248,'org.jhotdraw.draw.SelectionTool',2629,'org.jhotdraw.draw.SelectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'public void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    tracker.deactivate(editor);\r\n}'),(925,'Tool newTracker','org.jhotdraw.draw.Tool',262,248,'org.jhotdraw.draw.SelectionTool',2649,'org.jhotdraw.draw.SelectionTool.setTracker(org.jhotdraw.draw.Tool)',0,'protected void setTracker(Tool newTracker) {\r\n    if ((tracker) != null) {\r\n        tracker.deactivate(getEditor());\r\n        tracker.removeToolListener(this);\r\n    }\r\n    tracker = newTracker;\r\n    if ((tracker) != null) {\r\n        tracker.activate(getEditor());\r\n        tracker.addToolListener(this);\r\n    }\r\n}'),(926,'Handle handle','org.jhotdraw.draw.Handle',191,248,'org.jhotdraw.draw.SelectionTool',2632,'org.jhotdraw.draw.SelectionTool.getHandleTracker(org.jhotdraw.draw.Handle)',0,'/**\r\n * Method to get a {@code HandleTracker} which handles user interaction\r\n * for the specified handle.\r\n */\r\nprotected HandleTracker getHandleTracker(Handle handle) {\r\n    if ((handleTracker) == null) {\r\n        handleTracker = new DefaultHandleTracker();\r\n    }\r\n    handleTracker.setHandles(handle, getView().getCompatibleHandles(handle));\r\n    return handleTracker;\r\n}'),(927,'org.jhotdraw.draw.HandleTracker','org.jhotdraw.draw.HandleTracker',196,248,'org.jhotdraw.draw.SelectionTool',2632,'org.jhotdraw.draw.SelectionTool.getHandleTracker(org.jhotdraw.draw.Handle)',1,'/**\r\n * Method to get a {@code HandleTracker} which handles user interaction\r\n * for the specified handle.\r\n */\r\nprotected HandleTracker getHandleTracker(Handle handle) {\r\n    if ((handleTracker) == null) {\r\n        handleTracker = new DefaultHandleTracker();\r\n    }\r\n    handleTracker.setHandles(handle, getView().getCompatibleHandles(handle));\r\n    return handleTracker;\r\n}'),(928,'Figure f','org.jhotdraw.draw.Figure',174,248,'org.jhotdraw.draw.SelectionTool',2631,'org.jhotdraw.draw.SelectionTool.getDragTracker(org.jhotdraw.draw.Figure)',0,'/**\r\n * Method to get a {@code DragTracker} which handles user interaction\r\n * for dragging the specified figure.\r\n */\r\nprotected DragTracker getDragTracker(Figure f) {\r\n    if ((dragTracker) == null) {\r\n        dragTracker = new DefaultDragTracker();\r\n    }\r\n    dragTracker.setDraggedFigure(f);\r\n    return dragTracker;\r\n}'),(929,'org.jhotdraw.draw.DragTracker','org.jhotdraw.draw.DragTracker',167,248,'org.jhotdraw.draw.SelectionTool',2631,'org.jhotdraw.draw.SelectionTool.getDragTracker(org.jhotdraw.draw.Figure)',1,'/**\r\n * Method to get a {@code DragTracker} which handles user interaction\r\n * for dragging the specified figure.\r\n */\r\nprotected DragTracker getDragTracker(Figure f) {\r\n    if ((dragTracker) == null) {\r\n        dragTracker = new DefaultDragTracker();\r\n    }\r\n    dragTracker.setDraggedFigure(f);\r\n    return dragTracker;\r\n}'),(930,'HandleTracker newValue','org.jhotdraw.draw.HandleTracker',196,248,'org.jhotdraw.draw.SelectionTool',2646,'org.jhotdraw.draw.SelectionTool.setHandleTracker(org.jhotdraw.draw.HandleTracker)',0,'/**\r\n * Method to set a {@code HandleTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultHandleTracker}.\r\n */\r\npublic void setHandleTracker(HandleTracker newValue) {\r\n    handleTracker = newValue;\r\n}'),(931,'SelectAreaTracker newValue','org.jhotdraw.draw.SelectAreaTracker',247,248,'org.jhotdraw.draw.SelectionTool',2647,'org.jhotdraw.draw.SelectionTool.setSelectAreaTracker(org.jhotdraw.draw.SelectAreaTracker)',0,'/**\r\n * Method to set a {@code SelectAreaTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultSelectAreaTracker}.\r\n */\r\npublic void setSelectAreaTracker(SelectAreaTracker newValue) {\r\n    selectAreaTracker = newValue;\r\n}'),(932,'DragTracker newValue','org.jhotdraw.draw.DragTracker',167,248,'org.jhotdraw.draw.SelectionTool',2645,'org.jhotdraw.draw.SelectionTool.setDragTracker(org.jhotdraw.draw.DragTracker)',0,'/**\r\n * Method to set a {@code DragTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultDragTracker}.\r\n */\r\npublic void setDragTracker(DragTracker newValue) {\r\n    dragTracker = newValue;\r\n}'),(933,'ToolEvent event','org.jhotdraw.draw.ToolEvent',263,248,'org.jhotdraw.draw.SelectionTool',2652,'org.jhotdraw.draw.SelectionTool.toolStarted(org.jhotdraw.draw.ToolEvent)',0,'public void toolStarted(ToolEvent event) {\r\n}'),(934,'ToolEvent event','org.jhotdraw.draw.ToolEvent',263,248,'org.jhotdraw.draw.SelectionTool',2651,'org.jhotdraw.draw.SelectionTool.toolDone(org.jhotdraw.draw.ToolEvent)',0,'public void toolDone(ToolEvent event) {\r\n    // Empty\r\n    Tool newTracker = getSelectAreaTracker();\r\n    if (newTracker != null) {\r\n        if ((tracker) != null) {\r\n            tracker.deactivate(getEditor());\r\n            tracker.removeToolListener(this);\r\n        }\r\n        tracker = newTracker;\r\n        tracker.activate(getEditor());\r\n        tracker.addToolListener(this);\r\n    }\r\n    fireToolDone();\r\n}'),(935,'ToolEvent e','org.jhotdraw.draw.ToolEvent',263,248,'org.jhotdraw.draw.SelectionTool',2628,'org.jhotdraw.draw.SelectionTool.areaInvalidated(org.jhotdraw.draw.ToolEvent)',0,'/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(ToolEvent e) {\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}'),(936,'Drawing prototype','org.jhotdraw.draw.Drawing',168,249,'org.jhotdraw.draw.SerializationInputOutputFormat',2654,'org.jhotdraw.draw.SerializationInputOutputFormat.-init-(java.lang.String,java.lang.String,org.jhotdraw.draw.Drawing)',0,'/**\r\n * Creates a new instance using the specified parameters.\r\n */\r\npublic SerializationInputOutputFormat(String description, String fileExtension, Drawing prototype) {\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.mimeType = DataFlavor.javaSerializedObjectMimeType;\r\n    this.prototype = prototype;\r\n    this.dataFlavor = new DataFlavor(prototype.getClass(), description);\r\n}'),(937,'Drawing drawing','org.jhotdraw.draw.Drawing',168,249,'org.jhotdraw.draw.SerializationInputOutputFormat',2663,'org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(938,'Drawing drawing','org.jhotdraw.draw.Drawing',168,249,'org.jhotdraw.draw.SerializationInputOutputFormat',2664,'org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(939,'Drawing drawing','org.jhotdraw.draw.Drawing',168,249,'org.jhotdraw.draw.SerializationInputOutputFormat',2665,'org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'@SuppressWarnings(\"unchecked\")\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    try {\r\n        ObjectInputStream oin = new ObjectInputStream(in);\r\n        Drawing d = ((Drawing) (oin.readObject()));\r\n        if (replace) {\r\n            for (Map.Entry<AttributeKey, Object> e : d.getAttributes().entrySet()) {\r\n                e.getKey().basicSet(drawing, e.getValue());\r\n            }\r\n        }\r\n        for (Figure f : d.getChildren()) {\r\n            drawing.add(f);\r\n        }\r\n    } catch (ClassNotFoundException ex) {\r\n        IOException ioe = new IOException(\"Couldnt read drawing.\");\r\n        ioe.initCause(ex);\r\n        throw ioe;\r\n    }\r\n}'),(940,'Drawing drawing','org.jhotdraw.draw.Drawing',168,249,'org.jhotdraw.draw.SerializationInputOutputFormat',2662,'org.jhotdraw.draw.SerializationInputOutputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)',0,'@SuppressWarnings(\"unchecked\")\r\npublic void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    try {\r\n        Drawing d = ((Drawing) (t.getTransferData(dataFlavor)));\r\n        if (replace) {\r\n            for (Map.Entry<AttributeKey, Object> e : d.getAttributes().entrySet()) {\r\n                e.getKey().basicSet(drawing, e.getValue());\r\n            }\r\n        }\r\n        for (Figure f : d.getChildren()) {\r\n            drawing.add(f);\r\n        }\r\n    } catch (Throwable th) {\r\n        th.printStackTrace();\r\n    }\r\n}'),(941,'Drawing drawing','org.jhotdraw.draw.Drawing',168,249,'org.jhotdraw.draw.SerializationInputOutputFormat',2666,'org.jhotdraw.draw.SerializationInputOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(942,'Drawing drawing','org.jhotdraw.draw.Drawing',168,249,'org.jhotdraw.draw.SerializationInputOutputFormat',2667,'org.jhotdraw.draw.SerializationInputOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)',0,'public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    ObjectOutputStream oout = new ObjectOutputStream(out);\r\n    oout.writeObject(drawing);\r\n    oout.flush();\r\n}'),(943,'Drawing drawing','org.jhotdraw.draw.Drawing',168,249,'org.jhotdraw.draw.SerializationInputOutputFormat',2656,'org.jhotdraw.draw.SerializationInputOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)',0,'@SuppressWarnings(\"unchecked\")\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    final Drawing d = ((Drawing) (prototype.clone()));\r\n    HashMap<Figure, Figure> originalToDuplicateMap = new HashMap<Figure, Figure>(figures.size());\r\n    final ArrayList<Figure> duplicates = new ArrayList<Figure>(figures.size());\r\n    for (Figure f : figures) {\r\n        Figure df = ((Figure) (f.clone()));\r\n        d.add(df);\r\n        duplicates.add(df);\r\n        originalToDuplicateMap.put(f, df);\r\n    }\r\n    for (Figure f : duplicates) {\r\n        f.remap(originalToDuplicateMap, true);\r\n    }\r\n    return new AbstractTransferable(dataFlavor) {\r\n        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n            if (isDataFlavorSupported(flavor)) {\r\n                return d;\r\n            } else {\r\n                throw new UnsupportedFlavorException(flavor);\r\n            }\r\n        }\r\n    };\r\n}'),(944,'AbstractFigure owner','org.jhotdraw.draw.AbstractFigure',100,250,'org.jhotdraw.draw.SetBoundsEdit',2668,'org.jhotdraw.draw.SetBoundsEdit.-init-(org.jhotdraw.draw.AbstractFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SetBoundsEdit(AbstractFigure owner, Point2D.Double oldAnchor, Point2D.Double oldLead, Point2D.Double newAnchor, Point2D.Double newLead) {\r\n    this.owner = owner;\r\n    this.oldAnchor = oldAnchor;\r\n    this.oldLead = oldLead;\r\n    this.newAnchor = newAnchor;\r\n    this.newLead = newLead;\r\n}'),(945,'BezierPath path','org.jhotdraw.geom.BezierPath',343,251,'org.jhotdraw.draw.SlantedLiner',2677,'org.jhotdraw.draw.SlantedLiner.createHandles(org.jhotdraw.geom.BezierPath)',0,'public Collection<Handle> createHandles(BezierPath path) {\r\n    return null;\r\n}'),(946,'ConnectionFigure figure','org.jhotdraw.draw.ConnectionFigure',142,251,'org.jhotdraw.draw.SlantedLiner',2678,'org.jhotdraw.draw.SlantedLiner.lineout(org.jhotdraw.draw.ConnectionFigure)',0,'public void lineout(ConnectionFigure figure) {\r\n    BezierPath path = ((LineConnectionFigure) (figure)).getBezierPath();\r\n    Connector start = figure.getStartConnector();\r\n    Connector end = figure.getEndConnector();\r\n    if (((start == null) || (end == null)) || (path == null)) {\r\n        return;\r\n    }\r\n    // Special treatment if the connection connects the same figure\r\n    if ((figure.getStartFigure()) == (figure.getEndFigure())) {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 5) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 5) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            soutcode = Geom.outcode(sb, eb);\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            eoutcode = Geom.outcode(sb, eb);\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        switch (soutcode) {\r\n            case Geom.OUT_TOP :\r\n                eoutcode = Geom.OUT_LEFT;\r\n                break;\r\n            case Geom.OUT_RIGHT :\r\n                eoutcode = Geom.OUT_TOP;\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n                eoutcode = Geom.OUT_RIGHT;\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                eoutcode = Geom.OUT_BOTTOM;\r\n                break;\r\n            default :\r\n                eoutcode = Geom.OUT_TOP;\r\n                soutcode = Geom.OUT_RIGHT;\r\n                break;\r\n        }\r\n        path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (slantSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (slantSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(3).moveTo(((ep.x) + (slantSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(3).moveTo(((ep.x) - (slantSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) + (slantSize)));\r\n                } else {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        switch (soutcode) {\r\n            case Geom.OUT_RIGHT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_TOP :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n            default :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n        }\r\n        // Regular treatment if the connection connects to two different figures\r\n    } else {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 4) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 4) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            if ((sp.x) <= (sb.x)) {\r\n                soutcode = Geom.OUT_LEFT;\r\n            } else\r\n                if ((sp.y) <= (sb.y)) {\r\n                    soutcode = Geom.OUT_TOP;\r\n                } else\r\n                    if ((sp.x) >= ((sb.x) + (sb.width))) {\r\n                        soutcode = Geom.OUT_RIGHT;\r\n                    } else\r\n                        if ((sp.y) >= ((sb.y) + (sb.height))) {\r\n                            soutcode = Geom.OUT_BOTTOM;\r\n                        } else {\r\n                            soutcode = Geom.outcode(sb, eb);\r\n                        }\r\n\r\n\r\n\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            if ((ep.x) <= (eb.x)) {\r\n                eoutcode = Geom.OUT_LEFT;\r\n            } else\r\n                if ((ep.y) <= (eb.y)) {\r\n                    eoutcode = Geom.OUT_TOP;\r\n                } else\r\n                    if ((ep.x) >= ((eb.x) + (eb.width))) {\r\n                        eoutcode = Geom.OUT_RIGHT;\r\n                    } else\r\n                        if ((ep.y) >= ((eb.y) + (eb.height))) {\r\n                            eoutcode = Geom.OUT_BOTTOM;\r\n                        } else {\r\n                            eoutcode = Geom.outcode(sb, eb);\r\n                        }\r\n\r\n\r\n\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (slantSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (slantSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(2).moveTo(((ep.x) + (slantSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(2).moveTo(((ep.x) - (slantSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(2).moveTo(ep.x, ((ep.y) + (slantSize)));\r\n                } else {\r\n                    path.get(2).moveTo(ep.x, ((ep.y) - (slantSize)));\r\n                }\r\n\r\n\r\n    }\r\n    // Ensure all path nodes are straight\r\n    for (BezierPath.Node node : path) {\r\n        node.setMask(BezierPath.C0_MASK);\r\n    }\r\n    path.invalidatePath();\r\n}'),(947,'DOMInput in','org.jhotdraw.xml.DOMInput',650,251,'org.jhotdraw.draw.SlantedLiner',2679,'org.jhotdraw.draw.SlantedLiner.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) {\r\n    slantSize = in.getAttribute(\"slant\", 20.0);\r\n}'),(948,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,251,'org.jhotdraw.draw.SlantedLiner',2680,'org.jhotdraw.draw.SlantedLiner.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) {\r\n    out.addAttribute(\"slant\", slantSize);\r\n}'),(949,'Figure owner','org.jhotdraw.draw.Figure',174,252,'org.jhotdraw.draw.StickyRectangleConnector',2682,'org.jhotdraw.draw.StickyRectangleConnector.-init-(org.jhotdraw.draw.Figure)',0,'public StickyRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}'),(950,'Figure owner','org.jhotdraw.draw.Figure',174,252,'org.jhotdraw.draw.StickyRectangleConnector',2683,'org.jhotdraw.draw.StickyRectangleConnector.-init-(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'public StickyRectangleConnector(Figure owner, Point2D.Double p) {\r\n    super(owner);\r\n    this.angle = ((float) (Geom.pointToAngle(owner.getBounds(), p)));\r\n}'),(951,'Figure target','org.jhotdraw.draw.Figure',174,252,'org.jhotdraw.draw.StickyRectangleConnector',2684,'org.jhotdraw.draw.StickyRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)',0,'@Override\r\nprotected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    return Geom.angleToPoint(target.getBounds(), angle);\r\n}'),(952,'DOMInput in','org.jhotdraw.xml.DOMInput',650,252,'org.jhotdraw.draw.StickyRectangleConnector',2689,'org.jhotdraw.draw.StickyRectangleConnector.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    angle = ((float) (in.getAttribute(\"angle\", 0.0)));\r\n}'),(953,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,252,'org.jhotdraw.draw.StickyRectangleConnector',2692,'org.jhotdraw.draw.StickyRectangleConnector.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.addAttribute(\"angle\", angle);\r\n}'),(954,'TextHolderFigure prototype','org.jhotdraw.draw.TextHolderFigure',259,253,'org.jhotdraw.draw.TextAreaCreationTool',2693,'org.jhotdraw.draw.TextAreaCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TextAreaCreationTool(TextHolderFigure prototype) {\r\n    super(prototype);\r\n}'),(955,'TextHolderFigure prototype','org.jhotdraw.draw.TextHolderFigure',259,253,'org.jhotdraw.draw.TextAreaCreationTool',2694,'org.jhotdraw.draw.TextAreaCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure,java.util.Map)',0,'public TextAreaCreationTool(TextHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}'),(956,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,253,'org.jhotdraw.draw.TextAreaCreationTool',2699,'org.jhotdraw.draw.TextAreaCreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}'),(957,'Figure createdFigure','org.jhotdraw.draw.Figure',174,253,'org.jhotdraw.draw.TextAreaCreationTool',2698,'org.jhotdraw.draw.TextAreaCreationTool.creationFinished(org.jhotdraw.draw.Figure)',0,'/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\n@Override\r\nprotected void creationFinished(Figure createdFigure) {\r\n    getView().clearSelection();\r\n    getView().addToSelection(createdFigure);\r\n    beginEdit(((TextHolderFigure) (createdFigure)));\r\n}'),(958,'TextHolderFigure textHolder','org.jhotdraw.draw.TextHolderFigure',259,253,'org.jhotdraw.draw.TextAreaCreationTool',2697,'org.jhotdraw.draw.TextAreaCreationTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)',0,'protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textArea) == null) {\r\n        textArea = new FloatingTextArea();\r\n        // textArea.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textArea.createOverlay(getView(), textHolder);\r\n    textArea.setBounds(getFieldBounds(textHolder), textHolder.getText());\r\n    textArea.requestFocus();\r\n    typingTarget = textHolder;\r\n}'),(959,'TextHolderFigure figure','org.jhotdraw.draw.TextHolderFigure',259,253,'org.jhotdraw.draw.TextAreaCreationTool',2702,'org.jhotdraw.draw.TextAreaCreationTool.getFieldBounds(org.jhotdraw.draw.TextHolderFigure)',0,'private Rectangle2D.Double getFieldBounds(TextHolderFigure figure) {\r\n    Rectangle2D.Double r = figure.getDrawingArea();\r\n    Insets2D.Double insets = figure.getInsets();\r\n    insets.subtractTo(r);\r\n    // FIXME - Find a way to determine the parameters for grow.\r\n    // r.grow(1,2);\r\n    // r.width += 16;\r\n    r.x -= 1;\r\n    r.y -= 2;\r\n    r.width += 18;\r\n    r.height += 4;\r\n    return r;\r\n}'),(960,'TextHolderFigure typingTarget','org.jhotdraw.draw.TextHolderFigure',259,254,'org.jhotdraw.draw.TextAreaEditingTool',2705,'org.jhotdraw.draw.TextAreaEditingTool.-init-(org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TextAreaEditingTool(TextHolderFigure typingTarget) {\r\n    this.typingTarget = typingTarget;\r\n}'),(961,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,254,'org.jhotdraw.draw.TextAreaEditingTool',2709,'org.jhotdraw.draw.TextAreaEditingTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}'),(962,'TextHolderFigure textHolder','org.jhotdraw.draw.TextHolderFigure',259,254,'org.jhotdraw.draw.TextAreaEditingTool',2708,'org.jhotdraw.draw.TextAreaEditingTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)',0,'protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textArea) == null) {\r\n        textArea = new FloatingTextArea();\r\n        // textArea.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textArea.createOverlay(getView(), textHolder);\r\n    textArea.setBounds(getFieldBounds(textHolder), textHolder.getText());\r\n    textArea.requestFocus();\r\n    typingTarget = textHolder;\r\n}'),(963,'TextHolderFigure figure','org.jhotdraw.draw.TextHolderFigure',259,254,'org.jhotdraw.draw.TextAreaEditingTool',2712,'org.jhotdraw.draw.TextAreaEditingTool.getFieldBounds(org.jhotdraw.draw.TextHolderFigure)',0,'private Rectangle2D.Double getFieldBounds(TextHolderFigure figure) {\r\n    Rectangle2D.Double r = figure.getDrawingArea();\r\n    Insets2D.Double insets = figure.getInsets();\r\n    insets.subtractTo(r);\r\n    // FIXME - Find a way to determine the parameters for grow.\r\n    // r.grow(1,2);\r\n    // r.width += 16;\r\n    r.x -= 1;\r\n    r.y -= 2;\r\n    r.width += 18;\r\n    r.height += 4;\r\n    return r;\r\n}'),(964,'DOMInput in','org.jhotdraw.xml.DOMInput',650,255,'org.jhotdraw.draw.TextAreaFigure',2742,'org.jhotdraw.draw.TextAreaFigure.readBounds(org.jhotdraw.xml.DOMInput)',0,'protected void readBounds(DOMInput in) throws IOException {\r\n    bounds.x = in.getAttribute(\"x\", 0.0);\r\n    bounds.y = in.getAttribute(\"y\", 0.0);\r\n    bounds.width = in.getAttribute(\"w\", 0.0);\r\n    bounds.height = in.getAttribute(\"h\", 0.0);\r\n}'),(965,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,255,'org.jhotdraw.draw.TextAreaFigure',2750,'org.jhotdraw.draw.TextAreaFigure.writeBounds(org.jhotdraw.xml.DOMOutput)',0,'protected void writeBounds(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"x\", bounds.x);\r\n    out.addAttribute(\"y\", bounds.y);\r\n    out.addAttribute(\"w\", bounds.width);\r\n    out.addAttribute(\"h\", bounds.height);\r\n}'),(966,'DOMInput in','org.jhotdraw.xml.DOMInput',650,255,'org.jhotdraw.draw.TextAreaFigure',2741,'org.jhotdraw.draw.TextAreaFigure.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    readBounds(in);\r\n    readAttributes(in);\r\n}'),(967,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,255,'org.jhotdraw.draw.TextAreaFigure',2749,'org.jhotdraw.draw.TextAreaFigure.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    writeBounds(out);\r\n    writeAttributes(out);\r\n}'),(968,'TextHolderFigure prototype','org.jhotdraw.draw.TextHolderFigure',259,256,'org.jhotdraw.draw.TextCreationTool',2751,'org.jhotdraw.draw.TextCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TextCreationTool(TextHolderFigure prototype) {\r\n    super(prototype);\r\n}'),(969,'TextHolderFigure prototype','org.jhotdraw.draw.TextHolderFigure',259,256,'org.jhotdraw.draw.TextCreationTool',2752,'org.jhotdraw.draw.TextCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TextCreationTool(TextHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}'),(970,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,256,'org.jhotdraw.draw.TextCreationTool',2757,'org.jhotdraw.draw.TextCreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}'),(971,'TextHolderFigure textHolder','org.jhotdraw.draw.TextHolderFigure',259,256,'org.jhotdraw.draw.TextCreationTool',2755,'org.jhotdraw.draw.TextCreationTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)',0,'protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textField) == null) {\r\n        textField = new FloatingTextField();\r\n        textField.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textField.createOverlay(getView(), textHolder);\r\n    textField.requestFocus();\r\n    typingTarget = textHolder;\r\n}'),(972,'Figure createdFigure','org.jhotdraw.draw.Figure',174,256,'org.jhotdraw.draw.TextCreationTool',2756,'org.jhotdraw.draw.TextCreationTool.creationFinished(org.jhotdraw.draw.Figure)',0,'@Override\r\nprotected void creationFinished(Figure createdFigure) {\r\n    beginEdit(((TextHolderFigure) (createdFigure)));\r\n    updateCursor(getView(), new Point(0, 0));\r\n}'),(973,'DrawingView view','org.jhotdraw.draw.DrawingView',171,256,'org.jhotdraw.draw.TextCreationTool',2764,'org.jhotdraw.draw.TextCreationTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)',0,'@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor((isEditing() ? Cursor.DEFAULT_CURSOR : Cursor.CROSSHAIR_CURSOR)));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}'),(974,'TextHolderFigure typingTarget','org.jhotdraw.draw.TextHolderFigure',259,257,'org.jhotdraw.draw.TextEditingTool',2765,'org.jhotdraw.draw.TextEditingTool.-init-(org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TextEditingTool(TextHolderFigure typingTarget) {\r\n    this.typingTarget = typingTarget;\r\n}'),(975,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,257,'org.jhotdraw.draw.TextEditingTool',2769,'org.jhotdraw.draw.TextEditingTool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}'),(976,'TextHolderFigure textHolder','org.jhotdraw.draw.TextHolderFigure',259,257,'org.jhotdraw.draw.TextEditingTool',2768,'org.jhotdraw.draw.TextEditingTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)',0,'protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textField) == null) {\r\n        textField = new FloatingTextField();\r\n        textField.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textField.createOverlay(getView(), textHolder);\r\n    textField.requestFocus();\r\n    typingTarget = textHolder;\r\n}'),(977,'DrawingView view','org.jhotdraw.draw.DrawingView',171,257,'org.jhotdraw.draw.TextEditingTool',2776,'org.jhotdraw.draw.TextEditingTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)',0,'@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor((isEditing() ? Cursor.DEFAULT_CURSOR : Cursor.CROSSHAIR_CURSOR)));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}'),(978,'DOMInput in','org.jhotdraw.xml.DOMInput',650,258,'org.jhotdraw.draw.TextFigure',2804,'org.jhotdraw.draw.TextFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    setBounds(new Point2D.Double(in.getAttribute(\"x\", 0.0), in.getAttribute(\"y\", 0.0)), new Point2D.Double(0, 0));\r\n    readAttributes(in);\r\n    readDecorator(in);\r\n    invalidate();\r\n}'),(979,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,258,'org.jhotdraw.draw.TextFigure',2812,'org.jhotdraw.draw.TextFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double b = getBounds();\r\n    out.addAttribute(\"x\", b.x);\r\n    out.addAttribute(\"y\", b.y);\r\n    writeAttributes(out);\r\n    writeDecorator(out);\r\n}'),(980,'TextHolderFigure prototype','org.jhotdraw.draw.TextHolderFigure',259,260,'org.jhotdraw.draw.TextInputFormat',2827,'org.jhotdraw.draw.TextInputFormat.-init-(org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates a new image output format for text, for a figure that can not.\r\n * hold multiple lines of text.\r\n */\r\npublic TextInputFormat(TextHolderFigure prototype) {\r\n    this(prototype, \"Text\", \"Text\", \"txt\", false);\r\n}'),(981,'TextHolderFigure prototype','org.jhotdraw.draw.TextHolderFigure',259,260,'org.jhotdraw.draw.TextInputFormat',2828,'org.jhotdraw.draw.TextInputFormat.-init-(org.jhotdraw.draw.TextHolderFigure,java.lang.String,java.lang.String,java.lang.String,boolean)',0,'/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * 		The format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * 		The format description to be used for the file filter.\r\n * @param fileExtension\r\n * 		The file extension to be used for file filter.\r\n * @param isMultiline\r\n * 		Set this to true, if the TextHolderFigure can hold\r\n * 		multiple lines of text. If this is true, multiple lines of text are\r\n * 		added to the same figure. If this is false, a new Figure is created for\r\n * 		each line of text.\r\n */\r\npublic TextInputFormat(TextHolderFigure prototype, String formatName, String description, String fileExtension, boolean isMultiline) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.isMultiline = isMultiline;\r\n}'),(982,'Drawing drawing','org.jhotdraw.draw.Drawing',168,260,'org.jhotdraw.draw.TextInputFormat',2835,'org.jhotdraw.draw.TextInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(983,'Drawing drawing','org.jhotdraw.draw.Drawing',168,260,'org.jhotdraw.draw.TextInputFormat',2836,'org.jhotdraw.draw.TextInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    read(new FileInputStream(file), drawing, replace);\r\n}'),(984,'Drawing drawing','org.jhotdraw.draw.Drawing',168,260,'org.jhotdraw.draw.TextInputFormat',2837,'org.jhotdraw.draw.TextInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAddAll(0, createTextHolderFigures(in));\r\n}'),(985,'Drawing drawing','org.jhotdraw.draw.Drawing',168,260,'org.jhotdraw.draw.TextInputFormat',2834,'org.jhotdraw.draw.TextInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    String text = ((String) (t.getTransferData(DataFlavor.stringFlavor)));\r\n    LinkedList<Figure> list = new LinkedList<Figure>();\r\n    if (isMultiline) {\r\n        TextHolderFigure figure = ((TextHolderFigure) (prototype.clone()));\r\n        figure.setText(text);\r\n        Dimension2DDouble s = figure.getPreferredSize();\r\n        figure.willChange();\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(s.width, s.height));\r\n        figure.changed();\r\n        list.add(figure);\r\n    } else {\r\n        double y = 0;\r\n        for (String line : text.split(\"\n\")) {\r\n            TextHolderFigure figure = ((TextHolderFigure) (prototype.clone()));\r\n            figure.setText(line);\r\n            Dimension2DDouble s = figure.getPreferredSize();\r\n            y += s.height;\r\n            figure.willChange();\r\n            figure.setBounds(new Point2D.Double(0, (0 + y)), new Point2D.Double(s.width, ((s.height) + y)));\r\n            figure.changed();\r\n            list.add(figure);\r\n        }\r\n    }\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(list);\r\n}'),(986,'TextHolderFigure owner','org.jhotdraw.draw.TextHolderFigure',259,261,'org.jhotdraw.draw.TextOverflowHandle',2838,'org.jhotdraw.draw.TextOverflowHandle.-init-(org.jhotdraw.draw.TextHolderFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TextOverflowHandle(TextHolderFigure owner) {\r\n    super(owner);\r\n}'),(987,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,262,'org.jhotdraw.draw.Tool',2847,'org.jhotdraw.draw.Tool.activate(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Activates the tool for the given editor. This method is called\r\n * whenever the user switches to this tool.\r\n */\r\npublic void activate(DrawingEditor editor);'),(988,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,262,'org.jhotdraw.draw.Tool',2849,'org.jhotdraw.draw.Tool.deactivate(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Deactivates the tool. This method is called whenever the user\r\n * switches to another tool.\r\n */\r\npublic void deactivate(DrawingEditor editor);'),(989,'ToolListener l','org.jhotdraw.draw.ToolListener',264,262,'org.jhotdraw.draw.Tool',2848,'org.jhotdraw.draw.Tool.addToolListener(org.jhotdraw.draw.ToolListener)',0,'/**\r\n * Adds a listener for this tool.\r\n */\r\nvoid addToolListener(ToolListener l);'),(990,'ToolListener l','org.jhotdraw.draw.ToolListener',264,262,'org.jhotdraw.draw.Tool',2857,'org.jhotdraw.draw.Tool.removeToolListener(org.jhotdraw.draw.ToolListener)',0,'/**\r\n * Removes a listener for this tool.\r\n */\r\nvoid removeToolListener(ToolListener l);'),(991,'DrawingView view','org.jhotdraw.draw.DrawingView',171,262,'org.jhotdraw.draw.Tool',2856,'org.jhotdraw.draw.Tool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)',0,'/**\r\n * Returns the tooltip text for a mouse event on a drawing view.\r\n *\r\n * @param view\r\n * 		A drawing view.\r\n * @param evt\r\n * 		A mouse event.\r\n * @return A tooltip text or null.\r\n */\r\npublic String getToolTipText(DrawingView view, MouseEvent evt);'),(992,'Tool src','org.jhotdraw.draw.Tool',262,263,'org.jhotdraw.draw.ToolEvent',2859,'org.jhotdraw.draw.ToolEvent.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingView,java.awt.Rectangle)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ToolEvent(Tool src, DrawingView view, Rectangle invalidatedArea) {\r\n    super(src);\r\n    this.view = view;\r\n    this.invalidatedArea = invalidatedArea;\r\n}'),(993,'DrawingView view','org.jhotdraw.draw.DrawingView',171,263,'org.jhotdraw.draw.ToolEvent',2859,'org.jhotdraw.draw.ToolEvent.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingView,java.awt.Rectangle)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ToolEvent(Tool src, DrawingView view, Rectangle invalidatedArea) {\r\n    super(src);\r\n    this.view = view;\r\n    this.invalidatedArea = invalidatedArea;\r\n}'),(994,'ToolEvent event','org.jhotdraw.draw.ToolEvent',263,264,'org.jhotdraw.draw.ToolListener',2865,'org.jhotdraw.draw.ToolListener.toolStarted(org.jhotdraw.draw.ToolEvent)',0,'/**\r\n * Informs the listener that a tool has starteds interacting with a\r\n * specific drawing view.\r\n */\r\nvoid toolStarted(ToolEvent event);'),(995,'ToolEvent event','org.jhotdraw.draw.ToolEvent',263,264,'org.jhotdraw.draw.ToolListener',2864,'org.jhotdraw.draw.ToolListener.toolDone(org.jhotdraw.draw.ToolEvent)',0,'/**\r\n * Informs the listener that a tool has done its interaction.\r\n * This method can be used to switch back to the default tool.\r\n */\r\nvoid toolDone(ToolEvent event);'),(996,'ToolEvent e','org.jhotdraw.draw.ToolEvent',263,264,'org.jhotdraw.draw.ToolListener',2863,'org.jhotdraw.draw.ToolListener.areaInvalidated(org.jhotdraw.draw.ToolEvent)',0,'/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(ToolEvent e);'),(997,'Figure figure','org.jhotdraw.draw.Figure',174,265,'org.jhotdraw.draw.TransformEdit',2866,'org.jhotdraw.draw.TransformEdit.-init-(org.jhotdraw.draw.Figure,java.awt.geom.AffineTransform)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TransformEdit(Figure figure, AffineTransform tx) {\r\n    figures = new LinkedList<Figure>();\r\n    ((LinkedList<Figure>) (figures)).add(figure);\r\n    this.tx = ((AffineTransform) (tx.clone()));\r\n}'),(998,'Figure owner','org.jhotdraw.draw.Figure',174,273,'org.jhotdraw.draw.TransformHandleKit$TransformHandle',2919,'org.jhotdraw.draw.TransformHandleKit$TransformHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'TransformHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}'),(999,'Locator loc','org.jhotdraw.draw.Locator',214,273,'org.jhotdraw.draw.TransformHandleKit$TransformHandle',2919,'org.jhotdraw.draw.TransformHandleKit$TransformHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)',0,'TransformHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}'),(1000,'Figure owner','org.jhotdraw.draw.Figure',174,267,'org.jhotdraw.draw.TransformHandleKit$NorthEastHandle',2895,'org.jhotdraw.draw.TransformHandleKit$NorthEastHandle.-init-(org.jhotdraw.draw.Figure)',0,'NorthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northEast());\r\n}'),(1001,'Figure owner','org.jhotdraw.draw.Figure',174,266,'org.jhotdraw.draw.TransformHandleKit$EastHandle',2891,'org.jhotdraw.draw.TransformHandleKit$EastHandle.-init-(org.jhotdraw.draw.Figure)',0,'EastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.east());\r\n}'),(1002,'Figure owner','org.jhotdraw.draw.Figure',174,268,'org.jhotdraw.draw.TransformHandleKit$NorthHandle',2899,'org.jhotdraw.draw.TransformHandleKit$NorthHandle.-init-(org.jhotdraw.draw.Figure)',0,'NorthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.north());\r\n}'),(1003,'Figure owner','org.jhotdraw.draw.Figure',174,269,'org.jhotdraw.draw.TransformHandleKit$NorthWestHandle',2903,'org.jhotdraw.draw.TransformHandleKit$NorthWestHandle.-init-(org.jhotdraw.draw.Figure)',0,'NorthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northWest());\r\n}'),(1004,'Figure owner','org.jhotdraw.draw.Figure',174,270,'org.jhotdraw.draw.TransformHandleKit$SouthEastHandle',2907,'org.jhotdraw.draw.TransformHandleKit$SouthEastHandle.-init-(org.jhotdraw.draw.Figure)',0,'SouthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southEast());\r\n}'),(1005,'Figure owner','org.jhotdraw.draw.Figure',174,271,'org.jhotdraw.draw.TransformHandleKit$SouthHandle',2911,'org.jhotdraw.draw.TransformHandleKit$SouthHandle.-init-(org.jhotdraw.draw.Figure)',0,'SouthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.south());\r\n}'),(1006,'Figure owner','org.jhotdraw.draw.Figure',174,272,'org.jhotdraw.draw.TransformHandleKit$SouthWestHandle',2915,'org.jhotdraw.draw.TransformHandleKit$SouthWestHandle.-init-(org.jhotdraw.draw.Figure)',0,'SouthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southWest());\r\n}'),(1007,'Figure owner','org.jhotdraw.draw.Figure',174,274,'org.jhotdraw.draw.TransformHandleKit$WestHandle',2929,'org.jhotdraw.draw.TransformHandleKit$WestHandle.-init-(org.jhotdraw.draw.Figure)',0,'WestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.west());\r\n}'),(1008,'Figure f','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2877,'org.jhotdraw.draw.TransformHandleKit.addCornerTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addCornerTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(TransformHandleKit.southEast(f));\r\n    handles.add(TransformHandleKit.southWest(f));\r\n    handles.add(TransformHandleKit.northEast(f));\r\n    handles.add(TransformHandleKit.northWest(f));\r\n}'),(1009,'Figure f','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2878,'org.jhotdraw.draw.TransformHandleKit.addEdgeTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addEdgeTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(TransformHandleKit.south(f));\r\n    handles.add(TransformHandleKit.north(f));\r\n    handles.add(TransformHandleKit.east(f));\r\n    handles.add(TransformHandleKit.west(f));\r\n}'),(1010,'Figure f','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2881,'org.jhotdraw.draw.TransformHandleKit.addScaleMoveTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Adds handles for scaling and moving a Figure.\r\n */\r\npublic static void addScaleMoveTransformHandles(Figure f, Collection<Handle> handles) {\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n}'),(1011,'Figure f','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2882,'org.jhotdraw.draw.TransformHandleKit.addTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, true, false));\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n    handles.add(new RotateHandle(f));\r\n}'),(1012,'Figure f','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2880,'org.jhotdraw.draw.TransformHandleKit.addGroupTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addGroupTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_DISABLED));\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n    handles.add(new RotateHandle(f));\r\n}'),(1013,'Figure f','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2879,'org.jhotdraw.draw.TransformHandleKit.addGroupHoverHandles(org.jhotdraw.draw.Figure,java.util.Collection)',0,'/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addGroupHoverHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_HOVER, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_HOVER, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_HOVER, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_HOVER, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_DISABLED));\r\n}'),(1014,'Figure owner','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2887,'org.jhotdraw.draw.TransformHandleKit.south(org.jhotdraw.draw.Figure)',0,'public static Handle south(Figure owner) {\r\n    return new TransformHandleKit.SouthHandle(owner);\r\n}'),(1015,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,275,'org.jhotdraw.draw.TransformHandleKit',2887,'org.jhotdraw.draw.TransformHandleKit.south(org.jhotdraw.draw.Figure)',1,'public static Handle south(Figure owner) {\r\n    return new TransformHandleKit.SouthHandle(owner);\r\n}'),(1016,'Figure owner','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2888,'org.jhotdraw.draw.TransformHandleKit.southEast(org.jhotdraw.draw.Figure)',0,'public static Handle southEast(Figure owner) {\r\n    return new TransformHandleKit.SouthEastHandle(owner);\r\n}'),(1017,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,275,'org.jhotdraw.draw.TransformHandleKit',2888,'org.jhotdraw.draw.TransformHandleKit.southEast(org.jhotdraw.draw.Figure)',1,'public static Handle southEast(Figure owner) {\r\n    return new TransformHandleKit.SouthEastHandle(owner);\r\n}'),(1018,'Figure owner','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2889,'org.jhotdraw.draw.TransformHandleKit.southWest(org.jhotdraw.draw.Figure)',0,'public static Handle southWest(Figure owner) {\r\n    return new TransformHandleKit.SouthWestHandle(owner);\r\n}'),(1019,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,275,'org.jhotdraw.draw.TransformHandleKit',2889,'org.jhotdraw.draw.TransformHandleKit.southWest(org.jhotdraw.draw.Figure)',1,'public static Handle southWest(Figure owner) {\r\n    return new TransformHandleKit.SouthWestHandle(owner);\r\n}'),(1020,'Figure owner','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2884,'org.jhotdraw.draw.TransformHandleKit.north(org.jhotdraw.draw.Figure)',0,'public static Handle north(Figure owner) {\r\n    return new TransformHandleKit.NorthHandle(owner);\r\n}'),(1021,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,275,'org.jhotdraw.draw.TransformHandleKit',2884,'org.jhotdraw.draw.TransformHandleKit.north(org.jhotdraw.draw.Figure)',1,'public static Handle north(Figure owner) {\r\n    return new TransformHandleKit.NorthHandle(owner);\r\n}'),(1022,'Figure owner','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2885,'org.jhotdraw.draw.TransformHandleKit.northEast(org.jhotdraw.draw.Figure)',0,'public static Handle northEast(Figure owner) {\r\n    return new TransformHandleKit.NorthEastHandle(owner);\r\n}'),(1023,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,275,'org.jhotdraw.draw.TransformHandleKit',2885,'org.jhotdraw.draw.TransformHandleKit.northEast(org.jhotdraw.draw.Figure)',1,'public static Handle northEast(Figure owner) {\r\n    return new TransformHandleKit.NorthEastHandle(owner);\r\n}'),(1024,'Figure owner','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2886,'org.jhotdraw.draw.TransformHandleKit.northWest(org.jhotdraw.draw.Figure)',0,'public static Handle northWest(Figure owner) {\r\n    return new TransformHandleKit.NorthWestHandle(owner);\r\n}'),(1025,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,275,'org.jhotdraw.draw.TransformHandleKit',2886,'org.jhotdraw.draw.TransformHandleKit.northWest(org.jhotdraw.draw.Figure)',1,'public static Handle northWest(Figure owner) {\r\n    return new TransformHandleKit.NorthWestHandle(owner);\r\n}'),(1026,'Figure owner','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2883,'org.jhotdraw.draw.TransformHandleKit.east(org.jhotdraw.draw.Figure)',0,'public static Handle east(Figure owner) {\r\n    return new TransformHandleKit.EastHandle(owner);\r\n}'),(1027,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,275,'org.jhotdraw.draw.TransformHandleKit',2883,'org.jhotdraw.draw.TransformHandleKit.east(org.jhotdraw.draw.Figure)',1,'public static Handle east(Figure owner) {\r\n    return new TransformHandleKit.EastHandle(owner);\r\n}'),(1028,'Figure owner','org.jhotdraw.draw.Figure',174,275,'org.jhotdraw.draw.TransformHandleKit',2890,'org.jhotdraw.draw.TransformHandleKit.west(org.jhotdraw.draw.Figure)',0,'public static Handle west(Figure owner) {\r\n    return new TransformHandleKit.WestHandle(owner);\r\n}'),(1029,'org.jhotdraw.draw.Handle','org.jhotdraw.draw.Handle',191,275,'org.jhotdraw.draw.TransformHandleKit',2890,'org.jhotdraw.draw.TransformHandleKit.west(org.jhotdraw.draw.Figure)',1,'public static Handle west(Figure owner) {\r\n    return new TransformHandleKit.WestHandle(owner);\r\n}'),(1030,'AttributeKeys.Orientation direction','org.jhotdraw.draw.AttributeKeys$Orientation',111,277,'org.jhotdraw.draw.TriangleFigure',2937,'org.jhotdraw.draw.TriangleFigure.-init-(org.jhotdraw.draw.AttributeKeys$Orientation)',0,'public TriangleFigure(AttributeKeys.Orientation direction) {\r\n    this(0, 0, 0, 0, direction);\r\n}'),(1031,'AttributeKeys.Orientation direction','org.jhotdraw.draw.AttributeKeys$Orientation',111,277,'org.jhotdraw.draw.TriangleFigure',2939,'org.jhotdraw.draw.TriangleFigure.-init-(double,double,double,double,org.jhotdraw.draw.AttributeKeys$Orientation)',0,'public TriangleFigure(double x, double y, double width, double height, AttributeKeys.Orientation direction) {\r\n    rectangle = new Rectangle2D.Double(x, y, width, height);\r\n    /* setFillColor(Color.white);\n    setStrokeColor(Color.black);\n     */\r\n    AttributeKeys.ORIENTATION.basicSet(this, direction);\r\n}'),(1032,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,277,'org.jhotdraw.draw.TriangleFigure',2947,'org.jhotdraw.draw.TriangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopTriangleConnector(this);\r\n}'),(1033,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,277,'org.jhotdraw.draw.TriangleFigure',2947,'org.jhotdraw.draw.TriangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopTriangleConnector(this);\r\n}'),(1034,'Connector c','org.jhotdraw.draw.Connector',145,277,'org.jhotdraw.draw.TriangleFigure',2946,'org.jhotdraw.draw.TriangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopTriangleConnector(this);\r\n}'),(1035,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,277,'org.jhotdraw.draw.TriangleFigure',2946,'org.jhotdraw.draw.TriangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopTriangleConnector(this);\r\n}'),(1036,'TriangleFigure owner','org.jhotdraw.draw.TriangleFigure',277,278,'org.jhotdraw.draw.TriangleRotationHandler',2955,'org.jhotdraw.draw.TriangleRotationHandler.-init-(org.jhotdraw.draw.TriangleFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TriangleRotationHandler(TriangleFigure owner) {\r\n    super(owner);\r\n}'),(1037,'Handle h','org.jhotdraw.draw.Handle',191,278,'org.jhotdraw.draw.TriangleRotationHandler',2959,'org.jhotdraw.draw.TriangleRotationHandler.isCombinableWith(org.jhotdraw.draw.Handle)',0,'public boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}'),(1038,'CompositeFigure layoutable','org.jhotdraw.draw.CompositeFigure',136,279,'org.jhotdraw.draw.VerticalLayouter',2964,'org.jhotdraw.draw.VerticalLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'public Rectangle2D.Double calculateLayout(CompositeFigure layoutable, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(layoutable);\r\n    if (layoutInsets == null) {\r\n        layoutInsets = new Insets2D.Double(0, 0, 0, 0);\r\n    }\r\n    Rectangle2D.Double layoutBounds = new Rectangle2D.Double(anchor.x, anchor.y, 0, 0);\r\n    for (Figure child : layoutable.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Dimension2DDouble preferredSize = child.getPreferredSize();\r\n            Insets2D.Double ins = getInsets(child);\r\n            layoutBounds.width = Math.max(layoutBounds.width, (((preferredSize.width) + (ins.left)) + (ins.right)));\r\n            layoutBounds.height += ((preferredSize.height) + (ins.top)) + (ins.bottom);\r\n        }\r\n    }\r\n    layoutBounds.width += (layoutInsets.left) + (layoutInsets.right);\r\n    layoutBounds.height += (layoutInsets.top) + (layoutInsets.bottom);\r\n    return layoutBounds;\r\n}'),(1039,'CompositeFigure layoutable','org.jhotdraw.draw.CompositeFigure',136,279,'org.jhotdraw.draw.VerticalLayouter',2965,'org.jhotdraw.draw.VerticalLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)',0,'public Rectangle2D.Double layout(CompositeFigure layoutable, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(layoutable);\r\n    AttributeKeys.Alignment compositeAlignment = AttributeKeys.COMPOSITE_ALIGNMENT.get(layoutable);\r\n    if (layoutInsets == null) {\r\n        layoutInsets = new Insets2D.Double();\r\n    }\r\n    Rectangle2D.Double layoutBounds = calculateLayout(layoutable, anchor, lead);\r\n    double y = (layoutBounds.y) + (layoutInsets.top);\r\n    for (Figure child : layoutable.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Insets2D.Double insets = getInsets(child);\r\n            double height = child.getPreferredSize().height;\r\n            double width = child.getPreferredSize().width;\r\n            switch (compositeAlignment) {\r\n                case LEADING :\r\n                    child.setBounds(new Point2D.Double((((layoutBounds.x) + (layoutInsets.left)) + (insets.left)), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (+(layoutInsets.left))) + (insets.left)) + width), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case TRAILING :\r\n                    child.setBounds(new Point2D.Double((((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)) - width), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case CENTER :\r\n                    child.setBounds(new Point2D.Double(((layoutBounds.x) + (((layoutBounds.width) - width) / 2.0)), (y + (insets.top))), new Point2D.Double(((layoutBounds.x) + (((layoutBounds.width) + width) / 2.0)), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case BLOCK :\r\n                default :\r\n                    child.setBounds(new Point2D.Double((((layoutBounds.x) + (layoutInsets.left)) + (insets.left)), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)), ((y + (insets.top)) + height)));\r\n                    break;\r\n            }\r\n            y += (height + (insets.top)) + (insets.bottom);\r\n        }\r\n    }\r\n    return layoutBounds;\r\n}'),(1040,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,280,'org.jhotdraw.draw.action.AbstractDrawingEditorAction',2967,'org.jhotdraw.draw.action.AbstractDrawingEditorAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractDrawingEditorAction(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n        updateEnabledState();\r\n    }\r\n}'),(1041,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,280,'org.jhotdraw.draw.action.AbstractDrawingEditorAction',2972,'org.jhotdraw.draw.action.AbstractDrawingEditorAction.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.removePropertyChangeListener(propertyChangeHandler);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n        updateEnabledState();\r\n    }\r\n}'),(1042,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,281,'org.jhotdraw.draw.action.AbstractDrawingViewAction',2976,'org.jhotdraw.draw.action.AbstractDrawingViewAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a view action which acts on the current view of the editor.\r\n */\r\npublic AbstractDrawingViewAction(DrawingEditor editor) {\r\n    setEditor(editor);\r\n}'),(1043,'DrawingView view','org.jhotdraw.draw.DrawingView',171,281,'org.jhotdraw.draw.action.AbstractDrawingViewAction',2977,'org.jhotdraw.draw.action.AbstractDrawingViewAction.-init-(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Creates a view action which acts on the specified view.\r\n */\r\npublic AbstractDrawingViewAction(DrawingView view) {\r\n    this.view = view;\r\n}'),(1044,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,281,'org.jhotdraw.draw.action.AbstractDrawingViewAction',2982,'org.jhotdraw.draw.action.AbstractDrawingViewAction.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'protected void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.removePropertyChangeListener(propertyChangeHandler);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n    }\r\n}'),(1045,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,283,'org.jhotdraw.draw.action.AbstractSelectedAction',2986,'org.jhotdraw.draw.action.AbstractSelectedAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates an action which acts on the selected figures on the current view\r\n * of the specified editor.\r\n */\r\npublic AbstractSelectedAction(DrawingEditor editor) {\r\n    setEditor(editor);\r\n    updateEnabledState();\r\n}'),(1046,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,282,'org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler',2996,'org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt) {\r\n    updateEnabledState();\r\n}'),(1047,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,283,'org.jhotdraw.draw.action.AbstractSelectedAction',2992,'org.jhotdraw.draw.action.AbstractSelectedAction.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor editor) {\r\n    if ((this.editor) != null) {\r\n        this.editor.removePropertyChangeListener(eventHandler);\r\n        if ((this.editor.getActiveView()) != null) {\r\n            this.editor.getActiveView().removeFigureSelectionListener(eventHandler);\r\n        }\r\n    }\r\n    this.editor = editor;\r\n    if ((this.editor) != null) {\r\n        this.editor.addPropertyChangeListener(eventHandler);\r\n        if ((this.editor.getActiveView()) != null) {\r\n            this.editor.getActiveView().addFigureSelectionListener(eventHandler);\r\n        }\r\n    }\r\n    updateEnabledState();\r\n}'),(1048,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,290,'org.jhotdraw.draw.action.AlignAction',2997,'org.jhotdraw.draw.action.AlignAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AlignAction(DrawingEditor editor) {\r\n    super(editor);\r\n}'),(1049,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,286,'org.jhotdraw.draw.action.AlignAction$North',3009,'org.jhotdraw.draw.action.AlignAction$North.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public North(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}'),(1050,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,286,'org.jhotdraw.draw.action.AlignAction$North',3010,'org.jhotdraw.draw.action.AlignAction$North.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public North(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}'),(1051,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,286,'org.jhotdraw.draw.action.AlignAction$North',3010,'org.jhotdraw.draw.action.AlignAction$North.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public North(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}'),(1052,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,284,'org.jhotdraw.draw.action.AlignAction$East',3003,'org.jhotdraw.draw.action.AlignAction$East.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public East(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignEast\");\r\n}'),(1053,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,284,'org.jhotdraw.draw.action.AlignAction$East',3004,'org.jhotdraw.draw.action.AlignAction$East.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public East(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignEast\");\r\n}'),(1054,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,284,'org.jhotdraw.draw.action.AlignAction$East',3004,'org.jhotdraw.draw.action.AlignAction$East.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public East(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignEast\");\r\n}'),(1055,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,289,'org.jhotdraw.draw.action.AlignAction$West',3018,'org.jhotdraw.draw.action.AlignAction$West.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public West(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignWest\");\r\n}'),(1056,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,289,'org.jhotdraw.draw.action.AlignAction$West',3019,'org.jhotdraw.draw.action.AlignAction$West.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public West(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignWest\");\r\n}'),(1057,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,289,'org.jhotdraw.draw.action.AlignAction$West',3019,'org.jhotdraw.draw.action.AlignAction$West.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public West(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignWest\");\r\n}'),(1058,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,287,'org.jhotdraw.draw.action.AlignAction$South',3012,'org.jhotdraw.draw.action.AlignAction$South.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public South(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignSouth\");\r\n}'),(1059,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,287,'org.jhotdraw.draw.action.AlignAction$South',3013,'org.jhotdraw.draw.action.AlignAction$South.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public South(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignSouth\");\r\n}'),(1060,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,287,'org.jhotdraw.draw.action.AlignAction$South',3013,'org.jhotdraw.draw.action.AlignAction$South.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public South(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignSouth\");\r\n}'),(1061,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,288,'org.jhotdraw.draw.action.AlignAction$Vertical',3015,'org.jhotdraw.draw.action.AlignAction$Vertical.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public Vertical(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignVertical\");\r\n}'),(1062,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,288,'org.jhotdraw.draw.action.AlignAction$Vertical',3016,'org.jhotdraw.draw.action.AlignAction$Vertical.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public Vertical(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignVertical\");\r\n}'),(1063,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,288,'org.jhotdraw.draw.action.AlignAction$Vertical',3016,'org.jhotdraw.draw.action.AlignAction$Vertical.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public Vertical(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignVertical\");\r\n}'),(1064,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,285,'org.jhotdraw.draw.action.AlignAction$Horizontal',3006,'org.jhotdraw.draw.action.AlignAction$Horizontal.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public Horizontal(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignHorizontal\");\r\n}'),(1065,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,285,'org.jhotdraw.draw.action.AlignAction$Horizontal',3007,'org.jhotdraw.draw.action.AlignAction$Horizontal.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public Horizontal(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignHorizontal\");\r\n}'),(1066,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,285,'org.jhotdraw.draw.action.AlignAction$Horizontal',3007,'org.jhotdraw.draw.action.AlignAction$Horizontal.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public Horizontal(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignHorizontal\");\r\n}'),(1067,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,291,'org.jhotdraw.draw.action.ApplyAttributesAction',3021,'org.jhotdraw.draw.action.ApplyAttributesAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ApplyAttributesAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.applyAttributes\");\r\n    setEnabled(true);\r\n}'),(1068,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,291,'org.jhotdraw.draw.action.ApplyAttributesAction',3024,'org.jhotdraw.draw.action.ApplyAttributesAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt) {\r\n    setEnabled(((getView().getSelectionCount()) == 1));\r\n}'),(1069,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,292,'org.jhotdraw.draw.action.AttributeAction',3026,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}'),(1070,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,292,'org.jhotdraw.draw.action.AttributeAction',3026,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}'),(1071,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,292,'org.jhotdraw.draw.action.AttributeAction',3027,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}'),(1072,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,292,'org.jhotdraw.draw.action.AttributeAction',3027,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}'),(1073,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,292,'org.jhotdraw.draw.action.AttributeAction',3028,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}'),(1074,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,292,'org.jhotdraw.draw.action.AttributeAction',3028,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}'),(1075,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,292,'org.jhotdraw.draw.action.AttributeAction',3029,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)',0,'public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}'),(1076,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,292,'org.jhotdraw.draw.action.AttributeAction',3029,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)',0,'public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}'),(1077,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,292,'org.jhotdraw.draw.action.AttributeAction',3030,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)',0,'public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    putValue(Actions.UNDO_PRESENTATION_NAME_KEY, key.getPresentationName());\r\n    setEnabled(true);\r\n}'),(1078,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,292,'org.jhotdraw.draw.action.AttributeAction',3030,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)',0,'public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    putValue(Actions.UNDO_PRESENTATION_NAME_KEY, key.getPresentationName());\r\n    setEnabled(true);\r\n}'),(1079,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,292,'org.jhotdraw.draw.action.AttributeAction',3031,'org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,java.util.Map,java.lang.String,javax.swing.Icon)',0,'public AttributeAction(DrawingEditor editor, Map<AttributeKey, Object> attributes, String name, Icon icon) {\r\n    super(editor);\r\n    this.attributes = (attributes == null) ? new HashMap<AttributeKey, Object>() : attributes;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    updateEnabledState();\r\n}'),(1080,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,293,'org.jhotdraw.draw.action.AttributeToggler',3036,'org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2) {\r\n    this(editor, key, value1, value2, null);\r\n}'),(1081,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,293,'org.jhotdraw.draw.action.AttributeToggler',3036,'org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2) {\r\n    this(editor, key, value1, value2, null);\r\n}'),(1082,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,293,'org.jhotdraw.draw.action.AttributeToggler',3037,'org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object,javax.swing.Action)',0,'public AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2, Action compatibleTextAction) {\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.value1 = value1;\r\n    this.value2 = value2;\r\n    this.compatibleTextAction = compatibleTextAction;\r\n}'),(1083,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,293,'org.jhotdraw.draw.action.AttributeToggler',3037,'org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object,javax.swing.Action)',0,'public AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2, Action compatibleTextAction) {\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.value1 = value1;\r\n    this.value2 = value2;\r\n    this.compatibleTextAction = compatibleTextAction;\r\n}'),(1084,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,294,'org.jhotdraw.draw.action.BringToFrontAction',3042,'org.jhotdraw.draw.action.BringToFrontAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic BringToFrontAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, BringToFrontAction.ID);\r\n}'),(1085,'DrawingView view','org.jhotdraw.draw.DrawingView',171,294,'org.jhotdraw.draw.action.BringToFrontAction',3045,'org.jhotdraw.draw.action.BringToFrontAction.bringToFront(org.jhotdraw.draw.DrawingView,java.util.Collection)',0,'public static void bringToFront(DrawingView view, Collection<Figure> figures) {\r\n    Drawing drawing = view.getDrawing();\r\n    Iterator i = drawing.sort(figures).iterator();\r\n    while (i.hasNext()) {\r\n        Figure figure = ((Figure) (i.next()));\r\n        drawing.bringToFront(figure);\r\n    } \r\n}'),(1086,'Tool t','org.jhotdraw.draw.Tool',262,295,'org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener',3102,'org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)',0,'public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(1087,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,295,'org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener',3102,'org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)',0,'public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(1088,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3062,'org.jhotdraw.draw.action.ButtonFactory.createDrawingActions(org.jhotdraw.draw.DrawingEditor)',0,'public static Collection<Action> createDrawingActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}'),(1089,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3079,'org.jhotdraw.draw.action.ButtonFactory.createSelectionActions(org.jhotdraw.draw.DrawingEditor)',0,'public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor));\r\n    a.add(new UngroupAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(1090,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3055,'org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor) {\r\n    return ButtonFactory.addSelectionToolTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}'),(1091,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3056,'org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)',0,'public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    Tool selectionTool = new DelegationSelectionTool(drawingActions, selectionActions);\r\n    return ButtonFactory.addSelectionToolTo(tb, editor, selectionTool);\r\n}'),(1092,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3057,'org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool)',0,'public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor, Tool selectionTool) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JToggleButton t;\r\n    Tool tool;\r\n    HashMap<String, Object> attributes;\r\n    ButtonGroup group;\r\n    if ((tb.getClientProperty(\"toolButtonGroup\")) instanceof ButtonGroup) {\r\n        group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    } else {\r\n        group = new ButtonGroup();\r\n        tb.putClientProperty(\"toolButtonGroup\", group);\r\n    }\r\n    // Selection tool\r\n    editor.setTool(selectionTool);\r\n    t = new JToggleButton();\r\n    final JToggleButton defaultToolButton = t;\r\n    ToolListener toolHandler;\r\n    if ((tb.getClientProperty(\"toolHandler\")) instanceof ToolListener) {\r\n        toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    } else {\r\n        toolHandler = new ToolListener() {\r\n            public void toolStarted(ToolEvent event) {\r\n            }\r\n\r\n            public void toolDone(ToolEvent event) {\r\n                defaultToolButton.setSelected(true);\r\n            }\r\n\r\n            public void areaInvalidated(ToolEvent e) {\r\n            }\r\n        };\r\n        tb.putClientProperty(\"toolHandler\", toolHandler);\r\n    }\r\n    labels.configureToolBarButton(t, \"selectionTool\");\r\n    t.setSelected(true);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(selectionTool, editor));\r\n    t.setFocusable(false);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}'),(1093,'Tool selectionTool','org.jhotdraw.draw.Tool',262,296,'org.jhotdraw.draw.action.ButtonFactory',3057,'org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool)',0,'public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor, Tool selectionTool) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JToggleButton t;\r\n    Tool tool;\r\n    HashMap<String, Object> attributes;\r\n    ButtonGroup group;\r\n    if ((tb.getClientProperty(\"toolButtonGroup\")) instanceof ButtonGroup) {\r\n        group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    } else {\r\n        group = new ButtonGroup();\r\n        tb.putClientProperty(\"toolButtonGroup\", group);\r\n    }\r\n    // Selection tool\r\n    editor.setTool(selectionTool);\r\n    t = new JToggleButton();\r\n    final JToggleButton defaultToolButton = t;\r\n    ToolListener toolHandler;\r\n    if ((tb.getClientProperty(\"toolHandler\")) instanceof ToolListener) {\r\n        toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    } else {\r\n        toolHandler = new ToolListener() {\r\n            public void toolStarted(ToolEvent event) {\r\n            }\r\n\r\n            public void toolDone(ToolEvent event) {\r\n                defaultToolButton.setSelected(true);\r\n            }\r\n\r\n            public void areaInvalidated(ToolEvent e) {\r\n            }\r\n        };\r\n        tb.putClientProperty(\"toolHandler\", toolHandler);\r\n    }\r\n    labels.configureToolBarButton(t, \"selectionTool\");\r\n    t.setSelected(true);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(selectionTool, editor));\r\n    t.setFocusable(false);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}'),(1094,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3059,'org.jhotdraw.draw.action.ButtonFactory.addToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Method addSelectionToolTo must have been invoked prior to this on the\r\n * JToolBar.\r\n */\r\npublic static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor, Tool tool, String labelKey, ResourceBundleUtil labels) {\r\n    ButtonGroup group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    ToolListener toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    JToggleButton t = new JToggleButton();\r\n    labels.configureToolBarButton(t, labelKey);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(tool, editor));\r\n    t.setFocusable(false);\r\n    tool.addToolListener(toolHandler);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}'),(1095,'Tool tool','org.jhotdraw.draw.Tool',262,296,'org.jhotdraw.draw.action.ButtonFactory',3059,'org.jhotdraw.draw.action.ButtonFactory.addToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Method addSelectionToolTo must have been invoked prior to this on the\r\n * JToolBar.\r\n */\r\npublic static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor, Tool tool, String labelKey, ResourceBundleUtil labels) {\r\n    ButtonGroup group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    ToolListener toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    JToggleButton t = new JToggleButton();\r\n    labels.configureToolBarButton(t, labelKey);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(tool, editor));\r\n    t.setFocusable(false);\r\n    tool.addToolListener(toolHandler);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}'),(1096,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3059,'org.jhotdraw.draw.action.ButtonFactory.addToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Method addSelectionToolTo must have been invoked prior to this on the\r\n * JToolBar.\r\n */\r\npublic static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor, Tool tool, String labelKey, ResourceBundleUtil labels) {\r\n    ButtonGroup group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    ToolListener toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    JToggleButton t = new JToggleButton();\r\n    labels.configureToolBarButton(t, labelKey);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(tool, editor));\r\n    t.setFocusable(false);\r\n    tool.addToolListener(toolHandler);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}'),(1097,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3060,'org.jhotdraw.draw.action.ButtonFactory.addZoomButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'public static void addZoomButtonsTo(JToolBar bar, final DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createZoomButton(editor));\r\n}'),(1098,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3099,'org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingEditor)',0,'public static AbstractButton createZoomButton(final DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JPopupButton zoomPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(zoomPopupButton, \"view.zoomFactor\");\r\n    zoomPopupButton.setFocusable(false);\r\n    if ((editor.getDrawingViews().size()) == 0) {\r\n        zoomPopupButton.setText(\"100 %\");\r\n    } else {\r\n        zoomPopupButton.setText((((int) ((editor.getDrawingViews().iterator().next().getScaleFactor()) * 100)) + \" %\"));\r\n    }\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == (DrawingEditor.ACTIVE_VIEW_PROPERTY)) {\r\n                if ((evt.getNewValue()) == null) {\r\n                    zoomPopupButton.setText(\"100 %\");\r\n                } else {\r\n                    zoomPopupButton.setText((((int) ((editor.getActiveView().getScaleFactor()) * 100)) + \" %\"));\r\n                }\r\n            }\r\n        }\r\n    });\r\n    double[] factors = new double[]{ 16, 8, 5, 4, 3, 2, 1.5, 1.25, 1, 0.75, 0.5, 0.25, 0.1 };\r\n    for (int i = 0; i < (factors.length); i++) {\r\n        zoomPopupButton.add(new ZoomEditorAction(editor, factors[i], zoomPopupButton) {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                super.actionPerformed(e);\r\n                zoomPopupButton.setText((((int) ((editor.getActiveView().getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        });\r\n    }\r\n    // zoomPopupButton.setPreferredSize(new Dimension(16,16));\r\n    zoomPopupButton.setFocusable(false);\r\n    return zoomPopupButton;\r\n}'),(1099,'DrawingView view','org.jhotdraw.draw.DrawingView',171,296,'org.jhotdraw.draw.action.ButtonFactory',3100,'org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingView)',0,'public static AbstractButton createZoomButton(DrawingView view) {\r\n    return ButtonFactory.createZoomButton(view, new double[]{ 5, 4, 3, 2, 1.5, 1.25, 1, 0.75, 0.5, 0.25, 0.1 });\r\n}'),(1100,'final DrawingView view','org.jhotdraw.draw.DrawingView',171,296,'org.jhotdraw.draw.action.ButtonFactory',3101,'org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingView,double[])',0,'public static AbstractButton createZoomButton(final DrawingView view, double[] factors) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JPopupButton zoomPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(zoomPopupButton, \"view.zoomFactor\");\r\n    zoomPopupButton.setFocusable(false);\r\n    zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == \"scaleFactor\") {\r\n                zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        }\r\n    });\r\n    for (int i = 0; i < (factors.length); i++) {\r\n        zoomPopupButton.add(new ZoomAction(view, factors[i], zoomPopupButton) {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                super.actionPerformed(e);\r\n                zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        });\r\n    }\r\n    // zoomPopupButton.setPreferredSize(new Dimension(16,16));\r\n    zoomPopupButton.setFocusable(false);\r\n    return zoomPopupButton;\r\n}'),(1101,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3051,'org.jhotdraw.draw.action.ButtonFactory.addAttributesButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\npublic static void addAttributesButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JButton b;\r\n    b = bar.add(new PickAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    b = bar.add(new ApplyAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    bar.addSeparator();\r\n    ButtonFactory.addColorButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addStrokeButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addFontButtonsTo(bar, editor);\r\n}'),(1102,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3052,'org.jhotdraw.draw.action.ButtonFactory.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'public static void addColorButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ButtonFactory.addColorButtonsTo(bar, editor, ButtonFactory.DEFAULT_COLORS, ButtonFactory.DEFAULT_COLORS_COLUMN_COUNT);\r\n}'),(1103,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3053,'org.jhotdraw.draw.action.ButtonFactory.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.List,int)',0,'public static void addColorButtonsTo(JToolBar bar, DrawingEditor editor, List<ColorIcon> colors, int columnCount) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.STROKE_COLOR, colors, columnCount, \"attribute.strokeColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.FILL_COLOR, colors, columnCount, \"attribute.fillColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.TEXT_COLOR, colors, columnCount, \"attribute.textColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n}'),(1104,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3066,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1105,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3066,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1106,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3066,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1107,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3066,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1108,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3067,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1109,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3067,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1110,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3067,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1111,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3067,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1112,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3068,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}'),(1113,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3068,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}'),(1114,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3068,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}'),(1115,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3068,'org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}'),(1116,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3080,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1117,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3080,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1118,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3080,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1119,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3080,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1120,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3081,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1121,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3081,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1122,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3081,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1123,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3081,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1124,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3082,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}'),(1125,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3082,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}'),(1126,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3082,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}'),(1127,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3082,'org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}'),(1128,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3063,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1129,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3063,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1130,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3063,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1131,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3063,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}'),(1132,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3064,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1133,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3064,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1134,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3064,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1135,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3064,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}'),(1136,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3065,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}'),(1137,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3065,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',1,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}'),(1138,'AttributeKey<Color> attributeKey','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3065,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}'),(1139,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3065,'org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)',0,'/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * 		The DrawingEditor.\r\n * @param attributeKey\r\n * 		The AttributeKey of the color.\r\n * @param swatches\r\n * 		A list with labeled colors containing the color palette\r\n * 		of the popup menu. The actual labels are retrieved from the supplied\r\n * 		resource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * 		a predictable order.\r\n * @param columnCount\r\n * 		The number of columns of the color palette.\r\n * @param labelKey\r\n * 		The resource bundle key used for retrieving the icon and\r\n * 		the tooltip of the button.\r\n * @param labels\r\n * 		The resource bundle.\r\n * @param defaultAttributes\r\n * 		A set of attributes which are also applied to\r\n * 		the selected figures, when a color is selected. This can be used, to\r\n * 		set attributes that otherwise prevent the color from being shown. For\r\n * 		example, when the color attribute is set, we want the gradient attribute\r\n * 		of the Figure to be cleared.\r\n * @param colorShape\r\n * 		This shape is superimposed on the icon of the button.\r\n * 		The shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}'),(1140,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3058,'org.jhotdraw.draw.action.ButtonFactory.addStrokeButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'public static void addStrokeButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createStrokeDecorationButton(editor));\r\n    bar.add(ButtonFactory.createStrokeWidthButton(editor));\r\n    bar.add(ButtonFactory.createStrokeDashesButton(editor));\r\n    bar.add(ButtonFactory.createStrokeTypeButton(editor));\r\n    bar.add(ButtonFactory.createStrokePlacementButton(editor));\r\n    bar.add(ButtonFactory.createStrokeCapButton(editor));\r\n    bar.add(ButtonFactory.createStrokeJoinButton(editor));\r\n}'),(1141,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3094,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1142,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3094,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor)',1,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1143,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3097,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, labels);\r\n}'),(1144,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3097,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',1,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, labels);\r\n}'),(1145,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3097,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, labels);\r\n}'),(1146,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3095,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[])',0,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1147,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3095,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[])',1,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1148,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3096,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[],org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths, ResourceBundleUtil labels) {\r\n    JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth.text\");\r\n    strokeWidthPopupButton.setFocusable(false);\r\n    NumberFormat formatter = NumberFormat.getInstance();\r\n    if (formatter instanceof DecimalFormat) {\r\n        ((DecimalFormat) (formatter)).setMaximumFractionDigits(1);\r\n        ((DecimalFormat) (formatter)).setMinimumFractionDigits(0);\r\n    }\r\n    for (int i = 0; i < (widths.length); i++) {\r\n        String label = Double.toString(widths[i]);\r\n        Icon icon = new StrokeIcon(new BasicStroke(((float) (widths[i])), BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));\r\n        AttributeAction a = new AttributeAction(editor, AttributeKeys.STROKE_WIDTH, new Double(widths[i]), label, icon);\r\n        a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.strokeWidth.text\"));\r\n        AbstractButton btn = strokeWidthPopupButton.add(a);\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeWidthPopupButton;\r\n}'),(1149,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3096,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[],org.jhotdraw.util.ResourceBundleUtil)',1,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths, ResourceBundleUtil labels) {\r\n    JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth.text\");\r\n    strokeWidthPopupButton.setFocusable(false);\r\n    NumberFormat formatter = NumberFormat.getInstance();\r\n    if (formatter instanceof DecimalFormat) {\r\n        ((DecimalFormat) (formatter)).setMaximumFractionDigits(1);\r\n        ((DecimalFormat) (formatter)).setMinimumFractionDigits(0);\r\n    }\r\n    for (int i = 0; i < (widths.length); i++) {\r\n        String label = Double.toString(widths[i]);\r\n        Icon icon = new StrokeIcon(new BasicStroke(((float) (widths[i])), BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));\r\n        AttributeAction a = new AttributeAction(editor, AttributeKeys.STROKE_WIDTH, new Double(widths[i]), label, icon);\r\n        a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.strokeWidth.text\"));\r\n        AbstractButton btn = strokeWidthPopupButton.add(a);\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeWidthPopupButton;\r\n}'),(1150,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3096,'org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[],org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths, ResourceBundleUtil labels) {\r\n    JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth.text\");\r\n    strokeWidthPopupButton.setFocusable(false);\r\n    NumberFormat formatter = NumberFormat.getInstance();\r\n    if (formatter instanceof DecimalFormat) {\r\n        ((DecimalFormat) (formatter)).setMaximumFractionDigits(1);\r\n        ((DecimalFormat) (formatter)).setMinimumFractionDigits(0);\r\n    }\r\n    for (int i = 0; i < (widths.length); i++) {\r\n        String label = Double.toString(widths[i]);\r\n        Icon icon = new StrokeIcon(new BasicStroke(((float) (widths[i])), BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));\r\n        AttributeAction a = new AttributeAction(editor, AttributeKeys.STROKE_WIDTH, new Double(widths[i]), label, icon);\r\n        a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.strokeWidth.text\"));\r\n        AbstractButton btn = strokeWidthPopupButton.add(a);\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeWidthPopupButton;\r\n}'),(1151,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3089,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDecorationButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JPopupButton createStrokeDecorationButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeDecorationPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDecorationPopupButton, \"attribute.strokeDecoration\");\r\n    strokeDecorationPopupButton.setFocusable(false);\r\n    strokeDecorationPopupButton.setColumnCount(2, false);\r\n    LineDecoration[] decorations = new LineDecoration[]{ // Arrow\r\n    new ArrowTip(0.35, 12, 11.3), // Arrow\r\n    new ArrowTip(0.35, 13, 7), // Generalization triangle\r\n    new ArrowTip(((Math.PI) / 5), 12, 9.8, true, true, false), // Dependency arrow\r\n    new ArrowTip(((Math.PI) / 6), 12, 0, false, true, false), // Link arrow\r\n    new ArrowTip(((Math.PI) / 11), 13, 0, false, true, true), // Aggregation diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, false, true, false), // Composition diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, true, true, true), null };\r\n    for (int i = 0; i < (decorations.length); i++) {\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.START_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], true)));\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.END_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], false)));\r\n    }\r\n    return strokeDecorationPopupButton;\r\n}'),(1152,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3089,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDecorationButton(org.jhotdraw.draw.DrawingEditor)',1,'public static JPopupButton createStrokeDecorationButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeDecorationPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDecorationPopupButton, \"attribute.strokeDecoration\");\r\n    strokeDecorationPopupButton.setFocusable(false);\r\n    strokeDecorationPopupButton.setColumnCount(2, false);\r\n    LineDecoration[] decorations = new LineDecoration[]{ // Arrow\r\n    new ArrowTip(0.35, 12, 11.3), // Arrow\r\n    new ArrowTip(0.35, 13, 7), // Generalization triangle\r\n    new ArrowTip(((Math.PI) / 5), 12, 9.8, true, true, false), // Dependency arrow\r\n    new ArrowTip(((Math.PI) / 6), 12, 0, false, true, false), // Link arrow\r\n    new ArrowTip(((Math.PI) / 11), 13, 0, false, true, true), // Aggregation diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, false, true, false), // Composition diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, true, true, true), null };\r\n    for (int i = 0; i < (decorations.length); i++) {\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.START_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], true)));\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.END_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], false)));\r\n    }\r\n    return strokeDecorationPopupButton;\r\n}'),(1153,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3085,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1154,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3085,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor)',1,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1155,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3088,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, new double[][]{ null, new double[]{ 4.0, 4.0 }, new double[]{ 2.0, 2.0 }, new double[]{ 4.0, 2.0 }, new double[]{ 2.0, 4.0 }, new double[]{ 8.0, 2.0 }, new double[]{ 6.0, 2.0, 2.0, 2.0 } }, labels);\r\n}'),(1156,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3088,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',1,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, new double[][]{ null, new double[]{ 4.0, 4.0 }, new double[]{ 2.0, 2.0 }, new double[]{ 4.0, 2.0 }, new double[]{ 2.0, 4.0 }, new double[]{ 8.0, 2.0 }, new double[]{ 6.0, 2.0, 2.0, 2.0 } }, labels);\r\n}'),(1157,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3088,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, new double[][]{ null, new double[]{ 4.0, 4.0 }, new double[]{ 2.0, 2.0 }, new double[]{ 4.0, 2.0 }, new double[]{ 2.0, 4.0 }, new double[]{ 8.0, 2.0 }, new double[]{ 6.0, 2.0, 2.0, 2.0 } }, labels);\r\n}'),(1158,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3086,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][])',0,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, dashes, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1159,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3086,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][])',1,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, dashes, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1160,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3087,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][],org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes, ResourceBundleUtil labels) {\r\n    JPopupButton strokeDashesPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDashesPopupButton, \"attribute.strokeDashes\");\r\n    strokeDashesPopupButton.setFocusable(false);\r\n    // strokeDashesPopupButton.setColumnCount(2, false);\r\n    for (int i = 0; i < (dashes.length); i++) {\r\n        float[] fdashes;\r\n        if ((dashes[i]) == null) {\r\n            fdashes = null;\r\n        } else {\r\n            fdashes = new float[dashes[i].length];\r\n            for (int j = 0; j < (dashes[i].length); j++) {\r\n                fdashes[j] = ((float) (dashes[i][j]));\r\n            }\r\n        }\r\n        Icon icon = new StrokeIcon(new BasicStroke(2.0F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10.0F, fdashes, 0));\r\n        AbstractButton btn = strokeDashesPopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_DASHES, dashes[i], null, icon));\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeDashesPopupButton;\r\n}'),(1161,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3087,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][],org.jhotdraw.util.ResourceBundleUtil)',1,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes, ResourceBundleUtil labels) {\r\n    JPopupButton strokeDashesPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDashesPopupButton, \"attribute.strokeDashes\");\r\n    strokeDashesPopupButton.setFocusable(false);\r\n    // strokeDashesPopupButton.setColumnCount(2, false);\r\n    for (int i = 0; i < (dashes.length); i++) {\r\n        float[] fdashes;\r\n        if ((dashes[i]) == null) {\r\n            fdashes = null;\r\n        } else {\r\n            fdashes = new float[dashes[i].length];\r\n            for (int j = 0; j < (dashes[i].length); j++) {\r\n                fdashes[j] = ((float) (dashes[i][j]));\r\n            }\r\n        }\r\n        Icon icon = new StrokeIcon(new BasicStroke(2.0F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10.0F, fdashes, 0));\r\n        AbstractButton btn = strokeDashesPopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_DASHES, dashes[i], null, icon));\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeDashesPopupButton;\r\n}'),(1162,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3087,'org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][],org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes, ResourceBundleUtil labels) {\r\n    JPopupButton strokeDashesPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDashesPopupButton, \"attribute.strokeDashes\");\r\n    strokeDashesPopupButton.setFocusable(false);\r\n    // strokeDashesPopupButton.setColumnCount(2, false);\r\n    for (int i = 0; i < (dashes.length); i++) {\r\n        float[] fdashes;\r\n        if ((dashes[i]) == null) {\r\n            fdashes = null;\r\n        } else {\r\n            fdashes = new float[dashes[i].length];\r\n            for (int j = 0; j < (dashes[i].length); j++) {\r\n                fdashes[j] = ((float) (dashes[i][j]));\r\n            }\r\n        }\r\n        Icon icon = new StrokeIcon(new BasicStroke(2.0F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10.0F, fdashes, 0));\r\n        AbstractButton btn = strokeDashesPopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_DASHES, dashes[i], null, icon));\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeDashesPopupButton;\r\n}'),(1163,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3093,'org.jhotdraw.draw.action.ButtonFactory.createStrokeTypeButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JPopupButton createStrokeTypeButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeTypePopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeTypePopupButton, \"attribute.strokeType\");\r\n    strokeTypePopupButton.setFocusable(false);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.BASIC, labels.getString(\"attribute.strokeType.basic\"), new StrokeIcon(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL))));\r\n    HashMap<AttributeKey, Object> attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 2.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(2, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 3.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(3, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 4.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(4, 1))));\r\n    return strokeTypePopupButton;\r\n}'),(1164,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3093,'org.jhotdraw.draw.action.ButtonFactory.createStrokeTypeButton(org.jhotdraw.draw.DrawingEditor)',1,'public static JPopupButton createStrokeTypeButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeTypePopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeTypePopupButton, \"attribute.strokeType\");\r\n    strokeTypePopupButton.setFocusable(false);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.BASIC, labels.getString(\"attribute.strokeType.basic\"), new StrokeIcon(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL))));\r\n    HashMap<AttributeKey, Object> attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 2.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(2, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 3.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(3, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 4.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(4, 1))));\r\n    return strokeTypePopupButton;\r\n}'),(1165,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3092,'org.jhotdraw.draw.action.ButtonFactory.createStrokePlacementButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JPopupButton createStrokePlacementButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokePlacementPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokePlacementPopupButton, \"attribute.strokePlacement\");\r\n    strokePlacementPopupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.center\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.inside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideUnfilled\"), null));\r\n    return strokePlacementPopupButton;\r\n}'),(1166,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3092,'org.jhotdraw.draw.action.ButtonFactory.createStrokePlacementButton(org.jhotdraw.draw.DrawingEditor)',1,'public static JPopupButton createStrokePlacementButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokePlacementPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokePlacementPopupButton, \"attribute.strokePlacement\");\r\n    strokePlacementPopupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.center\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.inside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideUnfilled\"), null));\r\n    return strokePlacementPopupButton;\r\n}'),(1167,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3054,'org.jhotdraw.draw.action.ButtonFactory.addFontButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'public static void addFontButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createFontButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleBoldButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleItalicButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleUnderlineButton(editor));\r\n}'),(1168,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3069,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JPopupButton createFontButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1169,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3069,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor)',1,'public static JPopupButton createFontButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1170,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3071,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createFontButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createFontButton(editor, AttributeKeys.FONT_FACE, labels);\r\n}'),(1171,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3071,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',1,'public static JPopupButton createFontButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createFontButton(editor, AttributeKeys.FONT_FACE, labels);\r\n}'),(1172,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3071,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createFontButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createFontButton(editor, AttributeKeys.FONT_FACE, labels);\r\n}'),(1173,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3070,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}'),(1174,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3070,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)',1,'public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}'),(1175,'AttributeKey<Font> key','org.jhotdraw.draw.AttributeKey',109,296,'org.jhotdraw.draw.action.ButtonFactory',3070,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}'),(1176,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3070,'org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}'),(1177,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3072,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JButton createFontStyleBoldButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleBoldButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1178,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3073,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JButton createFontStyleBoldButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.bold\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_BOLD, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.bold.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(1179,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3073,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JButton createFontStyleBoldButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.bold\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_BOLD, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.bold.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(1180,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3074,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JButton createFontStyleItalicButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleItalicButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1181,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3075,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JButton createFontStyleItalicButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.italic\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_ITALIC, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.italic.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(1182,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3075,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JButton createFontStyleItalicButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.italic\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_ITALIC, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.italic.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(1183,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3076,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JButton createFontStyleUnderlineButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleUnderlineButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1184,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3077,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JButton createFontStyleUnderlineButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.underline\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_UNDERLINE, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.underline.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(1185,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3077,'org.jhotdraw.draw.action.ButtonFactory.createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JButton createFontStyleUnderlineButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.underline\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_UNDERLINE, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.underline.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}'),(1186,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3050,'org.jhotdraw.draw.action.ButtonFactory.addAlignmentButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\npublic static void addAlignmentButtonsTo(JToolBar bar, final DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    bar.add(new AlignAction.West(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.East(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.Horizontal(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.North(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.South(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.Vertical(editor)).setFocusable(false);\r\n    bar.addSeparator();\r\n    bar.add(new MoveAction.West(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.East(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.North(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.South(editor)).setFocusable(false);\r\n    bar.addSeparator();\r\n    bar.add(new BringToFrontAction(editor)).setFocusable(false);\r\n    bar.add(new SendToBackAction(editor)).setFocusable(false);\r\n}'),(1187,'final DrawingView view','org.jhotdraw.draw.DrawingView',171,296,'org.jhotdraw.draw.action.ButtonFactory',3098,'org.jhotdraw.draw.action.ButtonFactory.createToggleGridButton(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Creates a button which toggles between two GridConstrainer for\r\n * a DrawingView.\r\n */\r\npublic static AbstractButton createToggleGridButton(final DrawingView view) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JToggleButton toggleButton;\r\n    toggleButton = new JToggleButton();\r\n    labels.configureToolBarButton(toggleButton, \"view.toggleGrid\");\r\n    toggleButton.setFocusable(false);\r\n    toggleButton.addItemListener(new ItemListener() {\r\n        public void itemStateChanged(ItemEvent event) {\r\n            view.setConstrainerVisible(toggleButton.isSelected());\r\n            // view.getComponent().repaint();\r\n        }\r\n    });\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == (DrawingView.CONSTRAINER_VISIBLE_PROPERTY)) {\r\n                toggleButton.setSelected(view.isConstrainerVisible());\r\n            }\r\n        }\r\n    });\r\n    return toggleButton;\r\n}'),(1188,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3083,'org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JPopupButton createStrokeCapButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeCapButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1189,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3083,'org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor)',1,'public static JPopupButton createStrokeCapButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeCapButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1190,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3084,'org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeCapButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeCap\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_BUTT);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.butt\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_SQUARE);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.square\"), null));\r\n    return popupButton;\r\n}'),(1191,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3084,'org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',1,'public static JPopupButton createStrokeCapButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeCap\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_BUTT);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.butt\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_SQUARE);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.square\"), null));\r\n    return popupButton;\r\n}'),(1192,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3084,'org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeCapButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeCap\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_BUTT);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.butt\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_SQUARE);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.square\"), null));\r\n    return popupButton;\r\n}'),(1193,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3090,'org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JPopupButton createStrokeJoinButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeJoinButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1194,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3090,'org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor)',1,'public static JPopupButton createStrokeJoinButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeJoinButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}'),(1195,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3091,'org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeJoinButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeJoin\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_BEVEL);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.bevel\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_MITER);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.miter\"), null));\r\n    return popupButton;\r\n}'),(1196,'org.jhotdraw.gui.JPopupButton','org.jhotdraw.gui.JPopupButton',386,296,'org.jhotdraw.draw.action.ButtonFactory',3091,'org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',1,'public static JPopupButton createStrokeJoinButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeJoin\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_BEVEL);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.bevel\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_MITER);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.miter\"), null));\r\n    return popupButton;\r\n}'),(1197,'ResourceBundleUtil labels','org.jhotdraw.util.ResourceBundleUtil',645,296,'org.jhotdraw.draw.action.ButtonFactory',3091,'org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)',0,'public static JPopupButton createStrokeJoinButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeJoin\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_BEVEL);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.bevel\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_MITER);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.miter\"), null));\r\n    return popupButton;\r\n}'),(1198,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3078,'org.jhotdraw.draw.action.ButtonFactory.createPickAttributesButton(org.jhotdraw.draw.DrawingEditor)',0,'public static JButton createPickAttributesButton(DrawingEditor editor) {\r\n    JButton btn;\r\n    btn = new JButton(new PickAttributesAction(editor));\r\n    if ((btn.getIcon()) != null) {\r\n        btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n    }\r\n    btn.setHorizontalTextPosition(JButton.CENTER);\r\n    btn.setVerticalTextPosition(JButton.BOTTOM);\r\n    btn.setText(null);\r\n    btn.setFocusable(false);\r\n    return btn;\r\n}'),(1199,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,296,'org.jhotdraw.draw.action.ButtonFactory',3061,'org.jhotdraw.draw.action.ButtonFactory.createApplyAttributesButton(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a button that applies the default attributes of the editor to\r\n * the current selection.\r\n */\r\npublic static JButton createApplyAttributesButton(DrawingEditor editor) {\r\n    JButton btn;\r\n    btn = new JButton(new ApplyAttributesAction(editor));\r\n    if ((btn.getIcon()) != null) {\r\n        btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n    }\r\n    btn.setHorizontalTextPosition(JButton.CENTER);\r\n    btn.setVerticalTextPosition(JButton.BOTTOM);\r\n    btn.setText(null);\r\n    btn.setFocusable(false);\r\n    return btn;\r\n}'),(1200,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3116,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key) {\r\n    this(editor, key, null, null);\r\n}'),(1201,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3116,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key) {\r\n    this(editor, key, null, null);\r\n}'),(1202,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3117,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.Map)',0,'public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Map<AttributeKey, Object> fixedAttributes) {\r\n    this(editor, new AttributeKey[]{ key }, null, null, fixedAttributes);\r\n}'),(1203,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3117,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.Map)',0,'public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Map<AttributeKey, Object> fixedAttributes) {\r\n    this(editor, new AttributeKey[]{ key }, null, null, fixedAttributes);\r\n}'),(1204,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3118,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[])',0,'public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys) {\r\n    this(editor, keys, null, null);\r\n}'),(1205,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3119,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(1206,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3119,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(1207,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3120,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(1208,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3120,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(1209,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3121,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)',0,'public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name, Icon icon) {\r\n    this(editor, new AttributeKey[]{ key }, name, icon);\r\n}'),(1210,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3121,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)',0,'public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name, Icon icon) {\r\n    this(editor, new AttributeKey[]{ key }, name, icon);\r\n}'),(1211,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3122,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[],java.lang.String,javax.swing.Icon)',0,'public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys, String name, Icon icon) {\r\n    this(editor, keys, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(1212,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3123,'org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[],java.lang.String,javax.swing.Icon,java.util.Map)',0,'public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor);\r\n    this.keys = keys;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(DefaultAttributeAction.this.keys[0])) {\r\n                putValue((\"attribute_\" + (DefaultAttributeAction.this.keys[0])), evt.getNewValue());\r\n            }\r\n        }\r\n    });\r\n    this.fixedAttributes = fixedAttributes;\r\n}'),(1213,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,299,'org.jhotdraw.draw.action.DefaultAttributeAction',3127,'org.jhotdraw.draw.action.DefaultAttributeAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt) {\r\n    // setEnabled(getView().getSelectionCount() > 0);\r\n}'),(1214,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3128,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}'),(1215,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3128,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}'),(1216,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3129,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}'),(1217,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3129,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}'),(1218,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3130,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}'),(1219,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3130,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}'),(1220,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3131,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)',0,'public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}'),(1221,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3131,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)',0,'public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}'),(1222,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3132,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)',0,'public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}'),(1223,'AttributeKey key','org.jhotdraw.draw.AttributeKey',109,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3132,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)',0,'public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}'),(1224,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,300,'org.jhotdraw.draw.action.DrawingAttributeAction',3133,'org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,java.util.Map,java.lang.String,javax.swing.Icon)',0,'public DrawingAttributeAction(DrawingEditor editor, Map<AttributeKey, Object> attributes, String name, Icon icon) {\r\n    super(editor);\r\n    this.attributes = attributes;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    updateEnabledState();\r\n}'),(1225,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3136,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(1226,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3136,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(1227,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3137,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(1228,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3137,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(1229,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3138,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(1230,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3138,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(1231,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3139,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)',0,'public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(1232,'final AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3139,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)',0,'public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(1233,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3140,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)',0,'public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}'),(1234,'final AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,301,'org.jhotdraw.draw.action.DrawingColorChooserAction',3140,'org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)',0,'public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}'),(1235,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,302,'org.jhotdraw.draw.action.DrawingColorIcon',3144,'org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1236,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,302,'org.jhotdraw.draw.action.DrawingColorIcon',3144,'org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1237,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,302,'org.jhotdraw.draw.action.DrawingColorIcon',3145,'org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)',0,'public DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1238,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,302,'org.jhotdraw.draw.action.DrawingColorIcon',3145,'org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)',0,'public DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1239,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3166,'org.jhotdraw.draw.action.DrawingEditorProxy.setTarget(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Sets the target of the proxy.\r\n */\r\npublic void setTarget(DrawingEditor newValue) {\r\n    if ((target) != null) {\r\n        target.removePropertyChangeListener(forwarder);\r\n    }\r\n    this.target = newValue;\r\n    if ((target) != null) {\r\n        target.addPropertyChangeListener(forwarder);\r\n    }\r\n}'),(1240,'DrawingView view','org.jhotdraw.draw.DrawingView',171,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3148,'org.jhotdraw.draw.action.DrawingEditorProxy.add(org.jhotdraw.draw.DrawingView)',0,'public void add(DrawingView view) {\r\n    target.add(view);\r\n}'),(1241,'DrawingView view','org.jhotdraw.draw.DrawingView',171,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3160,'org.jhotdraw.draw.action.DrawingEditorProxy.remove(org.jhotdraw.draw.DrawingView)',0,'public void remove(DrawingView view) {\r\n    target.remove(view);\r\n}'),(1242,'DrawingView newValue','org.jhotdraw.draw.DrawingView',171,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3161,'org.jhotdraw.draw.action.DrawingEditorProxy.setActiveView(org.jhotdraw.draw.DrawingView)',0,'public void setActiveView(DrawingView newValue) {\r\n    target.setActiveView(newValue);\r\n}'),(1243,'Tool t','org.jhotdraw.draw.Tool',262,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3167,'org.jhotdraw.draw.action.DrawingEditorProxy.setTool(org.jhotdraw.draw.Tool)',0,'public void setTool(Tool t) {\r\n    target.setTool(t);\r\n}'),(1244,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3163,'org.jhotdraw.draw.action.DrawingEditorProxy.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'public <T> void setDefaultAttribute(AttributeKey<T> key, T value) {\r\n    target.setDefaultAttribute(key, value);\r\n}'),(1245,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3152,'org.jhotdraw.draw.action.DrawingEditorProxy.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)',0,'public <T> T getDefaultAttribute(AttributeKey<T> key) {\r\n    return target.getDefaultAttribute(key);\r\n}'),(1246,'Figure f','org.jhotdraw.draw.Figure',174,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3149,'org.jhotdraw.draw.action.DrawingEditorProxy.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)',0,'public void applyDefaultAttributesTo(Figure f) {\r\n    target.applyDefaultAttributesTo(f);\r\n}'),(1247,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3165,'org.jhotdraw.draw.action.DrawingEditorProxy.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'public <T> void setHandleAttribute(AttributeKey<T> key, T value) {\r\n    target.setHandleAttribute(key, value);\r\n}'),(1248,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,304,'org.jhotdraw.draw.action.DrawingEditorProxy',3156,'org.jhotdraw.draw.action.DrawingEditorProxy.getHandleAttribute(org.jhotdraw.draw.AttributeKey)',0,'public <T> T getHandleAttribute(AttributeKey<T> key) {\r\n    return target.getHandleAttribute(key);\r\n}'),(1249,'Application app','org.jhotdraw.app.Application',3,305,'org.jhotdraw.draw.action.EditCanvasAction',3170,'org.jhotdraw.draw.action.EditCanvasAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditCanvasAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditCanvasAction.ID);\r\n}'),(1250,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,305,'org.jhotdraw.draw.action.EditCanvasAction',3170,'org.jhotdraw.draw.action.EditCanvasAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditCanvasAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditCanvasAction.ID);\r\n}'),(1251,'Drawing newValue','org.jhotdraw.draw.Drawing',168,306,'org.jhotdraw.draw.action.EditCanvasPanel',3181,'org.jhotdraw.draw.action.EditCanvasPanel.setDrawing(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Sets the GridConstrainer to be edited by this panel.\r\n *\r\n * @param newValue\r\n * 		The GridConstrainer.\r\n */\r\npublic void setDrawing(Drawing newValue) {\r\n    drawing = newValue;\r\n    // XXX - This does not work, we must pass the drawing editor here!\r\n    opacitySliderHandler.setDrawing(drawing);\r\n    opacityFieldHandler.setDrawing(drawing);\r\n    updatePanel();\r\n}'),(1252,'Application app','org.jhotdraw.app.Application',3,307,'org.jhotdraw.draw.action.EditGridAction',3184,'org.jhotdraw.draw.action.EditGridAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditGridAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditGridAction.ID);\r\n}'),(1253,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,307,'org.jhotdraw.draw.action.EditGridAction',3184,'org.jhotdraw.draw.action.EditGridAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditGridAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditGridAction.ID);\r\n}'),(1254,'GridConstrainer newValue','org.jhotdraw.draw.GridConstrainer',189,308,'org.jhotdraw.draw.action.EditGridPanel',3192,'org.jhotdraw.draw.action.EditGridPanel.setConstrainer(org.jhotdraw.draw.GridConstrainer)',0,'/**\r\n * Sets the GridConstrainer to be edited by this panel.\r\n *\r\n * @param newValue\r\n * 		The GridConstrainer.\r\n */\r\npublic void setConstrainer(GridConstrainer newValue) {\r\n    constrainer = newValue;\r\n    widthField.setValue(constrainer.getWidth());\r\n    heightField.setValue(constrainer.getHeight());\r\n    thetaField.setValue((((constrainer.getTheta()) * 180.0) / (Math.PI)));\r\n}'),(1255,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3193,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(1256,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3193,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(1257,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3194,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(1258,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3194,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(1259,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3195,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(1260,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3195,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(1261,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3196,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)',0,'public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(1262,'final AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3196,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)',0,'public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(1263,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3197,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)',0,'public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, fixedAttributes, name, icon);\r\n    this.key = key;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}'),(1264,'final AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3197,'org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)',0,'public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, fixedAttributes, name, icon);\r\n    this.key = key;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}'),(1265,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,309,'org.jhotdraw.draw.action.EditorColorChooserAction',3200,'org.jhotdraw.draw.action.EditorColorChooserAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt) {\r\n    // setEnabled(getView().getSelectionCount() > 0);\r\n}'),(1266,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,310,'org.jhotdraw.draw.action.EditorColorIcon',3201,'org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1267,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,310,'org.jhotdraw.draw.action.EditorColorIcon',3201,'org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1268,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,310,'org.jhotdraw.draw.action.EditorColorIcon',3202,'org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)',0,'public EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1269,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,310,'org.jhotdraw.draw.action.EditorColorIcon',3202,'org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)',0,'public EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1270,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,311,'org.jhotdraw.draw.action.FontChooserHandler',3204,'org.jhotdraw.draw.action.FontChooserHandler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.JFontChooser,javax.swing.JPopupMenu)',0,'// protected Map<AttributeKey, Object> attributes;\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic FontChooserHandler(DrawingEditor editor, AttributeKey<Font> key, JFontChooser fontChooser, JPopupMenu popupMenu) {\r\n    super(editor);\r\n    this.key = key;\r\n    this.fontChooser = fontChooser;\r\n    this.popupMenu = popupMenu;\r\n    fontChooser.addActionListener(this);\r\n    fontChooser.addPropertyChangeListener(this);\r\n    updateEnabledState();\r\n}'),(1271,'AttributeKey<Font> key','org.jhotdraw.draw.AttributeKey',109,311,'org.jhotdraw.draw.action.FontChooserHandler',3204,'org.jhotdraw.draw.action.FontChooserHandler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.JFontChooser,javax.swing.JPopupMenu)',0,'// protected Map<AttributeKey, Object> attributes;\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic FontChooserHandler(DrawingEditor editor, AttributeKey<Font> key, JFontChooser fontChooser, JPopupMenu popupMenu) {\r\n    super(editor);\r\n    this.key = key;\r\n    this.fontChooser = fontChooser;\r\n    this.popupMenu = popupMenu;\r\n    fontChooser.addActionListener(this);\r\n    fontChooser.addPropertyChangeListener(this);\r\n    updateEnabledState();\r\n}'),(1272,'JFontChooser fontChooser','org.jhotdraw.gui.JFontChooser',379,311,'org.jhotdraw.draw.action.FontChooserHandler',3204,'org.jhotdraw.draw.action.FontChooserHandler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.JFontChooser,javax.swing.JPopupMenu)',0,'// protected Map<AttributeKey, Object> attributes;\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic FontChooserHandler(DrawingEditor editor, AttributeKey<Font> key, JFontChooser fontChooser, JPopupMenu popupMenu) {\r\n    super(editor);\r\n    this.key = key;\r\n    this.fontChooser = fontChooser;\r\n    this.popupMenu = popupMenu;\r\n    fontChooser.addActionListener(this);\r\n    fontChooser.addPropertyChangeListener(this);\r\n    updateEnabledState();\r\n}'),(1273,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,314,'org.jhotdraw.draw.action.GroupAction',3223,'org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic GroupAction(DrawingEditor editor) {\r\n    this(editor, new GroupFigure(), true);\r\n}'),(1274,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,314,'org.jhotdraw.draw.action.GroupAction',3224,'org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)',0,'public GroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    this(editor, prototype, true);\r\n}'),(1275,'CompositeFigure prototype','org.jhotdraw.draw.CompositeFigure',136,314,'org.jhotdraw.draw.action.GroupAction',3224,'org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)',0,'public GroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    this(editor, prototype, true);\r\n}'),(1276,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,314,'org.jhotdraw.draw.action.GroupAction',3225,'org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure,boolean)',0,'public GroupAction(DrawingEditor editor, CompositeFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isGroupingAction = isGroupingAction;\r\n    labels.configureAction(this, GroupAction.ID);\r\n    updateEnabledState();\r\n}'),(1277,'CompositeFigure prototype','org.jhotdraw.draw.CompositeFigure',136,314,'org.jhotdraw.draw.action.GroupAction',3225,'org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure,boolean)',0,'public GroupAction(DrawingEditor editor, CompositeFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isGroupingAction = isGroupingAction;\r\n    labels.configureAction(this, GroupAction.ID);\r\n    updateEnabledState();\r\n}'),(1278,'DrawingView view','org.jhotdraw.draw.DrawingView',171,314,'org.jhotdraw.draw.action.GroupAction',3231,'org.jhotdraw.draw.action.GroupAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)',0,'public Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    // XXX - This code is redundant with UngroupAction\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().basicAddAll(view.getDrawing().indexOf(group), figures);\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(figures);\r\n    return figures;\r\n}'),(1279,'CompositeFigure group','org.jhotdraw.draw.CompositeFigure',136,314,'org.jhotdraw.draw.action.GroupAction',3231,'org.jhotdraw.draw.action.GroupAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)',0,'public Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    // XXX - This code is redundant with UngroupAction\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().basicAddAll(view.getDrawing().indexOf(group), figures);\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(figures);\r\n    return figures;\r\n}'),(1280,'DrawingView view','org.jhotdraw.draw.DrawingView',171,314,'org.jhotdraw.draw.action.GroupAction',3230,'org.jhotdraw.draw.action.GroupAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)',0,'public void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    int index = view.getDrawing().indexOf(sorted.iterator().next());\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(index, group);\r\n    group.willChange();\r\n    for (Figure f : sorted) {\r\n        group.basicAdd(f);\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(1281,'CompositeFigure group','org.jhotdraw.draw.CompositeFigure',136,314,'org.jhotdraw.draw.action.GroupAction',3230,'org.jhotdraw.draw.action.GroupAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)',0,'public void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    int index = view.getDrawing().indexOf(sorted.iterator().next());\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(index, group);\r\n    group.willChange();\r\n    for (Figure f : sorted) {\r\n        group.basicAdd(f);\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(1282,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,316,'org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction',3239,'org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic IncreaseHandleDetailLevelAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, IncreaseHandleDetailLevelAction.ID);\r\n    // putValue(AbstractAction.NAME, labels.getString(\"editSelectSame\"));\r\n    // putValue(AbstractAction.MNEMONIC_KEY, labels.getString(\"editSelectSameMnem\"));\r\n}'),(1283,'LineDecoration decoration','org.jhotdraw.draw.LineDecoration',210,317,'org.jhotdraw.draw.action.LineDecorationIcon',3242,'org.jhotdraw.draw.action.LineDecorationIcon.-init-(org.jhotdraw.draw.LineDecoration,boolean)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic LineDecorationIcon(LineDecoration decoration, boolean isStartDecoration) {\r\n    lineFigure = new LineFigure();\r\n    lineFigure.setBounds(new Point2D.Double(2, 8), new Point2D.Double(23, 8));\r\n    if (isStartDecoration) {\r\n        AttributeKeys.START_DECORATION.basicSet(lineFigure, decoration);\r\n    } else {\r\n        AttributeKeys.END_DECORATION.basicSet(lineFigure, decoration);\r\n    }\r\n    AttributeKeys.STROKE_COLOR.basicSet(lineFigure, Color.black);\r\n}'),(1284,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,322,'org.jhotdraw.draw.action.MoveAction',3246,'org.jhotdraw.draw.action.MoveAction.-init-(org.jhotdraw.draw.DrawingEditor,int,int)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic MoveAction(DrawingEditor editor, int dx, int dy) {\r\n    super(editor);\r\n    this.dx = dx;\r\n    this.dy = dy;\r\n}'),(1285,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,318,'org.jhotdraw.draw.action.MoveAction$East',3249,'org.jhotdraw.draw.action.MoveAction$East.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public East(DrawingEditor editor) {\r\n    super(editor, 1, 0);\r\n    labels.configureAction(this, MoveAction.East.ID);\r\n}'),(1286,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,321,'org.jhotdraw.draw.action.MoveAction$West',3252,'org.jhotdraw.draw.action.MoveAction$West.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public West(DrawingEditor editor) {\r\n    super(editor, (-1), 0);\r\n    labels.configureAction(this, MoveAction.West.ID);\r\n}'),(1287,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,319,'org.jhotdraw.draw.action.MoveAction$North',3250,'org.jhotdraw.draw.action.MoveAction$North.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public North(DrawingEditor editor) {\r\n    super(editor, 0, (-1));\r\n    labels.configureAction(this, MoveAction.North.ID);\r\n}'),(1288,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,320,'org.jhotdraw.draw.action.MoveAction$South',3251,'org.jhotdraw.draw.action.MoveAction$South.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public South(DrawingEditor editor) {\r\n    super(editor, 0, 1);\r\n    labels.configureAction(this, MoveAction.South.ID);\r\n}'),(1289,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,327,'org.jhotdraw.draw.action.MoveConstrainedAction',3253,'org.jhotdraw.draw.action.MoveConstrainedAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.TranslationDirection)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic MoveConstrainedAction(DrawingEditor editor, TranslationDirection dir) {\r\n    super(editor);\r\n    this.dir = dir;\r\n}'),(1290,'TranslationDirection dir','org.jhotdraw.draw.TranslationDirection',276,327,'org.jhotdraw.draw.action.MoveConstrainedAction',3253,'org.jhotdraw.draw.action.MoveConstrainedAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.TranslationDirection)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic MoveConstrainedAction(DrawingEditor editor, TranslationDirection dir) {\r\n    super(editor);\r\n    this.dir = dir;\r\n}'),(1291,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,323,'org.jhotdraw.draw.action.MoveConstrainedAction$East',3256,'org.jhotdraw.draw.action.MoveConstrainedAction$East.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public East(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.EAST);\r\n    labels.configureAction(this, MoveConstrainedAction.East.ID);\r\n}'),(1292,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,326,'org.jhotdraw.draw.action.MoveConstrainedAction$West',3259,'org.jhotdraw.draw.action.MoveConstrainedAction$West.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public West(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.WEST);\r\n    labels.configureAction(this, MoveConstrainedAction.West.ID);\r\n}'),(1293,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,324,'org.jhotdraw.draw.action.MoveConstrainedAction$North',3257,'org.jhotdraw.draw.action.MoveConstrainedAction$North.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public North(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.NORTH);\r\n    labels.configureAction(this, MoveConstrainedAction.North.ID);\r\n}'),(1294,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,325,'org.jhotdraw.draw.action.MoveConstrainedAction$South',3258,'org.jhotdraw.draw.action.MoveConstrainedAction$South.-init-(org.jhotdraw.draw.DrawingEditor)',0,'public South(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.SOUTH);\r\n    labels.configureAction(this, MoveConstrainedAction.South.ID);\r\n}'),(1295,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,329,'org.jhotdraw.draw.action.PickAttributesAction',3264,'org.jhotdraw.draw.action.PickAttributesAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PickAttributesAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.pickAttributes\");\r\n    setEnabled(true);\r\n}'),(1296,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,329,'org.jhotdraw.draw.action.PickAttributesAction',3267,'org.jhotdraw.draw.action.PickAttributesAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt) {\r\n    setEnabled(((getView().getSelectionCount()) == 1));\r\n}'),(1297,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,330,'org.jhotdraw.draw.action.SelectSameAction',3269,'org.jhotdraw.draw.action.SelectSameAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SelectSameAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, SelectSameAction.ID);\r\n    // putValue(AbstractAction.NAME, labels.getString(\"editSelectSame\"));\r\n    // putValue(AbstractAction.MNEMONIC_KEY, labels.getString(\"editSelectSameMnem\"));\r\n}'),(1298,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3272,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(1299,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3272,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}'),(1300,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3273,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(1301,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3273,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}'),(1302,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3274,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(1303,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3274,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}'),(1304,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3275,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)',0,'public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(1305,'final AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3275,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)',0,'public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}'),(1306,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3276,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)',0,'public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}'),(1307,'final AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,331,'org.jhotdraw.draw.action.SelectionColorChooserAction',3276,'org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)',0,'public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}'),(1308,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,332,'org.jhotdraw.draw.action.SelectionColorIcon',3278,'org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1309,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,332,'org.jhotdraw.draw.action.SelectionColorIcon',3278,'org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param key\r\n * 		The key of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param colorShape\r\n * 		The shape to be drawn with the color of the default\r\n * 		attribute.\r\n */\r\npublic SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1310,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,332,'org.jhotdraw.draw.action.SelectionColorIcon',3279,'org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)',0,'public SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1311,'AttributeKey<Color> key','org.jhotdraw.draw.AttributeKey',109,332,'org.jhotdraw.draw.action.SelectionColorIcon',3279,'org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)',0,'public SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}'),(1312,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,333,'org.jhotdraw.draw.action.SelectionComponentRepainter',3281,'org.jhotdraw.draw.action.SelectionComponentRepainter.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)',0,'public SelectionComponentRepainter(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if (editor != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.addPropertyChangeListener(this);\r\n            view.addFigureSelectionListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().addFigureListener(this);\r\n            }\r\n        }\r\n        editor.addPropertyChangeListener(this);\r\n    }\r\n}'),(1313,'FigureEvent evt','org.jhotdraw.draw.FigureEvent',176,333,'org.jhotdraw.draw.action.SelectionComponentRepainter',3282,'org.jhotdraw.draw.action.SelectionComponentRepainter.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    component.repaint();\r\n}'),(1314,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,333,'org.jhotdraw.draw.action.SelectionComponentRepainter',3285,'org.jhotdraw.draw.action.SelectionComponentRepainter.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt) {\r\n    component.repaint();\r\n}'),(1315,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,334,'org.jhotdraw.draw.action.SendToBackAction',3286,'org.jhotdraw.draw.action.SendToBackAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SendToBackAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, SendToBackAction.ID);\r\n}'),(1316,'DrawingView view','org.jhotdraw.draw.DrawingView',171,334,'org.jhotdraw.draw.action.SendToBackAction',3289,'org.jhotdraw.draw.action.SendToBackAction.sendToBack(org.jhotdraw.draw.DrawingView,java.util.Collection)',0,'public static void sendToBack(DrawingView view, Collection figures) {\r\n    Iterator i = figures.iterator();\r\n    Drawing drawing = view.getDrawing();\r\n    while (i.hasNext()) {\r\n        Figure figure = ((Figure) (i.next()));\r\n        drawing.sendToBack(figure);\r\n    } \r\n}'),(1317,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,336,'org.jhotdraw.draw.action.ToggleGridAction',3294,'org.jhotdraw.draw.action.ToggleGridAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleGridAction(DrawingEditor editor) {\r\n    super(editor);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, ToggleGridAction.ID);\r\n    updateViewState();\r\n}'),(1318,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,337,'org.jhotdraw.draw.action.UngroupAction',3297,'org.jhotdraw.draw.action.UngroupAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic UngroupAction(DrawingEditor editor) {\r\n    super(editor, new GroupFigure(), false);\r\n    labels.configureAction(this, UngroupAction.ID);\r\n}'),(1319,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,337,'org.jhotdraw.draw.action.UngroupAction',3298,'org.jhotdraw.draw.action.UngroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)',0,'public UngroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, UngroupAction.ID);\r\n}'),(1320,'CompositeFigure prototype','org.jhotdraw.draw.CompositeFigure',136,337,'org.jhotdraw.draw.action.UngroupAction',3298,'org.jhotdraw.draw.action.UngroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)',0,'public UngroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, UngroupAction.ID);\r\n}'),(1321,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,339,'org.jhotdraw.draw.action.ZoomAction',3320,'org.jhotdraw.draw.action.ZoomAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomAction(DrawingEditor editor, double scaleFactor, AbstractButton button) {\r\n    this(((DrawingView) (null)), scaleFactor, button);\r\n    setEditor(editor);\r\n}'),(1322,'DrawingView view','org.jhotdraw.draw.DrawingView',171,339,'org.jhotdraw.draw.action.ZoomAction',3321,'org.jhotdraw.draw.action.ZoomAction.-init-(org.jhotdraw.draw.DrawingView,double,javax.swing.AbstractButton)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomAction(DrawingView view, double scaleFactor, AbstractButton button) {\r\n    super(view);\r\n    this.scaleFactor = scaleFactor;\r\n    this.button = button;\r\n    label = ((int) (scaleFactor * 100)) + \" %\";\r\n    putValue(Action.DEFAULT, label);\r\n    putValue(Action.NAME, label);\r\n}'),(1323,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,340,'org.jhotdraw.draw.action.ZoomEditorAction',3324,'org.jhotdraw.draw.action.ZoomEditorAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomEditorAction(DrawingEditor editor, double scaleFactor, AbstractButton button) {\r\n    this(editor, scaleFactor, button, true);\r\n}'),(1324,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,340,'org.jhotdraw.draw.action.ZoomEditorAction',3325,'org.jhotdraw.draw.action.ZoomEditorAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton,boolean)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomEditorAction(DrawingEditor editor, double scaleFactor, AbstractButton button, boolean updateAllViews) {\r\n    super(editor);\r\n    this.scaleFactor = scaleFactor;\r\n    this.button = button;\r\n    this.updateAllViews = updateAllViews;\r\n    label = ((int) (scaleFactor * 100)) + \" %\";\r\n    putValue(Action.DEFAULT, label);\r\n    putValue(Action.NAME, label);\r\n}'),(1325,'BezierPath digitizedPoints','org.jhotdraw.geom.BezierPath',343,341,'org.jhotdraw.geom.Bezier',3342,'org.jhotdraw.geom.Bezier.fitBezierPath(org.jhotdraw.geom.BezierPath,double)',0,'/**\r\n * Fits a bezier path to the specified list of digitized points.\r\n * <p>\r\n * This is a convenience method for calling fitCubicSegments(List<Point2D.Double>, double);\r\n *\r\n * @param digitizedPoints\r\n * 		digited points.\r\n * @param error\r\n * 		the maximal allowed error between the bezier path and the\r\n * 		digitized points.\r\n */\r\npublic static BezierPath fitBezierPath(BezierPath digitizedPoints, double error) {\r\n    ArrayList<Point2D.Double> d = new ArrayList<Point2D.Double>(digitizedPoints.size());\r\n    for (BezierPath.Node n : digitizedPoints) {\r\n        d.add(new Point2D.Double(n.x[0], n.y[0]));\r\n    }\r\n    return Bezier.fitBezierPath(d, error);\r\n}'),(1326,'org.jhotdraw.geom.BezierPath','org.jhotdraw.geom.BezierPath',343,341,'org.jhotdraw.geom.Bezier',3342,'org.jhotdraw.geom.Bezier.fitBezierPath(org.jhotdraw.geom.BezierPath,double)',1,'/**\r\n * Fits a bezier path to the specified list of digitized points.\r\n * <p>\r\n * This is a convenience method for calling fitCubicSegments(List<Point2D.Double>, double);\r\n *\r\n * @param digitizedPoints\r\n * 		digited points.\r\n * @param error\r\n * 		the maximal allowed error between the bezier path and the\r\n * 		digitized points.\r\n */\r\npublic static BezierPath fitBezierPath(BezierPath digitizedPoints, double error) {\r\n    ArrayList<Point2D.Double> d = new ArrayList<Point2D.Double>(digitizedPoints.size());\r\n    for (BezierPath.Node n : digitizedPoints) {\r\n        d.add(new Point2D.Double(n.x[0], n.y[0]));\r\n    }\r\n    return Bezier.fitBezierPath(d, error);\r\n}'),(1327,'BezierPath bezierPath','org.jhotdraw.geom.BezierPath',343,341,'org.jhotdraw.geom.Bezier',3343,'org.jhotdraw.geom.Bezier.fitCubic(java.util.ArrayList,int,int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,org.jhotdraw.geom.BezierPath)',0,'/**\r\n * Fit one or multiple subsequent cubic bezier curves to a (sub)set of\r\n * digitized points. The digitized points represent a smooth curve without\r\n * corners.\r\n *\r\n * @param d\r\n * 		Array of digitized points. Must not contain subsequent\r\n * 		coincident points.\r\n * @param first\r\n * 		Indice of first point in d.\r\n * @param last\r\n * 		Indice of last point in d.\r\n * @param tHat1\r\n * 		Unit tangent vectors at start point.\r\n * @param tHat2\r\n * 		Unit tanget vector at end point.\r\n * @param errorSquared\r\n * 		User-defined errorSquared squared.\r\n * @param bezierPath\r\n * 		Path to which the bezier curve segments are added.\r\n */\r\nprivate static void fitCubic(ArrayList<Point2D.Double> d, int first, int last, Point2D.Double tHat1, Point2D.Double tHat2, double errorSquared, BezierPath bezierPath) {\r\n    Point2D.Double[] bezCurve;/* Control points of fitted Bezier curve */\r\n\r\n    double[] u;/* Parameter values for point */\r\n\r\n    double maxError;/* Maximum fitting errorSquared */\r\n\r\n    int[] splitPoint = new int[1];/* Point to split point set at.\n    This is an array of size one, because we need it as an input/output parameter.\n     */\r\n\r\n    int nPts;/* Number of points in subset */\r\n\r\n    double iterationError;/* Error below which you try iterating */\r\n\r\n    int maxIterations = 4;/* Max times to try iterating */\r\n\r\n    Point2D.Double tHatCenter = new Point2D.Double();/* Unit tangent vector at splitPoint */\r\n\r\n    int i;\r\n    // clone unit tangent vectors, so that we can alter their coordinates\r\n    // without affecting the input values.\r\n    tHat1 = ((Point2D.Double) (tHat1.clone()));\r\n    tHat2 = ((Point2D.Double) (tHat2.clone()));\r\n    iterationError = errorSquared * errorSquared;\r\n    nPts = (last - first) + 1;\r\n    /* Use heuristic if region only has two points in it */\r\n    if (nPts == 2) {\r\n        double dist = (Bezier.v2DistanceBetween2Points(d.get(last), d.get(first))) / 3.0;\r\n        bezCurve = new Point2D.Double[4];\r\n        for (i = 0; i < (bezCurve.length); i++) {\r\n            bezCurve[i] = new Point2D.Double();\r\n        }\r\n        bezCurve[0] = d.get(first);\r\n        bezCurve[3] = d.get(last);\r\n        Bezier.v2Add(bezCurve[0], Bezier.v2Scale(tHat1, dist), bezCurve[1]);\r\n        Bezier.v2Add(bezCurve[3], Bezier.v2Scale(tHat2, dist), bezCurve[2]);\r\n        bezierPath.curveTo(bezCurve[1].x, bezCurve[1].y, bezCurve[2].x, bezCurve[2].y, bezCurve[3].x, bezCurve[3].y);\r\n        return;\r\n    }\r\n    /* Parameterize points, and attempt to fit curve */\r\n    u = Bezier.chordLengthParameterize(d, first, last);\r\n    bezCurve = Bezier.generateBezier(d, first, last, u, tHat1, tHat2);\r\n    /* Find max deviation of points to fitted curve */\r\n    maxError = Bezier.computeMaxError(d, first, last, bezCurve, u, splitPoint);\r\n    if (maxError < errorSquared) {\r\n        Bezier.addCurveTo(bezCurve, bezierPath, errorSquared, ((first == 0) && (last == ((d.size()) - 1))));\r\n        return;\r\n    }\r\n    /* If errorSquared not too large, try some reparameterization */\r\n    /* and iteration */\r\n    if (maxError < iterationError) {\r\n        double[] uPrime;/* Improved parameter values */\r\n\r\n        for (i = 0; i < maxIterations; i++) {\r\n            uPrime = Bezier.reparameterize(d, first, last, u, bezCurve);\r\n            bezCurve = Bezier.generateBezier(d, first, last, uPrime, tHat1, tHat2);\r\n            maxError = Bezier.computeMaxError(d, first, last, bezCurve, uPrime, splitPoint);\r\n            if (maxError < errorSquared) {\r\n                Bezier.addCurveTo(bezCurve, bezierPath, errorSquared, ((first == 0) && (last == ((d.size()) - 1))));\r\n                return;\r\n            }\r\n            u = uPrime;\r\n        }\r\n    }\r\n    /* Fitting failed -- split at max errorSquared point and fit recursively */\r\n    tHatCenter = Bezier.computeCenterTangent(d, splitPoint[0]);\r\n    if (first < (splitPoint[0])) {\r\n        Bezier.fitCubic(d, first, splitPoint[0], tHat1, tHatCenter, errorSquared, bezierPath);\r\n    } else {\r\n        bezierPath.lineTo(d.get(splitPoint[0]).x, d.get(splitPoint[0]).y);\r\n        // System.err.println(\"Cant split any further \" + first + \"..\" + splitPoint[0]);\r\n    }\r\n    Bezier.v2Negate(tHatCenter);\r\n    if ((splitPoint[0]) < last) {\r\n        Bezier.fitCubic(d, splitPoint[0], last, tHatCenter, tHat2, errorSquared, bezierPath);\r\n    } else {\r\n        bezierPath.lineTo(d.get(last).x, d.get(last).y);\r\n        // System.err.println(\"Cant split any further \" + splitPoint[0] + \"..\" + last);\r\n    }\r\n}'),(1328,'BezierPath bezierPath','org.jhotdraw.geom.BezierPath',343,341,'org.jhotdraw.geom.Bezier',3328,'org.jhotdraw.geom.Bezier.addCurveTo(java.awt.geom.Point2D$Double[],org.jhotdraw.geom.BezierPath,double,boolean)',0,'/**\r\n * Adds the curve to the bezier path.\r\n *\r\n * @param bezCurve\r\n * 		\r\n * @param bezierPath\r\n * 		\r\n */\r\nprivate static void addCurveTo(Point2D.Double[] bezCurve, BezierPath bezierPath, double errorSquared, boolean connectsCorners) {\r\n    BezierPath.Node lastNode = bezierPath.get(((bezierPath.size()) - 1));\r\n    double error = Math.sqrt(errorSquared);\r\n    if ((connectsCorners && (Geom.lineContainsPoint(lastNode.x[0], lastNode.y[0], bezCurve[3].x, bezCurve[3].y, bezCurve[1].x, bezCurve[1].y, error))) && (Geom.lineContainsPoint(lastNode.x[0], lastNode.y[0], bezCurve[3].x, bezCurve[3].y, bezCurve[2].x, bezCurve[2].y, error))) {\r\n        bezierPath.lineTo(bezCurve[3].x, bezCurve[3].y);\r\n    } else {\r\n        bezierPath.curveTo(bezCurve[1].x, bezCurve[1].y, bezCurve[2].x, bezCurve[2].y, bezCurve[3].x, bezCurve[3].y);\r\n    }\r\n}'),(1329,'BezierPath.Node that','org.jhotdraw.geom.BezierPath$Node',342,342,'org.jhotdraw.geom.BezierPath$Node',3413,'org.jhotdraw.geom.BezierPath$Node.-init-(org.jhotdraw.geom.BezierPath$Node)',0,'public Node(BezierPath.Node that) {\r\n    setTo(that);\r\n}'),(1330,'BezierPath.Node that','org.jhotdraw.geom.BezierPath$Node',342,342,'org.jhotdraw.geom.BezierPath$Node',3428,'org.jhotdraw.geom.BezierPath$Node.setTo(org.jhotdraw.geom.BezierPath$Node)',0,'public void setTo(BezierPath.Node that) {\r\n    this.mask = that.mask;\r\n    this.keepColinear = that.keepColinear;\r\n    System.arraycopy(that.x, 0, this.x, 0, 3);\r\n    System.arraycopy(that.y, 0, this.y, 0, 3);\r\n}'),(1331,'BezierPath that','org.jhotdraw.geom.BezierPath',343,343,'org.jhotdraw.geom.BezierPath',3405,'org.jhotdraw.geom.BezierPath.setTo(org.jhotdraw.geom.BezierPath)',0,'public void setTo(BezierPath that) {\r\n    while ((that.size()) < (size())) {\r\n        remove(((size()) - 1));\r\n    } \r\n    for (int i = 0, n = size(); i < n; i++) {\r\n        get(i).setTo(that.get(i));\r\n    }\r\n    while ((size()) < (that.size())) {\r\n        add(((BezierPath.Node) (that.get(size()).clone())));\r\n    } \r\n}'),(1332,'BezierPath path','org.jhotdraw.geom.BezierPath',343,344,'org.jhotdraw.geom.BezierPathIterator',3430,'org.jhotdraw.geom.BezierPathIterator.-init-(org.jhotdraw.geom.BezierPath)',0,'/**\r\n * Constructs an iterator given a BezierPath.\r\n *\r\n * @see BezierPath#getPathIterator\r\n */\r\npublic BezierPathIterator(BezierPath path) {\r\n    this(path, null);\r\n}'),(1333,'BezierPath path','org.jhotdraw.geom.BezierPath',343,344,'org.jhotdraw.geom.BezierPathIterator',3431,'org.jhotdraw.geom.BezierPathIterator.-init-(org.jhotdraw.geom.BezierPath,java.awt.geom.AffineTransform)',0,'/**\r\n * Constructs an iterator given a BezierPath and an optional\r\n * AffineTransform.\r\n *\r\n * @see BezierPath#getPathIterator\r\n */\r\npublic BezierPathIterator(BezierPath path, AffineTransform at) {\r\n    this.path = path;\r\n    this.affine = at;\r\n}'),(1334,'Dimension2DDouble d','org.jhotdraw.geom.Dimension2DDouble',346,346,'org.jhotdraw.geom.Dimension2DDouble',3448,'org.jhotdraw.geom.Dimension2DDouble.-init-(org.jhotdraw.geom.Dimension2DDouble)',0,'/**\r\n * Creates an instance of <code>Dimension2DDouble</code> whose width\r\n * and height are the same as for the specified dimension.\r\n *\r\n * @param d\r\n * 		the specified dimension for the\r\n * 		<code>width</code> and\r\n * 		<code>height</code> values\r\n */\r\npublic Dimension2DDouble(Dimension2DDouble d) {\r\n    this(d.width, d.height);\r\n}'),(1335,'Dimension2DDouble d','org.jhotdraw.geom.Dimension2DDouble',346,346,'org.jhotdraw.geom.Dimension2DDouble',3456,'org.jhotdraw.geom.Dimension2DDouble.setSize(org.jhotdraw.geom.Dimension2DDouble)',0,'/**\r\n * Sets the size of this <code>Dimension2DDouble</code> object to the specified size.\r\n * This method is included for completeness, to parallel the\r\n * <code>setSize</code> method defined by <code>Component</code>.\r\n *\r\n * @param d\r\n * 		the new size for this <code>Dimension2DDouble</code> object\r\n * @see Dimension2DDouble#getSize\r\n * @see java.awt.Component#setSize\r\n * @since JDK1.1\r\n */\r\npublic void setSize(Dimension2DDouble d) {\r\n    setSize(d.width, d.height);\r\n}'),(1336,'BezierPath bp','org.jhotdraw.geom.BezierPath',343,347,'org.jhotdraw.geom.DoubleStroke',3463,'org.jhotdraw.geom.DoubleStroke.traceStroke(org.jhotdraw.geom.BezierPath,java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)',0,'protected void traceStroke(BezierPath bp, GeneralPath left, GeneralPath right) {\r\n    // XXX - We only support straight line segments here\r\n    // Corners of the current and the previous thick line\r\n    double[] currentCorners = new double[8];\r\n    double[] prevCorners = new double[8];\r\n    Point2D.Double intersect;\r\n    // Remove duplicate nodes from bezier path.\r\n    if (bp.isClosed()) {\r\n        BezierPath.Node prev = bp.get(((bp.size()) - 1));\r\n        for (int i = 0; i < (bp.size()); i++) {\r\n            BezierPath.Node node = bp.get(i);\r\n            if (((prev.x[0]) == (node.x[0])) && ((prev.y[0]) == (node.y[0]))) {\r\n                bp.remove((i--));\r\n            } else {\r\n                prev = node;\r\n            }\r\n        }\r\n    } else {\r\n        BezierPath.Node prev = bp.get(0);\r\n        for (int i = 1; i < (bp.size()); i++) {\r\n            BezierPath.Node node = bp.get(i);\r\n            if (((prev.x[0]) == (node.x[0])) && ((prev.y[0]) == (node.y[0]))) {\r\n                bp.remove((i--));\r\n            } else {\r\n                prev = node;\r\n            }\r\n        }\r\n    }\r\n    // Handle the first point of the bezier path\r\n    if ((bp.isClosed()) && ((bp.size()) > 1)) {\r\n        prevCorners = computeThickLine(bp.get(((bp.size()) - 1)).x[0], bp.get(((bp.size()) - 1)).y[0], bp.get(0).x[0], bp.get(0).y[0], innerWidth, prevCorners);\r\n        currentCorners = computeThickLine(bp.get(0).x[0], bp.get(0).y[0], bp.get(1).x[0], bp.get(1).y[0], innerWidth, currentCorners);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.moveTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.moveTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.moveTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.moveTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    } else {\r\n        if ((bp.size()) > 1) {\r\n            currentCorners = computeThickLine(bp.get(0).x[0], bp.get(0).y[0], bp.get(1).x[0], bp.get(1).y[0], innerWidth, currentCorners);\r\n            right.moveTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n            left.moveTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    }\r\n    // Handle points in the middle of the bezier path\r\n    for (int i = 1, n = (bp.size()) - 1; i < n; i++) {\r\n        double[] tmp = prevCorners;\r\n        prevCorners = currentCorners;\r\n        currentCorners = computeThickLine(bp.get(i).x[0], bp.get(i).y[0], bp.get((i + 1)).x[0], bp.get((i + 1)).y[0], innerWidth, tmp);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.lineTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.lineTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    }\r\n    // Handle the last point of the bezier path\r\n    if ((bp.isClosed()) && ((bp.size()) > 0)) {\r\n        double[] tmp = prevCorners;\r\n        prevCorners = currentCorners;\r\n        currentCorners = // bp.get(1).x[0], bp.get(1).y[0],\r\n        computeThickLine(bp.get(((bp.size()) - 1)).x[0], bp.get(((bp.size()) - 1)).y[0], bp.get(0).x[0], bp.get(0).y[0], innerWidth, tmp);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.lineTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.lineTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n        right.closePath();\r\n        left.closePath();\r\n    } else {\r\n        if ((bp.size()) > 1) {\r\n            right.lineTo(((float) (currentCorners[4])), ((float) (currentCorners[5])));\r\n            left.lineTo(((float) (currentCorners[6])), ((float) (currentCorners[7])));\r\n        }\r\n    }\r\n}'),(1337,'Insets2D i','org.jhotdraw.geom.Insets2D',352,352,'org.jhotdraw.geom.Insets2D',3523,'org.jhotdraw.geom.Insets2D.set(org.jhotdraw.geom.Insets2D)',0,'/**\r\n * Sets the insets.\r\n *\r\n * @param i\r\n * 		The new insets.\r\n */\r\npublic void set(Insets2D i) {\r\n    set(i.getTop(), i.getLeft(), i.getBottom(), i.getRight());\r\n}'),(1338,'Insets2D i','org.jhotdraw.geom.Insets2D',352,352,'org.jhotdraw.geom.Insets2D',3513,'org.jhotdraw.geom.Insets2D.add(org.jhotdraw.geom.Insets2D)',0,'/**\r\n * Adds the specified insets to the current insets.\r\n *\r\n * @param i\r\n * 		The insets to be added.\r\n */\r\npublic void add(Insets2D i) {\r\n    set(((getTop()) + (i.getTop())), ((getLeft()) + (i.getLeft())), ((getBottom()) + (i.getBottom())), ((getRight()) + (i.getRight())));\r\n}'),(1339,'Insets2D i','org.jhotdraw.geom.Insets2D',352,352,'org.jhotdraw.geom.Insets2D',3525,'org.jhotdraw.geom.Insets2D.subtract(org.jhotdraw.geom.Insets2D)',0,'/**\r\n * Subtracts the specified insets from the current insets.\r\n *\r\n * @param i\r\n * 		The insets to be subtracted.\r\n */\r\npublic void subtract(Insets2D i) {\r\n    set(((getTop()) - (i.getTop())), ((getLeft()) - (i.getLeft())), ((getBottom()) - (i.getBottom())), ((getRight()) - (i.getRight())));\r\n}'),(1340,'Polygon2D.Double pg','org.jhotdraw.geom.Polygon2D$Double',353,355,'org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble',3598,'org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble.-init-(org.jhotdraw.geom.Polygon2D$Double,java.awt.geom.AffineTransform)',0,'public PolygonPathIteratorDouble(Polygon2D.Double pg, AffineTransform at) {\r\n    poly = pg;\r\n    transform = at;\r\n    if ((pg.npoints) == 0) {\r\n        // Prevent a spurious SEG_CLOSE segment\r\n        index = 1;\r\n    }\r\n}'),(1341,'Polygon2D.Float pg','org.jhotdraw.geom.Polygon2D$Float',354,356,'org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat',3604,'org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat.-init-(org.jhotdraw.geom.Polygon2D$Float,java.awt.geom.AffineTransform)',0,'public PolygonPathIteratorFloat(Polygon2D.Float pg, AffineTransform at) {\r\n    poly = pg;\r\n    transform = at;\r\n    if ((pg.npoints) == 0) {\r\n        // Prevent a spurious SEG_CLOSE segment\r\n        index = 1;\r\n    }\r\n}'),(1342,'AttributeKey<T> attributeKey','org.jhotdraw.draw.AttributeKey',109,362,'org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit',3654,'org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit.-init-(java.util.Set,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.util.LinkedList)',0,'public UndoableAttributeEdit(Set<Figure> editedFigures, AttributeKey<T> attributeKey, T editRedoValue, LinkedList<Object> editUndoData) {\r\n    this.editedFigures = editedFigures;\r\n    this.attributeKey = attributeKey;\r\n    this.editRedoValue = editRedoValue;\r\n    this.editUndoData = editUndoData;\r\n}'),(1343,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3632,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    this(key, attributeEditor, drawingEditor, true);\r\n}'),(1344,'AttributeEditor<T> attributeEditor','org.jhotdraw.gui.AttributeEditor',366,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3632,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    this(key, attributeEditor, drawingEditor, true);\r\n}'),(1345,'DrawingEditor drawingEditor','org.jhotdraw.draw.DrawingEditor',169,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3632,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    this(key, attributeEditor, drawingEditor, true);\r\n}'),(1346,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3633,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    this(key, null, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1347,'AttributeEditor<T> attributeEditor','org.jhotdraw.gui.AttributeEditor',366,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3633,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    this(key, null, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1348,'DrawingEditor drawingEditor','org.jhotdraw.draw.DrawingEditor',169,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3633,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    this(key, null, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1349,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3634,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'@SuppressWarnings(\"unchecked\")\r\npublic AbstractAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    eventHandler = new EventHandler();\r\n    this.defaultAttributes = ((Map<AttributeKey, Object>) ((defaultAttributes == null) ? Collections.emptyMap() : defaultAttributes));\r\n    attributeEditor.setAttributeValue(key.getDefaultValue());\r\n    setAttributeKey(key);\r\n    setAttributeEditor(attributeEditor);\r\n    setDrawingEditor(drawingEditor);\r\n    isUpdateDrawingEditorDefaults = updateDrawingEditorDefaults;\r\n}'),(1350,'AttributeEditor<T> attributeEditor','org.jhotdraw.gui.AttributeEditor',366,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3634,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'@SuppressWarnings(\"unchecked\")\r\npublic AbstractAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    eventHandler = new EventHandler();\r\n    this.defaultAttributes = ((Map<AttributeKey, Object>) ((defaultAttributes == null) ? Collections.emptyMap() : defaultAttributes));\r\n    attributeEditor.setAttributeValue(key.getDefaultValue());\r\n    setAttributeKey(key);\r\n    setAttributeEditor(attributeEditor);\r\n    setDrawingEditor(drawingEditor);\r\n    isUpdateDrawingEditorDefaults = updateDrawingEditorDefaults;\r\n}'),(1351,'DrawingEditor drawingEditor','org.jhotdraw.draw.DrawingEditor',169,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3634,'org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'@SuppressWarnings(\"unchecked\")\r\npublic AbstractAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    eventHandler = new EventHandler();\r\n    this.defaultAttributes = ((Map<AttributeKey, Object>) ((defaultAttributes == null) ? Collections.emptyMap() : defaultAttributes));\r\n    attributeEditor.setAttributeValue(key.getDefaultValue());\r\n    setAttributeKey(key);\r\n    setAttributeEditor(attributeEditor);\r\n    setDrawingEditor(drawingEditor);\r\n    isUpdateDrawingEditorDefaults = updateDrawingEditorDefaults;\r\n}'),(1352,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,361,'org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler',3653,'org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt) {\r\n    attributeRestoreData = null;\r\n    if ((figuresOfInterest) != null) {\r\n        for (Figure f : figuresOfInterest) {\r\n            f.removeFigureListener(this);\r\n        }\r\n    }\r\n    figuresOfInterest = getEditedFigures();\r\n    for (Figure f : figuresOfInterest) {\r\n        f.addFigureListener(this);\r\n    }\r\n    updateAttributeEditor();\r\n}'),(1353,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,361,'org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler',3651,'org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    if ((e.getAttribute()) == (attributeKey)) {\r\n        updateAttributeEditor();\r\n    }\r\n}'),(1354,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3644,'org.jhotdraw.gui.AbstractAttributeEditorHandler.setDrawingEditor(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Attaches the FigureAttributeEditorHandler to the specified DrawingEditor.\r\n * <p>\r\n * The FigureAttributeEditorHandler listens to view changes and selection\r\n * changes of the drawing editor and calls setEnabled(boolean) and\r\n * updateField(Set&lt;Figure&gt;) on the field accordingly.\r\n *\r\n * @param newValue\r\n * 		a drawing editor.\r\n */\r\npublic void setDrawingEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = drawingEditor;\r\n    if ((drawingEditor) != null) {\r\n        drawingEditor.removePropertyChangeListener(eventHandler);\r\n    }\r\n    this.drawingEditor = newValue;\r\n    if ((drawingEditor) != null) {\r\n        drawingEditor.addPropertyChangeListener(eventHandler);\r\n    }\r\n    updateActiveView();\r\n}'),(1355,'DrawingView newValue','org.jhotdraw.draw.DrawingView',171,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3646,'org.jhotdraw.gui.AbstractAttributeEditorHandler.setView(org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Attaches the FigureAttributeEditorHandler to the specified DrawingView.\r\n * <p>\r\n * If a non-null value is provided, the FigureAttributeEditorHandler listens only\r\n * to selection changes of the specified view. If a null value is provided,\r\n * the FigureAttributeEditorHandler listens to all views of the drawing editor.\r\n *\r\n * @param newValue\r\n * 		a drawing view.\r\n */\r\npublic void setView(DrawingView newValue) {\r\n    this.view = newValue;\r\n    updateActiveView();\r\n}'),(1356,'AttributeEditor<T> newValue','org.jhotdraw.gui.AttributeEditor',366,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3642,'org.jhotdraw.gui.AbstractAttributeEditorHandler.setAttributeEditor(org.jhotdraw.gui.AttributeEditor)',0,'/**\r\n * Attaches the FigureAttributeEditorHandler to the specified AttributeEditor.\r\n */\r\npublic void setAttributeEditor(AttributeEditor<T> newValue) {\r\n    if ((attributeEditor) != null) {\r\n        attributeEditor.removePropertyChangeListener(eventHandler);\r\n    }\r\n    this.attributeEditor = newValue;\r\n    if ((attributeEditor) != null) {\r\n        attributeEditor.addPropertyChangeListener(eventHandler);\r\n    }\r\n}'),(1357,'AttributeKey<T> newValue','org.jhotdraw.draw.AttributeKey',109,363,'org.jhotdraw.gui.AbstractAttributeEditorHandler',3643,'org.jhotdraw.gui.AbstractAttributeEditorHandler.setAttributeKey(org.jhotdraw.draw.AttributeKey)',0,'public void setAttributeKey(AttributeKey<T> newValue) {\r\n    attributeKey = newValue;\r\n}'),(1358,'Arrangeable.Arrangement newValue','org.jhotdraw.gui.Arrangeable$Arrangement',364,365,'org.jhotdraw.gui.Arrangeable',3663,'org.jhotdraw.gui.Arrangeable.setArrangement(org.jhotdraw.gui.Arrangeable$Arrangement)',0,'public void setArrangement(Arrangeable.Arrangement newValue);'),(1359,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,368,'org.jhotdraw.gui.DrawingAttributeEditorHandler',3677,'org.jhotdraw.gui.DrawingAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public DrawingAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor, false);\r\n}'),(1360,'AttributeEditor<T> attributeEditor','org.jhotdraw.gui.AttributeEditor',366,368,'org.jhotdraw.gui.DrawingAttributeEditorHandler',3677,'org.jhotdraw.gui.DrawingAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public DrawingAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor, false);\r\n}'),(1361,'DrawingEditor drawingEditor','org.jhotdraw.draw.DrawingEditor',169,368,'org.jhotdraw.gui.DrawingAttributeEditorHandler',3677,'org.jhotdraw.gui.DrawingAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public DrawingAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor, false);\r\n}'),(1362,'Drawing newValue','org.jhotdraw.draw.Drawing',168,368,'org.jhotdraw.gui.DrawingAttributeEditorHandler',3680,'org.jhotdraw.gui.DrawingAttributeEditorHandler.setDrawing(org.jhotdraw.draw.Drawing)',0,'public void setDrawing(Drawing newValue) {\r\n    drawing = newValue;\r\n    updateAttributeEditor();\r\n}'),(1363,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3685,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor);\r\n}'),(1364,'AttributeEditor<T> attributeEditor','org.jhotdraw.gui.AttributeEditor',366,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3685,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor);\r\n}'),(1365,'DrawingEditor drawingEditor','org.jhotdraw.draw.DrawingEditor',169,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3685,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor);\r\n}'),(1366,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3686,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1367,'AttributeEditor<T> attributeEditor','org.jhotdraw.gui.AttributeEditor',366,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3686,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1368,'DrawingEditor drawingEditor','org.jhotdraw.draw.DrawingEditor',169,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3686,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1369,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3687,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, defaultAttributes, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1370,'AttributeEditor<T> attributeEditor','org.jhotdraw.gui.AttributeEditor',366,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3687,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, defaultAttributes, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1371,'DrawingEditor drawingEditor','org.jhotdraw.draw.DrawingEditor',169,370,'org.jhotdraw.gui.FigureAttributeEditorHandler',3687,'org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)',0,'public FigureAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, defaultAttributes, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}'),(1372,'FontChooserUI ui','org.jhotdraw.gui.plaf.FontChooserUI',408,379,'org.jhotdraw.gui.JFontChooser',3791,'org.jhotdraw.gui.JFontChooser.setUI(org.jhotdraw.gui.plaf.FontChooserUI)',0,'/**\r\n * Sets the look and feel (L&F) object that renders this component.\r\n *\r\n * @param ui\r\n * 		the PanelUI L&F object\r\n * @see UIDefaults#getUI\r\n */\r\npublic void setUI(FontChooserUI ui) {\r\n    super.setUI(ui);\r\n}'),(1373,'FontChooserModel newValue','org.jhotdraw.gui.fontchooser.FontChooserModel',404,379,'org.jhotdraw.gui.JFontChooser',3788,'org.jhotdraw.gui.JFontChooser.setModel(org.jhotdraw.gui.fontchooser.FontChooserModel)',0,'/**\r\n * Sets the selected Font.\r\n * This is a bound property.\r\n *\r\n * @param newValue\r\n * 		The new selected font, or null if no font is to be\r\n * 		selected..\r\n */\r\npublic void setModel(FontChooserModel newValue) {\r\n    FontChooserModel oldValue = model;\r\n    if (oldValue != null) {\r\n        oldValue.removeTreeModelListener(modelHandler);\r\n    }\r\n    this.model = newValue;\r\n    if (newValue != null) {\r\n        newValue.addTreeModelListener(modelHandler);\r\n    }\r\n    firePropertyChange(JFontChooser.MODEL_PROPERTY, oldValue, newValue);\r\n    updateSelectionPath(selectedFont);\r\n}'),(1374,'SheetListener l','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3874,'org.jhotdraw.gui.JSheet.addSheetListener(org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Adds a sheet listener.\r\n */\r\npublic void addSheetListener(SheetListener l) {\r\n    listenerList.add(SheetListener.class, l);\r\n}'),(1375,'SheetListener l','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3889,'org.jhotdraw.gui.JSheet.removeSheetListener(org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Removes a sheet listener.\r\n */\r\npublic void removeSheetListener(SheetListener l) {\r\n    listenerList.remove(SheetListener.class, l);\r\n}'),(1376,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3911,'org.jhotdraw.gui.JSheet.showSheet(javax.swing.JOptionPane,java.awt.Component,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Displays an option pane as a sheet on its parent window.\r\n *\r\n * @param pane\r\n * 		The option pane.\r\n * @param parentComponent\r\n * 		The parent of the option pane.\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showSheet(JOptionPane pane, Component parentComponent, SheetListener listener) {\r\n    final JSheet sheet = JSheet.createSheet(pane, parentComponent, JSheet.styleFromMessageType(pane.getMessageType()));\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n}'),(1377,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3897,'org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Brings up a sheet with the options <i>Yes</i>,\r\n * <i>No</i> and <i>Cancel</i>.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in which the\r\n * 		sheet is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, JOptionPane.YES_NO_CANCEL_OPTION, listener);\r\n}'),(1378,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3896,'org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Brings up a sheet where the number of choices is determined\r\n * by the <code>optionType</code> parameter.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in which the\r\n * 		sheet is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param optionType\r\n * 		an int designating the options available on the dialog:\r\n * 		<code>YES_NO_OPTION</code>, or\r\n * 		<code>YES_NO_CANCEL_OPTION</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, optionType, JOptionPane.QUESTION_MESSAGE, listener);\r\n}'),(1379,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3895,'org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,int,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Brings up a sheet where the number of choices is determined\r\n * by the <code>optionType</code> parameter, where the\r\n * <code>messageType</code>\r\n * parameter determines the icon to display.\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the Look and Feel.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in\r\n * 		which the dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param optionType\r\n * 		an integer designating the options available\r\n * 		on the dialog: <code>YES_NO_OPTION</code>,\r\n * 		or <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * 		an integer designating the kind of message this is;\r\n * 		primarily used to determine the icon from the pluggable\r\n * 		Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, int messageType, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, optionType, messageType, null, listener);\r\n}'),(1380,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3894,'org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,int,javax.swing.Icon,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Brings up a sheet with a specified icon, where the number of\r\n * choices is determined by the <code>optionType</code> parameter.\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the look and feel.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in which the\r\n * 		dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the Object to display\r\n * @param optionType\r\n * 		an int designating the options available on the dialog:\r\n * 		<code>YES_NO_OPTION</code>,\r\n * 		or <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * 		an int designating the kind of message this is,\r\n * 		primarily used to determine the icon from the pluggable\r\n * 		Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * 		the icon to display in the dialog\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, int messageType, Icon icon, SheetListener listener) {\r\n    JSheet.showOptionSheet(parentComponent, message, optionType, messageType, icon, null, null, listener);\r\n}'),(1381,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3901,'org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Shows a question-message sheet requesting input from the user\r\n * parented to <code>parentComponent</code>.\r\n *\r\n * @param parentComponent\r\n * 		the parent <code>Component</code> for the\r\n * 		dialog\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, JOptionPane.QUESTION_MESSAGE, listener);\r\n}'),(1382,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3900,'org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,java.lang.Object,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Shows a question-message sheet requesting input from the user and\r\n * parented to <code>parentComponent</code>. The input value will be\r\n * initialized to <code>initialSelectionValue</code>.\r\n *\r\n * @param parentComponent\r\n * 		the parent <code>Component</code> for the\r\n * 		dialog\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param initialSelectionValue\r\n * 		the value used to initialize the input\r\n * 		field\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, Object initialSelectionValue, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, JOptionPane.QUESTION_MESSAGE, null, null, initialSelectionValue, listener);\r\n}'),(1383,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3899,'org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Shows a sheet requesting input from the user parented to\r\n * <code>parentComponent</code> and message type <code>messageType</code>.\r\n *\r\n * @param parentComponent\r\n * 		the parent <code>Component</code> for the\r\n * 		dialog\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message that is to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, int messageType, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, messageType, null, null, null, listener);\r\n}'),(1384,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3898,'org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,int,javax.swing.Icon,java.lang.Object[],java.lang.Object,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Prompts the user for input in a sheet where the\r\n * initial selection, possible selections, and all other options can\r\n * be specified. The user will able to choose from\r\n * <code>selectionValues</code>, where <code>null</code> implies the\r\n * user can input\r\n * whatever they wish, usually by means of a <code>JTextField</code>.\r\n * <code>initialSelectionValue</code> is the initial value to prompt\r\n * the user with. It is up to the UI to decide how best to represent\r\n * the <code>selectionValues</code>, but usually a\r\n * <code>JComboBox</code>, <code>JList</code>, or\r\n * <code>JTextField</code> will be used.\r\n *\r\n * @param parentComponent\r\n * 		the parent <code>Component</code> for the\r\n * 		dialog\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * 		the <code>Icon</code> image to display\r\n * @param selectionValues\r\n * 		an array of <code>Object</code>s that\r\n * 		gives the possible selections\r\n * @param initialSelectionValue\r\n * 		the value used to initialize the input\r\n * 		field\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, int messageType, Icon icon, Object[] selectionValues, Object initialSelectionValue, SheetListener listener) {\r\n    JOptionPane pane = new JOptionPane(message, messageType, JOptionPane.OK_CANCEL_OPTION, icon, null, null);\r\n    pane.setWantsInput(true);\r\n    pane.setSelectionValues(selectionValues);\r\n    pane.setInitialSelectionValue(initialSelectionValue);\r\n    pane.setComponentOrientation((parentComponent == null ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());\r\n    int style = JSheet.styleFromMessageType(messageType);\r\n    JSheet sheet = JSheet.createSheet(pane, parentComponent, style);\r\n    pane.selectInitialValue();\r\n    /* sheet.addWindowListener(new WindowAdapter() {\n    public void windowClosed(WindowEvent evt) {\n    sheet.dispose();\n    }\n    });\n     */\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n    sheet.toFront();\r\n}'),(1385,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3906,'org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Brings up an information-message sheet.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in\r\n * 		which the dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param listener\r\n * 		This listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showMessageSheet(parentComponent, message, JOptionPane.INFORMATION_MESSAGE, listener);\r\n}'),(1386,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3905,'org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Brings up a sheet that displays a message using a default\r\n * icon determined by the <code>messageType</code> parameter.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code>\r\n * 		in which the dialog is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * 		This listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, int messageType, SheetListener listener) {\r\n    JSheet.showMessageSheet(parentComponent, message, messageType, null, listener);\r\n}'),(1387,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3904,'org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,int,javax.swing.Icon,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Brings up a sheet displaying a message, specifying all parameters.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code> in which the\r\n * 		sheet is displayed; if <code>null</code>,\r\n * 		or if the <code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param messageType\r\n * 		the type of message to be displayed:\r\n * 		<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * 		an icon to display in the sheet that helps the user\r\n * 		identify the kind of message that is being displayed\r\n * @param listener\r\n * 		This listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, int messageType, Icon icon, SheetListener listener) {\r\n    JSheet.showOptionSheet(parentComponent, message, JOptionPane.DEFAULT_OPTION, messageType, icon, null, null, listener);\r\n}'),(1388,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3908,'org.jhotdraw.gui.JSheet.showOptionSheet(java.awt.Component,java.lang.Object,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Brings up a sheet with a specified icon, where the initial\r\n * choice is determined by the <code>initialValue</code> parameter and\r\n * the number of choices is determined by the <code>optionType</code>\r\n * parameter.\r\n * <p>\r\n * If <code>optionType</code> is <code>YES_NO_OPTION</code>,\r\n * or <code>YES_NO_CANCEL_OPTION</code>\r\n * and the <code>options</code> parameter is <code>null</code>,\r\n * then the options are\r\n * supplied by the look and feel.\r\n * <p>\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the look and feel.\r\n *\r\n * @param parentComponent\r\n * 		determines the <code>Frame</code>\r\n * 		in which the dialog is displayed;  if\r\n * 		<code>null</code>, or if the\r\n * 		<code>parentComponent</code> has no\r\n * 		<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * 		the <code>Object</code> to display\r\n * @param optionType\r\n * 		an integer designating the options available on the\r\n * 		dialog: <code>YES_NO_OPTION</code>,\r\n * 		or <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * 		an integer designating the kind of message this is,\r\n * 		primarily used to determine the icon from the\r\n * 		pluggable Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * 		<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * 		<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * 		<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * 		or <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * 		the icon to display in the dialog\r\n * @param options\r\n * 		an array of objects indicating the possible choices\r\n * 		the user can make; if the objects are components, they\r\n * 		are rendered properly; non-<code>String</code>\r\n * 		objects are\r\n * 		rendered using their <code>toString</code> methods;\r\n * 		if this parameter is <code>null</code>,\r\n * 		the options are determined by the Look and Feel\r\n * @param initialValue\r\n * 		the object that represents the default selection\r\n * 		for the dialog; only meaningful if <code>options</code>\r\n * 		is used; can be <code>null</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showOptionSheet(Component parentComponent, Object message, int optionType, int messageType, Icon icon, Object[] options, Object initialValue, SheetListener listener) {\r\n    JOptionPane pane = new JOptionPane(message, messageType, optionType, icon, options, initialValue);\r\n    pane.setInitialValue(initialValue);\r\n    pane.setComponentOrientation((parentComponent == null ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());\r\n    int style = JSheet.styleFromMessageType(messageType);\r\n    JSheet sheet = JSheet.createSheet(pane, parentComponent, style);\r\n    pane.selectInitialValue();\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n    sheet.toFront();\r\n}'),(1389,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3909,'org.jhotdraw.gui.JSheet.showSaveSheet(javax.swing.JFileChooser,java.awt.Component,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Displays a \"Save File\" file chooser sheet. Note that the\r\n * text that appears in the approve button is determined by\r\n * the L&F.\r\n *\r\n * @param parent\r\n * 		the parent component of the dialog,\r\n * 		can be <code>null</code>.\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showSaveSheet(JFileChooser chooser, Component parent, SheetListener listener) {\r\n    chooser.setDialogType(JFileChooser.SAVE_DIALOG);\r\n    JSheet.showSheet(chooser, parent, null, listener);\r\n}'),(1390,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3907,'org.jhotdraw.gui.JSheet.showOpenSheet(javax.swing.JFileChooser,java.awt.Component,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Displays an \"Open File\" file chooser sheet. Note that the\r\n * text that appears in the approve button is determined by\r\n * the L&F.\r\n *\r\n * @param parent\r\n * 		the parent component of the dialog,\r\n * 		can be <code>null</code>.\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showOpenSheet(JFileChooser chooser, Component parent, SheetListener listener) {\r\n    chooser.setDialogType(JFileChooser.OPEN_DIALOG);\r\n    JSheet.showSheet(chooser, parent, null, listener);\r\n}'),(1391,'SheetListener listener','org.jhotdraw.gui.event.SheetListener',400,388,'org.jhotdraw.gui.JSheet',3910,'org.jhotdraw.gui.JSheet.showSheet(javax.swing.JFileChooser,java.awt.Component,java.lang.String,org.jhotdraw.gui.event.SheetListener)',0,'/**\r\n * Displays a custom file chooser sheet with a custom approve button.\r\n *\r\n * @param parent\r\n * 		the parent component of the dialog;\r\n * 		can be <code>null</code>\r\n * @param approveButtonText\r\n * 		the text of the <code>ApproveButton</code>\r\n * @param listener\r\n * 		The listener for SheetEvents.\r\n */\r\npublic static void showSheet(final JFileChooser chooser, Component parent, String approveButtonText, SheetListener listener) {\r\n    if (approveButtonText != null) {\r\n        chooser.setApproveButtonText(approveButtonText);\r\n        chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);\r\n    }\r\n    // Begin Create Dialog\r\n    Frame frame = (parent instanceof Frame) ? ((Frame) (parent)) : ((Frame) (SwingUtilities.getAncestorOfClass(Frame.class, parent)));\r\n    String title = chooser.getUI().getDialogTitle(chooser);\r\n    chooser.getAccessibleContext().setAccessibleDescription(title);\r\n    final JSheet sheet = new JSheet(frame);\r\n    sheet.addSheetListener(listener);\r\n    Container contentPane = sheet.getContentPane();\r\n    contentPane.setLayout(new BorderLayout());\r\n    contentPane.add(chooser, BorderLayout.CENTER);\r\n    // End Create Dialog\r\n    final ActionListener actionListener = new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            int option;\r\n            if (evt.getActionCommand().equals(\"ApproveSelection\")) {\r\n                option = JFileChooser.APPROVE_OPTION;\r\n            } else {\r\n                option = JFileChooser.CANCEL_OPTION;\r\n            }\r\n            sheet.hide();\r\n            sheet.fireOptionSelected(chooser, option);\r\n            chooser.removeActionListener(this);\r\n        }\r\n    };\r\n    chooser.addActionListener(actionListener);\r\n    sheet.addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(WindowEvent e) {\r\n            sheet.fireOptionSelected(chooser, JFileChooser.CANCEL_OPTION);\r\n            chooser.removeActionListener(actionListener);\r\n        }\r\n    });\r\n    chooser.rescanCurrentDirectory();\r\n    sheet.pack();\r\n    sheet.show();\r\n    sheet.toFront();\r\n}'),(1392,'MDIDesktopPane newDesktop','org.jhotdraw.gui.MDIDesktopPane',390,389,'org.jhotdraw.gui.MDIDesktopManager',3914,'org.jhotdraw.gui.MDIDesktopManager.-init-(org.jhotdraw.gui.MDIDesktopPane)',0,'public MDIDesktopManager(MDIDesktopPane newDesktop) {\r\n    this.desktop = newDesktop;\r\n}'),(1393,'Arrangeable.Arrangement newValue','org.jhotdraw.gui.Arrangeable$Arrangement',364,390,'org.jhotdraw.gui.MDIDesktopPane',3929,'org.jhotdraw.gui.MDIDesktopPane.setArrangement(org.jhotdraw.gui.Arrangeable$Arrangement)',0,'public void setArrangement(Arrangeable.Arrangement newValue) {\r\n    Arrangeable.Arrangement oldValue = getArrangement();\r\n    switch (newValue) {\r\n        case CASCADE :\r\n            arrangeFramesCascading();\r\n            break;\r\n        case HORIZONTAL :\r\n            arrangeFramesHorizontally();\r\n            break;\r\n        case VERTICAL :\r\n            arrangeFramesVertically();\r\n            break;\r\n    }\r\n    firePropertyChange(\"arrangement\", oldValue, newValue);\r\n}'),(1394,'JSheet source','org.jhotdraw.gui.JSheet',388,399,'org.jhotdraw.gui.event.SheetEvent',3971,'org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source) {\r\n    super(source);\r\n}'),(1395,'JSheet source','org.jhotdraw.gui.JSheet',388,399,'org.jhotdraw.gui.event.SheetEvent',3972,'org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet,javax.swing.JFileChooser,int,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source, JFileChooser fileChooser, int option, Object value) {\r\n    super(source);\r\n    this.pane = fileChooser;\r\n    this.option = option;\r\n    this.value = value;\r\n}'),(1396,'JSheet source','org.jhotdraw.gui.JSheet',388,399,'org.jhotdraw.gui.event.SheetEvent',3973,'org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet,javax.swing.JOptionPane,int,java.lang.Object,java.lang.Object)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source, JOptionPane optionPane, int option, Object value, Object inputValue) {\r\n    super(source);\r\n    this.pane = optionPane;\r\n    this.option = option;\r\n    this.value = value;\r\n    this.inputValue = inputValue;\r\n}'),(1397,'SheetEvent evt','org.jhotdraw.gui.event.SheetEvent',399,400,'org.jhotdraw.gui.event.SheetListener',3980,'org.jhotdraw.gui.event.SheetListener.optionSelected(org.jhotdraw.gui.event.SheetEvent)',0,'/**\r\n * This method is invoked, when the user selected an option on the\r\n * JOptionPane or the JFileChooser pane on the JSheet.\r\n */\r\npublic void optionSelected(SheetEvent evt);'),(1398,'FontCollectionNode that','org.jhotdraw.gui.fontchooser.FontCollectionNode',405,405,'org.jhotdraw.gui.fontchooser.FontCollectionNode',4010,'org.jhotdraw.gui.fontchooser.FontCollectionNode.compareTo(org.jhotdraw.gui.fontchooser.FontCollectionNode)',0,'public int compareTo(FontCollectionNode that) {\r\n    return Collator.getInstance().compare(this.name, that.name);\r\n}'),(1399,'FontFamilyNode newChild','org.jhotdraw.gui.fontchooser.FontFamilyNode',407,405,'org.jhotdraw.gui.fontchooser.FontCollectionNode',4006,'org.jhotdraw.gui.fontchooser.FontCollectionNode.add(org.jhotdraw.gui.fontchooser.FontFamilyNode)',0,'public void add(FontFamilyNode newChild) {\r\n    insert(newChild, getChildCount());\r\n}'),(1400,'FontFaceNode that','org.jhotdraw.gui.fontchooser.FontFaceNode',406,406,'org.jhotdraw.gui.fontchooser.FontFaceNode',4033,'org.jhotdraw.gui.fontchooser.FontFaceNode.compareTo(org.jhotdraw.gui.fontchooser.FontFaceNode)',0,'public int compareTo(FontFaceNode that) {\r\n    return this.name.compareTo(that.name);\r\n}'),(1401,'FontFamilyNode that','org.jhotdraw.gui.fontchooser.FontFamilyNode',407,407,'org.jhotdraw.gui.fontchooser.FontFamilyNode',4055,'org.jhotdraw.gui.fontchooser.FontFamilyNode.compareTo(org.jhotdraw.gui.fontchooser.FontFamilyNode)',0,'public int compareTo(FontFamilyNode that) {\r\n    return Collator.getInstance().compare(this.name, that.name);\r\n}'),(1402,'FontFaceNode newChild','org.jhotdraw.gui.fontchooser.FontFaceNode',406,407,'org.jhotdraw.gui.fontchooser.FontFamilyNode',4052,'org.jhotdraw.gui.fontchooser.FontFamilyNode.add(org.jhotdraw.gui.fontchooser.FontFaceNode)',0,'public void add(FontFaceNode newChild) {\r\n    insert(newChild, getChildCount());\r\n}'),(1403,'JFontChooser fontChooser','org.jhotdraw.gui.JFontChooser',379,420,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI',4119,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.-init-(org.jhotdraw.gui.JFontChooser)',0,'public PaletteFontChooserUI(JFontChooser fontChooser) {\r\n    this.fontChooser = fontChooser;\r\n}'),(1404,'JFontChooser fc','org.jhotdraw.gui.JFontChooser',379,420,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI',4125,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.installComponents(org.jhotdraw.gui.JFontChooser)',0,'protected void installComponents(JFontChooser fc) {\r\n    fc.removeAll();\r\n    fc.setLayout(new BorderLayout());\r\n    selectionPanel = new PaletteFontChooserSelectionPanel();\r\n    fc.add(selectionPanel, BorderLayout.CENTER);\r\n    previewPanel = new PaletteFontChooserPreviewPanel();\r\n    fc.add(previewPanel, BorderLayout.NORTH);\r\n    FontChooserModel model = fontChooser.getModel();\r\n    updateCollectionList();\r\n    updateFamilyList();\r\n    updateFaceList();\r\n    updatePreview();\r\n}'),(1405,'JFontChooser fc','org.jhotdraw.gui.JFontChooser',379,420,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI',4126,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.installListeners(org.jhotdraw.gui.JFontChooser)',0,'protected void installListeners(JFontChooser fc) {\r\n    selectionPanelHandler = new PaletteFontChooserUI.SelectionPanelHandler();\r\n    selectionPanel.getCollectionList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().addMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addMouseListener(selectionPanelHandler);\r\n    chooserHandler = new PaletteFontChooserUI.FontChooserHandler();\r\n    fontChooser.addPropertyChangeListener(chooserHandler);\r\n    if ((fontChooser.getModel()) != null) {\r\n        fontChooser.getModel().addTreeModelListener(chooserHandler);\r\n    }\r\n}'),(1406,'JFontChooser fc','org.jhotdraw.gui.JFontChooser',379,420,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI',4129,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.uninstallComponents(org.jhotdraw.gui.JFontChooser)',0,'protected void uninstallComponents(JFontChooser fc) {\r\n    fontChooser.removeAll();\r\n}'),(1407,'JFontChooser fc','org.jhotdraw.gui.JFontChooser',379,420,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI',4130,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.uninstallListeners(org.jhotdraw.gui.JFontChooser)',0,'protected void uninstallListeners(JFontChooser fc) {\r\n    fontChooser.removePropertyChangeListener(chooserHandler);\r\n    selectionPanel.getCollectionList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().removeMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeMouseListener(selectionPanelHandler);\r\n    if ((fontChooser.getModel()) != null) {\r\n        fontChooser.getModel().removeTreeModelListener(chooserHandler);\r\n    }\r\n    chooserHandler = null;\r\n    selectionPanelHandler = null;\r\n}'),(1408,'FontCollectionNode newCollection','org.jhotdraw.gui.fontchooser.FontCollectionNode',405,420,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI',4128,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.setNewSelectionPath(org.jhotdraw.gui.fontchooser.FontCollectionNode,org.jhotdraw.gui.fontchooser.FontFamilyNode,org.jhotdraw.gui.fontchooser.FontFaceNode)',0,'private void setNewSelectionPath(FontCollectionNode newCollection, FontFamilyNode newFamily, FontFaceNode newFace) {\r\n    FontChooserModel model = fontChooser.getModel();\r\n    TreePath newPath;\r\n    if (newFace != null) {\r\n        newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily, newFace });\r\n    } else\r\n        if (newFamily != null) {\r\n            newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily });\r\n        } else\r\n            if (newCollection != null) {\r\n                newPath = new TreePath(new Object[]{ model.getRoot(), newCollection });\r\n            } else {\r\n                newPath = new TreePath(model.getRoot());\r\n            }\r\n\r\n\r\n    fontChooser.setSelectionPath(newPath);\r\n}'),(1409,'FontFamilyNode newFamily','org.jhotdraw.gui.fontchooser.FontFamilyNode',407,420,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI',4128,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.setNewSelectionPath(org.jhotdraw.gui.fontchooser.FontCollectionNode,org.jhotdraw.gui.fontchooser.FontFamilyNode,org.jhotdraw.gui.fontchooser.FontFaceNode)',0,'private void setNewSelectionPath(FontCollectionNode newCollection, FontFamilyNode newFamily, FontFaceNode newFace) {\r\n    FontChooserModel model = fontChooser.getModel();\r\n    TreePath newPath;\r\n    if (newFace != null) {\r\n        newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily, newFace });\r\n    } else\r\n        if (newFamily != null) {\r\n            newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily });\r\n        } else\r\n            if (newCollection != null) {\r\n                newPath = new TreePath(new Object[]{ model.getRoot(), newCollection });\r\n            } else {\r\n                newPath = new TreePath(model.getRoot());\r\n            }\r\n\r\n\r\n    fontChooser.setSelectionPath(newPath);\r\n}'),(1410,'FontFaceNode newFace','org.jhotdraw.gui.fontchooser.FontFaceNode',406,420,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI',4128,'org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.setNewSelectionPath(org.jhotdraw.gui.fontchooser.FontCollectionNode,org.jhotdraw.gui.fontchooser.FontFamilyNode,org.jhotdraw.gui.fontchooser.FontFaceNode)',0,'private void setNewSelectionPath(FontCollectionNode newCollection, FontFamilyNode newFamily, FontFaceNode newFace) {\r\n    FontChooserModel model = fontChooser.getModel();\r\n    TreePath newPath;\r\n    if (newFace != null) {\r\n        newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily, newFace });\r\n    } else\r\n        if (newFamily != null) {\r\n            newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily });\r\n        } else\r\n            if (newCollection != null) {\r\n                newPath = new TreePath(new Object[]{ model.getRoot(), newCollection });\r\n            } else {\r\n                newPath = new TreePath(model.getRoot());\r\n            }\r\n\r\n\r\n    fontChooser.setSelectionPath(newPath);\r\n}'),(1411,'PaletteLazyActionMap map','org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap',423,440,'org.jhotdraw.gui.plaf.palette.PaletteToolBarUI',4281,'org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.loadActionMap(org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap)',0,'static void loadActionMap(PaletteLazyActionMap map) {\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_RIGHT));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_LEFT));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_UP));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_DOWN));\r\n}'),(1412,'ColorSystem sys','org.jhotdraw.color.ColorSystem',68,452,'org.jhotdraw.samples.color.WheelsAndSlidersMain',4457,'org.jhotdraw.samples.color.WheelsAndSlidersMain.createColorWheelChooser(org.jhotdraw.color.ColorSystem)',0,'private JPanel createColorWheelChooser(ColorSystem sys) {\r\n    return createColorWheelChooser(sys, 0, 1, 2);\r\n}'),(1413,'ColorSystem sys','org.jhotdraw.color.ColorSystem',68,452,'org.jhotdraw.samples.color.WheelsAndSlidersMain',4458,'org.jhotdraw.samples.color.WheelsAndSlidersMain.createColorWheelChooser(org.jhotdraw.color.ColorSystem,int,int,int)',0,'private JPanel createColorWheelChooser(ColorSystem sys, int angularIndex, int radialIndex, int verticalIndex) {\r\n    JPanel p = new JPanel(new BorderLayout());\r\n    DefaultColorSliderModel m = new DefaultColorSliderModel(sys);\r\n    models.add(m);\r\n    m.addChangeListener(handler);\r\n    JColorWheel w = new JColorWheel();\r\n    w.setAngularComponentIndex(angularIndex);\r\n    w.setRadialComponentIndex(radialIndex);\r\n    w.setVerticalComponentIndex(verticalIndex);\r\n    w.setModel(m);\r\n    JSlider s = new JSlider(JSlider.VERTICAL);\r\n    m.configureSlider(verticalIndex, s);\r\n    p.add(w, BorderLayout.CENTER);\r\n    p.add(s, BorderLayout.EAST);\r\n    return p;\r\n}'),(1414,'ColorSystem sys','org.jhotdraw.color.ColorSystem',68,452,'org.jhotdraw.samples.color.WheelsAndSlidersMain',4459,'org.jhotdraw.samples.color.WheelsAndSlidersMain.createSliderChooser(org.jhotdraw.color.ColorSystem)',0,'private JPanel createSliderChooser(ColorSystem sys) {\r\n    JPanel p = new JPanel(new GridLayout(0, 1));\r\n    DefaultColorSliderModel m = new DefaultColorSliderModel(sys);\r\n    models.add(m);\r\n    m.addChangeListener(handler);\r\n    for (int i = 0; i < (m.getComponentCount()); i++) {\r\n        JSlider s = new JSlider(JSlider.HORIZONTAL);\r\n        m.configureSlider(i, s);\r\n        p.add(s);\r\n    }\r\n    return p;\r\n}'),(1415,'Drawing d','org.jhotdraw.draw.Drawing',168,453,'org.jhotdraw.samples.draw.DrawApplet',4476,'org.jhotdraw.samples.draw.DrawApplet.setDrawing(org.jhotdraw.draw.Drawing)',0,'private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}'),(1416,'Drawing d','org.jhotdraw.draw.Drawing',168,453,'org.jhotdraw.samples.draw.DrawApplet',4473,'org.jhotdraw.samples.draw.DrawApplet.initDrawing(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initDrawing(Drawing d) {\r\n    d.setInputFormats(((List<InputFormat>) (Collections.EMPTY_LIST)));\r\n    d.setOutputFormats(((List<OutputFormat>) (Collections.EMPTY_LIST)));\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new DrawFigureFactory());\r\n    d.addInputFormat(ioFormat);\r\n    d.addInputFormat(new ImageInputFormat(new ImageFigure()));\r\n    d.addInputFormat(new TextInputFormat(new TextFigure()));\r\n    d.addOutputFormat(ioFormat);\r\n    d.addOutputFormat(new ImageOutputFormat());\r\n}'),(1417,'Application a','org.jhotdraw.app.Application',3,454,'org.jhotdraw.samples.draw.DrawApplicationModel',4482,'org.jhotdraw.samples.draw.DrawApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((DrawView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(1418,'View p','org.jhotdraw.app.View',15,454,'org.jhotdraw.samples.draw.DrawApplicationModel',4482,'org.jhotdraw.samples.draw.DrawApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((DrawView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(1419,'Application a','org.jhotdraw.app.Application',3,454,'org.jhotdraw.samples.draw.DrawApplicationModel',4480,'org.jhotdraw.samples.draw.DrawApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    DrawView p = ((DrawView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(1420,'View pr','org.jhotdraw.app.View',15,454,'org.jhotdraw.samples.draw.DrawApplicationModel',4480,'org.jhotdraw.samples.draw.DrawApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    DrawView p = ((DrawView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(1421,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,454,'org.jhotdraw.samples.draw.DrawApplicationModel',4478,'org.jhotdraw.samples.draw.DrawApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addCreationButtonsTo(JToolBar tb, DrawingEditor editor) {\r\n    addDefaultCreationButtonsTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}'),(1422,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,454,'org.jhotdraw.samples.draw.DrawApplicationModel',4479,'org.jhotdraw.samples.draw.DrawApplicationModel.addDefaultCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)',0,'public void addDefaultCreationButtonsTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, drawingActions, selectionActions);\r\n    tb.addSeparator();\r\n    AbstractAttributedFigure af;\r\n    CreationTool ct;\r\n    ConnectionTool cnt;\r\n    ConnectionFigure lc;\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure()), \"edit.createRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RoundRectangleFigure()), \"edit.createRoundRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new EllipseFigure()), \"edit.createEllipse\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new DiamondFigure()), \"edit.createDiamond\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TriangleFigure()), \"edit.createTriangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new LineFigure()), \"edit.createLine\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (ct = new CreationTool(new LineFigure())), \"edit.createArrow\", labels);\r\n    af = ((AbstractAttributedFigure) (ct.getPrototype()));\r\n    AttributeKeys.END_DECORATION.basicSet(af, new ArrowTip(0.35, 12, 11.3));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure()), \"edit.createLineConnection\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (cnt = new ConnectionTool(new LineConnectionFigure())), \"edit.createElbowConnection\", labels);\r\n    lc = cnt.getPrototype();\r\n    lc.setLiner(new ElbowLiner());\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure()), \"edit.createScribble\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure(true)), \"edit.createPolygon\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new TextFigure()), \"edit.createText\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new ImageTool(new ImageFigure()), \"edit.createImage\", labels);\r\n}'),(1423,'Drawing d','org.jhotdraw.draw.Drawing',168,457,'org.jhotdraw.samples.draw.DrawLiveConnectApplet',4494,'org.jhotdraw.samples.draw.DrawLiveConnectApplet.setDrawing(org.jhotdraw.draw.Drawing)',0,'private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}'),(1424,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,458,'org.jhotdraw.samples.draw.DrawView',4509,'org.jhotdraw.samples.draw.DrawView.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Sets a drawing editor for the view.\r\n */\r\npublic void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.add(view);\r\n    }\r\n}'),(1425,'Drawing d','org.jhotdraw.draw.Drawing',168,459,'org.jhotdraw.samples.draw.DrawingPanel',4519,'org.jhotdraw.samples.draw.DrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)',0,'public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(1426,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,459,'org.jhotdraw.samples.draw.DrawingPanel',4513,'org.jhotdraw.samples.draw.DrawingPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addCreationButtonsTo(JToolBar tb, DrawingEditor editor) {\r\n    addDefaultCreationButtonsTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}'),(1427,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,459,'org.jhotdraw.samples.draw.DrawingPanel',4514,'org.jhotdraw.samples.draw.DrawingPanel.addDefaultCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)',0,'public void addDefaultCreationButtonsTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, drawingActions, selectionActions);\r\n    tb.addSeparator();\r\n    AbstractAttributedFigure af;\r\n    CreationTool ct;\r\n    ConnectionTool cnt;\r\n    ConnectionFigure lc;\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure()), \"edit.createRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RoundRectangleFigure()), \"edit.createRoundRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new EllipseFigure()), \"edit.createEllipse\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new DiamondFigure()), \"edit.createDiamond\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TriangleFigure()), \"edit.createTriangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new LineFigure()), \"edit.createLine\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (ct = new CreationTool(new LineFigure())), \"edit.createArrow\", labels);\r\n    af = ((AbstractAttributedFigure) (ct.getPrototype()));\r\n    AttributeKeys.END_DECORATION.basicSet(af, new ArrowTip(0.35, 12, 11.3));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure()), \"edit.createLineConnection\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (cnt = new ConnectionTool(new LineConnectionFigure())), \"edit.createElbowConnection\", labels);\r\n    lc = cnt.getPrototype();\r\n    lc.setLiner(new ElbowLiner());\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure()), \"edit.createScribble\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure(true)), \"edit.createPolygon\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new TextFigure()), \"edit.createText\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", labels);\r\n}'),(1428,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,469,'org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject',4571,'org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"name\", name);\r\n}'),(1429,'DOMInput in','org.jhotdraw.xml.DOMInput',650,469,'org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject',4569,'org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    name = in.getAttribute(\"name\", null);\r\n}'),(1430,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,477,'org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject',4594,'org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"name\", name);\r\n}'),(1431,'DOMInput in','org.jhotdraw.xml.DOMInput',650,477,'org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject',4592,'org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    name = in.getAttribute(\"name\", null);\r\n}'),(1432,'Connector start','org.jhotdraw.draw.Connector',145,480,'org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure',4600,'org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'@Override\r\npublic void handleConnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, ((start.getOwner()) == (end.getOwner()) ? AttributeKeys.StrokeType.DOUBLE : AttributeKeys.StrokeType.BASIC));\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}'),(1433,'Connector end','org.jhotdraw.draw.Connector',145,480,'org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure',4600,'org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'@Override\r\npublic void handleConnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, ((start.getOwner()) == (end.getOwner()) ? AttributeKeys.StrokeType.DOUBLE : AttributeKeys.StrokeType.BASIC));\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}'),(1434,'Connector start','org.jhotdraw.draw.Connector',145,480,'org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure',4601,'org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'@Override\r\npublic void handleDisconnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, AttributeKeys.StrokeType.BASIC);\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}'),(1435,'Connector end','org.jhotdraw.draw.Connector',145,480,'org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure',4601,'org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'@Override\r\npublic void handleDisconnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, AttributeKeys.StrokeType.BASIC);\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}'),(1436,'Drawing d','org.jhotdraw.draw.Drawing',168,484,'org.jhotdraw.samples.net.NetApplet',4626,'org.jhotdraw.samples.net.NetApplet.setDrawing(org.jhotdraw.draw.Drawing)',0,'private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}'),(1437,'Drawing d','org.jhotdraw.draw.Drawing',168,484,'org.jhotdraw.samples.net.NetApplet',4623,'org.jhotdraw.samples.net.NetApplet.initDrawing(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initDrawing(Drawing d) {\r\n    d.setInputFormats(((List<InputFormat>) (Collections.EMPTY_LIST)));\r\n    d.setOutputFormats(((List<OutputFormat>) (Collections.EMPTY_LIST)));\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new NetFactory());\r\n    d.addInputFormat(ioFormat);\r\n    d.addInputFormat(new ImageInputFormat(new ImageFigure()));\r\n    d.addInputFormat(new TextInputFormat(new TextFigure()));\r\n    d.addOutputFormat(ioFormat);\r\n    d.addOutputFormat(new ImageOutputFormat());\r\n}'),(1438,'Tool t','org.jhotdraw.draw.Tool',262,485,'org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener',4635,'org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)',0,'public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(1439,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,485,'org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener',4635,'org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)',0,'public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(1440,'Application a','org.jhotdraw.app.Application',3,486,'org.jhotdraw.samples.net.NetApplicationModel',4633,'org.jhotdraw.samples.net.NetApplicationModel.initApplication(org.jhotdraw.app.Application)',0,'public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"view.toggleGrid\", (aa = new ToggleViewPropertyAction(a, NetView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : NetApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n}'),(1441,'Application a','org.jhotdraw.app.Application',3,486,'org.jhotdraw.samples.net.NetApplicationModel',4634,'org.jhotdraw.samples.net.NetApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((NetView) (p)).setDrawingEditor(getSharedEditor());\r\n    }\r\n}'),(1442,'View p','org.jhotdraw.app.View',15,486,'org.jhotdraw.samples.net.NetApplicationModel',4634,'org.jhotdraw.samples.net.NetApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((NetView) (p)).setDrawingEditor(getSharedEditor());\r\n    }\r\n}'),(1443,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,486,'org.jhotdraw.samples.net.NetApplicationModel',4629,'org.jhotdraw.samples.net.NetApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new NodeFigure(), attributes), \"edit.createNode\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure(), attributes), \"edit.createLink\", labels);\r\n}'),(1444,'Application a','org.jhotdraw.app.Application',3,486,'org.jhotdraw.samples.net.NetApplicationModel',4631,'org.jhotdraw.samples.net.NetApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    NetView p = ((NetView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getDrawingEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(1445,'View pr','org.jhotdraw.app.View',15,486,'org.jhotdraw.samples.net.NetApplicationModel',4631,'org.jhotdraw.samples.net.NetApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    NetView p = ((NetView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getDrawingEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(1446,'Application a','org.jhotdraw.app.Application',3,486,'org.jhotdraw.samples.net.NetApplicationModel',4630,'org.jhotdraw.samples.net.NetApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    NetView p = ((NetView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"view.toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"view.toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : NetApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(1447,'View pr','org.jhotdraw.app.View',15,486,'org.jhotdraw.samples.net.NetApplicationModel',4630,'org.jhotdraw.samples.net.NetApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    NetView p = ((NetView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"view.toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"view.toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : NetApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(1448,'Drawing d','org.jhotdraw.draw.Drawing',168,488,'org.jhotdraw.samples.net.NetPanel',4644,'org.jhotdraw.samples.net.NetPanel.setDrawing(org.jhotdraw.draw.Drawing)',0,'public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(1449,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,488,'org.jhotdraw.samples.net.NetPanel',4639,'org.jhotdraw.samples.net.NetPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new NodeFigure(), attributes), \"edit.createNode\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure(), attributes), \"edit.createLink\", labels);\r\n}'),(1450,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,489,'org.jhotdraw.samples.net.NetView',4661,'org.jhotdraw.samples.net.NetView.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}'),(1451,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,489,'org.jhotdraw.samples.net.NetView',4660,'org.jhotdraw.samples.net.NetView.setDrawingEditor(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Sets a drawing editor for the view.\r\n */\r\npublic void setDrawingEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.add(view);\r\n    }\r\n}'),(1452,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,490,'org.jhotdraw.samples.net.figures.NodeFigure',4672,'org.jhotdraw.samples.net.figures.NodeFigure.getConnectors(org.jhotdraw.draw.ConnectionFigure)',0,'@Override\r\npublic Collection<Connector> getConnectors(ConnectionFigure prototype) {\r\n    return ((List<Connector>) (Collections.unmodifiableList(connectors)));\r\n}'),(1453,'ConnectionFigure figure','org.jhotdraw.draw.ConnectionFigure',142,490,'org.jhotdraw.samples.net.figures.NodeFigure',4671,'org.jhotdraw.samples.net.figures.NodeFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure figure) {\r\n    // return closest connector\r\n    double min = Double.MAX_VALUE;\r\n    Connector closest = null;\r\n    for (Connector c : connectors) {\r\n        Point2D.Double p2 = Geom.center(c.getBounds());\r\n        double d = Geom.length2(p.x, p.y, p2.x, p2.y);\r\n        if (d < min) {\r\n            min = d;\r\n            closest = c;\r\n        }\r\n    }\r\n    return closest;\r\n}'),(1454,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,490,'org.jhotdraw.samples.net.figures.NodeFigure',4671,'org.jhotdraw.samples.net.figures.NodeFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure figure) {\r\n    // return closest connector\r\n    double min = Double.MAX_VALUE;\r\n    Connector closest = null;\r\n    for (Connector c : connectors) {\r\n        Point2D.Double p2 = Geom.center(c.getBounds());\r\n        double d = Geom.length2(p.x, p.y, p2.x, p2.y);\r\n        if (d < min) {\r\n            min = d;\r\n            closest = c;\r\n        }\r\n    }\r\n    return closest;\r\n}'),(1455,'Connector c','org.jhotdraw.draw.Connector',145,490,'org.jhotdraw.samples.net.figures.NodeFigure',4670,'org.jhotdraw.samples.net.figures.NodeFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    if (c instanceof LocatorConnector) {\r\n        LocatorConnector lc = ((LocatorConnector) (c));\r\n        for (Connector cc : connectors) {\r\n            LocatorConnector lcc = ((LocatorConnector) (cc));\r\n            if (lcc.getLocator().equals(lc.getLocator())) {\r\n                return lcc;\r\n            }\r\n        }\r\n    }\r\n    return connectors.getFirst();\r\n}'),(1456,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,490,'org.jhotdraw.samples.net.figures.NodeFigure',4670,'org.jhotdraw.samples.net.figures.NodeFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    if (c instanceof LocatorConnector) {\r\n        LocatorConnector lc = ((LocatorConnector) (c));\r\n        for (Connector cc : connectors) {\r\n            LocatorConnector lcc = ((LocatorConnector) (cc));\r\n            if (lcc.getLocator().equals(lc.getLocator())) {\r\n                return lcc;\r\n            }\r\n        }\r\n    }\r\n    return connectors.getFirst();\r\n}'),(1457,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,490,'org.jhotdraw.samples.net.figures.NodeFigure',4677,'org.jhotdraw.samples.net.figures.NodeFigure.writeDecorator(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\nprotected void writeDecorator(DOMOutput out) throws IOException {\r\n    // do nothing\r\n}'),(1458,'DOMInput in','org.jhotdraw.xml.DOMInput',650,490,'org.jhotdraw.samples.net.figures.NodeFigure',4675,'org.jhotdraw.samples.net.figures.NodeFigure.readDecorator(org.jhotdraw.xml.DOMInput)',0,'@Override\r\nprotected void readDecorator(DOMInput in) throws IOException {\r\n    // do nothing\r\n}'),(1459,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,490,'org.jhotdraw.samples.net.figures.NodeFigure',4676,'org.jhotdraw.samples.net.figures.NodeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    if ((getDecorator()) != null) {\r\n        key.basicSet(getDecorator(), newValue);\r\n    }\r\n}'),(1460,'Figure f','org.jhotdraw.draw.Figure',174,491,'org.jhotdraw.samples.odg.Gradient',4679,'org.jhotdraw.samples.odg.Gradient.getPaint(org.jhotdraw.draw.Figure,double)',0,'public Paint getPaint(Figure f, double opacity);'),(1461,'Figure f','org.jhotdraw.draw.Figure',174,491,'org.jhotdraw.samples.odg.Gradient',4681,'org.jhotdraw.samples.odg.Gradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)',0,'public void makeRelativeToFigureBounds(Figure f);'),(1462,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4690,'org.jhotdraw.samples.odg.ODGApplicationModel.createDrawingActions(org.jhotdraw.draw.DrawingEditor)',0,'public static Collection<Action> createDrawingActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectAllAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}'),(1463,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4691,'org.jhotdraw.samples.odg.ODGApplicationModel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)',0,'public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new ODGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new ODGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(1464,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4688,'org.jhotdraw.samples.odg.ODGApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, ODGApplicationModel.createDrawingActions(editor), ODGApplicationModel.createSelectionActions(editor));\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new ODGRectFigure(), attributes), \"edit.createRectangle\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new ODGPathFigure(), attributes), \"edit.createLine\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n}'),(1465,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4686,'org.jhotdraw.samples.odg.ODGApplicationModel.addAttributesButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\nprivate void addAttributesButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JButton b;\r\n    b = bar.add(new PickAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    b = bar.add(new ApplyAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    bar.addSeparator();\r\n    addColorButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    addStrokeButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addFontButtonsTo(bar, editor);\r\n}'),(1466,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4687,'org.jhotdraw.samples.odg.ODGApplicationModel.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addColorButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    HashMap<AttributeKey, Object> defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    ODGAttributeKeys.STROKE_GRADIENT.set(defaultAttributes, ((Gradient) (null)));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.STROKE_COLOR, ButtonFactory.WEBSAVE_COLORS, ButtonFactory.WEBSAVE_COLORS_COLUMN_COUNT, \"attribute.strokeColor\", labels, defaultAttributes));\r\n    defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    ODGAttributeKeys.FILL_GRADIENT.set(defaultAttributes, ((Gradient) (null)));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.FILL_COLOR, ButtonFactory.WEBSAVE_COLORS, ButtonFactory.WEBSAVE_COLORS_COLUMN_COUNT, \"attribute.fillColor\", labels, defaultAttributes));\r\n}'),(1467,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4689,'org.jhotdraw.samples.odg.ODGApplicationModel.addStrokeButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addStrokeButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createStrokeWidthButton(editor));\r\n    bar.add(ButtonFactory.createStrokeDashesButton(editor));\r\n    bar.add(ButtonFactory.createStrokeCapButton(editor));\r\n    bar.add(ButtonFactory.createStrokeJoinButton(editor));\r\n}'),(1468,'Application a','org.jhotdraw.app.Application',3,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4692,'org.jhotdraw.samples.odg.ODGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ODGView p = ((ODGView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(1469,'View pr','org.jhotdraw.app.View',15,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4692,'org.jhotdraw.samples.odg.ODGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ODGView p = ((ODGView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(1470,'Application a','org.jhotdraw.app.Application',3,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4695,'org.jhotdraw.samples.odg.ODGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((ODGView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(1471,'View p','org.jhotdraw.app.View',15,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4695,'org.jhotdraw.samples.odg.ODGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((ODGView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(1472,'Application a','org.jhotdraw.app.Application',3,493,'org.jhotdraw.samples.odg.ODGApplicationModel',4694,'org.jhotdraw.samples.odg.ODGApplicationModel.initApplication(org.jhotdraw.app.Application)',0,'public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"view.toggleGrid\", (aa = new ToggleViewPropertyAction(a, ODGView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : ODGApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n    putAction(\"togglePropertiesPanel\", new TogglePropertiesPanelAction(a));\r\n}'),(1473,'Figure f','org.jhotdraw.draw.Figure',174,494,'org.jhotdraw.samples.odg.ODGAttributeKeys',4697,'org.jhotdraw.samples.odg.ODGAttributeKeys.getFillPaint(org.jhotdraw.draw.Figure)',0,'/**\r\n * Gets the fill paint for the specified figure based on the attributes\r\n * FILL_GRADIENT, FILL_OPACITY, FILL_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getFillPaint(Figure f) {\r\n    double opacity = ODGAttributeKeys.FILL_OPACITY.get(f);\r\n    if ((ODGAttributeKeys.FILL_GRADIENT.get(f)) != null) {\r\n        return ODGAttributeKeys.FILL_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.FILL_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}'),(1474,'Figure f','org.jhotdraw.draw.Figure',174,494,'org.jhotdraw.samples.odg.ODGAttributeKeys',4699,'org.jhotdraw.samples.odg.ODGAttributeKeys.getStrokePaint(org.jhotdraw.draw.Figure)',0,'/**\r\n * Gets the stroke paint for the specified figure based on the attributes\r\n * STROKE_GRADIENT, STROKE_OPACITY, STROKE_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getStrokePaint(Figure f) {\r\n    double opacity = ODGAttributeKeys.STROKE_OPACITY.get(f);\r\n    if ((ODGAttributeKeys.STROKE_GRADIENT.get(f)) != null) {\r\n        return ODGAttributeKeys.STROKE_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.STROKE_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}'),(1475,'Figure f','org.jhotdraw.draw.Figure',174,494,'org.jhotdraw.samples.odg.ODGAttributeKeys',4698,'org.jhotdraw.samples.odg.ODGAttributeKeys.getStroke(org.jhotdraw.draw.Figure)',0,'public static Stroke getStroke(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    if (strokeWidth == 0) {\r\n        strokeWidth = 1;\r\n    }\r\n    return new BasicStroke(((float) (strokeWidth)));\r\n}'),(1476,'Figure f','org.jhotdraw.draw.Figure',174,494,'org.jhotdraw.samples.odg.ODGAttributeKeys',4700,'org.jhotdraw.samples.odg.ODGAttributeKeys.setDefaults(org.jhotdraw.draw.Figure)',0,'/**\r\n * Sets ODG default values.\r\n */\r\npublic static void setDefaults(Figure f) {\r\n    // Fill properties\r\n    AttributeKeys.FILL_COLOR.basicSet(f, Color.black);\r\n    AttributeKeys.WINDING_RULE.basicSet(f, AttributeKeys.WindingRule.NON_ZERO);\r\n    // Stroke properties\r\n    AttributeKeys.STROKE_COLOR.basicSet(f, null);\r\n    AttributeKeys.STROKE_WIDTH.basicSet(f, 1.0);\r\n    AttributeKeys.STROKE_CAP.basicSet(f, BasicStroke.CAP_BUTT);\r\n    AttributeKeys.STROKE_JOIN.basicSet(f, BasicStroke.JOIN_MITER);\r\n    AttributeKeys.STROKE_MITER_LIMIT.basicSet(f, 4.0);\r\n    AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.basicSet(f, false);\r\n    AttributeKeys.STROKE_DASHES.basicSet(f, null);\r\n    AttributeKeys.STROKE_DASH_PHASE.basicSet(f, 0.0);\r\n    AttributeKeys.IS_STROKE_DASH_FACTOR.basicSet(f, false);\r\n}'),(1477,'DOMInput in','org.jhotdraw.xml.DOMInput',650,498,'org.jhotdraw.samples.odg.ODGDrawing',4707,'org.jhotdraw.samples.odg.ODGDrawing.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException {\r\n    for (int i = 0, n = in.getElementCount(); i < n; i++) {\r\n        in.openElement(i);\r\n        String name = in.getTagName();\r\n        if (name.equals(\"title\")) {\r\n            title = in.getText();\r\n            in.closeElement();\r\n        } else\r\n            if (name.equals(\"desc\")) {\r\n                description = in.getText();\r\n                in.closeElement();\r\n            } else\r\n                if (name.equals(\"defs\")) {\r\n                    // We ignore \"defs\" elements for now.\r\n                    in.closeElement();\r\n                } else\r\n                    if (name.equals(\"use\")) {\r\n                        // We ignore \"use\" elements for now.\r\n                        in.closeElement();\r\n                    } else\r\n                        if (name.equals(\"script\")) {\r\n                            // We ignore \"script\" elements for now.\r\n                            in.closeElement();\r\n                        } else\r\n                            if (name.equals(\"style\")) {\r\n                                // We ignore \"style\" elements for now.\r\n                                in.closeElement();\r\n                            } else\r\n                                if (name.equals(\"radialGradient\")) {\r\n                                    // We ignore \"radialGradient\" elements for now.\r\n                                    in.closeElement();\r\n                                } else {\r\n                                    in.closeElement();\r\n                                    Object f = ((Object) (in.readObject(i)));\r\n                                    if (f instanceof ODGDrawing) {\r\n                                        SVGGroupFigure g = new SVGGroupFigure();\r\n                                        g.willChange();\r\n                                        for (Figure child : ((ODGDrawing) (f)).getChildren()) {\r\n                                            g.basicAdd(child);\r\n                                        }\r\n                                        g.changed();\r\n                                        if (!(g.isEmpty())) {\r\n                                            add(g);\r\n                                        }\r\n                                    } else\r\n                                        if (f instanceof SVGFigure) {\r\n                                            if (!(((SVGFigure) (f)).isEmpty())) {\r\n                                                add(((Figure) (f)));\r\n                                            }\r\n                                        } else {\r\n                                            throw new IOException((\"Unexpected child \" + f));\r\n                                        }\r\n\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    readAttributes(in);\r\n}'),(1478,'DOMInput in','org.jhotdraw.xml.DOMInput',650,498,'org.jhotdraw.samples.odg.ODGDrawing',4708,'org.jhotdraw.samples.odg.ODGDrawing.readAttributes(org.jhotdraw.xml.DOMInput)',0,'protected void readAttributes(DOMInput in) throws IOException {\r\n    // SVGUtil.readAttributes(this, in);\r\n}'),(1479,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,498,'org.jhotdraw.samples.odg.ODGDrawing',4711,'org.jhotdraw.samples.odg.ODGDrawing.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n    out.addAttribute(\"version\", \"1.2\");\r\n    out.addAttribute(\"baseProfile\", \"tiny\");\r\n    for (Figure f : getChildren()) {\r\n        out.writeObject(f);\r\n    }\r\n}'),(1480,'Drawing d','org.jhotdraw.draw.Drawing',168,499,'org.jhotdraw.samples.odg.ODGDrawingPanel',4719,'org.jhotdraw.samples.odg.ODGDrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)',0,'public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(1481,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,499,'org.jhotdraw.samples.odg.ODGDrawingPanel',4714,'org.jhotdraw.samples.odg.ODGDrawingPanel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)',0,'public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(1482,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,499,'org.jhotdraw.samples.odg.ODGDrawingPanel',4713,'org.jhotdraw.samples.odg.ODGDrawingPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, ButtonFactory.createDrawingActions(editor), ODGDrawingPanel.createSelectionActions(editor));\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGRectFigure(), attributes), \"edit.createRectangle\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGEllipseFigure(), attributes), \"edit.createEllipse\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new PathTool(new SVGPathFigure(), new SVGBezierFigure(true), attributes), \"edit.createPolygon\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGPathFigure(), attributes), \"edit.createLine\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new PathTool(new SVGPathFigure(), new SVGBezierFigure(false), attributes), \"edit.createScribble\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGTextFigure(), attributes), \"edit.createText\", drawLabels);\r\n    TextAreaCreationTool tat = new TextAreaCreationTool(new SVGTextAreaFigure(), attributes);\r\n    tat.setRubberbandColor(Color.BLACK);\r\n    ButtonFactory.addToolTo(tb, editor, tat, \"edit.createTextArea\", drawLabels);\r\n}'),(1483,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,501,'org.jhotdraw.samples.odg.ODGPropertiesPanel',4734,'org.jhotdraw.samples.odg.ODGPropertiesPanel.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    linkFieldHandler.setDrawingEditor(editor);\r\n    opacitySliderHandler.setDrawingEditor(editor);\r\n    opacityFieldHandler.setDrawingEditor(editor);\r\n}'),(1484,'DrawingView view','org.jhotdraw.draw.DrawingView',171,501,'org.jhotdraw.samples.odg.ODGPropertiesPanel',4735,'org.jhotdraw.samples.odg.ODGPropertiesPanel.setView(org.jhotdraw.draw.DrawingView)',0,'public void setView(DrawingView view) {\r\n    opacityFieldHandler.setView(view);\r\n    opacitySliderHandler.setView(view);\r\n    linkFieldHandler.setView(view);\r\n}'),(1485,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,503,'org.jhotdraw.samples.odg.ODGView',4767,'org.jhotdraw.samples.odg.ODGView.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    propertiesPanel.setEditor(editor);\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}'),(1486,'SVGPathFigure pathPrototype','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,504,'org.jhotdraw.samples.odg.PathTool',4774,'org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}'),(1487,'SVGBezierFigure bezierPrototype','org.jhotdraw.samples.svg.figures.SVGBezierFigure',559,504,'org.jhotdraw.samples.odg.PathTool',4774,'org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}'),(1488,'SVGPathFigure pathPrototype','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,504,'org.jhotdraw.samples.odg.PathTool',4775,'org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}'),(1489,'SVGBezierFigure bezierPrototype','org.jhotdraw.samples.svg.figures.SVGBezierFigure',559,504,'org.jhotdraw.samples.odg.PathTool',4775,'org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}'),(1490,'BezierFigure createdFigure','org.jhotdraw.draw.BezierFigure',118,504,'org.jhotdraw.samples.odg.PathTool',4777,'org.jhotdraw.samples.odg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)',0,'@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG)\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    creationView.addToSelection(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n}'),(1491,'DrawingView creationView','org.jhotdraw.draw.DrawingView',171,504,'org.jhotdraw.samples.odg.PathTool',4777,'org.jhotdraw.samples.odg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)',0,'@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG)\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    creationView.addToSelection(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n}'),(1492,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,505,'org.jhotdraw.samples.odg.action.CombineAction',4778,'org.jhotdraw.samples.odg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic CombineAction(DrawingEditor editor) {\r\n    super(editor, new ODGPathFigure());\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, CombineAction.ID);\r\n}'),(1493,'DrawingView view','org.jhotdraw.draw.DrawingView',171,505,'org.jhotdraw.samples.odg.action.CombineAction',4781,'org.jhotdraw.samples.odg.action.CombineAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)',0,'@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}'),(1494,'CompositeFigure group','org.jhotdraw.draw.CompositeFigure',136,505,'org.jhotdraw.samples.odg.action.CombineAction',4781,'org.jhotdraw.samples.odg.action.CombineAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)',0,'@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}'),(1495,'DrawingView view','org.jhotdraw.draw.DrawingView',171,505,'org.jhotdraw.samples.odg.action.CombineAction',4780,'org.jhotdraw.samples.odg.action.CombineAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)',0,'@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        // XXX - We must fire an UndoableEdito for the flattenTransform!\r\n        path.flattenTransform();\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(1496,'CompositeFigure group','org.jhotdraw.draw.CompositeFigure',136,505,'org.jhotdraw.samples.odg.action.CombineAction',4780,'org.jhotdraw.samples.odg.action.CombineAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)',0,'@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        // XXX - We must fire an UndoableEdito for the flattenTransform!\r\n        path.flattenTransform();\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(1497,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,506,'org.jhotdraw.samples.odg.action.SplitAction',4782,'org.jhotdraw.samples.odg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SplitAction(DrawingEditor editor) {\r\n    super(editor, new ODGPathFigure());\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, SplitAction.ID);\r\n}'),(1498,'DrawingView view','org.jhotdraw.draw.DrawingView',171,506,'org.jhotdraw.samples.odg.action.SplitAction',4785,'org.jhotdraw.samples.odg.action.SplitAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)',0,'@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}'),(1499,'CompositeFigure group','org.jhotdraw.draw.CompositeFigure',136,506,'org.jhotdraw.samples.odg.action.SplitAction',4785,'org.jhotdraw.samples.odg.action.SplitAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)',0,'@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}'),(1500,'DrawingView view','org.jhotdraw.draw.DrawingView',171,506,'org.jhotdraw.samples.odg.action.SplitAction',4784,'org.jhotdraw.samples.odg.action.SplitAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)',0,'@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(1501,'CompositeFigure group','org.jhotdraw.draw.CompositeFigure',136,506,'org.jhotdraw.samples.odg.action.SplitAction',4784,'org.jhotdraw.samples.odg.action.SplitAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)',0,'@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(1502,'Application app','org.jhotdraw.app.Application',3,507,'org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction',4786,'org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic TogglePropertiesPanelAction(Application app) {\r\n    super(app);\r\n    setPropertyName(\"propertiesPanelVisible\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n    putValue(AbstractAction.NAME, labels.getString(\"propertiesPanel\"));\r\n}'),(1503,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,508,'org.jhotdraw.samples.odg.figures.ODGAttributedFigure',4796,'org.jhotdraw.samples.odg.figures.ODGAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.TRANSFORM)) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}'),(1504,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,508,'org.jhotdraw.samples.odg.figures.ODGAttributedFigure',4797,'org.jhotdraw.samples.odg.figures.ODGAttributedFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}'),(1505,'DOMInput in','org.jhotdraw.xml.DOMInput',650,508,'org.jhotdraw.samples.odg.figures.ODGAttributedFigure',4795,'org.jhotdraw.samples.odg.figures.ODGAttributedFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}'),(1506,'ODGPathFigure pathFigure','org.jhotdraw.samples.odg.figures.ODGPathFigure',513,509,'org.jhotdraw.samples.odg.figures.ODGBezierFigure',4800,'org.jhotdraw.samples.odg.figures.ODGBezierFigure.createHandles(org.jhotdraw.samples.odg.figures.ODGPathFigure,int)',0,'public Collection<Handle> createHandles(ODGPathFigure pathFigure, int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            for (int i = 0, n = path.size(); i < n; i++) {\r\n                handles.add(new BezierNodeHandle(this, i, pathFigure));\r\n            }\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(1507,'DrawingView view','org.jhotdraw.draw.DrawingView',171,509,'org.jhotdraw.samples.odg.figures.ODGBezierFigure',4803,'org.jhotdraw.samples.odg.figures.ODGBezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    /* && view.getHandleDetailLevel() == 0 */\r\n    if ((evt.getClickCount()) == 2) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(1508,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,510,'org.jhotdraw.samples.odg.figures.ODGEllipseFigure',4815,'org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1509,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,510,'org.jhotdraw.samples.odg.figures.ODGEllipseFigure',4815,'org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1510,'Connector c','org.jhotdraw.draw.Connector',145,510,'org.jhotdraw.samples.odg.figures.ODGEllipseFigure',4814,'org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1511,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,510,'org.jhotdraw.samples.odg.figures.ODGEllipseFigure',4814,'org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1512,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,512,'org.jhotdraw.samples.odg.figures.ODGGroupFigure',4839,'org.jhotdraw.samples.odg.figures.ODGGroupFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    if (key == (ODGAttributeKeys.OPACITY)) {\r\n        attributes.put(key, value);\r\n    } else {\r\n        super.setAttribute(key, value);\r\n    }\r\n    invalidate();\r\n}'),(1513,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,512,'org.jhotdraw.samples.odg.figures.ODGGroupFigure',4834,'org.jhotdraw.samples.odg.figures.ODGGroupFigure.getAttribute(org.jhotdraw.draw.AttributeKey)',0,'@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return key.get(attributes);\r\n}'),(1514,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,512,'org.jhotdraw.samples.odg.figures.ODGGroupFigure',4842,'org.jhotdraw.samples.odg.figures.ODGGroupFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}'),(1515,'DOMInput in','org.jhotdraw.xml.DOMInput',650,512,'org.jhotdraw.samples.odg.figures.ODGGroupFigure',4838,'org.jhotdraw.samples.odg.figures.ODGGroupFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}'),(1516,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4871,'org.jhotdraw.samples.odg.figures.ODGPathFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}'),(1517,'DOMInput in','org.jhotdraw.xml.DOMInput',650,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4865,'org.jhotdraw.samples.odg.figures.ODGPathFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}'),(1518,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4867,'org.jhotdraw.samples.odg.figures.ODGPathFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}'),(1519,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4868,'org.jhotdraw.samples.odg.figures.ODGPathFigure.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\nprotected <T> void setAttributeOnChildren(AttributeKey<T> key, T newValue) {\r\n    // empty!\r\n}'),(1520,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4855,'org.jhotdraw.samples.odg.figures.ODGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1521,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4855,'org.jhotdraw.samples.odg.figures.ODGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1522,'Connector c','org.jhotdraw.draw.Connector',145,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4854,'org.jhotdraw.samples.odg.figures.ODGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1523,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4854,'org.jhotdraw.samples.odg.figures.ODGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1524,'DrawingView view','org.jhotdraw.draw.DrawingView',171,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4862,'org.jhotdraw.samples.odg.figures.ODGPathFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        for (Figure child : getChildren()) {\r\n            ODGBezierFigure bf = ((ODGBezierFigure) (child));\r\n            int index = bf.getBezierPath().findSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n            if (index != (-1)) {\r\n                bf.handleMouseClick(p, evt, view);\r\n                evt.consume();\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}'),(1525,'final Figure figure','org.jhotdraw.draw.Figure',174,513,'org.jhotdraw.samples.odg.figures.ODGPathFigure',4845,'org.jhotdraw.samples.odg.figures.ODGPathFigure.add(int,org.jhotdraw.draw.Figure)',0,'@Override\r\npublic void add(final int index, final Figure figure) {\r\n    super.add(index, ((ODGBezierFigure) (figure)));\r\n}'),(1526,'ODGPathFigure owner','org.jhotdraw.samples.odg.figures.ODGPathFigure',513,514,'org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle',4872,'org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.-init-(org.jhotdraw.samples.odg.figures.ODGPathFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ODGPathOutlineHandle(ODGPathFigure owner) {\r\n    super(owner);\r\n}'),(1527,'Dimension2DDouble arc','org.jhotdraw.geom.Dimension2DDouble',346,515,'org.jhotdraw.samples.odg.figures.ODGRectFigure',4908,'org.jhotdraw.samples.odg.figures.ODGRectFigure.setArc(org.jhotdraw.geom.Dimension2DDouble)',0,'public void setArc(Dimension2DDouble arc) {\r\n    roundrect.arcwidth = Math.max(0.0, Math.min(roundrect.width, ((arc.width) * 2.0)));\r\n    roundrect.archeight = Math.max(0.0, Math.min(roundrect.height, ((arc.height) * 2.0)));\r\n}'),(1528,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,515,'org.jhotdraw.samples.odg.figures.ODGRectFigure',4890,'org.jhotdraw.samples.odg.figures.ODGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1529,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,515,'org.jhotdraw.samples.odg.figures.ODGRectFigure',4890,'org.jhotdraw.samples.odg.figures.ODGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1530,'Connector c','org.jhotdraw.draw.Connector',145,515,'org.jhotdraw.samples.odg.figures.ODGRectFigure',4889,'org.jhotdraw.samples.odg.figures.ODGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1531,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,515,'org.jhotdraw.samples.odg.figures.ODGRectFigure',4889,'org.jhotdraw.samples.odg.figures.ODGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}'),(1532,'Figure owner','org.jhotdraw.draw.Figure',174,516,'org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle',4911,'org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ODGRectRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}'),(1533,'EnhancedPath.SegType type','org.jhotdraw.samples.odg.geom.EnhancedPath$SegType',517,518,'org.jhotdraw.samples.odg.geom.EnhancedPath$Segment',4952,'org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$SegType,java.lang.Object[])',0,'/**\r\n * Creates a segment.\r\n */\r\npublic Segment(EnhancedPath.SegType type, Object... coordOrModifier) {\r\n    this.type = type;\r\n    for (int i = 0; i < (coordOrModifier.length); i++) {\r\n        if ((coordOrModifier[i]) instanceof Double) {\r\n            coords[i] = ((Double) (coordOrModifier[i]));\r\n        } else {\r\n            modifiers[i] = ((String) (coordOrModifier[i]));\r\n        }\r\n    }\r\n}'),(1534,'EnhancedPath.Segment that','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment',518,518,'org.jhotdraw.samples.odg.geom.EnhancedPath$Segment',4953,'org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)',0,'public Segment(EnhancedPath.Segment that) {\r\n    setTo(that);\r\n}'),(1535,'EnhancedPath.Segment that','org.jhotdraw.samples.odg.geom.EnhancedPath$Segment',518,518,'org.jhotdraw.samples.odg.geom.EnhancedPath$Segment',4957,'org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.setTo(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)',0,'public void setTo(EnhancedPath.Segment that) {\r\n    this.type = that.type;\r\n    System.arraycopy(that.coords, 0, this.coords, 0, that.type.getLen());\r\n    System.arraycopy(that.modifiers, 0, this.modifiers, 0, that.type.getLen());\r\n}'),(1536,'Drawing drawing','org.jhotdraw.draw.Drawing',168,521,'org.jhotdraw.samples.odg.io.ODGInputFormat',4972,'org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(1537,'Drawing drawing','org.jhotdraw.draw.Drawing',168,521,'org.jhotdraw.samples.odg.io.ODGInputFormat',4973,'org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(1538,'Drawing drawing','org.jhotdraw.draw.Drawing',168,521,'org.jhotdraw.samples.odg.io.ODGInputFormat',4971,'org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = ((InputStream) (t.getTransferData(new DataFlavor(\"application/vnd.oasis.opendocument.graphics\", \"Image SVG\"))));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(1539,'Drawing drawing','org.jhotdraw.draw.Drawing',168,521,'org.jhotdraw.samples.odg.io.ODGInputFormat',4974,'org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    // Read the file into a byte array.\r\n    byte[] tmp = readAllBytes(in);\r\n    // Input stream of the content.xml file\r\n    InputStream contentIn = null;\r\n    // Input stream of the styles.xml file\r\n    InputStream stylesIn = null;\r\n    // Try to read \"tmp\" as a ZIP-File.\r\n    boolean isZipped = true;\r\n    try {\r\n        ZipInputStream zin = new ZipInputStream(new ByteArrayInputStream(tmp));\r\n        for (ZipEntry entry; null != (entry = zin.getNextEntry());) {\r\n            if (entry.getName().equals(\"content.xml\")) {\r\n                contentIn = new ByteArrayInputStream(readAllBytes(zin));\r\n            } else\r\n                if (entry.getName().equals(\"styles.xml\")) {\r\n                    stylesIn = new ByteArrayInputStream(readAllBytes(zin));\r\n                }\r\n\r\n        }\r\n    } catch (ZipException e) {\r\n        isZipped = false;\r\n    }\r\n    if (contentIn == null) {\r\n        contentIn = new ByteArrayInputStream(tmp);\r\n    }\r\n    if (stylesIn == null) {\r\n        stylesIn = new ByteArrayInputStream(tmp);\r\n    }\r\n    styles = new ODGStylesReader();\r\n    styles.read(stylesIn);\r\n    readFiguresFromDocumentContent(contentIn, drawing, replace);\r\n}'),(1540,'Drawing drawing','org.jhotdraw.draw.Drawing',168,521,'org.jhotdraw.samples.odg.io.ODGInputFormat',4984,'org.jhotdraw.samples.odg.io.ODGInputFormat.readFiguresFromDocumentContent(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'/**\r\n * Reads figures from the content.xml file of an ODG open document drawing\r\n * document.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic void readFiguresFromDocumentContent(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    this.figures = new LinkedList<Figure>();\r\n    IXMLParser parser;\r\n    try {\r\n        parser = XMLParserFactory.createDefaultXMLParser();\r\n    } catch (Exception ex) {\r\n        InternalError e = new InternalError(\"Unable to instantiate NanoXML Parser\");\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    IXMLReader reader = new StdXMLReader(in);\r\n    parser.setReader(reader);\r\n    try {\r\n        document = ((IXMLElement) (parser.parse()));\r\n    } catch (XMLException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    if ((styles) == null) {\r\n        styles = new ODGStylesReader();\r\n    }\r\n    styles.read(document);\r\n    // Search for the first office:drawing element in the XML document\r\n    // in preorder sequence\r\n    IXMLElement drawingElem = document;\r\n    Stack<Iterator> stack = new Stack<Iterator>();\r\n    LinkedList<IXMLElement> ll = new LinkedList<IXMLElement>();\r\n    ll.add(document);\r\n    stack.push(ll.iterator());\r\n    while ((!(stack.empty())) && (stack.peek().hasNext())) {\r\n        Iterator<IXMLElement> iter = stack.peek();\r\n        IXMLElement node = iter.next();\r\n        Iterator<IXMLElement> children = node.getChildren().iterator();\r\n        if (!(iter.hasNext())) {\r\n            stack.pop();\r\n        }\r\n        if (children.hasNext()) {\r\n            stack.push(children);\r\n        }\r\n        if ((((node.getName()) != null) && (node.getName().equals(\"drawing\"))) && (((node.getNamespace()) == null) || (node.getNamespace().equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n            drawingElem = node;\r\n            break;\r\n        }\r\n    } \r\n    if ((((drawingElem.getName()) == null) || (!(drawingElem.getName().equals(\"drawing\")))) || (((drawingElem.getNamespace()) != null) && (!(drawingElem.getNamespace().equals(ODGConstants.OFFICE_NAMESPACE))))) {\r\n        throw new IOException((\"office:drawing element expected: \" + (drawingElem.getName())));\r\n    }\r\n    readDrawingElement(drawingElem);\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n}'),(1541,'StreamPosTokenizer tt','org.jhotdraw.io.StreamPosTokenizer',448,521,'org.jhotdraw.samples.odg.io.ODGInputFormat',4970,'org.jhotdraw.samples.odg.io.ODGInputFormat.nextEnhancedCoordinate(org.jhotdraw.io.StreamPosTokenizer,java.lang.String)',0,'/**\r\n * Retrieves an enhanced coordinate from the specified tokenizer.\r\n * An enhanced coordinate can be a double, or a ? followed by a\r\n * formula name, or a $ followed by an index to a modifier.\r\n */\r\nprivate Object nextEnhancedCoordinate(StreamPosTokenizer tt, String str) throws IOException {\r\n    switch (tt.nextToken()) {\r\n        case ? :\r\n            {\r\n                StringBuilder buf = new StringBuilder();\r\n                buf.append(?);\r\n                int ch = tt.nextChar();\r\n                for (; (((ch >= a) && (ch <= z)) || ((ch >= A) && (ch <= Z))) || ((ch >= 0) && (ch <= 9)); ch = tt.nextChar()) {\r\n                    buf.append(((char) (ch)));\r\n                }\r\n                tt.pushCharBack(ch);\r\n                return buf.toString();\r\n            }\r\n        case $ :\r\n            {\r\n                StringBuilder buf = new StringBuilder();\r\n                buf.append($);\r\n                int ch = tt.nextChar();\r\n                for (; (ch >= 0) && (ch <= 9); ch = tt.nextChar()) {\r\n                    buf.append(((char) (ch)));\r\n                }\r\n                tt.pushCharBack(ch);\r\n                return buf.toString();\r\n            }\r\n        case StreamPosTokenizer.TT_NUMBER :\r\n            return tt.nval;\r\n        default :\r\n            throw new IOException((((\"coordinate missing at position\" + (tt.getStartPosition())) + \" in \") + str));\r\n    }\r\n}'),(1542,'Drawing d','org.jhotdraw.draw.Drawing',168,525,'org.jhotdraw.samples.pert.PertApplet',5043,'org.jhotdraw.samples.pert.PertApplet.setDrawing(org.jhotdraw.draw.Drawing)',0,'private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}'),(1543,'Drawing d','org.jhotdraw.draw.Drawing',168,525,'org.jhotdraw.samples.pert.PertApplet',5040,'org.jhotdraw.samples.pert.PertApplet.initDrawing(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\nprivate void initDrawing(Drawing d) {\r\n    LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();\r\n    LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new PertFactory());\r\n    inputFormats.add(ioFormat);\r\n    outputFormats.add(ioFormat);\r\n    outputFormats.add(new ImageOutputFormat());\r\n    d.setInputFormats(inputFormats);\r\n    d.setOutputFormats(outputFormats);\r\n}'),(1544,'Tool t','org.jhotdraw.draw.Tool',262,526,'org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener',5052,'org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)',0,'public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(1545,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,526,'org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener',5052,'org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)',0,'public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}'),(1546,'Application a','org.jhotdraw.app.Application',3,527,'org.jhotdraw.samples.pert.PertApplicationModel',5050,'org.jhotdraw.samples.pert.PertApplicationModel.initApplication(org.jhotdraw.app.Application)',0,'public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"toggleGrid\", (aa = new ToggleViewPropertyAction(a, PertView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : PertApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n}'),(1547,'Application a','org.jhotdraw.app.Application',3,527,'org.jhotdraw.samples.pert.PertApplicationModel',5051,'org.jhotdraw.samples.pert.PertApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((PertView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(1548,'View p','org.jhotdraw.app.View',15,527,'org.jhotdraw.samples.pert.PertApplicationModel',5051,'org.jhotdraw.samples.pert.PertApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((PertView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}'),(1549,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,527,'org.jhotdraw.samples.pert.PertApplicationModel',5046,'org.jhotdraw.samples.pert.PertApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TaskFigure(), attributes), \"edit.createTask\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new DependencyFigure(), attributes), \"edit.createDependency\", labels);\r\n    tb.addSeparator();\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", drawLabels);\r\n}'),(1550,'Application a','org.jhotdraw.app.Application',3,527,'org.jhotdraw.samples.pert.PertApplicationModel',5048,'org.jhotdraw.samples.pert.PertApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    PertView p = ((PertView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(1551,'View pr','org.jhotdraw.app.View',15,527,'org.jhotdraw.samples.pert.PertApplicationModel',5048,'org.jhotdraw.samples.pert.PertApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    PertView p = ((PertView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}'),(1552,'Application a','org.jhotdraw.app.Application',3,527,'org.jhotdraw.samples.pert.PertApplicationModel',5047,'org.jhotdraw.samples.pert.PertApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    PertView p = ((PertView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : PertApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(1553,'View pr','org.jhotdraw.app.View',15,527,'org.jhotdraw.samples.pert.PertApplicationModel',5047,'org.jhotdraw.samples.pert.PertApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    PertView p = ((PertView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : PertApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(1554,'Drawing d','org.jhotdraw.draw.Drawing',168,529,'org.jhotdraw.samples.pert.PertPanel',5061,'org.jhotdraw.samples.pert.PertPanel.setDrawing(org.jhotdraw.draw.Drawing)',0,'public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(1555,'final DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,529,'org.jhotdraw.samples.pert.PertPanel',5056,'org.jhotdraw.samples.pert.PertPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)',0,'private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TaskFigure(), attributes), \"edit.createTask\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new DependencyFigure(), attributes), \"edit.createDependency\", labels);\r\n    tb.addSeparator();\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", drawLabels);\r\n}'),(1556,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,530,'org.jhotdraw.samples.pert.PertView',5076,'org.jhotdraw.samples.pert.PertView.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}'),(1557,'Connector start','org.jhotdraw.draw.Connector',145,531,'org.jhotdraw.samples.pert.figures.DependencyFigure',5083,'org.jhotdraw.samples.pert.figures.DependencyFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Checks if two figures can be connected. Implement this method\r\n * to constrain the allowed connections between figures.\r\n */\r\n@Override\r\npublic boolean canConnect(Connector start, Connector end) {\r\n    if (((start.getOwner()) instanceof TaskFigure) && ((end.getOwner()) instanceof TaskFigure)) {\r\n        TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n        TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n        // Disallow multiple connections to same dependent\r\n        if (ef.getPredecessors().contains(sf)) {\r\n            return false;\r\n        }\r\n        // Disallow cyclic connections\r\n        return !(sf.isDependentOf(ef));\r\n    }\r\n    return false;\r\n}'),(1558,'Connector end','org.jhotdraw.draw.Connector',145,531,'org.jhotdraw.samples.pert.figures.DependencyFigure',5083,'org.jhotdraw.samples.pert.figures.DependencyFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Checks if two figures can be connected. Implement this method\r\n * to constrain the allowed connections between figures.\r\n */\r\n@Override\r\npublic boolean canConnect(Connector start, Connector end) {\r\n    if (((start.getOwner()) instanceof TaskFigure) && ((end.getOwner()) instanceof TaskFigure)) {\r\n        TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n        TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n        // Disallow multiple connections to same dependent\r\n        if (ef.getPredecessors().contains(sf)) {\r\n            return false;\r\n        }\r\n        // Disallow cyclic connections\r\n        return !(sf.isDependentOf(ef));\r\n    }\r\n    return false;\r\n}'),(1559,'Connector start','org.jhotdraw.draw.Connector',145,531,'org.jhotdraw.samples.pert.figures.DependencyFigure',5082,'org.jhotdraw.samples.pert.figures.DependencyFigure.canConnect(org.jhotdraw.draw.Connector)',0,'@Override\r\npublic boolean canConnect(Connector start) {\r\n    return (start.getOwner()) instanceof TaskFigure;\r\n}'),(1560,'Connector start','org.jhotdraw.draw.Connector',145,531,'org.jhotdraw.samples.pert.figures.DependencyFigure',5087,'org.jhotdraw.samples.pert.figures.DependencyFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.removeDependency(this);\r\n    ef.removeDependency(this);\r\n}'),(1561,'Connector end','org.jhotdraw.draw.Connector',145,531,'org.jhotdraw.samples.pert.figures.DependencyFigure',5087,'org.jhotdraw.samples.pert.figures.DependencyFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.removeDependency(this);\r\n    ef.removeDependency(this);\r\n}'),(1562,'Connector start','org.jhotdraw.draw.Connector',145,531,'org.jhotdraw.samples.pert.figures.DependencyFigure',5086,'org.jhotdraw.samples.pert.figures.DependencyFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleConnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.addDependency(this);\r\n    ef.addDependency(this);\r\n}'),(1563,'Connector end','org.jhotdraw.draw.Connector',145,531,'org.jhotdraw.samples.pert.figures.DependencyFigure',5086,'org.jhotdraw.samples.pert.figures.DependencyFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)',0,'/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleConnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.addDependency(this);\r\n    ef.addDependency(this);\r\n}'),(1564,'Drawing d','org.jhotdraw.draw.Drawing',168,531,'org.jhotdraw.samples.pert.figures.DependencyFigure',5088,'org.jhotdraw.samples.pert.figures.DependencyFigure.removeNotify(org.jhotdraw.draw.Drawing)',0,'@Override\r\npublic void removeNotify(Drawing d) {\r\n    if ((getStartFigure()) != null) {\r\n        ((TaskFigure) (getStartFigure())).removeDependency(this);\r\n    }\r\n    if ((getEndFigure()) != null) {\r\n        ((TaskFigure) (getEndFigure())).removeDependency(this);\r\n    }\r\n    super.removeNotify(d);\r\n}'),(1565,'TaskFigure target','org.jhotdraw.samples.pert.figures.TaskFigure',535,534,'org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter',5118,'org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter.-init-(org.jhotdraw.samples.pert.figures.TaskFigure)',0,'public NameAdapter(TaskFigure target) {\r\n    this.target = target;\r\n}'),(1566,'TaskFigure target','org.jhotdraw.samples.pert.figures.TaskFigure',535,533,'org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter',5116,'org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter.-init-(org.jhotdraw.samples.pert.figures.TaskFigure)',0,'public DurationAdapter(TaskFigure target) {\r\n    this.target = target;\r\n}'),(1567,'FigureEvent e','org.jhotdraw.draw.FigureEvent',176,534,'org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter',5119,'org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    // We could fire a property change event here, in case\r\n    // some other object would like to observe us.\r\n    // target.firePropertyChange(\"name\", e.getOldValue(), e.getNewValue());\r\n}'),(1568,'FigureEvent evt','org.jhotdraw.draw.FigureEvent',176,533,'org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter',5117,'org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    // We could fire a property change event here, in case\r\n    // some other object would like to observe us.\r\n    // target.firePropertyChange(\"duration\", e.getOldValue(), e.getNewValue());\r\n    for (TaskFigure succ : target.getSuccessors()) {\r\n        succ.updateStartTime();\r\n    }\r\n}'),(1569,'Figure f','org.jhotdraw.draw.Figure',174,535,'org.jhotdraw.samples.pert.figures.TaskFigure',5095,'org.jhotdraw.samples.pert.figures.TaskFigure.applyAttributes(org.jhotdraw.draw.Figure)',0,'@SuppressWarnings(\"unchecked\")\r\nprivate void applyAttributes(Figure f) {\r\n    Map<AttributeKey, Object> attr = ((AbstractAttributedFigure) (getPresentationFigure())).getAttributes();\r\n    for (Map.Entry<AttributeKey, Object> entry : attr.entrySet()) {\r\n        entry.getKey().basicSet(f, entry.getValue());\r\n    }\r\n}'),(1570,'DOMInput in','org.jhotdraw.xml.DOMInput',650,535,'org.jhotdraw.samples.pert.figures.TaskFigure',5109,'org.jhotdraw.samples.pert.figures.TaskFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    double x = in.getAttribute(\"x\", 0.0);\r\n    double y = in.getAttribute(\"y\", 0.0);\r\n    double w = in.getAttribute(\"w\", 0.0);\r\n    double h = in.getAttribute(\"h\", 0.0);\r\n    setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    readAttributes(in);\r\n    in.openElement(\"model\");\r\n    in.openElement(\"name\");\r\n    setName(((String) (in.readObject())));\r\n    in.closeElement();\r\n    in.openElement(\"duration\");\r\n    setDuration(((Integer) (in.readObject())));\r\n    in.closeElement();\r\n    in.closeElement();\r\n}'),(1571,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,535,'org.jhotdraw.samples.pert.figures.TaskFigure',5115,'org.jhotdraw.samples.pert.figures.TaskFigure.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double r = getBounds();\r\n    out.addAttribute(\"x\", r.x);\r\n    out.addAttribute(\"y\", r.y);\r\n    writeAttributes(out);\r\n    out.openElement(\"model\");\r\n    out.openElement(\"name\");\r\n    out.writeObject(getName());\r\n    out.closeElement();\r\n    out.openElement(\"duration\");\r\n    out.writeObject(getDuration());\r\n    out.closeElement();\r\n    out.closeElement();\r\n}'),(1572,'DependencyFigure f','org.jhotdraw.samples.pert.figures.DependencyFigure',531,535,'org.jhotdraw.samples.pert.figures.TaskFigure',5094,'org.jhotdraw.samples.pert.figures.TaskFigure.addDependency(org.jhotdraw.samples.pert.figures.DependencyFigure)',0,'public void addDependency(DependencyFigure f) {\r\n    dependencies.add(f);\r\n    updateStartTime();\r\n}');
INSERT INTO `parameters` VALUES (1573,'DependencyFigure f','org.jhotdraw.samples.pert.figures.DependencyFigure',531,535,'org.jhotdraw.samples.pert.figures.TaskFigure',5110,'org.jhotdraw.samples.pert.figures.TaskFigure.removeDependency(org.jhotdraw.samples.pert.figures.DependencyFigure)',0,'public void removeDependency(DependencyFigure f) {\r\n    dependencies.remove(f);\r\n    updateStartTime();\r\n}'),(1574,'TaskFigure t','org.jhotdraw.samples.pert.figures.TaskFigure',535,535,'org.jhotdraw.samples.pert.figures.TaskFigure',5108,'org.jhotdraw.samples.pert.figures.TaskFigure.isDependentOf(org.jhotdraw.samples.pert.figures.TaskFigure)',0,'/**\r\n * Returns true, if the current task is a direct or\r\n * indirect dependent of the specified task.\r\n * If the dependency is cyclic, then this method returns true\r\n * if <code>this</code> is passed as a parameter and for every other\r\n * task in the cycle.\r\n */\r\npublic boolean isDependentOf(TaskFigure t) {\r\n    if ((this) == t) {\r\n        return true;\r\n    }\r\n    for (TaskFigure pre : getPredecessors()) {\r\n        if (pre.isDependentOf(t)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(1575,'Figure f','org.jhotdraw.draw.Figure',174,536,'org.jhotdraw.samples.svg.Gradient',5121,'org.jhotdraw.samples.svg.Gradient.getPaint(org.jhotdraw.draw.Figure,double)',0,'public Paint getPaint(Figure f, double opacity);'),(1576,'Figure f','org.jhotdraw.draw.Figure',174,536,'org.jhotdraw.samples.svg.Gradient',5123,'org.jhotdraw.samples.svg.Gradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)',0,'public void makeRelativeToFigureBounds(Figure f);'),(1577,'Figure f','org.jhotdraw.draw.Figure',174,537,'org.jhotdraw.samples.svg.LinearGradient',5130,'org.jhotdraw.samples.svg.LinearGradient.getPaint(org.jhotdraw.draw.Figure,double)',0,'public Paint getPaint(Figure f, double opacity) {\r\n    // No stops, like fill = none\r\n    if ((stopColors.length) == 0) {\r\n        return new Color(0, true);\r\n    }\r\n    // Compute colors and fractions for the paint\r\n    Color[] colors = new Color[stopColors.length];\r\n    float[] fractions = new float[stopColors.length];\r\n    float previousFraction = 0;\r\n    for (int i = 0; i < (stopColors.length); i++) {\r\n        // Each fraction must be larger or equal the previous fraction.\r\n        fractions[i] = Math.min(1.0F, Math.max(previousFraction, ((float) (stopOffsets[i]))));\r\n        colors[i] = new Color((((stopColors[i].getRGB()) & 16777215) | (((int) ((opacity * (stopOpacities[i])) * 255)) << 24)), true);\r\n        previousFraction = fractions[i];\r\n    }\r\n    // Compute the dimensions and transforms for the paint\r\n    Point2D.Double p1;\r\n    Point2D.Double p2;\r\n    p1 = new Point2D.Double(x1, y1);\r\n    p2 = new Point2D.Double(x2, y2);\r\n    AffineTransform t = transform;\r\n    if (isRelativeToFigureBounds) {\r\n        t = ((AffineTransform) (t.clone()));\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        t.translate(bounds.x, bounds.y);\r\n        t.scale(bounds.width, bounds.height);\r\n    }\r\n    // Construct a solid color, if only one stop color is given, or if\r\n    // transform is not invertible\r\n    if (((stopColors.length) == 1) || ((t.getDeterminant()) == 0)) {\r\n        return colors[0];\r\n    }\r\n    // Construct a gradient\r\n    LinearGradientPaint gp;\r\n    gp = new <org.apache.batik.ext.awt.LinearGradientPaint, org.apache.batik.ext.awt.LinearGradientPaint>LinearGradientPaint(p1, p2, fractions, colors, t);\r\n    return gp;\r\n}'),(1578,'Figure f','org.jhotdraw.draw.Figure',174,537,'org.jhotdraw.samples.svg.LinearGradient',5141,'org.jhotdraw.samples.svg.LinearGradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)',0,'public void makeRelativeToFigureBounds(Figure f) {\r\n    if (!(isRelativeToFigureBounds)) {\r\n        isRelativeToFigureBounds = true;\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        x1 = ((x1) - (bounds.x)) / (bounds.width);\r\n        y1 = ((y1) - (bounds.y)) / (bounds.height);\r\n        x2 = ((x2) - (bounds.x)) / (bounds.width);\r\n        y2 = ((y2) - (bounds.y)) / (bounds.height);\r\n    }\r\n}'),(1579,'LinearGradient that','org.jhotdraw.samples.svg.LinearGradient',537,537,'org.jhotdraw.samples.svg.LinearGradient',5129,'org.jhotdraw.samples.svg.LinearGradient.equals(org.jhotdraw.samples.svg.LinearGradient)',0,'public boolean equals(LinearGradient that) {\r\n    return (((((((((x1) == (that.x1)) && ((y1) == (that.y1))) && ((x2) == (that.x2))) && ((y2) == (that.y2))) && ((isRelativeToFigureBounds) == (that.isRelativeToFigureBounds))) && (Arrays.equals(stopOffsets, that.stopOffsets))) && (Arrays.equals(stopOpacities, that.stopOpacities))) && (Arrays.equals(stopColors, that.stopColors))) && (transform.equals(that.transform));\r\n}'),(1580,'SVGPathFigure pathPrototype','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,539,'org.jhotdraw.samples.svg.PathTool',5150,'org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}'),(1581,'SVGBezierFigure bezierPrototype','org.jhotdraw.samples.svg.figures.SVGBezierFigure',559,539,'org.jhotdraw.samples.svg.PathTool',5150,'org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}'),(1582,'SVGPathFigure pathPrototype','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,539,'org.jhotdraw.samples.svg.PathTool',5151,'org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}'),(1583,'SVGBezierFigure bezierPrototype','org.jhotdraw.samples.svg.figures.SVGBezierFigure',559,539,'org.jhotdraw.samples.svg.PathTool',5151,'org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}'),(1584,'BezierFigure createdFigure','org.jhotdraw.draw.BezierFigure',118,539,'org.jhotdraw.samples.svg.PathTool',5153,'org.jhotdraw.samples.svg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)',0,'@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG) {\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n    }\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n    creationView.addToSelection(createdPath);\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(1585,'DrawingView creationView','org.jhotdraw.draw.DrawingView',171,539,'org.jhotdraw.samples.svg.PathTool',5153,'org.jhotdraw.samples.svg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)',0,'@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG) {\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n    }\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n    creationView.addToSelection(createdPath);\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}'),(1586,'Figure f','org.jhotdraw.draw.Figure',174,540,'org.jhotdraw.samples.svg.RadialGradient',5171,'org.jhotdraw.samples.svg.RadialGradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)',0,'public void makeRelativeToFigureBounds(Figure f) {\r\n    if (!(isRelativeToFigureBounds)) {\r\n        isRelativeToFigureBounds = true;\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        cx = ((cx) - (bounds.x)) / (bounds.width);\r\n        cy = ((cy) - (bounds.y)) / (bounds.height);\r\n        r = (r) / (Math.sqrt(((((bounds.width) * (bounds.width)) / 2.0) + (((bounds.height) * (bounds.height)) / 2.0))));\r\n    }\r\n}'),(1587,'Figure f','org.jhotdraw.draw.Figure',174,540,'org.jhotdraw.samples.svg.RadialGradient',5163,'org.jhotdraw.samples.svg.RadialGradient.getPaint(org.jhotdraw.draw.Figure,double)',0,'public Paint getPaint(Figure f, double opacity) {\r\n    if (((stopColors.length) == 0) || ((r) <= 0)) {\r\n        return new Color(-1600086016, true);\r\n    }\r\n    // Compute colors and fractions for the paint\r\n    Color[] colors = new Color[stopColors.length];\r\n    float[] fractions = new float[stopColors.length];\r\n    for (int i = 0; i < (stopColors.length); i++) {\r\n        fractions[i] = ((float) (stopOffsets[i]));\r\n        colors[i] = new Color((((stopColors[i].getRGB()) & 16777215) | (((int) ((opacity * (stopOpacities[i])) * 255)) << 24)), true);\r\n    }\r\n    // Compute the dimensions and transforms for the paint\r\n    Point2D.Double cp;\r\n    Point2D.Double fp;\r\n    double rr;\r\n    cp = new Point2D.Double(cx, cy);\r\n    fp = new Point2D.Double(fx, fy);\r\n    rr = r;\r\n    AffineTransform t = transform;\r\n    if (isRelativeToFigureBounds) {\r\n        if (!(t.isIdentity()))\r\n            System.out.println((((\"RadialGradient \" + (hashCode())) + \" t=\") + t));\r\n\r\n        t = new AffineTransform();\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        t.translate(bounds.x, bounds.y);\r\n        t.scale(bounds.width, bounds.height);\r\n    }\r\n    // Construct a solid color, if only one stop color is given, or if\r\n    // transform is not invertible\r\n    if (((stopColors.length) == 1) || ((t.getDeterminant()) == 0)) {\r\n        return colors[0];\r\n    }\r\n    // Construct the paint\r\n    RadialGradientPaint gp;\r\n    gp = new <org.apache.batik.ext.awt.RadialGradientPaint, org.apache.batik.ext.awt.RadialGradientPaint>RadialGradientPaint(cp, ((float) (rr)), fp, fractions, colors, t);\r\n    return gp;\r\n}'),(1588,'RadialGradient that','org.jhotdraw.samples.svg.RadialGradient',540,540,'org.jhotdraw.samples.svg.RadialGradient',5158,'org.jhotdraw.samples.svg.RadialGradient.equals(org.jhotdraw.samples.svg.RadialGradient)',0,'public boolean equals(RadialGradient that) {\r\n    return ((((((((((cx) == (that.cx)) && ((cy) == (that.cy))) && ((fx) == (that.fx))) && ((fy) == (that.fy))) && ((r) == (that.r))) && ((isRelativeToFigureBounds) == (that.isRelativeToFigureBounds))) && (Arrays.equals(stopOffsets, that.stopOffsets))) && (Arrays.equals(stopOpacities, that.stopOpacities))) && (Arrays.equals(stopColors, that.stopColors))) && (transform.equals(that.transform));\r\n}'),(1589,'Drawing d','org.jhotdraw.draw.Drawing',168,541,'org.jhotdraw.samples.svg.SVGApplet',5193,'org.jhotdraw.samples.svg.SVGApplet.setDrawing(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Sets the drawing on the drawing panel.\r\n */\r\nprivate void setDrawing(Drawing d) {\r\n    drawingComponent.setDrawing(d);\r\n}'),(1590,'ProgressIndicator progress','org.jhotdraw.samples.svg.gui.ProgressIndicator',594,541,'org.jhotdraw.samples.svg.SVGApplet',5191,'org.jhotdraw.samples.svg.SVGApplet.loadDrawing(org.jhotdraw.samples.svg.gui.ProgressIndicator)',0,'/**\r\n * Loads the drawing.\r\n * By convention this method is invoked on a worker thread.\r\n *\r\n * @param progress\r\n * 		A ProgressIndicator to inform the user about the progress\r\n * 		of the operation.\r\n * @return The Drawing that was loaded.\r\n */\r\nprotected Drawing loadDrawing(ProgressIndicator progress) throws IOException {\r\n    Drawing drawing = createDrawing();\r\n    InputStream in = null;\r\n    try {\r\n        if ((getParameter(\"datafile\")) != null) {\r\n            ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n            URLConnection uc = url.openConnection();\r\n            // Disable caching. This ensures that we always request the\r\n            // newest version of the drawing from the server.\r\n            // (Note: The server still needs to set the proper HTTP caching\r\n            // properties to prevent proxies from caching the drawing).\r\n            if (uc instanceof HttpURLConnection) {\r\n                ((HttpURLConnection) (uc)).setUseCaches(false);\r\n            }\r\n            // Read the data into a buffer\r\n            int contentLength = uc.getContentLength();\r\n            in = uc.getInputStream();\r\n            if (contentLength != (-1)) {\r\n                in = new BoundedRangeInputStream(in);\r\n                ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                progress.setIndeterminate(false);\r\n            }\r\n            BufferedInputStream bin = new BufferedInputStream(in);\r\n            bin.mark(512);\r\n            // Read the data using all supported input formats\r\n            // until we succeed\r\n            final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n            IOException formatException = null;\r\n            for (InputFormat format : drawing.getInputFormats()) {\r\n                try {\r\n                    bin.reset();\r\n                } catch (IOException e) {\r\n                    uc = url.openConnection();\r\n                    in = uc.getInputStream();\r\n                    in = new BoundedRangeInputStream(in);\r\n                    ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                    progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                    bin = new BufferedInputStream(in);\r\n                    bin.mark(512);\r\n                }\r\n                try {\r\n                    bin.reset();\r\n                    format.read(bin, drawing, true);\r\n                    formatException = null;\r\n                    break;\r\n                } catch (IOException e) {\r\n                    formatException = e;\r\n                }\r\n            }\r\n            if (formatException != null) {\r\n                throw formatException;\r\n            }\r\n        }\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    return drawing;\r\n}'),(1591,'org.jhotdraw.draw.Drawing','org.jhotdraw.draw.Drawing',168,541,'org.jhotdraw.samples.svg.SVGApplet',5191,'org.jhotdraw.samples.svg.SVGApplet.loadDrawing(org.jhotdraw.samples.svg.gui.ProgressIndicator)',1,'/**\r\n * Loads the drawing.\r\n * By convention this method is invoked on a worker thread.\r\n *\r\n * @param progress\r\n * 		A ProgressIndicator to inform the user about the progress\r\n * 		of the operation.\r\n * @return The Drawing that was loaded.\r\n */\r\nprotected Drawing loadDrawing(ProgressIndicator progress) throws IOException {\r\n    Drawing drawing = createDrawing();\r\n    InputStream in = null;\r\n    try {\r\n        if ((getParameter(\"datafile\")) != null) {\r\n            ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n            URLConnection uc = url.openConnection();\r\n            // Disable caching. This ensures that we always request the\r\n            // newest version of the drawing from the server.\r\n            // (Note: The server still needs to set the proper HTTP caching\r\n            // properties to prevent proxies from caching the drawing).\r\n            if (uc instanceof HttpURLConnection) {\r\n                ((HttpURLConnection) (uc)).setUseCaches(false);\r\n            }\r\n            // Read the data into a buffer\r\n            int contentLength = uc.getContentLength();\r\n            in = uc.getInputStream();\r\n            if (contentLength != (-1)) {\r\n                in = new BoundedRangeInputStream(in);\r\n                ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                progress.setIndeterminate(false);\r\n            }\r\n            BufferedInputStream bin = new BufferedInputStream(in);\r\n            bin.mark(512);\r\n            // Read the data using all supported input formats\r\n            // until we succeed\r\n            final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n            IOException formatException = null;\r\n            for (InputFormat format : drawing.getInputFormats()) {\r\n                try {\r\n                    bin.reset();\r\n                } catch (IOException e) {\r\n                    uc = url.openConnection();\r\n                    in = uc.getInputStream();\r\n                    in = new BoundedRangeInputStream(in);\r\n                    ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                    progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                    bin = new BufferedInputStream(in);\r\n                    bin.mark(512);\r\n                }\r\n                try {\r\n                    bin.reset();\r\n                    format.read(bin, drawing, true);\r\n                    formatException = null;\r\n                    break;\r\n                } catch (IOException e) {\r\n                    formatException = e;\r\n                }\r\n            }\r\n            if (formatException != null) {\r\n                throw formatException;\r\n            }\r\n        }\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    return drawing;\r\n}'),(1592,'Application a','org.jhotdraw.app.Application',3,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5203,'org.jhotdraw.samples.svg.SVGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\npublic void initView(Application a, View p) {\r\n    SVGView v = ((SVGView) (p));\r\n    if (a.isSharingToolsAmongViews()) {\r\n        v.setEditor(getSharedEditor());\r\n    }\r\n    p.putAction(SelectSameAction.ID, new SelectSameAction(v.getEditor()));\r\n}'),(1593,'View p','org.jhotdraw.app.View',15,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5203,'org.jhotdraw.samples.svg.SVGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\npublic void initView(Application a, View p) {\r\n    SVGView v = ((SVGView) (p));\r\n    if (a.isSharingToolsAmongViews()) {\r\n        v.setEditor(getSharedEditor());\r\n    }\r\n    p.putAction(SelectSameAction.ID, new SelectSameAction(v.getEditor()));\r\n}'),(1594,'Application a','org.jhotdraw.app.Application',3,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5202,'org.jhotdraw.samples.svg.SVGApplicationModel.initApplication(org.jhotdraw.app.Application)',0,'@Override\r\npublic void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    AbstractAction aa;\r\n    gridConstrainer = new GridConstrainer(12, 12);\r\n    putAction(ClearSelectionAction.ID, new ClearSelectionAction());\r\n    putAction(ViewSourceAction.ID, new ViewSourceAction(a));\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n}'),(1595,'Application app','org.jhotdraw.app.Application',3,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5195,'org.jhotdraw.samples.svg.SVGApplicationModel.createDrawingActions(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)',0,'public Collection<Action> createDrawingActions(Application app, DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectAllAction());\r\n    a.add(new ClearSelectionAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}'),(1596,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5195,'org.jhotdraw.samples.svg.SVGApplicationModel.createDrawingActions(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)',0,'public Collection<Action> createDrawingActions(Application app, DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectAllAction());\r\n    a.add(new ClearSelectionAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}'),(1597,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5198,'org.jhotdraw.samples.svg.SVGApplicationModel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)',0,'public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(1598,'Application a','org.jhotdraw.app.Application',3,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5197,'org.jhotdraw.samples.svg.SVGApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\npublic List<JMenu> createMenus(Application a, View pr) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    mb.add(createEditMenu(a, pr));\r\n    mb.add(createViewMenu(a, pr));\r\n    return mb;\r\n}'),(1599,'View pr','org.jhotdraw.app.View',15,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5197,'org.jhotdraw.samples.svg.SVGApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\npublic List<JMenu> createMenus(Application a, View pr) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    mb.add(createEditMenu(a, pr));\r\n    mb.add(createViewMenu(a, pr));\r\n    return mb;\r\n}'),(1600,'Application a','org.jhotdraw.app.Application',3,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5200,'org.jhotdraw.samples.svg.SVGApplicationModel.createViewMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'protected JMenu createViewMenu(Application a, View p) {\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    Action action;\r\n    ResourceBundleUtil appLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil svgLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    m = new JMenu();\r\n    appLabels.configureMenu(m, \"view\");\r\n    m.add(getAction(ViewSourceAction.ID));\r\n    return m;\r\n}'),(1601,'View p','org.jhotdraw.app.View',15,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5200,'org.jhotdraw.samples.svg.SVGApplicationModel.createViewMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'protected JMenu createViewMenu(Application a, View p) {\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    Action action;\r\n    ResourceBundleUtil appLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil svgLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    m = new JMenu();\r\n    appLabels.configureMenu(m, \"view\");\r\n    m.add(getAction(ViewSourceAction.ID));\r\n    return m;\r\n}'),(1602,'Application a','org.jhotdraw.app.Application',3,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5196,'org.jhotdraw.samples.svg.SVGApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\nprotected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JMenu m = super.createEditMenu(a, p);\r\n    JMenuItem mi;\r\n    mi = m.add(getAction(ClearSelectionAction.ID));\r\n    mi.setIcon(null);\r\n    if (p != null) {\r\n        mi = m.add(p.getAction(SelectSameAction.ID));\r\n    } else {\r\n        mi = new JMenuItem();\r\n        drawLabels.configureMenu(mi, SelectSameAction.ID);\r\n        mi.setEnabled(false);\r\n        m.add(mi);\r\n    }\r\n    mi.setIcon(null);\r\n    return m;\r\n}'),(1603,'View p','org.jhotdraw.app.View',15,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5196,'org.jhotdraw.samples.svg.SVGApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\nprotected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JMenu m = super.createEditMenu(a, p);\r\n    JMenuItem mi;\r\n    mi = m.add(getAction(ClearSelectionAction.ID));\r\n    mi.setIcon(null);\r\n    if (p != null) {\r\n        mi = m.add(p.getAction(SelectSameAction.ID));\r\n    } else {\r\n        mi = new JMenuItem();\r\n        drawLabels.configureMenu(mi, SelectSameAction.ID);\r\n        mi.setEnabled(false);\r\n        m.add(mi);\r\n    }\r\n    mi.setIcon(null);\r\n    return m;\r\n}'),(1604,'Application app','org.jhotdraw.app.Application',3,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5199,'org.jhotdraw.samples.svg.SVGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Overriden to create no toolbars.\r\n *\r\n * @param app\r\n * 		\r\n * @param p\r\n * 		\r\n * @return An empty list.\r\n */\r\n@Override\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    return list;\r\n}'),(1605,'View p','org.jhotdraw.app.View',15,542,'org.jhotdraw.samples.svg.SVGApplicationModel',5199,'org.jhotdraw.samples.svg.SVGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Overriden to create no toolbars.\r\n *\r\n * @param app\r\n * 		\r\n * @param p\r\n * 		\r\n * @return An empty list.\r\n */\r\n@Override\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    return list;\r\n}'),(1606,'Figure f','org.jhotdraw.draw.Figure',174,545,'org.jhotdraw.samples.svg.SVGAttributeKeys',5205,'org.jhotdraw.samples.svg.SVGAttributeKeys.getFillPaint(org.jhotdraw.draw.Figure)',0,'/**\r\n * Gets the fill paint for the specified figure based on the attributes\r\n * FILL_GRADIENT, FILL_OPACITY, FILL_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getFillPaint(Figure f) {\r\n    double opacity = SVGAttributeKeys.FILL_OPACITY.get(f);\r\n    if ((SVGAttributeKeys.FILL_GRADIENT.get(f)) != null) {\r\n        return SVGAttributeKeys.FILL_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.FILL_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}'),(1607,'Figure f','org.jhotdraw.draw.Figure',174,545,'org.jhotdraw.samples.svg.SVGAttributeKeys',5207,'org.jhotdraw.samples.svg.SVGAttributeKeys.getStrokePaint(org.jhotdraw.draw.Figure)',0,'/**\r\n * Gets the stroke paint for the specified figure based on the attributes\r\n * STROKE_GRADIENT, STROKE_OPACITY, STROKE_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getStrokePaint(Figure f) {\r\n    double opacity = SVGAttributeKeys.STROKE_OPACITY.get(f);\r\n    if ((SVGAttributeKeys.STROKE_GRADIENT.get(f)) != null) {\r\n        return SVGAttributeKeys.STROKE_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.STROKE_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}'),(1608,'Figure f','org.jhotdraw.draw.Figure',174,545,'org.jhotdraw.samples.svg.SVGAttributeKeys',5208,'org.jhotdraw.samples.svg.SVGAttributeKeys.setDefaults(org.jhotdraw.draw.Figure)',0,'/**\r\n * Sets SVG default values.\r\n */\r\npublic static void setDefaults(Figure f) {\r\n    // Fill properties\r\n    // http://www.w3.org/TR/SVGMobile12/painting.html#FillProperties\r\n    AttributeKeys.FILL_COLOR.basicSet(f, Color.black);\r\n    AttributeKeys.WINDING_RULE.basicSet(f, AttributeKeys.WindingRule.NON_ZERO);\r\n    // Stroke properties\r\n    // http://www.w3.org/TR/SVGMobile12/painting.html#StrokeProperties\r\n    AttributeKeys.STROKE_COLOR.basicSet(f, null);\r\n    AttributeKeys.STROKE_WIDTH.basicSet(f, 1.0);\r\n    AttributeKeys.STROKE_CAP.basicSet(f, BasicStroke.CAP_BUTT);\r\n    AttributeKeys.STROKE_JOIN.basicSet(f, BasicStroke.JOIN_MITER);\r\n    AttributeKeys.STROKE_MITER_LIMIT.basicSet(f, 4.0);\r\n    AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.basicSet(f, false);\r\n    AttributeKeys.STROKE_DASHES.basicSet(f, null);\r\n    AttributeKeys.STROKE_DASH_PHASE.basicSet(f, 0.0);\r\n    AttributeKeys.IS_STROKE_DASH_FACTOR.basicSet(f, false);\r\n}'),(1609,'Figure f','org.jhotdraw.draw.Figure',174,545,'org.jhotdraw.samples.svg.SVGAttributeKeys',5206,'org.jhotdraw.samples.svg.SVGAttributeKeys.getPerpendicularHitGrowth(org.jhotdraw.draw.Figure)',0,'/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * make hit detections on a shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularHitGrowth(Figure f) {\r\n    double grow;\r\n    if (((AttributeKeys.STROKE_COLOR.get(f)) == null) && ((SVGAttributeKeys.STROKE_GRADIENT.get(f)) == null)) {\r\n        grow = AttributeKeys.getPerpendicularFillGrowth(f);\r\n    } else {\r\n        double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n        grow = (AttributeKeys.getPerpendicularDrawGrowth(f)) + (strokeWidth / 2.0);\r\n    }\r\n    return grow;\r\n}'),(1610,'ImageHolderFigure imagePrototype','org.jhotdraw.draw.ImageHolderFigure',199,547,'org.jhotdraw.samples.svg.SVGCreateFromFileTool',5212,'org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype) {\r\n    super(imagePrototype);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}'),(1611,'CompositeFigure groupPrototype','org.jhotdraw.draw.CompositeFigure',136,547,'org.jhotdraw.samples.svg.SVGCreateFromFileTool',5212,'org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype) {\r\n    super(imagePrototype);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}'),(1612,'ImageHolderFigure imagePrototype','org.jhotdraw.draw.ImageHolderFigure',199,547,'org.jhotdraw.samples.svg.SVGCreateFromFileTool',5213,'org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(imagePrototype, attributes);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}'),(1613,'CompositeFigure groupPrototype','org.jhotdraw.draw.CompositeFigure',136,547,'org.jhotdraw.samples.svg.SVGCreateFromFileTool',5213,'org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure,java.util.Map)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(imagePrototype, attributes);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}'),(1614,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,547,'org.jhotdraw.samples.svg.SVGCreateFromFileTool',5215,'org.jhotdraw.samples.svg.SVGCreateFromFileTool.activate(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    if ((workerThread) != null) {\r\n        try {\r\n            workerThread.join();\r\n        } catch (InterruptedException ex) {\r\n            // ignore\r\n        }\r\n    }\r\n    final File file;\r\n    if (useFileDialog) {\r\n        getFileDialog().setVisible(true);\r\n        if ((getFileDialog().getFile()) != null) {\r\n            file = new File(getFileDialog().getDirectory(), getFileDialog().getFile());\r\n        } else {\r\n            file = null;\r\n        }\r\n    } else {\r\n        if ((getFileChooser().showOpenDialog(getView().getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n            file = getFileChooser().getSelectedFile();\r\n        } else {\r\n            file = null;\r\n        }\r\n    }\r\n    if (file != null) {\r\n        Worker worker;\r\n        if ((file.getName().toLowerCase().endsWith(\".svg\")) || (file.getName().toLowerCase().endsWith(\".svgz\"))) {\r\n            prototype = ((Figure) (groupPrototype.clone()));\r\n            worker = new Worker() {\r\n                public Object construct() {\r\n                    Drawing drawing = new DefaultDrawing();\r\n                    try {\r\n                        InputFormat in = (file.getName().toLowerCase().endsWith(\".svg\")) ? new SVGInputFormat() : new SVGZInputFormat();\r\n                        in.read(file, drawing);\r\n                    } catch (Throwable t) {\r\n                        return t;\r\n                    }\r\n                    return drawing;\r\n                }\r\n\r\n                public void finished(Object value) {\r\n                    if (value instanceof Throwable) {\r\n                        Throwable t = ((Throwable) (value));\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        getDrawing().remove(createdFigure);\r\n                        fireToolDone();\r\n                    } else {\r\n                        Drawing drawing = ((Drawing) (value));\r\n                        CompositeFigure parent;\r\n                        if ((createdFigure) == null) {\r\n                            parent = ((CompositeFigure) (prototype));\r\n                            for (Figure f : drawing.getChildren()) {\r\n                                parent.basicAdd(f);\r\n                            }\r\n                        } else {\r\n                            parent = ((CompositeFigure) (createdFigure));\r\n                            parent.willChange();\r\n                            for (Figure f : drawing.getChildren()) {\r\n                                parent.add(f);\r\n                            }\r\n                            parent.changed();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        } else {\r\n            prototype = imagePrototype;\r\n            final ImageHolderFigure loaderFigure = ((ImageHolderFigure) (prototype.clone()));\r\n            worker = new Worker() {\r\n                public Object construct() {\r\n                    try {\r\n                        ((ImageHolderFigure) (loaderFigure)).loadImage(file);\r\n                    } catch (Throwable t) {\r\n                        return t;\r\n                    }\r\n                    return null;\r\n                }\r\n\r\n                public void finished(Object value) {\r\n                    if (value instanceof Throwable) {\r\n                        Throwable t = ((Throwable) (value));\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        getDrawing().remove(createdFigure);\r\n                        fireToolDone();\r\n                    } else {\r\n                        try {\r\n                            if ((createdFigure) == null) {\r\n                                ((ImageHolderFigure) (prototype)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                            } else {\r\n                                ((ImageHolderFigure) (createdFigure)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                            }\r\n                        } catch (IOException ex) {\r\n                            JOptionPane.showMessageDialog(getView().getComponent(), ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        workerThread = new Thread(worker);\r\n        workerThread.start();\r\n    } else {\r\n        // getDrawing().remove(createdFigure);\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    }\r\n}'),(1615,'Drawing d','org.jhotdraw.draw.Drawing',168,549,'org.jhotdraw.samples.svg.SVGDrawingPanel',5228,'org.jhotdraw.samples.svg.SVGDrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)',0,'public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}'),(1616,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,549,'org.jhotdraw.samples.svg.SVGDrawingPanel',5229,'org.jhotdraw.samples.svg.SVGDrawingPanel.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n    creationToolBar.setEditor(editor);\r\n    fillToolBar.setEditor(editor);\r\n    strokeToolBar.setEditor(editor);\r\n    actionToolBar.setUndoManager(undoManager);\r\n    actionToolBar.setEditor(editor);\r\n    alignToolBar.setEditor(editor);\r\n    arrangeToolBar.setEditor(editor);\r\n    fontToolBar.setEditor(editor);\r\n    figureToolBar.setEditor(editor);\r\n    linkToolBar.setEditor(editor);\r\n    DrawingView temp = editor.getActiveView();\r\n    editor.setActiveView(view);\r\n    canvasToolBar.setEditor(editor);\r\n    viewToolBar.setEditor(editor);\r\n    editor.setActiveView(temp);\r\n}'),(1617,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,552,'org.jhotdraw.samples.svg.SVGView',5272,'org.jhotdraw.samples.svg.SVGView.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor newValue) {\r\n    svgPanel.setEditor(newValue);\r\n}'),(1618,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,553,'org.jhotdraw.samples.svg.action.CombineAction',5276,'org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic CombineAction(DrawingEditor editor) {\r\n    this(editor, new SVGPathFigure(true), true);\r\n}'),(1619,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,553,'org.jhotdraw.samples.svg.action.CombineAction',5277,'org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'public CombineAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    this(editor, prototype, true);\r\n}'),(1620,'SVGPathFigure prototype','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,553,'org.jhotdraw.samples.svg.action.CombineAction',5277,'org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'public CombineAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    this(editor, prototype, true);\r\n}'),(1621,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,553,'org.jhotdraw.samples.svg.action.CombineAction',5278,'org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)',0,'public CombineAction(DrawingEditor editor, SVGPathFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isCombineAction = isGroupingAction;\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, CombineAction.ID);\r\n}'),(1622,'SVGPathFigure prototype','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,553,'org.jhotdraw.samples.svg.action.CombineAction',5278,'org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)',0,'public CombineAction(DrawingEditor editor, SVGPathFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isCombineAction = isGroupingAction;\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, CombineAction.ID);\r\n}'),(1623,'DrawingView view','org.jhotdraw.draw.DrawingView',171,553,'org.jhotdraw.samples.svg.action.CombineAction',5286,'org.jhotdraw.samples.svg.action.CombineAction.splitPath(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.List,int[],int[])',0,'public void splitPath(DrawingView view, CompositeFigure group, List<Figure> ungroupedPaths, int[] ungroupedPathsIndices, int[] ungroupedPathsChildCounts) {\r\n    view.clearSelection();\r\n    Iterator<Figure> groupedFigures = new LinkedList<Figure>(group.getChildren()).iterator();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().remove(group);\r\n    for (int i = 0; i < (ungroupedPaths.size()); i++) {\r\n        CompositeFigure path = ((CompositeFigure) (ungroupedPaths.get(i)));\r\n        view.getDrawing().add(ungroupedPathsIndices[i], path);\r\n        path.willChange();\r\n        for (int j = 0; j < (ungroupedPathsChildCounts[i]); j++) {\r\n            path.basicAdd(groupedFigures.next());\r\n        }\r\n        path.changed();\r\n    }\r\n    view.addToSelection(ungroupedPaths);\r\n}'),(1624,'CompositeFigure group','org.jhotdraw.draw.CompositeFigure',136,553,'org.jhotdraw.samples.svg.action.CombineAction',5286,'org.jhotdraw.samples.svg.action.CombineAction.splitPath(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.List,int[],int[])',0,'public void splitPath(DrawingView view, CompositeFigure group, List<Figure> ungroupedPaths, int[] ungroupedPathsIndices, int[] ungroupedPathsChildCounts) {\r\n    view.clearSelection();\r\n    Iterator<Figure> groupedFigures = new LinkedList<Figure>(group.getChildren()).iterator();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().remove(group);\r\n    for (int i = 0; i < (ungroupedPaths.size()); i++) {\r\n        CompositeFigure path = ((CompositeFigure) (ungroupedPaths.get(i)));\r\n        view.getDrawing().add(ungroupedPathsIndices[i], path);\r\n        path.willChange();\r\n        for (int j = 0; j < (ungroupedPathsChildCounts[i]); j++) {\r\n            path.basicAdd(groupedFigures.next());\r\n        }\r\n        path.changed();\r\n    }\r\n    view.addToSelection(ungroupedPaths);\r\n}'),(1625,'DrawingView view','org.jhotdraw.draw.DrawingView',171,553,'org.jhotdraw.samples.svg.action.CombineAction',5284,'org.jhotdraw.samples.svg.action.CombineAction.combinePaths(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection,int)',0,'@SuppressWarnings(\"unchecked\")\r\npublic void combinePaths(DrawingView view, CompositeFigure group, Collection<Figure> figures, int groupIndex) {\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(groupIndex, group);\r\n    group.willChange();\r\n    group.basicRemoveAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : figures) {\r\n        SVGPathFigure path = ((SVGPathFigure) (f));\r\n        List<Figure> children = new LinkedList<Figure>(path.getChildren());\r\n        path.basicRemoveAllChildren();\r\n        for (Figure child : children) {\r\n            SVGBezierFigure bez = ((SVGBezierFigure) (child));\r\n            bez.flattenTransform();\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(1626,'CompositeFigure group','org.jhotdraw.draw.CompositeFigure',136,553,'org.jhotdraw.samples.svg.action.CombineAction',5284,'org.jhotdraw.samples.svg.action.CombineAction.combinePaths(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection,int)',0,'@SuppressWarnings(\"unchecked\")\r\npublic void combinePaths(DrawingView view, CompositeFigure group, Collection<Figure> figures, int groupIndex) {\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(groupIndex, group);\r\n    group.willChange();\r\n    group.basicRemoveAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : figures) {\r\n        SVGPathFigure path = ((SVGPathFigure) (f));\r\n        List<Figure> children = new LinkedList<Figure>(path.getChildren());\r\n        path.basicRemoveAllChildren();\r\n        for (Figure child : children) {\r\n            SVGBezierFigure bez = ((SVGBezierFigure) (child));\r\n            bez.flattenTransform();\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}'),(1627,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,554,'org.jhotdraw.samples.svg.action.SplitAction',5288,'org.jhotdraw.samples.svg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SplitAction(DrawingEditor editor) {\r\n    super(editor, new SVGPathFigure(), false);\r\n    labels.configureAction(this, SplitAction.ID);\r\n}'),(1628,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,554,'org.jhotdraw.samples.svg.action.SplitAction',5289,'org.jhotdraw.samples.svg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'public SplitAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, SplitAction.ID);\r\n}'),(1629,'SVGPathFigure prototype','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,554,'org.jhotdraw.samples.svg.action.SplitAction',5289,'org.jhotdraw.samples.svg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'public SplitAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, SplitAction.ID);\r\n}'),(1630,'Application app','org.jhotdraw.app.Application',3,555,'org.jhotdraw.samples.svg.action.ViewSourceAction',5290,'org.jhotdraw.samples.svg.action.ViewSourceAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ViewSourceAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    labels.configureAction(this, ViewSourceAction.ID);\r\n}'),(1631,'SVGPathFigure owner','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5293,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'/**\r\n * Creates a bounds outline handle for resizing a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner) {\r\n    this(owner, false, false);\r\n}'),(1632,'SVGPathFigure owner','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5294,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean,boolean)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, boolean isTransformHandle, boolean isHoverHandle) {\r\n    super(owner);\r\n    if (isTransformHandle) {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;\r\n    } else {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;\r\n    }\r\n}'),(1633,'SVGPathFigure owner','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1634,'// \r\nAttributeKey<Stroke> stroke1Enabled','org.jhotdraw.draw.AttributeKey',109,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1635,'AttributeKey<Color> strokeColor1Enabled','org.jhotdraw.draw.AttributeKey',109,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1636,'// \r\nAttributeKey<Stroke> stroke2Enabled','org.jhotdraw.draw.AttributeKey',109,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1637,'AttributeKey<Color> strokeColor2Enabled','org.jhotdraw.draw.AttributeKey',109,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1638,'// \r\nAttributeKey<Stroke> stroke1Disabled','org.jhotdraw.draw.AttributeKey',109,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1639,'AttributeKey<Color> strokeColor1Disabled','org.jhotdraw.draw.AttributeKey',109,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1640,'// \r\nAttributeKey<Stroke> stroke2Disabled','org.jhotdraw.draw.AttributeKey',109,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1641,'AttributeKey<Color> strokeColor2Disabled','org.jhotdraw.draw.AttributeKey',109,556,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle',5295,'org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)',0,'/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * 		\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}'),(1642,'Figure owner','org.jhotdraw.draw.Figure',174,557,'org.jhotdraw.samples.svg.figures.LinkHandle',5304,'org.jhotdraw.samples.svg.figures.LinkHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic LinkHandle(Figure owner) {\r\n    super(owner);\r\n}'),(1643,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,558,'org.jhotdraw.samples.svg.figures.SVGAttributedFigure',5318,'org.jhotdraw.samples.svg.figures.SVGAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.TRANSFORM)) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}'),(1644,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,558,'org.jhotdraw.samples.svg.figures.SVGAttributedFigure',5319,'org.jhotdraw.samples.svg.figures.SVGAttributedFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}'),(1645,'DOMInput in','org.jhotdraw.xml.DOMInput',650,558,'org.jhotdraw.samples.svg.figures.SVGAttributedFigure',5317,'org.jhotdraw.samples.svg.figures.SVGAttributedFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}'),(1646,'SVGPathFigure pathFigure','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,559,'org.jhotdraw.samples.svg.figures.SVGBezierFigure',5322,'org.jhotdraw.samples.svg.figures.SVGBezierFigure.createHandles(org.jhotdraw.samples.svg.figures.SVGPathFigure,int)',0,'public Collection<Handle> createHandles(SVGPathFigure pathFigure, int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            for (int i = 0, n = path.size(); i < n; i++) {\r\n                handles.add(new BezierNodeHandle(this, i, pathFigure));\r\n            }\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}'),(1647,'DrawingView view','org.jhotdraw.draw.DrawingView',171,559,'org.jhotdraw.samples.svg.figures.SVGBezierFigure',5326,'org.jhotdraw.samples.svg.figures.SVGBezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    /* && view.getHandleDetailLevel() == 0 */\r\n    if ((evt.getClickCount()) == 2) {\r\n        willChange();\r\n        // Apply inverse of transform to point\r\n        if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n            try {\r\n                p = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(p, new Point2D.Double())));\r\n            } catch (NoninvertibleTransformException ex) {\r\n                System.err.println(\"Warning: SVGBezierFigure.handleMouseClick. Figure has noninvertible Transform.\");\r\n            }\r\n        }\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                    return labels.getString(\"edit.bezierPath.splitSegment.text\");\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}'),(1648,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,560,'org.jhotdraw.samples.svg.figures.SVGEllipseFigure',5340,'org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1649,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,560,'org.jhotdraw.samples.svg.figures.SVGEllipseFigure',5340,'org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1650,'Connector c','org.jhotdraw.draw.Connector',145,560,'org.jhotdraw.samples.svg.figures.SVGEllipseFigure',5339,'org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1651,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,560,'org.jhotdraw.samples.svg.figures.SVGEllipseFigure',5339,'org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1652,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,562,'org.jhotdraw.samples.svg.figures.SVGGroupFigure',5365,'org.jhotdraw.samples.svg.figures.SVGGroupFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    if (key == (SVGAttributeKeys.OPACITY)) {\r\n        attributes.put(key, value);\r\n    } else\r\n        if ((key == (SVGAttributeKeys.LINK)) || (key == (SVGAttributeKeys.LINK_TARGET))) {\r\n            attributes.put(key, value);\r\n        } else {\r\n            super.setAttribute(key, value);\r\n        }\r\n\r\n    invalidate();\r\n}'),(1653,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,562,'org.jhotdraw.samples.svg.figures.SVGGroupFigure',5360,'org.jhotdraw.samples.svg.figures.SVGGroupFigure.getAttribute(org.jhotdraw.draw.AttributeKey)',0,'@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return key.get(attributes);\r\n}'),(1654,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,562,'org.jhotdraw.samples.svg.figures.SVGGroupFigure',5368,'org.jhotdraw.samples.svg.figures.SVGGroupFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}'),(1655,'DOMInput in','org.jhotdraw.xml.DOMInput',650,562,'org.jhotdraw.samples.svg.figures.SVGGroupFigure',5364,'org.jhotdraw.samples.svg.figures.SVGGroupFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}'),(1656,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,563,'org.jhotdraw.samples.svg.figures.SVGImageFigure',5380,'org.jhotdraw.samples.svg.figures.SVGImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1657,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,563,'org.jhotdraw.samples.svg.figures.SVGImageFigure',5380,'org.jhotdraw.samples.svg.figures.SVGImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1658,'Connector c','org.jhotdraw.draw.Connector',145,563,'org.jhotdraw.samples.svg.figures.SVGImageFigure',5379,'org.jhotdraw.samples.svg.figures.SVGImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1659,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,563,'org.jhotdraw.samples.svg.figures.SVGImageFigure',5379,'org.jhotdraw.samples.svg.figures.SVGImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1660,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5434,'org.jhotdraw.samples.svg.figures.SVGPathFigure.write(org.jhotdraw.xml.DOMOutput)',0,'@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}'),(1661,'DOMInput in','org.jhotdraw.xml.DOMInput',650,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5429,'org.jhotdraw.samples.svg.figures.SVGPathFigure.read(org.jhotdraw.xml.DOMInput)',0,'@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}'),(1662,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5431,'org.jhotdraw.samples.svg.figures.SVGPathFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}'),(1663,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5418,'org.jhotdraw.samples.svg.figures.SVGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1664,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5418,'org.jhotdraw.samples.svg.figures.SVGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1665,'Connector c','org.jhotdraw.draw.Connector',145,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5417,'org.jhotdraw.samples.svg.figures.SVGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1666,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5417,'org.jhotdraw.samples.svg.figures.SVGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1667,'DrawingView view','org.jhotdraw.draw.DrawingView',171,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5426,'org.jhotdraw.samples.svg.figures.SVGPathFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)',0,'/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        for (Figure child : getChildren()) {\r\n            SVGBezierFigure bf = ((SVGBezierFigure) (child));\r\n            int index = bf.findSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n            if (index != (-1)) {\r\n                bf.handleMouseClick(p, evt, view);\r\n                evt.consume();\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}'),(1668,'final Figure figure','org.jhotdraw.draw.Figure',174,564,'org.jhotdraw.samples.svg.figures.SVGPathFigure',5407,'org.jhotdraw.samples.svg.figures.SVGPathFigure.add(int,org.jhotdraw.draw.Figure)',0,'@Override\r\npublic void add(final int index, final Figure figure) {\r\n    super.add(index, ((SVGBezierFigure) (figure)));\r\n}'),(1669,'SVGPathFigure owner','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,565,'org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle',5435,'org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SVGPathOutlineHandle(SVGPathFigure owner) {\r\n    this(owner, false);\r\n}'),(1670,'SVGPathFigure owner','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,565,'org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle',5436,'org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SVGPathOutlineHandle(SVGPathFigure owner, boolean isHoverHandle) {\r\n    super(owner);\r\n    this.isHoverHandle = isHoverHandle;\r\n}'),(1671,'Dimension2DDouble arc','org.jhotdraw.geom.Dimension2DDouble',346,566,'org.jhotdraw.samples.svg.figures.SVGRectFigure',5472,'org.jhotdraw.samples.svg.figures.SVGRectFigure.setArc(org.jhotdraw.geom.Dimension2DDouble)',0,'public void setArc(Dimension2DDouble arc) {\r\n    roundrect.arcwidth = Math.max(0.0, Math.min(roundrect.width, ((arc.width) * 2.0)));\r\n    roundrect.archeight = Math.max(0.0, Math.min(roundrect.height, ((arc.height) * 2.0)));\r\n}'),(1672,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,566,'org.jhotdraw.samples.svg.figures.SVGRectFigure',5454,'org.jhotdraw.samples.svg.figures.SVGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1673,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,566,'org.jhotdraw.samples.svg.figures.SVGRectFigure',5454,'org.jhotdraw.samples.svg.figures.SVGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1674,'Connector c','org.jhotdraw.draw.Connector',145,566,'org.jhotdraw.samples.svg.figures.SVGRectFigure',5453,'org.jhotdraw.samples.svg.figures.SVGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1675,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,566,'org.jhotdraw.samples.svg.figures.SVGRectFigure',5453,'org.jhotdraw.samples.svg.figures.SVGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1676,'Figure owner','org.jhotdraw.draw.Figure',174,567,'org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle',5475,'org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.-init-(org.jhotdraw.draw.Figure)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic SVGRectRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}'),(1677,'SVGRectFigure owner','org.jhotdraw.samples.svg.figures.SVGRectFigure',566,568,'org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit',5484,'org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.-init-(org.jhotdraw.samples.svg.figures.SVGRectFigure,org.jhotdraw.geom.Dimension2DDouble,org.jhotdraw.geom.Dimension2DDouble)',0,'public SVGRectRadiusUndoableEdit(SVGRectFigure owner, Dimension2DDouble oldArc, Dimension2DDouble newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}'),(1678,'Dimension2DDouble oldArc','org.jhotdraw.geom.Dimension2DDouble',346,568,'org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit',5484,'org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.-init-(org.jhotdraw.samples.svg.figures.SVGRectFigure,org.jhotdraw.geom.Dimension2DDouble,org.jhotdraw.geom.Dimension2DDouble)',0,'public SVGRectRadiusUndoableEdit(SVGRectFigure owner, Dimension2DDouble oldArc, Dimension2DDouble newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}'),(1679,'Dimension2DDouble newArc','org.jhotdraw.geom.Dimension2DDouble',346,568,'org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit',5484,'org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.-init-(org.jhotdraw.samples.svg.figures.SVGRectFigure,org.jhotdraw.geom.Dimension2DDouble,org.jhotdraw.geom.Dimension2DDouble)',0,'public SVGRectRadiusUndoableEdit(SVGRectFigure owner, Dimension2DDouble oldArc, Dimension2DDouble newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}'),(1680,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,569,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure',5523,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'public <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if ((((((((key.equals(SVGAttributeKeys.TRANSFORM)) || (key.equals(SVGAttributeKeys.FONT_FACE))) || (key.equals(SVGAttributeKeys.FONT_BOLD))) || (key.equals(SVGAttributeKeys.FONT_ITALIC))) || (key.equals(SVGAttributeKeys.FONT_SIZE))) || (key.equals(SVGAttributeKeys.STROKE_WIDTH))) || (key.equals(SVGAttributeKeys.STROKE_COLOR))) || (key.equals(SVGAttributeKeys.STROKE_GRADIENT))) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}'),(1681,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,569,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure',5501,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1682,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,569,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure',5501,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1683,'Connector c','org.jhotdraw.draw.Connector',145,569,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure',5500,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1684,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,569,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure',5500,'org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1685,'AttributeKey<T> key','org.jhotdraw.draw.AttributeKey',109,570,'org.jhotdraw.samples.svg.figures.SVGTextFigure',5563,'org.jhotdraw.samples.svg.figures.SVGTextFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)',0,'@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((((key.equals(SVGAttributeKeys.TRANSFORM)) || (key.equals(SVGAttributeKeys.FONT_FACE))) || (key.equals(SVGAttributeKeys.FONT_BOLD))) || (key.equals(SVGAttributeKeys.FONT_ITALIC))) || (key.equals(SVGAttributeKeys.FONT_SIZE))) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}'),(1686,'ConnectionFigure prototype','org.jhotdraw.draw.ConnectionFigure',142,570,'org.jhotdraw.samples.svg.figures.SVGTextFigure',5539,'org.jhotdraw.samples.svg.figures.SVGTextFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',0,'@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1687,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,570,'org.jhotdraw.samples.svg.figures.SVGTextFigure',5539,'org.jhotdraw.samples.svg.figures.SVGTextFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)',1,'@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1688,'Connector c','org.jhotdraw.draw.Connector',145,570,'org.jhotdraw.samples.svg.figures.SVGTextFigure',5538,'org.jhotdraw.samples.svg.figures.SVGTextFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',0,'@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1689,'org.jhotdraw.draw.Connector','org.jhotdraw.draw.Connector',145,570,'org.jhotdraw.samples.svg.figures.SVGTextFigure',5538,'org.jhotdraw.samples.svg.figures.SVGTextFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)',1,'@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}'),(1690,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,572,'org.jhotdraw.samples.svg.gui.AbstractToolBar',5580,'org.jhotdraw.samples.svg.gui.AbstractToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'public void setEditor(DrawingEditor editor) {\r\n    if ((this.editor) != null) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.editor = editor;\r\n    if (editor != null) {\r\n        init();\r\n        setDisclosureState(Math.max(0, Math.min(getDisclosureStateCount(), prefs.getInt(((getID()) + \".disclosureState\"), getDefaultDisclosureState()))));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}'),(1691,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,574,'org.jhotdraw.samples.svg.gui.ActionsToolBar',5601,'org.jhotdraw.samples.svg.gui.ActionsToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    if (((this.editor) != null) && ((undoManager) != null)) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.editor = newValue;\r\n    if (((editor) != null) && ((undoManager) != null)) {\r\n        init();\r\n        setDisclosureState(prefs.getInt(((getID()) + \".disclosureState\"), 1));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}'),(1692,'UndoRedoManager newValue','org.jhotdraw.undo.UndoRedoManager',641,574,'org.jhotdraw.samples.svg.gui.ActionsToolBar',5602,'org.jhotdraw.samples.svg.gui.ActionsToolBar.setUndoManager(org.jhotdraw.undo.UndoRedoManager)',0,'public void setUndoManager(UndoRedoManager newValue) {\r\n    if (((this.editor) != null) && (newValue != null)) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.undoManager = newValue;\r\n    if (((editor) != null) && (newValue != null)) {\r\n        init();\r\n        setDisclosureState(prefs.getInt(((getID()) + \".disclosureState\"), 1));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}'),(1693,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,576,'org.jhotdraw.samples.svg.gui.AlignToolBar',5619,'org.jhotdraw.samples.svg.gui.AlignToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n        displayer.setMinSelectionCount(2);\r\n        displayer.setVisibleIfCreationTool(false);\r\n    }\r\n}'),(1694,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,578,'org.jhotdraw.samples.svg.gui.ArrangeToolBar',5636,'org.jhotdraw.samples.svg.gui.ArrangeToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n        displayer.setVisibleIfCreationTool(false);\r\n    }\r\n}'),(1695,'Drawing newValue','org.jhotdraw.draw.Drawing',168,582,'org.jhotdraw.samples.svg.gui.DrawingComponent',5670,'org.jhotdraw.samples.svg.gui.DrawingComponent.setDrawing(org.jhotdraw.draw.Drawing)',0,'/**\r\n * Sets the drawing of the DrawingComponent.\r\n */\r\npublic void setDrawing(Drawing newValue);'),(1696,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,583,'org.jhotdraw.samples.svg.gui.DrawingComponentRepainter',5671,'org.jhotdraw.samples.svg.gui.DrawingComponentRepainter.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)',0,'public DrawingComponentRepainter(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if (editor != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.addPropertyChangeListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().addFigureListener(this);\r\n            }\r\n        }\r\n        editor.addPropertyChangeListener(this);\r\n    }\r\n}'),(1697,'FigureEvent evt','org.jhotdraw.draw.FigureEvent',176,583,'org.jhotdraw.samples.svg.gui.DrawingComponentRepainter',5672,'org.jhotdraw.samples.svg.gui.DrawingComponentRepainter.attributeChanged(org.jhotdraw.draw.FigureEvent)',0,'@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    component.repaint();\r\n}'),(1698,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,584,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon',5675,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1699,'AttributeKey<Double> opacityKey','org.jhotdraw.draw.AttributeKey',109,584,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon',5675,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1700,'AttributeKey<Color> fillColorKey','org.jhotdraw.draw.AttributeKey',109,584,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon',5675,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1701,'AttributeKey<Color> strokeColorKey','org.jhotdraw.draw.AttributeKey',109,584,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon',5675,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1702,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,584,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon',5676,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)',0,'public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1703,'AttributeKey<Double> opacityKey','org.jhotdraw.draw.AttributeKey',109,584,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon',5676,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)',0,'public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1704,'AttributeKey<Color> fillColorKey','org.jhotdraw.draw.AttributeKey',109,584,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon',5676,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)',0,'public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1705,'AttributeKey<Color> strokeColorKey','org.jhotdraw.draw.AttributeKey',109,584,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon',5676,'org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)',0,'public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1706,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,585,'org.jhotdraw.samples.svg.gui.FigureToolBar',5682,'org.jhotdraw.samples.svg.gui.FigureToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}'),(1707,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,587,'org.jhotdraw.samples.svg.gui.FillToolBar',5700,'org.jhotdraw.samples.svg.gui.FillToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}'),(1708,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,589,'org.jhotdraw.samples.svg.gui.FontToolBar',5719,'org.jhotdraw.samples.svg.gui.FontToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this) {\r\n            @Override\r\n            public void updateVisibility() {\r\n                boolean newValue = (((editor) != null) && ((editor.getActiveView()) != null)) && (((isVisibleIfCreationTool) && (((editor.getTool()) instanceof TextCreationTool) || ((editor.getTool()) instanceof TextAreaCreationTool))) || (containsTextHolderFigure(editor.getActiveView().getSelectedFigures())));\r\n                component.setVisible(newValue);\r\n                // The following is needed to trick BoxLayout\r\n                if (newValue) {\r\n                    component.setPreferredSize(null);\r\n                } else {\r\n                    component.setPreferredSize(new Dimension(0, 0));\r\n                }\r\n                component.revalidate();\r\n            }\r\n\r\n            private boolean containsTextHolderFigure(Collection<Figure> figures) {\r\n                for (Figure f : figures) {\r\n                    if (f instanceof TextHolderFigure) {\r\n                        return true;\r\n                    } else\r\n                        if (f instanceof CompositeFigure) {\r\n                            if (containsTextHolderFigure(((CompositeFigure) (f)).getChildren())) {\r\n                                return true;\r\n                            }\r\n                        }\r\n\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n    }\r\n}'),(1709,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,591,'org.jhotdraw.samples.svg.gui.LinkToolBar',5736,'org.jhotdraw.samples.svg.gui.LinkToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}'),(1710,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,595,'org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer',5773,'org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)',0,'public SelectionComponentDisplayer(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if ((editor.getActiveView()) != null) {\r\n        DrawingView view = editor.getActiveView();\r\n        view.addPropertyChangeListener(this);\r\n        view.addFigureSelectionListener(this);\r\n    }\r\n    editor.addPropertyChangeListener(this);\r\n    updateVisibility();\r\n}'),(1711,'FigureSelectionEvent evt','org.jhotdraw.draw.FigureSelectionEvent',179,595,'org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer',5776,'org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)',0,'public void selectionChanged(FigureSelectionEvent evt) {\r\n    updateVisibility();\r\n}'),(1712,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,596,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon',5780,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1713,'AttributeKey<Double> opacityKey','org.jhotdraw.draw.AttributeKey',109,596,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon',5780,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1714,'AttributeKey<Color> fillColorKey','org.jhotdraw.draw.AttributeKey',109,596,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon',5780,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1715,'AttributeKey<Color> strokeColorKey','org.jhotdraw.draw.AttributeKey',109,596,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon',5780,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)',0,'/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * 		The drawing editor.\r\n * @param opacityKey\r\n * 		The opacityKey of the default attribute\r\n * @param imageLocation\r\n * 		the icon image\r\n * @param fillShape\r\n * 		The shape to be drawn with the fillColor of the default\r\n * 		attribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1716,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,596,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon',5781,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)',0,'public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1717,'AttributeKey<Double> opacityKey','org.jhotdraw.draw.AttributeKey',109,596,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon',5781,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)',0,'public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1718,'AttributeKey<Color> fillColorKey','org.jhotdraw.draw.AttributeKey',109,596,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon',5781,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)',0,'public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1719,'AttributeKey<Color> strokeColorKey','org.jhotdraw.draw.AttributeKey',109,596,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon',5781,'org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)',0,'public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}'),(1720,'DrawingEditor newValue','org.jhotdraw.draw.DrawingEditor',169,598,'org.jhotdraw.samples.svg.gui.StrokeToolBar',5790,'org.jhotdraw.samples.svg.gui.StrokeToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)',0,'@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}'),(1721,'DrawingEditor editor','org.jhotdraw.draw.DrawingEditor',169,602,'org.jhotdraw.samples.svg.gui.ToolsToolBar',5820,'org.jhotdraw.samples.svg.gui.ToolsToolBar.createSelectionActions(org.jhotdraw.draw.DrawingEditor)',0,'public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}'),(1722,'DrawingView view','org.jhotdraw.draw.DrawingView',171,604,'org.jhotdraw.samples.svg.gui.ViewToolBar',5840,'org.jhotdraw.samples.svg.gui.ViewToolBar.setView(org.jhotdraw.draw.DrawingView)',0,'public void setView(DrawingView view) {\r\n    this.view = view;\r\n    prefs = Preferences.userNodeForPackage(getClass());\r\n    GridConstrainer constrainer = ((GridConstrainer) (view.getVisibleConstrainer()));\r\n    constrainer.setHeight(prefs.getDouble(\"view.gridSize\", 8.0));\r\n    constrainer.setWidth(prefs.getDouble(\"view.gridSize\", 8.0));\r\n}'),(1723,'Drawing drawing','org.jhotdraw.draw.Drawing',168,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5914,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(1724,'Drawing drawing','org.jhotdraw.draw.Drawing',168,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5917,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)',0,'public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing.getChildren());\r\n}'),(1725,'Drawing drawing','org.jhotdraw.draw.Drawing',168,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5918,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.awt.geom.AffineTransform,java.awt.Dimension)',0,'/**\r\n * Writes the drawing to the specified output stream.\r\n * This method applies the specified drawingTransform to the drawing, and draws\r\n * it on an image of the specified getChildCount.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    write(out, drawing.getChildren(), drawingTransform, imageSize);\r\n}'),(1726,'Drawing drawing','org.jhotdraw.draw.Drawing',168,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5910,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)',0,'public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    write(buf, figures);\r\n    return new InputStreamTransferable(new DataFlavor(\"text/html\", \"HTML Image Map\"), buf.toByteArray());\r\n}'),(1727,'Figure f','org.jhotdraw.draw.Figure',174,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5920,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)',0,'protected void writeElement(IXMLElement parent, Figure f) throws IOException {\r\n    if (f instanceof SVGEllipseFigure) {\r\n        writeEllipseElement(parent, ((SVGEllipseFigure) (f)));\r\n    } else\r\n        if (f instanceof SVGGroupFigure) {\r\n            writeGElement(parent, ((SVGGroupFigure) (f)));\r\n        } else\r\n            if (f instanceof SVGImageFigure) {\r\n                writeImageElement(parent, ((SVGImageFigure) (f)));\r\n            } else\r\n                if (f instanceof SVGPathFigure) {\r\n                    SVGPathFigure path = ((SVGPathFigure) (f));\r\n                    if ((path.getChildCount()) == 1) {\r\n                        BezierFigure bezier = ((BezierFigure) (path.getChild(0)));\r\n                        boolean isLinear = true;\r\n                        for (int i = 0, n = bezier.getNodeCount(); i < n; i++) {\r\n                            if ((bezier.getNode(i).getMask()) != 0) {\r\n                                isLinear = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isLinear) {\r\n                            if (bezier.isClosed()) {\r\n                                writePolygonElement(parent, path);\r\n                            } else {\r\n                                if ((bezier.getNodeCount()) == 2) {\r\n                                    writeLineElement(parent, path);\r\n                                } else {\r\n                                    writePolylineElement(parent, path);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            writePathElement(parent, path);\r\n                        }\r\n                    } else {\r\n                        writePathElement(parent, path);\r\n                    }\r\n                } else\r\n                    if (f instanceof SVGRectFigure) {\r\n                        writeRectElement(parent, ((SVGRectFigure) (f)));\r\n                    } else\r\n                        if (f instanceof SVGTextFigure) {\r\n                            writeTextElement(parent, ((SVGTextFigure) (f)));\r\n                        } else\r\n                            if (f instanceof SVGTextAreaFigure) {\r\n                                writeTextAreaElement(parent, ((SVGTextAreaFigure) (f)));\r\n                            } else {\r\n                                System.out.println((\"Unable to write: \" + f));\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}'),(1728,'SVGFigure f','org.jhotdraw.samples.svg.figures.SVGFigure',561,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5919,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeCircleAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.geom.Ellipse2D$Double)',0,'/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and ellipse.\r\n *\r\n * @return Returns true, if the circle is inside of the image bounds.\r\n */\r\nprivate boolean writeCircleAttributes(IXMLElement elem, SVGFigure f, Ellipse2D.Double ellipse) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    if ((((t.getType()) & ((AffineTransform.TYPE_UNIFORM_SCALE) | (AffineTransform.TYPE_TRANSLATION))) == (t.getType())) && ((ellipse.width) == (ellipse.height))) {\r\n        Point2D.Double start = new Point2D.Double(ellipse.x, ellipse.y);\r\n        Point2D.Double end = new Point2D.Double(((ellipse.x) + (ellipse.width)), ((ellipse.y) + (ellipse.height)));\r\n        t.transform(start, start);\r\n        t.transform(end, end);\r\n        ellipse.x = Math.min(start.x, end.x);\r\n        ellipse.y = Math.min(start.y, end.y);\r\n        ellipse.width = Math.abs(((start.x) - (end.x)));\r\n        ellipse.height = Math.abs(((start.y) - (end.y)));\r\n        elem.setAttribute(\"shape\", \"circle\");\r\n        elem.setAttribute(\"coords\", ((((((int) ((ellipse.x) + ((ellipse.width) / 2.0))) + \",\") + ((int) ((ellipse.y) + ((ellipse.height) / 2.0)))) + \",\") + ((int) ((ellipse.width) / 2.0))));\r\n        writeHrefAttribute(elem, f);\r\n        return bounds.intersects(ellipse.getBounds());\r\n    } else {\r\n        return writePolyAttributes(elem, f, ((Shape) (ellipse)));\r\n    }\r\n}'),(1729,'SVGFigure f','org.jhotdraw.samples.svg.figures.SVGFigure',561,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5930,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeRectAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.geom.Rectangle2D$Double)',0,'/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and rectangle.\r\n *\r\n * @return Returns true, if the rect is inside of the image bounds.\r\n */\r\nprivate boolean writeRectAttributes(IXMLElement elem, SVGFigure f, Rectangle2D.Double rect) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    if (((t.getType()) & ((AffineTransform.TYPE_UNIFORM_SCALE) | (AffineTransform.TYPE_TRANSLATION))) == (t.getType())) {\r\n        Point2D.Double start = new Point2D.Double(rect.x, rect.y);\r\n        Point2D.Double end = new Point2D.Double(((rect.x) + (rect.width)), ((rect.y) + (rect.height)));\r\n        t.transform(start, start);\r\n        t.transform(end, end);\r\n        Rectangle r = new Rectangle(((int) (Math.min(start.x, end.x))), ((int) (Math.min(start.y, end.y))), ((int) (Math.abs(((start.x) - (end.x))))), ((int) (Math.abs(((start.y) - (end.y))))));\r\n        elem.setAttribute(\"shape\", \"rect\");\r\n        elem.setAttribute(\"coords\", (((((((r.x) + \",\") + (r.y)) + \",\") + ((r.x) + (r.width))) + \",\") + ((r.y) + (r.height))));\r\n        writeHrefAttribute(elem, f);\r\n        return bounds.intersects(r);\r\n    } else {\r\n        return writePolyAttributes(elem, f, ((Shape) (rect)));\r\n    }\r\n}'),(1730,'SVGFigure f','org.jhotdraw.samples.svg.figures.SVGFigure',561,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5923,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeHrefAttribute(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure)',0,'private void writeHrefAttribute(IXMLElement elem, SVGFigure f) {\r\n    if (((SVGAttributeKeys.LINK.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n        elem.setAttribute(\"href\", SVGAttributeKeys.LINK.get(f));\r\n        elem.setAttribute(\"title\", SVGAttributeKeys.LINK.get(f));\r\n        elem.setAttribute(\"alt\", SVGAttributeKeys.LINK.get(f));\r\n        if (((SVGAttributeKeys.LINK_TARGET.get(f)) != null) && ((SVGAttributeKeys.LINK_TARGET.get(f).trim().length()) > 0)) {\r\n            elem.setAttribute(\"target\", SVGAttributeKeys.LINK_TARGET.get(f));\r\n        }\r\n    } else {\r\n        elem.setAttribute(\"nohref\", \"true\");\r\n    }\r\n}'),(1731,'SVGFigure f','org.jhotdraw.samples.svg.figures.SVGFigure',561,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5927,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolyAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.Shape)',0,'/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and shape.\r\n *\r\n * @return Returns true, if the polygon is inside of the image bounds.\r\n */\r\nprivate boolean writePolyAttributes(IXMLElement elem, SVGFigure f, Shape shape) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    StringBuilder buf = new StringBuilder();\r\n    float[] coords = new float[6];\r\n    GeneralPath path = new GeneralPath();\r\n    for (PathIterator i = shape.getPathIterator(t, 1.5F); !(i.isDone()); i.next()) {\r\n        switch (i.currentSegment(coords)) {\r\n            case PathIterator.SEG_MOVETO :\r\n                if ((buf.length()) != 0) {\r\n                    throw new IllegalArgumentException((\"Illegal shape \" + shape));\r\n                }\r\n                if ((buf.length()) != 0) {\r\n                    buf.append(,);\r\n                }\r\n                buf.append(((int) (coords[0])));\r\n                buf.append(,);\r\n                buf.append(((int) (coords[1])));\r\n                path.moveTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_LINETO :\r\n                if ((buf.length()) != 0) {\r\n                    buf.append(,);\r\n                }\r\n                buf.append(((int) (coords[0])));\r\n                buf.append(,);\r\n                buf.append(((int) (coords[1])));\r\n                path.lineTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_CLOSE :\r\n                path.closePath();\r\n                break;\r\n            default :\r\n                throw new InternalError((\"Illegal segment type \" + (i.currentSegment(coords))));\r\n        }\r\n    }\r\n    elem.setAttribute(\"shape\", \"poly\");\r\n    elem.setAttribute(\"coords\", buf.toString());\r\n    writeHrefAttribute(elem, f);\r\n    return path.intersects(new Rectangle2D.Float(bounds.x, bounds.y, bounds.width, bounds.height));\r\n}'),(1732,'SVGPathFigure f','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5926,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePathElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'private void writePathElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    GrowStroke growStroke = new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f))));\r\n    BasicStroke basicStroke = new BasicStroke(((float) (AttributeKeys.getStrokeTotalWidth(f))));\r\n    for (Figure child : f.getChildren()) {\r\n        SVGBezierFigure bezier = ((SVGBezierFigure) (child));\r\n        IXMLElement elem = parent.createElement(\"area\");\r\n        if (bezier.isClosed()) {\r\n            writePolyAttributes(elem, f, growStroke.createStrokedShape(bezier.getBezierPath()));\r\n        } else {\r\n            writePolyAttributes(elem, f, basicStroke.createStrokedShape(bezier.getBezierPath()));\r\n        }\r\n        parent.addChild(elem);\r\n    }\r\n}'),(1733,'SVGPathFigure f','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5928,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolygonElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'private void writePolygonElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(f.getChild(0).getBezierPath()))) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(1734,'SVGPathFigure f','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5929,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolylineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'private void writePolylineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new BasicStroke(((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(f.getChild(0).getBezierPath()))) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(1735,'SVGPathFigure f','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5925,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeLineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'private void writeLineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(new Line2D.Double(f.getStartPoint(), f.getEndPoint())))) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(1736,'SVGRectFigure f','org.jhotdraw.samples.svg.figures.SVGRectFigure',566,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5931,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeRectElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGRectFigure)',0,'private void writeRectElement(IXMLElement parent, SVGRectFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    boolean isContained;\r\n    if (((f.getArcHeight()) == 0) && ((f.getArcWidth()) == 0)) {\r\n        Rectangle2D.Double rect = f.getBounds();\r\n        double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n        rect.x -= grow;\r\n        rect.y -= grow;\r\n        rect.width += grow;\r\n        rect.height += grow;\r\n        isContained = writeRectAttributes(elem, f, rect);\r\n    } else {\r\n        isContained = writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(new RoundRectangle2D.Double(f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getArcWidth(), f.getArcHeight())));\r\n    }\r\n    if (isContained) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(1737,'SVGTextFigure f','org.jhotdraw.samples.svg.figures.SVGTextFigure',570,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5933,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeTextElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextFigure)',0,'private void writeTextElement(IXMLElement parent, SVGTextFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    rect.x -= grow;\r\n    rect.y -= grow;\r\n    rect.width += grow;\r\n    rect.height += grow;\r\n    if (writeRectAttributes(elem, f, rect)) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(1738,'SVGTextAreaFigure f','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure',569,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5932,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextAreaFigure)',0,'private void writeTextAreaElement(IXMLElement parent, SVGTextAreaFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    rect.x -= grow;\r\n    rect.y -= grow;\r\n    rect.width += grow;\r\n    rect.height += grow;\r\n    if (writeRectAttributes(elem, f, rect)) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(1739,'SVGEllipseFigure f','org.jhotdraw.samples.svg.figures.SVGEllipseFigure',560,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5921,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)',0,'private void writeEllipseElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    Rectangle2D.Double r = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    Ellipse2D.Double ellipse = new Ellipse2D.Double(((r.x) - grow), ((r.y) - grow), ((r.width) + grow), ((r.height) + grow));\r\n    if (writeCircleAttributes(elem, f, ellipse)) {\r\n        parent.addChild(elem);\r\n    }\r\n}'),(1740,'SVGGroupFigure f','org.jhotdraw.samples.svg.figures.SVGGroupFigure',562,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5922,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeGElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGGroupFigure)',0,'private void writeGElement(IXMLElement parent, SVGGroupFigure f) throws IOException {\r\n    // Note: Image map elements need to be written from front to back\r\n    for (Figure child : new ReversedList<Figure>(f.getChildren())) {\r\n        writeElement(parent, child);\r\n    }\r\n}'),(1741,'SVGImageFigure f','org.jhotdraw.samples.svg.figures.SVGImageFigure',563,608,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat',5924,'org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeImageElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGImageFigure)',0,'private void writeImageElement(IXMLElement parent, SVGImageFigure f) {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    writeRectAttributes(elem, f, rect);\r\n    parent.addChild(elem);\r\n}'),(1742,'SVGFigureFactory factory','org.jhotdraw.samples.svg.io.SVGFigureFactory',610,612,'org.jhotdraw.samples.svg.io.SVGInputFormat',5948,'org.jhotdraw.samples.svg.io.SVGInputFormat.-init-(org.jhotdraw.samples.svg.io.SVGFigureFactory)',0,'public SVGInputFormat(SVGFigureFactory factory) {\r\n    this.factory = factory;\r\n}'),(1743,'Drawing drawing','org.jhotdraw.draw.Drawing',168,612,'org.jhotdraw.samples.svg.io.SVGInputFormat',5956,'org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}'),(1744,'Drawing drawing','org.jhotdraw.draw.Drawing',168,612,'org.jhotdraw.samples.svg.io.SVGInputFormat',5958,'org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'/**\r\n * This is the main reading method.\r\n *\r\n * @param in\r\n * 		The input stream.\r\n * @param drawing\r\n * 		The drawing to which this method adds figures.\r\n * @param replace\r\n * 		Whether attributes on the drawing object\r\n * 		should by changed by this method. Set this to false, when reading individual\r\n * 		images from the clipboard.\r\n */\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    long start = System.currentTimeMillis();\r\n    this.figures = new LinkedList<Figure>();\r\n    IXMLParser parser;\r\n    try {\r\n        parser = XMLParserFactory.createDefaultXMLParser();\r\n    } catch (Exception ex) {\r\n        InternalError e = new InternalError(\"Unable to instantiate NanoXML Parser\");\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    IXMLReader reader = new StdXMLReader(in);\r\n    parser.setReader(reader);\r\n    try {\r\n        document = ((IXMLElement) (parser.parse()));\r\n    } catch (XMLException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    // Search for the first svg element in the XML document\r\n    // in preorder sequence\r\n    IXMLElement svg = document;\r\n    Stack<Iterator<IXMLElement>> stack = new Stack<Iterator<IXMLElement>>();\r\n    LinkedList<IXMLElement> ll = new LinkedList<IXMLElement>();\r\n    ll.add(document);\r\n    stack.push(ll.iterator());\r\n    while ((!(stack.empty())) && (stack.peek().hasNext())) {\r\n        Iterator<IXMLElement> iter = stack.peek();\r\n        IXMLElement node = iter.next();\r\n        Iterator<IXMLElement> children = ((node.getChildren()) == null) ? null : node.getChildren().iterator();\r\n        if (!(iter.hasNext())) {\r\n            stack.pop();\r\n        }\r\n        if ((children != null) && (children.hasNext())) {\r\n            stack.push(children);\r\n        }\r\n        if ((((node.getName()) != null) && (node.getName().equals(\"svg\"))) && (((node.getNamespace()) == null) || (node.getNamespace().equals(SVGConstants.SVG_NAMESPACE)))) {\r\n            svg = node;\r\n            break;\r\n        }\r\n    } \r\n    if ((((svg.getName()) == null) || (!(svg.getName().equals(\"svg\")))) || (((svg.getNamespace()) != null) && (!(svg.getNamespace().equals(SVGConstants.SVG_NAMESPACE))))) {\r\n        throw new IOException((\"svg element expected: \" + (svg.getName())));\r\n    }\r\n    // long end1 = System.currentTimeMillis();\r\n    // Flatten CSS Styles\r\n    initStorageContext(document);\r\n    flattenStyles(svg);\r\n    // long end2 = System.currentTimeMillis();\r\n    readElement(svg);\r\n    long end = System.currentTimeMillis();\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat elapsed:\" + (end - start)));\r\n    }\r\n    /* if (DEBUG) System.out.println(\"SVGInputFormat read:\"+(end1-start));\n    if (DEBUG) System.out.println(\"SVGInputFormat flatten:\"+(end2-end1));\n    if (DEBUG) System.out.println(\"SVGInputFormat build:\"+(end-end2));\n     */\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n    if (replace) {\r\n        SVGInputFormat.Viewport viewport = viewportStack.firstElement();\r\n        SVGAttributeKeys.VIEWPORT_FILL.basicSet(drawing, SVGAttributeKeys.VIEWPORT_FILL.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_FILL_OPACITY.basicSet(drawing, SVGAttributeKeys.VIEWPORT_FILL_OPACITY.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_HEIGHT.basicSet(drawing, SVGAttributeKeys.VIEWPORT_HEIGHT.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_WIDTH.basicSet(drawing, SVGAttributeKeys.VIEWPORT_WIDTH.get(viewport.attributes));\r\n    }\r\n}'),(1745,'Figure f','org.jhotdraw.draw.Figure',174,612,'org.jhotdraw.samples.svg.io.SVGInputFormat',5969,'org.jhotdraw.samples.svg.io.SVGInputFormat.readGraphicsAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)',0,'/* Reads graphics attributes as listed in\nhttp://www.w3.org/TR/SVGMobile12/feature.html#GraphicsAttribute\n */\r\nprivate void readGraphicsAttributes(IXMLElement elem, Figure f) throws IOException {\r\n    Object value;\r\n    // display\r\n    // Value:  	 inline | block | list-item |\r\n    // run-in | compact | marker |\r\n    // table | inline-table | table-row-group | table-header-group |\r\n    // table-footer-group | table-row | table-column-group | table-column |\r\n    // table-cell | table-caption | none | inherit\r\n    // Initial:  	 inline\r\n    // Applies to:  	 svg , g , switch , a , foreignObject ,\r\n    // graphics elements (including the text content block elements) and text\r\n    // sub-elements (for example, tspan and a )\r\n    // Inherited:  	 no\r\n    // Percentages:  	 N/A\r\n    // Media:  	 all\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readAttribute(elem, \"display\", \"inline\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented display=\" + value));\r\n    }\r\n    // image-rendering\r\n    // Value:  	 auto | optimizeSpeed | optimizeQuality | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	 images\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"image-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented image-rendering=\" + value));\r\n    }\r\n    // pointer-events\r\n    // Value:  	boundingBox | visiblePainted | visibleFill | visibleStroke | visible |\r\n    // painted | fill | stroke | all | none | inherit\r\n    // Initial:  	visiblePainted\r\n    // Applies to:  	graphics elements\r\n    // Inherited:  	yes\r\n    // Percentages:  	N/A\r\n    // Media:  	visual\r\n    // Animatable:  	yes\r\n    // Computed value:  	Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"pointer-events\", \"visiblePainted\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented pointer-events=\" + value));\r\n    }\r\n    // shape-rendering\r\n    // Value:  	 auto | optimizeSpeed | crispEdges |\r\n    // geometricPrecision | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	 shapes\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"shape-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented shape-rendering=\" + value));\r\n    }\r\n    // text-rendering\r\n    // Value:  	 auto | optimizeSpeed | optimizeLegibility |\r\n    // geometricPrecision | inherit\r\n    // Initial:  	 auto\r\n    // Applies to:  	text content block elements\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"text-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented text-rendering=\" + value));\r\n    }\r\n    // vector-effect\r\n    // Value:  	 non-scaling-stroke | none | inherit\r\n    // Initial:  	 none\r\n    // Applies to:  	 graphics elements\r\n    // Inherited:  	 no\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readAttribute(elem, \"vector-effect\", \"none\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented vector-effect=\" + value));\r\n    }\r\n    // visibility\r\n    // Value:  	 visible | hidden | collapse | inherit\r\n    // Initial:  	 visible\r\n    // Applies to:  	 graphics elements (including the text content block\r\n    // elements) and text sub-elements (for example, tspan and a )\r\n    // Inherited:  	 yes\r\n    // Percentages:  	 N/A\r\n    // Media:  	 visual\r\n    // Animatable:  	 yes\r\n    // Computed value:  	 Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"visibility\", null);\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented visibility=\" + value));\r\n    }\r\n}'),(1746,'Drawing drawing','org.jhotdraw.draw.Drawing',168,612,'org.jhotdraw.samples.svg.io.SVGInputFormat',5957,'org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    this.url = file.toURL();\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    this.url = null;\r\n}'),(1747,'Drawing drawing','org.jhotdraw.draw.Drawing',168,612,'org.jhotdraw.samples.svg.io.SVGInputFormat',5959,'org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.net.URL,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(URL url, Drawing drawing, boolean replace) throws IOException {\r\n    this.url = url;\r\n    InputStream in = null;\r\n    try {\r\n        in = url.openStream();\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    this.url = null;\r\n}'),(1748,'Drawing drawing','org.jhotdraw.draw.Drawing',168,612,'org.jhotdraw.samples.svg.io.SVGInputFormat',5955,'org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)',0,'public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = ((InputStream) (t.getTransferData(new DataFlavor(\"image/svg+xml\", \"Image SVG\"))));\r\n        read(in, drawing, false);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}'),(1749,'Figure f','org.jhotdraw.draw.Figure',174,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6047,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)',0,'protected void writeElement(IXMLElement parent, Figure f) throws IOException {\r\n    // Write link attribute as encosing \"a\" element\r\n    if (((SVGAttributeKeys.LINK.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n        IXMLElement aElement = parent.createElement(\"a\");\r\n        aElement.setAttribute(\"xlink:href\", SVGAttributeKeys.LINK.get(f));\r\n        if (((SVGAttributeKeys.LINK_TARGET.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n            aElement.setAttribute(\"target\", SVGAttributeKeys.LINK_TARGET.get(f));\r\n        }\r\n        parent.addChild(aElement);\r\n        parent = aElement;\r\n    }\r\n    // Write the actual element\r\n    if (f instanceof SVGEllipseFigure) {\r\n        SVGEllipseFigure ellipse = ((SVGEllipseFigure) (f));\r\n        if ((ellipse.getWidth()) == (ellipse.getHeight())) {\r\n            writeCircleElement(parent, ellipse);\r\n        } else {\r\n            writeEllipseElement(parent, ellipse);\r\n        }\r\n    } else\r\n        if (f instanceof SVGGroupFigure) {\r\n            writeGElement(parent, ((SVGGroupFigure) (f)));\r\n        } else\r\n            if (f instanceof SVGImageFigure) {\r\n                writeImageElement(parent, ((SVGImageFigure) (f)));\r\n            } else\r\n                if (f instanceof SVGPathFigure) {\r\n                    SVGPathFigure path = ((SVGPathFigure) (f));\r\n                    if ((path.getChildCount()) == 1) {\r\n                        BezierFigure bezier = ((BezierFigure) (path.getChild(0)));\r\n                        boolean isLinear = true;\r\n                        for (int i = 0, n = bezier.getNodeCount(); i < n; i++) {\r\n                            if ((bezier.getNode(i).getMask()) != 0) {\r\n                                isLinear = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isLinear) {\r\n                            if (bezier.isClosed()) {\r\n                                writePolygonElement(parent, path);\r\n                            } else {\r\n                                if ((bezier.getNodeCount()) == 2) {\r\n                                    writeLineElement(parent, path);\r\n                                } else {\r\n                                    writePolylineElement(parent, path);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            writePathElement(parent, path);\r\n                        }\r\n                    } else {\r\n                        writePathElement(parent, path);\r\n                    }\r\n                } else\r\n                    if (f instanceof SVGRectFigure) {\r\n                        writeRectElement(parent, ((SVGRectFigure) (f)));\r\n                    } else\r\n                        if (f instanceof SVGTextFigure) {\r\n                            writeTextElement(parent, ((SVGTextFigure) (f)));\r\n                        } else\r\n                            if (f instanceof SVGTextAreaFigure) {\r\n                                writeTextAreaElement(parent, ((SVGTextAreaFigure) (f)));\r\n                            } else {\r\n                                System.out.println((\"Unable to write: \" + f));\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}'),(1750,'SVGEllipseFigure f','org.jhotdraw.samples.svg.figures.SVGEllipseFigure',560,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6046,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeCircleElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)',0,'protected void writeCircleElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    parent.addChild(createCircle(document, ((f.getX()) + ((f.getWidth()) / 2.0)), ((f.getY()) + ((f.getHeight()) / 2.0)), ((f.getWidth()) / 2.0), f.getAttributes()));\r\n}'),(1751,'SVGEllipseFigure f','org.jhotdraw.samples.svg.figures.SVGEllipseFigure',560,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6048,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)',0,'protected void writeEllipseElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    parent.addChild(createEllipse(document, ((f.getX()) + ((f.getWidth()) / 2.0)), ((f.getY()) + ((f.getHeight()) / 2.0)), ((f.getWidth()) / 2.0), ((f.getHeight()) / 2.0), f.getAttributes()));\r\n}'),(1752,'SVGGroupFigure f','org.jhotdraw.samples.svg.figures.SVGGroupFigure',562,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6050,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeGElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGGroupFigure)',0,'protected void writeGElement(IXMLElement parent, SVGGroupFigure f) throws IOException {\r\n    IXMLElement elem = createG(document, f.getAttributes());\r\n    for (Figure child : f.getChildren()) {\r\n        writeElement(elem, child);\r\n    }\r\n    parent.addChild(elem);\r\n}'),(1753,'SVGImageFigure f','org.jhotdraw.samples.svg.figures.SVGImageFigure',563,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6051,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeImageElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGImageFigure)',0,'protected void writeImageElement(IXMLElement parent, SVGImageFigure f) throws IOException {\r\n    parent.addChild(createImage(document, f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getImageData(), f.getAttributes()));\r\n}'),(1754,'SVGPathFigure f','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6054,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writePathElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'protected void writePathElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0; i < (beziers.length); i++) {\r\n        beziers[i] = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n    }\r\n    parent.addChild(createPath(document, beziers, f.getAttributes()));\r\n}'),(1755,'SVGPathFigure f','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6055,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writePolygonElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'protected void writePolygonElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    LinkedList<Point2D.Double> points = new LinkedList<Point2D.Double>();\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0, n = f.getChildCount(); i < n; i++) {\r\n        BezierPath bezier = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n        for (BezierPath.Node node : bezier) {\r\n            points.add(new Point2D.Double(node.x[0], node.y[0]));\r\n        }\r\n    }\r\n    parent.addChild(createPolygon(document, points.toArray(new Point2D.Double[points.size()]), f.getAttributes()));\r\n}'),(1756,'SVGPathFigure f','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6056,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writePolylineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'protected void writePolylineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    LinkedList<Point2D.Double> points = new LinkedList<Point2D.Double>();\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0, n = f.getChildCount(); i < n; i++) {\r\n        BezierPath bezier = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n        for (BezierPath.Node node : bezier) {\r\n            points.add(new Point2D.Double(node.x[0], node.y[0]));\r\n        }\r\n    }\r\n    parent.addChild(createPolyline(document, points.toArray(new Point2D.Double[points.size()]), f.getAttributes()));\r\n}'),(1757,'SVGPathFigure f','org.jhotdraw.samples.svg.figures.SVGPathFigure',564,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6052,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeLineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)',0,'protected void writeLineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    BezierFigure bezier = ((BezierFigure) (f.getChild(0)));\r\n    parent.addChild(createLine(document, bezier.getNode(0).x[0], bezier.getNode(0).y[0], bezier.getNode(1).x[0], bezier.getNode(1).y[0], f.getAttributes()));\r\n}'),(1758,'SVGRectFigure f','org.jhotdraw.samples.svg.figures.SVGRectFigure',566,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6057,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeRectElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGRectFigure)',0,'protected void writeRectElement(IXMLElement parent, SVGRectFigure f) throws IOException {\r\n    parent.addChild(createRect(document, f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getArcWidth(), f.getArcHeight(), f.getAttributes()));\r\n}'),(1759,'SVGTextFigure f','org.jhotdraw.samples.svg.figures.SVGTextFigure',570,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6060,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeTextElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextFigure)',0,'protected void writeTextElement(IXMLElement parent, SVGTextFigure f) throws IOException {\r\n    DefaultStyledDocument styledDoc = new DefaultStyledDocument();\r\n    try {\r\n        styledDoc.insertString(0, f.getText(), null);\r\n    } catch (BadLocationException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    parent.addChild(createText(document, f.getCoordinates(), f.getRotates(), styledDoc, f.getAttributes()));\r\n}'),(1760,'SVGTextAreaFigure f','org.jhotdraw.samples.svg.figures.SVGTextAreaFigure',569,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6059,'org.jhotdraw.samples.svg.io.SVGOutputFormat.writeTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextAreaFigure)',0,'protected void writeTextAreaElement(IXMLElement parent, SVGTextAreaFigure f) throws IOException {\r\n    DefaultStyledDocument styledDoc = new DefaultStyledDocument();\r\n    try {\r\n        styledDoc.insertString(0, f.getText(), null);\r\n    } catch (BadLocationException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    Rectangle2D.Double bounds = f.getBounds();\r\n    parent.addChild(createTextArea(document, bounds.x, bounds.y, bounds.width, bounds.height, styledDoc, f.getAttributes()));\r\n}'),(1761,'Drawing drawing','org.jhotdraw.draw.Drawing',168,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6039,'org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)',0,'public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}'),(1762,'Drawing drawing','org.jhotdraw.draw.Drawing',168,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6040,'org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)',0,'public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing, drawing.getChildren());\r\n}'),(1763,'Drawing drawing','org.jhotdraw.draw.Drawing',168,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6041,'org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List)',0,'/**\r\n * All other write methods delegate their work to here.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures) throws IOException {\r\n    document = new XMLElement(\"svg\", SVGConstants.SVG_NAMESPACE);\r\n    document.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\r\n    document.setAttribute(\"version\", \"1.2\");\r\n    document.setAttribute(\"baseProfile\", \"tiny\");\r\n    writeViewportAttributes(document, drawing.getAttributes());\r\n    initStorageContext(document);\r\n    defs = new XMLElement(\"defs\");\r\n    document.addChild(defs);\r\n    for (Figure f : figures) {\r\n        writeElement(document, f);\r\n    }\r\n    // Write XML prolog\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(out, \"UTF-8\"));\r\n    writer.println(\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\");\r\n    // Write XML content\r\n    XMLWriter xmlWriter = new XMLWriter(writer);\r\n    xmlWriter.write(document, isPrettyPrint);\r\n    // Flush writer\r\n    writer.flush();\r\n}'),(1764,'Drawing drawing','org.jhotdraw.draw.Drawing',168,613,'org.jhotdraw.samples.svg.io.SVGOutputFormat',6026,'org.jhotdraw.samples.svg.io.SVGOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)',0,'public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    write(buf, drawing, figures);\r\n    return new InputStreamTransferable(new DataFlavor(SVGConstants.SVG_MIMETYPE, \"Image SVG\"), buf.toByteArray());\r\n}'),(1765,'Drawing drawing','org.jhotdraw.draw.Drawing',168,614,'org.jhotdraw.samples.svg.io.SVGZInputFormat',6065,'org.jhotdraw.samples.svg.io.SVGZInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)',0,'@Override\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream bin = (in instanceof BufferedInputStream) ? ((BufferedInputStream) (in)) : new BufferedInputStream(in);\r\n    bin.mark(2);\r\n    int magic = ((bin.read()) & 255) | (((bin.read()) & 255) << 8);\r\n    bin.reset();\r\n    if (magic == (GZIPInputStream.GZIP_MAGIC)) {\r\n        super.read(new GZIPInputStream(bin), drawing, replace);\r\n    } else {\r\n        super.read(bin, drawing, replace);\r\n    }\r\n}'),(1766,'Drawing drawing','org.jhotdraw.draw.Drawing',168,615,'org.jhotdraw.samples.svg.io.SVGZOutputFormat',6069,'org.jhotdraw.samples.svg.io.SVGZOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)',0,'@Override\r\npublic void write(OutputStream out, Drawing drawing) throws IOException {\r\n    GZIPOutputStream gout = new GZIPOutputStream(out);\r\n    super.write(gout, drawing, drawing.getChildren());\r\n    gout.finish();\r\n}'),(1767,'Application app','org.jhotdraw.app.Application',3,617,'org.jhotdraw.samples.teddy.FindDialog',6077,'org.jhotdraw.samples.teddy.FindDialog.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates new form FindDialog\r\n */\r\npublic FindDialog(Application app) {\r\n    this(null, false);\r\n    this.app = app;\r\n}'),(1768,'Application a','org.jhotdraw.app.Application',3,620,'org.jhotdraw.samples.teddy.TeddyApplicationModel',6104,'org.jhotdraw.samples.teddy.TeddyApplicationModel.initApplication(org.jhotdraw.app.Application)',0,'@Override\r\npublic void initApplication(Application a) {\r\n    putAction(FindAction.ID, new FindAction(a));\r\n    putAction(ToggleLineWrapAction.ID, new ToggleLineWrapAction(a));\r\n    putAction(ToggleStatusBarAction.ID, new ToggleStatusBarAction(a));\r\n    putAction(ToggleLineNumbersAction.ID, new ToggleLineNumbersAction(a));\r\n    putAction(PrintAction.ID, null);\r\n}'),(1769,'Application a','org.jhotdraw.app.Application',3,620,'org.jhotdraw.samples.teddy.TeddyApplicationModel',6105,'org.jhotdraw.samples.teddy.TeddyApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\npublic void initView(Application a, View p) {\r\n}'),(1770,'View p','org.jhotdraw.app.View',15,620,'org.jhotdraw.samples.teddy.TeddyApplicationModel',6105,'org.jhotdraw.samples.teddy.TeddyApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\npublic void initView(Application a, View p) {\r\n}'),(1771,'Application a','org.jhotdraw.app.Application',3,620,'org.jhotdraw.samples.teddy.TeddyApplicationModel',6102,'org.jhotdraw.samples.teddy.TeddyApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\npublic List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.teddy.Labels\");\r\n    JMenu m;\r\n    JCheckBoxMenuItem cbmi;\r\n    mb.add(createEditMenu(a, p));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineWrapAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineWrapAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineNumbersAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineNumbersAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleStatusBarAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleStatusBarAction.ID));\r\n    m.add(cbmi);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(1772,'View p','org.jhotdraw.app.View',15,620,'org.jhotdraw.samples.teddy.TeddyApplicationModel',6102,'org.jhotdraw.samples.teddy.TeddyApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'@Override\r\npublic List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.teddy.Labels\");\r\n    JMenu m;\r\n    JCheckBoxMenuItem cbmi;\r\n    mb.add(createEditMenu(a, p));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineWrapAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineWrapAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineNumbersAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineNumbersAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleStatusBarAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleStatusBarAction.ID));\r\n    m.add(cbmi);\r\n    mb.add(m);\r\n    return mb;\r\n}'),(1773,'Application app','org.jhotdraw.app.Application',3,620,'org.jhotdraw.samples.teddy.TeddyApplicationModel',6103,'org.jhotdraw.samples.teddy.TeddyApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class returns an empty list - we dont want toolbars in a text editor.\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    return Collections.emptyList();\r\n}'),(1774,'View p','org.jhotdraw.app.View',15,620,'org.jhotdraw.samples.teddy.TeddyApplicationModel',6103,'org.jhotdraw.samples.teddy.TeddyApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)',0,'/**\r\n * Creates toolbars for the application.\r\n * This class returns an empty list - we dont want toolbars in a text editor.\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    return Collections.emptyList();\r\n}'),(1775,'Application app','org.jhotdraw.app.Application',3,623,'org.jhotdraw.samples.teddy.action.FindAction',6148,'org.jhotdraw.samples.teddy.action.FindAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic FindAction(Application app) {\r\n    this.app = app;\r\n    labels.configureAction(this, FindAction.ID);\r\n}'),(1776,'Application app','org.jhotdraw.app.Application',3,624,'org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction',6151,'org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleLineNumbersAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleLineNumbersAction.ID);\r\n    setPropertyName(\"lineNumbersVisible\");\r\n}'),(1777,'Application app','org.jhotdraw.app.Application',3,625,'org.jhotdraw.samples.teddy.action.ToggleLineWrapAction',6155,'org.jhotdraw.samples.teddy.action.ToggleLineWrapAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleLineWrapAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleLineWrapAction.ID);\r\n    setPropertyName(\"lineWrap\");\r\n}'),(1778,'Application app','org.jhotdraw.app.Application',3,626,'org.jhotdraw.samples.teddy.action.ToggleStatusBarAction',6159,'org.jhotdraw.samples.teddy.action.ToggleStatusBarAction.-init-(org.jhotdraw.app.Application)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleStatusBarAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleStatusBarAction.ID);\r\n    setPropertyName(\"statusBarVisible\");\r\n}'),(1779,'MatchType matchType','org.jhotdraw.samples.teddy.regex.MatchType',628,629,'org.jhotdraw.samples.teddy.regex.Matcher',6171,'org.jhotdraw.samples.teddy.regex.Matcher.-init-(javax.swing.text.Document,java.lang.String,boolean,org.jhotdraw.samples.teddy.regex.MatchType)',0,'/**\r\n * Creates a new instance of Matcher\r\n *\r\n * @param document\r\n * 		The document to be examined\r\n * @param findString\r\n * 		The string to be searched.\r\n * @param matchCase\r\n * 		Set to true for case sensitive search.\r\n * @param matchType\r\n * 		Sets the match type.\r\n */\r\npublic Matcher(Document document, String findString, boolean matchCase, MatchType matchType) {\r\n    this.document = document;\r\n    this.findString = findString;\r\n    startIndex = 0;\r\n    // Convert to chars for efficiency\r\n    if (matchCase) {\r\n        matchLowerCase = matchUpperCase = findString.toCharArray();\r\n    } else {\r\n        matchUpperCase = findString.toUpperCase().toCharArray();\r\n        matchLowerCase = findString.toLowerCase().toCharArray();\r\n    }\r\n    this.matchType = matchType;\r\n}'),(1780,'NumberedViewFactory viewFactory','org.jhotdraw.samples.teddy.text.NumberedViewFactory',632,631,'org.jhotdraw.samples.teddy.text.NumberedParagraphView',6184,'org.jhotdraw.samples.teddy.text.NumberedParagraphView.-init-(javax.swing.text.Element,org.jhotdraw.samples.teddy.text.NumberedViewFactory)',0,'public NumberedParagraphView(Element e, NumberedViewFactory viewFactory) {\r\n    super(e);\r\n    this.viewFactory = viewFactory;\r\n}'),(1781,'ColorFormatter.Format outputFormat','org.jhotdraw.text.ColorFormatter$Format',633,634,'org.jhotdraw.text.ColorFormatter',6192,'org.jhotdraw.text.ColorFormatter.-init-(org.jhotdraw.text.ColorFormatter$Format,boolean,boolean)',0,'public ColorFormatter(ColorFormatter.Format outputFormat, boolean allowsNullValue, boolean isAdaptive) {\r\n    this.outputFormat = outputFormat;\r\n    this.allowsNullValue = allowsNullValue;\r\n    this.isAdaptive = isAdaptive;\r\n    // Retrieve last used input format from preferences\r\n    prefs = Preferences.userNodeForPackage(getClass());\r\n    try {\r\n        lastUsedInputFormat = ColorFormatter.Format.valueOf(prefs.get(\"ColorFormatter.lastUsedInputFormat\", ColorFormatter.Format.RGB_HEX.name()));\r\n    } catch (IllegalArgumentException e) {\r\n        // leave lastUsedInputFormat as null\r\n    }\r\n    if (isAdaptive && ((lastUsedInputFormat) != null)) {\r\n        this.outputFormat = lastUsedInputFormat;\r\n    }\r\n    setOverwriteMode(false);\r\n}'),(1782,'ColorFormatter.Format newValue','org.jhotdraw.text.ColorFormatter$Format',633,634,'org.jhotdraw.text.ColorFormatter',6202,'org.jhotdraw.text.ColorFormatter.setOutputFormat(org.jhotdraw.text.ColorFormatter$Format)',0,'/**\r\n * Sets the output format.\r\n *\r\n * @param newValue\r\n * 		\r\n */\r\npublic void setOutputFormat(ColorFormatter.Format newValue) {\r\n    if (newValue == null) {\r\n        throw new NullPointerException(\"outputFormat may not be null\");\r\n    }\r\n    outputFormat = newValue;\r\n}'),(1783,'ColorFormatter.Format newValue','org.jhotdraw.text.ColorFormatter$Format',633,634,'org.jhotdraw.text.ColorFormatter',6201,'org.jhotdraw.text.ColorFormatter.setLastUsedInputFormat(org.jhotdraw.text.ColorFormatter$Format)',0,'private void setLastUsedInputFormat(ColorFormatter.Format newValue) {\r\n    lastUsedInputFormat = newValue;\r\n    if (isAdaptive) {\r\n        outputFormat = lastUsedInputFormat;\r\n    }\r\n    prefs.put(\"ColorFormatter.lastUsedInputFormat\", newValue.name());\r\n}'),(1784,'ColorFormatter.Format outputFormat','org.jhotdraw.text.ColorFormatter$Format',633,634,'org.jhotdraw.text.ColorFormatter',6194,'org.jhotdraw.text.ColorFormatter.createFormatterFactory(org.jhotdraw.text.ColorFormatter$Format,boolean,boolean)',0,'/**\r\n * Convenience method for creating a formatter factory with a\r\n * 8@code ColorFormatter}.\r\n */\r\npublic static JFormattedTextField.AbstractFormatterFactory createFormatterFactory(ColorFormatter.Format outputFormat, boolean allowsNullValue, boolean isAdaptive) {\r\n    return new DefaultFormatterFactory(new ColorFormatter(outputFormat, allowsNullValue, isAdaptive));\r\n}'),(1785,'DOMStorable o','org.jhotdraw.xml.DOMStorable',652,649,'org.jhotdraw.xml.DOMFactory',6358,'org.jhotdraw.xml.DOMFactory.getName(org.jhotdraw.xml.DOMStorable)',0,'/**\r\n * Returns the element name for the specified object.\r\n * Note: The element names \"string\", \"int\", \"float\", \"long\", \"double\",\r\n * \"boolean\", \"enum\" and \"null\"  are reserved and must not be returned by\r\n * this operation.\r\n */\r\npublic String getName(DOMStorable o);'),(1786,'DOMOutput out','org.jhotdraw.xml.DOMOutput',651,652,'org.jhotdraw.xml.DOMStorable',6393,'org.jhotdraw.xml.DOMStorable.write(org.jhotdraw.xml.DOMOutput)',0,'public void write(DOMOutput out) throws IOException;'),(1787,'DOMInput in','org.jhotdraw.xml.DOMInput',650,652,'org.jhotdraw.xml.DOMStorable',6392,'org.jhotdraw.xml.DOMStorable.read(org.jhotdraw.xml.DOMInput)',0,'public void read(DOMInput in) throws IOException;'),(1788,'DOMStorable prototype','org.jhotdraw.xml.DOMStorable',652,653,'org.jhotdraw.xml.DefaultDOMFactory',6397,'org.jhotdraw.xml.DefaultDOMFactory.addStorable(java.lang.String,org.jhotdraw.xml.DOMStorable)',0,'/**\r\n * Adds a DOMStorable prototype to the DOMFactory.\r\n */\r\npublic void addStorable(String name, DOMStorable prototype) {\r\n    DefaultDOMFactory.nameToPrototypeMap.put(name, prototype);\r\n    DefaultDOMFactory.classToNameMap.put(prototype.getClass(), name);\r\n}'),(1789,'DOMStorable o','org.jhotdraw.xml.DOMStorable',652,653,'org.jhotdraw.xml.DefaultDOMFactory',6403,'org.jhotdraw.xml.DefaultDOMFactory.getName(org.jhotdraw.xml.DOMStorable)',0,'public String getName(DOMStorable o) {\r\n    String name = DefaultDOMFactory.classToNameMap.get(o.getClass());\r\n    if (name == null) {\r\n        throw new IllegalArgumentException((((\"Storable class not known to factory. Storable:\" + o) + \" Factory:\") + (this.getClass())));\r\n    }\r\n    return name;\r\n}'),(1790,'DOMFactory factory','org.jhotdraw.xml.DOMFactory',649,654,'org.jhotdraw.xml.JavaxDOMInput',6404,'org.jhotdraw.xml.JavaxDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.InputStream)',0,'public JavaxDOMInput(DOMFactory factory, InputStream in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        document = JavaxDOMInput.getBuilder().parse(in);\r\n        current = document;\r\n    } catch (SAXException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(1791,'DOMFactory factory','org.jhotdraw.xml.DOMFactory',649,654,'org.jhotdraw.xml.JavaxDOMInput',6405,'org.jhotdraw.xml.JavaxDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.Reader)',0,'public JavaxDOMInput(DOMFactory factory, Reader in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        document = JavaxDOMInput.getBuilder().parse(new InputSource(in));\r\n        current = document;\r\n    } catch (SAXException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}'),(1792,'DOMFactory factory','org.jhotdraw.xml.DOMFactory',649,655,'org.jhotdraw.xml.JavaxDOMOutput',6424,'org.jhotdraw.xml.JavaxDOMOutput.-init-(org.jhotdraw.xml.DOMFactory)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic JavaxDOMOutput(DOMFactory factory) throws IOException {\r\n    this.factory = factory;\r\n}'),(1793,'DOMStorable o','org.jhotdraw.xml.DOMStorable',652,655,'org.jhotdraw.xml.JavaxDOMOutput',6445,'org.jhotdraw.xml.JavaxDOMOutput.writeStorable(org.jhotdraw.xml.DOMStorable)',0,'private void writeStorable(DOMStorable o) throws IOException {\r\n    String tagName = factory.getName(o);\r\n    if (tagName == null)\r\n        throw new IllegalArgumentException((\"no tag name for:\" + o));\r\n\r\n    openElement(tagName);\r\n    if (objectids.containsKey(o)) {\r\n        addAttribute(\"ref\", ((String) (objectids.get(o))));\r\n    } else {\r\n        String id = Integer.toString(objectids.size(), 16);\r\n        objectids.put(o, id);\r\n        addAttribute(\"id\", id);\r\n        o.write(this);\r\n    }\r\n    closeElement();\r\n}'),(1794,'DOMFactory factory','org.jhotdraw.xml.DOMFactory',649,656,'org.jhotdraw.xml.NanoXMLDOMInput',6446,'org.jhotdraw.xml.NanoXMLDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.InputStream)',0,'public NanoXMLDOMInput(DOMFactory factory, InputStream in) throws IOException {\r\n    this(factory, new InputStreamReader(in, \"UTF8\"));\r\n}'),(1795,'DOMFactory factory','org.jhotdraw.xml.DOMFactory',649,656,'org.jhotdraw.xml.NanoXMLDOMInput',6447,'org.jhotdraw.xml.NanoXMLDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.Reader)',0,'public NanoXMLDOMInput(DOMFactory factory, Reader in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        IXMLParser parser = XMLParserFactory.createDefaultXMLParser();\r\n        IXMLReader reader = new StdXMLReader(in);\r\n        parser.setReader(reader);\r\n        document = new XMLElement();\r\n        current = ((XMLElement) (parser.parse()));\r\n        if ((current) != null) {\r\n            document.addChild(current);\r\n        }\r\n        current = document;\r\n    } catch (Exception e) {\r\n        IOException error = new IOException(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}'),(1796,'DOMFactory factory','org.jhotdraw.xml.DOMFactory',649,657,'org.jhotdraw.xml.NanoXMLDOMOutput',6464,'org.jhotdraw.xml.NanoXMLDOMOutput.-init-(org.jhotdraw.xml.DOMFactory)',0,'/**\r\n * Creates a new instance.\r\n */\r\npublic NanoXMLDOMOutput(DOMFactory factory) {\r\n    this.factory = factory;\r\n    objectids = new HashMap<Object, String>();\r\n    document = new XMLElement();// new HashMap(), false, false);\r\n\r\n    current = document;\r\n    stack = new Stack<XMLElement>();\r\n    stack.push(current);\r\n}'),(1797,'DOMStorable o','org.jhotdraw.xml.DOMStorable',652,657,'org.jhotdraw.xml.NanoXMLDOMOutput',6485,'org.jhotdraw.xml.NanoXMLDOMOutput.writeStorable(org.jhotdraw.xml.DOMStorable)',0,'private XMLElement writeStorable(DOMStorable o) throws IOException {\r\n    String tagName = factory.getName(o);\r\n    if (tagName == null)\r\n        throw new IllegalArgumentException((\"no tag name for:\" + o));\r\n\r\n    openElement(tagName);\r\n    XMLElement element = current;\r\n    if (objectids.containsKey(o)) {\r\n        addAttribute(\"ref\", ((String) (objectids.get(o))));\r\n    } else {\r\n        String id = Integer.toString(objectids.size(), 16);\r\n        objectids.put(o, id);\r\n        addAttribute(\"id\", id);\r\n        o.write(this);\r\n    }\r\n    closeElement();\r\n    return element;\r\n}'),(1798,'DOMStorable o','org.jhotdraw.xml.DOMStorable',652,658,'org.jhotdraw.xml.QuickAndDirtyDOMFactory',6492,'org.jhotdraw.xml.QuickAndDirtyDOMFactory.getName(org.jhotdraw.xml.DOMStorable)',0,'public String getName(DOMStorable o) {\r\n    return escape(o.getClass().getName());\r\n}'),(1799,'StyleManager rm','org.jhotdraw.xml.css.StyleManager',663,660,'org.jhotdraw.xml.css.CSSParser',6501,'org.jhotdraw.xml.css.CSSParser.parse(java.lang.String,org.jhotdraw.xml.css.StyleManager)',0,'public void parse(String css, StyleManager rm) throws IOException {\r\n    parse(new StringReader(css), rm);\r\n}'),(1800,'StyleManager rm','org.jhotdraw.xml.css.StyleManager',663,660,'org.jhotdraw.xml.css.CSSParser',6500,'org.jhotdraw.xml.css.CSSParser.parse(java.io.Reader,org.jhotdraw.xml.css.StyleManager)',0,'public void parse(Reader css, StyleManager rm) throws IOException {\r\n    StreamTokenizer tt = new StreamTokenizer(css);\r\n    tt.resetSyntax();\r\n    tt.wordChars(a, z);\r\n    tt.wordChars(A, Z);\r\n    tt.wordChars(0, 9);\r\n    tt.wordChars((128 + 32), 255);\r\n    tt.whitespaceChars(0,  );\r\n    tt.commentChar(/);\r\n    tt.slashStarComments(true);\r\n    parseStylesheet(tt, rm);\r\n}'),(1801,'StyleManager rm','org.jhotdraw.xml.css.StyleManager',663,660,'org.jhotdraw.xml.css.CSSParser',6505,'org.jhotdraw.xml.css.CSSParser.parseStylesheet(java.io.StreamTokenizer,org.jhotdraw.xml.css.StyleManager)',0,'private void parseStylesheet(StreamTokenizer tt, StyleManager rm) throws IOException {\r\n    while ((tt.nextToken()) != (StreamTokenizer.TT_EOF)) {\r\n        tt.pushBack();\r\n        parseRuleset(tt, rm);\r\n    } \r\n}'),(1802,'StyleManager rm','org.jhotdraw.xml.css.StyleManager',663,660,'org.jhotdraw.xml.css.CSSParser',6503,'org.jhotdraw.xml.css.CSSParser.parseRuleset(java.io.StreamTokenizer,org.jhotdraw.xml.css.StyleManager)',0,'private void parseRuleset(StreamTokenizer tt, StyleManager rm) throws IOException {\r\n    // parse selector list\r\n    List<String> selectors = parseSelectorList(tt);\r\n    if ((tt.nextToken()) != {)\r\n        throw new IOException((\"Ruleset { missing for \" + selectors));\r\n\r\n    Map<String, String> declarations = parseDeclarationMap(tt);\r\n    if ((tt.nextToken()) != })\r\n        throw new IOException((\"Ruleset } missing for \" + selectors));\r\n\r\n    for (String selector : selectors) {\r\n        rm.add(new CSSRule(selector, declarations));\r\n        // System.out.println(\"CSSParser.add(\"+selector+\",\"+declarations);\r\n        /* for (Map.Entry<String,String> entry : declarations.entrySet()) {\n        rm.add(new CSSRule(selector, entry.getKey(), entry.getValue()));\n        }\n         */\r\n    }\r\n}'),(1803,'CSSRule rule','org.jhotdraw.xml.css.CSSRule',662,663,'org.jhotdraw.xml.css.StyleManager',6518,'org.jhotdraw.xml.css.StyleManager.add(org.jhotdraw.xml.css.CSSRule)',0,'public void add(CSSRule rule) {\r\n    rules.add(rule);\r\n}');
/*!40000 ALTER TABLE `parameters` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-11-29  2:51:07
