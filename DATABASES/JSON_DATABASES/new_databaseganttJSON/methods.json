[{"id":1, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public ChartComponentBase(IGanttProject project, UIFacade uiFacade, ZoomManager zoomManager) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myZoomManager = zoomManager;\r\n    myChartViewState = new ChartViewState(project, uiFacade);\r\n    myChartViewState.addStateListener(new ChartViewState.Listener() {\r\n        public void startDateChanged(ChartViewState.ViewStateEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        public void zoomChanged(ZoomEvent e) {\r\n            getImplementation().zoomChanged(e);\r\n        }\r\n    });\r\n    myMouseWheelListener = new ChartComponentBase.MouseWheelListenerBase();\r\n    addMouseListener(getMouseListener());\r\n    addMouseMotionListener(getMouseMotionListener());\r\n    addMouseWheelListener(myMouseWheelListener);\r\n}"},
 {"id":2, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.-init-()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"1() {\r\n}"},
 {"id":3, "name":"-init-(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.-init-(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"2( $anonymous0,  $anonymous1) {\r\n}"},
 {"id":4, "name":"-init-(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.-init-(java.awt.event.MouseEvent)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected MouseInteractionBase(MouseEvent e) {\r\n    myStartX = e.getX();\r\n}"},
 {"id":5, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"private AbstractChartImplementation(ChartModelBase chartModel) {\r\n    myChartModel = chartModel;\r\n}"},
 {"id":6, "name":"addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public void addSelectionListener(ChartSelectionListener listener) {\r\n    getImplementation().addSelectionListener(listener);\r\n}"},
 {"id":7, "name":"canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public IStatus canPaste(ChartSelection selection) {\r\n    return getImplementation().canPaste(selection);\r\n}"},
 {"id":8, "name":"createCopy()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.createCopy()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public Chart createCopy() {\r\n    return new ChartComponentBase.AbstractChartImplementation(getChartModel().createCopy());\r\n}"},
 {"id":9, "name":"createPreviewComponent()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.createPreviewComponent()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected Component createPreviewComponent() {\r\n    return null;\r\n}"},
 {"id":10, "name":"getAdapter(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getAdapter(java.lang.Class)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public Object getAdapter(Class adapter) {\r\n    return null;\r\n}"},
 {"id":11, "name":"getChartModel()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getChartModel()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected abstract ChartModelBase getChartModel();"},
 {"id":12, "name":"getImplementation()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getImplementation()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected abstract ChartComponentBase.AbstractChartImplementation getImplementation();"},
 {"id":13, "name":"getMouseListener()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getMouseListener()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected abstract MouseListener getMouseListener();"},
 {"id":14, "name":"getMouseMotionListener()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getMouseMotionListener()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected abstract MouseMotionListener getMouseMotionListener();"},
 {"id":15, "name":"getOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getOptionGroups()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public GPOptionGroup[] getOptionGroups() {\r\n    return getChartModel().getChartOptionGroups();\r\n}"},
 {"id":16, "name":"getOptionsDialogAction()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getOptionsDialogAction()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public Action getOptionsDialogAction() {\r\n    if ((myOptionsDialogAction) == null) {\r\n        myOptionsDialogAction = new OptionsDialogAction(getOptionGroups(), getUIFacade()) {\r\n            protected Component createPreviewComponent() {\r\n                return ChartComponentBase.this.createPreviewComponent();\r\n            }\r\n        };\r\n    }\r\n    return myOptionsDialogAction;\r\n}"},
 {"id":17, "name":"getSelection()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getSelection()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public ChartSelection getSelection() {\r\n    return getImplementation().getSelection();\r\n}"},
 {"id":18, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getTaskManager()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected TaskManager getTaskManager() {\r\n    return myProject.getTaskManager();\r\n}"},
 {"id":19, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getTimeUnitStack()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected TimeUnitStack getTimeUnitStack() {\r\n    return myProject.getTimeUnitStack();\r\n}"},
 {"id":20, "name":"getUIConfiguration()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getUIConfiguration()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected UIConfiguration getUIConfiguration() {\r\n    return myProject.getUIConfiguration();\r\n}"},
 {"id":21, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getUIFacade()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":22, "name":"getViewState()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getViewState()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public ChartViewState getViewState() {\r\n    return myChartViewState;\r\n}"},
 {"id":23, "name":"getZoomListener()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.getZoomListener()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public ZoomListener getZoomListener() {\r\n    return getImplementation();\r\n}"},
 {"id":24, "name":"paste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public void paste(ChartSelection selection) {\r\n    getImplementation().paste(selection);\r\n}"},
 {"id":25, "name":"removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"public void removeSelectionListener(ChartSelectionListener listener) {\r\n    getImplementation().removeSelectionListener(listener);\r\n}"},
 {"id":26, "name":"setDefaultCursor()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase.setDefaultCursor()", "ownerclassid":"9", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase", "sourcecode":"protected void setDefaultCursor() {\r\n    setCursor(ChartComponentBase.DEFAULT_CURSOR);\r\n}"},
 {"id":27, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.-init-()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public AbstractChartImplementation() {\r\n}"},
 {"id":28, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"private AbstractChartImplementation(ChartModelBase chartModel) {\r\n    myChartModel = chartModel;\r\n}"},
 {"id":29, "name":"addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public void addSelectionListener(ChartSelectionListener listener) {\r\n    mySelectionListeners.add(listener);\r\n}"},
 {"id":30, "name":"beginScrollViewInteraction(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.beginScrollViewInteraction(java.awt.event.MouseEvent)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public void beginScrollViewInteraction(MouseEvent e) {\r\n    setActiveInteraction(new ChartComponentBase.ScrollViewInteraction(e));\r\n}"},
 {"id":31, "name":"canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public IStatus canPaste(ChartSelection selection) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":32, "name":"createCopy()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.createCopy()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public Chart createCopy() {\r\n    return new ChartComponentBase.AbstractChartImplementation(getChartModel().createCopy());\r\n}"},
 {"id":33, "name":"finishInteraction()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.finishInteraction()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public ChartComponentBase.MouseInteraction finishInteraction() {\r\n    try {\r\n        if ((getActiveInteraction()) != null) {\r\n            getActiveInteraction().finish();\r\n        }\r\n        return getActiveInteraction();\r\n    } finally {\r\n        setActiveInteraction(null);\r\n    }\r\n}"},
 {"id":34, "name":"fireSelectionChanged()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.fireSelectionChanged()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"protected void fireSelectionChanged() {\r\n    for (Iterator listeners = mySelectionListeners.iterator(); listeners.hasNext();) {\r\n        ChartSelectionListener nextListener = ((ChartSelectionListener) (listeners.next()));\r\n        nextListener.selectionChanged();\r\n    }\r\n}"},
 {"id":35, "name":"getActiveInteraction()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getActiveInteraction()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public ChartComponentBase.MouseInteraction getActiveInteraction() {\r\n    return myActiveInteraction;\r\n}"},
 {"id":36, "name":"getAdapter(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getAdapter(java.lang.Class)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public Object getAdapter(Class arg0) {\r\n    return null;\r\n}"},
 {"id":37, "name":"getChart(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public BufferedImage getChart(GanttExportSettings settings) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":38, "name":"getChartModel()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getChartModel()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"private ChartModelBase getChartModel() {\r\n    return (myChartModel) == null ? this.getChartModel() : myChartModel;\r\n}"},
 {"id":39, "name":"getEndDate()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getEndDate()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public Date getEndDate() {\r\n    return getChartModel().getEndDate();\r\n}"},
 {"id":40, "name":"getIcon()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getIcon()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public Icon getIcon() {\r\n    return null;\r\n}"},
 {"id":41, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getName()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public String getName() {\r\n    return this.getName();\r\n}"},
 {"id":42, "name":"getOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getOptionGroups()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public GPOptionGroup[] getOptionGroups() {\r\n    return getChartModel().getChartOptionGroups();\r\n}"},
 {"id":43, "name":"getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"// ///////////////////////////////////////////////////////////\r\n// interface Chart\r\npublic RenderedImage getRenderedImage(GanttExportSettings settings) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":44, "name":"getSelection()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getSelection()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public ChartSelection getSelection() {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":45, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getStartDate()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public Date getStartDate() {\r\n    return getChartModel().getStartDate();\r\n}"},
 {"id":46, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.paintComponent(java.awt.Graphics)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public void paintComponent(Graphics g) {\r\n}"},
 {"id":47, "name":"paste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public void paste(ChartSelection selection) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":48, "name":"removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public void removeSelectionListener(ChartSelectionListener listener) {\r\n    mySelectionListeners.remove(listener);\r\n}"},
 {"id":49, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.reset()", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public void reset() {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":50, "name":"setActiveInteraction(net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.setActiveInteraction(net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"protected void setActiveInteraction(ChartComponentBase.MouseInteraction myActiveInteraction) {\r\n    this.myActiveInteraction = myActiveInteraction;\r\n}"},
 {"id":51, "name":"setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public void setTaskManager(TaskManager taskManager) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":52, "name":"zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "ownerclassid":"1", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n    invalidate();\r\n    repaint();\r\n}"},
 {"id":53, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.-init-()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"ChartSelectionImpl() {\r\n}"},
 {"id":54, "name":"cancelClipboardTransaction()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.cancelClipboardTransaction()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"public void cancelClipboardTransaction() {\r\n    isTransactionRunning = false;\r\n}"},
 {"id":55, "name":"commitClipboardTransaction()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.commitClipboardTransaction()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"public void commitClipboardTransaction() {\r\n    isTransactionRunning = false;\r\n}"},
 {"id":56, "name":"getHumanResources()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.getHumanResources()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"public List getHumanResources() {\r\n    return myHumanResourceRO;\r\n}"},
 {"id":57, "name":"getTasks()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.getTasks()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"public List getTasks() {\r\n    return myTasksRO;\r\n}"},
 {"id":58, "name":"isDeletable()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.isDeletable()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"public IStatus isDeletable() {\r\n    return Status.OK_STATUS;\r\n}"},
 {"id":59, "name":"isEmpty()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.isEmpty()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"public boolean isEmpty() {\r\n    return (myTasks.isEmpty()) && (myHumanResources.isEmpty());\r\n}"},
 {"id":60, "name":"startCopyClipboardTransaction()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.startCopyClipboardTransaction()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"public void startCopyClipboardTransaction() {\r\n    if (isTransactionRunning) {\r\n        throw new IllegalStateException(\"Transaction is already running\");\r\n    }\r\n    isTransactionRunning = true;\r\n}"},
 {"id":61, "name":"startMoveClipboardTransaction()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl.startMoveClipboardTransaction()", "ownerclassid":"2", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ChartSelectionImpl", "sourcecode":"public void startMoveClipboardTransaction() {\r\n    if (isTransactionRunning) {\r\n        throw new IllegalStateException(\"Transaction is already running\");\r\n    }\r\n    isTransactionRunning = true;\r\n}"},
 {"id":62, "name":"apply(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction.apply(java.awt.event.MouseEvent)", "ownerclassid":"3", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction", "sourcecode":"abstract void apply(MouseEvent event);"},
 {"id":63, "name":"finish()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction.finish()", "ownerclassid":"3", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction", "sourcecode":"abstract void finish();"},
 {"id":64, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction.paint(java.awt.Graphics)", "ownerclassid":"3", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction", "sourcecode":"void paint(Graphics g);"},
 {"id":65, "name":"-init-(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteractionBase.-init-(java.awt.event.MouseEvent)", "ownerclassid":"4", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteractionBase", "sourcecode":"protected MouseInteractionBase(MouseEvent e) {\r\n    myStartX = e.getX();\r\n}"},
 {"id":66, "name":"getLengthDiff(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteractionBase.getLengthDiff(java.awt.event.MouseEvent)", "ownerclassid":"4", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteractionBase", "sourcecode":"protected float getLengthDiff(MouseEvent event) {\r\n    float diff = getChartModel().calculateLength(myStartX, event.getX(), event.getY());\r\n    return diff;\r\n}"},
 {"id":67, "name":"getStartX()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteractionBase.getStartX()", "ownerclassid":"4", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteractionBase", "sourcecode":"protected int getStartX() {\r\n    return myStartX;\r\n}"},
 {"id":68, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteractionBase.paint(java.awt.Graphics)", "ownerclassid":"4", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteractionBase", "sourcecode":"public void paint(Graphics g) {\r\n}"},
 {"id":69, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase.-init-()", "ownerclassid":"5", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase", "sourcecode":"MouseListenerBase() {\r\n}"},
 {"id":70, "name":"getPopupMenuActions()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase.getPopupMenuActions()", "ownerclassid":"5", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase", "sourcecode":"protected Action[] getPopupMenuActions() {\r\n    return new Action[0];\r\n}"},
 {"id":71, "name":"mouseEntered(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase.mouseEntered(java.awt.event.MouseEvent)", "ownerclassid":"5", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase", "sourcecode":"public void mouseEntered(MouseEvent e) {\r\n    setDefaultCursor();\r\n}"},
 {"id":72, "name":"mouseExited(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase.mouseExited(java.awt.event.MouseEvent)", "ownerclassid":"5", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase", "sourcecode":"public void mouseExited(MouseEvent e) {\r\n    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\r\n}"},
 {"id":73, "name":"mousePressed(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase.mousePressed(java.awt.event.MouseEvent)", "ownerclassid":"5", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase", "sourcecode":"public void mousePressed(MouseEvent e) {\r\n    super.mousePressed(e);\r\n    if ((e.isPopupTrigger()) || ((e.getButton()) == (MouseEvent.BUTTON3))) {\r\n        Action[] actions = getPopupMenuActions();\r\n        if ((actions.length) > 0) {\r\n            getUIFacade().showPopupMenu(this, actions, e.getX(), e.getY());\r\n        }\r\n        return;\r\n    }\r\n    switch (e.getButton()) {\r\n        case MouseEvent.BUTTON1 :\r\n            {\r\n                processLeftButton(e);\r\n                break;\r\n            }\r\n        default :\r\n            {\r\n            }\r\n    }\r\n}"},
 {"id":74, "name":"mouseReleased(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase.mouseReleased(java.awt.event.MouseEvent)", "ownerclassid":"5", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase", "sourcecode":"public void mouseReleased(MouseEvent e) {\r\n    super.mouseReleased(e);\r\n    getImplementation().finishInteraction();\r\n}"},
 {"id":75, "name":"processLeftButton(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase.processLeftButton(java.awt.event.MouseEvent)", "ownerclassid":"5", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseListenerBase", "sourcecode":"protected void processLeftButton(MouseEvent e) {\r\n    getImplementation().beginScrollViewInteraction(e);\r\n}"},
 {"id":76, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseMotionListenerBase.-init-()", "ownerclassid":"6", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseMotionListenerBase", "sourcecode":"MouseMotionListenerBase() {\r\n}"},
 {"id":77, "name":"mouseDragged(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseMotionListenerBase.mouseDragged(java.awt.event.MouseEvent)", "ownerclassid":"6", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseMotionListenerBase", "sourcecode":"public void mouseDragged(MouseEvent e) {\r\n    super.mouseDragged(e);\r\n    ChartComponentBase.MouseInteraction activeInteraction = getImplementation().getActiveInteraction();\r\n    if (activeInteraction != null) {\r\n        activeInteraction.apply(e);\r\n        // myUIFacade.repaint2();\r\n        // e.consume();\r\n        // return;\r\n    }\r\n}"},
 {"id":78, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase.-init-()", "ownerclassid":"7", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase", "sourcecode":"MouseWheelListenerBase() {\r\n}"},
 {"id":79, "name":"fireZoomIn()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase.fireZoomIn()", "ownerclassid":"7", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase", "sourcecode":"private void fireZoomIn() {\r\n    if (myZoomManager.canZoomIn()) {\r\n        myZoomManager.zoomIn();\r\n    }\r\n}"},
 {"id":80, "name":"fireZoomOut()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase.fireZoomOut()", "ownerclassid":"7", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase", "sourcecode":"private void fireZoomOut() {\r\n    if (myZoomManager.canZoomOut()) {\r\n        myZoomManager.zoomOut();\r\n    }\r\n}"},
 {"id":81, "name":"isRotationUp(java.awt.event.MouseWheelEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase.isRotationUp(java.awt.event.MouseWheelEvent)", "ownerclassid":"7", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase", "sourcecode":"private boolean isRotationUp(MouseWheelEvent e) {\r\n    return (e.getWheelRotation()) < 0;\r\n}"},
 {"id":82, "name":"mouseWheelMoved(java.awt.event.MouseWheelEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase.mouseWheelMoved(java.awt.event.MouseWheelEvent)", "ownerclassid":"7", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$MouseWheelListenerBase", "sourcecode":"public void mouseWheelMoved(MouseWheelEvent e) {\r\n    if (isRotationUp(e)) {\r\n        fireZoomOut();\r\n    } else {\r\n        fireZoomIn();\r\n    }\r\n}"},
 {"id":83, "name":"-init-(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ScrollViewInteraction.-init-(java.awt.event.MouseEvent)", "ownerclassid":"8", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ScrollViewInteraction", "sourcecode":"protected ScrollViewInteraction(MouseEvent e) {\r\n    super(e);\r\n}"},
 {"id":84, "name":"apply(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ScrollViewInteraction.apply(java.awt.event.MouseEvent)", "ownerclassid":"8", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ScrollViewInteraction", "sourcecode":"public void apply(MouseEvent event) {\r\n    float absoluteDiff = getLengthDiff(event);\r\n    float relativeDiff = (myPreviousAbsoluteDiff) - absoluteDiff;\r\n    TaskLength diff = getTaskManager().createLength(getViewState().getBottomTimeUnit(), relativeDiff);\r\n    float daysF = diff.getLength(getTimeUnitStack().getDefaultTimeUnit());\r\n    int days = ((int) (daysF));\r\n    if (days == 0) {\r\n        return;\r\n    }\r\n    if (days > 0) {\r\n        getUIFacade().getScrollingManager().scrollRight();\r\n    }\r\n    if (days < 0) {\r\n        getUIFacade().getScrollingManager().scrollLeft();\r\n    }\r\n    myPreviousAbsoluteDiff = absoluteDiff;\r\n}"},
 {"id":85, "name":"finish()", "fullmethod":"net.sourceforge.ganttproject.ChartComponentBase$ScrollViewInteraction.finish()", "ownerclassid":"8", "ownerclassname":"net.sourceforge.ganttproject.ChartComponentBase$ScrollViewInteraction", "sourcecode":"public void finish() {\r\n}"},
 {"id":86, "name":"getDefinition()", "fullmethod":"net.sourceforge.ganttproject.CustomProperty.getDefinition()", "ownerclassid":"10", "ownerclassname":"net.sourceforge.ganttproject.CustomProperty", "sourcecode":"CustomPropertyDefinition getDefinition();"},
 {"id":87, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.CustomProperty.getValue()", "ownerclassid":"10", "ownerclassname":"net.sourceforge.ganttproject.CustomProperty", "sourcecode":"Object getValue();"},
 {"id":88, "name":"getValueAsString()", "fullmethod":"net.sourceforge.ganttproject.CustomProperty.getValueAsString()", "ownerclassid":"10", "ownerclassname":"net.sourceforge.ganttproject.CustomProperty", "sourcecode":"String getValueAsString();"},
 {"id":89, "name":"getDefaultValue()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyDefinition.getDefaultValue()", "ownerclassid":"11", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyDefinition", "sourcecode":"Object getDefaultValue();"},
 {"id":90, "name":"getDefaultValueAsString()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyDefinition.getDefaultValueAsString()", "ownerclassid":"11", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyDefinition", "sourcecode":"String getDefaultValueAsString();"},
 {"id":91, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyDefinition.getID()", "ownerclassid":"11", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyDefinition", "sourcecode":"String getID();"},
 {"id":92, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyDefinition.getName()", "ownerclassid":"11", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyDefinition", "sourcecode":"String getName();"},
 {"id":93, "name":"getType()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyDefinition.getType()", "ownerclassid":"11", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyDefinition", "sourcecode":"Class getType();"},
 {"id":94, "name":"getTypeAsString()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyDefinition.getTypeAsString()", "ownerclassid":"11", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyDefinition", "sourcecode":"String getTypeAsString();"},
 {"id":95, "name":"addCustomProperty(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyHolder.addCustomProperty(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.String)", "ownerclassid":"12", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyHolder", "sourcecode":"CustomProperty addCustomProperty(CustomPropertyDefinition definition, String defaultValueAsString);"},
 {"id":96, "name":"getCustomProperties()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyHolder.getCustomProperties()", "ownerclassid":"12", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyHolder", "sourcecode":"/* <CustomProperty> */\r\nList getCustomProperties();"},
 {"id":97, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyManager.-init-()", "ownerclassid":"14", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyManager", "sourcecode":"PropertyTypeEncoder() {\r\n}"},
 {"id":98, "name":"createDefinition(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyManager.createDefinition(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"14", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyManager", "sourcecode":"CustomPropertyDefinition createDefinition(String id, String typeAsString, String name, String defaultValueAsString);"},
 {"id":99, "name":"getDefinitions()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyManager.getDefinitions()", "ownerclassid":"14", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyManager", "sourcecode":"/* <CustomPropertyDefinitions> */\r\nList getDefinitions();"},
 {"id":100, "name":"importData(net.sourceforge.ganttproject.CustomPropertyManager)", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyManager.importData(net.sourceforge.ganttproject.CustomPropertyManager)", "ownerclassid":"14", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyManager", "sourcecode":"void importData(CustomPropertyManager source);"},
 {"id":101, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyManager$PropertyTypeEncoder.-init-()", "ownerclassid":"13", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyManager$PropertyTypeEncoder", "sourcecode":"PropertyTypeEncoder() {\r\n}"},
 {"id":102, "name":"decodeTypeAndDefaultValue(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyManager$PropertyTypeEncoder.decodeTypeAndDefaultValue(java.lang.String,java.lang.String)", "ownerclassid":"13", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyManager$PropertyTypeEncoder", "sourcecode":"public static CustomPropertyDefinition decodeTypeAndDefaultValue(final String typeAsString, final String valueAsString) {\r\n    final Class type;\r\n    final Object defaultValue;\r\n    if (typeAsString.equals(\"text\")) {\r\n        type = String.class;\r\n        defaultValue = (valueAsString == null) ? null : valueAsString.toString();\r\n    } else\r\n        if (typeAsString.equals(\"boolean\")) {\r\n            type = Boolean.class;\r\n            defaultValue = (valueAsString == null) ? null : Boolean.valueOf(valueAsString);\r\n        } else\r\n            if (typeAsString.equals(\"int\")) {\r\n                type = Integer.class;\r\n                defaultValue = (valueAsString == null) ? null : Integer.valueOf(valueAsString);\r\n            } else\r\n                if (typeAsString.equals(\"double\")) {\r\n                    type = Double.class;\r\n                    defaultValue = (valueAsString == null) ? null : Double.valueOf(valueAsString);\r\n                } else\r\n                    if (typeAsString.equals(\"date\")) {\r\n                        type = GregorianCalendar.class;\r\n                        if (valueAsString != null) {\r\n                            GanttCalendar c = null;\r\n                            try {\r\n                                c = new GanttCalendar(DateParser.parse(valueAsString));\r\n                            } catch (InvalidDateException e) {\r\n                                if (!(GPLogger.log(e))) {\r\n                                    e.printStackTrace(System.err);\r\n                                }\r\n                            }\r\n                            defaultValue = c;\r\n                        } else {\r\n                            defaultValue = null;\r\n                        }\r\n                    } else {\r\n                        type = String.class;// TODO remove if(...text)\r\n\r\n                        defaultValue = \"\";\r\n                    }\r\n\r\n\r\n\r\n\r\n    return new CustomPropertyDefinition() {\r\n        public Object getDefaultValue() {\r\n            return defaultValue;\r\n        }\r\n\r\n        public String getDefaultValueAsString() {\r\n            return valueAsString;\r\n        }\r\n\r\n        public String getID() {\r\n            return null;\r\n        }\r\n\r\n        public String getName() {\r\n            return null;\r\n        }\r\n\r\n        public Class getType() {\r\n            return type;\r\n        }\r\n\r\n        public String getTypeAsString() {\r\n            return typeAsString;\r\n        }\r\n    };\r\n}"},
 {"id":103, "name":"encodeFieldType(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.CustomPropertyManager$PropertyTypeEncoder.encodeFieldType(java.lang.Class)", "ownerclassid":"13", "ownerclassname":"net.sourceforge.ganttproject.CustomPropertyManager$PropertyTypeEncoder", "sourcecode":"public static String encodeFieldType(Class fieldType) {\r\n    String result = null;\r\n    if (fieldType.equals(String.class)) {\r\n        result = \"text\";\r\n    } else\r\n        if (fieldType.equals(Boolean.class)) {\r\n            result = \"boolean\";\r\n        } else\r\n            if (fieldType.equals(Integer.class)) {\r\n                result = \"int\";\r\n            } else\r\n                if (fieldType.equals(Double.class)) {\r\n                    result = \"double\";\r\n                } else\r\n                    if (fieldType.isAssignableFrom(GregorianCalendar.class)) {\r\n                        result = \"date\";\r\n                    }\r\n\r\n\r\n\r\n\r\n    return result;\r\n}"},
 {"id":104, "name":"-init-(net.sourceforge.ganttproject.UIFacadeImpl)", "fullmethod":"net.sourceforge.ganttproject.ErrorNotifier.-init-(net.sourceforge.ganttproject.UIFacadeImpl)", "ownerclassid":"15", "ownerclassname":"net.sourceforge.ganttproject.ErrorNotifier", "sourcecode":"ErrorNotifier(UIFacadeImpl uiFacade) {\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":105, "name":"add(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.ErrorNotifier.add(java.lang.Throwable)", "ownerclassid":"15", "ownerclassname":"net.sourceforge.ganttproject.ErrorNotifier", "sourcecode":"void add(Throwable e) {\r\n    myErrors.add(e.getMessage());\r\n}"},
 {"id":106, "name":"run()", "fullmethod":"net.sourceforge.ganttproject.ErrorNotifier.run()", "ownerclassid":"15", "ownerclassname":"net.sourceforge.ganttproject.ErrorNotifier", "sourcecode":"public void run() {\r\n    StringBuffer buf = new StringBuffer();\r\n    for (int i = 0; i < (myErrors.size()); i++) {\r\n        buf.append(String.valueOf(myErrors.get(i)));\r\n        buf.append(\"\n\n\");\r\n    }\r\n    myUIFacade.showErrorDialog(buf.toString());\r\n    myErrors.clear();\r\n    myUIFacade.resetErrorLog();\r\n}"},
 {"id":107, "name":"-init-(javax.swing.tree.TreeModel)", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.-init-(javax.swing.tree.TreeModel)", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"public FacadeInvalidator(TreeModel treeModel) {\r\n    isValid = false;\r\n    treeModel.addTreeModelListener(this);\r\n}"},
 {"id":108, "name":"isValid()", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.isValid()", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"boolean isValid() {\r\n    return isValid;\r\n}"},
 {"id":109, "name":"projectClosed()", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.projectClosed()", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"public void projectClosed() {\r\n    isValid = false;\r\n}"},
 {"id":110, "name":"projectModified()", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.projectModified()", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"public void projectModified() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":111, "name":"projectSaved()", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.projectSaved()", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"public void projectSaved() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":112, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.reset()", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"void reset() {\r\n    isValid = true;\r\n}"},
 {"id":113, "name":"treeNodesChanged(javax.swing.event.TreeModelEvent)", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.treeNodesChanged(javax.swing.event.TreeModelEvent)", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"public void treeNodesChanged(TreeModelEvent e) {\r\n    isValid = false;\r\n}"},
 {"id":114, "name":"treeNodesInserted(javax.swing.event.TreeModelEvent)", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.treeNodesInserted(javax.swing.event.TreeModelEvent)", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"public void treeNodesInserted(TreeModelEvent e) {\r\n    isValid = false;\r\n}"},
 {"id":115, "name":"treeNodesRemoved(javax.swing.event.TreeModelEvent)", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.treeNodesRemoved(javax.swing.event.TreeModelEvent)", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"public void treeNodesRemoved(TreeModelEvent e) {\r\n    isValid = false;\r\n}"},
 {"id":116, "name":"treeStructureChanged(javax.swing.event.TreeModelEvent)", "fullmethod":"net.sourceforge.ganttproject.FacadeInvalidator.treeStructureChanged(javax.swing.event.TreeModelEvent)", "ownerclassid":"16", "ownerclassname":"net.sourceforge.ganttproject.FacadeInvalidator", "sourcecode":"public void treeStructureChanged(TreeModelEvent e) {\r\n    isValid = false;\r\n}"},
 {"id":117, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GPLogger.-init-()", "ownerclassid":"17", "ownerclassname":"net.sourceforge.ganttproject.GPLogger", "sourcecode":"GPLogger() {\r\n}"},
 {"id":118, "name":"log(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GPLogger.log(java.lang.String)", "ownerclassid":"17", "ownerclassname":"net.sourceforge.ganttproject.GPLogger", "sourcecode":"public static void log(String message) {\r\n    GPLogger.ourLogger.log(Level.INFO, message);\r\n}"},
 {"id":119, "name":"log(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.GPLogger.log(java.lang.Throwable)", "ownerclassid":"17", "ownerclassname":"net.sourceforge.ganttproject.GPLogger", "sourcecode":"public static boolean log(Throwable e) {\r\n    if ((GPLogger.ourHandler) == null) {\r\n        return false;\r\n    }\r\n    GPLogger.ourLogger.log(Level.WARNING, e.getMessage(), e);\r\n    if ((GPLogger.ourUIFacade) != null) {\r\n        GPLogger.ourUIFacade.logErrorMessage(e);\r\n    }\r\n    return true;\r\n}"},
 {"id":120, "name":"setUIFacade(net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.GPLogger.setUIFacade(net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"17", "ownerclassname":"net.sourceforge.ganttproject.GPLogger", "sourcecode":"public static void setUIFacade(UIFacade uifacade) {\r\n    GPLogger.ourUIFacade = uifacade;\r\n}"},
 {"id":121, "name":"setup()", "fullmethod":"net.sourceforge.ganttproject.GPLogger.setup()", "ownerclassid":"17", "ownerclassname":"net.sourceforge.ganttproject.GPLogger", "sourcecode":"public static void setup() {\r\n    GPLogger.ourHandler = new ConsoleHandler();\r\n    GPLogger.ourLogger.addHandler(GPLogger.ourHandler);\r\n    GPLogger.ourLogger.setLevel(Level.ALL);\r\n    GPLogger.ourHandler.setFormatter(new SimpleFormatter());\r\n}"},
 {"id":122, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GPToolBar.-init-()", "ownerclassid":"18", "ownerclassname":"net.sourceforge.ganttproject.GPToolBar", "sourcecode":"1() {\r\n}"},
 {"id":123, "name":"-init-(java.lang.String,int,net.sourceforge.ganttproject.GanttOptions)", "fullmethod":"net.sourceforge.ganttproject.GPToolBar.-init-(java.lang.String,int,net.sourceforge.ganttproject.GanttOptions)", "ownerclassid":"18", "ownerclassname":"net.sourceforge.ganttproject.GPToolBar", "sourcecode":"public GPToolBar(String title, int toolBarPosition, GanttOptions options) {\r\n    super(title, toolBarPosition);\r\n    setBorderPainted(true);\r\n    setRollover(true);\r\n    setFloatable(true);\r\n    this.options = options;\r\n}"},
 {"id":124, "name":"populate(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GPToolBar.populate(java.util.List)", "ownerclassid":"18", "ownerclassname":"net.sourceforge.ganttproject.GPToolBar", "sourcecode":"void populate(/* <JButton> */\r\nList buttons) {\r\n    removeAll();\r\n    myButtons = new ArrayList(buttons.size());\r\n    for (int i = 0; i < (buttons.size()); i++) {\r\n        Object nextButton = buttons.get(i);\r\n        if (GPToolBar.SEPARATOR_OBJECT.equals(nextButton)) {\r\n            int size = Integer.parseInt(options.getIconSize());\r\n            // toolBar.addSeparator(new Dimension(size, size));\r\n            ImageIcon icon;\r\n            if ((getOrientation()) == (JToolBar.HORIZONTAL)) {\r\n                icon = new ImageIcon(getClass().getResource(\"/icons/sepV_16.png\"));\r\n            } else {\r\n                icon = new ImageIcon(getClass().getResource(\"/icons/sepH_16.png\"));\r\n            }\r\n            add(new JLabel(icon));\r\n        } else {\r\n            add(((AbstractButton) (nextButton)));\r\n            if (nextButton instanceof TestGanttRolloverButton) {\r\n                myButtons.add(nextButton);\r\n            }\r\n        }\r\n    }\r\n    invalidate();\r\n}"},
 {"id":125, "name":"updateButtonsLook()", "fullmethod":"net.sourceforge.ganttproject.GPToolBar.updateButtonsLook()", "ownerclassid":"18", "ownerclassname":"net.sourceforge.ganttproject.GPToolBar", "sourcecode":"void updateButtonsLook() {\r\n    for (int i = 0; i < (myButtons.size()); i++) {\r\n        TestGanttRolloverButton nextButton = ((TestGanttRolloverButton) (myButtons.get(i)));\r\n        nextButton.setIconHidden(((options.getButtonShow()) == (GanttOptions.TEXT)));\r\n        nextButton.setTextHidden(((options.getButtonShow()) == (GanttOptions.ICONS)));\r\n    }\r\n    invalidate();\r\n}"},
 {"id":126, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,org.jdesktop.swing.treetable.TreeTableModel)", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase.-init-(net.sourceforge.ganttproject.IGanttProject,org.jdesktop.swing.treetable.TreeTableModel)", "ownerclassid":"20", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase", "sourcecode":"protected GPTreeTableBase(IGanttProject project, TreeTableModel model) {\r\n    super(new JXTreeTable(model) {\r\n        protected boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed) {\r\n            if ((e.isAltDown()) || (e.isControlDown())) {\r\n                putClientProperty(\"JTable.autoStartsEdit\", Boolean.FALSE);\r\n            }\r\n            boolean result = super.processKeyBinding(ks, e, condition, pressed);\r\n            putClientProperty(\"JTable.autoStartsEdit\", Boolean.TRUE);\r\n            return result;\r\n        }\r\n    });\r\n    myProject = project;\r\n}"},
 {"id":127, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase.-init-()", "ownerclassid":"20", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase", "sourcecode":"2() {\r\n}"},
 {"id":128, "name":"getProject()", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase.getProject()", "ownerclassid":"20", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase", "sourcecode":"protected IGanttProject getProject() {\r\n    return myProject;\r\n}"},
 {"id":129, "name":"newDateCellEditor()", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase.newDateCellEditor()", "ownerclassid":"20", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase", "sourcecode":"protected TableCellEditor newDateCellEditor() {\r\n    return new GPTreeTableBase.DateCellEditor() {\r\n        protected Date parseDate(String dateString) {\r\n            DateFormat[] formats = new DateFormat[]{ GanttLanguage.getInstance().getLongDateFormat(), GanttLanguage.getInstance().getMediumDateFormat(), GanttLanguage.getInstance().getShortDateFormat() };\r\n            for (int i = 0; i < (formats.length); i++) {\r\n                try {\r\n                    Date typedDate = formats[i].parse(dateString);\r\n                    Calendar typedCal = CalendarFactory.newCalendar();\r\n                    typedCal.setTime(typedDate);\r\n                    Calendar projectStartCal = CalendarFactory.newCalendar();\r\n                    projectStartCal.setTime(myProject.getTaskManager().getProjectStart());\r\n                    int yearDiff = Math.abs(((typedCal.get(Calendar.YEAR)) - (projectStartCal.get(Calendar.YEAR))));\r\n                    if (yearDiff > 1500) {\r\n                        AttributedCharacterIterator iter = formats[i].formatToCharacterIterator(typedDate);\r\n                        int additionalZeroes = -1;\r\n                        StringBuffer result = new StringBuffer();\r\n                        for (char c = iter.first(); c != (iter.DONE); c = iter.next()) {\r\n                            if (((iter.getAttribute(DateFormat.Field.YEAR)) != null) && (additionalZeroes == (-1))) {\r\n                                additionalZeroes = (iter.getRunLimit(DateFormat.Field.YEAR)) - (iter.getIndex());\r\n                                for (int j = 0; j < additionalZeroes; j++) {\r\n                                    result.append(0);\r\n                                }\r\n                            }\r\n                            result.append(c);\r\n                        }\r\n                        if (!(result.toString().equals(dateString))) {\r\n                            typedCal.add(Calendar.YEAR, 2000);\r\n                            return typedCal.getTime();\r\n                        }\r\n                    }\r\n                    return typedDate;\r\n                } catch (ParseException e) {\r\n                    if ((i + 1) == (formats.length)) {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n}"},
 {"id":130, "name":"newTableColumnExt(int)", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase.newTableColumnExt(int)", "ownerclassid":"20", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase", "sourcecode":"protected TableColumnExt newTableColumnExt(int modelIndex) {\r\n    TableColumnExt result = new TableColumnExt(modelIndex);\r\n    TableCellEditor defaultEditor = getTreeTable().getDefaultEditor(getTreeTableModel().getColumnClass(modelIndex));\r\n    if (defaultEditor != null) {\r\n        result.setCellEditor(new TreeTableCellEditorImpl(defaultEditor));\r\n    }\r\n    return result;\r\n}"},
 {"id":131, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor.-init-()", "ownerclassid":"19", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor", "sourcecode":"public DateCellEditor() {\r\n    super(new JTextField());\r\n}"},
 {"id":132, "name":"getCellEditorValue()", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor.getCellEditorValue()", "ownerclassid":"19", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor", "sourcecode":"public Object getCellEditorValue() {\r\n    return new GanttCalendar(((myDate) == null ? new Date() : myDate));\r\n}"},
 {"id":133, "name":"getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor.getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)", "ownerclassid":"19", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor", "sourcecode":"public Component getTableCellEditorComponent(JTable arg0, Object arg1, boolean arg2, int arg3, int arg4) {\r\n    JTextField result = ((JTextField) (super.getTableCellEditorComponent(arg0, arg1, arg2, arg3, arg4)));\r\n    result.selectAll();\r\n    return result;\r\n}"},
 {"id":134, "name":"parseDate(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor.parseDate(java.lang.String)", "ownerclassid":"19", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor", "sourcecode":"protected abstract Date parseDate(String dateString);"},
 {"id":135, "name":"stopCellEditing()", "fullmethod":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor.stopCellEditing()", "ownerclassid":"19", "ownerclassname":"net.sourceforge.ganttproject.GPTreeTableBase$DateCellEditor", "sourcecode":"public boolean stopCellEditing() {\r\n    final String dateString = ((JTextComponent) (getComponent())).getText();\r\n    Date parsedDate = parseDate(dateString);\r\n    if (parsedDate == null) {\r\n        getComponent().setBackground(colorError);\r\n        return false;\r\n    } else {\r\n        myDate = parsedDate;\r\n        getComponent().setBackground(colorNormal);\r\n        super.fireEditingStopped();\r\n        return true;\r\n    }\r\n}"},
 {"id":136, "name":"isVisible()", "fullmethod":"net.sourceforge.ganttproject.GPView.isVisible()", "ownerclassid":"22", "ownerclassname":"net.sourceforge.ganttproject.GPView", "sourcecode":"boolean isVisible();"},
 {"id":137, "name":"setVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.GPView.setVisible(boolean)", "ownerclassid":"22", "ownerclassname":"net.sourceforge.ganttproject.GPView", "sourcecode":"void setVisible(boolean isVisible);"},
 {"id":138, "name":"createView(org.eclipse.core.runtime.IAdaptable,javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.GPViewManager.createView(org.eclipse.core.runtime.IAdaptable,javax.swing.Icon)", "ownerclassid":"23", "ownerclassname":"net.sourceforge.ganttproject.GPViewManager", "sourcecode":"GPView createView(IAdaptable adaptable, Icon icon);"},
 {"id":139, "name":"getCopyAction()", "fullmethod":"net.sourceforge.ganttproject.GPViewManager.getCopyAction()", "ownerclassid":"23", "ownerclassname":"net.sourceforge.ganttproject.GPViewManager", "sourcecode":"Action getCopyAction();"},
 {"id":140, "name":"getCutAction()", "fullmethod":"net.sourceforge.ganttproject.GPViewManager.getCutAction()", "ownerclassid":"23", "ownerclassname":"net.sourceforge.ganttproject.GPViewManager", "sourcecode":"Action getCutAction();"},
 {"id":141, "name":"getPasteAction()", "fullmethod":"net.sourceforge.ganttproject.GPViewManager.getPasteAction()", "ownerclassid":"23", "ownerclassname":"net.sourceforge.ganttproject.GPViewManager", "sourcecode":"Action getPasteAction();"},
 {"id":142, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.-init-()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Default constructor\r\n */\r\npublic GanttCalendar() {\r\n    super();\r\n    set(Calendar.HOUR_OF_DAY, 0);\r\n    set(Calendar.MINUTE, 0);\r\n    set(Calendar.SECOND, 0);\r\n    set(Calendar.MILLISECOND, 0);\r\n}"},
 {"id":143, "name":"-init-(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.-init-(int,int,int)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Constructor with a year, a month and a day\r\n */\r\npublic GanttCalendar(int year, int month, int date) {\r\n    super(year, month, date);\r\n}"},
 {"id":144, "name":"-init-(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.-init-(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Copy constructor\r\n */\r\npublic GanttCalendar(GanttCalendar g) {\r\n    super(g.getYear(), g.getMonth(), g.getDate());\r\n}"},
 {"id":145, "name":"-init-(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.-init-(java.util.Date)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"public GanttCalendar(Date date) {\r\n    super();\r\n    setTime(date);\r\n}"},
 {"id":146, "name":"Clone()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.Clone()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return a clone of the calendar\r\n */\r\npublic GanttCalendar Clone() {\r\n    GanttCalendar clone = new GanttCalendar(getYear(), getMonth(), getDay());\r\n    clone.setFixed(isFixed());\r\n    return clone;\r\n}"},
 {"id":147, "name":"add(int)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.add(int)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Add a number of day to the current date\r\n */\r\npublic void add(int dayNumber) {\r\n    this.add(Calendar.DATE, dayNumber);\r\n}"},
 {"id":148, "name":"compareTo(java.util.Calendar)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.compareTo(java.util.Calendar)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"public int compareTo(Calendar o) {\r\n    return compareTo(((GanttCalendar) (o)));\r\n}"},
 {"id":149, "name":"compareTo(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.compareTo(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * This function compare two date\r\n *\r\n * @return 0 If the two date are equals\r\n * @return -1 if the date is before when\r\n * @return 1 if the date is after when\r\n */\r\npublic int compareTo(GanttCalendar when) {\r\n    int[] comparissons = new int[]{ Calendar.YEAR, Calendar.MONTH, Calendar.DATE };\r\n    for (int i = 0; i < (comparissons.length); i++) {\r\n        switch (module(((this.get(comparissons[i])) - (when.get(comparissons[i]))))) {\r\n            case -1 :\r\n                return -1;\r\n            case 1 :\r\n                return 1;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n    return 0;\r\n}"},
 {"id":150, "name":"diff(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.diff(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n *\r\n *\r\n * @deprecated Use TimeUnit related methods\r\nReturn the difference (in day) between two date\r\n */\r\npublic int diff(GanttCalendar d) {\r\n    int res = 0;\r\n    GanttCalendar d1;\r\n    GanttCalendar d2;\r\n    if ((this.compareTo(d)) == 0)\r\n        return res;\r\n    else\r\n        if ((compareTo(d)) < 0) {\r\n            d1 = this.Clone();\r\n            d2 = new GanttCalendar(d);\r\n        } else {\r\n            d1 = new GanttCalendar(d);\r\n            d2 = this.Clone();\r\n        }\r\n\r\n    while ((d1.compareTo(d2)) != 0) {\r\n        d1.add(1);\r\n        res++;\r\n    } \r\n    return res;\r\n}"},
 {"id":151, "name":"equals(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.equals(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Is the date equals to when\r\n */\r\npublic boolean equals(GanttCalendar when) {\r\n    return (((getYear()) == (when.getYear())) && ((getMonth()) == (when.getMonth()))) && ((getDay()) == (when.getDay()));\r\n}"},
 {"id":152, "name":"getDate()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getDate()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the day\r\n */\r\npublic int getDate() {\r\n    return this.get(Calendar.DATE);\r\n}"},
 {"id":153, "name":"getDateAndTime()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getDateAndTime()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the actually date\r\n */\r\npublic static String getDateAndTime() {\r\n    GanttCalendar c = new GanttCalendar();\r\n    return ((c.toString()) + \" - \") + (GanttLanguage.getInstance().formatTime(c));\r\n}"},
 {"id":154, "name":"getDay()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getDay()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the day\r\n */\r\npublic int getDay() {\r\n    return this.get(Calendar.DAY_OF_MONTH);\r\n}"},
 {"id":155, "name":"getDayMonthLanguage()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getDayMonthLanguage()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return an array with all name of month\r\n */\r\npublic String[] getDayMonthLanguage() {\r\n    String[] res = new String[12];\r\n    for (int i = 0; i < 12; i++)\r\n        res[i] = language.getMonth(i);\r\n\r\n    return res;\r\n}"},
 {"id":156, "name":"getDayWeek()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getDayWeek()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the number of the day on the week\r\n */\r\npublic int getDayWeek() {\r\n    return this.get(Calendar.DAY_OF_WEEK);\r\n}"},
 {"id":157, "name":"getDayWeekLanguage()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getDayWeekLanguage()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return an array with all name of day\r\n */\r\npublic String[] getDayWeekLanguage() {\r\n    String[] res = new String[7];\r\n    for (int i = 0; i < 7; i++)\r\n        res[i] = language.getDay(i);\r\n\r\n    return res;\r\n}"},
 {"id":158, "name":"getMonth()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getMonth()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the month\r\n */\r\npublic int getMonth() {\r\n    return this.get(Calendar.MONTH);\r\n}"},
 {"id":159, "name":"getNumberOfDay()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getNumberOfDay()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the number of day on the month\r\n */\r\npublic int getNumberOfDay() {\r\n    return this.getActualMaximum(Calendar.DATE);\r\n}"},
 {"id":160, "name":"getWeek()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getWeek()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the numbner of the week on the year\r\n */\r\npublic int getWeek() {\r\n    return this.get(Calendar.WEEK_OF_YEAR);\r\n}"},
 {"id":161, "name":"getYear()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getYear()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the year\r\n */\r\npublic int getYear() {\r\n    return this.get(Calendar.YEAR);\r\n}"},
 {"id":162, "name":"getdayMonth()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getdayMonth()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the string of the month.\r\n */\r\npublic String getdayMonth() {\r\n    return language.getMonth(getMonth());\r\n}"},
 {"id":163, "name":"getdayWeek()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.getdayWeek()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the string of the day.\r\n */\r\npublic String getdayWeek() {\r\n    return language.getDay(((this.get(Calendar.DAY_OF_WEEK)) - 1));\r\n}"},
 {"id":164, "name":"go(int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.go(int,int)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Change the value of a filed\r\n */\r\npublic void go(int field, int value) {\r\n    this.add(field, value);\r\n}"},
 {"id":165, "name":"goNextMonth()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.goNextMonth()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Change date to next month.\r\n */\r\npublic void goNextMonth() {\r\n    this.add(Calendar.MONTH, 1);\r\n}"},
 {"id":166, "name":"goPrevMonth()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.goPrevMonth()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Change date to previous month.\r\n */\r\npublic void goPrevMonth() {\r\n    this.add(Calendar.MONTH, (-1));\r\n}"},
 {"id":167, "name":"isFixed()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.isFixed()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"public boolean isFixed() {\r\n    return isFixed;\r\n}"},
 {"id":168, "name":"module(int)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.module(int)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * This function returns the signal represented by an int\r\n */\r\nprivate int module(int number) {\r\n    if (number > 0)\r\n        return 1;\r\n    else\r\n        if (number < 0)\r\n            return -1;\r\n        else\r\n            return 0;\r\n\r\n\r\n}"},
 {"id":169, "name":"newAdd(int)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.newAdd(int)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Change the year of the date, and return a copy\r\n */\r\npublic GanttCalendar newAdd(int dayNumber) {\r\n    GanttCalendar gc = new GanttCalendar(getYear(), getMonth(), getDate());\r\n    gc.add(Calendar.DATE, dayNumber);\r\n    return gc;\r\n}"},
 {"id":170, "name":"parseXMLDate(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.parseXMLDate(java.lang.String)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"// ////////////////////////////////////////////////////////////////////////////////////////////////////\r\npublic static GanttCalendar parseXMLDate(String s) {\r\n    GanttCalendar result = new GanttCalendar();\r\n    result.clear();\r\n    try {\r\n        Date date = DateParser.parse(s);\r\n        result.setTime(date);\r\n    } catch (InvalidDateException e) {\r\n        // Get \"/\" caracters\r\n        int fb = s.indexOf(/);\r\n        int sb = s.indexOf(/, (fb + 1));\r\n        // Get all fiels\r\n        String d = s.substring(0, fb);\r\n        String m = s.substring((fb + 1), sb);\r\n        String y = s.substring((sb + 1));\r\n        // Set the date\r\n        result.set(Calendar.YEAR, new Integer(y).hashCode());\r\n        result.set(Calendar.MONTH, ((new Integer(m).hashCode()) - 1));\r\n        result.set(Calendar.DATE, new Integer(d).hashCode());\r\n    }\r\n    return result;\r\n}"},
 {"id":171, "name":"setDay(int)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.setDay(int)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Change the date of the date\r\n */\r\npublic void setDay(int d) {\r\n    this.set(Calendar.DAY_OF_MONTH, d);\r\n}"},
 {"id":172, "name":"setFixed(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.setFixed(boolean)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"public void setFixed(boolean fixed) {\r\n    isFixed = fixed;\r\n}"},
 {"id":173, "name":"setMonth(int)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.setMonth(int)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Change the month of the date\r\n */\r\npublic void setMonth(int m) {\r\n    this.set(Calendar.MONTH, m);\r\n}"},
 {"id":174, "name":"setYear(int)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.setYear(int)", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Change the year of the date\r\n */\r\npublic void setYear(int y) {\r\n    this.set(Calendar.YEAR, y);\r\n}"},
 {"id":175, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.toString()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"/**\r\n * Return the date to A string\r\n */\r\npublic String toString() {\r\n    return language.formatShortDate(this);\r\n    // return (language.formatDate(this));\r\n}"},
 {"id":176, "name":"toXMLString()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendar.toXMLString()", "ownerclassid":"24", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendar", "sourcecode":"public String toXMLString() {\r\n    // return getDate() + \"/\" + (getMonth() + 1) + \"/\" + getYear();\r\n    return DateParser.getIsoDateNoHours(getTime());\r\n}"},
 {"id":177, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttCalendarDays.-init-()", "ownerclassid":"25", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendarDays", "sourcecode":"/* Default constructor */\r\npublic GanttCalendarDays() {\r\n    dayList = new ArrayList();\r\n}"},
 {"id":178, "name":"-init-(java.util.ArrayList)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendarDays.-init-(java.util.ArrayList)", "ownerclassid":"25", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendarDays", "sourcecode":"/* constructor */\r\npublic GanttCalendarDays(ArrayList dayList) {\r\n    this.dayList = dayList;\r\n}"},
 {"id":179, "name":"insert(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendarDays.insert(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"25", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendarDays", "sourcecode":"/**\r\n * Insert the day on the daylist\r\n */\r\npublic void insert(GanttCalendar day) {\r\n    if (!(dayList.contains(day)))\r\n        dayList.add(day);\r\n\r\n}"},
 {"id":180, "name":"remove(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.GanttCalendarDays.remove(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"25", "ownerclassname":"net.sourceforge.ganttproject.GanttCalendarDays", "sourcecode":"/**\r\n * Remove the selected day\r\n */\r\npublic void remove(GanttCalendar day) {\r\n    int index = dayList.indexOf(day);\r\n    if (index >= 0)\r\n        dayList.remove(index);\r\n\r\n}"},
 {"id":181, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TaskTreeUIFacade,java.awt.Component)", "fullmethod":"net.sourceforge.ganttproject.GanttChartTabContentPanel.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TaskTreeUIFacade,java.awt.Component)", "ownerclassid":"26", "ownerclassname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "sourcecode":"GanttChartTabContentPanel(IGanttProject project, UIFacade workbenchFacade, TaskTreeUIFacade treeFacade, Component ganttChart) {\r\n    myProject = project;\r\n    myWorkbenchFacade = workbenchFacade;\r\n    myTreeFacade = treeFacade;\r\n    myTaskTree = treeFacade.getTreeComponent();\r\n    myGanttChart = ganttChart;\r\n}"},
 {"id":182, "name":"-init-(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.GanttChartTabContentPanel.-init-(javax.swing.Action)", "ownerclassid":"26", "ownerclassname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":183, "name":"createButtonPanel()", "fullmethod":"net.sourceforge.ganttproject.GanttChartTabContentPanel.createButtonPanel()", "ownerclassid":"26", "ownerclassname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "sourcecode":"private Component createButtonPanel() {\r\n    Box buttonBar = Box.createHorizontalBox();\r\n    // JToolBar buttonBar = new JToolBar();\r\n    // buttonBar.setFloatable(false);\r\n    TestGanttRolloverButton unindentButton = new TestGanttRolloverButton(myTreeFacade.getUnindentAction()) {\r\n        public String getText() {\r\n            return null;\r\n        }\r\n    };\r\n    buttonBar.add(unindentButton);\r\n    TestGanttRolloverButton indentButton = new TestGanttRolloverButton(myTreeFacade.getIndentAction()) {\r\n        public String getText() {\r\n            return null;\r\n        }\r\n    };\r\n    buttonBar.add(indentButton);\r\n    // \r\n    buttonBar.add(Box.createHorizontalStrut(3));\r\n    // \r\n    TestGanttRolloverButton upButton = new TestGanttRolloverButton(myTreeFacade.getMoveUpAction()) {\r\n        public String getText() {\r\n            return null;\r\n        }\r\n    };\r\n    buttonBar.add(upButton);\r\n    // \r\n    TestGanttRolloverButton downButton = new TestGanttRolloverButton(myTreeFacade.getMoveDownAction()) {\r\n        public String getText() {\r\n            return null;\r\n        }\r\n    };\r\n    buttonBar.add(downButton);\r\n    // \r\n    buttonBar.add(Box.createHorizontalStrut(8));\r\n    Action linkAction = new LinkTasksAction(myProject.getTaskManager(), Mediator.getTaskSelectionManager(), myWorkbenchFacade);\r\n    myTreeFacade.setLinkTasksAction(linkAction);\r\n    TestGanttRolloverButton linkButton = new TestGanttRolloverButton(linkAction) {\r\n        public String getText() {\r\n            return null;\r\n        }\r\n    };\r\n    buttonBar.add(linkButton);\r\n    // \r\n    Action unlinkAction = new UnlinkTasksAction(myProject.getTaskManager(), Mediator.getTaskSelectionManager(), myWorkbenchFacade);\r\n    myTreeFacade.setUnlinkTasksAction(unlinkAction);\r\n    TestGanttRolloverButton unlinkButton = new TestGanttRolloverButton(unlinkAction) {\r\n        public String getText() {\r\n            return null;\r\n        }\r\n    };\r\n    buttonBar.add(unlinkButton);\r\n    // \r\n    JPanel buttonPanel = new JPanel(new BorderLayout());\r\n    buttonPanel.add(buttonBar, BorderLayout.WEST);\r\n    return buttonPanel;\r\n}"},
 {"id":184, "name":"getAdapter(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.GanttChartTabContentPanel.getAdapter(java.lang.Class)", "ownerclassid":"26", "ownerclassname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "sourcecode":"public Object getAdapter(Class adapter) {\r\n    if (Container.class.equals(adapter)) {\r\n        return getComponent();\r\n    }\r\n    if (Chart.class.equals(adapter)) {\r\n        return myGanttChart;\r\n    }\r\n    return null;\r\n}"},
 {"id":185, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.GanttChartTabContentPanel.getComponent()", "ownerclassid":"26", "ownerclassname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "sourcecode":"Component getComponent() {\r\n    if ((myTabContentPanel) == null) {\r\n        JPanel left = new JPanel(new BorderLayout());\r\n        Box treeHeader = Box.createVerticalBox();\r\n        GanttImagePanel but = new GanttImagePanel(\"big.png\", 300, 42);\r\n        treeHeader.add(but);\r\n        left.add(treeHeader, BorderLayout.NORTH);\r\n        left.add(myTaskTree, BorderLayout.CENTER);\r\n        left.setPreferredSize(new Dimension(315, 600));\r\n        left.setBackground(new Color(102, 153, 153));\r\n        JPanel right = new JPanel(new BorderLayout());\r\n        right.add(myGanttChart, BorderLayout.CENTER);\r\n        // A splitpane is use\r\n        mySplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\r\n        if ((GanttLanguage.getInstance().getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT)) {\r\n            mySplitPane.setLeftComponent(left);\r\n            mySplitPane.setRightComponent(right);\r\n            mySplitPane.applyComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\r\n        } else {\r\n            mySplitPane.setRightComponent(left);\r\n            mySplitPane.setLeftComponent(right);\r\n            mySplitPane.setDividerLocation(((int) ((Toolkit.getDefaultToolkit().getScreenSize().getWidth()) - (left.getPreferredSize().getWidth()))));\r\n            mySplitPane.applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\r\n        }\r\n        mySplitPane.setOneTouchExpandable(true);\r\n        mySplitPane.setPreferredSize(new Dimension(800, 500));\r\n        myTabContentPanel = new JPanel(new BorderLayout());\r\n        myTabContentPanel.add(createButtonPanel(), BorderLayout.NORTH);\r\n        myTabContentPanel.add(mySplitPane, BorderLayout.CENTER);\r\n    }\r\n    return myTabContentPanel;\r\n}"},
 {"id":186, "name":"getDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.GanttChartTabContentPanel.getDividerLocation()", "ownerclassid":"26", "ownerclassname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "sourcecode":"int getDividerLocation() {\r\n    return mySplitPane.getDividerLocation();\r\n}"},
 {"id":187, "name":"setDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.GanttChartTabContentPanel.setDividerLocation(int)", "ownerclassid":"26", "ownerclassname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "sourcecode":"void setDividerLocation(int location) {\r\n    mySplitPane.setDividerLocation(location);\r\n}"},
 {"id":188, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttExportSettings.-init-()", "ownerclassid":"27", "ownerclassname":"net.sourceforge.ganttproject.GanttExportSettings", "sourcecode":"public GanttExportSettings() {\r\n    name = percent = depend = ok = true;\r\n    onlySelectedItems = false;\r\n}"},
 {"id":189, "name":"-init-(boolean,boolean,boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttExportSettings.-init-(boolean,boolean,boolean,boolean)", "ownerclassid":"27", "ownerclassname":"net.sourceforge.ganttproject.GanttExportSettings", "sourcecode":"public GanttExportSettings(boolean bName, boolean bPercent, boolean bDepend, boolean b3dBorders) {\r\n    name = bName;\r\n    percent = bPercent;\r\n    depend = bDepend;\r\n    border3d = b3dBorders;\r\n    ok = true;\r\n    onlySelectedItems = false;\r\n}"},
 {"id":190, "name":"getEndDate()", "fullmethod":"net.sourceforge.ganttproject.GanttExportSettings.getEndDate()", "ownerclassid":"27", "ownerclassname":"net.sourceforge.ganttproject.GanttExportSettings", "sourcecode":"public Date getEndDate() {\r\n    return endDate;\r\n}"},
 {"id":191, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.GanttExportSettings.getStartDate()", "ownerclassid":"27", "ownerclassname":"net.sourceforge.ganttproject.GanttExportSettings", "sourcecode":"public Date getStartDate() {\r\n    return startDate;\r\n}"},
 {"id":192, "name":"isOnlySelectedItem()", "fullmethod":"net.sourceforge.ganttproject.GanttExportSettings.isOnlySelectedItem()", "ownerclassid":"27", "ownerclassname":"net.sourceforge.ganttproject.GanttExportSettings", "sourcecode":"public boolean isOnlySelectedItem() {\r\n    return onlySelectedItems;\r\n}"},
 {"id":193, "name":"setEndDate(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.GanttExportSettings.setEndDate(java.util.Date)", "ownerclassid":"27", "ownerclassname":"net.sourceforge.ganttproject.GanttExportSettings", "sourcecode":"public void setEndDate(Date date) {\r\n    endDate = date;\r\n}"},
 {"id":194, "name":"setOnlySelectedItem(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttExportSettings.setOnlySelectedItem(boolean)", "ownerclassid":"27", "ownerclassname":"net.sourceforge.ganttproject.GanttExportSettings", "sourcecode":"public void setOnlySelectedItem(boolean selected) {\r\n    onlySelectedItems = selected;\r\n}"},
 {"id":195, "name":"setStartDate(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.GanttExportSettings.setStartDate(java.util.Date)", "ownerclassid":"27", "ownerclassname":"net.sourceforge.ganttproject.GanttExportSettings", "sourcecode":"public void setStartDate(Date date) {\r\n    startDate = date;\r\n}"},
 {"id":196, "name":"-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttGraphicArea(GanttProject app, GanttTree2 ttree, TaskManager taskManager, ZoomManager zoomManager, GPUndoManager undoManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myTaskManager = taskManager;\r\n    myUndoManager = undoManager;\r\n    // \r\n    myChartModel = new ChartModelImpl(getTaskManager(), app.getTimeUnitStack(), app.getUIConfiguration());\r\n    myChartModel.addOptionChangeListener(new GPOptionChangeListener() {\r\n        public void optionsChanged() {\r\n            repaint();\r\n        }\r\n    });\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        private boolean isRepaintPending;\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            boolean needRepaint = !(isRepaintPending);\r\n            isRepaintPending = true;\r\n            adjustDependencies(((Task) (e.getSource())));\r\n            if (needRepaint) {\r\n                repaint();\r\n                isRepaintPending = false;\r\n            }\r\n        }\r\n\r\n        public void dependencyAdded(TaskDependencyEvent e) {\r\n            adjustDependencies(e.getDependency().getDependee());\r\n            repaint();\r\n        }\r\n\r\n        public void dependencyRemoved(TaskDependencyEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        private void adjustDependencies(Task task) {\r\n            RecalculateTaskScheduleAlgorithm alg = myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm();\r\n            if (!(alg.isRunning())) {\r\n                try {\r\n                    alg.run(task);\r\n                } catch (TaskDependencyException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                    getUIFacade().showErrorDialog(e);\r\n                }\r\n                // appli.setQuickSave (true);\r\n            }\r\n        }\r\n    });\r\n    // date = new GanttCalendar();\r\n    // \r\n    // date.setDay(1);\r\n    this.tree = ttree;\r\n    margY = 0;\r\n    appli = app;\r\n    // creation of the different color use to paint\r\n    // arrayColor[0] = new Color((float)0.905,(float)0.905,(float)0.905);\r\n    myTableHeader = tree.getTreeTable().getTable().getTableHeader();\r\n    getProject().getTaskCustomColumnManager().addCustomColumnsListener(this);\r\n    myTaskImageGenerator = new TaskTreeImageGenerator(ttree, app.getUIConfiguration());\r\n}"},
 {"id":197, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"1() {\r\n}"},
 {"id":198, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"protected ChangeTaskBoundaryInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary) {\r\n    super(initiatingEvent);\r\n    myTask = taskBoundary.getTask();\r\n    myInitialDuration = myTask.getDuration().getLength(getViewState().getBottomTimeUnit());\r\n    myInitialEnd = getTask().getEnd();\r\n    myInitialStart = getTask().getStart();\r\n}"},
 {"id":199, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public ChangeTaskProgressInteraction(MouseEvent e, TaskProgressChartItem taskProgress) {\r\n    super(e);\r\n    Toolkit toolkit = Toolkit.getDefaultToolkit();\r\n    try {\r\n        setCursor(GanttGraphicArea.CHANGE_PROGRESS_CURSOR);\r\n    } catch (Exception exept) {\r\n        setCursor(GanttGraphicArea.E_RESIZE_CURSOR);\r\n    }\r\n    myTaskProgrssItem = taskProgress;\r\n    myMutator = myTaskProgrssItem.getTask().createMutator();\r\n    myProgressWas = myTaskProgrssItem.getTask().getCompletionPercentage();\r\n}"},
 {"id":200, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public DrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport) {\r\n    super(initiatingEvent);\r\n    myStartPoint = initiatingEvent.getPoint();\r\n    myTask = taskArea.getTask();\r\n    myArrow = new DependencyInteractionRenderer(myStartPoint.x, myStartPoint.y, myStartPoint.x, myStartPoint.y);\r\n    myMouseSupport = mouseSupport;\r\n}"},
 {"id":201, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"MoveTaskInteraction(MouseEvent e, Task task) {\r\n    super(e);\r\n    myTask = task;\r\n    myMutator = task.createMutator();\r\n    myInitialStart = myTask.getStart();\r\n}"},
 {"id":202, "name":"-init-(java.awt.event.MouseEvent,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(java.awt.event.MouseEvent,java.util.List)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"MoveTaskInteractions(MouseEvent e, List tasks) {\r\n    super(e);\r\n    myTasks = tasks;\r\n    myMutators = new ArrayList(myTasks.size());\r\n    myInitialStarts = new ArrayList(myTasks.size());\r\n    Iterator itTasks = myTasks.iterator();\r\n    while (itTasks.hasNext()) {\r\n        Task t = ((Task) (itTasks.next()));\r\n        myMutators.add(t.createMutator());\r\n        myInitialStarts.add(t.getStart());\r\n    } \r\n}"},
 {"id":203, "name":"-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public ScrollGanttChartCenterAction(ScrollingManager scrollingManager, TaskSelectionManager taskSelectionManager, String iconSize) {\r\n    super(\"ScrollCenter\", iconSize);\r\n    myScrollingManager = scrollingManager;\r\n    myTaskSelectionManager = taskSelectionManager;\r\n}"},
 {"id":204, "name":"-init-(int,net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(int,net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"Text(int position, GanttGraphicArea.ChartOptionsPreviewPanel.TaskBar refBar) {\r\n    this.position = position;\r\n    this.taskBar = refBar;\r\n}"},
 {"id":205, "name":"appendBlankRow()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.appendBlankRow()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void appendBlankRow() {\r\n    tree.addBlankLine(null, (-1));\r\n}"},
 {"id":206, "name":"createPreviewComponent()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.createPreviewComponent()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"protected Component createPreviewComponent() {\r\n    return myPreviewPanel;\r\n}"},
 {"id":207, "name":"customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void customColumsChange(CustomColumEvent event) {\r\n    repaint();\r\n}"},
 {"id":208, "name":"drawGPVersion(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.drawGPVersion(java.awt.Graphics)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void drawGPVersion(Graphics g) {\r\n    g.setColor(Color.black);\r\n    g.setFont(Fonts.GP_VERSION_FONT);\r\n    g.drawString(((\"GanttProject (\" + (GanttProject.version)) + \")\"), 3, ((getHeight()) + 18));\r\n}"},
 {"id":209, "name":"getChart(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"/**\r\n * Return an image with the gantt chart\r\n */\r\n// TODO: 1.11 take into account flags \"render this and dont render that\"\r\npublic BufferedImage getChart(GanttExportSettings settings) {\r\n    RenderedChartImage renderedImage = ((RenderedChartImage) (getRenderedImage(settings)));\r\n    BufferedImage result = renderedImage.getWholeImage();\r\n    repaint();\r\n    return result;\r\n}"},
 {"id":210, "name":"getChartImplementation()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getChartImplementation()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"private GanttGraphicArea.ChartImplementation getChartImplementation() {\r\n    if ((myChartComponentImpl) == null) {\r\n        myChartComponentImpl = new GanttGraphicArea.NewChartComponentImpl();\r\n    }\r\n    return myChartComponentImpl;\r\n}"},
 {"id":211, "name":"getChartModel()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getChartModel()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"protected ChartModelBase getChartModel() {\r\n    return myChartModel;\r\n}"},
 {"id":212, "name":"getEndDate()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getEndDate()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public Date getEndDate() {\r\n    TaskLength projectLength = getTaskManager().getProjectLength();\r\n    GanttCalendar pstart = new GanttCalendar(getTaskManager().getProjectStart());\r\n    pstart.add(((int) (projectLength.getLength())));\r\n    GanttCalendar end = pstart.Clone();\r\n    return end.getTime();\r\n}"},
 {"id":213, "name":"getIcon()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getIcon()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public Icon getIcon() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":214, "name":"getImplementation()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getImplementation()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"protected ChartComponentBase.AbstractChartImplementation getImplementation() {\r\n    return ((ChartComponentBase.AbstractChartImplementation) (getChartImplementation()));\r\n}"},
 {"id":215, "name":"getMouseListener()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getMouseListener()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"protected MouseListener getMouseListener() {\r\n    return getChartImplementation().getMouseListener();\r\n}"},
 {"id":216, "name":"getMouseMotionListener()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getMouseMotionListener()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"protected MouseMotionListener getMouseMotionListener() {\r\n    return getChartImplementation().getMouseMotionListener();\r\n}"},
 {"id":217, "name":"getMyChartModel()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getMyChartModel()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public ChartModelImpl getMyChartModel() {\r\n    return myChartModel;\r\n}"},
 {"id":218, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getName()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public String getName() {\r\n    return GanttLanguage.getInstance().getText(\"gantt\");\r\n}"},
 {"id":219, "name":"getPopupMenuActions()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getPopupMenuActions()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"private Action[] getPopupMenuActions() {\r\n    return new Action[]{ getOptionsDialogAction(), new PublicHolidayDialogAction(getProject(), getUIFacade()) };\r\n    // actions.add(createMenuAction(GanttProject.correctLabel(language\r\n    // .getText(\"editPublicHolidays\")), \"));\r\n}"},
 {"id":220, "name":"getPreferredSize()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getPreferredSize()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"/**\r\n * The size of the panel.\r\n */\r\npublic Dimension getPreferredSize() {\r\n    return new Dimension(465, 600);\r\n}"},
 {"id":221, "name":"getProject()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getProject()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"IGanttProject getProject() {\r\n    return appli;\r\n}"},
 {"id":222, "name":"getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public RenderedImage getRenderedImage(GanttExportSettings settings) {\r\n    Date dateStart = null;\r\n    Date dateEnd = null;\r\n    List myItemsToConsider = myTaskImageGenerator.getPrintableNodes(settings);\r\n    TimeUnit unit = getViewState().getBottomTimeUnit();\r\n    dateStart = ((settings.getStartDate()) == null) ? getStartDate() : settings.getStartDate();\r\n    dateEnd = ((settings.getEndDate()) == null) ? getEndDate() : settings.getEndDate();\r\n    // dateStart = new GregorianCalendar(2005,2,25).getTime();\r\n    if (dateStart.after(dateEnd)) {\r\n        Date tmp = ((Date) (dateStart.clone()));\r\n        dateStart = ((Date) (dateEnd.clone()));\r\n        dateEnd = tmp;\r\n    }\r\n    // System.out.println(\"GanttGraphicArea dateStart=\" + dateStart);\r\n    // System.out.println(\"GanttGraphicArea dateEnd=\" + dateEnd);\r\n    TaskLength printedLength = getTaskManager().createLength(unit, dateStart, dateEnd);\r\n    BufferedImage taskImage = ((BufferedImage) (myTaskImageGenerator.createImage(myItemsToConsider)));\r\n    int chartWidth = ((int) (((printedLength.getLength(getViewState().getBottomTimeUnit())) + 1) * (getViewState().getBottomUnitWidth())));\r\n    if (chartWidth < (getWidth())) {\r\n        chartWidth = getWidth();\r\n    }\r\n    int chartHeight = taskImage.getHeight(null);\r\n    return new RenderedGanttChartImage(myChartModel, myChartComponentImpl, GanttTree2.convertNodesListToItemList(myItemsToConsider), taskImage, chartWidth, chartHeight);\r\n}"},
 {"id":223, "name":"getScrollBar()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getScrollBar()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"/**\r\n * Return the value of the JTrees Scrollbar\r\n */\r\npublic int getScrollBar() {\r\n    return margY;\r\n}"},
 {"id":224, "name":"getScrollCenterAction(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getScrollCenterAction(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public Action getScrollCenterAction(ScrollingManager scrollMgr, TaskSelectionManager taskSelMgr, String iconSize) {\r\n    if ((myScrollCenterAction) == null)\r\n        myScrollCenterAction = new GanttGraphicArea.ScrollGanttChartCenterAction(scrollMgr, taskSelMgr, iconSize);\r\n\r\n    return myScrollCenterAction;\r\n}"},
 {"id":225, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getStartDate()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public Date getStartDate() {\r\n    GanttCalendar pstart = new GanttCalendar(getTaskManager().getProjectStart());\r\n    GanttCalendar st = pstart.Clone();\r\n    return st.getTime();\r\n}"},
 {"id":226, "name":"getTaskColor()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getTaskColor()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"/**\r\n * Return the color of the task\r\n */\r\npublic Color getTaskColor() {\r\n    return myUIConfiguration.getTaskColor();\r\n}"},
 {"id":227, "name":"getTree()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getTree()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"private GanttTree2 getTree() {\r\n    return this.tree;\r\n}"},
 {"id":228, "name":"getUndoManager()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.getUndoManager()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"GPUndoManager getUndoManager() {\r\n    return myUndoManager;\r\n}"},
 {"id":229, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.paintComponent(java.awt.Graphics)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void paintComponent(Graphics g) {\r\n    myChartModel.setBounds(getSize());\r\n    myChartComponentImpl.paintComponent(g);\r\n}"},
 {"id":230, "name":"projectClosed()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.projectClosed()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void projectClosed() {\r\n    repaint();\r\n    setProjectLevelTaskColor(null);\r\n    setPreviousStateTasks(null);\r\n}"},
 {"id":231, "name":"projectModified()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.projectModified()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void projectModified() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":232, "name":"projectSaved()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.projectSaved()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void projectSaved() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":233, "name":"repaint()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.repaint()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void repaint() {\r\n    try {\r\n        if (((myChartModel) != null) && ((myTableHeader) != null)) {\r\n            myChartModel.setHeaderHeight(((myTableHeader.getHeight()) + (GanttGraphicArea.HEADER_OFFSET)));\r\n        }\r\n    } catch (NullPointerException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n    super.repaint();\r\n}"},
 {"id":234, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.reset()", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void reset() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":235, "name":"setPreviousStateTasks(java.util.ArrayList)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.setPreviousStateTasks(java.util.ArrayList)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void setPreviousStateTasks(ArrayList tasks) {\r\n    int rowHeight = myChartModel.setPreviousStateTasks(tasks);\r\n    ((GanttTree2) (appli.getTree())).getTable().setRowHeight(rowHeight);\r\n}"},
 {"id":236, "name":"setProjectLevelTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.setProjectLevelTaskColor(java.awt.Color)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"/**\r\n * Change the color of the task\r\n */\r\npublic void setProjectLevelTaskColor(Color c) {\r\n    myUIConfiguration.setProjectLevelTaskColor(c);\r\n}"},
 {"id":237, "name":"setScrollBar(int)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.setScrollBar(int)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"/**\r\n * Change the velue connected to the JTrees Scrollbar\r\n */\r\npublic void setScrollBar(int v) {\r\n    margY = v;\r\n}"},
 {"id":238, "name":"setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void setTaskManager(TaskManager taskManager) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":239, "name":"setUIConfiguration(net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea.setUIConfiguration(net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"45", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea", "sourcecode":"public void setUIConfiguration(UIConfiguration configuration) {\r\n    myUIConfiguration = configuration;\r\n}"},
 {"id":240, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"protected ChangeTaskBoundaryInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary) {\r\n    super(initiatingEvent);\r\n    myTask = taskBoundary.getTask();\r\n    myInitialDuration = myTask.getDuration().getLength(getViewState().getBottomTimeUnit());\r\n    myInitialEnd = getTask().getEnd();\r\n    myInitialStart = getTask().getStart();\r\n}"},
 {"id":241, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.-init-()", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"1() {\r\n}"},
 {"id":242, "name":"apply(float)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.apply(float)", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"protected abstract void apply(float diff);"},
 {"id":243, "name":"apply(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.apply(java.awt.event.MouseEvent)", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"public void apply(MouseEvent e) {\r\n    if ((myLastNotes) == null) {\r\n        myLastNotes = new TaskInteractionHintRenderer(\"\", e.getX(), e.getY());\r\n    }\r\n    float diff = getLengthDiff(e);\r\n    apply(diff);\r\n    myLastNotes.setString(getNotesText());\r\n    myLastNotes.setX(e.getX());\r\n}"},
 {"id":244, "name":"doFinish(net.sourceforge.ganttproject.task.TaskMutator)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.doFinish(net.sourceforge.ganttproject.task.TaskMutator)", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"private void doFinish(TaskMutator mutator) {\r\n    mutator.commit();\r\n    myLastNotes = null;\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n    this.repaint();\r\n}"},
 {"id":245, "name":"finish(net.sourceforge.ganttproject.task.TaskMutator)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.finish(net.sourceforge.ganttproject.task.TaskMutator)", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"public void finish(final TaskMutator mutator) {\r\n    mutator.setIsolationLevel(TaskMutator.READ_COMMITED);\r\n    // if\r\n    // ((!myInitialEnd.equals(getTask().getEnd()))||(!myInitialStart.equals(getTask().getStart())))\r\n    getUndoManager().undoableEdit(\"Task boundary changed\", new Runnable() {\r\n        public void run() {\r\n            doFinish(mutator);\r\n        }\r\n    });\r\n}"},
 {"id":246, "name":"getInitialDuration()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.getInitialDuration()", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"protected float getInitialDuration() {\r\n    return myInitialDuration;\r\n}"},
 {"id":247, "name":"getNotesText()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.getNotesText()", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"protected abstract String getNotesText();"},
 {"id":248, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.getTask()", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"protected Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":249, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.paint(java.awt.Graphics)", "ownerclassid":"28", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "sourcecode":"public void paint(Graphics g) {\r\n    if ((myLastNotes) != null) {\r\n        myLastNotes.paint(g);\r\n    }\r\n}"},
 {"id":250, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "ownerclassid":"29", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction", "sourcecode":"public ChangeTaskEndInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary) {\r\n    super(initiatingEvent, taskBoundary);\r\n    setCursor(GanttGraphicArea.E_RESIZE_CURSOR);\r\n    myMutator = getTask().createMutator();\r\n    myInitialEnd = getTask().getEnd();\r\n}"},
 {"id":251, "name":"apply(float)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction.apply(float)", "ownerclassid":"29", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction", "sourcecode":"protected void apply(float diff) {\r\n    TaskLength newLength = getTaskManager().createLength(getViewState().getBottomTimeUnit(), ((getInitialDuration()) + diff));\r\n    TaskLength translated = getTask().translateDuration(newLength);\r\n    if ((translated.getLength()) != 0) {\r\n        myMutator.setDuration(translated);\r\n    }\r\n}"},
 {"id":252, "name":"finish()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction.finish()", "ownerclassid":"29", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction", "sourcecode":"public void finish() {\r\n    super.finish(myMutator);\r\n}"},
 {"id":253, "name":"getNotesText()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction.getNotesText()", "ownerclassid":"29", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction", "sourcecode":"protected String getNotesText() {\r\n    return getTask().getEnd().toString();\r\n}"},
 {"id":254, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "ownerclassid":"30", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction", "sourcecode":"public ChangeTaskProgressInteraction(MouseEvent e, TaskProgressChartItem taskProgress) {\r\n    super(e);\r\n    Toolkit toolkit = Toolkit.getDefaultToolkit();\r\n    try {\r\n        setCursor(GanttGraphicArea.CHANGE_PROGRESS_CURSOR);\r\n    } catch (Exception exept) {\r\n        setCursor(GanttGraphicArea.E_RESIZE_CURSOR);\r\n    }\r\n    myTaskProgrssItem = taskProgress;\r\n    myMutator = myTaskProgrssItem.getTask().createMutator();\r\n    myProgressWas = myTaskProgrssItem.getTask().getCompletionPercentage();\r\n}"},
 {"id":255, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction.-init-()", "ownerclassid":"30", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction", "sourcecode":"1() {\r\n}"},
 {"id":256, "name":"apply(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction.apply(java.awt.event.MouseEvent)", "ownerclassid":"30", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction", "sourcecode":"public void apply(MouseEvent event) {\r\n    // int deltaProgress =\r\n    // (int)myTaskProgrssItem.getProgressDelta(event.getX());\r\n    float deltaUnits = getLengthDiff(event);\r\n    int deltaPercents = ((int) ((100 * deltaUnits) / (myTaskProgrssItem.getTask().getDuration().getLength(getViewState().getBottomTimeUnit()))));\r\n    int newProgress = (myProgressWas) + deltaPercents;\r\n    if (newProgress > 100) {\r\n        newProgress = 100;\r\n    }\r\n    if (newProgress < 0) {\r\n        newProgress = 0;\r\n    }\r\n    myProgressIs = newProgress;\r\n    myMutator.setCompletionPercentage(newProgress);\r\n    myLastNotes = new TaskInteractionHintRenderer((newProgress + \"%\"), event.getX(), ((event.getY()) - 30));\r\n}"},
 {"id":257, "name":"doFinish(net.sourceforge.ganttproject.task.TaskMutator)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction.doFinish(net.sourceforge.ganttproject.task.TaskMutator)", "ownerclassid":"30", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction", "sourcecode":"private void doFinish(TaskMutator mutator) {\r\n    mutator.commit();\r\n    myLastNotes = null;\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n    if ((myProgressIs) == (myProgressWas)) {\r\n        // getUndoManager ().die ();\r\n        myMutator.commit();\r\n        repaint();\r\n        int myProgressIs = myTaskProgrssItem.getTask().getCompletionPercentage();\r\n        if (myProgressIs != (myProgressWas)) {\r\n            // appli.setQuickSave(true);\r\n            // appli.quickSave (\"Task progress changed\");\r\n        }\r\n    }\r\n}"},
 {"id":258, "name":"finish()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction.finish()", "ownerclassid":"30", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction", "sourcecode":"public void finish() {\r\n    myMutator.setIsolationLevel(TaskMutator.READ_COMMITED);\r\n    getUndoManager().undoableEdit(\"Task progress changed\", new Runnable() {\r\n        public void run() {\r\n            doFinish(myMutator);\r\n        }\r\n    });\r\n    this.repaint();\r\n}"},
 {"id":259, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction.paint(java.awt.Graphics)", "ownerclassid":"30", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction", "sourcecode":"public void paint(Graphics g) {\r\n    if ((myLastNotes) != null) {\r\n        myLastNotes.paint(g);\r\n    }\r\n}"},
 {"id":260, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "ownerclassid":"31", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction", "sourcecode":"ChangeTaskStartInteraction(MouseEvent e, TaskBoundaryChartItem taskBoundary) {\r\n    super(e, taskBoundary);\r\n    setCursor(GanttGraphicArea.W_RESIZE_CURSOR);\r\n    myInitialLength = getTask().getDuration();\r\n    myMutator = getTask().createMutator();\r\n    myInitialStart = getTask().getStart();\r\n}"},
 {"id":261, "name":"apply(float)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction.apply(float)", "ownerclassid":"31", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction", "sourcecode":"protected void apply(float diff) {\r\n    TaskLength newLength = getTaskManager().createLength(getViewState().getBottomTimeUnit(), ((getInitialDuration()) + diff));\r\n    TaskLength translated = getTask().translateDuration(newLength);\r\n    int dayDiff = ((int) ((translated.getValue()) - (myInitialLength.getValue())));\r\n    // System.err.println(\"[ChangeTaskStart] dayDiff=\"+dayDiff+\"\r\n    // newLength=\"+newLength+\" translated=\"+translated);\r\n    if (dayDiff != 0) {\r\n        // System.err.println(\"[ChangeTaskStartInteraction] apply():\r\n        // oldStart=\"+getTask().getStart());\r\n        GanttCalendar newStart = myInitialStart.newAdd(dayDiff);\r\n        // System.err.println(\"newStart\"+newStart);\r\n        if ((newStart.compareTo(getTask().getEnd())) < 0) {\r\n            myMutator.setStart(newStart);\r\n            if (((getTask().getThird()) != null) && ((getTask().getThirdDateConstraint()) == (TaskImpl.EARLIESTBEGIN)))\r\n                myMutator.setEnd(getTask().getEnd().Clone());\r\n\r\n        }\r\n        // getTask().applyThirdDateConstraint();\r\n        // mutator.commit();\r\n        // myInitialLength = getTask().getDuration();\r\n    }\r\n}"},
 {"id":262, "name":"finish()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction.finish()", "ownerclassid":"31", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction", "sourcecode":"public void finish() {\r\n    super.finish(myMutator);\r\n    getTask().applyThirdDateConstraint();\r\n}"},
 {"id":263, "name":"getNotesText()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction.getNotesText()", "ownerclassid":"31", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction", "sourcecode":"protected String getNotesText() {\r\n    return getTask().getStart().toString();\r\n}"},
 {"id":264, "name":"beginChangeTaskEndInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginChangeTaskEndInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void beginChangeTaskEndInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary);"},
 {"id":265, "name":"beginChangeTaskProgressInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginChangeTaskProgressInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void beginChangeTaskProgressInteraction(MouseEvent e, TaskProgressChartItem item);"},
 {"id":266, "name":"beginChangeTaskStartInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginChangeTaskStartInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void beginChangeTaskStartInteraction(MouseEvent e, TaskBoundaryChartItem taskBoundary);"},
 {"id":267, "name":"beginDrawDependencyInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginDrawDependencyInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void beginDrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport);"},
 {"id":268, "name":"beginMoveTaskInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginMoveTaskInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void beginMoveTaskInteraction(MouseEvent e, Task task);"},
 {"id":269, "name":"beginMoveTaskInteractions(java.awt.event.MouseEvent,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginMoveTaskInteractions(java.awt.event.MouseEvent,java.util.List)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void beginMoveTaskInteractions(MouseEvent e, List tasks);"},
 {"id":270, "name":"beginScrollViewInteraction(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginScrollViewInteraction(java.awt.event.MouseEvent)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void beginScrollViewInteraction(MouseEvent e);"},
 {"id":271, "name":"finishInteraction()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.finishInteraction()", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"ChartComponentBase.MouseInteraction finishInteraction();"},
 {"id":272, "name":"getActiveInteraction()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.getActiveInteraction()", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"ChartComponentBase.MouseInteraction getActiveInteraction();"},
 {"id":273, "name":"getMouseListener()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.getMouseListener()", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"MouseListener getMouseListener();"},
 {"id":274, "name":"getMouseMotionListener()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.getMouseMotionListener()", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"MouseMotionListener getMouseMotionListener();"},
 {"id":275, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.paintComponent(java.awt.Graphics)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void paintComponent(Graphics g);"},
 {"id":276, "name":"paintComponent(java.awt.Graphics,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.paintComponent(java.awt.Graphics,java.util.List)", "ownerclassid":"32", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "sourcecode":"void paintComponent(Graphics g, /* <Task> */\r\nList visibleTasks);"},
 {"id":277, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.-init-()", "ownerclassid":"33", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "sourcecode":"ChartImplementationBase() {\r\n}"},
 {"id":278, "name":"beginChangeTaskEndInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginChangeTaskEndInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "ownerclassid":"33", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "sourcecode":"public void beginChangeTaskEndInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary) {\r\n    setActiveInteraction(new GanttGraphicArea.ChangeTaskEndInteraction(initiatingEvent, taskBoundary));\r\n}"},
 {"id":279, "name":"beginChangeTaskProgressInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginChangeTaskProgressInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "ownerclassid":"33", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "sourcecode":"public void beginChangeTaskProgressInteraction(MouseEvent e, TaskProgressChartItem taskProgress) {\r\n    setActiveInteraction(new GanttGraphicArea.ChangeTaskProgressInteraction(e, taskProgress));\r\n}"},
 {"id":280, "name":"beginChangeTaskStartInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginChangeTaskStartInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "ownerclassid":"33", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "sourcecode":"public void beginChangeTaskStartInteraction(MouseEvent e, TaskBoundaryChartItem taskBoundary) {\r\n    setActiveInteraction(new GanttGraphicArea.ChangeTaskStartInteraction(e, taskBoundary));\r\n}"},
 {"id":281, "name":"beginDrawDependencyInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginDrawDependencyInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "ownerclassid":"33", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "sourcecode":"public void beginDrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport) {\r\n    setActiveInteraction(new GanttGraphicArea.DrawDependencyInteraction(initiatingEvent, taskArea, mouseSupport));\r\n}"},
 {"id":282, "name":"beginMoveTaskInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginMoveTaskInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"33", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "sourcecode":"public void beginMoveTaskInteraction(MouseEvent e, Task task) {\r\n    setActiveInteraction(new GanttGraphicArea.MoveTaskInteraction(e, task));\r\n}"},
 {"id":283, "name":"beginMoveTaskInteractions(java.awt.event.MouseEvent,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginMoveTaskInteractions(java.awt.event.MouseEvent,java.util.List)", "ownerclassid":"33", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "sourcecode":"public void beginMoveTaskInteractions(MouseEvent e, List tasks) {\r\n    setActiveInteraction(new GanttGraphicArea.MoveTaskInteractions(e, tasks));\r\n}"},
 {"id":284, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel.-init-()", "ownerclassid":"34", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel", "sourcecode":"public ChartOptionsPreviewPanel() {\r\n    super();\r\n    addToDispatchers();\r\n    setBackground(Color.WHITE);\r\n    setPreferredSize(new Dimension(450, 70));\r\n    taskBar = new GanttGraphicArea.ChartOptionsPreviewPanel.TaskBar();\r\n    upText = new GanttGraphicArea.ChartOptionsPreviewPanel.Text(GanttGraphicArea.ChartOptionsPreviewPanel.Text.UP, taskBar);\r\n    downText = new GanttGraphicArea.ChartOptionsPreviewPanel.Text(GanttGraphicArea.ChartOptionsPreviewPanel.Text.DOWN, taskBar);\r\n    leftText = new GanttGraphicArea.ChartOptionsPreviewPanel.Text(GanttGraphicArea.ChartOptionsPreviewPanel.Text.LEFT, taskBar);\r\n    rightText = new GanttGraphicArea.ChartOptionsPreviewPanel.Text(GanttGraphicArea.ChartOptionsPreviewPanel.Text.RIGHT, taskBar);\r\n}"},
 {"id":285, "name":"-init-(int,net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel.-init-(int,net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar)", "ownerclassid":"34", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel", "sourcecode":"Text(int position, GanttGraphicArea.ChartOptionsPreviewPanel.TaskBar refBar) {\r\n    this.position = position;\r\n    this.taskBar = refBar;\r\n}"},
 {"id":286, "name":"addToDispatchers()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel.addToDispatchers()", "ownerclassid":"34", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel", "sourcecode":"private void addToDispatchers() {\r\n    List dispatchers = Mediator.getChangeValueDispatchers();\r\n    for (int i = 0; i < (dispatchers.size()); i++) {\r\n        ((ChangeValueDispatcher) (dispatchers.get(i))).addChangeValueListener(this);\r\n    }\r\n}"},
 {"id":287, "name":"changeValue(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel.changeValue(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "ownerclassid":"34", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel", "sourcecode":"public void changeValue(ChangeValueEvent event) {\r\n    Object id = event.getID();\r\n    if (id.equals(\"up\")) {\r\n        upText.text = GanttGraphicArea.ChartOptionsPreviewPanel.getI18n(event.getNewValue().toString());\r\n    } else\r\n        if (id.equals(\"down\")) {\r\n            downText.text = GanttGraphicArea.ChartOptionsPreviewPanel.getI18n(event.getNewValue().toString());\r\n        } else\r\n            if (id.equals(\"left\")) {\r\n                leftText.text = GanttGraphicArea.ChartOptionsPreviewPanel.getI18n(event.getNewValue().toString());\r\n            } else\r\n                if (id.equals(\"right\")) {\r\n                    rightText.text = GanttGraphicArea.ChartOptionsPreviewPanel.getI18n(event.getNewValue().toString());\r\n                }\r\n\r\n\r\n\r\n    repaint();\r\n}"},
 {"id":288, "name":"getI18n(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel.getI18n(java.lang.String)", "ownerclassid":"34", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel", "sourcecode":"static String getI18n(String id) {\r\n    String res = GanttLanguage.getInstance().getText(((\"optionValue.\" + id) + \".label\"));\r\n    if (res.startsWith(GanttLanguage.MISSING_RESOURCE)) {\r\n        res = id;\r\n    }\r\n    return res;\r\n}"},
 {"id":289, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel.paint(java.awt.Graphics)", "ownerclassid":"34", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel", "sourcecode":"public void paint(Graphics g) {\r\n    super.paint(g);\r\n    taskBar.paintMe(g);\r\n    upText.paintMe(g);\r\n    downText.paintMe(g);\r\n    leftText.paintMe(g);\r\n    rightText.paintMe(g);\r\n}"},
 {"id":290, "name":"refresh()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel.refresh()", "ownerclassid":"34", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel", "sourcecode":"void refresh() {\r\n}"},
 {"id":291, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar.-init-()", "ownerclassid":"35", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar", "sourcecode":"TaskBar() {\r\n    width = 100;\r\n    height = 12;\r\n    x = ((int) (((this.getPreferredSize().getWidth()) / 2) - ((width) / 2)));\r\n    y = ((int) (((this.getPreferredSize().getHeight()) / 2) - ((height) / 2)));\r\n    color = new Color(140, 182, 206);\r\n}"},
 {"id":292, "name":"paintMe(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar.paintMe(java.awt.Graphics)", "ownerclassid":"35", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar", "sourcecode":"void paintMe(Graphics g) {\r\n    g.setColor(color);\r\n    g.fillRect(x, y, width, height);\r\n    g.setColor(Color.BLACK);\r\n    g.drawRect(x, y, width, height);\r\n}"},
 {"id":293, "name":"-init-(int,net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$Text.-init-(int,net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar)", "ownerclassid":"36", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$Text", "sourcecode":"Text(int position, GanttGraphicArea.ChartOptionsPreviewPanel.TaskBar refBar) {\r\n    this.position = position;\r\n    this.taskBar = refBar;\r\n}"},
 {"id":294, "name":"calculateCoordinates(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$Text.calculateCoordinates(java.awt.Graphics)", "ownerclassid":"36", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$Text", "sourcecode":"private void calculateCoordinates(Graphics g) {\r\n    int textHeight = g.getFontMetrics(GanttGraphicArea.ChartOptionsPreviewPanel.Text.FONT).getHeight();\r\n    int textWidth = g.getFontMetrics(GanttGraphicArea.ChartOptionsPreviewPanel.Text.FONT).stringWidth(text);\r\n    switch (position) {\r\n        case GanttGraphicArea.ChartOptionsPreviewPanel.Text.UP :\r\n            y = (taskBar.y) - (GanttGraphicArea.ChartOptionsPreviewPanel.Text.MARGIN);\r\n            x = ((taskBar.x) + ((taskBar.width) / 2)) - (textWidth / 2);\r\n            break;\r\n        case GanttGraphicArea.ChartOptionsPreviewPanel.Text.DOWN :\r\n            x = ((taskBar.x) + ((taskBar.width) / 2)) - (textWidth / 2);\r\n            y = (((taskBar.y) + (taskBar.height)) + textHeight) - (GanttGraphicArea.ChartOptionsPreviewPanel.Text.MARGIN);\r\n            break;\r\n        case GanttGraphicArea.ChartOptionsPreviewPanel.Text.LEFT :\r\n            y = (((taskBar.y) + ((taskBar.height) / 2)) + (textHeight / 2)) - (GanttGraphicArea.ChartOptionsPreviewPanel.Text.MARGIN);\r\n            x = ((taskBar.x) - (GanttGraphicArea.ChartOptionsPreviewPanel.Text.MARGIN)) - textWidth;\r\n            break;\r\n        case GanttGraphicArea.ChartOptionsPreviewPanel.Text.RIGHT :\r\n            y = (((taskBar.y) + ((taskBar.height) / 2)) + (textHeight / 2)) - (GanttGraphicArea.ChartOptionsPreviewPanel.Text.MARGIN);\r\n            x = ((taskBar.x) + (taskBar.width)) + (GanttGraphicArea.ChartOptionsPreviewPanel.Text.MARGIN);\r\n            break;\r\n    }\r\n}"},
 {"id":295, "name":"paintMe(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$Text.paintMe(java.awt.Graphics)", "ownerclassid":"36", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$Text", "sourcecode":"void paintMe(Graphics g) {\r\n    calculateCoordinates(g);\r\n    g.setFont(GanttGraphicArea.ChartOptionsPreviewPanel.Text.FONT);\r\n    g.drawString(text, x, y);\r\n}"},
 {"id":296, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "ownerclassid":"37", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "sourcecode":"public DrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport) {\r\n    super(initiatingEvent);\r\n    myStartPoint = initiatingEvent.getPoint();\r\n    myTask = taskArea.getTask();\r\n    myArrow = new DependencyInteractionRenderer(myStartPoint.x, myStartPoint.y, myStartPoint.x, myStartPoint.y);\r\n    myMouseSupport = mouseSupport;\r\n}"},
 {"id":297, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.-init-()", "ownerclassid":"37", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "sourcecode":"1() {\r\n}"},
 {"id":298, "name":"apply(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.apply(java.awt.event.MouseEvent)", "ownerclassid":"37", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "sourcecode":"public void apply(MouseEvent event) {\r\n    myArrow.changePoint2(event.getX(), event.getY());\r\n    // myDependant = myMouseSupport.findTaskUnderMousePointer(\r\n    // event.getX(), event.getY());\r\n    myLastMouseEvent = event;\r\n}"},
 {"id":299, "name":"createDependency(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.createDependency(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"37", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "sourcecode":"private void createDependency(final Task dependee) {\r\n    try {\r\n        getTaskManager().getDependencyCollection().createDependency(myDependant, dependee, new FinishStartConstraintImpl());\r\n    } catch (TaskDependencyException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n    getProject().setModified();\r\n}"},
 {"id":300, "name":"finish()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.finish()", "ownerclassid":"37", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "sourcecode":"public void finish() {\r\n    if ((myLastMouseEvent) != null) {\r\n        myDependant = myMouseSupport.findTaskUnderMousePointer(myLastMouseEvent.getX(), myLastMouseEvent.getY());\r\n        if ((myDependant) != null) {\r\n            if (getTaskManager().getDependencyCollection().canCreateDependency(myDependant, myTask)) {\r\n                getUndoManager().undoableEdit(\"Draw dependency\", new Runnable() {\r\n                    public void run() {\r\n                        createDependency(myTask);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            myArrow = new DependencyInteractionRenderer();\r\n            repaint();\r\n        }\r\n    }\r\n}"},
 {"id":301, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.paint(java.awt.Graphics)", "ownerclassid":"37", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "sourcecode":"public void paint(Graphics g) {\r\n    myArrow.paint(g);\r\n}"},
 {"id":302, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport.-init-()", "ownerclassid":"38", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport", "sourcecode":"MouseSupport() {\r\n}"},
 {"id":303, "name":"findTaskUnderMousePointer(int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport.findTaskUnderMousePointer(int,int)", "ownerclassid":"38", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport", "sourcecode":"protected Task findTaskUnderMousePointer(int xpos, int ypos) {\r\n    // int taskID = detectPosition(xpos, ypos, false);\r\n    // return taskID==-1 ? null : getTaskManager().getTask(taskID);\r\n    ChartItem chartItem = myChartModel.getChartItemWithCoordinates(xpos, ypos);\r\n    return chartItem == null ? null : chartItem.getTask();\r\n}"},
 {"id":304, "name":"getChartItemUnderMousePoint(int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport.getChartItemUnderMousePoint(int,int)", "ownerclassid":"38", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport", "sourcecode":"protected ChartItem getChartItemUnderMousePoint(int xpos, int ypos) {\r\n    ChartItem result = myChartModel.getChartItemWithCoordinates(xpos, ypos);\r\n    return result;\r\n}"},
 {"id":305, "name":"-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"39", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction", "sourcecode":"MoveTaskInteraction(MouseEvent e, Task task) {\r\n    super(e);\r\n    myTask = task;\r\n    myMutator = task.createMutator();\r\n    myInitialStart = myTask.getStart();\r\n}"},
 {"id":306, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction.-init-()", "ownerclassid":"39", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction", "sourcecode":"1() {\r\n}"},
 {"id":307, "name":"apply(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction.apply(java.awt.event.MouseEvent)", "ownerclassid":"39", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction", "sourcecode":"public void apply(MouseEvent event) {\r\n    float diff = getChartModel().calculateLengthNoWeekends(getStartX(), event.getX());\r\n    TaskLength bottomUnitLength = getTaskManager().createLength(getViewState().getBottomTimeUnit(), diff);\r\n    TaskLength taskLength = myTask.translateDuration(bottomUnitLength);\r\n    int dayDiff = ((int) (taskLength.getValue()));\r\n    // System.err.println(\"[MoveTaskInteraction] apply():\r\n    // dayDiff=\"+dayDiff+\" bottomUnitLength=\"+bottomUnitLength+\"\r\n    // translated=\"+taskLength);\r\n    if (dayDiff != 0) {\r\n        myMutator.shift(dayDiff);\r\n    }\r\n}"},
 {"id":308, "name":"doFinish()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction.doFinish()", "ownerclassid":"39", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction", "sourcecode":"private void doFinish() {\r\n    myMutator.commit();\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n    this.repaint();\r\n}"},
 {"id":309, "name":"finish()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction.finish()", "ownerclassid":"39", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction", "sourcecode":"public void finish() {\r\n    myMutator.setIsolationLevel(TaskMutator.READ_COMMITED);\r\n    getUndoManager().undoableEdit(\"Task moved\", new Runnable() {\r\n        public void run() {\r\n            doFinish();\r\n        }\r\n    });\r\n}"},
 {"id":310, "name":"-init-(java.awt.event.MouseEvent,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions.-init-(java.awt.event.MouseEvent,java.util.List)", "ownerclassid":"40", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions", "sourcecode":"MoveTaskInteractions(MouseEvent e, List tasks) {\r\n    super(e);\r\n    myTasks = tasks;\r\n    myMutators = new ArrayList(myTasks.size());\r\n    myInitialStarts = new ArrayList(myTasks.size());\r\n    Iterator itTasks = myTasks.iterator();\r\n    while (itTasks.hasNext()) {\r\n        Task t = ((Task) (itTasks.next()));\r\n        myMutators.add(t.createMutator());\r\n        myInitialStarts.add(t.getStart());\r\n    } \r\n}"},
 {"id":311, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions.-init-()", "ownerclassid":"40", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions", "sourcecode":"1() {\r\n}"},
 {"id":312, "name":"apply(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions.apply(java.awt.event.MouseEvent)", "ownerclassid":"40", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions", "sourcecode":"public void apply(MouseEvent event) {\r\n    float diff = getLengthDiff(event);\r\n    TaskLength bottomUnitLength = getTaskManager().createLength(getViewState().getBottomTimeUnit(), diff);\r\n    for (int i = 0; i < (myTasks.size()); i++) {\r\n        Task task = ((Task) (myTasks.get(i)));\r\n        TaskLength taskLength = task.translateDuration(bottomUnitLength);\r\n        int dayDiff = ((int) (taskLength.getValue()));\r\n        if (dayDiff != 0) {\r\n            ((TaskMutator) (myMutators.get(i))).shift(dayDiff);\r\n        }\r\n    }\r\n}"},
 {"id":313, "name":"doFinish()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions.doFinish()", "ownerclassid":"40", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions", "sourcecode":"private void doFinish() {\r\n    Iterator itMutators = myMutators.iterator();\r\n    while (itMutators.hasNext())\r\n        ((TaskMutator) (itMutators.next())).commit();\r\n\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n    Iterator itTasks = myTasks.iterator();\r\n    while (itTasks.hasNext()) {\r\n        Task t = ((Task) (itTasks.next()));\r\n        t.applyThirdDateConstraint();\r\n    } \r\n    this.repaint();\r\n}"},
 {"id":314, "name":"finish()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions.finish()", "ownerclassid":"40", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteractions", "sourcecode":"public void finish() {\r\n    Iterator itMutators = myMutators.iterator();\r\n    while (itMutators.hasNext())\r\n        ((TaskMutator) (itMutators.next())).setIsolationLevel(TaskMutator.READ_COMMITED);\r\n\r\n    getUndoManager().undoableEdit(\"Task moved\", new Runnable() {\r\n        public void run() {\r\n            doFinish();\r\n        }\r\n    });\r\n}"},
 {"id":315, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.-init-()", "ownerclassid":"41", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "sourcecode":"NewChartComponentImpl() {\r\n}"},
 {"id":316, "name":"canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"41", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "sourcecode":"public IStatus canPaste(ChartSelection selection) {\r\n    return Status.OK_STATUS;\r\n}"},
 {"id":317, "name":"getMouseListener()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.getMouseListener()", "ownerclassid":"41", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "sourcecode":"public MouseListener getMouseListener() {\r\n    return myMouseListener;\r\n}"},
 {"id":318, "name":"getMouseMotionListener()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.getMouseMotionListener()", "ownerclassid":"41", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "sourcecode":"public MouseMotionListener getMouseMotionListener() {\r\n    return myMouseMotionListener;\r\n}"},
 {"id":319, "name":"getSelection()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.getSelection()", "ownerclassid":"41", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "sourcecode":"public ChartSelection getSelection() {\r\n    ChartComponentBase.ChartSelectionImpl result = new ChartComponentBase.ChartSelectionImpl() {\r\n        public boolean isEmpty() {\r\n            return false;\r\n        }\r\n\r\n        public void startCopyClipboardTransaction() {\r\n            super.startCopyClipboardTransaction();\r\n            tree.copySelectedNode();\r\n        }\r\n\r\n        public void startMoveClipboardTransaction() {\r\n            super.startMoveClipboardTransaction();\r\n            tree.cutSelectedNode();\r\n        }\r\n    };\r\n    return result;\r\n}"},
 {"id":320, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.paintComponent(java.awt.Graphics)", "ownerclassid":"41", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "sourcecode":"public void paintComponent(Graphics g) {\r\n    synchronized(ChartModelBase.STATIC_MUTEX) {\r\n        GanttGraphicArea.super.paintComponent(g);\r\n        ChartModel model = this.myChartModel;\r\n        model.setTaskContainment(appli.getTaskContainment());\r\n        // model.setBounds(getSize());\r\n        // System.err.println(\"[NewChartComponentImpl] paintComponent. unit\r\n        // width=\"+getViewState().getBottomUnitWidth());\r\n        model.setBottomUnitWidth(getViewState().getBottomUnitWidth());\r\n        model.setRowHeight(((GanttTree2) (tree)).getTreeTable().getRowHeight());\r\n        model.setTopTimeUnit(getViewState().getTopTimeUnit());\r\n        model.setBottomTimeUnit(getViewState().getBottomTimeUnit());\r\n        VisibleNodesFilter visibleNodesFilter = new VisibleNodesFilter();\r\n        List visibleTasks = visibleNodesFilter.getVisibleNodes(tree.getJTree(), getScrollBar(), getHeight(), tree.getTreeTable().getRowHeight());\r\n        model.setVisibleTasks(visibleTasks);\r\n        // myChartModel.setExplicitlyHiddenTasks(tree.getHiddenTasks());\r\n        model.setVerticalOffset(((getScrollBar()) % (tree.getTreeTable().getRowHeight())));\r\n        model.paint(g);\r\n        if ((getActiveInteraction()) != null) {\r\n            getActiveInteraction().paint(g);\r\n        }\r\n    }\r\n}"},
 {"id":321, "name":"paintComponent(java.awt.Graphics,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.paintComponent(java.awt.Graphics,java.util.List)", "ownerclassid":"41", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "sourcecode":"public void paintComponent(Graphics g, /* <Task> */\r\nList visibleTasks) {\r\n    synchronized(ChartModelBase.STATIC_MUTEX) {\r\n        GanttGraphicArea.super.paintComponent(g);\r\n        ChartModel model = this.myChartModel;\r\n        model.setTaskContainment(appli.getTaskContainment());\r\n        // model.setBounds(getSize());\r\n        // System.err.println(\"[NewChartComponentImpl] paintComponent. unit\r\n        // width=\"+getViewState().getBottomUnitWidth());\r\n        model.setBottomUnitWidth(getViewState().getBottomUnitWidth());\r\n        model.setRowHeight(((GanttTree2) (tree)).getTreeTable().getRowHeight());\r\n        model.setTopTimeUnit(getViewState().getTopTimeUnit());\r\n        model.setBottomTimeUnit(getViewState().getBottomTimeUnit());\r\n        model.setVisibleTasks(visibleTasks);\r\n        model.paint(g);\r\n        if ((getActiveInteraction()) != null) {\r\n            getActiveInteraction().paint(g);\r\n        }\r\n    }\r\n}"},
 {"id":322, "name":"paste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"41", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "sourcecode":"public void paste(ChartSelection selection) {\r\n    tree.pasteNode();\r\n}"},
 {"id":323, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl.-init-()", "ownerclassid":"42", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl", "sourcecode":"OldChartMouseListenerImpl() {\r\n}"},
 {"id":324, "name":"getPopupMenuActions()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl.getPopupMenuActions()", "ownerclassid":"42", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl", "sourcecode":"protected Action[] getPopupMenuActions() {\r\n    Action[] treeActions = tree.getPopupMenuActions();\r\n    int sep = 0;\r\n    if ((treeActions.length) != 0) {\r\n        sep = 1;\r\n    }\r\n    Action[] chartActions = this.getPopupMenuActions();\r\n    Action[] result = new Action[((treeActions.length) + sep) + (chartActions.length)];\r\n    System.arraycopy(treeActions, 0, result, 0, treeActions.length);\r\n    System.arraycopy(chartActions, 0, result, ((treeActions.length) + sep), chartActions.length);\r\n    return result;\r\n}"},
 {"id":325, "name":"mouseClicked(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl.mouseClicked(java.awt.event.MouseEvent)", "ownerclassid":"42", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl", "sourcecode":"public void mouseClicked(MouseEvent e) {\r\n    if ((e.getButton()) == (MouseEvent.BUTTON1)) {\r\n        Task taskUnderPointer = myMouseSupport.findTaskUnderMousePointer(e.getX(), e.getY());\r\n        if (taskUnderPointer == null) {\r\n            tree.selectTreeRow((-1));\r\n        }\r\n    }\r\n    if (((e.getClickCount()) == 2) && ((e.getButton()) == (MouseEvent.BUTTON1))) {\r\n        if (!(appli.isOnlyViewer))\r\n            appli.propertiesTask();\r\n\r\n    }\r\n}"},
 {"id":326, "name":"mousePressed(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl.mousePressed(java.awt.event.MouseEvent)", "ownerclassid":"42", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl", "sourcecode":"public void mousePressed(MouseEvent e) {\r\n    tree.stopEditing();\r\n    if (appli.isOnlyViewer)\r\n        return;\r\n\r\n    Task taskUnderPointer = myMouseSupport.findTaskUnderMousePointer(e.getX(), e.getY());\r\n    if ((taskUnderPointer != null) && (!(Mediator.getTaskSelectionManager().isTaskSelected(taskUnderPointer)))) {\r\n        boolean ctrl = ((e.getModifiersEx()) & (InputEvent.CTRL_DOWN_MASK)) == (InputEvent.CTRL_DOWN_MASK);\r\n        tree.selectTask(taskUnderPointer, ctrl);\r\n    }\r\n    super.mousePressed(e);\r\n    if (taskUnderPointer == null) {\r\n        return;\r\n    }\r\n    if ((e.getButton()) == (MouseEvent.BUTTON2)) {\r\n        if (!(Mediator.getTaskSelectionManager().isTaskSelected(taskUnderPointer)))\r\n            tree.selectTask(taskUnderPointer, false);\r\n\r\n        List l = Mediator.getTaskSelectionManager().getSelectedTasks();\r\n        getChartImplementation().beginMoveTaskInteractions(e, l);\r\n    }\r\n}"},
 {"id":327, "name":"processLeftButton(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl.processLeftButton(java.awt.event.MouseEvent)", "ownerclassid":"42", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$OldChartMouseListenerImpl", "sourcecode":"protected void processLeftButton(MouseEvent e) {\r\n    boolean isMineEvent = true;\r\n    ChartItem itemUnderPoint = myMouseSupport.getChartItemUnderMousePoint(e.getX(), e.getY());\r\n    if (itemUnderPoint instanceof TaskBoundaryChartItem) {\r\n        TaskBoundaryChartItem taskBoundary = ((TaskBoundaryChartItem) (itemUnderPoint));\r\n        if (taskBoundary.isStartBoundary()) {\r\n            getChartImplementation().beginChangeTaskStartInteraction(e, taskBoundary);\r\n        } else {\r\n            getChartImplementation().beginChangeTaskEndInteraction(e, taskBoundary);\r\n        }\r\n    } else\r\n        if (itemUnderPoint instanceof TaskProgressChartItem) {\r\n            getChartImplementation().beginChangeTaskProgressInteraction(e, ((TaskProgressChartItem) (itemUnderPoint)));\r\n        } else\r\n            if (itemUnderPoint instanceof TaskRegularAreaChartItem) {\r\n                getChartImplementation().beginDrawDependencyInteraction(e, ((TaskRegularAreaChartItem) (itemUnderPoint)), myMouseSupport);\r\n            } else {\r\n                isMineEvent = false;\r\n                super.processLeftButton(e);\r\n            }\r\n\r\n\r\n    if (isMineEvent) {\r\n        repaint();\r\n        appli.recalculateCriticalPath();\r\n    }\r\n}"},
 {"id":328, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$OldMouseMotionListenerImpl.-init-()", "ownerclassid":"43", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$OldMouseMotionListenerImpl", "sourcecode":"OldMouseMotionListenerImpl() {\r\n}"},
 {"id":329, "name":"mouseDragged(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$OldMouseMotionListenerImpl.mouseDragged(java.awt.event.MouseEvent)", "ownerclassid":"43", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$OldMouseMotionListenerImpl", "sourcecode":"public void mouseDragged(MouseEvent e) {\r\n    if (appli.isOnlyViewer)\r\n        return;\r\n\r\n    super.mouseDragged(e);\r\n    /* Add the repaint in order to repaint the treetable when an action\n    occurs on the GraphicArea. here mousedragged because all actions\n    modifying task properties on the graphics are made through\n    mousedragged (I think !)\n     */\r\n    // Mediator.getGanttProjectSingleton().repaint();\r\n    // getUIFacade().repaint2();\r\n    if (myUIConfiguration.isCriticalPathOn()) {\r\n        ChartComponentBase.MouseInteraction mi = myChartComponentImpl.getActiveInteraction();\r\n        if (((mi instanceof GanttGraphicArea.ChangeTaskBoundaryInteraction) || (mi instanceof GanttGraphicArea.MoveTaskInteraction)) || (mi instanceof GanttGraphicArea.MoveTaskInteractions))\r\n            appli.recalculateCriticalPath();\r\n\r\n    }\r\n    this.repaint();\r\n    // avant\r\n}"},
 {"id":330, "name":"mouseMoved(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$OldMouseMotionListenerImpl.mouseMoved(java.awt.event.MouseEvent)", "ownerclassid":"43", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$OldMouseMotionListenerImpl", "sourcecode":"// Move the move on the area\r\npublic void mouseMoved(MouseEvent e) {\r\n    ChartItem itemUnderPoint = myMouseSupport.getChartItemUnderMousePoint(e.getX(), e.getY());\r\n    Task taskUnderPoint = (itemUnderPoint == null) ? null : itemUnderPoint.getTask();\r\n    // System.err.println(\"[OldMouseMotionListenerImpl] mouseMoved:\r\n    // taskUnderPoint=\"+taskUnderPoint);\r\n    if (taskUnderPoint == null) {\r\n        setDefaultCursor();\r\n    } else {\r\n        if (itemUnderPoint instanceof TaskBoundaryChartItem) {\r\n            Cursor cursor = (((TaskBoundaryChartItem) (itemUnderPoint)).isStartBoundary()) ? GanttGraphicArea.W_RESIZE_CURSOR : GanttGraphicArea.E_RESIZE_CURSOR;\r\n            setCursor(cursor);\r\n        } else// special cursor\r\n\r\n            if (itemUnderPoint instanceof TaskProgressChartItem) {\r\n                setCursor(GanttGraphicArea.CHANGE_PROGRESS_CURSOR);\r\n            } else {\r\n                setDefaultCursor();\r\n            }\r\n\r\n        // getUIFacade().repaint2();\r\n        appli.repaint();\r\n    }\r\n}"},
 {"id":331, "name":"-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction.-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "ownerclassid":"44", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction", "sourcecode":"public ScrollGanttChartCenterAction(ScrollingManager scrollingManager, TaskSelectionManager taskSelectionManager, String iconSize) {\r\n    super(\"ScrollCenter\", iconSize);\r\n    myScrollingManager = scrollingManager;\r\n    myTaskSelectionManager = taskSelectionManager;\r\n}"},
 {"id":332, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"44", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    getUIFacade().setStatusText(GanttLanguage.getInstance().getText(\"centerOnSelectedTasks\"));\r\n    scroll();\r\n}"},
 {"id":333, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction.getIconFilePrefix()", "ownerclassid":"44", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.action.GPAction#getIconFilePrefix()\n */\r\nprotected String getIconFilePrefix() {\r\n    return \"scrollcenter_\";\r\n}"},
 {"id":334, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction.getLocalizedName()", "ownerclassid":"44", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction", "sourcecode":"protected String getLocalizedName() {\r\n    return super.getLocalizedName();\r\n}"},
 {"id":335, "name":"scroll()", "fullmethod":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction.scroll()", "ownerclassid":"44", "ownerclassname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction", "sourcecode":"private void scroll() {\r\n    GanttCalendar min = null;\r\n    GanttCalendar max = null;\r\n    Date scrollDate = null;\r\n    Iterator it = null;\r\n    if (myTaskSelectionManager.getSelectedTasks().isEmpty()) {\r\n        // scrollDate = getTaskManager().getProjectStart();\r\n        it = Arrays.asList(getTaskManager().getTasks()).iterator();\r\n    } else {\r\n        it = myTaskSelectionManager.getSelectedTasks().iterator();\r\n    }\r\n    while (it.hasNext()) {\r\n        Task t = ((Task) (it.next()));\r\n        GanttCalendar dStart = t.getStart();\r\n        GanttCalendar dEnd = t.getEnd();\r\n        min = (min == null) ? dStart.Clone() : (min.compareTo(dStart)) > 0 ? dStart.Clone() : min;\r\n        max = (max == null) ? dEnd.Clone() : (max.compareTo(dEnd)) < 0 ? dEnd.Clone() : max;\r\n    } \r\n    // no tasks defined, nothing to do\r\n    if ((min == null) || (max == null))\r\n        return;\r\n\r\n    TimeUnit defaultUnit = getTimeUnitStack().getDefaultTimeUnit();\r\n    final TaskLength selectionLength = getTaskManager().createLength(defaultUnit, min.getTime(), max.getTime());\r\n    final TaskLength viewLength = getChartModel().getVisibleLength();\r\n    float viewLengthInDefaultUnits = viewLength.getLength(defaultUnit);\r\n    // if selection is shorter than view well scroll right,\r\n    // otherwise well scroll left\r\n    // delta is measured in the bottom line time units\r\n    final float delta = ((selectionLength.getValue()) - viewLengthInDefaultUnits) / 2;\r\n    scrollDate = GPCalendar.PLAIN.shiftDate(min.getTime(), getTaskManager().createLength(defaultUnit, delta));\r\n    myScrollingManager.scrollLeft(scrollDate);\r\n}"},
 {"id":336, "name":"-init-(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttImagePanel.-init-(java.lang.String,int,int)", "ownerclassid":"46", "ownerclassname":"net.sourceforge.ganttproject.GanttImagePanel", "sourcecode":"/**\r\n * Constructor of the panel.\r\n */\r\npublic GanttImagePanel(String imagename, int x, int y) {\r\n    super(new GridBagLayout());\r\n    image = new ImageIcon(getClass().getResource((\"/icons/\" + imagename)));\r\n    this.x = x;\r\n    this.y = y;\r\n    applyComponentOrientation(GanttLanguage.getInstance().getComponentOrientation());\r\n}"},
 {"id":337, "name":"getPreferredSize()", "fullmethod":"net.sourceforge.ganttproject.GanttImagePanel.getPreferredSize()", "ownerclassid":"46", "ownerclassname":"net.sourceforge.ganttproject.GanttImagePanel", "sourcecode":"/**\r\n * The prefered size of this panel\r\n */\r\npublic Dimension getPreferredSize() {\r\n    return new Dimension(x, y);\r\n}"},
 {"id":338, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.GanttImagePanel.paintComponent(java.awt.Graphics)", "ownerclassid":"46", "ownerclassname":"net.sourceforge.ganttproject.GanttImagePanel", "sourcecode":"/**\r\n * Repaint the component\r\n */\r\npublic void paintComponent(Graphics g) {\r\n    image.paintIcon(this, g, 0, 0);\r\n}"},
 {"id":339, "name":"-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.document.DocumentManager,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.document.DocumentManager,boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Default constructor.\r\n */\r\npublic GanttOptions(RoleManager roleManager, DocumentManager documentManager, boolean isOnlyViewer) {\r\n    myDocumentManager = documentManager;\r\n    myRoleManager = roleManager;\r\n    this.isOnlyViewer = isOnlyViewer;\r\n    initByDefault();\r\n    try {\r\n        this.workingDir = System.getProperty(\"user.home\");\r\n    } catch (AccessControlException e) {\r\n        // This can happen when running in a sandbox (Java WebStart)\r\n        System.err.println(((e + \": \") + (e.getMessage())));\r\n    }\r\n}"},
 {"id":340, "name":"-init-(java.awt.Font,java.awt.Font,java.awt.Color,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.-init-(java.awt.Font,java.awt.Font,java.awt.Color,boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"1( $anonymous0,  $anonymous1,  $anonymous2,  $anonymous3) {\r\n}"},
 {"id":341, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.-init-()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"GanttXMLOptionsParser() {\r\n}"},
 {"id":342, "name":"addAttribute(java.lang.String,java.lang.String,org.xml.sax.helpers.AttributesImpl)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.addAttribute(java.lang.String,java.lang.String,org.xml.sax.helpers.AttributesImpl)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private void addAttribute(String name, String value, AttributesImpl attrs) {\r\n    if (value != null) {\r\n        attrs.addAttribute(\"\", name, name, \"CDATA\", value);\r\n    } else {\r\n        System.err.println(((\"[GanttOptions] attribute \" + name) + \" is null\"));\r\n    }\r\n}"},
 {"id":343, "name":"addOptionGroups(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[])", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.addOptionGroups(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[])", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void addOptionGroups(GPOptionGroup[] optionGroups) {\r\n    for (int i = 0; i < (optionGroups.length); i++) {\r\n        GPOptionGroup nextGroup = optionGroups[i];\r\n        addOptions(nextGroup);\r\n    }\r\n}"},
 {"id":344, "name":"addOptions(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.addOptions(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private void addOptions(GPOptionGroup optionGroup) {\r\n    GPOption[] options = optionGroup.getOptions();\r\n    for (int i = 0; i < (options.length); i++) {\r\n        GPOption nextOption = options[i];\r\n        myGPOptions.put((((optionGroup.getID()) + \".\") + (nextOption.getID())), nextOption);\r\n        if (nextOption instanceof GP1XOptionConverter) {\r\n            GP1XOptionConverter nextConverter = ((GP1XOptionConverter) (nextOption));\r\n            myTagDotAttribute_Converter.put((((nextConverter.getTagName()) + \".\") + (nextConverter.getAttributeName())), nextConverter);\r\n        }\r\n    }\r\n}"},
 {"id":345, "name":"correct(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.correct(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public String correct(String s) {\r\n    String res;\r\n    res = s.replaceAll(\"&\", \"&#38;\");\r\n    res = res.replaceAll(\"<\", \"&#60;\");\r\n    res = res.replaceAll(\">\", \"&#62;\");\r\n    res = res.replaceAll(\"/\", \"&#47;\");\r\n    res = res.replaceAll(\"\"\", \"&#34;\");\r\n    return res;\r\n}"},
 {"id":346, "name":"emptyElement(java.lang.String,org.xml.sax.helpers.AttributesImpl,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.emptyElement(java.lang.String,org.xml.sax.helpers.AttributesImpl,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private void emptyElement(String name, AttributesImpl attrs, TransformerHandler handler) throws SAXException {\r\n    startElement(name, attrs, handler);\r\n    endElement(name, handler);\r\n    attrs.clear();\r\n}"},
 {"id":347, "name":"endElement(java.lang.String,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.endElement(java.lang.String,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private void endElement(String name, TransformerHandler handler) throws SAXException {\r\n    handler.endElement(\"\", name, name);\r\n}"},
 {"id":348, "name":"getAutomatic()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getAutomatic()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return if the mouse is used to drag on the chart.\r\n */\r\n// public boolean getDragTime() {\r\n// return dragTime;\r\n// }\r\n/**\r\n *\r\n *\r\n * @return automatic launch properties box when create a new task.\r\n */\r\npublic boolean getAutomatic() {\r\n    return automatic;\r\n}"},
 {"id":349, "name":"getButtonShow()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getButtonShow()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the button show attribute must be GanttOptions.ICONS or\r\nGanttOptions.TEXT ir GanttOptions.ICONS_TEXT\r\n */\r\npublic int getButtonShow() {\r\n    return buttonsshow;\r\n}"},
 {"id":350, "name":"getCSVOptions()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getCSVOptions()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the cvsOptions.\r\n */\r\npublic CSVOptions getCSVOptions() {\r\n    return csvOptions;\r\n}"},
 {"id":351, "name":"getDefaultColor()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getDefaultColor()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the default color for tasks.\r\n */\r\npublic Color getDefaultColor() {\r\n    return getUIConfiguration().getTaskColor();\r\n}"},
 {"id":352, "name":"getDefaultDeletedIconListAsString()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getDefaultDeletedIconListAsString()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the default string to configure the iconList\r\n */\r\npublic String getDefaultDeletedIconListAsString() {\r\n    return \"\";\r\n}"},
 {"id":353, "name":"getDefaultDeletedIconListIntArray()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getDefaultDeletedIconListIntArray()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the default integer array to configure the iconList\r\n */\r\npublic int[] getDefaultDeletedIconListIntArray() {\r\n    return null;\r\n}"},
 {"id":354, "name":"getDefaultIconListAsString()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getDefaultIconListAsString()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the default string to configure the iconList\r\n */\r\npublic String getDefaultIconListAsString() {\r\n    // String iconAsString = \"1,3,4,5,6,7,8,0,21,22,23,24,25,0,28,0,29\";\r\n    // \r\n    // if (!isOnlyViewer)\r\n    // iconAsString =\r\n    // \"2,3,4,5,6,7,8,0,9,10,11,0,12,13,14,15,16,17,18,19,20,0,21,22,23,24,25,0,26,27,0,30,31,0,28\";\r\n    // \r\n    // return iconAsString;\r\n    return GanttOptions.getStringList(getDefaultIconListIntArray());\r\n}"},
 {"id":355, "name":"getDefaultIconListIntArray()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getDefaultIconListIntArray()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the default integer array to configure the iconList\r\n */\r\npublic int[] getDefaultIconListIntArray() {\r\n    if (!(isOnlyViewer))\r\n        return new int[]{ GanttOptions.SAVE, GanttOptions.SEPARATOR, GanttOptions.CUT, GanttOptions.COPY, GanttOptions.PASTE, GanttOptions.SEPARATOR, GanttOptions.UNDO, GanttOptions.REDO, GanttOptions.SEPARATOR, GanttOptions.NEWTASK, GanttOptions.DELETE, GanttOptions.PROPERTIES, GanttOptions.UNLINK, GanttOptions.LINK, GanttOptions.IND, GanttOptions.UNIND, GanttOptions.UP, GanttOptions.DOWN, GanttOptions.SEPARATOR, GanttOptions.PREV, GanttOptions.CENTER, GanttOptions.NEXT, GanttOptions.ZOOMOUT, GanttOptions.ZOOMIN, GanttOptions.SEPARATOR, GanttOptions.SAVECURRENT, GanttOptions.COMPAREPREV, GanttOptions.SEPARATOR, GanttOptions.CRITICAL };\r\n\r\n    /* else */\r\n    return new int[]{ GanttOptions.EXIT, GanttOptions.OPEN, GanttOptions.SAVE, GanttOptions.SAVEAS, GanttOptions.IMPORT, GanttOptions.EXPORT, GanttOptions.PRINT, GanttOptions.PREVIEWPRINT, GanttOptions.SEPARATOR, GanttOptions.PREV, GanttOptions.CENTER, GanttOptions.NEXT, GanttOptions.ZOOMOUT, GanttOptions.ZOOMIN, GanttOptions.SEPARATOR, GanttOptions.CRITICAL, GanttOptions.SEPARATOR, GanttOptions.ABOUT };\r\n}"},
 {"id":356, "name":"getDeletedIconList()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getDeletedIconList()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public int[] getDeletedIconList() {\r\n    return deletedIconListAsIntArray;\r\n}"},
 {"id":357, "name":"getExport3dBorders()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getExport3dBorders()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the 3d borders export.\r\n */\r\npublic boolean getExport3dBorders() {\r\n    return bExport3DBorders;\r\n}"},
 {"id":358, "name":"getExportComplete()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getExportComplete()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return true if you want to export the complete percent of the task on\r\nthe exported chart.\r\n */\r\npublic boolean getExportComplete() {\r\n    return bExportComplete;\r\n}"},
 {"id":359, "name":"getExportName()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getExportName()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return true if you want to export the name of the task on the exported\r\nchart.\r\n */\r\npublic boolean getExportName() {\r\n    return bExportName;\r\n}"},
 {"id":360, "name":"getExportRelations()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getExportRelations()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return true if you want to export the relations of the task on the\r\nexported chart.\r\n */\r\npublic boolean getExportRelations() {\r\n    return bExportRelations;\r\n}"},
 {"id":361, "name":"getExportSettings()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getExportSettings()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public GanttExportSettings getExportSettings() {\r\n    return new GanttExportSettings(bExportName, bExportComplete, bExportRelations, bExport3DBorders);\r\n}"},
 {"id":362, "name":"getFTPDirectory()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getFTPDirectory()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFTPDirectory() {\r\n    return FTPDirectory;\r\n}"},
 {"id":363, "name":"getFTPPwd()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getFTPPwd()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFTPPwd() {\r\n    return FTPPwd;\r\n}"},
 {"id":364, "name":"getFTPUrl()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getFTPUrl()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFTPUrl() {\r\n    return FTPUrl;\r\n}"},
 {"id":365, "name":"getFTPUser()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getFTPUser()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFTPUser() {\r\n    return FTPUser;\r\n}"},
 {"id":366, "name":"getFilePath(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getFilePath(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private String getFilePath(String value) {\r\n    String result = null;\r\n    String filePath;\r\n    try {\r\n        URL fileUrl = new URL(value);\r\n        filePath = fileUrl.getPath();\r\n    } catch (MalformedURLException e) {\r\n        filePath = value;\r\n    }\r\n    if (new File(filePath).exists()) {\r\n        result = filePath;\r\n    }\r\n    return result;\r\n}"},
 {"id":367, "name":"getFontSpec(java.awt.Font)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getFontSpec(java.awt.Font)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private String getFontSpec(Font font) {\r\n    return ((((font.getFamily()) + \"-\") + (getFontStyle(font))) + \"-\") + (font.getSize());\r\n}"},
 {"id":368, "name":"getFontStyle(java.awt.Font)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getFontStyle(java.awt.Font)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private String getFontStyle(Font font) {\r\n    String result;\r\n    final int BOLDITALIC = (Font.BOLD) + (Font.ITALIC);\r\n    switch (font.getStyle()) {\r\n        case Font.PLAIN :\r\n            {\r\n                result = \"plain\";\r\n                break;\r\n            }\r\n        case Font.BOLD :\r\n            {\r\n                result = \"bold\";\r\n                break;\r\n            }\r\n        case Font.ITALIC :\r\n            {\r\n                result = \"italic\";\r\n                break;\r\n            }\r\n        case BOLDITALIC :\r\n            {\r\n                result = \"bolditalic\";\r\n                break;\r\n            }\r\n        default :\r\n            {\r\n                throw new RuntimeException((((\"Illegal value of font style. style=\" + (font.getStyle())) + \" font=\") + font));\r\n            }\r\n    }\r\n    return result;\r\n}"},
 {"id":369, "name":"getHeight()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getHeight()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the height of the window.\r\n */\r\npublic int getHeight() {\r\n    return height;\r\n}"},
 {"id":370, "name":"getIconList()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getIconList()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public int[] getIconList() {\r\n    return iconListAsIntArray;\r\n}"},
 {"id":371, "name":"getIconSize()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getIconSize()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the size of the icons on the toolbar.\r\n */\r\npublic String getIconSize() {\r\n    return iconSize;\r\n}"},
 {"id":372, "name":"getLanguage()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getLanguage()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the language.\r\n */\r\npublic GanttLanguage getLanguage() {\r\n    return language;\r\n}"},
 {"id":373, "name":"getLnfInfos()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getLnfInfos()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the lookAndFeel infos.\r\n */\r\npublic GanttLookAndFeelInfo getLnfInfos() {\r\n    return lookAndFeel;\r\n}"},
 {"id":374, "name":"getLockDAVMinutes()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getLockDAVMinutes()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"// TODO This method was not used...\r\n// /** @return the color for resources overload. */\r\n// public Color getResourceOverloadColor() {\r\n// return getUIConfiguration().getResourceOverloadColor();\r\n// }\r\n/**\r\n *\r\n *\r\n * @return the lock DAV Minutes.\r\n */\r\npublic int getLockDAVMinutes() {\r\n    return lockDAVMinutes;\r\n}"},
 {"id":375, "name":"getOpenTips()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getOpenTips()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return if you want to open the tips at the start of GP.\r\n */\r\npublic boolean getOpenTips() {\r\n    return openTips;\r\n}"},
 {"id":376, "name":"getResourceColor()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getResourceColor()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the color for resources.\r\n */\r\npublic Color getResourceColor() {\r\n    return getUIConfiguration().getResourceColor();\r\n}"},
 {"id":377, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getRoleManager()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private RoleManager getRoleManager() {\r\n    return myRoleManager;\r\n}"},
 {"id":378, "name":"getShowStatusBar()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getShowStatusBar()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return true if show the status bar.\r\n */\r\npublic boolean getShowStatusBar() {\r\n    return bShowStatusBar;\r\n}"},
 {"id":379, "name":"getStringList(int[])", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getStringList(int[])", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private static String getStringList(int[] tabInt) {\r\n    String res = \"\";\r\n    int i = 0;\r\n    for (i = 0; i < ((tabInt.length) - 1); i++) {\r\n        res += (tabInt[i]) + \",\";\r\n    }\r\n    res += tabInt[i];\r\n    return res;\r\n}"},
 {"id":380, "name":"getTaskNamePrefix()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getTaskNamePrefix()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the task name prefix.\r\n */\r\npublic String getTaskNamePrefix() {\r\n    if (((sTaskNamePrefix) == null) || (sTaskNamePrefix.equals(\"\")))\r\n        return language.getText(\"newTask\");\r\n\r\n    return sTaskNamePrefix;\r\n}"},
 {"id":381, "name":"getToolBarPosition()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getToolBarPosition()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the toolbar position.\r\n */\r\npublic int getToolBarPosition() {\r\n    return toolBarPosition;\r\n}"},
 {"id":382, "name":"getTrueTaskNamePrefix()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getTrueTaskNamePrefix()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public String getTrueTaskNamePrefix() {\r\n    if ((((sTaskNamePrefix) == null) || (sTaskNamePrefix.equals(\"\"))) || (sTaskNamePrefix.equals(language.getText(\"newTask\"))))\r\n        return null;\r\n\r\n    return sTaskNamePrefix;\r\n}"},
 {"id":383, "name":"getUIConfiguration()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getUIConfiguration()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public UIConfiguration getUIConfiguration() {\r\n    if ((myUIConfig) == null) {\r\n        myUIConfig = new UIConfiguration(null, null, new Color(140, 182, 206), redline) {\r\n            public Font getMenuFont() {\r\n                return (GanttOptions.this.myMenuFont) == null ? super.getMenuFont() : GanttOptions.this.myMenuFont;\r\n            }\r\n\r\n            public Font getChartMainFont() {\r\n                return (GanttOptions.this.myChartMainFont) == null ? super.getChartMainFont() : GanttOptions.this.myChartMainFont;\r\n            }\r\n        };\r\n        // Color.black\r\n    }\r\n    return myUIConfig;\r\n}"},
 {"id":384, "name":"getUndoNumber()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getUndoNumber()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the undo number\r\n */\r\npublic int getUndoNumber() {\r\n    return undoNumber;\r\n}"},
 {"id":385, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getWidth()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the width of the window.\r\n */\r\npublic int getWidth() {\r\n    return width;\r\n}"},
 {"id":386, "name":"getWorkingDir()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getWorkingDir()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the working directory.\r\n */\r\npublic String getWorkingDir() {\r\n    return workingDir;\r\n}"},
 {"id":387, "name":"getX()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getX()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the top left x position of the window.\r\n */\r\npublic int getX() {\r\n    return x;\r\n}"},
 {"id":388, "name":"getXslDir()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getXslDir()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the xsl directory.\r\n */\r\npublic String getXslDir() {\r\n    return xslDir;\r\n}"},
 {"id":389, "name":"getXslFo()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getXslFo()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the xsl-fo file.\r\n */\r\npublic String getXslFo() {\r\n    return new File(xslFo).exists() ? xslFo : getClass().getResource(\"/xslfo/ganttproject.xsl\").toString();\r\n}"},
 {"id":390, "name":"getY()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.getY()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the top left y position of the window.\r\n */\r\npublic int getY() {\r\n    return y;\r\n}"},
 {"id":391, "name":"initByDefault()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.initByDefault()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Init the options by default.\r\n */\r\npublic void initByDefault() {\r\n    automatic = false;\r\n    // dragTime = true;\r\n    openTips = true;\r\n    redline = false;\r\n    lockDAVMinutes = 240;\r\n    undoNumber = 50;\r\n    xslDir = GanttOptions.class.getResource(\"/xslt\").toString();\r\n    xslFo = GanttOptions.class.getResource(\"/xslfo/ganttproject.xsl\").toString();\r\n    sTaskNamePrefix = \"\";\r\n    toolBarPosition = JToolBar.HORIZONTAL;\r\n    bShowStatusBar = true;\r\n    iconSize = \"16\";// must be 16 small, 24 for big (32 for extra big\r\n\r\n    // not directly include on UI)\r\n    buttonsshow = GanttOptions.ICONS;\r\n    /**\r\n     * Export options.\r\n     */\r\n    bExportName = true;\r\n    bExportComplete = true;\r\n    bExportRelations = true;\r\n    bExport3DBorders = false;\r\n    /**\r\n     * CVS export options.\r\n     */\r\n    csvOptions = new CSVOptions();\r\n    // Icon status bar\r\n    iconListAsString = getDefaultIconListAsString();\r\n    iconListAsIntArray = getDefaultIconListIntArray();\r\n    deletedIconListAsString = getDefaultDeletedIconListAsString();\r\n    deletedIconListAsIntArray = getDefaultDeletedIconListIntArray();\r\n}"},
 {"id":392, "name":"isLoaded()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.isLoaded()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return true is options are loaded from the options file.\r\n */\r\npublic boolean isLoaded() {\r\n    return isloaded;\r\n}"},
 {"id":393, "name":"load()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.load()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Load the options file\r\n */\r\npublic boolean load() {\r\n    // Use an instance of ourselves as the SAX event handler\r\n    DefaultHandler handler = new GanttOptions.GanttXMLOptionsParser();\r\n    // Use the default (non-validating) parser\r\n    SAXParserFactory factory = SAXParserFactory.newInstance();\r\n    try {\r\n        String sFileName = \".ganttproject\";\r\n        /* if(System.getProperty(\"os.name\").startsWith(\"Windows\") ||\n        System.getProperty(\"os.name\").startsWith(\"Mac\")) sFileName =\n        \"ganttproject.ini\";\n         */\r\n        File file = new File((((System.getProperty(\"user.home\")) + (System.getProperty(\"file.separator\"))) + sFileName));\r\n        if (!(file.exists())) {\r\n            return false;\r\n        }\r\n        documentsMRU.clear();\r\n        // Parse the input\r\n        SAXParser saxParser = factory.newSAXParser();\r\n        saxParser.parse(file, handler);\r\n        GanttLookAndFeelInfo info = GanttLookAndFeels.getGanttLookAndFeels().getInfoByClass(styleClass);\r\n        if (null == info)\r\n            info = GanttLookAndFeels.getGanttLookAndFeels().getInfoByName(styleName);\r\n\r\n        if (null != info)\r\n            lookAndFeel = info;\r\n\r\n        if (null == (lookAndFeel))\r\n            lookAndFeel = GanttLookAndFeels.getGanttLookAndFeels().getDefaultInfo();\r\n\r\n        loadRoleSets(file);\r\n    } catch (Exception e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        return false;\r\n    }\r\n    isloaded = true;\r\n    return true;\r\n}"},
 {"id":394, "name":"loadRoleSets(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.loadRoleSets(java.io.File)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private void loadRoleSets(File optionsFile) {\r\n    GanttXMLOpen loader = new GanttXMLOpen(null);\r\n    IconPositionTagHandler iconHandler = new IconPositionTagHandler();\r\n    loader.addTagHandler(iconHandler);\r\n    loader.addTagHandler(new RoleTagHandler(getRoleManager()));\r\n    loader.load(optionsFile);\r\n    if ((iconHandler.getList()) != null) {\r\n        iconListAsIntArray = iconHandler.getList();\r\n        iconListAsString = iconHandler.getPositions();\r\n    }\r\n    if ((iconHandler.getDeletedList()) != null) {\r\n        deletedIconListAsIntArray = iconHandler.getDeletedList();\r\n        deletedIconListAsString = iconHandler.getDeletedPositions();\r\n    }\r\n}"},
 {"id":395, "name":"save()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.save()", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Save the options file\r\n */\r\npublic void save() {\r\n    try {\r\n        String sFileName = \".ganttproject\";\r\n        /* if(System.getProperty(\"os.name\").startsWith(\"Windows\") ||\n        System.getProperty(\"os.name\").startsWith(\"Mac\")) sFileName =\n        \"ganttproject.ini\";\n         */\r\n        File file = new File((((System.getProperty(\"user.home\")) + (System.getProperty(\"file.separator\"))) + sFileName));\r\n        // DataOutputStream fout = new DataOutputStream(new\r\n        // FileOutputStream(file));\r\n        TransformerHandler handler = ((SAXTransformerFactory) (SAXTransformerFactory.newInstance())).newTransformerHandler();\r\n        Transformer serializer = handler.getTransformer();\r\n        serializer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\r\n        serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\r\n        serializer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\r\n        handler.setResult(new StreamResult(file));\r\n        handler.startDocument();\r\n        // handler.startDTD(\"ganttproject.sourceforge.net\",\r\n        // \"-//GanttProject.org//DTD GanttProject-1.x//EN\",\r\n        // \"http://ganttproject.sourceforge.net/dtd/ganttproject.dtd\");\r\n        // handler.endDTD();\r\n        // \r\n        AttributesImpl attrs = new AttributesImpl();\r\n        handler.startElement(\"\", \"ganttproject-options\", \"ganttproject-options\", attrs);\r\n        // \r\n        attrs.addAttribute(\"\", \"selection\", \"selection\", \"CDATA\", language.getText(\"shortLanguage\"));\r\n        handler.startElement(\"\", \"language\", \"language\", attrs);\r\n        handler.endElement(\"\", \"language\", \"language\");\r\n        attrs.clear();\r\n        // write the task Color\r\n        /* Color color = getUIConfiguration().getTaskColor();\n        attrs.addAttribute(\"\", \"red\", \"red\", \"CDATA\", \"\"+color.getRed());\n        attrs.addAttribute(\"\", \"green\", \"green\", \"CDATA\",\n        \"\"+color.getGreen()); attrs.addAttribute(\"\", \"blue\", \"blue\",\n        \"CDATA\", \"\"+color.getBlue()); handler.startElement(\"\",\n        \"task-color\", \"task-color\", attrs); handler.endElement(\"\",\n        \"task-color\", \"task-color\"); attrs.clear();\n         */\r\n        Color resourceColor = myUIConfig.getResourceColor();\r\n        if (resourceColor != null)\r\n            attrs.addAttribute(\"\", \"resources\", \"resources\", \"CDATA\", (\"\" + (ColorConvertion.getColor(resourceColor))));\r\n\r\n        Color resourceOverloadColor = myUIConfig.getResourceOverloadColor();\r\n        if (resourceOverloadColor != null)\r\n            attrs.addAttribute(\"\", \"resourcesOverload\", \"resourcesOverload\", \"CDATA\", (\"\" + (ColorConvertion.getColor(resourceOverloadColor))));\r\n\r\n        Color resourceUnderloadColor = myUIConfig.getResourceUnderloadColor();\r\n        if (resourceUnderloadColor != null)\r\n            attrs.addAttribute(\"\", \"resourcesUnderload\", \"resourcesUnderload\", \"CDATA\", (\"\" + (ColorConvertion.getColor(resourceUnderloadColor))));\r\n\r\n        Color weekEndColor = myUIConfig.getWeekEndColor();\r\n        if (weekEndColor != null)\r\n            attrs.addAttribute(\"\", \"weekEnd\", \"weekEnd\", \"CDATA\", (\"\" + (ColorConvertion.getColor(weekEndColor))));\r\n\r\n        Color daysOffColor = myUIConfig.getDayOffColor();\r\n        if (daysOffColor != null)\r\n            attrs.addAttribute(\"\", \"daysOff\", \"daysOff\", \"CDATA\", (\"\" + (ColorConvertion.getColor(daysOffColor))));\r\n\r\n        handler.startElement(\"\", \"colors\", \"colors\", attrs);\r\n        handler.endElement(\"\", \"colors\", \"colors\");\r\n        attrs.clear();\r\n        // Geometry of the window\r\n        addAttribute(\"x\", (\"\" + (x)), attrs);\r\n        addAttribute(\"y\", (\"\" + (y)), attrs);\r\n        addAttribute(\"width\", (\"\" + (width)), attrs);\r\n        addAttribute(\"height\", (\"\" + (height)), attrs);\r\n        emptyElement(\"geometry\", attrs, handler);\r\n        // looknfeel\r\n        addAttribute(\"name\", lookAndFeel.getName(), attrs);\r\n        addAttribute(\"class\", lookAndFeel.getClassName(), attrs);\r\n        emptyElement(\"looknfeel\", attrs, handler);\r\n        // ToolBar position\r\n        addAttribute(\"position\", (\"\" + (toolBarPosition)), attrs);\r\n        addAttribute(\"icon-size\", (\"\" + (iconSize)), attrs);\r\n        addAttribute(\"show\", (\"\" + (buttonsshow)), attrs);\r\n        emptyElement(\"toolBar\", attrs, handler);\r\n        addAttribute(\"show\", (\"\" + (bShowStatusBar)), attrs);\r\n        emptyElement(\"statusBar\", attrs, handler);\r\n        // Export options\r\n        addAttribute(\"name\", (\"\" + (bExportName)), attrs);\r\n        addAttribute(\"complete\", (\"\" + (bExportComplete)), attrs);\r\n        addAttribute(\"border3d\", (\"\" + (bExport3DBorders)), attrs);\r\n        addAttribute(\"relations\", (\"\" + (bExportRelations)), attrs);\r\n        emptyElement(\"export\", attrs, handler);\r\n        // csv export options\r\n        startElement(\"csv-export\", attrs, handler);\r\n        addAttribute(\"fixed\", (\"\" + (csvOptions.bFixedSize)), attrs);\r\n        addAttribute(\"separatedChar\", (\"\" + (csvOptions.sSeparatedChar)), attrs);\r\n        addAttribute(\"separatedTextChar\", (\"\" + (csvOptions.sSeparatedTextChar)), attrs);\r\n        emptyElement(\"csv-general\", attrs, handler);\r\n        addAttribute(\"id\", (\"\" + (csvOptions.bExportTaskID)), attrs);\r\n        addAttribute(\"name\", (\"\" + (csvOptions.bExportTaskName)), attrs);\r\n        addAttribute(\"start-date\", (\"\" + (csvOptions.bExportTaskStartDate)), attrs);\r\n        addAttribute(\"end-date\", (\"\" + (csvOptions.bExportTaskEndDate)), attrs);\r\n        addAttribute(\"percent\", (\"\" + (csvOptions.bExportTaskPercent)), attrs);\r\n        addAttribute(\"duration\", (\"\" + (csvOptions.bExportTaskDuration)), attrs);\r\n        addAttribute(\"webLink\", (\"\" + (csvOptions.bExportTaskWebLink)), attrs);\r\n        addAttribute(\"resources\", (\"\" + (csvOptions.bExportTaskResources)), attrs);\r\n        addAttribute(\"notes\", (\"\" + (csvOptions.bExportTaskNotes)), attrs);\r\n        emptyElement(\"csv-tasks\", attrs, handler);\r\n        addAttribute(\"id\", (\"\" + (csvOptions.bExportResourceID)), attrs);\r\n        addAttribute(\"name\", (\"\" + (csvOptions.bExportResourceName)), attrs);\r\n        addAttribute(\"mail\", (\"\" + (csvOptions.bExportResourceMail)), attrs);\r\n        addAttribute(\"phone\", (\"\" + (csvOptions.bExportResourcePhone)), attrs);\r\n        addAttribute(\"role\", (\"\" + (csvOptions.bExportResourceRole)), attrs);\r\n        emptyElement(\"csv-resources\", attrs, handler);\r\n        endElement(\"csv-export\", handler);\r\n        // automatic popup launch\r\n        addAttribute(\"value\", (\"\" + (automatic)), attrs);\r\n        emptyElement(\"automatic-launch\", attrs, handler);\r\n        // automaticdrag time on the chart\r\n        // addAttribute(\"value\", \"\"+dragTime, attrs);\r\n        emptyElement(\"dragTime\", attrs, handler);\r\n        // automatic tips of the day launch\r\n        addAttribute(\"value\", (\"\" + (openTips)), attrs);\r\n        emptyElement(\"tips-on-startup\", attrs, handler);\r\n        // Should WebDAV resources be locked, when opening them?\r\n        addAttribute(\"value\", (\"\" + (lockDAVMinutes)), attrs);\r\n        emptyElement(\"lockdavminutes\", attrs, handler);\r\n        // write the xsl directory\r\n        addAttribute(\"dir\", xslDir, attrs);\r\n        emptyElement(\"xsl-dir\", attrs, handler);\r\n        // write the xslfo directory\r\n        addAttribute(\"file\", xslFo, attrs);\r\n        emptyElement(\"xsl-fo\", attrs, handler);\r\n        // write the working directory directory\r\n        addAttribute(\"dir\", workingDir, attrs);\r\n        emptyElement(\"working-dir\", attrs, handler);\r\n        // write the task name prefix\r\n        addAttribute(\"prefix\", sTaskNamePrefix, attrs);\r\n        emptyElement(\"task-name\", attrs, handler);\r\n        // The last opened files\r\n        {\r\n            startElement(\"files\", attrs, handler);\r\n            for (Iterator iterator = documentsMRU.iterator(); iterator.hasNext();) {\r\n                Document document = ((Document) (iterator.next()));\r\n                addAttribute(\"path\", document.getPath(), attrs);\r\n                emptyElement(\"file\", attrs, handler);\r\n            }\r\n            endElement(\"files\", handler);\r\n        }\r\n        addAttribute(\"category\", \"menu\", attrs);\r\n        addAttribute(\"spec\", getFontSpec(getUIConfiguration().getMenuFont()), attrs);\r\n        emptyElement(\"font\", attrs, handler);\r\n        // \r\n        addAttribute(\"category\", \"chart-main\", attrs);\r\n        addAttribute(\"spec\", getFontSpec(getUIConfiguration().getChartMainFont()), attrs);\r\n        emptyElement(\"font\", attrs, handler);\r\n        // \r\n        saveIconPositions(handler);\r\n        saveRoleSets(handler);\r\n        for (Iterator options = myGPOptions.entrySet().iterator(); options.hasNext();) {\r\n            Map.Entry nextEntry = ((Map.Entry) (options.next()));\r\n            GPOption nextOption = ((GPOption) (nextEntry.getValue()));\r\n            if ((nextOption.getPersistentValue()) != null) {\r\n                addAttribute(\"id\", nextEntry.getKey().toString(), attrs);\r\n                addAttribute(\"value\", nextOption.getPersistentValue(), attrs);\r\n                emptyElement(\"option\", attrs, handler);\r\n            }\r\n        }\r\n        endElement(\"ganttproject-options\", handler);\r\n        // \r\n        GPLogger.log(\"[GanttOptions] save(): finished!!\");\r\n        handler.endDocument();\r\n    } catch (Exception e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n}"},
 {"id":396, "name":"saveIconPositions(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.saveIconPositions(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private void saveIconPositions(TransformerHandler handler) throws TransformerConfigurationException, TransformerFactoryConfigurationError, SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    addAttribute(\"icons-list\", iconListAsString, attrs);\r\n    addAttribute(\"deletedIcons-list\", deletedIconListAsString, attrs);\r\n    emptyElement(\"positions\", attrs, handler);\r\n}"},
 {"id":397, "name":"saveRoleSets(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.saveRoleSets(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private void saveRoleSets(TransformerHandler handler) throws TransformerConfigurationException, TransformerFactoryConfigurationError, SAXException {\r\n    RoleSet[] roleSets = getRoleManager().getRoleSets();\r\n    for (int i = 0; i < (roleSets.length); i++) {\r\n        AttributesImpl attrs = new AttributesImpl();\r\n        attrs.addAttribute(\"\", \"roleset-name\", \"roleset-name\", \"CDATA\", roleSets[i].getName());\r\n        handler.startElement(\"\", \"roles\", \"roles\", attrs);\r\n        saveRoles(roleSets[i], handler);\r\n        handler.endElement(\"\", \"roles\", \"roles\");\r\n    }\r\n}"},
 {"id":398, "name":"saveRoles(net.sourceforge.ganttproject.roles.RoleSet,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.saveRoles(net.sourceforge.ganttproject.roles.RoleSet,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"private void saveRoles(RoleSet roleSet, TransformerHandler handler) throws SAXException {\r\n    Role[] roles = roleSet.getRoles();\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    for (int i = 0; i < (roles.length); i++) {\r\n        Role next = roles[i];\r\n        addAttribute(\"id\", (\"\" + (next.getID())), attrs);\r\n        addAttribute(\"name\", next.getName(), attrs);\r\n        emptyElement(\"role\", attrs, handler);\r\n    }\r\n}"},
 {"id":399, "name":"setAutomatic(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setAutomatic(boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set new automatic launch value.\r\n */\r\npublic void setAutomatic(boolean automatic) {\r\n    this.automatic = automatic;\r\n}"},
 {"id":400, "name":"setButtonShow(int)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setButtonShow(int)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new button show value must be GanttOptions.ICONS or\r\n * GanttOptions.TEXT ir GanttOptions.ICONS_TEXT\r\n */\r\npublic void setButtonShow(int buttonShow) {\r\n    if (((buttonShow != (GanttOptions.ICONS)) && (buttonShow != (GanttOptions.TEXT))) && (buttonShow != (GanttOptions.ICONS_TEXT)))\r\n        buttonShow = GanttOptions.ICONS;\r\n\r\n    buttonsshow = buttonShow;\r\n}"},
 {"id":401, "name":"setDaysOffColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setDaysOffColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Set a new week end color.\r\n */\r\npublic void setDaysOffColor(Color color) {\r\n    getUIConfiguration().setDayOffColor(color);\r\n}"},
 {"id":402, "name":"setDefaultTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setDefaultTaskColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new default tasks color.\r\n */\r\npublic void setDefaultTaskColor(Color color) {\r\n    getUIConfiguration().setTaskColor(color);\r\n}"},
 {"id":403, "name":"setDeletedIconList(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setDeletedIconList(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setDeletedIconList(String list) {\r\n    deletedIconListAsString = list;\r\n}"},
 {"id":404, "name":"setDocumentsMRU(net.sourceforge.ganttproject.document.DocumentsMRU)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setDocumentsMRU(net.sourceforge.ganttproject.document.DocumentsMRU)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setDocumentsMRU(DocumentsMRU documentsMRU) {\r\n    this.documentsMRU = documentsMRU;\r\n}"},
 {"id":405, "name":"setEarlierPreviousTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setEarlierPreviousTaskColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new earlier previous tasks color.\r\n */\r\npublic void setEarlierPreviousTaskColor(Color color) {\r\n    getUIConfiguration().setEarlierPreviousTaskColor(color);\r\n}"},
 {"id":406, "name":"setExport3dBorders(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setExport3dBorders(boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setExport3dBorders(boolean borders3d) {\r\n    bExport3DBorders = borders3d;\r\n}"},
 {"id":407, "name":"setExportComplete(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setExportComplete(boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setExportComplete(boolean exportComplete) {\r\n    bExportComplete = exportComplete;\r\n}"},
 {"id":408, "name":"setExportName(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setExportName(boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setExportName(boolean exportName) {\r\n    bExportName = exportName;\r\n}"},
 {"id":409, "name":"setExportRelations(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setExportRelations(boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setExportRelations(boolean eportRelations) {\r\n    bExportRelations = eportRelations;\r\n}"},
 {"id":410, "name":"setFTPDirectory(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setFTPDirectory(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @param pvString\r\n * \t\t\r\n */\r\npublic void setFTPDirectory(String pvString) {\r\n    FTPDirectory = pvString;\r\n}"},
 {"id":411, "name":"setFTPPwd(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setFTPPwd(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @param pvString\r\n * \t\t\r\n */\r\npublic void setFTPPwd(String pvString) {\r\n    FTPPwd = pvString;\r\n}"},
 {"id":412, "name":"setFTPUrl(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setFTPUrl(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @param pvString\r\n * \t\t\r\n */\r\npublic void setFTPUrl(String pvString) {\r\n    FTPUrl = pvString;\r\n}"},
 {"id":413, "name":"setFTPUser(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setFTPUser(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @param pvString\r\n * \t\t\r\n */\r\npublic void setFTPUser(String pvString) {\r\n    FTPUser = pvString;\r\n}"},
 {"id":414, "name":"setIconList(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setIconList(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setIconList(String list) {\r\n    iconListAsString = list;\r\n}"},
 {"id":415, "name":"setIconSize(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setIconSize(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Set a new icon size. Must be 16, 24 (or 32 exceptionnally)\r\n */\r\npublic void setIconSize(String sIconSize) {\r\n    iconSize = sIconSize;\r\n}"},
 {"id":416, "name":"setLaterPreviousTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setLaterPreviousTaskColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new later previous tasks color.\r\n */\r\npublic void setLaterPreviousTaskColor(Color color) {\r\n    getUIConfiguration().setLaterPreviousTaskColor(color);\r\n}"},
 {"id":417, "name":"setLockDAVMinutes(int)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setLockDAVMinutes(int)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new value for web dav locking.\r\n */\r\npublic void setLockDAVMinutes(int minuteslock) {\r\n    lockDAVMinutes = minuteslock;\r\n}"},
 {"id":418, "name":"setLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set new drag time with mouse value.\r\n */\r\n// public void setDragTime(boolean dragTime){\r\n// this.dragTime = dragTime;\r\n// }\r\npublic void setLookAndFeel(GanttLookAndFeelInfo lookAndFeel) {\r\n    this.lookAndFeel = lookAndFeel;\r\n}"},
 {"id":419, "name":"setOpenTips(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setOpenTips(boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set new open tips value.\r\n */\r\npublic void setOpenTips(boolean openTips) {\r\n    this.openTips = openTips;\r\n}"},
 {"id":420, "name":"setPreviousTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setPreviousTaskColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new previous tasks color.\r\n */\r\npublic void setPreviousTaskColor(Color color) {\r\n    getUIConfiguration().setPreviousTaskColor(color);\r\n}"},
 {"id":421, "name":"setRedline(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setRedline(boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setRedline(boolean isOn) {\r\n    this.redline = isOn;\r\n    getUIConfiguration().setRedlineOn(isOn);\r\n}"},
 {"id":422, "name":"setResourceColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setResourceColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new default resources color.\r\n */\r\npublic void setResourceColor(Color color) {\r\n    getUIConfiguration().setResourceColor(color);\r\n}"},
 {"id":423, "name":"setResourceOverloadColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setResourceOverloadColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new resources overload tasks color.\r\n */\r\npublic void setResourceOverloadColor(Color color) {\r\n    getUIConfiguration().setResourceOverloadColor(color);\r\n}"},
 {"id":424, "name":"setResourceUnderloadColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setResourceUnderloadColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new resources underload tasks color.\r\n */\r\npublic void setResourceUnderloadColor(Color color) {\r\n    getUIConfiguration().setResourceUnderloadColor(color);\r\n}"},
 {"id":425, "name":"setShowStatusBar(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setShowStatusBar(boolean)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set show the status bar.\r\n */\r\npublic void setShowStatusBar(boolean showStatusBar) {\r\n    bShowStatusBar = showStatusBar;\r\n}"},
 {"id":426, "name":"setTaskNamePrefix(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setTaskNamePrefix(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setTaskNamePrefix(String taskNamePrefix) {\r\n    sTaskNamePrefix = taskNamePrefix;\r\n}"},
 {"id":427, "name":"setToolBarPosition(int)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setToolBarPosition(int)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set the toolbar position.\r\n */\r\npublic void setToolBarPosition(int iToolBarPosition) {\r\n    toolBarPosition = iToolBarPosition;\r\n}"},
 {"id":428, "name":"setUIConfiguration(net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setUIConfiguration(net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"public void setUIConfiguration(UIConfiguration uiConfiguration) {\r\n    this.myUIConfig = uiConfiguration;\r\n}"},
 {"id":429, "name":"setUndoNumber(int)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setUndoNumber(int)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * set a new value for undo number.\r\n */\r\npublic void setUndoNumber(int number) {\r\n    undoNumber = number;\r\n}"},
 {"id":430, "name":"setWeekEndColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setWeekEndColor(java.awt.Color)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Set a new week end color.\r\n */\r\npublic void setWeekEndColor(Color color) {\r\n    getUIConfiguration().setWeekEndColor(color);\r\n}"},
 {"id":431, "name":"setWindowPosition(int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setWindowPosition(int,int)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Set new window position (top left corner)\r\n */\r\npublic void setWindowPosition(int x, int y) {\r\n    this.x = x;\r\n    this.y = y;\r\n}"},
 {"id":432, "name":"setWindowSize(int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setWindowSize(int,int)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Set new window position (top left corner)\r\n */\r\npublic void setWindowSize(int width, int height) {\r\n    this.width = width;\r\n    this.height = height;\r\n}"},
 {"id":433, "name":"setWorkingDirectory(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setWorkingDirectory(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Set new working directory value.\r\n */\r\npublic void setWorkingDirectory(String workingDirectory) {\r\n    workingDir = workingDirectory;\r\n}"},
 {"id":434, "name":"setXslDir(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setXslDir(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Set a new xsl directory for html export.\r\n */\r\npublic void setXslDir(String xslDir) {\r\n    this.xslDir = xslDir;\r\n}"},
 {"id":435, "name":"setXslFo(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.setXslFo(java.lang.String)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"/**\r\n * Set a new xsl-fo file for pdf export.\r\n */\r\npublic void setXslFo(String xslFo) {\r\n    this.xslFo = xslFo;\r\n}"},
 {"id":436, "name":"startElement(java.lang.String,org.xml.sax.Attributes,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions.startElement(java.lang.String,org.xml.sax.Attributes,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"48", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions", "sourcecode":"// iconListAsIntArray = initIconList ();\r\n/**\r\n * Constructor. public GanttOptions(Color c, int x, int y, int width, int\r\n * height, GanttLookAndFeelInfo lookAndFeel, boolean automatic, boolean\r\n * dragTime, String xslDir, String xslFo,String workingDir, boolean tips,\r\n * boolean redline, int lockDAVMinutes, DocumentsMRU documentsMRU,\r\n * UIConfiguration uiConfiguration, RoleManager roleManager) { myRoleManager =\r\n * roleManager; color = c; this.x = x; this.y = y; this.width = width;\r\n * this.height = height; this.lookAndFeel = lookAndFeel;\r\n * this.automatic=automatic; this.dragTime=dragTime; this.openTips=tips;\r\n * this.redline=redline; this.lockDAVMinutes=lockDAVMinutes; this.myUIConfig =\r\n * uiConfiguration; if(xslFo!=null) this.xslFo=xslFo; if (xslDir != null)\r\n * this.xslDir = xslDir; try { this.workingDir =\r\n * System.getProperty(\"user.home\"); } catch (AccessControlException e) { //\r\n * This can happen when running in a sandbox (Java WebStart)\r\n * System.err.println (e + \": \" + e.getMessage()); } if (workingDir != null &&\r\n * new File(workingDir).exists()) this.workingDir = workingDir;\r\n * this.documentsMRU = documentsMRU; }\r\n */\r\nprivate void startElement(String name, Attributes attrs, TransformerHandler handler) throws SAXException {\r\n    handler.startElement(\"\", name, name, attrs);\r\n}"},
 {"id":437, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttOptions$GanttXMLOptionsParser.-init-()", "ownerclassid":"47", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions$GanttXMLOptionsParser", "sourcecode":"GanttXMLOptionsParser() {\r\n}"},
 {"id":438, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.GanttOptions$GanttXMLOptionsParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"47", "ownerclassname":"net.sourceforge.ganttproject.GanttOptions$GanttXMLOptionsParser", "sourcecode":"public void startElement(String namespaceURI, String sName, // simple\r\n// name\r\nString qName, // qualified name\r\nAttributes attrs) throws SAXException {\r\n    int r = 0;\r\n    int g = 0;\r\n    int b = 0;\r\n    if (\"option\".equals(qName)) {\r\n        GPOption option = ((GPOption) (myGPOptions.get(attrs.getValue(\"id\"))));\r\n        if (option != null) {\r\n            option.lock();\r\n            option.loadPersistentValue(attrs.getValue(\"value\"));\r\n            option.commit();\r\n        }\r\n        return;\r\n    }\r\n    if (attrs != null) {\r\n        for (int i = 0; i < (attrs.getLength()); i++) {\r\n            String aName = attrs.getQName(i);// Attr name\r\n\r\n            String value = attrs.getValue(i);\r\n            String tagDotAttribute = (qName + \".\") + aName;\r\n            GP1XOptionConverter converter = ((GP1XOptionConverter) (myTagDotAttribute_Converter.get(tagDotAttribute)));\r\n            if (converter != null) {\r\n                converter.loadValue(value);\r\n                continue;\r\n            }\r\n            if (qName.equals(\"language\")) {\r\n                if (aName == \"selection\") {\r\n                    if ((value.equals(\"English\")) || (value.equals(\"en\"))) {\r\n                        language.setLocale(Locale.US);\r\n                    } else\r\n                        if ((value.equals(\"English (UK)\")) || (value.equals(\"en_GB\"))) {\r\n                            language.setLocale(Locale.UK);\r\n                        } else\r\n                            if ((value.equals(\"Franu00e7ais\")) || (value.equals(\"fr\"))) {\r\n                                language.setLocale(Locale.FRANCE);\r\n                            } else\r\n                                if ((value.equals(\"Espau00f1ol\")) || (value.equals(\"es\"))) {\r\n                                    language.setLocale(new Locale(\"es\", \"ES\"));\r\n                                } else\r\n                                    if ((value.equals(\"Portugues\")) || (value.equals(\"pt\"))) {\r\n                                        language.setLocale(new Locale(\"pt\", \"PT\"));\r\n                                    } else\r\n                                        if ((value.equals(\"Portuguu00eas do Brasil\")) || (value.equals(\"pt_BR\"))) {\r\n                                            language.setLocale(new Locale(\"pt\", \"BR\"));\r\n                                        } else\r\n                                            if ((value.equals(\"Deutsch\")) || (value.equals(\"de\"))) {\r\n                                                language.setLocale(Locale.GERMANY);\r\n                                            } else\r\n                                                if ((value.equals(\"Norsk\")) || (value.equals(\"no\"))) {\r\n                                                    language.setLocale(new Locale(\"no\", \"NO\"));\r\n                                                } else\r\n                                                    if ((value.equals(\"Italiano\")) || (value.equals(\"it\"))) {\r\n                                                        language.setLocale(Locale.ITALY);\r\n                                                    } else\r\n                                                        if ((value.equals(\"Japanese\")) || (value.equals(\"jpn\"))) {\r\n                                                            language.setLocale(new Locale(\"ja\", \"JP\"));\r\n                                                        } else\r\n                                                            if ((value.equals(\"Tu00fcrku00e7e\")) || (value.equals(\"tr\"))) {\r\n                                                                language.setLocale(new Locale(\"tr\", \"TR\"));\r\n                                                            } else\r\n                                                                if ((((value.equals(\"Simplified Chinese\")) || (value.equals(\"SIMPLIFIED_CHINESE\"))) || (value.equals(\"CHINA\"))) || (value.equals(\"zh_CN\"))) {\r\n                                                                    language.setLocale(Locale.CHINA);\r\n                                                                } else\r\n                                                                    if ((((value.equals(\"Traditional Chinese\")) || (value.equals(\"TRADITIONAL_CHINESE\"))) || (value.equals(\"TAIWAN\"))) || (value.equals(\"zh_TW\"))) {\r\n                                                                        language.setLocale(Locale.TAIWAN);\r\n                                                                    } else\r\n                                                                        if ((value.equals(\"Polski\")) || (value.equals(\"pl\"))) {\r\n                                                                            language.setLocale(new Locale(\"pl\", \"PL\"));\r\n                                                                        } else\r\n                                                                            if ((value.equals(\"u0420u0443u0441u0441u043au0438u0439\")) || (value.equals(\"ru\"))) {\r\n                                                                                language.setLocale(new Locale(\"ru\", \"RU\"));\r\n                                                                            } else\r\n                                                                                if ((value.equals(\"Estonian\")) || (value.equals(\"et\"))) {\r\n                                                                                    language.setLocale(new Locale(\"et\", \"ET\"));\r\n                                                                                } else\r\n                                                                                    if (value.equals(\"fi\")) {\r\n                                                                                        language.setLocale(new Locale(\"fi\", \"FI\"));\r\n                                                                                    } else\r\n                                                                                        if ((value.equals(\"Hungarian\")) || (value.equals(\"hu\"))) {\r\n                                                                                            language.setLocale(new Locale(\"hu\", \"HU\"));\r\n                                                                                        } else\r\n                                                                                            if ((value.equals(\"Hrvatski\")) || (value.equals(\"hr\"))) {\r\n                                                                                                language.setLocale(new Locale(\"hr\", \"HR\"));\r\n                                                                                            } else\r\n                                                                                                if ((value.equals(\"u05d0u05e0u05d2u05dcu05d9u05ea\")) || (value.equals(\"iw\"))) {\r\n                                                                                                    language.setLocale(new Locale(\"iw\", \"IW\"));\r\n                                                                                                } else\r\n                                                                                                    if ((value.equals(\"Slovenu0161u010dina\")) || (value.equals(\"si\"))) {\r\n                                                                                                        language.setLocale(new Locale(\"sl\", \"SL\"));\r\n                                                                                                    } else\r\n                                                                                                        if ((value.equals(\"Slovensky\")) || (value.equals(\"sk\"))) {\r\n                                                                                                            language.setLocale(new Locale(\"sk\", \"SK\"));\r\n                                                                                                        } else\r\n                                                                                                            if ((value.equals(\"Svenska\")) || (value.equals(\"sv\"))) {\r\n                                                                                                                language.setLocale(new Locale(\"sv\", \"SV\"));\r\n                                                                                                            } else\r\n                                                                                                                if ((value.equals(\"Romanian\")) || (value.equals(\"ro\"))) {\r\n                                                                                                                    language.setLocale(new Locale(\"ro\", \"RO\"));\r\n                                                                                                                } else\r\n                                                                                                                    if ((value.equals(\"Nederlands\")) || (value.equals(\"nl\"))) {\r\n                                                                                                                        language.setLocale(new Locale(\"nl\", \"NL\"));\r\n                                                                                                                    } else\r\n                                                                                                                        if ((value.equals(\"u010cesky\")) || (value.equals(\"cz\"))) {\r\n                                                                                                                            language.setLocale(new Locale(\"cs\", \"CZ\"));\r\n                                                                                                                        } else\r\n                                                                                                                            if ((value.equals(\"Dansk\")) || (value.equals(\"da\"))) {\r\n                                                                                                                                language.setLocale(new Locale(\"da\", \"DK\"));\r\n                                                                                                                            } else\r\n                                                                                                                                if ((value.equals(\"Tiu1ebfng anh\")) || (value.equals(\"vi\"))) {\r\n                                                                                                                                    language.setLocale(new Locale(\"vi\", \"VN\"));\r\n                                                                                                                                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n            } else\r\n                if (qName.equals(\"task-color\")) {\r\n                    if (aName.equals(\"red\")) {\r\n                        r = new Integer(value).hashCode();\r\n                    } else\r\n                        if (aName.equals(\"green\")) {\r\n                            g = new Integer(value).hashCode();\r\n                        } else\r\n                            if (aName.equals(\"blue\")) {\r\n                                b = new Integer(value).hashCode();\r\n                            }\r\n\r\n\r\n                } else\r\n                    if (qName.equals(\"geometry\")) {\r\n                        if (aName.equals(\"x\")) {\r\n                            x = new Integer(value).hashCode();\r\n                        }\r\n                        if (aName.equals(\"y\")) {\r\n                            y = new Integer(value).hashCode();\r\n                        }\r\n                        if (aName.equals(\"width\")) {\r\n                            width = new Integer(value).hashCode();\r\n                        }\r\n                        if (aName.equals(\"height\")) {\r\n                            height = new Integer(value).hashCode();\r\n                        }\r\n                    } else\r\n                        if (qName.equals(\"looknfeel\")) {\r\n                            if (aName.equals(\"name\")) {\r\n                                styleName = value;\r\n                            }\r\n                            if (aName.equals(\"class\")) {\r\n                                styleClass = value;\r\n                            }\r\n                        } else\r\n                            if (qName.equals(\"file\")) {\r\n                                if (aName.equals(\"path\")) {\r\n                                    documentsMRU.append(myDocumentManager.getDocument(value));\r\n                                }\r\n                            } else\r\n                                if (qName.equals(\"automatic-launch\")) {\r\n                                    if (aName.equals(\"value\")) {\r\n                                        automatic = new Boolean(value).booleanValue();\r\n                                    }\r\n                                } else\r\n                                    if (qName.equals(\"tips-on-startup\")) {\r\n                                        if (aName.equals(\"value\")) {\r\n                                            openTips = new Boolean(value).booleanValue();\r\n                                        }\r\n                                    } else\r\n                                        if (qName.equals(\"lockdavminutes\")) {\r\n                                            if (aName.equals(\"value\")) {\r\n                                                lockDAVMinutes = new Integer(value).intValue();\r\n                                            }\r\n                                        } else\r\n                                            if (qName.equals(\"xsl-dir\")) {\r\n                                                if (aName.equals(\"dir\")) {\r\n                                                    if (new File(value).exists())\r\n                                                        xslDir = value;\r\n\r\n                                                }\r\n                                            } else\r\n                                                if (qName.equals(\"xsl-fo\")) {\r\n                                                    if (aName.equals(\"file\")) {\r\n                                                        if (new File(value).exists())\r\n                                                            xslFo = value;\r\n\r\n                                                    }\r\n                                                } else\r\n                                                    if (qName.equals(\"working-dir\")) {\r\n                                                        if (aName.equals(\"dir\")) {\r\n                                                            if (new File(value).exists())\r\n                                                                workingDir = value;\r\n\r\n                                                        }\r\n                                                    } else\r\n                                                        if (qName.equals(\"task-name\")) {\r\n                                                            if (aName.equals(\"prefix\"))\r\n                                                                sTaskNamePrefix = value;\r\n\r\n                                                        } else\r\n                                                            if (qName.equals(\"toolBar\")) {\r\n                                                                if (aName.equals(\"position\"))\r\n                                                                    toolBarPosition = new Integer(value).intValue();\r\n                                                                else\r\n                                                                    if (aName.equals(\"icon-size\"))\r\n                                                                        iconSize = value;\r\n                                                                    else\r\n                                                                        if (aName.equals(\"show\"))\r\n                                                                            buttonsshow = new Integer(value).intValue();\r\n\r\n\r\n\r\n                                                            } else\r\n                                                                if (qName.equals(\"statusBar\")) {\r\n                                                                    if (aName.equals(\"show\"))\r\n                                                                        bShowStatusBar = new Boolean(value).booleanValue();\r\n\r\n                                                                } else\r\n                                                                    if (qName.equals(\"export\")) {\r\n                                                                        if (aName.equals(\"name\"))\r\n                                                                            bExportName = new Boolean(value).booleanValue();\r\n                                                                        else\r\n                                                                            if (aName.equals(\"complete\"))\r\n                                                                                bExportComplete = new Boolean(value).booleanValue();\r\n                                                                            else\r\n                                                                                if (aName.equals(\"relations\"))\r\n                                                                                    bExportRelations = new Boolean(value).booleanValue();\r\n                                                                                else\r\n                                                                                    if (aName.equals(\"border3d\"))\r\n                                                                                        bExport3DBorders = new Boolean(value).booleanValue();\r\n\r\n\r\n\r\n\r\n                                                                    } else\r\n                                                                        if (qName.equals(\"colors\")) {\r\n                                                                            if (aName.equals(\"resources\")) {\r\n                                                                                Color colorR = ColorConvertion.determineColor(value);\r\n                                                                                if (colorR != null)\r\n                                                                                    setResourceColor(colorR);\r\n\r\n                                                                            } else\r\n                                                                                if (aName.equals(\"resourcesOverload\")) {\r\n                                                                                    Color colorR = ColorConvertion.determineColor(value);\r\n                                                                                    if (colorR != null)\r\n                                                                                        setResourceOverloadColor(colorR);\r\n\r\n                                                                                } else\r\n                                                                                    if (aName.equals(\"resourcesUnderload\")) {\r\n                                                                                        Color colorR = ColorConvertion.determineColor(value);\r\n                                                                                        if (colorR != null)\r\n                                                                                            setResourceUnderloadColor(colorR);\r\n\r\n                                                                                    } else\r\n                                                                                        if (aName.equals(\"weekEnd\")) {\r\n                                                                                            Color colorR = ColorConvertion.determineColor(value);\r\n                                                                                            if (colorR != null)\r\n                                                                                                setWeekEndColor(colorR);\r\n\r\n                                                                                        } else\r\n                                                                                            if (aName.equals(\"daysOff\")) {\r\n                                                                                                Color colorD = ColorConvertion.determineColor(value);\r\n                                                                                                if (colorD != null)\r\n                                                                                                    setDaysOffColor(colorD);\r\n\r\n                                                                                            }\r\n\r\n\r\n\r\n\r\n                                                                        } else\r\n                                                                            if (qName.equals(\"csv-general\")) {\r\n                                                                                if (aName.equals(\"fixed\"))\r\n                                                                                    csvOptions.bFixedSize = new Boolean(value).booleanValue();\r\n\r\n                                                                                if (aName.equals(\"separatedChar\"))\r\n                                                                                    csvOptions.sSeparatedChar = value;\r\n\r\n                                                                                if (aName.equals(\"separatedTextChar\"))\r\n                                                                                    csvOptions.sSeparatedTextChar = value;\r\n\r\n                                                                            } else\r\n                                                                                if (qName.equals(\"csv-tasks\")) {\r\n                                                                                    if (aName.equals(\"id\"))\r\n                                                                                        csvOptions.bExportTaskID = new Boolean(value).booleanValue();\r\n\r\n                                                                                    if (aName.equals(\"name\"))\r\n                                                                                        csvOptions.bExportTaskName = new Boolean(value).booleanValue();\r\n\r\n                                                                                    if (aName.equals(\"start-date\"))\r\n                                                                                        csvOptions.bExportTaskStartDate = new Boolean(value).booleanValue();\r\n\r\n                                                                                    if (aName.equals(\"end-date\"))\r\n                                                                                        csvOptions.bExportTaskEndDate = new Boolean(value).booleanValue();\r\n\r\n                                                                                    if (aName.equals(\"percent\"))\r\n                                                                                        csvOptions.bExportTaskPercent = new Boolean(value).booleanValue();\r\n\r\n                                                                                    if (aName.equals(\"duration\"))\r\n                                                                                        csvOptions.bExportTaskDuration = new Boolean(value).booleanValue();\r\n\r\n                                                                                    if (aName.equals(\"webLink\"))\r\n                                                                                        csvOptions.bExportTaskWebLink = new Boolean(value).booleanValue();\r\n\r\n                                                                                    if (aName.equals(\"resources\"))\r\n                                                                                        csvOptions.bExportTaskResources = new Boolean(value).booleanValue();\r\n\r\n                                                                                    if (aName.equals(\"notes\"))\r\n                                                                                        csvOptions.bExportTaskNotes = new Boolean(value).booleanValue();\r\n\r\n                                                                                } else\r\n                                                                                    if (qName.equals(\"csv-resources\")) {\r\n                                                                                        if (aName.equals(\"id\"))\r\n                                                                                            csvOptions.bExportResourceID = new Boolean(value).booleanValue();\r\n\r\n                                                                                        if (aName.equals(\"name\"))\r\n                                                                                            csvOptions.bExportResourceName = new Boolean(value).booleanValue();\r\n\r\n                                                                                        if (aName.equals(\"mail\"))\r\n                                                                                            csvOptions.bExportResourceMail = new Boolean(value).booleanValue();\r\n\r\n                                                                                        if (aName.equals(\"phone\"))\r\n                                                                                            csvOptions.bExportResourcePhone = new Boolean(value).booleanValue();\r\n\r\n                                                                                        if (aName.equals(\"role\"))\r\n                                                                                            csvOptions.bExportResourceRole = new Boolean(value).booleanValue();\r\n\r\n                                                                                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n    // old version of the color version\r\n    if (qName.equals(\"task-color\")) {\r\n        // Color color = new Color(r, g, b);\r\n        // getUIConfiguration().setTaskColor(color);\r\n        setDefaultTaskColor(new Color(r, g, b));\r\n    }\r\n    if (qName.equals(\"font\")) {\r\n        String category = attrs.getValue(\"category\");\r\n        if (\"menu\".equals(category)) {\r\n            myMenuFont = Font.decode(attrs.getValue(\"spec\"));\r\n        } else\r\n            if (\"chart-main\".equals(category)) {\r\n                myChartMainFont = Font.decode(attrs.getValue(\"spec\"));\r\n            }\r\n\r\n    }\r\n}"},
 {"id":439, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.-init-(java.lang.String,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"// constructor for a new previous state\r\npublic GanttPreviousState(String name, GanttProject project) throws IOException {\r\n    myName = name;\r\n    myTree = ((GanttTree2) (project.getTree()));\r\n    myProject = project;\r\n    myFile = createTemporaryFile();\r\n    myFile.deleteOnExit();\r\n    os = new OutputStreamWriter(new FileOutputStream(myFile), \"UTF-8\");\r\n    saveFile();\r\n}"},
 {"id":440, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.-init-(java.lang.String)", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"// constructor for a loaded previous state\r\npublic GanttPreviousState(String name) throws IOException {\r\n    myName = name;\r\n    myFile = createTemporaryFile();\r\n    myFile.deleteOnExit();\r\n    os = new OutputStreamWriter(new FileOutputStream(myFile), \"UTF-8\");\r\n}"},
 {"id":441, "name":"correct(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.correct(java.lang.String)", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"/**\r\n * Correct the charcters to be compatible with xml format\r\n */\r\npublic String correct(String s) {\r\n    String res;\r\n    if (s != null) {\r\n        res = s.replaceAll(\"&\", \"&#38;\");\r\n        res = res.replaceAll(\"<\", \"&#60;\");\r\n        res = res.replaceAll(\">\", \"&#62;\");\r\n        res = res.replaceAll(\"/\", \"&#47;\");\r\n        res = res.replaceAll(\"\"\", \"&#34;\");\r\n    } else\r\n        res = s;\r\n\r\n    return res;\r\n}"},
 {"id":442, "name":"createTemporaryFile()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.createTemporaryFile()", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"private File createTemporaryFile() throws IOException {\r\n    String fileName = \"_GanttProject_ps_\" + ((int) (10000.0 * (Math.random())));\r\n    return File.createTempFile(fileName, \".gan\");\r\n}"},
 {"id":443, "name":"getFile()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.getFile()", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public File getFile() {\r\n    return myFile;\r\n}"},
 {"id":444, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.getName()", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public String getName() {\r\n    return myName;\r\n}"},
 {"id":445, "name":"load()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.load()", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public ArrayList load() throws IOException, ParserConfigurationException, SAXException {\r\n    ArrayList tasks = null;\r\n    PreviousStateTasksTagHandler handler = new PreviousStateTasksTagHandler(null);\r\n    SAXParserFactory factory = SAXParserFactory.newInstance();\r\n    SAXParser saxParser = factory.newSAXParser();\r\n    saxParser.parse(myFile, handler);\r\n    tasks = handler.getTasks();\r\n    return tasks;\r\n}"},
 {"id":446, "name":"remove()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.remove()", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public void remove() {\r\n    myFile.delete();\r\n}"},
 {"id":447, "name":"replaceAll(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public String replaceAll(String notes, String s1, String s2) {\r\n    return notes.replaceAll(s1, s2);\r\n}"},
 {"id":448, "name":"saveFile()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.saveFile()", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public void saveFile() {\r\n    try {\r\n        AttributesImpl attrs = new AttributesImpl();\r\n        StreamResult result = new StreamResult(os);\r\n        SAXTransformerFactory factory = ((SAXTransformerFactory) (SAXTransformerFactory.newInstance()));\r\n        TransformerHandler handler = factory.newTransformerHandler();\r\n        Transformer serializer = handler.getTransformer();\r\n        serializer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\r\n        serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\r\n        serializer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\r\n        handler.setResult(result);\r\n        handler.startDocument();\r\n        handler.endDocument();\r\n        writeTasks();\r\n        os.close();\r\n    } catch (Throwable e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n}"},
 {"id":449, "name":"saveFilesFromLoaded(java.util.ArrayList)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.saveFilesFromLoaded(java.util.ArrayList)", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public void saveFilesFromLoaded(ArrayList tasks) {\r\n    try {\r\n        AttributesImpl attrs = new AttributesImpl();\r\n        StreamResult result = new StreamResult(os);\r\n        SAXTransformerFactory factory = ((SAXTransformerFactory) (SAXTransformerFactory.newInstance()));\r\n        TransformerHandler handler = factory.newTransformerHandler();\r\n        Transformer serializer = handler.getTransformer();\r\n        serializer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\r\n        serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\r\n        serializer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\r\n        handler.setResult(result);\r\n        handler.startDocument();\r\n        handler.endDocument();\r\n        writeTasksFromLoaded(tasks);\r\n        os.close();\r\n    } catch (Throwable e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n}"},
 {"id":450, "name":"write(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.write(java.lang.String)", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public void write(String s) {\r\n    try {\r\n        os.write(s);\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n}"},
 {"id":451, "name":"writeTask(java.io.Writer,javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.writeTask(java.io.Writer,javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"/**\r\n * Simple write information of tasks\r\n */\r\npublic void writeTask(Writer fout, DefaultMutableTreeNode node) {\r\n    ArrayList lot = new ArrayList();\r\n    try {\r\n        GanttTask task = ((GanttTask) (node.getUserObject()));\r\n        if ((task.getTaskID()) == (-1))\r\n            throw new RuntimeException(\"A task can not has a number equal to -1\");\r\n\r\n        int id = task.getTaskID();\r\n        /* if (id >= lot.size()) { return; } */\r\n        boolean haschild = false;\r\n        ArrayList child = myTree.getAllChildTask(node);\r\n        if ((child.size()) != 0) {\r\n            haschild = true;\r\n        }\r\n        // Writes data of task\r\n        fout.write((((((s) + (s)) + \"<previous-task id=\"\") + (task.getTaskID()))// lots.indexOf(task.toString())\r\n         + // +\r\n        // //By\r\n        // CL\r\n        \"\"\"));\r\n        fout.write(((\" start=\"\" + (task.getStart().toXMLString())) + \"\"\"));\r\n        fout.write(((\" duration=\"\" + (task.getLength())) + \"\"\"));\r\n        fout.write(((\" meeting=\"\" + (task.isMilestone())) + \"\"\"));\r\n        fout.write(((\" super=\"\" + haschild) + \"\"\"));\r\n        fout.write(\"/>\n\");\r\n        // Write the child of the task\r\n        if (haschild) {\r\n            for (int i = 0; i < (child.size()); i++) {\r\n                Task task2 = ((Task) (((DefaultMutableTreeNode) (child.get(i))).getUserObject()));\r\n                int newid = -1;// lot.lastIndexOf(task2);\r\n\r\n                for (int j = 0; j < (lot.size()); j++) {\r\n                    String a = task2.toString();\r\n                    if (a == null)\r\n                        System.out.println(\"nul\");\r\n\r\n                    String b = lot.get(j).toString();\r\n                    if (a.equals(b)) {\r\n                        newid = j;\r\n                    }\r\n                }\r\n                writeTask(fout, ((DefaultMutableTreeNode) (child.get(i))));\r\n            }\r\n        }\r\n        // end of task section\r\n    } catch (Exception e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n}"},
 {"id":452, "name":"writeTasks()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.writeTasks()", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"private void writeTasks() {\r\n    Enumeration children = ((DefaultMutableTreeNode) (myTree.getJTree().getModel().getRoot())).children();\r\n    write(((((s) + \"<previous-tasks name=\"\") + (myName)) + \"\">\n\"));\r\n    while (children.hasMoreElements()) {\r\n        DefaultMutableTreeNode element = ((DefaultMutableTreeNode) (children.nextElement()));\r\n        /* lot.indexOf(element) */\r\n        writeTask(os, element);\r\n    } \r\n    write(((s) + \"</previous-tasks>\"));\r\n}"},
 {"id":453, "name":"writeTasksFromLoaded(java.util.ArrayList)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousState.writeTasksFromLoaded(java.util.ArrayList)", "ownerclassid":"49", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousState", "sourcecode":"public void writeTasksFromLoaded(ArrayList tasks) throws IOException {\r\n    write(((((s) + \"<previous-tasks name=\"\") + (myName)) + \"\">\n\"));\r\n    for (int i = 0; i < (tasks.size()); i++) {\r\n        os.write((((((s) + (s)) + \"<previous-task id=\"\") + (((GanttPreviousStateTask) (tasks.get(i))).getId())) + \"\"\"));\r\n        os.write(((\" start=\"\" + (((GanttPreviousStateTask) (tasks.get(i))).getStart().toXMLString())) + \"\"\"));\r\n        os.write(((\" duration=\"\" + (((GanttPreviousStateTask) (tasks.get(i))).getDuration())) + \"\"\"));\r\n        os.write(((\" meeting=\"\" + (((GanttPreviousStateTask) (tasks.get(i))).isMilestone())) + \"\"\"));\r\n        os.write(((\" super=\"\" + (((GanttPreviousStateTask) (tasks.get(i))).hasNested())) + \"\"\"));\r\n        os.write(\"/>\n\");\r\n    }\r\n    write(((s) + \"</previous-tasks>\"));\r\n}"},
 {"id":454, "name":"-init-(int,net.sourceforge.ganttproject.GanttCalendar,int,boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.-init-(int,net.sourceforge.ganttproject.GanttCalendar,int,boolean,boolean)", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public GanttPreviousStateTask(int id, GanttCalendar start, int duration, boolean isMilestone, boolean hasNested) {\r\n    myId = id;\r\n    myStart = start;\r\n    myDuration = duration;\r\n    this.isMilestone = isMilestone;\r\n    this.hasNested = hasNested;\r\n}"},
 {"id":455, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.getDuration()", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public int getDuration() {\r\n    return myDuration;\r\n}"},
 {"id":456, "name":"getEnd(net.sourceforge.ganttproject.calendar.GPCalendar)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.getEnd(net.sourceforge.ganttproject.calendar.GPCalendar)", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public GanttCalendar getEnd(GPCalendar calendar) {\r\n    int duration = myDuration;\r\n    GanttCalendar end = myStart.newAdd(myDuration);\r\n    for (int i = 0; i < duration; i++) {\r\n        // if (myId == 1)\r\n        // System.out.println (myStart.newAdd(i).getTime() + \" is workingDay : \" + calendar.isNonWorkingDay(myStart.newAdd(i).getTime()));\r\n        if (calendar.isNonWorkingDay(myStart.newAdd(i).getTime())) {\r\n            end.add(1);\r\n            duration++;\r\n        }\r\n    }\r\n    return end;\r\n}"},
 {"id":457, "name":"getId()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.getId()", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public int getId() {\r\n    return myId;\r\n}"},
 {"id":458, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.getStart()", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public GanttCalendar getStart() {\r\n    return myStart;\r\n}"},
 {"id":459, "name":"getState()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.getState()", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public int getState() {\r\n    return myState;\r\n}"},
 {"id":460, "name":"hasNested()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.hasNested()", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public boolean hasNested() {\r\n    return hasNested;\r\n}"},
 {"id":461, "name":"isAPart()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.isAPart()", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public boolean isAPart() {\r\n    return isAPart;\r\n}"},
 {"id":462, "name":"isMilestone()", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.isMilestone()", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public boolean isMilestone() {\r\n    return isMilestone;\r\n}"},
 {"id":463, "name":"setIsAPart(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.setIsAPart(boolean)", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public void setIsAPart(boolean isAPart) {\r\n    this.isAPart = isAPart;\r\n}"},
 {"id":464, "name":"setState(int)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.setState(int)", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public void setState(int state) {\r\n    myState = state;\r\n}"},
 {"id":465, "name":"setState(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.calendar.GPCalendar)", "fullmethod":"net.sourceforge.ganttproject.GanttPreviousStateTask.setState(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.calendar.GPCalendar)", "ownerclassid":"50", "ownerclassname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "sourcecode":"public void setState(Task task, GPCalendar calendar) {\r\n    if (task.getEnd().before(getEnd(calendar)))\r\n        setState(GanttPreviousStateTask.EARLIER);\r\n    else\r\n        if (task.getEnd().after(getEnd(calendar)))\r\n            setState(GanttPreviousStateTask.LATER);\r\n        else\r\n            setState(GanttPreviousStateTask.NORMAL);\r\n\r\n\r\n}"},
 {"id":466, "name":"-init-(boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.-init-(boolean,boolean)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttProject(boolean isOnlyViewer, boolean isApplet) {\r\n    System.err.println(\"Creating main frame...\");\r\n    ToolTipManager.sharedInstance().setInitialDelay(200);\r\n    ToolTipManager.sharedInstance().setDismissDelay(60000);\r\n    TaskSelectionManager taskSelectionManager = new TaskSelectionManager();\r\n    Mediator.registerTaskSelectionManager(taskSelectionManager);\r\n    /* [bbaranne] I add a Mediator object so that we can get the GanttProject\n    singleton whereever we are in the source code. Perhaps some of you\n    dont like this, but I believe that it is practical...\n     */\r\n    Mediator.registerGanttProject(this);\r\n    this.isOnlyViewer = isOnlyViewer;\r\n    if (!isOnlyViewer)\r\n        setTitle(language.getText(\"appliTitle\"));\r\n    else\r\n        setTitle(\"GanttViewer\");\r\n\r\n    setFocusable(true);\r\n    System.err.println(\"1. loading looknfeels\");\r\n    lookAndFeel = GanttLookAndFeels.getGanttLookAndFeels().getDefaultInfo();\r\n    options = new GanttOptions(getRoleManager(), getDocumentManager(), isOnlyViewer);\r\n    myUIConfiguration = options.getUIConfiguration();\r\n    class TaskManagerConfigImpl implements TaskManagerConfig {\r\n        public Color getDefaultColor() {\r\n            return myUIConfiguration.getTaskColor();\r\n        }\r\n\r\n        public GPCalendar getCalendar() {\r\n            return GanttProject.this.getActiveCalendar();\r\n        }\r\n\r\n        public TimeUnitStack getTimeUnitStack() {\r\n            return GanttProject.this.getTimeUnitStack();\r\n        }\r\n\r\n        public ResourceManager getResourceManager() {\r\n            return GanttProject.this.getHumanResourceManager();\r\n        }\r\n\r\n        public URL getProjectDocumentURL() {\r\n            try {\r\n                return getDocument().getURI().toURL();\r\n            } catch (MalformedURLException e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    TaskManagerConfig taskConfig = new TaskManagerConfigImpl();\r\n    myTaskManager = TaskManager.Access.newInstance(new TaskContainmentHierarchyFacade.Factory() {\r\n        public TaskContainmentHierarchyFacade createFacede() {\r\n            return GanttProject.this.getTaskContainment();\r\n        }\r\n    }, taskConfig, getCustomColumnsStorage());\r\n    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/ganttproject.png\"));\r\n    setIconImage(icon.getImage());\r\n    // Create each objects\r\n    myFacadeInvalidator = new FacadeInvalidator(getTree().getJTree().getModel());\r\n    getProject().addProjectEventListener(myFacadeInvalidator);\r\n    area = new GanttGraphicArea(this, getTree(), getTaskManager(), getZoomManager(), getUndoManager());\r\n    options.addOptionGroups(getUIFacade().getGanttChart().getOptionGroups());\r\n    options.addOptionGroups(getUIFacade().getResourceChart().getOptionGroups());\r\n    options.addOptionGroups(new GPOptionGroup[]{ getProjectUIFacade().getOptionGroup() });\r\n    options.addOptionGroups(getDocumentManager().getNetworkOptionGroups());\r\n    myRowHeightAligner = new GanttProjectBase.RowHeightAligner(tree, area.getMyChartModel());\r\n    area.getMyChartModel().addOptionChangeListener(myRowHeightAligner);\r\n    System.err.println(\"2. loading options\");\r\n    initOptions();\r\n    area.setUIConfiguration(myUIConfiguration);\r\n    getTree().setGraphicArea(area);\r\n    // \r\n    miChartOptions = new JMenuItem(area.getOptionsDialogAction());\r\n    getZoomManager().addZoomListener(area.getZoomListener());\r\n    /* myCopyAction = new CopyAction((GanttTree2) getTree(), options\n    .getIconSize());\n     */\r\n    // myCopyAction = new CopyAction(this, options.getIconSize());\r\n    // \r\n    // /*myPasteAction = new PasteAction((GanttTree2) getTree(), options\r\n    // .getIconSize());*/\r\n    // \r\n    // myPasteAction = new PasteAction(this, options.getIconSize());\r\n    // \r\n    // /*myCutAction = new CutAction((GanttTree2) getTree(), options\r\n    // .getIconSize());*/\r\n    // \r\n    // myCutAction = new CutAction(this, options.getIconSize());\r\n    System.err.println(\"3. creating menu...\");\r\n    myRefreshAction = new RefreshViewAction(getUIFacade(), options);\r\n    // myRolloverActions.add(myCopyAction);\r\n    // myRolloverActions.add(myPasteAction);\r\n    // myRolloverActions.add(myCutAction);\r\n    myRolloverActions.add(myRefreshAction);\r\n    getTree().setActions();\r\n    // Create the menus\r\n    bar = new JMenuBar();\r\n    if (!isOnlyViewer)\r\n        setJMenuBar(bar);\r\n\r\n    // Allocation of the menus\r\n    mProject = new JMenu();\r\n    mMRU = new JMenu();\r\n    mMRU.setIcon(new ImageIcon(getClass().getResource(\"/icons/recent_16.gif\")));\r\n    mEdit = new JMenu();\r\n    // mView = new JMenu ();\r\n    mTask = new JMenu();\r\n    mHuman = new JMenu();\r\n    mHelp = new JMenu();\r\n    mCalendar = new JMenu();\r\n    miUndo = new JMenuItem(new UndoAction(getUndoManager(), \"16\", this));\r\n    mEdit.add(miUndo);\r\n    // miUndo.setEnabled(false);\r\n    miRedo = new JMenuItem(new RedoAction(getUndoManager(), \"16\", this));\r\n    mEdit.add(miRedo);\r\n    // miRedo.setEnabled(false);\r\n    mEdit.addSeparator();\r\n    createProjectMenu();\r\n    miRefresh = new JMenuItem(myRefreshAction);\r\n    // miRefresh.setAccelerator((KeyStroke)myRefreshAction.getValue(Action.ACCELERATOR_KEY));\r\n    mEdit.add(miRefresh);\r\n    mEdit.addSeparator();\r\n    // miCut = new JMenuItem(myCutAction);\r\n    mEdit.add(getViewManager().getCutAction());\r\n    // miCopy = new JMenuItem(myCopyAction);\r\n    mEdit.add(getViewManager().getCopyAction());\r\n    // miPaste = new JMenuItem(myPasteAction);\r\n    mEdit.add(getViewManager().getPasteAction());\r\n    mEdit.addSeparator();\r\n    miOptions = createNewItem(\"/icons/settings_16.gif\");\r\n    mEdit.add(miOptions);\r\n    myNewTaskAction = new NewTaskAction(((IGanttProject) (this)));\r\n    mTask.add(myNewTaskAction);\r\n    miDeleteTask = createNewItem(\"/icons/delete_16.gif\");\r\n    mTask.add(miDeleteTask);\r\n    myTaskPropertiesAction = new TaskPropertiesAction(getProject(), Mediator.getTaskSelectionManager(), getUIFacade());\r\n    mTask.add(myTaskPropertiesAction);\r\n    getTree().setTaskPropertiesAction(myTaskPropertiesAction);\r\n    getResourcePanel().setTaskPropertiesAction(myTaskPropertiesAction);\r\n    // \r\n    // \r\n    myNewHumanAction = new NewHumanAction(getHumanResourceManager(), getRoleManager(), this, this) {\r\n        public void actionPerformed(ActionEvent event) {\r\n            super.actionPerformed(event);\r\n            getTabs().setSelectedIndex(UIFacade.RESOURCES_INDEX);\r\n        }\r\n    };\r\n    mHuman.add(myNewHumanAction);\r\n    myDeleteHumanAction = getResourceActions().getDeleteHumanAction();\r\n    miDelHuman = new JMenuItem(myDeleteHumanAction);\r\n    mHuman.add(miDelHuman);\r\n    // miPropHuman = createNewItem(\"/icons/properties_16.gif\");\r\n    // mHuman.add(miPropHuman);\r\n    mHuman.add(getResourcePanel().getResourcePropertiesAction());\r\n    miSendMailHuman = createNewItem(\"/icons/send_mail_16.gif\");\r\n    mHuman.add(miSendMailHuman);\r\n    mHuman.add(new ImportResources(getHumanResourceManager(), getTaskManager(), getRoleManager(), this));\r\n    miEditCalendar = createNewItem(\"/icons/clock_16.gif\");\r\n    mCalendar.add(miEditCalendar);\r\n    miPrjCal = createNewItem(\"/icons/default_calendar_16.gif\");\r\n    mCalendar.add(miPrjCal);\r\n    miWebPage = createNewItem(\"/icons/home_16.gif\");\r\n    mHelp.add(miWebPage);\r\n    miManual = createNewItem(\"/icons/help_16.gif\");\r\n    try {\r\n        // See if helpgui library is on the classpath\r\n        Class.forName(\"net.sourceforge.helpgui.HelpGui\");\r\n        mHelp.add(miManual);\r\n        miManual.setAccelerator(KeyStroke.getKeyStroke(\"F1\"));\r\n    } catch (Exception ex) {\r\n        // Not add the help button on the ui\r\n    }\r\n    miTips = createNewItem(\"/icons/about_16.gif\");\r\n    mHelp.add(miTips);\r\n    miAbout = createNewItem(\"/icons/manual_16.gif\");\r\n    mHelp.add(miAbout);\r\n    if (!isApplet) {\r\n        bar.add(mProject);// for a applet veiwer, Project menu is not\r\n\r\n        // neccessary By CL\r\n    }\r\n    bar.add(mEdit);\r\n    JMenu viewMenu = createViewMenu();\r\n    if (viewMenu != null)\r\n        bar.add(viewMenu);\r\n\r\n    // bar.add (mView);\r\n    bar.add(mTask);\r\n    bar.add(mHuman);\r\n    // bar.add(mCalendar);\r\n    bar.add(mHelp);\r\n    setMemonic();\r\n    // to create a default project\r\n    // createDefaultTree(tree);\r\n    System.err.println(\"4. creating views...\");\r\n    myGanttChartTabContent = new GanttChartTabContentPanel(getProject(), getUIFacade(), tree, area);\r\n    GPView ganttView = getViewManager().createView(myGanttChartTabContent, new ImageIcon(getClass().getResource(\"/icons/tasks_16.gif\")));\r\n    ganttView.setVisible(true);\r\n    myResourceChartTabContent = new ResourceChartTabContentPanel(getResourcePanel(), getResourcePanel().area);\r\n    GPView resourceView = getViewManager().createView(myResourceChartTabContent, new ImageIcon(getClass().getResource(\"/icons/res_16.gif\")));\r\n    resourceView.setVisible(true);\r\n    getTabs().setSelectedIndex(0);\r\n    this.resp.setActions();\r\n    // pert area\r\n    // getTabs().setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\r\n    getTabs().addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent e) {\r\n            bCritical.setEnabled(((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)));\r\n            bScrollCenter.setEnabled(((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)));\r\n            bComparePrev.setEnabled(((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)));\r\n            bSaveCurrent.setEnabled(((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)));\r\n            bNewTask.setEnabled((((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) || ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX))));\r\n            bDelete.setEnabled((((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) || ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX))));\r\n            bProperties.setEnabled((((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) || ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX))));\r\n            bZoomIn.setEnabled((((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) || ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX))));\r\n            bZoomOut.setEnabled((((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) || ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX))));\r\n            bPrev.setEnabled((((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) || ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX))));\r\n            bNext.setEnabled((((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) || ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX))));\r\n            if ((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) {\r\n                // Gantt\r\n                // Chart\r\n                bNewTask.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"createTask\"))));\r\n                bDelete.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"deleteTask\"))));\r\n                bProperties.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"propertiesTask\"))));\r\n                if ((options.getButtonShow()) != (GanttOptions.ICONS)) {\r\n                    bNewTask.setText(GanttProject.correctLabel(language.getText(\"createTask\")));\r\n                    bDelete.setText(GanttProject.correctLabel(language.getText(\"deleteTask\")));\r\n                    bProperties.setText(GanttProject.correctLabel(language.getText(\"propertiesTask\")));\r\n                }\r\n            } else\r\n                if ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX)) {\r\n                    // Resources\r\n                    // Chart\r\n                    bNewTask.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"newHuman\"))));\r\n                    bDelete.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"deleteHuman\"))));\r\n                    bProperties.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"propertiesHuman\"))));\r\n                    if ((options.getButtonShow()) != (GanttOptions.ICONS)) {\r\n                        bNewTask.setText(GanttProject.correctLabel(language.getText(\"newHuman\")));\r\n                        bDelete.setText(GanttProject.correctLabel(language.getText(\"deleteHuman\")));\r\n                        bProperties.setText(GanttProject.correctLabel(language.getText(\"propertiesHuman\")));\r\n                    }\r\n                }\r\n\r\n        }\r\n    });\r\n    // Add tabpan on the content pane\r\n    getContentPane().add(getTabs(), BorderLayout.CENTER);\r\n    // Add toolbar\r\n    toolBar = new GPToolBar(\"GanttProject\", options.getToolBarPosition(), getOptions());\r\n    toolBar.addComponentListener(new ComponentListener() {\r\n        public void componentResized(ComponentEvent arg0) {\r\n            setHiddens();\r\n            refresh();\r\n        }\r\n\r\n        public void componentMoved(ComponentEvent arg0) {\r\n        }\r\n\r\n        public void componentShown(ComponentEvent arg0) {\r\n        }\r\n\r\n        public void componentHidden(ComponentEvent arg0) {\r\n        }\r\n    });\r\n    this.addButtons(toolBar);\r\n    getContentPane().add(toolBar, ((toolBar.getOrientation()) == (JToolBar.HORIZONTAL) ? BorderLayout.NORTH : BorderLayout.WEST));\r\n    // add the status bar\r\n    if (!isOnlyViewer)\r\n        getContentPane().add(getStatusBar(), BorderLayout.SOUTH);\r\n\r\n    getStatusBar().setVisible(options.getShowStatusBar());\r\n    // add a keyboard listener\r\n    addKeyListener(this);\r\n    SwitchViewAction switchAction = new SwitchViewAction(this);\r\n    JMenuItem invisibleItem = new JMenuItem(switchAction);\r\n    invisibleItem.setVisible(false);\r\n    bar.add(invisibleItem);\r\n    // update 18-03-2003\r\n    addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(WindowEvent evt) {\r\n            exitForm(evt);\r\n        }\r\n\r\n        public void windowOpened(WindowEvent e) {\r\n            myRowHeightAligner.optionsChanged();\r\n        }\r\n    });\r\n    // update 18-03-2003\r\n    System.err.println(\"5. calculating size and packing...\");\r\n    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\r\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\r\n    Dimension windowSize = getPreferredSize();\r\n    // Put the frame at the middle of the screen\r\n    setLocation((((screenSize.width) / 2) - ((windowSize.width) / 2)), (((screenSize.height) / 2) - ((windowSize.height) / 2)));\r\n    this.pack();\r\n    System.err.println(\"6. changing language ...\");\r\n    changeLanguage();\r\n    // changeUndoNumber ();\r\n    System.err.println(\"7. changing looknfeel ...\");\r\n    changeLookAndFeel(lookAndFeel);\r\n    changeLookAndFeel(lookAndFeel);// Twice call for update font on menu\r\n\r\n    if (options.isLoaded()) {\r\n        setBounds(options.getX(), options.getY(), options.getWidth(), options.getHeight());\r\n    }\r\n    if ((options.getOpenTips()) && (!(GanttProject.byCommandLine))) {\r\n        TipsDialog tips = new TipsDialog(this, options.getOpenTips());\r\n        tips.show();\r\n        tips.toFront();// somehow assure, that the TipsDialog is the top\r\n\r\n        // window an MacOS\r\n    }\r\n    System.err.println(\"8. finalizing...\");\r\n    applyComponentOrientation(GanttLanguage.getInstance().getComponentOrientation());\r\n    myTaskManager.addTaskListener(new TaskModelModificationListener(this));\r\n    if ((GanttProject.ourWindowListener) != null) {\r\n        addWindowListener(GanttProject.ourWindowListener);\r\n    }\r\n    addMouseListenerToAllContainer(this.getComponents());\r\n    myDelayManager = new DelayManager(myTaskManager, tree);\r\n    Mediator.registerDelayManager(myDelayManager);\r\n    myDelayManager.addObserver(tree);\r\n    myTaskManager.addTaskListener(myDelayManager);\r\n    getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), \"refresh\");\r\n    getRootPane().getActionMap().put(\"refresh\", new AbstractAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            getActiveChart().reset();\r\n            repaint();\r\n        }\r\n    });\r\n}"},
 {"id":467, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.-init-()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"TaskManagerConfigImpl() {\r\n}"},
 {"id":468, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,javax.swing.JFrame,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,javax.swing.JFrame,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"2( $anonymous0,  $anonymous1,  $anonymous2,  $anonymous3) {\r\n}"},
 {"id":469, "name":"-init-(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.-init-(boolean)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public GanttProject(boolean isOnlyViewer) {\r\n    this(isOnlyViewer, false);\r\n}"},
 {"id":470, "name":"-init-(java.io.File,int,net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.-init-(java.io.File,int,net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public ExportFileInfo(File file, int format, GanttExportSettings options) {\r\n    myFile = file;\r\n    myFormat = format;\r\n    myStorageOptions = options;\r\n}"},
 {"id":471, "name":"aboutDialog()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.aboutDialog()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private void aboutDialog() {\r\n    AboutDialog agp = new AboutDialog(this);\r\n    agp.show();\r\n}"},
 {"id":472, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * A menu has been activate\r\n */\r\npublic void actionPerformed(ActionEvent evt) {\r\n    if ((evt.getSource()) instanceof JMenuItem) {\r\n        String arg = evt.getActionCommand();\r\n        // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (arg.equals(language.getText(\"hideTask\"))) {\r\n            tree.hideSelectedNodes();\r\n        } else\r\n            if (arg.equals(language.getText(\"displayHiddenTasks\"))) {\r\n                tree.displayHiddenTasks();\r\n            } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                if (arg.equals(GanttProject.correctLabel(language.getText(\"preview\")))) {\r\n                    previewPrint();\r\n                } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                    if (arg.equals(GanttProject.correctLabel(language.getText(\"deleteTask\")))) {\r\n                        deleteTasks(true);\r\n                    } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                        if (arg.equals(GanttProject.correctLabel(language.getText(\"editCalendars\")))) {\r\n                            GanttDialogCalendar dialogCalendar = new GanttDialogCalendar(this);\r\n                            dialogCalendar.show();\r\n                        } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                            if (arg.equals(GanttProject.correctLabel(language.getText(\"projectCalendar\")))) {\r\n                                System.out.println(\"Project calendar\");\r\n                            } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                                if (arg.equals(GanttProject.correctLabel(language.getText(\"webPage\")))) {\r\n                                    try {\r\n                                        openWebPage();\r\n                                    } catch (Exception e) {\r\n                                        System.err.println(e);\r\n                                    }\r\n                                } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                                    if (arg.equals(GanttProject.correctLabel(language.getText(\"tipsOfTheDay\")))) {\r\n                                        TipsDialog tips = new TipsDialog(this, options.getOpenTips());\r\n                                        tips.show();\r\n                                    } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                                        if (arg.equals(GanttProject.correctLabel(language.getText(\"manual\")))) {\r\n                                            if ((helpFrame) == null) {\r\n                                                try {\r\n                                                    helpFrame = new MainFrame(\"/docs/help/\", \"eclipse\");\r\n                                                    // Other sort of manual\r\n                                                    String sl = language.getText(\"shortLanguage\");\r\n                                                    if ((sl.equals(\"fr\")) || (sl.equals(\"bg\")))\r\n                                                        helpFrame = new MainFrame(((\"/docs/help_\" + sl) + \"/\"), \"eclipse\");\r\n\r\n                                                    helpFrame.setTitle(language.getText(\"ganttManual\"));\r\n                                                    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/ganttproject.png\"));\r\n                                                    helpFrame.setIconImage(icon.getImage());\r\n                                                    helpFrame.setSize(((int) ((Toolkit.getDefaultToolkit().getScreenSize().getWidth()) * 0.75)), ((int) ((Toolkit.getDefaultToolkit().getScreenSize().getHeight()) * 0.75)));\r\n                                                    helpFrame.setLocationRelativeTo(null);\r\n                                                } catch (Exception e) {\r\n                                                }\r\n                                            }\r\n                                            helpFrame.setVisible(true);\r\n                                        } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                                            if (arg.equals(GanttProject.correctLabel(language.getText(\"about\")))) {\r\n                                                aboutDialog();\r\n                                            } else// /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n                                                if (arg.equals(GanttProject.correctLabel(language.getText(\"sendMail\")))) {\r\n                                                    getTabs().setSelectedIndex(1);\r\n                                                    getResourcePanel().sendMail(this);\r\n                                                } else\r\n                                                    if (arg.equals(GanttProject.correctLabel(language.getText(\"settings\")))) {\r\n                                                        launchOptionsDialog();\r\n                                                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    } else\r\n        if ((evt.getSource()) instanceof Document) {\r\n            if (checkCurrentProject()) {\r\n                final ActionEvent ae = evt;\r\n                getUndoManager().undoableEdit(\"StartupDocument\", new Runnable() {\r\n                    public void run() {\r\n                        openStartupDocument(((Document) (ae.getSource())));\r\n                    }\r\n                });\r\n            }\r\n        } else // //////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // Test if its buttons actions\r\n        {\r\n            if ((evt.getSource()) == (bImport)) {\r\n                // import\r\n                ImportFileWizardImpl wizard = new ImportFileWizardImpl(this.getUIFacade(), this);\r\n                wizard.show();\r\n            } else\r\n                if ((evt.getSource()) == (bPreviewPrint)) {\r\n                    // print\r\n                    previewPrint();\r\n                } else\r\n                    if ((evt.getSource()) == (bShowHiddens)) {\r\n                        showHiddenButtonsPaneMenu();\r\n                    }\r\n\r\n\r\n        }\r\n\r\n    // repaint();\r\n}"},
 {"id":473, "name":"addButton(int,javax.swing.DefaultListModel)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.addButton(int,javax.swing.DefaultListModel)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void addButton(int icon, DefaultListModel list) {\r\n    switch (icon) {\r\n        case GanttOptions.SEPARATOR :\r\n            list.addElement(GPToolBar.SEPARATOR_OBJECT);\r\n            break;\r\n        case GanttOptions.NEW :\r\n            list.addElement(bNew);\r\n            break;\r\n        case GanttOptions.OPEN :\r\n            list.addElement(bOpen);\r\n            break;\r\n        case GanttOptions.SAVE :\r\n            list.addElement(bSave);\r\n            break;\r\n        case GanttOptions.IMPORT :\r\n            list.addElement(bImport);\r\n            break;\r\n        case GanttOptions.EXPORT :\r\n            list.addElement(bExport);\r\n            break;\r\n        case GanttOptions.PRINT :\r\n            list.addElement(bPrint);\r\n            break;\r\n        case GanttOptions.PREVIEWPRINT :\r\n            list.addElement(bPreviewPrint);\r\n            break;\r\n        case GanttOptions.CUT :\r\n            list.addElement(bCut);\r\n            break;\r\n        case GanttOptions.COPY :\r\n            list.addElement(bCopy);\r\n            break;\r\n        case GanttOptions.PASTE :\r\n            list.addElement(bPaste);\r\n            break;\r\n        case GanttOptions.NEWTASK :\r\n            list.addElement(bNewTask);\r\n            break;\r\n        case GanttOptions.DELETE :\r\n            list.addElement(bDelete);\r\n            break;\r\n        case GanttOptions.PROPERTIES :\r\n            list.addElement(bProperties);\r\n            break;\r\n        case GanttOptions.PREV :\r\n            list.addElement(bPrev);\r\n            break;\r\n        case GanttOptions.CENTER :\r\n            list.addElement(bScrollCenter);\r\n            break;\r\n        case GanttOptions.NEXT :\r\n            list.addElement(bNext);\r\n            break;\r\n        case GanttOptions.ZOOMOUT :\r\n            list.addElement(bZoomOut);\r\n            break;\r\n        case GanttOptions.ZOOMIN :\r\n            list.addElement(bZoomIn);\r\n            break;\r\n        case GanttOptions.UNDO :\r\n            list.addElement(bUndo);\r\n            break;\r\n        case GanttOptions.REDO :\r\n            list.addElement(bRedo);\r\n            break;\r\n        case GanttOptions.CRITICAL :\r\n            list.addElement(bCritical);\r\n            break;\r\n        case GanttOptions.ABOUT :\r\n            list.addElement(bAbout);\r\n            break;\r\n        case GanttOptions.SAVECURRENT :\r\n            list.addElement(bSaveCurrent);\r\n            break;\r\n        case GanttOptions.COMPAREPREV :\r\n            list.addElement(bComparePrev);\r\n            break;\r\n        case GanttOptions.REFRESH :\r\n            list.addElement(bRefresh);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n}"},
 {"id":474, "name":"addButtons()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.addButtons()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private void addButtons() {\r\n    List buttons = new ArrayList(iconList.getSize());\r\n    for (int i = 0; i < (iconList.getSize()); i++) {\r\n        buttons.add(iconList.get(i));\r\n    }\r\n    toolBar.populate(buttons);\r\n}"},
 {"id":475, "name":"addButtons(javax.swing.JToolBar)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.addButtons(javax.swing.JToolBar)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Create the button on toolbar\r\n */\r\npublic void addButtons(JToolBar toolBar) {\r\n    // toolBar.addSeparator(new Dimension(20,0));\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bNew = new TestGanttRolloverButton(myProjectMenu.getNewProjectAction());\r\n    bOpen = new TestGanttRolloverButton(myProjectMenu.getOpenProjectAction());\r\n    bSave = new TestGanttRolloverButton(myProjectMenu.getSaveProjectAction());\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bImport = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/import_\" + (options.getIconSize())) + \".gif\"))));\r\n    bImport.addActionListener(this);\r\n    // toolBar.add(bImport);\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bExport = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/export_\" + (options.getIconSize())) + \".gif\"))));\r\n    bExport.addActionListener(this);\r\n    // toolBar.add(bExport);\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bPrint = new TestGanttRolloverButton(myProjectMenu.getPrintAction());\r\n    bPreviewPrint = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/preview_\" + (options.getIconSize())) + \".gif\"))));\r\n    bPreviewPrint.addActionListener(this);\r\n    // toolBar.add(bPrint);\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // toolBar.addSeparator(new Dimension(20,0));\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bComparePrev = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/comparePrev_\" + (options.getIconSize())) + \".gif\"))));\r\n    bComparePrev.setEnabled(false);\r\n    bComparePrev.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            compareToPreviousState();\r\n            if ((myPreviousStates.size()) == 0)\r\n                bComparePrev.setEnabled(false);\r\n\r\n        }\r\n    });\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bSaveCurrent = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/saveCurrentAsPrev_\" + (options.getIconSize())) + \".gif\"))));\r\n    bSaveCurrent.setEnabled(false);\r\n    bSaveCurrent.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            saveAsPreviousState();\r\n        }\r\n    });\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bCut = new TestGanttRolloverButton(getCutAction());\r\n    bCopy = new TestGanttRolloverButton(getCopyAction());\r\n    bPaste = new TestGanttRolloverButton(getPasteAction());\r\n    myNewArtefactAction = new NewArtefactAction(new NewArtefactAction.ActiveActionProvider() {\r\n        public AbstractAction getActiveAction() {\r\n            return (getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX) ? ((AbstractAction) (myNewTaskAction)) : ((AbstractAction) (myNewHumanAction));\r\n        }\r\n    }, options.getIconSize());\r\n    bNewTask = new TestGanttRolloverButton(myNewArtefactAction);\r\n    myRolloverActions.add(myNewArtefactAction);\r\n    bDelete = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/delete_\" + (options.getIconSize())) + \".gif\"))));\r\n    bDelete.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if ((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) {\r\n                // Gantt\r\n                // Chart\r\n                // deleteTask();\r\n                deleteTasks(true);\r\n            } else\r\n                if ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX)) {\r\n                    // Resource\r\n                    // chart\r\n                    final ProjectResource[] context = getResourcePanel().getContext().getResources();\r\n                    if ((context.length) > 0) {\r\n                        UIFacade.Choice choice = getUIFacade().showConfirmationDialog((((getLanguage().getText(\"msg6\")) + (getDisplayName(context))) + \"?\"), getLanguage().getText(\"question\"));\r\n                        if (choice == (UIFacade.Choice.YES)) {\r\n                            getUndoManager().undoableEdit(\"Delete Human OK\", new Runnable() {\r\n                                public void run() {\r\n                                    for (int i = 0; i < (context.length); i++) {\r\n                                        context[i].delete();\r\n                                    }\r\n                                }\r\n                            });\r\n                            repaint2();\r\n                            refreshProjectInfos();\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n    });\r\n    // if(!isOnlyViewer) toolBar.add(bDelete);\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bProperties = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/properties_\" + (options.getIconSize())) + \".gif\"))));\r\n    bProperties.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if ((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) {\r\n                // Gantt\r\n                // Chart\r\n                propertiesTask();\r\n            } else\r\n                if ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX)) {\r\n                    // Resource\r\n                    // chart\r\n                    getResourcePanel().getResourcePropertiesAction().actionPerformed(null);\r\n                }\r\n\r\n        }\r\n    });\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ScrollingManager scrollingManager = getScrollingManager();\r\n    scrollingManager.addScrollingListener(area.getViewState());\r\n    scrollingManager.addScrollingListener(getResourcePanel().area.getViewState());\r\n    Action scrollLeft = new ScrollGanttChartLeftAction(scrollingManager, options.getIconSize());\r\n    myRolloverActions.add(scrollLeft);\r\n    bPrev = new TestGanttRolloverButton(scrollLeft);\r\n    bPrev.setAutoRepeatMousePressedEvent(300);\r\n    // toolBar.add(bPrev);\r\n    Action scrollCenter = area.getScrollCenterAction(scrollingManager, Mediator.getTaskSelectionManager(), options.getIconSize());\r\n    myRolloverActions.add(scrollCenter);\r\n    bScrollCenter = new TestGanttRolloverButton(scrollCenter);\r\n    bScrollCenter.setAutoRepeatMousePressedEvent(300);\r\n    // toolBar.add(bScrollCenter);\r\n    Action scrollRight = new ScrollGanttChartRightAction(scrollingManager, options.getIconSize());\r\n    myRolloverActions.add(scrollRight);\r\n    bNext = new TestGanttRolloverButton(scrollRight);\r\n    bNext.setAutoRepeatMousePressedEvent(300);\r\n    // toolBar.add(bNext);\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    Action zoomOut = new ZoomOutAction(getZoomManager(), options.getIconSize());\r\n    myRolloverActions.add(zoomOut);\r\n    bZoomOut = new TestGanttRolloverButton(zoomOut);\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    Action zoomIn = new ZoomInAction(getZoomManager(), options.getIconSize());\r\n    myRolloverActions.add(zoomIn);\r\n    bZoomIn = new TestGanttRolloverButton(zoomIn);\r\n    // toolBar.add(bZoomIn);\r\n    // /////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bAbout = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/manual_\" + (options.getIconSize())) + \".gif\"))));\r\n    bAbout.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            aboutDialog();\r\n        }\r\n    });\r\n    Action undo = new UndoAction(getUndoManager(), options.getIconSize(), this);\r\n    myRolloverActions.add(undo);\r\n    bUndo = new TestGanttRolloverButton(undo);\r\n    Action redo = new RedoAction(getUndoManager(), options.getIconSize(), this);\r\n    myRolloverActions.add(redo);\r\n    bRedo = new TestGanttRolloverButton(redo);\r\n    Action critic = new CalculateCriticalPathAction(getTaskManager(), tree, options, getUIConfiguration(), this);\r\n    myRolloverActions.add(critic);\r\n    bCritical = new TestGanttRolloverButton(critic);\r\n    bRefresh = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(((\"/icons/refresh_\" + (options.getIconSize())) + \".gif\"))));\r\n    bRefresh.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            getUIFacade().setStatusText(GanttLanguage.getInstance().getText(\"refresh\"));\r\n            getUIFacade().refresh();\r\n        }\r\n    });\r\n    bShowHiddens = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/showHiddens.gif\")));\r\n    bShowHiddens.addActionListener(this);\r\n    iconList = initIconList();\r\n    deletedIconList = initDeletedIconList();\r\n    addButtons();\r\n    applyButtonOptions();\r\n}"},
 {"id":476, "name":"addMouseListenerToAllContainer(java.awt.Component[])", "fullmethod":"net.sourceforge.ganttproject.GanttProject.addMouseListenerToAllContainer(java.awt.Component[])", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private void addMouseListenerToAllContainer(Component[] cont) {\r\n    for (int i = 0; i < (cont.length); i++) {\r\n        cont[i].addMouseListener(getStopEditingMouseListener());\r\n        if ((cont[i]) instanceof Container)\r\n            addMouseListenerToAllContainer(((Container) (cont[i])).getComponents());\r\n\r\n    }\r\n}"},
 {"id":477, "name":"applyButtonOptions()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.applyButtonOptions()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Apply Buttons options.\r\n */\r\npublic void applyButtonOptions() {\r\n    setButtonText();\r\n    if ((options.getButtonShow()) == (GanttOptions.TEXT)) {\r\n        for (int i = 0; i < (myRolloverActions.size()); i++) {\r\n            RolloverAction next = ((RolloverAction) (myRolloverActions.get(i)));\r\n            next.isIconVisible(false);\r\n            next.setIconSize(options.getIconSize());\r\n        }\r\n    } else {\r\n        if (!(myUIConfiguration.isCriticalPathOn()))\r\n            bCritical.setDefaultIcon(new ImageIcon(getClass().getResource(((\"/icons/criticalPathOff_\" + (options.getIconSize())) + \".gif\"))));\r\n        else\r\n            bCritical.setDefaultIcon(new ImageIcon(getClass().getResource(((\"/icons/criticalPathOn_\" + (options.getIconSize())) + \".gif\"))));\r\n\r\n        for (int i = 0; i < (myRolloverActions.size()); i++) {\r\n            RolloverAction next = ((RolloverAction) (myRolloverActions.get(i)));\r\n            next.isIconVisible(true);\r\n            next.setIconSize(options.getIconSize());\r\n        }\r\n    }\r\n    toolBar.updateButtonsLook();\r\n}"},
 {"id":478, "name":"changeLanguage()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.changeLanguage()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Function to change language of the project\r\n */\r\npublic void changeLanguage() {\r\n    if ((helpFrame) != null)\r\n        helpFrame.dispose();\r\n\r\n    helpFrame = null;\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n    changeLanguageOfMenu();\r\n    area.repaint();\r\n    getResourcePanel().area.repaint();\r\n    getResourcePanel().refresh(language);\r\n    this.tree.changeLanguage(language);\r\n    CustomColumnsStorage.changeLanguage(language);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n    // change the value of the separators in iconList\r\n    for (int i = 0; i < (iconList.size()); i++)\r\n        if ((iconList.getElementAt(i).getClass()) != (TestGanttRolloverButton.class)) {\r\n            iconList.removeElementAt(i);\r\n            iconList.add(i, GPToolBar.SEPARATOR_OBJECT);\r\n        }\r\n\r\n}"},
 {"id":479, "name":"changeLanguageOfMenu()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.changeLanguageOfMenu()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Set the menus language after the user select a different language\r\n */\r\nprivate void changeLanguageOfMenu() {\r\n    mProject = changeMenuLabel(mProject, language.getText(\"project\"));\r\n    mEdit = changeMenuLabel(mEdit, language.getText(\"edit\"));\r\n    // mView = changeMenuLabel(mView, language.getText(\"view\"));\r\n    mTask = changeMenuLabel(mTask, language.getText(\"task\"));\r\n    mHuman = changeMenuLabel(mHuman, language.getText(\"human\"));\r\n    mHelp = changeMenuLabel(mHelp, language.getText(\"help\"));\r\n    mCalendar = changeMenuLabel(mCalendar, language.getText(\"calendars\"));\r\n    mMRU = changeMenuLabel(mMRU, language.getText(\"lastOpen\"));\r\n    mServer = changeMenuLabel(mServer, language.getText(\"webServer\"));\r\n    miPreview = changeMenuLabel(miPreview, language.getText(\"preview\"));\r\n    miUndo = changeMenuLabel(miUndo, language.getText(\"undo\"));\r\n    miRedo = changeMenuLabel(miRedo, language.getText(\"redo\"));\r\n    miOptions = changeMenuLabel(miOptions, language.getText(\"settings\"));\r\n    // miNewTask = changeMenuLabel(miNewTask,\r\n    // language.getText(\"createTask\"));\r\n    miDeleteTask = changeMenuLabel(miDeleteTask, language.getText(\"deleteTask\"));\r\n    mHuman.insert(changeMenuLabel(mHuman.getItem(0), language.getText(\"newHuman\")), 0);\r\n    miDelHuman = changeMenuLabel(miDelHuman, language.getText(\"deleteHuman\"));\r\n    mHuman.insert(changeMenuLabel(mHuman.getItem(4), language.getText(\"importResources\")), 4);\r\n    miSendMailHuman = changeMenuLabel(miSendMailHuman, language.getText(\"sendMail\"));\r\n    miEditCalendar = changeMenuLabel(miEditCalendar, language.getText(\"editCalendars\"));\r\n    miPrjCal = changeMenuLabel(miPrjCal, language.getText(\"projectCalendar\"));\r\n    miWebPage = changeMenuLabel(miWebPage, language.getText(\"webPage\"));\r\n    miAbout = changeMenuLabel(miAbout, language.getText(\"about\"));\r\n    miTips = changeMenuLabel(miTips, language.getText(\"tipsOfTheDay\"));\r\n    miManual = changeMenuLabel(miManual, language.getText(\"manual\"));\r\n    miChartOptions = changeMenuLabel(miChartOptions, language.getText(\"chartOptions\"));\r\n    miRefresh = changeMenuLabel(miRefresh, language.getText(\"refresh\"));\r\n    // //////////////////////////////////////////\r\n    bPreviewPrint.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"preview\"))));\r\n    bExport.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"export\"))));\r\n    bImport.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"import\"))));\r\n    bNewTask.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"createTask\"))));\r\n    // bCut.setToolTipText(getToolTip(correctLabel(language.getText(\"cut\"))));\r\n    // bCopy\r\n    // .setToolTipText(getToolTip(correctLabel(language\r\n    // .getText(\"copy\"))));\r\n    // bPaste\r\n    // .setToolTipText(getToolTip(correctLabel(language\r\n    // .getText(\"paste\"))));\r\n    bDelete.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"deleteTask\"))));\r\n    bProperties.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"propertiesTask\"))));\r\n    bPrev.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"backDate\"))));\r\n    bScrollCenter.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"centerOnSelectedTasks\"))));\r\n    bNext.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"forwardDate\"))));\r\n    bZoomIn.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"zoomIn\"))));\r\n    bZoomOut.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"zoomOut\"))));\r\n    bAbout.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"about\"))));\r\n    bUndo.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"undo\"))));\r\n    bRedo.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"redo\"))));\r\n    // bZoomFit.setToolTipText(getToolTip(language.zoomFit()));\r\n    bCritical.setToolTipText(GanttProject.getToolTip(language.getText(\"criticalPath\")));\r\n    bComparePrev.setToolTipText(GanttProject.getToolTip(language.getText(\"comparePrev\")));\r\n    bSaveCurrent.setToolTipText(GanttProject.getToolTip(language.getText(\"saveCurrent\")));\r\n    bRefresh.setToolTipText(GanttProject.getToolTip(language.getText(\"refresh\")));\r\n    bShowHiddens.setToolTipText(GanttProject.getToolTip(language.getText(\"showHiddens\")));\r\n    getTabs().setTitleAt(1, GanttProject.correctLabel(language.getText(\"human\")));\r\n    setButtonText();\r\n    toolBar.updateButtonsLook();\r\n}"},
 {"id":480, "name":"changeLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.changeLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Change the style of the application\r\n */\r\npublic void changeLookAndFeel(GanttLookAndFeelInfo lookAndFeel) {\r\n    try {\r\n        UIManager.setLookAndFeel(lookAndFeel.getClassName());\r\n        SwingUtilities.updateComponentTreeUI(this);\r\n        this.lookAndFeel = lookAndFeel;\r\n    } catch (Exception e) {\r\n        GanttLookAndFeelInfo info = GanttLookAndFeels.getGanttLookAndFeels().getDefaultInfo();\r\n        System.out.println((((((\"Can\t find the LookAndFeel\n\" + (lookAndFeel.getClassName())) + \"\n\") + (lookAndFeel.getName())) + \"\nSetting the default Look\nFeel\") + (info.getName())));\r\n        try {\r\n            UIManager.setLookAndFeel(info.getClassName());\r\n            SwingUtilities.updateComponentTreeUI(this);\r\n            this.lookAndFeel = info;\r\n        } catch (Exception ex) {\r\n        }\r\n    }\r\n    // MetalLookAndFeel.setCurrentTheme(new GanttMetalTheme());\r\n    // must force to do that instead of the task on tree are not in\r\n    // continuity of the calendar\r\n    if ((tree.getTable().getRowHeight()) <= 22)\r\n        tree.getTable().setRowHeight(20);\r\n\r\n}"},
 {"id":481, "name":"changeMenuLabel(javax.swing.JCheckBoxMenuItem,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.changeMenuLabel(javax.swing.JCheckBoxMenuItem,java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Change the label for JCheckBoxmenuItem, in fact check in the label\r\n * contains a mnemonic\r\n */\r\npublic JCheckBoxMenuItem changeMenuLabel(JCheckBoxMenuItem menu, String label) {\r\n    int index = label.indexOf($);\r\n    if ((index != (-1)) && (((label.length()) - index) > 1)) {\r\n        menu.setText(label.substring(0, index).concat(label.substring((++index))));\r\n        menu.setMnemonic(Character.toLowerCase(label.charAt(index)));\r\n    } else {\r\n        menu.setText(label);\r\n        // menu.setMnemonic();\r\n    }\r\n    return menu;\r\n}"},
 {"id":482, "name":"changeMenuLabel(javax.swing.JMenu,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.changeMenuLabel(javax.swing.JMenu,java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Change the label for menu, in fact check in the label contains a mnemonic\r\n */\r\npublic JMenu changeMenuLabel(JMenu menu, String label) {\r\n    int index = label.indexOf($);\r\n    if ((index != (-1)) && (((label.length()) - index) > 1)) {\r\n        menu.setText(label.substring(0, index).concat(label.substring((++index))));\r\n        menu.setMnemonic(Character.toLowerCase(label.charAt(index)));\r\n    } else {\r\n        menu.setText(label);\r\n        // menu.setMnemonic();\r\n    }\r\n    return menu;\r\n}"},
 {"id":483, "name":"changeMenuLabel(javax.swing.JMenuItem,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.changeMenuLabel(javax.swing.JMenuItem,java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Change the label for menuItem, in fact check in the label contains a\r\n * mnemonic\r\n */\r\npublic JMenuItem changeMenuLabel(JMenuItem menu, String label) {\r\n    int index = label.indexOf($);\r\n    if ((index != (-1)) && (((label.length()) - index) > 1)) {\r\n        menu.setText(label.substring(0, index).concat(label.substring((++index))));\r\n        menu.setMnemonic(Character.toLowerCase(label.charAt(index)));\r\n    } else {\r\n        menu.setText(label);\r\n        // menu.setMnemonic();\r\n    }\r\n    return menu;\r\n}"},
 {"id":484, "name":"changeOrder(javax.swing.DefaultListModel,javax.swing.DefaultListModel)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.changeOrder(javax.swing.DefaultListModel,javax.swing.DefaultListModel)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void changeOrder(DefaultListModel buttonList, DefaultListModel deletedButtonList) {\r\n    iconList = new DefaultListModel();\r\n    for (int i = 0; i < (buttonList.size()); i++)\r\n        iconList.addElement(buttonList.getElementAt(i));\r\n\r\n    deletedIconList = new DefaultListModel();\r\n    for (int i = 0; i < (deletedButtonList.size()); i++)\r\n        deletedIconList.addElement(deletedButtonList.getElementAt(i));\r\n\r\n    addButtons();\r\n    options.setIconList(getIconPositions(iconList));\r\n    options.setDeletedIconList(getIconPositions(deletedIconList));\r\n    setHiddens();\r\n    refresh();\r\n}"},
 {"id":485, "name":"changeWorkingDirectory(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.changeWorkingDirectory(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void changeWorkingDirectory(String newWorkDir) {\r\n    if (null != newWorkDir)\r\n        options.setWorkingDirectory(newWorkDir);\r\n\r\n}"},
 {"id":486, "name":"checkCurrentProject()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.checkCurrentProject()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Check if the project has been modified, before creating a new one or open\r\n * another\r\n */\r\npublic boolean checkCurrentProject() {\r\n    GanttDialogInfo gdiSaveError = new GanttDialogInfo(this, GanttDialogInfo.ERROR, GanttDialogInfo.YES_NO_CANCEL_OPTION, language.getText(\"msg12\"), language.getText(\"error\"));\r\n    boolean trySave = true;\r\n    if ((askForSave) == true) {\r\n        UIFacade.Choice saveChoice = getUIFacade().showConfirmationDialog(language.getText(\"msg1\"), language.getText(\"warning\"));\r\n        if ((UIFacade.Choice.CANCEL) == saveChoice) {\r\n            return false;\r\n        }\r\n        if ((UIFacade.Choice.YES) == saveChoice) {\r\n            do {\r\n                try {\r\n                    trySave = false;\r\n                    saveProject();\r\n                } catch (Exception e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                    gdiSaveError.show();\r\n                    if ((gdiSaveError.res) == (GanttDialogInfo.CANCEL))\r\n                        return false;\r\n\r\n                    trySave = (gdiSaveError.res) == (GanttDialogInfo.YES);\r\n                }\r\n            } while (trySave );\r\n        }\r\n    }\r\n    return trySave;\r\n}"},
 {"id":487, "name":"close()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.close()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void close() {\r\n    fireProjectClosed();\r\n    prjInfos = new PrjInfos();\r\n    net.sourceforge.ganttproject.roles.RoleManager.Access.getInstance().clear();\r\n    if (null != (projectDocument)) {\r\n        projectDocument.releaseLock();\r\n    }\r\n    projectDocument = null;\r\n    setModified(false);\r\n    getTaskManager().clear();\r\n    getCustomColumnsStorage().reset();\r\n    for (int i = 0; i < (myPreviousStates.size()); i++) {\r\n        ((GanttPreviousState) (myPreviousStates.get(i))).remove();\r\n    }\r\n    myPreviousStates = new ArrayList();\r\n    // TODO [dbarashev] implement ProjectEventListener in bComparePrev action\r\n    bComparePrev.setEnabled(false);\r\n}"},
 {"id":488, "name":"compareToPreviousState()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.compareToPreviousState()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"protected void compareToPreviousState() {\r\n    getUIFacade().setStatusText(GanttLanguage.getInstance().getText(\"comparePrev\"));\r\n    GanttDialogCompareToPreviousState cp = new GanttDialogCompareToPreviousState(this);\r\n    cp.show();\r\n}"},
 {"id":489, "name":"correctLabel(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.correctLabel(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown Use GanttLanguage.correctLabel\r\n */\r\npublic static String correctLabel(String label) {\r\n    return GanttLanguage.getInstance().correctLabel(label);\r\n}"},
 {"id":490, "name":"createNewItem(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.createNewItem(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Create an item with an icon\r\n */\r\npublic JMenuItem createNewItem(String icon) {\r\n    URL url = getClass().getResource(icon);\r\n    JMenuItem item = (url == null) ? new JMenuItem() : new JMenuItem(new ImageIcon(url));\r\n    item.addActionListener(this);\r\n    return item;\r\n}"},
 {"id":491, "name":"createNewItem(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.createNewItem(java.lang.String,java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Create an item with a label and an icon\r\n */\r\npublic JMenuItem createNewItem(String label, String icon) {\r\n    JMenuItem item = new JMenuItem(label, new ImageIcon(getClass().getResource(icon)));\r\n    item.addActionListener(this);\r\n    return item;\r\n}"},
 {"id":492, "name":"createNewItemText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.createNewItemText(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Create an item with a label\r\n */\r\npublic JMenuItem createNewItemText(String label) {\r\n    JMenuItem item = new JMenuItem(label);\r\n    item.addActionListener(this);\r\n    return item;\r\n}"},
 {"id":493, "name":"createProjectMenu()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.createProjectMenu()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private void createProjectMenu() {\r\n    mServer = new JMenu();\r\n    mServer.setIcon(new ImageIcon(getClass().getResource(\"/icons/server_16.gif\")));\r\n    myProjectMenu = new ProjectMenu(this);\r\n    mProject.add(myProjectMenu.getNewProjectAction());\r\n    mProject.add(myProjectMenu.getOpenProjectAction());\r\n    mProject.add(mMRU);\r\n    updateMenuMRU();\r\n    mProject.addSeparator();\r\n    mProject.add(myProjectMenu.getSaveProjectAction());\r\n    mProject.add(myProjectMenu.getSaveProjectAsAction());\r\n    mProject.addSeparator();\r\n    // \r\n    ImportFileAction importFile = new ImportFileAction(getUIFacade(), this);\r\n    mProject.add(importFile);\r\n    ExportFileAction exportFile = new ExportFileAction(getUIFacade(), getProject(), options);\r\n    mProject.add(exportFile);\r\n    // miExport = createNewItem(\"/icons/export_16.gif\");\r\n    // mProject.add(miExport);\r\n    mProject.addSeparator();\r\n    mServer.add(myProjectMenu.getOpenURLAction());\r\n    mServer.add(myProjectMenu.getSaveURLAction());\r\n    mProject.add(mServer);\r\n    mProject.addSeparator();\r\n    mProject.add(myProjectMenu.getPrintAction());\r\n    miPreview = createNewItem(\"/icons/preview_16.gif\");\r\n    mProject.add(miPreview);\r\n    mProject.addSeparator();\r\n    mProject.add(myProjectMenu.getExitAction());\r\n}"},
 {"id":494, "name":"createViewMenu()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.createViewMenu()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private JMenu createViewMenu() {\r\n    JMenu result = changeMenuLabel(new JMenu(), language.getText(\"view\"));\r\n    result.add(miChartOptions);\r\n    Chart[] charts = Mediator.getPluginManager().getCharts();\r\n    if ((charts.length) > 0)\r\n        result.addSeparator();\r\n\r\n    for (int i = 0; i < (charts.length); i++) {\r\n        result.add(new JCheckBoxMenuItem(new ToggleChartAction(charts[i], getViewManager())));\r\n    }\r\n    return result;\r\n}"},
 {"id":495, "name":"deleteResources()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.deleteResources()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void deleteResources() {\r\n    myDeleteHumanAction.actionPerformed(null);\r\n}"},
 {"id":496, "name":"deleteTasks(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.deleteTasks(boolean)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Delete the currant task\r\n *\r\n * @param confirmation\r\n * \t\tTODO\r\n */\r\npublic void deleteTasks(boolean confirmation) {\r\n    getTabs().setSelectedIndex(UIFacade.GANTT_INDEX);\r\n    final DefaultMutableTreeNode[] cdmtn = tree.getSelectedNodes();\r\n    if ((cdmtn == null) || ((cdmtn.length) == 0)) {\r\n        getUIFacade().setStatusText(language.getText(\"msg21\"));\r\n        return;\r\n    }\r\n    UIFacade.Choice choice = getUIFacade().showConfirmationDialog(language.getText(\"msg19\"), language.getText(\"question\"));\r\n    if (choice == (UIFacade.Choice.YES)) {\r\n        getUndoManager().undoableEdit(\"Task removed\", new Runnable() {\r\n            public void run() {\r\n                ArrayList fathers = new ArrayList();\r\n                tree.stopEditing();\r\n                for (int i = 0; i < (cdmtn.length); i++) {\r\n                    if (((cdmtn[i]) != null) && ((cdmtn[i]) instanceof TaskNode)) {\r\n                        Task ttask = ((Task) (cdmtn[i].getUserObject()));\r\n                        getTaskManager().deleteTask(ttask);\r\n                        ttask.delete();\r\n                        DefaultMutableTreeNode father = tree.getFatherNode(ttask);\r\n                        tree.removeCurrentNode(cdmtn[i]);\r\n                        if (father != null) {\r\n                            GanttTask taskFather = ((GanttTask) (father.getUserObject()));\r\n                            AdjustTaskBoundsAlgorithm alg = getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm();\r\n                            alg.run(taskFather);\r\n                            // taskFather.refreshDateAndAdvancement(tree);\r\n                            father.setUserObject(taskFather);\r\n                            fathers.add(father);\r\n                        }\r\n                    } else\r\n                        if (((cdmtn[i]) != null) && ((cdmtn[i]) instanceof BlankLineNode)) {\r\n                            ((GanttTreeTableModel) (tree.getTreeTable().getTreeTableModel())).removeNodeFromParent(cdmtn[i]);\r\n                        }\r\n\r\n                }\r\n                for (int i = 0; i < (fathers.size()); i++) {\r\n                    DefaultMutableTreeNode father = ((DefaultMutableTreeNode) (fathers.get(i)));\r\n                    if ((father.getChildCount()) == 0)\r\n                        ((Task) (father.getUserObject())).setProjectTask(false);\r\n\r\n                }\r\n            }\r\n        });\r\n        refreshProjectInfos();\r\n        area.repaint();\r\n        this.repaint2();\r\n        getResourcePanel().area.repaint();\r\n        setAskForSave(true);\r\n        // setQuickSave (true);\r\n        // quickSave(\"deleteTasks\");\r\n    }\r\n}"},
 {"id":497, "name":"exitForm(java.awt.event.WindowEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.exitForm(java.awt.event.WindowEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Exit the Application\r\n */\r\nprivate void exitForm(WindowEvent evt) {\r\n    quitApplication();\r\n}"},
 {"id":498, "name":"getActiveCalendar()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getActiveCalendar()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public GPCalendar getActiveCalendar() {\r\n    return myFakeCalendar;\r\n}"},
 {"id":499, "name":"getArea()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getArea()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public GanttGraphicArea getArea() {\r\n    return this.area;\r\n}"},
 {"id":500, "name":"getBaselines()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getBaselines()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public List getBaselines() {\r\n    return getPreviouStates();\r\n}"},
 {"id":501, "name":"getButtonList()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getButtonList()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public DefaultListModel getButtonList() {\r\n    return iconList;\r\n}"},
 {"id":502, "name":"getCopyAction()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getCopyAction()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public Action getCopyAction() {\r\n    return getViewManager().getCopyAction();\r\n}"},
 {"id":503, "name":"getCutAction()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getCutAction()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public Action getCutAction() {\r\n    return getViewManager().getCutAction();\r\n}"},
 {"id":504, "name":"getDeletedButtonList()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getDeletedButtonList()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public DefaultListModel getDeletedButtonList() {\r\n    return deletedIconList;\r\n}"},
 {"id":505, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getDescription()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public String getDescription() {\r\n    return prjInfos.getDescription();\r\n}"},
 {"id":506, "name":"getDisplayName(java.lang.Object[])", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getDisplayName(java.lang.Object[])", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private String getDisplayName(Object[] objs) {\r\n    if ((objs.length) == 1) {\r\n        return objs[0].toString();\r\n    }\r\n    StringBuffer result = new StringBuffer();\r\n    for (int i = 0; i < (objs.length); i++) {\r\n        result.append(objs[i].toString());\r\n        if (i < ((objs.length) - 1)) {\r\n            result.append(\", \");\r\n        }\r\n    }\r\n    return result.toString();\r\n}"},
 {"id":507, "name":"getDocument()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getDocument()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public Document getDocument() {\r\n    return projectDocument;\r\n}"},
 {"id":508, "name":"getGanttChart()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getGanttChart()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"// ///////////////////////////////////////////////////////////////\r\n// UIFacade\r\npublic GanttChart getGanttChart() {\r\n    return ((GanttChart) (getArea()));\r\n}"},
 {"id":509, "name":"getGanttDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getGanttDividerLocation()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public int getGanttDividerLocation() {\r\n    // return mySplitPane.getDividerLocation();\r\n    return myGanttChartTabContent.getDividerLocation();\r\n}"},
 {"id":510, "name":"getHumanResourceManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getHumanResourceManager()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public ResourceManager getHumanResourceManager() {\r\n    ResourceManager result = ((ResourceManager) (managerHash.get(GanttProject.HUMAN_RESOURCE_MANAGER_ID)));\r\n    if (result == null) {\r\n        result = new HumanResourceManager(getRoleManager().getDefaultRole());\r\n        // result.addView(getPeople());\r\n        managerHash.put(GanttProject.HUMAN_RESOURCE_MANAGER_ID, result);\r\n        result.addView(this);\r\n    }\r\n    return result;\r\n}"},
 {"id":511, "name":"getI18n()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getI18n()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public GanttLanguage getI18n() {\r\n    return getLanguage();\r\n}"},
 {"id":512, "name":"getIconPositions(javax.swing.DefaultListModel)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getIconPositions(javax.swing.DefaultListModel)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private String getIconPositions(DefaultListModel list) {\r\n    String sIcons = \"\";\r\n    if (list != null) {\r\n        int i = 0;\r\n        if (list.equals(deletedIconList))\r\n            i++;\r\n\r\n        for (; i < (list.size()); i++) {\r\n            if (!(sIcons.equals(\"\")))\r\n                sIcons = sIcons + \",\";\r\n\r\n            if (list.elementAt(i).equals(GPToolBar.SEPARATOR_OBJECT))\r\n                sIcons = sIcons + (GanttOptions.SEPARATOR);\r\n            else\r\n                if (((TestGanttRolloverButton) (list.elementAt(i))) == (bNew))\r\n                    sIcons = sIcons + (GanttOptions.NEW);\r\n                else\r\n                    if (((TestGanttRolloverButton) (list.elementAt(i))) == (bOpen))\r\n                        sIcons = sIcons + (GanttOptions.OPEN);\r\n                    else\r\n                        if (((TestGanttRolloverButton) (list.elementAt(i))) == (bSave))\r\n                            sIcons = sIcons + (GanttOptions.SAVE);\r\n                        else\r\n                            if (((TestGanttRolloverButton) (list.elementAt(i))) == (bImport))\r\n                                sIcons = sIcons + (GanttOptions.IMPORT);\r\n                            else\r\n                                if (((TestGanttRolloverButton) (list.elementAt(i))) == (bExport))\r\n                                    sIcons = sIcons + (GanttOptions.EXPORT);\r\n                                else\r\n                                    if (((TestGanttRolloverButton) (list.elementAt(i))) == (bPrint))\r\n                                        sIcons = sIcons + (GanttOptions.PRINT);\r\n                                    else\r\n                                        if (((TestGanttRolloverButton) (list.elementAt(i))) == (bPreviewPrint))\r\n                                            sIcons = sIcons + (GanttOptions.PREVIEWPRINT);\r\n                                        else\r\n                                            if (((TestGanttRolloverButton) (list.elementAt(i))) == (bCut))\r\n                                                sIcons = sIcons + (GanttOptions.CUT);\r\n                                            else\r\n                                                if (((TestGanttRolloverButton) (list.elementAt(i))) == (bCopy))\r\n                                                    sIcons = sIcons + (GanttOptions.COPY);\r\n                                                else\r\n                                                    if (((TestGanttRolloverButton) (list.elementAt(i))) == (bPaste))\r\n                                                        sIcons = sIcons + (GanttOptions.PASTE);\r\n                                                    else\r\n                                                        if (((TestGanttRolloverButton) (list.elementAt(i))) == (bNewTask))\r\n                                                            sIcons = sIcons + (GanttOptions.NEWTASK);\r\n                                                        else\r\n                                                            if (((TestGanttRolloverButton) (list.elementAt(i))) == (bDelete))\r\n                                                                sIcons = sIcons + (GanttOptions.DELETE);\r\n                                                            else\r\n                                                                if (((TestGanttRolloverButton) (list.elementAt(i))) == (bProperties))\r\n                                                                    sIcons = sIcons + (GanttOptions.PROPERTIES);\r\n                                                                else// else if ((TestGanttRolloverButton) list.elementAt(i) == bUnlink)\r\n                                                                // sIcons = sIcons + GanttOptions.UNLINK;\r\n                                                                // else if ((TestGanttRolloverButton) list.elementAt(i) == bLink)\r\n                                                                // sIcons = sIcons + GanttOptions.LINK;\r\n                                                                // else if ((TestGanttRolloverButton) list.elementAt(i) == bInd)\r\n                                                                // sIcons = sIcons + GanttOptions.IND;\r\n                                                                // else if ((TestGanttRolloverButton) list.elementAt(i) == bUnind)\r\n                                                                // sIcons = sIcons + GanttOptions.UNIND;\r\n                                                                // else if ((TestGanttRolloverButton) list.elementAt(i) == bUp)\r\n                                                                // sIcons = sIcons + GanttOptions.UP;\r\n                                                                // else if ((TestGanttRolloverButton) list.elementAt(i) == bDown)\r\n                                                                // sIcons = sIcons + GanttOptions.DOWN;\r\n\r\n                                                                    if (((TestGanttRolloverButton) (list.elementAt(i))) == (bPrev))\r\n                                                                        sIcons = sIcons + (GanttOptions.PREV);\r\n                                                                    else\r\n                                                                        if (((TestGanttRolloverButton) (list.elementAt(i))) == (bScrollCenter))\r\n                                                                            sIcons = sIcons + (GanttOptions.CENTER);\r\n                                                                        else\r\n                                                                            if (((TestGanttRolloverButton) (list.elementAt(i))) == (bNext))\r\n                                                                                sIcons = sIcons + (GanttOptions.NEXT);\r\n                                                                            else\r\n                                                                                if (((TestGanttRolloverButton) (list.elementAt(i))) == (bZoomOut))\r\n                                                                                    sIcons = sIcons + (GanttOptions.ZOOMOUT);\r\n                                                                                else\r\n                                                                                    if (((TestGanttRolloverButton) (list.elementAt(i))) == (bZoomIn))\r\n                                                                                        sIcons = sIcons + (GanttOptions.ZOOMIN);\r\n                                                                                    else\r\n                                                                                        if (((TestGanttRolloverButton) (list.elementAt(i))) == (bUndo))\r\n                                                                                            sIcons = sIcons + (GanttOptions.UNDO);\r\n                                                                                        else\r\n                                                                                            if (((TestGanttRolloverButton) (list.elementAt(i))) == (bRedo))\r\n                                                                                                sIcons = sIcons + (GanttOptions.REDO);\r\n                                                                                            else\r\n                                                                                                if (((TestGanttRolloverButton) (list.elementAt(i))) == (bCritical))\r\n                                                                                                    sIcons = sIcons + (GanttOptions.CRITICAL);\r\n                                                                                                else\r\n                                                                                                    if (((TestGanttRolloverButton) (list.elementAt(i))) == (bAbout))\r\n                                                                                                        sIcons = sIcons + (GanttOptions.ABOUT);\r\n                                                                                                    else\r\n                                                                                                        if (((TestGanttRolloverButton) (list.elementAt(i))) == (bSaveCurrent))\r\n                                                                                                            sIcons = sIcons + (GanttOptions.SAVECURRENT);\r\n                                                                                                        else\r\n                                                                                                            if (((TestGanttRolloverButton) (list.elementAt(i))) == (bComparePrev))\r\n                                                                                                                sIcons = sIcons + (GanttOptions.COMPAREPREV);\r\n                                                                                                            else\r\n                                                                                                                if (((TestGanttRolloverButton) (list.elementAt(i))) == (bRefresh))\r\n                                                                                                                    sIcons = sIcons + (GanttOptions.REFRESH);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n    return sIcons;\r\n}"},
 {"id":513, "name":"getLanguage()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getLanguage()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public GanttLanguage getLanguage() {\r\n    return this.language;\r\n}"},
 {"id":514, "name":"getOptions()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getOptions()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n *\r\n *\r\n * @return the options of ganttproject.\r\n */\r\npublic GanttOptions getOptions() {\r\n    return options;\r\n}"},
 {"id":515, "name":"getOrganization()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getOrganization()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public String getOrganization() {\r\n    return prjInfos.getOrganization();\r\n}"},
 {"id":516, "name":"getParserFactory()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getParserFactory()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"protected ParserFactory getParserFactory() {\r\n    if ((myParserFactory) == null) {\r\n        myParserFactory = new GanttProject.ParserFactoryImpl();\r\n    }\r\n    return myParserFactory;\r\n}"},
 {"id":517, "name":"getPasteAction()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getPasteAction()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public Action getPasteAction() {\r\n    return getViewManager().getPasteAction();\r\n}"},
 {"id":518, "name":"getPreviouStates()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getPreviouStates()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public ArrayList getPreviouStates() {\r\n    return myPreviousStates;\r\n}"},
 {"id":519, "name":"getProjectName()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getProjectName()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"// ///////////////////////////////////////////////////////\r\n// IGanttProject implementation\r\npublic String getProjectName() {\r\n    return prjInfos._sProjectName;\r\n}"},
 {"id":520, "name":"getResourceActions()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getResourceActions()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private ResourceActionSet getResourceActions() {\r\n    if ((myResourceActions) == null) {\r\n        myResourceActions = new ResourceActionSet(((IGanttProject) (this)), ((ResourceContext) (getResourcePanel())), this, getUIFacade());\r\n    }\r\n    return myResourceActions;\r\n}"},
 {"id":521, "name":"getResourceChart()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getResourceChart()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public Chart getResourceChart() {\r\n    return ((Chart) (getResourcePanel().area));\r\n}"},
 {"id":522, "name":"getResourceCustomPropertyManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getResourceCustomPropertyManager()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public CustomPropertyManager getResourceCustomPropertyManager() {\r\n    return getResourcePanel().getResourceTreeTable();\r\n}"},
 {"id":523, "name":"getResourceDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getResourceDividerLocation()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public int getResourceDividerLocation() {\r\n    return getResourcePanel().getDividerLocation();\r\n}"},
 {"id":524, "name":"getResourcePanel()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getResourcePanel()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public GanttResourcePanel getResourcePanel() {\r\n    if ((this.resp) == null) {\r\n        this.resp = new GanttResourcePanel(this, getTree(), getUIFacade());\r\n        this.resp.setResourceActions(getResourceActions());// TODO pass\r\n\r\n        getHumanResourceManager().addView(this.resp);\r\n    }\r\n    return this.resp;\r\n}"},
 {"id":525, "name":"getResourceTree()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getResourceTree()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public ResourceTreeUIFacade getResourceTree() {\r\n    return getResourcePanel();\r\n}"},
 {"id":526, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getRoleManager()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public RoleManager getRoleManager() {\r\n    RoleManager result = ((RoleManager) (managerHash.get(GanttProject.ROLE_MANAGER_ID)));\r\n    if (result == null) {\r\n        result = RoleManager.Access.getInstance();\r\n        managerHash.put(GanttProject.ROLE_MANAGER_ID, result);\r\n    }\r\n    return result;\r\n}"},
 {"id":527, "name":"getStopEditingMouseListener()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getStopEditingMouseListener()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Returns a mouseListener that stop the edition in the ganttTreeTable.\r\n *\r\n * @return A mouseListener that stop the edition in the ganttTreeTable.\r\n */\r\nprivate MouseListener getStopEditingMouseListener() {\r\n    if ((myStopEditingMouseListener) == null)\r\n        myStopEditingMouseListener = new MouseAdapter() {\r\n            public void mouseClicked(MouseEvent e) {\r\n                if (((e.getSource()) != (bNewTask)) && ((e.getClickCount()) == 1))\r\n                    tree.stopEditing();\r\n\r\n                if ((((e.getButton()) == (MouseEvent.BUTTON1)) && (!((e.getSource()) instanceof JTable))) && (!((e.getSource()) instanceof AbstractButton))) {\r\n                    Task taskUnderPointer = area.new MouseSupport().findTaskUnderMousePointer(e.getX(), e.getY());\r\n                    if (taskUnderPointer == null) {\r\n                        tree.selectTreeRow((-1));\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    return myStopEditingMouseListener;\r\n}"},
 {"id":528, "name":"getTaskContainment()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getTaskContainment()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public TaskContainmentHierarchyFacade getTaskContainment() {\r\n    if ((myFacadeInvalidator) == null) {\r\n        return TaskContainmentHierarchyFacade.STUB;\r\n    }\r\n    if ((!(myFacadeInvalidator.isValid())) || ((myCachedFacade) == null)) {\r\n        myCachedFacade = new TaskContainmentHierarchyFacadeImpl(tree);\r\n        myFacadeInvalidator.reset();\r\n    }\r\n    return myCachedFacade;\r\n}"},
 {"id":529, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getTaskManager()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public TaskManager getTaskManager() {\r\n    return myTaskManager;\r\n}"},
 {"id":530, "name":"getTaskSelectionContext()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getTaskSelectionContext()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public TaskSelectionContext getTaskSelectionContext() {\r\n    return Mediator.getTaskSelectionManager();\r\n}"},
 {"id":531, "name":"getTaskTree()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getTaskTree()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public TaskTreeUIFacade getTaskTree() {\r\n    return getTree();\r\n}"},
 {"id":532, "name":"getToolTip(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getToolTip(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Return the tooltip in html (with yello bgcolor\r\n */\r\npublic static String getToolTip(String msg) {\r\n    return (\"<html><body bgcolor=#EAEAEA>\" + msg) + \"</body></html>\";\r\n}"},
 {"id":533, "name":"getTree()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getTree()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public GanttTree2 getTree() {\r\n    if ((this.tree) == null) {\r\n        this.tree = new GanttTree2(this, getTaskManager(), Mediator.getTaskSelectionManager(), getUIFacade());\r\n    }\r\n    return this.tree;\r\n}"},
 {"id":534, "name":"getUIConfiguration()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getUIConfiguration()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n *\r\n *\r\n * @return the uiconfiguration.\r\n */\r\npublic UIConfiguration getUIConfiguration() {\r\n    return myUIConfiguration;\r\n}"},
 {"id":535, "name":"getViewIndex()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getViewIndex()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public int getViewIndex() {\r\n    if ((getTabs()) == null)\r\n        return -1;\r\n\r\n    return getTabs().getSelectedIndex();\r\n}"},
 {"id":536, "name":"getWebLink()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getWebLink()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public String getWebLink() {\r\n    return prjInfos.getWebLink();\r\n}"},
 {"id":537, "name":"getXslDir()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getXslDir()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public String getXslDir() {\r\n    return options.getXslDir();\r\n}"},
 {"id":538, "name":"getXslFo()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.getXslFo()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n *\r\n *\r\n * @return the status Bar of the main frame.\r\n */\r\n// public GanttStatusBar getStatusBar() {\r\n// return statusBar;\r\n// }\r\npublic String getXslFo() {\r\n    return options.getXslFo();\r\n}"},
 {"id":539, "name":"initDeletedIconList()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.initDeletedIconList()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public DefaultListModel initDeletedIconList() {\r\n    DefaultListModel list = new DefaultListModel();\r\n    if ((options.getDeletedIconList()) != null) {\r\n        int[] icons = options.getDeletedIconList();\r\n        for (int i = 0; i < (icons.length); i++)\r\n            addButton(icons[i], list);\r\n\r\n    }\r\n    return list;\r\n}"},
 {"id":540, "name":"initIconList()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.initIconList()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public DefaultListModel initIconList() {\r\n    DefaultListModel list = new DefaultListModel();\r\n    int[] icons = options.getIconList();\r\n    for (int i = 0; i < (icons.length); i++)\r\n        addButton(icons[i], list);\r\n\r\n    return list;\r\n}"},
 {"id":541, "name":"initOptions()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.initOptions()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private void initOptions() {\r\n    // Color color = GanttGraphicArea.taskDefaultColor;\r\n    // myApplicationConfig.register(options);\r\n    options.setUIConfiguration(myUIConfiguration);\r\n    options.setDocumentsMRU(documentsMRU);\r\n    options.setLookAndFeel(lookAndFeel);\r\n    if (options.load()) {\r\n        language = options.getLanguage();\r\n        GanttGraphicArea.taskDefaultColor = options.getDefaultColor();\r\n        lookAndFeel = options.getLnfInfos();\r\n        HttpDocument.setLockDAVMinutes(options.getLockDAVMinutes());\r\n    }\r\n    myUIConfiguration = options.getUIConfiguration();\r\n}"},
 {"id":542, "name":"isModified()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.isModified()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public boolean isModified() {\r\n    return askForSave;\r\n}"},
 {"id":543, "name":"keyPressed(java.awt.event.KeyEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.keyPressed(java.awt.event.KeyEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Invoked when a key has been pressed.\r\n */\r\npublic void keyPressed(KeyEvent e) {\r\n    // System.out.println(e.getKeyCode());\r\n    /* Consume the event to prevent it to go farther. */\r\n    int code = e.getKeyCode();\r\n    int modifiers = e.getModifiersEx();\r\n    if (code == (KeyEvent.KEY_LOCATION_UNKNOWN))\r\n        e.consume();\r\n\r\n    switch (code) {\r\n        case KeyEvent.VK_DELETE :\r\n            e.consume();\r\n            if (!(isOnlyViewer)) {\r\n                if ((getViewIndex()) == (UIFacade.GANTT_INDEX))\r\n                    deleteTasks(true);\r\n                else\r\n                    if ((getViewIndex()) == (UIFacade.RESOURCES_INDEX)) {\r\n                        deleteResources();\r\n                    }\r\n\r\n            }\r\n            break;\r\n        case KeyEvent.VK_ENTER :\r\n            break;\r\n        case KeyEvent.VK_F5 :\r\n            {\r\n                e.consume();\r\n                getActiveChart().reset();\r\n                repaint();\r\n                break;\r\n            }\r\n    }\r\n}"},
 {"id":544, "name":"keyReleased(java.awt.event.KeyEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.keyReleased(java.awt.event.KeyEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Invoked when a key has been released.\r\n */\r\npublic void keyReleased(KeyEvent e) {\r\n}"},
 {"id":545, "name":"keyTyped(java.awt.event.KeyEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.keyTyped(java.awt.event.KeyEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Invoked when a key has been typed.\r\n */\r\npublic void keyTyped(KeyEvent e) {\r\n}"},
 {"id":546, "name":"launchOptionsDialog()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.launchOptionsDialog()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Launch the options dialog\r\n */\r\npublic void launchOptionsDialog() {\r\n    getUIFacade().setStatusText(language.getText(\"settingsPreferences\"));\r\n    SettingsDialog dialogOptions = new SettingsDialog(this);\r\n    dialogOptions.show();\r\n    area.repaint();\r\n}"},
 {"id":547, "name":"main(java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.GanttProject.main(java.lang.String[])", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * The main\r\n */\r\npublic static void main(String[] arg) {\r\n    CommandLineExportApplication cmdlineApplication = new CommandLineExportApplication();\r\n    HashMap parsedArgs = new HashMap();\r\n    String argName = \"\";\r\n    for (int i = 0; i < (arg.length); i++) {\r\n        String nextWord = arg[i];\r\n        if ((nextWord.charAt(0)) == -) {\r\n            if ((argName.length()) != 0) {\r\n                parsedArgs.put(argName, Collections.EMPTY_LIST);\r\n            }\r\n            argName = nextWord.toLowerCase();\r\n        } else {\r\n            List values = ((List) (parsedArgs.get(argName)));\r\n            if ((values == null) || (values == (Collections.EMPTY_LIST))) {\r\n                values = new ArrayList();\r\n                parsedArgs.put(argName, values);\r\n            }\r\n            values.add(nextWord);\r\n            if (!(cmdlineApplication.getCommandLineFlags().contains(argName))) {\r\n                argName = \"\";\r\n            }\r\n        }\r\n    }\r\n    if (((argName.length()) > 0) && (!(parsedArgs.containsKey(argName)))) {\r\n        parsedArgs.put(argName, Collections.EMPTY_LIST);\r\n    }\r\n    if ((parsedArgs.containsKey(\"-h\")) || (parsedArgs.containsKey(\"--help\"))) {\r\n        GanttProject.usage();\r\n        System.exit(0);\r\n    }\r\n    if (parsedArgs.containsKey(\"-log\")) {\r\n        List values = ((List) (parsedArgs.get(\"-log\")));\r\n        String logFileName = (values.isEmpty()) ? (System.getProperty(\"user.home\")) + \"/.ganttproject.log\" : String.valueOf(values.get(0));\r\n        File logFile = new File(logFileName);\r\n        try {\r\n            System.setErr(new PrintStream(new FileOutputStream(logFile)));\r\n            System.out.println((\"Writing log to \" + (logFile.getAbsolutePath())));\r\n        } catch (FileNotFoundException e) {\r\n            System.err.println((\"Failed to redirect error log to file=\" + logFileName));\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    if (false == (cmdlineApplication.export(parsedArgs))) {\r\n        GanttSplash splash = new GanttSplash();\r\n        try {\r\n            splash.setVisible(true);\r\n            GanttProject ganttFrame = new GanttProject(false);\r\n            System.err.println(\"Main frame created\");\r\n            String startupDocument = null;\r\n            if (parsedArgs.containsKey(\"\")) {\r\n                List values = ((List) (parsedArgs.get(\"\")));\r\n                startupDocument = ((String) (values.get(0)));\r\n            } else\r\n                if (parsedArgs.containsKey(\"-open\")) {\r\n                    List values = ((List) (parsedArgs.get(\"-open\")));\r\n                    startupDocument = (values.isEmpty()) ? null : ((String) (values.get(0)));\r\n                }\r\n\r\n            if (startupDocument != null) {\r\n                ganttFrame.openStartupDocument(startupDocument);\r\n            }\r\n            ganttFrame.setVisible(true);\r\n            if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"mac os x\")) {\r\n                OSXAdapter.registerMacOSXApplication(ganttFrame);\r\n            }\r\n        } catch (Throwable e) {\r\n            e.printStackTrace();\r\n            return;\r\n        } finally {\r\n            splash.close();\r\n            System.err.println(\"Splash closed\");\r\n        }\r\n    }\r\n}"},
 {"id":548, "name":"newHumanResource()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.newHumanResource()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public ProjectResource newHumanResource() {\r\n    final HumanResource people = ((HumanResourceManager) (getHumanResourceManager())).newHumanResource();\r\n    people.setRole(getRoleManager().getDefaultRole());\r\n    GanttDialogPerson dp = new GanttDialogPerson(getUIFacade(), getLanguage(), people);\r\n    dp.setVisible(true);\r\n    if (dp.result()) {\r\n        getUndoManager().undoableEdit(\"new Resource\", new Runnable() {\r\n            public void run() {\r\n                getHumanResourceManager().add(people);\r\n            }\r\n        });\r\n    }\r\n    return people;\r\n}"},
 {"id":549, "name":"newProject()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.newProject()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Create a new project\r\n */\r\npublic void newProject() {\r\n    getProjectUIFacade().createProject(getProject());\r\n}"},
 {"id":550, "name":"newTask()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.newTask()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Create a new task\r\n */\r\npublic Task newTask() {\r\n    getTabs().setSelectedIndex(UIFacade.GANTT_INDEX);\r\n    int index = -1;\r\n    MutableTreeNode selectedNode = getTree().getSelectedNode();\r\n    if (selectedNode != null) {\r\n        DefaultMutableTreeNode parent1 = ((DefaultMutableTreeNode) (selectedNode.getParent()));\r\n        index = (parent1.getIndex(selectedNode)) + 1;\r\n        tree.getTreeTable().getTree().setSelectionPath(new TreePath(parent1.getPath()));\r\n        tree.getTreeTable().getTreeTable().editingStopped(new ChangeEvent(tree.getTreeTable().getTreeTable()));\r\n    }\r\n    GanttCalendar cal = new GanttCalendar(area.getViewState().getStartDate());\r\n    DefaultMutableTreeNode node = tree.getSelectedNode();\r\n    GanttLanguage lang = GanttLanguage.getInstance();\r\n    String nameOfTask = options.getTaskNamePrefix();// language.getText(\"newTask\");\r\n\r\n    // if (current != null) {\r\n    // current.setMilestone(false);\r\n    // node = (TaskNode) tree.getSelectedNode();\r\n    // cal = current.getStart();\r\n    // if (!node.isRoot())\r\n    // nameOfTask = current.toString();\r\n    // }\r\n    GanttTask task = getTaskManager().createTask();\r\n    task.setStart(cal);\r\n    task.setLength(1);\r\n    getTaskManager().registerTask(task);// create a new task in the tab\r\n\r\n    // paneneed to register it\r\n    task.setName(((nameOfTask + \"_\") + (task.getTaskID())));\r\n    task.setColor(area.getTaskColor());\r\n    // if (current != null) {\r\n    // if (current.colorDefined()) {\r\n    // task.setColor(current.getColor());\r\n    // }\r\n    // if (current.shapeDefined())\r\n    // task.setShape(current.getShape());\r\n    // }\r\n    TaskNode taskNode = tree.addObject(task, node, index);\r\n    /* this will add new custom columns to the newly created task. */\r\n    getCustomColumnsStorage().processNewTask(task);\r\n    AdjustTaskBoundsAlgorithm alg = getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm();\r\n    alg.run(task);\r\n    RecalculateTaskCompletionPercentageAlgorithm alg2 = getTaskManager().getAlgorithmCollection().getRecalculateTaskCompletionPercentageAlgorithm();\r\n    alg2.run(task);\r\n    area.repaint();\r\n    setAskForSave(true);\r\n    getUIFacade().setStatusText(language.getText(\"createNewTask\"));\r\n    // setQuickSave(true);\r\n    tree.setEditingTask(task);\r\n    if (options.getAutomatic()) {\r\n        propertiesTask();\r\n    }\r\n    repaint2();\r\n    return task;\r\n}"},
 {"id":551, "name":"open(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.open(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void open(Document document) throws IOException {\r\n    openDocument(document);\r\n    if ((document.getPortfolio()) != null) {\r\n        Document defaultDocument = document.getPortfolio().getDefaultDocument();\r\n        openDocument(defaultDocument);\r\n    }\r\n}"},
 {"id":552, "name":"openDocument(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.openDocument(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private void openDocument(Document document) throws IOException {\r\n    if ((document.getDescription().toLowerCase().endsWith(\".xml\")) || (document.getDescription().toLowerCase().endsWith(\".gan\"))) {\r\n        boolean locked = document.acquireLock();\r\n        if (!locked) {\r\n            getUIFacade().logErrorMessage(new Exception(language.getText(\"msg13\")));\r\n        }\r\n        document.read();\r\n        if (documentsMRU.add(document)) {\r\n            updateMenuMRU();\r\n        }\r\n        if (locked) {\r\n            projectDocument = document;\r\n        }\r\n        this.setTitle(((((language.getText(\"appliTitle\")) + \" [\") + (document.getDescription())) + \"]\"));\r\n        setAskForSave(false);\r\n        if ((myPreviousStates.size()) != 0) {\r\n            bComparePrev.setEnabled(true);\r\n        }\r\n    } else {\r\n        String errorMessage = ((language.getText(\"msg2\")) + \"\n\") + (document.getDescription());\r\n        throw new IOException(errorMessage);\r\n    }\r\n    Chart[] charts = Mediator.getPluginManager().getCharts();\r\n    for (int i = 0; i < (charts.length); i++) {\r\n        charts[i].setTaskManager(myTaskManager);\r\n        charts[i].reset();\r\n    }\r\n    // myDelayManager.fireDelayObservation(); // it is done in repaint2\r\n    addMouseListenerToAllContainer(this.getComponents());\r\n    getTaskManager().processCriticalPath(((TaskNode) (tree.getRoot())));\r\n    ArrayList projectTasks = tree.getProjectTasks();\r\n    if ((projectTasks.size()) != 0)\r\n        for (int i = 0; i < (projectTasks.size()); i++)\r\n            getTaskManager().processCriticalPath(((TaskNode) (projectTasks.get(i))));\r\n\r\n\r\n    // repaint2();\r\n}"},
 {"id":553, "name":"openFile()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.openFile()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Open a local project file with dialog box (JFileChooser)\r\n */\r\npublic void openFile() throws IOException {\r\n    getProjectUIFacade().openProject(this);\r\n}"},
 {"id":554, "name":"openStartupDocument(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.openStartupDocument(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void openStartupDocument(String path) {\r\n    if (path != null) {\r\n        final Document document = getDocumentManager().getDocument(path);\r\n        // openStartupDocument(document);\r\n        getUndoManager().undoableEdit(\"OpenFile\", new Runnable() {\r\n            public void run() {\r\n                try {\r\n                    getProjectUIFacade().openProject(document, getProject());\r\n                } catch (IOException e) {\r\n                    if (!(tryImportDocument(document))) {\r\n                        getUIFacade().showErrorDialog(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}"},
 {"id":555, "name":"openStartupDocument(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.openStartupDocument(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private void openStartupDocument(Document document) {\r\n    try {\r\n        getProjectUIFacade().openProject(document, getProject());\r\n    } catch (IOException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n}"},
 {"id":556, "name":"openURL()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.openURL()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Open a remote project file with dialog box (GanttURLChooser)\r\n */\r\npublic void openURL() {\r\n    try {\r\n        getProjectUIFacade().openRemoteProject(getProject());\r\n    } catch (IOException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n}"},
 {"id":557, "name":"openWebPage()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.openWebPage()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Open the web page\r\n */\r\npublic void openWebPage() throws IOException {\r\n    if (!(BrowserControl.displayURL(\"http://ganttproject.biz/\"))) {\r\n        GanttDialogInfo gdi = new GanttDialogInfo(this, GanttDialogInfo.ERROR, GanttDialogInfo.YES_OPTION, language.getText(\"msg4\"), language.getText(\"error\"));\r\n        gdi.show();\r\n        return;\r\n    }\r\n    getUIFacade().setStatusText(((GanttLanguage.getInstance().getText(\"opening\")) + \" www.ganttproject.biz\"));\r\n}"},
 {"id":558, "name":"previewPrint()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.previewPrint()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void previewPrint() {\r\n    Date startDate;\r\n    Date endDate;\r\n    Chart chart = getUIFacade().getActiveChart();\r\n    if (chart == null) {\r\n        getUIFacade().showErrorDialog(\"Failed to find active chart.\nPlease report this problem to GanttProject development team\");\r\n        return;\r\n    }\r\n    try {\r\n        startDate = chart.getStartDate();\r\n        endDate = chart.getEndDate();\r\n    } catch (UnsupportedOperationException e) {\r\n        startDate = null;\r\n        endDate = null;\r\n    }\r\n    if ((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) {\r\n        startDate = area.getChartModel().getStartDate();\r\n        endDate = area.getChartModel().getEndDate();\r\n    } else\r\n        if ((getTabs().getSelectedIndex()) == (UIFacade.RESOURCES_INDEX)) {\r\n            startDate = getResourcePanel().area.getChartModel().getStartDate();\r\n            endDate = getResourcePanel().area.getChartModel().getEndDate();\r\n        }\r\n\r\n    try {\r\n        PrintPreview preview = new PrintPreview(getProject(), getUIFacade(), chart, startDate, endDate);\r\n        if (preview != null)\r\n            preview.setVisible(true);\r\n\r\n    } catch (OutOfMemoryError e) {\r\n        getUIFacade().showErrorDialog(GanttLanguage.getInstance().getText(\"printing.out_of_memory\"));\r\n        return;\r\n    }\r\n}"},
 {"id":559, "name":"printProject()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.printProject()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Print the project\r\n */\r\npublic void printProject() {\r\n    Chart chart = getUIFacade().getActiveChart();\r\n    if (chart == null) {\r\n        getUIFacade().showErrorDialog(\"Failed to find active chart.\nPlease report this problem to GanttProject development team\");\r\n        return;\r\n    }\r\n    try {\r\n        PrintManager.printChart(chart, options.getExportSettings());\r\n    } catch (OutOfMemoryError e) {\r\n        getUIFacade().showErrorDialog(GanttLanguage.getInstance().getText(\"printing.out_of_memory\"));\r\n    }\r\n}"},
 {"id":560, "name":"propertiesTask()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.propertiesTask()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Edit task parameters\r\n */\r\npublic void propertiesTask() {\r\n    myTaskPropertiesAction.actionPerformed(null);\r\n}"},
 {"id":561, "name":"quitApplication()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.quitApplication()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Quit the application\r\n */\r\npublic void quitApplication() {\r\n    options.setWindowPosition(getX(), getY());\r\n    options.setWindowSize(getWidth(), getHeight());\r\n    options.setUIConfiguration(myUIConfiguration);\r\n    options.setDocumentsMRU(documentsMRU);\r\n    options.setLookAndFeel(lookAndFeel);\r\n    options.setToolBarPosition(toolBar.getOrientation());\r\n    options.save();\r\n    if (checkCurrentProject()) {\r\n        getProject().close();\r\n        setVisible(false);\r\n        dispose();\r\n        System.exit(0);\r\n    } else {\r\n        setVisible(true);\r\n    }\r\n}"},
 {"id":562, "name":"recalculateCriticalPath()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.recalculateCriticalPath()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void recalculateCriticalPath() {\r\n    if (myUIConfiguration.isCriticalPathOn()) {\r\n        getTaskManager().processCriticalPath(((TaskNode) (tree.getRoot())));\r\n        ArrayList projectTasks = tree.getProjectTasks();\r\n        if ((projectTasks.size()) != 0) {\r\n            for (int i = 0; i < (projectTasks.size()); i++)\r\n                getTaskManager().processCriticalPath(((TaskNode) (projectTasks.get(i))));\r\n\r\n        }\r\n        repaint();\r\n    }\r\n}"},
 {"id":563, "name":"refresh()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.refresh()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void refresh() {\r\n    getTaskManager().processCriticalPath(((TaskNode) (tree.getRoot())));\r\n    ArrayList projectTasks = tree.getProjectTasks();\r\n    if ((projectTasks.size()) != 0) {\r\n        for (int i = 0; i < (projectTasks.size()); i++)\r\n            getTaskManager().processCriticalPath(((TaskNode) (projectTasks.get(i))));\r\n\r\n    }\r\n    getResourcePanel().getResourceTreeTableModel().updateResources();\r\n    getResourcePanel().getResourceTreeTable().setRowHeight(20);\r\n    if ((myDelayManager) != null)\r\n        myDelayManager.fireDelayObservation();\r\n\r\n    super.repaint();\r\n}"},
 {"id":564, "name":"refreshProjectInfos()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.refreshProjectInfos()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Refresh the informations of the project on the status bar.\r\n */\r\npublic void refreshProjectInfos() {\r\n    if (((getTaskManager().getTaskCount()) == 0) && ((resp.nbPeople()) == 0))\r\n        getStatusBar().setSecondText(\"\");\r\n    else\r\n        getStatusBar().setSecondText((((((((GanttProject.correctLabel(language.getText(\"task\"))) + \" : \") + (getTaskManager().getTaskCount())) + \"  \") + (GanttProject.correctLabel(language.getText(\"resources\")))) + \" : \") + (resp.nbPeople())));\r\n\r\n}"},
 {"id":565, "name":"repaint2()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.repaint2()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void repaint2() {\r\n    getResourcePanel().getResourceTreeTableModel().updateResources();\r\n    getResourcePanel().getResourceTreeTable().setRowHeight(20);\r\n    if ((myDelayManager) != null) {\r\n        myDelayManager.fireDelayObservation();\r\n    }\r\n    super.repaint();\r\n}"},
 {"id":566, "name":"resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"// ///////////////////////////////////////////////////////////////\r\n// ResourceView implementation\r\npublic void resourceAdded(ResourceEvent event) {\r\n    if ((getStatusBar()) != null) {\r\n        // tabpane.setSelectedIndex(1);\r\n        getUIFacade().setStatusText(GanttLanguage.getInstance().correctLabel(GanttLanguage.getInstance().getText(\"newHuman\")));\r\n        setAskForSave(true);\r\n        refreshProjectInfos();\r\n    }\r\n}"},
 {"id":567, "name":"resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void resourceAssignmentsChanged(ResourceEvent e) {\r\n    setAskForSave(true);\r\n}"},
 {"id":568, "name":"resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void resourceChanged(ResourceEvent e) {\r\n    setAskForSave(true);\r\n}"},
 {"id":569, "name":"resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void resourcesRemoved(ResourceEvent event) {\r\n    refreshProjectInfos();\r\n    setAskForSave(true);\r\n}"},
 {"id":570, "name":"restoreOptions()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.restoreOptions()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void restoreOptions() {\r\n    options.initByDefault();// options by default\r\n\r\n    iconList = initIconList();\r\n    deletedIconList = initDeletedIconList();\r\n    addButtons();\r\n    myUIConfiguration = options.getUIConfiguration();\r\n    GanttGraphicArea.taskDefaultColor = new Color(140, 182, 206);\r\n    area.repaint();\r\n}"},
 {"id":571, "name":"saveAsPreviousState()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.saveAsPreviousState()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"protected void saveAsPreviousState() {\r\n    getUIFacade().setStatusText(GanttLanguage.getInstance().getText(\"saveCurrent\"));\r\n    GanttDialogSaveAsPreviousState ps = new GanttDialogSaveAsPreviousState(this);\r\n    ps.show();\r\n    if (ps.isSaved()) {\r\n        bSaveCurrent.setEnabled(false);\r\n        bComparePrev.setEnabled(true);\r\n        myPreviousStates.add(ps.getPreviousState());\r\n    }\r\n}"},
 {"id":572, "name":"saveAsProject()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.saveAsProject()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Save the project as (with a dialog file chooser)\r\n */\r\npublic boolean saveAsProject() throws IOException {\r\n    tree.displayHiddenTasks();\r\n    // TODO: for 2.0, implement saving project without the need to show hidden tasks\r\n    getProjectUIFacade().saveProjectAs(getProject());\r\n    return true;\r\n}"},
 {"id":573, "name":"saveAsURLProject()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.saveAsURLProject()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Save the project on a server (with a GanttURLChooser)\r\n */\r\npublic boolean saveAsURLProject() throws IOException {\r\n    getProjectUIFacade().saveProjectRemotely(getProject());\r\n    return true;\r\n}"},
 {"id":574, "name":"saveProject()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.saveProject()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Save the project on a file\r\n */\r\npublic void saveProject() throws IOException {\r\n    tree.displayHiddenTasks();\r\n    // TODO: for 2.0, implement saving project without the need to show hidden tasks\r\n    getProjectUIFacade().saveProject(getProject());\r\n    // saveProject(projectDocument);\r\n}"},
 {"id":575, "name":"setAskForSave(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setAskForSave(boolean)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"// change by G. Herrmann\r\npublic void setAskForSave(boolean afs) {\r\n    if (isOnlyViewer)\r\n        return;\r\n\r\n    fireProjectModified(afs);\r\n    String title = getTitle();\r\n    // String last = title.substring(title.length() - 11, title.length());\r\n    if ((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX)) {\r\n        if (afs)\r\n            bSaveCurrent.setEnabled(afs);\r\n\r\n        if ((myPreviousStates.size()) != 0)\r\n            bComparePrev.setEnabled(true);\r\n\r\n    }\r\n    askForSave = afs;\r\n    try {\r\n        if ((System.getProperty(\"mrj.version\")) != null) {\r\n            rootPane.putClientProperty(\"windowModified\", Boolean.valueOf(afs));\r\n            // see http://developer.apple.com/qa/qa2001/qa1146.html\r\n        } else {\r\n            if (askForSave) {\r\n                /* if (!last.equals(\" (modified)\")) { setTitle(getTitle() + \"\n                (modified)\"); }\n                 */\r\n                if (!(title.endsWith(\" *\"))) {\r\n                    setTitle(((getTitle()) + \" *\"));\r\n                }\r\n            }\r\n        }\r\n    } catch (AccessControlException e) {\r\n        // This can happen when running in a sandbox (Java WebStart)\r\n        System.err.println(((e + \": \") + (e.getMessage())));\r\n    }\r\n}"},
 {"id":576, "name":"setButtonText()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setButtonText()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Set the text on the buttons.\r\n */\r\npublic void setButtonText() {\r\n    if ((options.getButtonShow()) != (GanttOptions.ICONS)) {\r\n        bImport.setText(GanttProject.correctLabel(language.getText(\"import\")));\r\n        bExport.setText(GanttProject.correctLabel(language.getText(\"export\")));\r\n        bPreviewPrint.setText(GanttProject.correctLabel(language.getText(\"preview\")));\r\n        bNewTask.setText(GanttProject.correctLabel(language.getText(((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX) ? \"createTask\" : \"newHuman\"))));\r\n        bDelete.setText(GanttProject.correctLabel(language.getText(((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX) ? \"deleteTask\" : \"deleteHuman\"))));\r\n        bProperties.setText(GanttProject.correctLabel(language.getText(((getTabs().getSelectedIndex()) == (UIFacade.GANTT_INDEX) ? \"propertiesTask\" : \"propertiesHuman\"))));\r\n        bPrev.setText(GanttProject.correctLabel(language.getText(\"backDate\")));\r\n        bScrollCenter.setText(GanttProject.correctLabel(language.getText(\"centerOnSelectedTasks\")));\r\n        bNext.setText(GanttProject.correctLabel(language.getText(\"forwardDate\")));\r\n        bZoomOut.setText(GanttProject.correctLabel(language.getText(\"zoomOut\")));\r\n        bZoomIn.setText(GanttProject.correctLabel(language.getText(\"zoomIn\")));\r\n        bAbout.setText(GanttProject.correctLabel(language.getText(\"about\")));\r\n        bUndo.setText(GanttProject.correctLabel(language.getText(\"undo\")));\r\n        bRedo.setText(GanttProject.correctLabel(language.getText(\"redo\")));\r\n        bCritical.setText(language.getText(\"criticalPath\"));\r\n        bComparePrev.setText(GanttProject.correctLabel(language.getText(\"comparePrev\")));\r\n        bSaveCurrent.setText(GanttProject.correctLabel(language.getText(\"saveCurrent\")));\r\n        bRefresh.setText(GanttProject.correctLabel(language.getText(\"refresh\")));\r\n        // bShowHiddens.setText\r\n        // (correctLabel(language.getText(\"showHiddens\")));\r\n    }\r\n}"},
 {"id":577, "name":"setDescription(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setDescription(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setDescription(String description) {\r\n    prjInfos._sDescription = description;\r\n    setAskForSave(true);\r\n}"},
 {"id":578, "name":"setDocument(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setDocument(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setDocument(Document document) {\r\n    projectDocument = document;\r\n}"},
 {"id":579, "name":"setGanttDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setGanttDividerLocation(int)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setGanttDividerLocation(int location) {\r\n    myGanttChartTabContent.setDividerLocation(location);\r\n}"},
 {"id":580, "name":"setHiddens()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setHiddens()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setHiddens() {\r\n    menu.removeAll();\r\n    addButtons();\r\n    int separatorSize = Integer.parseInt(options.getIconSize());\r\n    double toolBarlength = 0.0;\r\n    int buttonSize = 0;\r\n    int lastDisplayedIndex = 0;\r\n    Component[] buttons = toolBar.getComponents();\r\n    if ((toolBar.getOrientation()) == (JToolBar.HORIZONTAL))\r\n        toolBarlength = toolBar.getSize().getWidth();\r\n    else\r\n        toolBarlength = toolBar.getSize().getHeight();\r\n\r\n    int position = 10;\r\n    // searching for hidden buttons\r\n    for (int i = 0; i < (buttons.length); i++) {\r\n        if ((buttons[i].getClass()) == (TestGanttRolloverButton.class)) {\r\n            if ((toolBar.getOrientation()) == (JToolBar.HORIZONTAL))\r\n                buttonSize = buttons[i].getWidth();\r\n            else\r\n                buttonSize = buttons[i].getHeight();\r\n\r\n            position = position + buttonSize;\r\n            if ((position + ((2 * (bShowHiddens.getWidth())) / 3)) < toolBarlength) {\r\n                lastDisplayedIndex = i;\r\n            } else {\r\n                menu.add(buttons[i]);\r\n            }\r\n        } else\r\n            position = position + separatorSize;\r\n\r\n    }\r\n    // if there is hidden buttons\r\n    if ((menu.getComponentCount()) != 0) {\r\n        for (int i = lastDisplayedIndex + 1; i < (buttons.length); i++) {\r\n            toolBar.remove(buttons[i]);\r\n        }\r\n        toolBar.add(bShowHiddens);\r\n    }\r\n}"},
 {"id":581, "name":"setMemonic()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setMemonic()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Create memonic for keyboard\r\n */\r\npublic void setMemonic() {\r\n    int MENU_MASK = GPAction.MENU_MASK;\r\n    // --UNDO----------------------------------\r\n    miUndo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, MENU_MASK));\r\n    // --REDO----------------------------------\r\n    miRedo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, MENU_MASK));\r\n    if (!(isOnlyViewer)) {\r\n        miOptions.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, MENU_MASK));\r\n        miDeleteTask.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D, MENU_MASK));\r\n    }\r\n}"},
 {"id":582, "name":"setModified()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setModified()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setModified() {\r\n    setAskForSave(true);\r\n}"},
 {"id":583, "name":"setModified(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setModified(boolean)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setModified(boolean modified) {\r\n    setAskForSave(modified);\r\n}"},
 {"id":584, "name":"setOrganization(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setOrganization(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setOrganization(String organization) {\r\n    prjInfos._sOrganization = organization;\r\n    setAskForSave(true);\r\n}"},
 {"id":585, "name":"setProjectName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setProjectName(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setProjectName(String projectName) {\r\n    prjInfos._sProjectName = projectName;\r\n    setAskForSave(true);\r\n}"},
 {"id":586, "name":"setResourceDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setResourceDividerLocation(int)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setResourceDividerLocation(int location) {\r\n    getResourcePanel().setDividerLocation(location);\r\n}"},
 {"id":587, "name":"setRowHeight(int)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setRowHeight(int)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setRowHeight(int value) {\r\n    tree.getTreeTable().getTable().setRowHeight(value);\r\n}"},
 {"id":588, "name":"setViewIndex(int)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setViewIndex(int)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setViewIndex(int viewIndex) {\r\n    if ((getTabs().getTabCount()) > viewIndex) {\r\n        getTabs().setSelectedIndex(viewIndex);\r\n    }\r\n}"},
 {"id":589, "name":"setWebLink(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setWebLink(java.lang.String)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void setWebLink(String webLink) {\r\n    prjInfos._sWebLink = webLink;\r\n    setAskForSave(true);\r\n}"},
 {"id":590, "name":"setWindowListener(java.awt.event.WindowListener)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.setWindowListener(java.awt.event.WindowListener)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public static void setWindowListener(WindowListener windowListener) {\r\n    GanttProject.ourWindowListener = windowListener;\r\n}"},
 {"id":591, "name":"showHiddenButtonsPaneMenu()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.showHiddenButtonsPaneMenu()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"public void showHiddenButtonsPaneMenu() {\r\n    menu.applyComponentOrientation(language.getComponentOrientation());\r\n    menu.show(toolBar, bShowHiddens.getX(), bShowHiddens.getY());\r\n}"},
 {"id":592, "name":"tryImportDocument(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.GanttProject.tryImportDocument(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"private boolean tryImportDocument(Document document) {\r\n    boolean success = false;\r\n    Importer[] importers = ((Importer[]) (Mediator.getPluginManager().getExtensions(Importer.EXTENSION_POINT_ID, Importer.class)));\r\n    for (int i = 0; i < (importers.length); i++) {\r\n        Importer nextImporter = importers[i];\r\n        if (Pattern.matches(((\".*(\" + (nextImporter.getFileNamePattern())) + \")$\"), document.getFilePath())) {\r\n            try {\r\n                nextImporter.run(this, getUIFacade(), new File(document.getFilePath()), false);\r\n                success = true;\r\n                break;\r\n            } catch (Throwable e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return success;\r\n}"},
 {"id":593, "name":"updateMenuMRU()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.updateMenuMRU()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Updates the last open file menu items.\r\n */\r\nprivate void updateMenuMRU() {\r\n    mMRU.removeAll();\r\n    int index = 0;\r\n    Iterator iterator = documentsMRU.iterator();\r\n    while (iterator.hasNext()) {\r\n        index++;\r\n        Document document = ((Document) (iterator.next()));\r\n        JMenuItem mi = new JMenuItem(new OpenDocumentAction(index, document, this));\r\n        mMRU.add(mi);\r\n    } \r\n}"},
 {"id":594, "name":"usage()", "fullmethod":"net.sourceforge.ganttproject.GanttProject.usage()", "ownerclassid":"53", "ownerclassname":"net.sourceforge.ganttproject.GanttProject", "sourcecode":"/**\r\n * Print the help for ganttproject on the system.out\r\n */\r\nprivate static void usage() {\r\n    System.out.println();\r\n    System.out.println(\"GanttProject usage : java -jar ganttproject-(VERSION).jar <OPTIONS>\");\r\n    System.out.println();\r\n    System.out.println(\"  Here are the possible options:\");\r\n    System.out.println(\"    -h, --help : Print this message\");\r\n    System.out.println(\"    [project_file_name] a XML file based on ganttproject format to directly open (project.xml or project.gan)\");\r\n    System.out.println(\"    -html [project_file_name] [export_directory_name], export directly a ganttproject file to web pages\");\r\n    System.out.println(\"         -xsl-dir [xsl_directory]                        localisation of the xsl directory for html export\");\r\n    System.out.println(\"    -pdf  [project_file_name] [pdf_file_name],         export directly a ganttproject file to web pages\");\r\n    System.out.println(\"         -xsl-fo [xsl_fo_file]                           localisation of the xsl-fo file for pdf export\");\r\n    System.out.println(\"    -csv  [project_file_name] [csv_image_filename],    export directly a ganttproject file to csv document compatible with spreadsheets\");\r\n    System.out.println(\"    -png  [project_file_name] [png_image_filename],    export directly a ganttproject file to png image\");\r\n    System.out.println(\"    -jpg  [project_file_name] [jpg_image_filename],    export directly a ganttproject file to jpg image\");\r\n    System.out.println(\"    -fig/-xfig  [project_file_name] [fig_image_filename],    export directly a ganttproject file to xfig image\");\r\n    System.out.println();\r\n    System.out.println(\"    In all these cases the project_file_name can either be a file on local disk or an URL.\");\r\n    System.out.println(\"    If the URL is password-protected, you can give credentials this way:\");\r\n    System.out.println(\"      http://username:password@example.com/filename\");\r\n    System.out.println(\" \");\r\n}"},
 {"id":595, "name":"-init-(java.io.File,int,net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.GanttProject$ExportFileInfo.-init-(java.io.File,int,net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"51", "ownerclassname":"net.sourceforge.ganttproject.GanttProject$ExportFileInfo", "sourcecode":"public ExportFileInfo(File file, int format, GanttExportSettings options) {\r\n    myFile = file;\r\n    myFormat = format;\r\n    myStorageOptions = options;\r\n}"},
 {"id":596, "name":"getFileExtension()", "fullmethod":"net.sourceforge.ganttproject.GanttProject$ExportFileInfo.getFileExtension()", "ownerclassid":"51", "ownerclassname":"net.sourceforge.ganttproject.GanttProject$ExportFileInfo", "sourcecode":"public String getFileExtension() {\r\n    return GanttProject.ExportFileInfo.FILE_EXTENSIONS[myFormat];\r\n}"},
 {"id":597, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttProject$ParserFactoryImpl.-init-()", "ownerclassid":"52", "ownerclassname":"net.sourceforge.ganttproject.GanttProject$ParserFactoryImpl", "sourcecode":"ParserFactoryImpl() {\r\n}"},
 {"id":598, "name":"newParser()", "fullmethod":"net.sourceforge.ganttproject.GanttProject$ParserFactoryImpl.newParser()", "ownerclassid":"52", "ownerclassname":"net.sourceforge.ganttproject.GanttProject$ParserFactoryImpl", "sourcecode":"public GPParser newParser() {\r\n    return new GanttXMLOpen(prjInfos, getUIConfiguration(), getTaskManager(), getUIFacade());\r\n}"},
 {"id":599, "name":"newSaver()", "fullmethod":"net.sourceforge.ganttproject.GanttProject$ParserFactoryImpl.newSaver()", "ownerclassid":"52", "ownerclassname":"net.sourceforge.ganttproject.GanttProject$ParserFactoryImpl", "sourcecode":"public GPSaver newSaver() {\r\n    return new GanttXMLSaver(this, ((GanttTree2) (getTree())), getResourcePanel(), getArea(), getUIFacade());\r\n}"},
 {"id":600, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.-init-()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"protected GanttProjectBase() {\r\n    super(\"Gantt Chart\");\r\n    statusBar = new GanttStatusBar(this);\r\n    myTabPane = new GanttTabbedPane();\r\n    myViewManager = new GanttProjectBase.ViewManagerImpl(myTabPane);\r\n    addProjectEventListener(myViewManager);\r\n    myTimeUnitStack = new GPTimeUnitStack(getLanguage());\r\n    myUIFacade = new UIFacadeImpl(this, statusBar, getProject(), ((UIFacade) (this)));\r\n    GPLogger.setUIFacade(myUIFacade);\r\n    myDocumentManager = new DocumentCreator(this, getUIFacade(), null) {\r\n        protected ParserFactory getParserFactory() {\r\n            return GanttProjectBase.this.getParserFactory();\r\n        }\r\n\r\n        protected TableHeaderUIFacade getVisibleFields() {\r\n            return getUIFacade().getTaskTree().getVisibleFields();\r\n        }\r\n    };\r\n    myUndoManager = new UndoManagerImpl(((IGanttProject) (this)), null, myDocumentManager) {\r\n        protected ParserFactory getParserFactory() {\r\n            return GanttProjectBase.this.getParserFactory();\r\n        }\r\n    };\r\n    Mediator.registerUndoManager(myUndoManager);\r\n    myProjectUIFacade = new ProjectUIFacadeImpl(myUIFacade, myDocumentManager, myUndoManager);\r\n    myTaskCustomColumnStorage = new CustomColumnsStorage();\r\n    myTaskCustomColumnManager = new CustomColumnsManager(myTaskCustomColumnStorage);\r\n}"},
 {"id":601, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"1( $anonymous0,  $anonymous1,  $anonymous2) {\r\n}"},
 {"id":602, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.parser.ParserFactory,net.sourceforge.ganttproject.document.DocumentManager)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.parser.ParserFactory,net.sourceforge.ganttproject.document.DocumentManager)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"2( $anonymous0,  $anonymous1,  $anonymous2) {\r\n}"},
 {"id":603, "name":"-init-(net.sourceforge.ganttproject.gui.GanttTabbedPane)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.-init-(net.sourceforge.ganttproject.gui.GanttTabbedPane)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"ViewManagerImpl(GanttTabbedPane tabs) {\r\n    myTabs = tabs;\r\n    myTabs.addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent e) {\r\n            GanttProjectBase.GPViewImpl selectedView = ((GanttProjectBase.GPViewImpl) (myTabs.getSelectedUserObject()));\r\n            if ((mySelectedView) == selectedView) {\r\n                return;\r\n            }\r\n            if ((mySelectedView) != null) {\r\n                mySelectedView.setActive(false);\r\n            }\r\n            mySelectedView = selectedView;\r\n            mySelectedView.setActive(true);\r\n        }\r\n    });\r\n}"},
 {"id":604, "name":"-init-(net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl,net.sourceforge.ganttproject.gui.GanttTabbedPane,java.awt.Container,net.sourceforge.ganttproject.chart.Chart,javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.-init-(net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl,net.sourceforge.ganttproject.gui.GanttTabbedPane,java.awt.Container,net.sourceforge.ganttproject.chart.Chart,javax.swing.Icon)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"GPViewImpl(GanttProjectBase.ViewManagerImpl manager, GanttTabbedPane tabs, Container component, Chart chart, Icon icon) {\r\n    myManager = manager;\r\n    myTabs = tabs;\r\n    myComponent = component;\r\n    myIcon = icon;\r\n    myChart = chart;\r\n    assert (myChart) != null;\r\n}"},
 {"id":605, "name":"-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.chart.ChartModelImpl)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.chart.ChartModelImpl)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"// TODO: 1.12 refactor and get rid of using concrete implementations of\r\n// gantt view model\r\n// and tree view\r\npublic RowHeightAligner(GanttTree2 treeView, ChartModelImpl ganttViewModel) {\r\n    myGanttViewModel = ganttViewModel;\r\n    myTreeView = treeView;\r\n}"},
 {"id":606, "name":"addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void addProjectEventListener(ProjectEventListener listener) {\r\n    myModifiedStateChangeListeners.add(listener);\r\n}"},
 {"id":607, "name":"close()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.close()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract void close();"},
 {"id":608, "name":"fireProjectClosed()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.fireProjectClosed()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"protected void fireProjectClosed() {\r\n    for (int i = 0; i < (myModifiedStateChangeListeners.size()); i++) {\r\n        ProjectEventListener next = ((ProjectEventListener) (myModifiedStateChangeListeners.get(i)));\r\n        next.projectClosed();\r\n    }\r\n}"},
 {"id":609, "name":"fireProjectModified(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.fireProjectModified(boolean)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"protected void fireProjectModified(boolean isModified) {\r\n    for (int i = 0; i < (myModifiedStateChangeListeners.size()); i++) {\r\n        ProjectEventListener next = ((ProjectEventListener) (myModifiedStateChangeListeners.get(i)));\r\n        try {\r\n            if (isModified) {\r\n                next.projectModified();\r\n            } else {\r\n                next.projectSaved();\r\n            }\r\n        } catch (Exception e) {\r\n            showErrorDialog(e);\r\n        }\r\n    }\r\n}"},
 {"id":610, "name":"getActiveCalendar()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getActiveCalendar()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract GPCalendar getActiveCalendar();"},
 {"id":611, "name":"getActiveChart()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getActiveChart()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public Chart getActiveChart() {\r\n    GanttProjectBase.GPViewImpl activeView = myViewManager.mySelectedView;\r\n    return activeView.myChart;\r\n    // Chart resourcesChart = getResourceChart();\r\n    // Chart ganttChart = getGanttChart();\r\n    // Chart visibleChart = (getTabs().getSelectedIndex() == UIFacade.RESOURCES_INDEX) ? resourcesChart\r\n    // : ganttChart;\r\n    // return visibleChart;\r\n}"},
 {"id":612, "name":"getCustomColumnsStorage()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getCustomColumnsStorage()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public CustomColumnsStorage getCustomColumnsStorage() {\r\n    return myTaskCustomColumnStorage;\r\n}"},
 {"id":613, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getDescription()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract String getDescription();"},
 {"id":614, "name":"getDocument()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getDocument()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract Document getDocument();"},
 {"id":615, "name":"getDocumentManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getDocumentManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public DocumentManager getDocumentManager() {\r\n    return myDocumentManager;\r\n}"},
 {"id":616, "name":"getHumanResourceManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getHumanResourceManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract ResourceManager getHumanResourceManager();"},
 {"id":617, "name":"getI18n()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getI18n()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract GanttLanguage getI18n();"},
 {"id":618, "name":"getLanguage()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getLanguage()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"private GanttLanguage getLanguage() {\r\n    return GanttLanguage.getInstance();\r\n}"},
 {"id":619, "name":"getMainFrame()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getMainFrame()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public Frame getMainFrame() {\r\n    return myUIFacade.getMainFrame();\r\n}"},
 {"id":620, "name":"getOrganization()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getOrganization()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract String getOrganization();"},
 {"id":621, "name":"getParserFactory()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getParserFactory()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"protected abstract ParserFactory getParserFactory();"},
 {"id":622, "name":"getProject()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getProject()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"protected IGanttProject getProject() {\r\n    return this;\r\n}"},
 {"id":623, "name":"getProjectName()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getProjectName()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract String getProjectName();"},
 {"id":624, "name":"getProjectUIFacade()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getProjectUIFacade()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"// ////////////////////////////////////////////////////////////////\r\n// UIFacade\r\npublic ProjectUIFacade getProjectUIFacade() {\r\n    return myProjectUIFacade;\r\n}"},
 {"id":625, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getRoleManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract RoleManager getRoleManager();"},
 {"id":626, "name":"getScrollingManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getScrollingManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public ScrollingManager getScrollingManager() {\r\n    return myUIFacade.getScrollingManager();\r\n}"},
 {"id":627, "name":"getStatusBar()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getStatusBar()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"protected GanttStatusBar getStatusBar() {\r\n    return statusBar;\r\n}"},
 {"id":628, "name":"getTabs()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getTabs()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public GanttTabbedPane getTabs() {\r\n    return myTabPane;\r\n}"},
 {"id":629, "name":"getTaskContainment()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getTaskContainment()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract TaskContainmentHierarchyFacade getTaskContainment();"},
 {"id":630, "name":"getTaskCustomColumnManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getTaskCustomColumnManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public CustomColumnsManager getTaskCustomColumnManager() {\r\n    return myTaskCustomColumnManager;\r\n}"},
 {"id":631, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getTaskManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract TaskManager getTaskManager();"},
 {"id":632, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getTimeUnitStack()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public TimeUnitStack getTimeUnitStack() {\r\n    return myTimeUnitStack;\r\n}"},
 {"id":633, "name":"getUIConfiguration()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getUIConfiguration()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract UIConfiguration getUIConfiguration();"},
 {"id":634, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getUIFacade()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":635, "name":"getUndoManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getUndoManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public GPUndoManager getUndoManager() {\r\n    return myUndoManager;\r\n}"},
 {"id":636, "name":"getViewManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getViewManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"protected GPViewManager getViewManager() {\r\n    return myViewManager;\r\n}"},
 {"id":637, "name":"getWebLink()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getWebLink()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract String getWebLink();"},
 {"id":638, "name":"getZoomManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.getZoomManager()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public ZoomManager getZoomManager() {\r\n    return myUIFacade.getZoomManager();\r\n}"},
 {"id":639, "name":"logErrorMessage(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.logErrorMessage(java.lang.Throwable)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void logErrorMessage(Throwable e) {\r\n    myUIFacade.logErrorMessage(e);\r\n}"},
 {"id":640, "name":"newTask()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.newTask()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract Task newTask();"},
 {"id":641, "name":"removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void removeProjectEventListener(ProjectEventListener listener) {\r\n    myModifiedStateChangeListeners.remove(listener);\r\n}"},
 {"id":642, "name":"setDescription(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.setDescription(java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract void setDescription(String description);"},
 {"id":643, "name":"setModified()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.setModified()", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract void setModified();"},
 {"id":644, "name":"setOrganization(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.setOrganization(java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract void setOrganization(String organization);"},
 {"id":645, "name":"setProjectName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.setProjectName(java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract void setProjectName(String projectName);"},
 {"id":646, "name":"setStatusText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.setStatusText(java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void setStatusText(String text) {\r\n    myUIFacade.setStatusText(text);\r\n}"},
 {"id":647, "name":"setWebLink(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.setWebLink(java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public abstract void setWebLink(String webLink);"},
 {"id":648, "name":"setWorkbenchTitle(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.setWorkbenchTitle(java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"// public void changeWorkingDirectory(File directory) {\r\n// myUIFacade.changeWorkingDirectory(directory);\r\n// }\r\npublic void setWorkbenchTitle(String title) {\r\n    myUIFacade.setWorkbenchTitle(title);\r\n}"},
 {"id":649, "name":"showConfirmationDialog(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.showConfirmationDialog(java.lang.String,java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public UIFacade.Choice showConfirmationDialog(String message, String title) {\r\n    return myUIFacade.showConfirmationDialog(message, title);\r\n}"},
 {"id":650, "name":"showDialog(java.awt.Component,javax.swing.Action[])", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.showDialog(java.awt.Component,javax.swing.Action[])", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void showDialog(Component content, Action[] actions) {\r\n    myUIFacade.showDialog(content, actions);\r\n}"},
 {"id":651, "name":"showDialog(java.awt.Component,javax.swing.Action[],java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.showDialog(java.awt.Component,javax.swing.Action[],java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void showDialog(Component content, Action[] actions, String title) {\r\n    myUIFacade.showDialog(content, actions, title);\r\n}"},
 {"id":652, "name":"showErrorDialog(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.showErrorDialog(java.lang.String)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void showErrorDialog(String message) {\r\n    myUIFacade.showErrorDialog(message);\r\n}"},
 {"id":653, "name":"showErrorDialog(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.showErrorDialog(java.lang.Throwable)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void showErrorDialog(Throwable e) {\r\n    myUIFacade.showErrorDialog(e);\r\n}"},
 {"id":654, "name":"showPopupMenu(java.awt.Component,javax.swing.Action[],int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase.showPopupMenu(java.awt.Component,javax.swing.Action[],int,int)", "ownerclassid":"57", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase", "sourcecode":"public void showPopupMenu(Component invoker, Action[] actions, int x, int y) {\r\n    myUIFacade.showPopupMenu(invoker, actions, x, y);\r\n}"},
 {"id":655, "name":"-init-(net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl,net.sourceforge.ganttproject.gui.GanttTabbedPane,java.awt.Container,net.sourceforge.ganttproject.chart.Chart,javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.-init-(net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl,net.sourceforge.ganttproject.gui.GanttTabbedPane,java.awt.Container,net.sourceforge.ganttproject.chart.Chart,javax.swing.Icon)", "ownerclassid":"54", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "sourcecode":"GPViewImpl(GanttProjectBase.ViewManagerImpl manager, GanttTabbedPane tabs, Container component, Chart chart, Icon icon) {\r\n    myManager = manager;\r\n    myTabs = tabs;\r\n    myComponent = component;\r\n    myIcon = icon;\r\n    myChart = chart;\r\n    assert (myChart) != null;\r\n}"},
 {"id":656, "name":"isVisible()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.isVisible()", "ownerclassid":"54", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "sourcecode":"public boolean isVisible() {\r\n    return isVisible;\r\n}"},
 {"id":657, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.reset()", "ownerclassid":"54", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "sourcecode":"public void reset() {\r\n    myChart.reset();\r\n}"},
 {"id":658, "name":"selectionChanged()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.selectionChanged()", "ownerclassid":"54", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "sourcecode":"public void selectionChanged() {\r\n    myManager.updateActions();\r\n}"},
 {"id":659, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.setActive(boolean)", "ownerclassid":"54", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "sourcecode":"public void setActive(boolean active) {\r\n    if (active) {\r\n        myChart.addSelectionListener(this);\r\n    } else {\r\n        myChart.removeSelectionListener(this);\r\n    }\r\n}"},
 {"id":660, "name":"setVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.setVisible(boolean)", "ownerclassid":"54", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "sourcecode":"public void setVisible(boolean isVisible) {\r\n    String tabName = \"New view\";\r\n    JScrollPane jsp = new JScrollPane();\r\n    if (isVisible) {\r\n        myChart.setTaskManager(this.getTaskManager());\r\n        tabName = myChart.getName();\r\n        jsp.getViewport().add(myComponent);\r\n        myTabs.addTab(tabName, myIcon, jsp, tabName, this);\r\n        myTabs.setSelectedComponent(jsp);\r\n        myIndex = myTabs.getSelectedIndex();\r\n    } else {\r\n        myTabs.remove(myIndex);\r\n    }\r\n    this.isVisible = isVisible;\r\n}"},
 {"id":661, "name":"-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.chart.ChartModelImpl)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$RowHeightAligner.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.chart.ChartModelImpl)", "ownerclassid":"55", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$RowHeightAligner", "sourcecode":"// TODO: 1.12 refactor and get rid of using concrete implementations of\r\n// gantt view model\r\n// and tree view\r\npublic RowHeightAligner(GanttTree2 treeView, ChartModelImpl ganttViewModel) {\r\n    myGanttViewModel = ganttViewModel;\r\n    myTreeView = treeView;\r\n}"},
 {"id":662, "name":"optionsChanged()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$RowHeightAligner.optionsChanged()", "ownerclassid":"55", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$RowHeightAligner", "sourcecode":"public void optionsChanged() {\r\n    myTreeView.getTable().setRowHeight(myGanttViewModel.setRowHeight());\r\n    AbstractTableModel model = ((AbstractTableModel) (myTreeView.getTable().getModel()));\r\n    model.fireTableStructureChanged();\r\n    myTreeView.updateUI();\r\n}"},
 {"id":663, "name":"-init-(net.sourceforge.ganttproject.gui.GanttTabbedPane)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.-init-(net.sourceforge.ganttproject.gui.GanttTabbedPane)", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"ViewManagerImpl(GanttTabbedPane tabs) {\r\n    myTabs = tabs;\r\n    myTabs.addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent e) {\r\n            GanttProjectBase.GPViewImpl selectedView = ((GanttProjectBase.GPViewImpl) (myTabs.getSelectedUserObject()));\r\n            if ((mySelectedView) == selectedView) {\r\n                return;\r\n            }\r\n            if ((mySelectedView) != null) {\r\n                mySelectedView.setActive(false);\r\n            }\r\n            mySelectedView = selectedView;\r\n            mySelectedView.setActive(true);\r\n        }\r\n    });\r\n}"},
 {"id":664, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.-init-()", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"4() {\r\n}"},
 {"id":665, "name":"createView(org.eclipse.core.runtime.IAdaptable,javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.createView(org.eclipse.core.runtime.IAdaptable,javax.swing.Icon)", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"public GPView createView(IAdaptable adaptable, Icon icon) {\r\n    GPView view = new GanttProjectBase.GPViewImpl(this, myTabs, ((Container) (adaptable.getAdapter(Container.class))), ((Chart) (adaptable.getAdapter(Chart.class))), icon);\r\n    myViews.add(view);\r\n    return view;\r\n}"},
 {"id":666, "name":"getCopyAction()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.getCopyAction()", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"public Action getCopyAction() {\r\n    return myCopyAction;\r\n}"},
 {"id":667, "name":"getCutAction()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.getCutAction()", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"public Action getCutAction() {\r\n    return myCutAction;\r\n}"},
 {"id":668, "name":"getPasteAction()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.getPasteAction()", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"public Action getPasteAction() {\r\n    return myPasteAction;\r\n}"},
 {"id":669, "name":"projectClosed()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.projectClosed()", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"public void projectClosed() {\r\n    for (int i = 0; i < (myViews.size()); i++) {\r\n        GanttProjectBase.GPViewImpl nextView = ((GanttProjectBase.GPViewImpl) (myViews.get(i)));\r\n        nextView.reset();\r\n    }\r\n}"},
 {"id":670, "name":"projectModified()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.projectModified()", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"// //////////////////////////////////////////\r\n// ProjectEventListener\r\npublic void projectModified() {\r\n}"},
 {"id":671, "name":"projectSaved()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.projectSaved()", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"public void projectSaved() {\r\n}"},
 {"id":672, "name":"updateActions()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.updateActions()", "ownerclassid":"56", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "sourcecode":"private void updateActions() {\r\n    ChartSelection selection = mySelectedView.myChart.getSelection();\r\n    myCopyAction.setEnabled((false == (selection.isEmpty())));\r\n    myCutAction.setEnabled(((false == (selection.isEmpty())) && (selection.isDeletable().isOK())));\r\n}"},
 {"id":673, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.-init-()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public GanttProjectImpl() {\r\n    myResourceManager = new HumanResourceManager(net.sourceforge.ganttproject.roles.RoleManager.Access.getInstance().getDefaultRole());\r\n    myTaskManagerConfig = new GanttProjectImpl.TaskManagerConfigImpl(myResourceManager, GanttLanguage.getInstance());\r\n    myTaskManager = TaskManager.Access.newInstance(null, myTaskManagerConfig);\r\n    myUIConfiguration = new UIConfiguration(Fonts.DEFAULT_MENU_FONT, Fonts.DEFAULT_CHART_FONT, Color.BLUE, true);\r\n    myTaskCustomColumnStorage = new CustomColumnsStorage();\r\n    myTaskCustomColumnManager = new CustomColumnsManager(myTaskCustomColumnStorage);\r\n}"},
 {"id":674, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"private TaskManagerConfigImpl(ResourceManager resourceManager, GanttLanguage i18n) {\r\n    myResourceManager = resourceManager;\r\n    myTimeUnitStack = new GPTimeUnitStack(i18n);\r\n    myCalendar = new WeekendCalendarImpl();\r\n}"},
 {"id":675, "name":"addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void addProjectEventListener(ProjectEventListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":676, "name":"close()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.close()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void close() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":677, "name":"getActiveCalendar()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getActiveCalendar()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public GPCalendar getActiveCalendar() {\r\n    return myTaskManagerConfig.getCalendar();\r\n}"},
 {"id":678, "name":"getBaselines()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getBaselines()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public List getBaselines() {\r\n    return myBaselines;\r\n}"},
 {"id":679, "name":"getCustomColumnsStorage()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getCustomColumnsStorage()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public CustomColumnsStorage getCustomColumnsStorage() {\r\n    return myTaskCustomColumnStorage;\r\n}"},
 {"id":680, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getDescription()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public String getDescription() {\r\n    return myDescription;\r\n}"},
 {"id":681, "name":"getDocument()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getDocument()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public Document getDocument() {\r\n    return myDocument;\r\n}"},
 {"id":682, "name":"getDocumentManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getDocumentManager()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public DocumentManager getDocumentManager() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":683, "name":"getHumanResourceManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getHumanResourceManager()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public ResourceManager getHumanResourceManager() {\r\n    return myResourceManager;\r\n}"},
 {"id":684, "name":"getI18n()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getI18n()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public GanttLanguage getI18n() {\r\n    return GanttLanguage.getInstance();\r\n}"},
 {"id":685, "name":"getOrganization()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getOrganization()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public String getOrganization() {\r\n    return myOrganization;\r\n}"},
 {"id":686, "name":"getProjectName()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getProjectName()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public String getProjectName() {\r\n    return myProjectName;\r\n}"},
 {"id":687, "name":"getResourceCustomPropertyManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getResourceCustomPropertyManager()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public CustomPropertyManager getResourceCustomPropertyManager() {\r\n    return myResourceManager;\r\n}"},
 {"id":688, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getRoleManager()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public RoleManager getRoleManager() {\r\n    return RoleManager.Access.getInstance();\r\n}"},
 {"id":689, "name":"getTaskContainment()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getTaskContainment()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public TaskContainmentHierarchyFacade getTaskContainment() {\r\n    return getTaskManager().getTaskHierarchy();\r\n}"},
 {"id":690, "name":"getTaskCustomColumnManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getTaskCustomColumnManager()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public CustomColumnsManager getTaskCustomColumnManager() {\r\n    return myTaskCustomColumnManager;\r\n}"},
 {"id":691, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getTaskManager()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public TaskManager getTaskManager() {\r\n    return myTaskManager;\r\n}"},
 {"id":692, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getTimeUnitStack()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public TimeUnitStack getTimeUnitStack() {\r\n    return myTaskManagerConfig.getTimeUnitStack();\r\n}"},
 {"id":693, "name":"getUIConfiguration()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getUIConfiguration()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public UIConfiguration getUIConfiguration() {\r\n    return myUIConfiguration;\r\n}"},
 {"id":694, "name":"getWebLink()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.getWebLink()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public String getWebLink() {\r\n    return myWebLink;\r\n}"},
 {"id":695, "name":"isModified()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.isModified()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public boolean isModified() {\r\n    // TODO Auto-generated method stub\r\n    return false;\r\n}"},
 {"id":696, "name":"newTask()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.newTask()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public Task newTask() {\r\n    Task result = getTaskManager().createTask();\r\n    getTaskManager().getTaskHierarchy().move(result, getTaskManager().getRootTask());\r\n    return result;\r\n}"},
 {"id":697, "name":"open(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.open(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void open(Document document) throws IOException {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":698, "name":"removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void removeProjectEventListener(ProjectEventListener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":699, "name":"setDescription(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.setDescription(java.lang.String)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void setDescription(String description) {\r\n    myDescription = description;\r\n}"},
 {"id":700, "name":"setDocument(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.setDocument(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void setDocument(Document document) {\r\n    myDocument = document;\r\n}"},
 {"id":701, "name":"setModified()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.setModified()", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void setModified() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":702, "name":"setModified(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.setModified(boolean)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void setModified(boolean modified) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":703, "name":"setOrganization(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.setOrganization(java.lang.String)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void setOrganization(String organization) {\r\n    myOrganization = organization;\r\n}"},
 {"id":704, "name":"setProjectName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.setProjectName(java.lang.String)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void setProjectName(String projectName) {\r\n    myProjectName = projectName;\r\n}"},
 {"id":705, "name":"setWebLink(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl.setWebLink(java.lang.String)", "ownerclassid":"59", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl", "sourcecode":"public void setWebLink(String webLink) {\r\n    myWebLink = webLink;\r\n}"},
 {"id":706, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"58", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl", "sourcecode":"private TaskManagerConfigImpl(ResourceManager resourceManager, GanttLanguage i18n) {\r\n    myResourceManager = resourceManager;\r\n    myTimeUnitStack = new GPTimeUnitStack(i18n);\r\n    myCalendar = new WeekendCalendarImpl();\r\n}"},
 {"id":707, "name":"getCalendar()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl.getCalendar()", "ownerclassid":"58", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl", "sourcecode":"public GPCalendar getCalendar() {\r\n    return myCalendar;\r\n}"},
 {"id":708, "name":"getDefaultColor()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl.getDefaultColor()", "ownerclassid":"58", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl", "sourcecode":"public Color getDefaultColor() {\r\n    return Color.BLUE;\r\n}"},
 {"id":709, "name":"getProjectDocumentURL()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl.getProjectDocumentURL()", "ownerclassid":"58", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl", "sourcecode":"public URL getProjectDocumentURL() {\r\n    return null;\r\n}"},
 {"id":710, "name":"getResourceManager()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl.getResourceManager()", "ownerclassid":"58", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl", "sourcecode":"public ResourceManager getResourceManager() {\r\n    return myResourceManager;\r\n}"},
 {"id":711, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl.getTimeUnitStack()", "ownerclassid":"58", "ownerclassname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl", "sourcecode":"public TimeUnitStack getTimeUnitStack() {\r\n    return myTimeUnitStack;\r\n}"},
 {"id":712, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.-init-()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"1() {\r\n}"},
 {"id":713, "name":"-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public GanttResourcePanel(final GanttProject prj, GanttTree2 tree, UIFacade uiFacade) {\r\n    super();\r\n    myUIFacade = uiFacade;\r\n    myDeleteAssignmentAction = new DeleteAssignmentAction(prj.getProject().getHumanResourceManager(), ((AssignmentContext) (this)), prj);\r\n    prj.addProjectEventListener(this);\r\n    appli = prj;\r\n    model = new ResourceTreeTableModel(appli.getHumanResourceManager(), prj.getTaskManager());\r\n    table = new ResourceTreeTable(appli.getProject(), model);\r\n    setLayout(new BorderLayout());\r\n    GanttImagePanel but = new GanttImagePanel(\"big.png\", 300, 42);\r\n    myImagePanel = but;\r\n    left = new JPanel(new BorderLayout());\r\n    table.setRowHeight(20);\r\n    left.add(but, \"North\");\r\n    left.setBackground(new Color(102, 153, 153));\r\n    scrollpane = new JScrollPane();\r\n    setLayout(new BorderLayout());\r\n    add(scrollpane, BorderLayout.CENTER);\r\n    scrollpane.getViewport().add(table);\r\n    scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\r\n    vbar = table.getVerticalScrollBar();\r\n    final JPanel jp = new JPanel(new BorderLayout());\r\n    jp.add(vbar, BorderLayout.CENTER);\r\n    // jp.setBorder(BorderFactory.createEmptyBorder(2,1,2,0));\r\n    // jp.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));\r\n    jp.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));\r\n    jp.setVisible(false);\r\n    vbar.addAdjustmentListener(new AdjustmentListener() {\r\n        public void adjustmentValueChanged(AdjustmentEvent e) {\r\n            if (((table.getSize().getHeight()) - 20) < (e.getAdjustable().getMaximum()))\r\n                jp.setVisible(true);\r\n            else\r\n                jp.setVisible(false);\r\n\r\n            repaint();\r\n        }\r\n    });\r\n    left.add(jp, BorderLayout.WEST);\r\n    vbar.addAdjustmentListener(new GanttResourcePanel.GanttAdjustmentListener());\r\n    left.add(scrollpane, \"Center\");\r\n    // A splitpane is use\r\n    mySplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\r\n    area = new ResourceLoadGraphicArea(prj, prj.getZoomManager()) {\r\n        protected int getHeaderHeight() {\r\n            return (myImagePanel.getHeight()) + (table.getTable().getTableHeader().getHeight());\r\n        }\r\n\r\n        public boolean isExpanded(ProjectResource pr) {\r\n            return getResourceTreeTable().isExpanded(pr);\r\n        }\r\n\r\n        protected int getRowHeight() {\r\n            return table.getRowHeight();\r\n        }\r\n    };\r\n    prj.getZoomManager().addZoomListener(area.getZoomListener());\r\n    area.getChartModel().setRowHeight(table.getRowHeight());\r\n    if ((lang.getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT)) {\r\n        mySplitPane.setLeftComponent(left);\r\n        mySplitPane.setRightComponent(area);\r\n    } else {\r\n        mySplitPane.setRightComponent(left);\r\n        mySplitPane.setLeftComponent(area);\r\n        mySplitPane.setDividerLocation(((int) ((Toolkit.getDefaultToolkit().getScreenSize().getWidth()) - (left.getPreferredSize().getWidth()))));\r\n    }\r\n    mySplitPane.setOneTouchExpandable(true);\r\n    mySplitPane.setPreferredSize(new Dimension(800, 500));\r\n    add(mySplitPane, BorderLayout.CENTER);\r\n    scrollpane.getViewport().setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    left.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    table.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n    this.setBackground(new Color(0.0F, 0.0F, 0.0F));\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n    table.addKeyListener(prj);// callback for keyboard pressed\r\n\r\n    // Add listener for mouse click\r\n    MouseListener ml = new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            TreePath selPath = table.getTreeTable().getPathForLocation(e.getX(), e.getY());\r\n            table.getTreeTable().getTree().setSelectionPath(selPath);\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseReleased(MouseEvent e) {\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseClicked(MouseEvent e) {\r\n            e.consume();\r\n            if (((e.getClickCount()) == 2) && ((e.getButton()) == (MouseEvent.BUTTON1))) {\r\n                handleDoubleClick(e);\r\n            } else {\r\n                handlePopupTrigger(e);\r\n            }\r\n        }\r\n    };\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK), \"properties\");\r\n    table.getActionMap().put(\"properties\", myPropertiesAction);\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), \"delete\");\r\n    table.getActionMap().put(\"delete\", myDeleteAssignmentAction);\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(GPAction.getKeyStroke(\"newArtifact.shortcut\"), \"newHuman\");\r\n    table.getActionMap().put(\"newHuman\", new AbstractAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            prj.newHumanResource();\r\n        }\r\n    });\r\n    if (!(prj.isOnlyViewer)) {\r\n        table.addMouseListener(ml);\r\n        table.getTreeTable().getParent().addMouseListener(ml);\r\n    }\r\n    myResourcePropertiesAction = new ResourcePropertiesAction(prj.getProject(), prj.getUIFacade());\r\n    myContextListener = new ListSelectionListener() {\r\n        public void valueChanged(ListSelectionEvent e) {\r\n            myResourcePropertiesAction.setContext(getContext());\r\n        }\r\n    };\r\n    table.getTable().getSelectionModel().addListSelectionListener(myContextListener);\r\n}"},
 {"id":714, "name":"-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"5( $anonymous0,  $anonymous1) {\r\n}"},
 {"id":715, "name":"copySelection()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.copySelection()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void copySelection() {\r\n    this.saveSelectionToClipboard(false);\r\n    this.isCut = false;\r\n}"},
 {"id":716, "name":"createPopupMenu(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.createPopupMenu(java.awt.event.MouseEvent)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/* Create the popup menu */\r\nprivate void createPopupMenu(MouseEvent e) {\r\n    JPopupMenu menu = new JPopupMenu();\r\n    AbstractAction[] resourceActions = myResourceActionSet.getActions();\r\n    menu.add(resourceActions[0]);\r\n    if ((table.getSelectedNodes().length) == 1) {\r\n        menu.add(myResourcePropertiesAction);\r\n        for (int i = 1; i < (resourceActions.length); i++) {\r\n            menu.add(resourceActions[i]);\r\n        }\r\n        menu.add(appli.createNewItem(GanttProject.correctLabel(lang.getText(\"sendMail\")), \"/icons/send_mail_16.gif\"));\r\n        menu.addSeparator();\r\n        menu.add(myMoveUpAction);\r\n        menu.add(myMoveDownAction);\r\n        menu.addSeparator();\r\n        menu.add(appli.getCutAction());\r\n        menu.add(appli.getCopyAction());\r\n        menu.add(appli.getPasteAction());\r\n    }\r\n    menu.applyComponentOrientation(lang.getComponentOrientation());\r\n    Point popupPoint = getPopupMenuPoint(e);\r\n    menu.show(this, popupPoint.x, popupPoint.y);\r\n}"},
 {"id":717, "name":"cutSelection()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.cutSelection()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void cutSelection() {\r\n    this.saveSelectionToClipboard(true);\r\n    this.isCut = true;\r\n}"},
 {"id":718, "name":"downResource()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.downResource()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/**\r\n * Move down the selected resource\r\n */\r\nprivate void downResource() {\r\n    table.downResource();\r\n}"},
 {"id":719, "name":"getContext()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getContext()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public ResourceContext getContext() {\r\n    return myContext;\r\n}"},
 {"id":720, "name":"getDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getDividerLocation()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public int getDividerLocation() {\r\n    return mySplitPane.getDividerLocation();\r\n}"},
 {"id":721, "name":"getMoveDownAction()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getMoveDownAction()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public Action getMoveDownAction() {\r\n    return myMoveDownAction;\r\n}"},
 {"id":722, "name":"getMoveUpAction()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getMoveUpAction()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public Action getMoveUpAction() {\r\n    return myMoveUpAction;\r\n}"},
 {"id":723, "name":"getPeople()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getPeople()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/**\r\n * Return the list of the person\r\n */\r\npublic List getPeople() {\r\n    return model.getAllResouces();\r\n}"},
 {"id":724, "name":"getPopupMenuPoint(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getPopupMenuPoint(java.awt.event.MouseEvent)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"private Point getPopupMenuPoint(MouseEvent popupTriggerEvent) {\r\n    final int x = ((popupTriggerEvent.getX()) - (scrollpane.getHorizontalScrollBar().getValue())) + (vbar.isVisible() ? vbar.getWidth() : 0);\r\n    final int y = ((popupTriggerEvent.getY()) + (table.getRowHeight())) + (+(myImagePanel.getHeight()));\r\n    return new Point(x, y);\r\n}"},
 {"id":725, "name":"getResourceAssignments()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getResourceAssignments()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public ResourceAssignment[] getResourceAssignments() {\r\n    ResourceAssignment[] res = null;\r\n    DefaultMutableTreeNode[] tNodes = table.getSelectedNodes();\r\n    if (tNodes != null) {\r\n        int nbAssign = 0;\r\n        for (int i = 0; i < (tNodes.length); i++)\r\n            if ((tNodes[i]) instanceof AssignmentNode)\r\n                nbAssign++;\r\n\r\n\r\n        res = new ResourceAssignment[nbAssign];\r\n        for (int i = 0; i < nbAssign; i++)\r\n            if ((tNodes[i]) instanceof AssignmentNode)\r\n                res[i] = ((ResourceAssignment) (((AssignmentNode) (tNodes[i])).getUserObject()));\r\n\r\n\r\n    }\r\n    return res;\r\n}"},
 {"id":726, "name":"getResourcePropertiesAction()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getResourcePropertiesAction()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public Action getResourcePropertiesAction() {\r\n    return myResourcePropertiesAction;\r\n}"},
 {"id":727, "name":"getResourceTreeTable()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getResourceTreeTable()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public ResourceTreeTable getResourceTreeTable() {\r\n    return table;\r\n}"},
 {"id":728, "name":"getResourceTreeTableModel()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getResourceTreeTableModel()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public ResourceTreeTableModel getResourceTreeTableModel() {\r\n    return model;\r\n}"},
 {"id":729, "name":"getResources()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getResources()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"// //////////////////////////////////////////////////////////////////////////\r\n// ResourceContext interface\r\npublic ProjectResource[] getResources() {\r\n    // ProjectResource[] res;\r\n    // List allRes = model.getAllResouces();\r\n    // res = new ProjectResource[allRes.size()];\r\n    // model.getAllResouces().toArray(res);\r\n    // return res;\r\n    ProjectResource[] res;\r\n    DefaultMutableTreeNode[] tNodes = table.getSelectedNodes();\r\n    if (tNodes == null) {\r\n        return new ProjectResource[0];\r\n    }\r\n    int nbProjectResource = 0;\r\n    for (int i = 0; i < (tNodes.length); i++)\r\n        if ((tNodes[i]) instanceof ResourceNode)\r\n            nbProjectResource++;\r\n\r\n\r\n    res = new ProjectResource[nbProjectResource];\r\n    for (int i = 0; i < nbProjectResource; i++)\r\n        if ((tNodes[i]) instanceof ResourceNode)\r\n            res[i] = ((ProjectResource) (((ResourceNode) (tNodes[i])).getUserObject()));\r\n\r\n\r\n    return res;\r\n}"},
 {"id":730, "name":"getTaskPropertiesAction()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getTaskPropertiesAction()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"private Action getTaskPropertiesAction() {\r\n    return myTaskPropertiesAction;\r\n}"},
 {"id":731, "name":"getUIComponent()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getUIComponent()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public Component getUIComponent() {\r\n    return this;\r\n}"},
 {"id":732, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getUIFacade()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"private UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":733, "name":"getVisibleFields()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.getVisibleFields()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public TableHeaderUIFacade getVisibleFields() {\r\n    return table.getVisibleFields();\r\n}"},
 {"id":734, "name":"handleDoubleClick(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.handleDoubleClick(java.awt.event.MouseEvent)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"private void handleDoubleClick(MouseEvent e) {\r\n    myPropertiesAction.actionPerformed(null);\r\n}"},
 {"id":735, "name":"handlePopupTrigger(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.handlePopupTrigger(java.awt.event.MouseEvent)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"private void handlePopupTrigger(MouseEvent e) {\r\n    if ((e.isPopupTrigger()) || ((e.getButton()) == (MouseEvent.BUTTON3))) {\r\n        DefaultMutableTreeNode[] selectedNodes = table.getSelectedNodes();\r\n        if (((selectedNodes.length) == 1) && ((selectedNodes[0]) instanceof AssignmentNode)) {\r\n            AssignmentNode assignmentNode = ((AssignmentNode) (selectedNodes[0]));\r\n            Mediator.getTaskSelectionManager().clear();\r\n            Mediator.getTaskSelectionManager().addTask(assignmentNode.getTask());\r\n            Point popupPoint = getPopupMenuPoint(e);\r\n            getUIFacade().showPopupMenu(this, new Action[]{ getTaskPropertiesAction(), myDeleteAssignmentAction }, popupPoint.x, popupPoint.y);\r\n        } else {\r\n            createPopupMenu(e);\r\n        }\r\n    }\r\n}"},
 {"id":736, "name":"nbPeople()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.nbPeople()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/**\r\n * Return the number of people on the list\r\n */\r\npublic int nbPeople() {\r\n    return model.getAllResouces().size();\r\n}"},
 {"id":737, "name":"newHuman(net.sourceforge.ganttproject.resource.HumanResource)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.newHuman(net.sourceforge.ganttproject.resource.HumanResource)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/**\r\n * Create a new Human\r\n */\r\npublic void newHuman(HumanResource people) {\r\n    if (people != null) {\r\n        DefaultMutableTreeNode result = model.addResource(people);\r\n        table.getTree().scrollPathToVisible(new TreePath(result.getPath()));\r\n    }\r\n}"},
 {"id":738, "name":"pasteSelection()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.pasteSelection()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void pasteSelection() {\r\n    if ((this.clipboard) == null)\r\n        return;\r\n\r\n    for (int i = 0; i < (this.clipboard.length); i++) {\r\n        if (this.isCut) {\r\n            this.appli.getHumanResourceManager().add(this.clipboard[i]);\r\n        } else {\r\n            this.appli.getHumanResourceManager().add(clipboard[i].unpluggedClone());\r\n        }\r\n    }\r\n    /* if the selection was cut, we clear the clipboard after pasting */\r\n    if (this.isCut) {\r\n        this.isCut = false;\r\n    }\r\n}"},
 {"id":739, "name":"projectClosed()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.projectClosed()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void projectClosed() {\r\n    area.repaint();\r\n    reset();\r\n}"},
 {"id":740, "name":"projectModified()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.projectModified()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void projectModified() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":741, "name":"projectSaved()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.projectSaved()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void projectSaved() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":742, "name":"refresh(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.refresh(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/**\r\n * Function called when the language is changed\r\n */\r\npublic void refresh(GanttLanguage language) {\r\n    lang = language;\r\n    model.changeLanguage(lang);\r\n}"},
 {"id":743, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.reset()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/**\r\n * Reset all human...\r\n */\r\npublic void reset() {\r\n    model.reset();\r\n}"},
 {"id":744, "name":"resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void resourceAdded(ResourceEvent event) {\r\n    newHuman(((HumanResource) (event.getResource())));\r\n}"},
 {"id":745, "name":"resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void resourceAssignmentsChanged(ResourceEvent e) {\r\n    model.resourceAssignmentsChanged(e.getResources());\r\n}"},
 {"id":746, "name":"resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void resourceChanged(ResourceEvent e) {\r\n    model.resourceChanged(e.getResource());\r\n    ((HumanResource) (e.getResource())).resetLoads();\r\n    repaint();\r\n}"},
 {"id":747, "name":"resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void resourcesRemoved(ResourceEvent event) {\r\n    table.getTable().editingStopped(new ChangeEvent(table.getTable()));\r\n    model.deleteResources(event.getResources());\r\n}"},
 {"id":748, "name":"saveSelectionToClipboard(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.saveSelectionToClipboard(boolean)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void saveSelectionToClipboard(boolean cut) {\r\n    DefaultMutableTreeNode[] selectedNodes = this.table.getSelectedNodes();\r\n    if (selectedNodes == null)\r\n        return;\r\n\r\n    /* count instances of ResourceNode */\r\n    int count = 0;\r\n    for (int i = 0; i < (selectedNodes.length); i++) {\r\n        if ((selectedNodes[i]) instanceof ResourceNode) {\r\n            count++;\r\n        }\r\n    }\r\n    this.clipboard = new ProjectResource[count];\r\n    int index = 0;\r\n    for (int i = 0; i < (selectedNodes.length); i++) {\r\n        if ((selectedNodes[i]) instanceof ResourceNode) {\r\n            ResourceNode rn = ((ResourceNode) (selectedNodes[i]));\r\n            this.clipboard[index] = ((HumanResource) (rn.getUserObject()));\r\n            if (cut) {\r\n                this.appli.getHumanResourceManager().remove(this.clipboard[index], this.appli.getUndoManager());\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n}"},
 {"id":749, "name":"sendMail(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.sendMail(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/**\r\n * Send an Email to the current resource\r\n */\r\npublic void sendMail(GanttProject parent) {\r\n    if ((((table) != null) && ((table.getSelectedNodes()) != null)) && ((table.getSelectedNodes().length) > 0)) {\r\n        HumanResource people = ((HumanResource) (table.getSelectedNodes()[0].getUserObject()));\r\n        if (people != null) {\r\n            try {\r\n                BrowserControl.displayURL((\"mailto:\" + (people.getMail())));\r\n            } catch (Exception e) {\r\n                System.err.println(e);\r\n            }\r\n        }\r\n    } else {\r\n        GanttDialogInfo gdi = new GanttDialogInfo(appli, GanttDialogInfo.INFO, GanttDialogInfo.YES_OPTION, GanttLanguage.getInstance().getText(\"msg26\"), GanttLanguage.getInstance().getText(\"sendMail\"));\r\n        gdi.show();\r\n    }\r\n}"},
 {"id":750, "name":"setActions()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.setActions()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void setActions() {\r\n    table.setAction(appli.getCopyAction());\r\n    table.setAction(appli.getPasteAction());\r\n    table.setAction(appli.getCutAction());\r\n}"},
 {"id":751, "name":"setDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.setDividerLocation(int)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void setDividerLocation(int location) {\r\n    mySplitPane.setDividerLocation(location);\r\n}"},
 {"id":752, "name":"setResourceActions(net.sourceforge.ganttproject.action.ResourceActionSet)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.setResourceActions(net.sourceforge.ganttproject.action.ResourceActionSet)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"public void setResourceActions(ResourceActionSet actionSet) {\r\n    myResourceActionSet = actionSet;\r\n}"},
 {"id":753, "name":"setTaskPropertiesAction(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.setTaskPropertiesAction(javax.swing.Action)", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"void setTaskPropertiesAction(Action action) {\r\n    myTaskPropertiesAction = action;\r\n}"},
 {"id":754, "name":"upResource()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel.upResource()", "ownerclassid":"61", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel", "sourcecode":"/**\r\n * Move up the selected resource\r\n */\r\nprivate void upResource() {\r\n    table.upResource();\r\n}"},
 {"id":755, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel$GanttAdjustmentListener.-init-()", "ownerclassid":"60", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel$GanttAdjustmentListener", "sourcecode":"GanttAdjustmentListener() {\r\n}"},
 {"id":756, "name":"adjustmentValueChanged(java.awt.event.AdjustmentEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttResourcePanel$GanttAdjustmentListener.adjustmentValueChanged(java.awt.event.AdjustmentEvent)", "ownerclassid":"60", "ownerclassname":"net.sourceforge.ganttproject.GanttResourcePanel$GanttAdjustmentListener", "sourcecode":"public void adjustmentValueChanged(AdjustmentEvent e) {\r\n    if ((area) != null) {\r\n        area.setScrollBar(e.getValue());\r\n        area.repaint();\r\n    }\r\n}"},
 {"id":757, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttSplash.-init-()", "ownerclassid":"62", "ownerclassname":"net.sourceforge.ganttproject.GanttSplash", "sourcecode":"public GanttSplash() {\r\n    super(\"GanttProject Start\");\r\n    ImageIcon splashImage = new ImageIcon(getClass().getResource(\"/icons/splash.png\"));\r\n    mySplashComponent = new JLabel(splashImage) {\r\n        public void paint(Graphics g) {\r\n            super.paint(g);\r\n            Graphics2D g2 = ((Graphics2D) (g));\r\n            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n            Font font = Fonts.SPLASH_FONT;\r\n            g2.setFont(font);\r\n            int textLength = TextLengthCalculatorImpl.getTextLength(g, GanttProject.version);\r\n            drawTextWithShadow(g2, GPVersion.V2_0_X, ((int) (((getSize().getWidth()) - textLength) - 9)), 287);\r\n            drawTextWithShadow(g2, \"ganttproject.biz\", 40, 287);\r\n        }\r\n    };\r\n}"},
 {"id":758, "name":"-init-(javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.GanttSplash.-init-(javax.swing.Icon)", "ownerclassid":"62", "ownerclassname":"net.sourceforge.ganttproject.GanttSplash", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":759, "name":"close()", "fullmethod":"net.sourceforge.ganttproject.GanttSplash.close()", "ownerclassid":"62", "ownerclassname":"net.sourceforge.ganttproject.GanttSplash", "sourcecode":"public void close() {\r\n    setVisible(false);\r\n    dispose();\r\n}"},
 {"id":760, "name":"drawTextWithShadow(java.awt.Graphics2D,java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttSplash.drawTextWithShadow(java.awt.Graphics2D,java.lang.String,int,int)", "ownerclassid":"62", "ownerclassname":"net.sourceforge.ganttproject.GanttSplash", "sourcecode":"private void drawTextWithShadow(Graphics2D graphics, String text, int xpos, int ypos) {\r\n    graphics.setColor(Color.white);\r\n    graphics.drawString(text, xpos, ypos);\r\n}"},
 {"id":761, "name":"frameInit()", "fullmethod":"net.sourceforge.ganttproject.GanttSplash.frameInit()", "ownerclassid":"62", "ownerclassname":"net.sourceforge.ganttproject.GanttSplash", "sourcecode":"protected void frameInit() {\r\n    super.frameInit();\r\n    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/ganttproject.png\"));\r\n    setIconImage(icon.getImage());// set the ganttproject icon\r\n\r\n    setUndecorated(true);\r\n}"},
 {"id":762, "name":"getSplashComponent()", "fullmethod":"net.sourceforge.ganttproject.GanttSplash.getSplashComponent()", "ownerclassid":"62", "ownerclassname":"net.sourceforge.ganttproject.GanttSplash", "sourcecode":"public JLabel getSplashComponent() {\r\n    return mySplashComponent;\r\n}"},
 {"id":763, "name":"setVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttSplash.setVisible(boolean)", "ownerclassid":"62", "ownerclassname":"net.sourceforge.ganttproject.GanttSplash", "sourcecode":"public void setVisible(boolean b) {\r\n    if (b) {\r\n        getContentPane().add(mySplashComponent, BorderLayout.CENTER);\r\n        pack();\r\n        DialogAligner.center(this);\r\n    }\r\n    super.setVisible(b);\r\n}"},
 {"id":764, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.GanttCalendar,long,net.sourceforge.ganttproject.task.TaskManager,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTask.-init-(java.lang.String,net.sourceforge.ganttproject.GanttCalendar,long,net.sourceforge.ganttproject.task.TaskManager,int)", "ownerclassid":"63", "ownerclassname":"net.sourceforge.ganttproject.GanttTask", "sourcecode":"// ///////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * Constructor\r\n *\r\n * @param taskID\r\n * \t\t\r\n */\r\npublic GanttTask(String name, GanttCalendar start, long length, TaskManager taskManager, int taskID) {\r\n    super(taskManager, taskID);\r\n    TaskMutator mutator = createMutator();\r\n    mutator.setName(name);\r\n    mutator.setStart(start);\r\n    mutator.setDuration(taskManager.createLength(length));\r\n    mutator.commit();\r\n    enableEvents(true);\r\n}"},
 {"id":765, "name":"-init-(net.sourceforge.ganttproject.GanttTask)", "fullmethod":"net.sourceforge.ganttproject.GanttTask.-init-(net.sourceforge.ganttproject.GanttTask)", "ownerclassid":"63", "ownerclassname":"net.sourceforge.ganttproject.GanttTask", "sourcecode":"public GanttTask(GanttTask copy) {\r\n    super(copy, false);\r\n    // for (int i = 0; i < getPredecessorsOld().size(); i++) {\r\n    // GanttTaskRelationship tempRel = (GanttTaskRelationship) ( (\r\n    // GanttTaskRelationship) getPredecessorsOld().get(i)).clone();\r\n    // addPredecessor(tempRel);\r\n    // }\r\n    // for (int i = 0; i < successors.size(); i++) {\r\n    // GanttTaskRelationship tempRel = (GanttTaskRelationship) ( (\r\n    // GanttTaskRelationship) successors.get(i)).clone();\r\n    // addSuccessor(tempRel);\r\n    // }\r\n    enableEvents(true);\r\n}"},
 {"id":766, "name":"Clone()", "fullmethod":"net.sourceforge.ganttproject.GanttTask.Clone()", "ownerclassid":"63", "ownerclassname":"net.sourceforge.ganttproject.GanttTask", "sourcecode":"/**\r\n *\r\n *\r\n * @return a clone of the Task\r\n */\r\npublic GanttTask Clone() {\r\n    return new GanttTask(this);\r\n}"},
 {"id":767, "name":"getLength()", "fullmethod":"net.sourceforge.ganttproject.GanttTask.getLength()", "ownerclassid":"63", "ownerclassname":"net.sourceforge.ganttproject.GanttTask", "sourcecode":"/**\r\n *\r\n *\r\n * @deprecated Use TimeUnit class istead and method getDuration()\r\n */\r\npublic int getLength() {\r\n    return ((int) (getDuration().getLength()));\r\n}"},
 {"id":768, "name":"setLength(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTask.setLength(int)", "ownerclassid":"63", "ownerclassname":"net.sourceforge.ganttproject.GanttTask", "sourcecode":"/**\r\n *\r\n *\r\n * @deprecated Use setDuration()\r\n */\r\npublic void setLength(int l) {\r\n    if (l <= 0) {\r\n        throw new IllegalArgumentException((((\"Length of task must be >=0. Youve passed length=\" + l) + \" to task=\") + (this)));\r\n    }\r\n    TaskMutator mutator = createMutator();\r\n    mutator.setDuration(getManager().createLength(getDuration().getTimeUnit(), l));\r\n    mutator.commit();\r\n}"},
 {"id":769, "name":"setTaskID(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTask.setTaskID(int)", "ownerclassid":"63", "ownerclassname":"net.sourceforge.ganttproject.GanttTask", "sourcecode":"/**\r\n * set the task ID. the uniquness of ID should be check before using this\r\n * method\r\n *\r\n * @param taskID\r\n * \t\t\r\n */\r\npublic void setTaskID(int taskID) {\r\n    setTaskIDHack(taskID);\r\n}"},
 {"id":770, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.-init-()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * Constructor, do nothing\r\n */\r\npublic GanttTaskRelationship() {\r\n    this(null);\r\n}"},
 {"id":771, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.-init-(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"public GanttTaskRelationship(TaskManager taskManager) {\r\n    myTaskManager = taskManager;\r\n}"},
 {"id":772, "name":"-init-(int,int,int,int,net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.-init-(int,int,int,int,net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttTaskRelationship(int predecessorTaskID, int successorTaskID, int relationshipType, int difference, TaskManager taskManager) {\r\n    this(taskManager);\r\n    this.predecessorTaskID = predecessorTaskID;\r\n    this.successorTaskID = successorTaskID;\r\n    this.relationshipType = relationshipType;\r\n    this.difference = difference;\r\n}"},
 {"id":773, "name":"clone()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.clone()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"public Object clone() {\r\n    GanttTaskRelationship copyRel = new GanttTaskRelationship(myTaskManager);\r\n    copyRel.relationshipType = relationshipType;\r\n    copyRel.predecessorTaskID = predecessorTaskID;\r\n    copyRel.successorTaskID = successorTaskID;\r\n    return copyRel;\r\n}"},
 {"id":774, "name":"equals(net.sourceforge.ganttproject.GanttTaskRelationship)", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.equals(net.sourceforge.ganttproject.GanttTaskRelationship)", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"public boolean equals(GanttTaskRelationship compareRel) {\r\n    return (((relationshipType) == (compareRel.relationshipType)) && ((predecessorTaskID) == (compareRel.predecessorTaskID))) && ((successorTaskID) == (compareRel.successorTaskID));\r\n}"},
 {"id":775, "name":"getDifference()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.getDifference()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * get the difference\r\n */\r\npublic int getDifference() {\r\n    return difference;\r\n}"},
 {"id":776, "name":"getManager()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.getManager()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"private TaskManager getManager() {\r\n    return myTaskManager;\r\n}"},
 {"id":777, "name":"getPredecessorTask()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.getPredecessorTask()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"// getters and setters\r\n/**\r\n * get the predecessor task\r\n */\r\npublic GanttTask getPredecessorTask() {\r\n    if ((predecessorTaskID) != (-1)) {\r\n        return getManager().getTask(predecessorTaskID);\r\n    } else {\r\n        return null;\r\n    }\r\n}"},
 {"id":778, "name":"getPredecessorTaskID()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.getPredecessorTaskID()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * get the predecessor task ID or -1 if there is no such ID\r\n */\r\npublic int getPredecessorTaskID() {\r\n    return predecessorTaskID;\r\n}"},
 {"id":779, "name":"getRelationshipType()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.getRelationshipType()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * get the relationship type\r\n */\r\npublic int getRelationshipType() {\r\n    return relationshipType;\r\n}"},
 {"id":780, "name":"getSuccessorTask()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.getSuccessorTask()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * get the successor task\r\n */\r\npublic Task getSuccessorTask() {\r\n    if ((successorTaskID) != (-1)) {\r\n        return getManager().getTask(successorTaskID);\r\n    } else {\r\n        return null;\r\n    }\r\n}"},
 {"id":781, "name":"getSuccessorTaskID()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.getSuccessorTaskID()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n *\r\n *\r\n * @return id of successor task\r\n */\r\npublic int getSuccessorTaskID() {\r\n    return successorTaskID;\r\n}"},
 {"id":782, "name":"setPredecessorTask(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.setPredecessorTask(int)", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * set the predecessor task ID by integer\r\n *\r\n * @param predecessorTaskID\r\n * \t\tID of predecessor task\r\n */\r\npublic void setPredecessorTask(int predecessorTaskID) {\r\n    this.predecessorTaskID = predecessorTaskID;\r\n}"},
 {"id":783, "name":"setPredecessorTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.setPredecessorTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * set the predecessor task by GanttTask object\r\n */\r\npublic void setPredecessorTask(Task predecessorTask) {\r\n    this.predecessorTaskID = predecessorTask.getTaskID();\r\n    // this.predecessorTask=predecessorTask;\r\n}"},
 {"id":784, "name":"setRelationshipType(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.setRelationshipType(int)", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * set the relationship type\r\n */\r\npublic void setRelationshipType(int relationshipType) {\r\n    this.relationshipType = relationshipType;\r\n}"},
 {"id":785, "name":"setSuccessorTask(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.setSuccessorTask(int)", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * set the successor task ID by the integer\r\n *\r\n * @param seccessorTaskID\r\n * \t\tid of the successor\r\n */\r\npublic void setSuccessorTask(int seccessorTaskID) {\r\n    this.successorTaskID = seccessorTaskID;\r\n}"},
 {"id":786, "name":"setSuccessorTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.setSuccessorTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"/**\r\n * set the successor task by GanttTask object\r\n *\r\n * @param successorTask\r\n * \t\tGanttTask object of successor\r\n */\r\npublic void setSuccessorTask(Task successorTask) {\r\n    this.successorTaskID = successorTask.getTaskID();\r\n    // this.successorTask = successorTask;\r\n}"},
 {"id":787, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.GanttTaskRelationship.toString()", "ownerclassid":"64", "ownerclassname":"net.sourceforge.ganttproject.GanttTaskRelationship", "sourcecode":"public String toString() {\r\n    String res = \"Relation \";\r\n    res += ((relationshipType) == (GanttTaskRelationship.SS)) ? \"(SS) \" : (relationshipType) == (GanttTaskRelationship.SF) ? \"(SF) \" : (relationshipType) == (GanttTaskRelationship.FS) ? \"(FS) \" : \"(FF) \";\r\n    res += (((((((getSuccessorTask()) + \" (\") + (getSuccessorTaskID())) + \") \") + (getPredecessorTask())) + \" (\") + (getPredecessorTaskID())) + \")\";\r\n    return res;\r\n}"},
 {"id":788, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.-init-()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"1() {\r\n}"},
 {"id":789, "name":"-init-(javax.swing.tree.DefaultTreeModel)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.-init-(javax.swing.tree.DefaultTreeModel)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public AutoscrollingTree(DefaultTreeModel treeModel) {\r\n    super(treeModel);\r\n}"},
 {"id":790, "name":"-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":""},
 {"id":791, "name":"-init-(java.lang.String,javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.-init-(java.lang.String,javax.swing.Icon)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"5( $anonymous0,  $anonymous1) {\r\n}"},
 {"id":792, "name":"-init-(javax.swing.tree.DefaultMutableTreeNode,javax.swing.tree.DefaultMutableTreeNode,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.-init-(javax.swing.tree.DefaultMutableTreeNode,javax.swing.tree.DefaultMutableTreeNode,int)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public HiddenTask(DefaultMutableTreeNode node, DefaultMutableTreeNode parent, int index) {\r\n    this.node = node;\r\n    this.parent = parent;\r\n    this.index = index;\r\n    // this.node.setParent(this.parent);\r\n}"},
 {"id":793, "name":"-init-(javax.swing.tree.TreePath)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.-init-(javax.swing.tree.TreePath)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Constructs a transferrable tree path object for the specified path.\r\n */\r\npublic GanttTransferableTreePath(TreePath path) {\r\n    _path = path;\r\n}"},
 {"id":794, "name":"addBlankLine(javax.swing.tree.DefaultMutableTreeNode,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.addBlankLine(javax.swing.tree.DefaultMutableTreeNode,int)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void addBlankLine(final DefaultMutableTreeNode select, final int index) {\r\n    treeModel.insertNodeInto(new BlankLineNode(), (select == null ? getRoot() : ((DefaultMutableTreeNode) (select.getParent()))), (index == (-1) ? getRoot().getChildCount() : index));\r\n    appli.setAskForSave(true);\r\n}"},
 {"id":795, "name":"addObject(java.lang.Object,javax.swing.tree.MutableTreeNode,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.addObject(java.lang.Object,javax.swing.tree.MutableTreeNode,int)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Add a sub task.\r\n */\r\npublic TaskNode addObject(Object child, MutableTreeNode parent, int index) {\r\n    TaskNode childNode = new TaskNode(((Task) (child)));\r\n    if (parent == null)\r\n        parent = rootNode;\r\n\r\n    // GanttTask tmpTask = (GanttTask)(childNode.getUserObject());\r\n    // tmpTask.indentID((String)(((GanttTask)(parent.getUserObject())).getID()));\r\n    treeModel.insertNodeInto(childNode, parent, (index == (-1) ? parent.getChildCount() : index));\r\n    treetable.getTree().scrollPathToVisible(new TreePath(childNode.getPath()));\r\n    (nbTasks)++;\r\n    appli.refreshProjectInfos();\r\n    return childNode;\r\n}"},
 {"id":796, "name":"addObjectWithExpand(java.lang.Object,javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.addObjectWithExpand(java.lang.Object,javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * add an object with the expand information\r\n */\r\npublic DefaultMutableTreeNode addObjectWithExpand(Object child, DefaultMutableTreeNode parent) {\r\n    DefaultMutableTreeNode childNode = new TaskNode(((Task) (child)));\r\n    if (parent == null)\r\n        parent = rootNode;\r\n\r\n    treeModel.insertNodeInto(childNode, parent, parent.getChildCount());\r\n    // forwardScheduling();\r\n    Task task = ((Task) (childNode.getUserObject()));\r\n    boolean res = true;\r\n    if (parent == null)\r\n        res = false;\r\n\r\n    // test for expantion\r\n    while (parent != null) {\r\n        Task taskFather = ((Task) (parent.getUserObject()));\r\n        if (!(taskFather.getExpand())) {\r\n            res = false;\r\n            break;\r\n        }\r\n        parent = ((DefaultMutableTreeNode) (parent.getParent()));\r\n    } \r\n    treetable.getTree().scrollPathToVisible(new TreePath(childNode.getPath()));\r\n    if ((!res) && (parent != null)) {\r\n        treetable.getTree().collapsePath(new TreePath(parent.getPath()));\r\n    }\r\n    // else\r\n    // task.setExpand(false);\r\n    (nbTasks)++;\r\n    appli.refreshProjectInfos();\r\n    return childNode;\r\n}"},
 {"id":797, "name":"changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void changeLanguage(GanttLanguage ganttLanguage) {\r\n    this.language = ganttLanguage;\r\n    // this.treetable.changeLanguage(language);\r\n}"},
 {"id":798, "name":"clearTree()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.clearTree()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Clear the JTree.\r\n */\r\npublic void clearTree() {\r\n    // expand.clear();\r\n    rootNode.removeAllChildren();\r\n    initRootNode();\r\n    treeModel.setRoot(rootNode);\r\n    treeModel.reload();\r\n    nbTasks = 0;\r\n    hiddenTask.clear();\r\n}"},
 {"id":799, "name":"convertNodesListToItemList(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.convertNodesListToItemList(java.util.List)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public static List convertNodesListToItemList(List nodesList) {\r\n    List res = new ArrayList(nodesList.size());\r\n    Iterator itNodes = nodesList.iterator();\r\n    while (itNodes.hasNext()) {\r\n        res.add(((DefaultMutableTreeNode) (itNodes.next())).getUserObject());\r\n    } \r\n    return res;\r\n}"},
 {"id":800, "name":"copySelectedNode()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.copySelectedNode()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Copy the current selected tree node\r\n */\r\npublic void copySelectedNode() {\r\n    TreePath currentSelection = treetable.getTree().getSelectionPath();\r\n    cpNodesArrayList = new ArrayList();\r\n    if (currentSelection != null) {\r\n        final DefaultMutableTreeNode[] cdmtn = getSelectedNodes();\r\n        cpAllDependencies(cdmtn);\r\n        for (int i = 0; i < (cdmtn.length); i++) {\r\n            boolean isNodeDescendant = false;\r\n            for (int j = 0; j < (cpNodesArrayList.size()); j++) {\r\n                if (((DefaultMutableTreeNode) (cdmtn[i])).isNodeDescendant(((DefaultMutableTreeNode) (cpNodesArrayList.get(j))))) {\r\n                    isNodeDescendant = true;\r\n                    // if a selected node is a descendant of an other\r\n                    // selected one he doesnt have to be copied\r\n                }\r\n            }\r\n            if (!isNodeDescendant) {\r\n                cpNodesArrayList.add(((DefaultMutableTreeNode) (cdmtn[i])));\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":801, "name":"cpAllDependencies(javax.swing.tree.DefaultMutableTreeNode[])", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.cpAllDependencies(javax.swing.tree.DefaultMutableTreeNode[])", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void cpAllDependencies(DefaultMutableTreeNode[] cdmtn) {\r\n    // to get all the dependencies who need to be paste.\r\n    cpDependencies = new ArrayList();\r\n    allNodes = new ArrayList();\r\n    for (int i = 0; i < (cdmtn.length); i++) {\r\n        getAllNodes(cdmtn[i]);\r\n    }\r\n    TaskDependency[] dependencies = getTaskManager().getDependencyCollection().getDependencies();\r\n    for (int i = 0; i < (dependencies.length); i++) {\r\n        Task dependant = dependencies[i].getDependant();\r\n        Task dependee = dependencies[i].getDependee();\r\n        for (int j = 0; j < (allNodes.size()); j++) {\r\n            for (int k = 0; k < (allNodes.size()); k++)\r\n                if ((((Task) (((DefaultMutableTreeNode) (allNodes.get(j))).getUserObject())).equals(dependant)) && (((Task) (((DefaultMutableTreeNode) (allNodes.get(k))).getUserObject())).equals(dependee))) {\r\n                    cpDependencies.add(dependencies[i]);\r\n                }\r\n\r\n        }\r\n    }\r\n}"},
 {"id":802, "name":"createMenuAction(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.createMenuAction(java.lang.String,java.lang.String)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"private Action createMenuAction(String label, String iconPath) {\r\n    AbstractAction result = new AbstractAction(label, new ImageIcon(getClass().getResource(iconPath))) {\r\n        public void actionPerformed(ActionEvent e) {\r\n            appli.actionPerformed(e);\r\n        }\r\n    };\r\n    return result;\r\n}"},
 {"id":803, "name":"createPopupMenu(int,int,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.createPopupMenu(int,int,boolean)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Create a popup menu when mous click\r\n */\r\nprivate void createPopupMenu(int x, int y, boolean all) {\r\n    JPopupMenu menu = new JPopupMenu();\r\n    Action[] popupMenuActions = getPopupMenuActions();\r\n    myUIFacade.showPopupMenu(this, popupMenuActions, ((x - (hbar.getValue())) + (vbar.isVisible() ? vbar.getWidth() : 0)), ((y - (vbar.getValue())) + 20));\r\n}"},
 {"id":804, "name":"cutSelectedNode()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.cutSelectedNode()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Cut the current selected tree node\r\n */\r\npublic void cutSelectedNode() {\r\n    final TreePath currentSelection = treetable.getTree().getSelectionPath();\r\n    final DefaultMutableTreeNode[] cdmtn = getSelectedNodes();\r\n    if (currentSelection != null) {\r\n        getUndoManager().undoableEdit(\"Cut\", new Runnable() {\r\n            public void run() {\r\n                cpNodesArrayList = new ArrayList();\r\n                cpAllDependencies(cdmtn);\r\n                GanttTask taskFather = null;\r\n                DefaultMutableTreeNode father = null;\r\n                DefaultMutableTreeNode current = null;\r\n                for (int i = 0; i < (cdmtn.length); i++) {\r\n                    current = getSelectedTaskNode();\r\n                    if (current != null) {\r\n                        cpNodesArrayList.add(((DefaultMutableTreeNode) (cdmtn[i])));\r\n                        father = /* ttask */\r\n                        getFatherNode(current);\r\n                        where = father.getIndex(current);\r\n                        removeCurrentNode(current);\r\n                        current.setParent(father);\r\n                        taskFather = ((GanttTask) (father.getUserObject()));\r\n                        AdjustTaskBoundsAlgorithm alg = getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm();\r\n                        alg.run(taskFather);\r\n                        // taskFather.refreshDateAndAdvancement(this);\r\n                        father.setUserObject(taskFather);\r\n                    }\r\n                }\r\n                if ((father.getChildCount()) == 0)\r\n                    ((Task) (father.getUserObject())).setProjectTask(false);\r\n\r\n                if (taskFather != null) {\r\n                    selectTask(taskFather, false);\r\n                }\r\n                area.repaint();\r\n            }\r\n        });\r\n        appli.repaint();\r\n    }\r\n}"},
 {"id":805, "name":"dedentCurrentNodes()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.dedentCurrentNodes()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Function to dedent selected task this will change the parent child\r\n * relationship. This Code is based on the UP/DOWN Coder I found in here\r\n * barmeier\r\n */\r\n/**\r\n * Unindent the selected nodes.\r\n */\r\npublic void dedentCurrentNodes() {\r\n    final DefaultMutableTreeNode[] cdmtn = getSelectedTaskNodes();\r\n    if (cdmtn == null) {\r\n        myUIFacade.setStatusText(language.getText(\"msg21\"));\r\n        return;\r\n    }\r\n    final GanttTree2 gt2 = this;\r\n    getUndoManager().undoableEdit(\"Dedent\", new Runnable() {\r\n        public void run() {\r\n            TreePath[] selectedPaths = new TreePath[cdmtn.length];\r\n            // Information about previous node is needed to determine if current node had sibling that was moved.\r\n            DefaultMutableTreeNode previousFather = new DefaultMutableTreeNode();\r\n            DefaultMutableTreeNode father = new DefaultMutableTreeNode();\r\n            HashSet targetContainers = new HashSet();\r\n            for (int i = 0; i < (cdmtn.length); i++) {\r\n                // We use information about previous father to determine new index of the node in the tree.\r\n                if (i > 0) {\r\n                    previousFather = father;\r\n                }\r\n                father = gt2.getFatherNode(cdmtn[i]);\r\n                // Getting the fathers father !? The grandpa I think  :)\r\n                DefaultMutableTreeNode newFather = gt2.getFatherNode(father);\r\n                // If no grandpa is available we must stop.\r\n                if (newFather == null) {\r\n                    return;\r\n                }\r\n                int oldIndex = father.getIndex(((TreeNode) (cdmtn[i])));\r\n                cdmtn[i].removeFromParent();\r\n                treeModel.nodesWereRemoved(father, new int[]{ oldIndex }, new Object[]{ cdmtn });\r\n                targetContainers.add(((Task) (father.getUserObject())));\r\n                // If node and previous node were siblings add current node after its previous sibling\r\n                int newIndex;\r\n                if ((i > 0) && (father.equals(previousFather))) {\r\n                    newIndex = (newFather.getIndex(((TreeNode) (cdmtn[(i - 1)])))) + 1;\r\n                } else {\r\n                    newIndex = (newFather.getIndex(((TreeNode) (father)))) + 1;\r\n                }\r\n                ((GanttTreeTableModel) (treeModel)).insertNodeInto(((MutableTreeNode) (cdmtn[i])), ((MutableTreeNode) (newFather)), newIndex);\r\n                // Select tagain this node\r\n                TreeNode[] treepath = cdmtn[i].getPath();\r\n                TreePath path = new TreePath(treepath);\r\n                // tree.setSelectionPath(path);\r\n                selectedPaths[i] = path;\r\n                // refresh the father date\r\n                // Task current = (Task)(cdmtn[i].getUserObject());\r\n                // refreshAllFather(current.toString());\r\n                expandRefresh(cdmtn[i]);\r\n                if ((father.getChildCount()) == 0)\r\n                    ((Task) (father.getUserObject())).setProjectTask(false);\r\n\r\n            }\r\n            getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().run(((Task[]) (targetContainers.toArray(new Task[0]))));\r\n            forwardScheduling();\r\n            treetable.getTree().setSelectionPaths(selectedPaths);\r\n            area.repaint();\r\n            // appli.setQuickSave (true);\r\n            // appli.quickSave (\"Dedent\");\r\n        }\r\n    });\r\n}"},
 {"id":806, "name":"displayHiddenTasks()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.displayHiddenTasks()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Displays the hidden tasks.\r\n */\r\npublic void displayHiddenTasks() {\r\n    for (int i = 0; i < (hiddenTask.size()); i++) {\r\n        GanttTree2.HiddenTask ht = ((GanttTree2.HiddenTask) (hiddenTask.get(i)));\r\n        DefaultMutableTreeNode node = ht.getNode();\r\n        DefaultMutableTreeNode parent = ht.getParent();\r\n        node.setParent(parent);\r\n    }\r\n    Collections.sort(hiddenTask);\r\n    for (int i = 0; i < (hiddenTask.size()); i++) {\r\n        GanttTree2.HiddenTask ht = ((GanttTree2.HiddenTask) (hiddenTask.get(i)));\r\n        DefaultMutableTreeNode node = ht.getNode();\r\n        DefaultMutableTreeNode parent = ht.getParent();\r\n        int index = ht.getIndex();\r\n        node.setParent(null);\r\n        ((GanttTreeTableModel) (getTreeTable().getTreeTableModel())).insertNodeInto(node, parent, index);\r\n        if (node instanceof TaskNode)\r\n            restoreExpand(((TaskNode) (node)));\r\n\r\n    }\r\n    hiddenTask.clear();\r\n}"},
 {"id":807, "name":"downCurrentNodes()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.downCurrentNodes()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Function to put down the selected tasks\r\n */\r\npublic void downCurrentNodes() {\r\n    final DefaultMutableTreeNode[] cdmtn = getSelectedNodes();\r\n    if (cdmtn == null) {\r\n        myUIFacade.setStatusText(language.getText(\"msg21\"));\r\n        return;\r\n    }\r\n    // final TreePath[] selectedPaths = new TreePath[cdmtn.length];\r\n    // Parse in reverse mode because tasks are sorted from top to bottom.\r\n    // appli.setQuickSave (false);\r\n    final GanttTree2 gt2 = this;\r\n    appli.getUndoManager().undoableEdit(\"Down\", new Runnable() {\r\n        public void run() {\r\n            for (int i = (cdmtn.length) - 1; i >= 0; i--) {\r\n                DefaultMutableTreeNode father = gt2.getFatherNode(cdmtn[i]);\r\n                int index = father.getIndex(((TreeNode) (cdmtn[i])));\r\n                index++;\r\n                Task task = ((Task) (cdmtn[i].getUserObject()));\r\n                // New position\r\n                if (index < (father.getChildCount())) {\r\n                    DefaultMutableTreeNode[] child = new DefaultMutableTreeNode[cdmtn[i].getChildCount()];\r\n                    if (task.getExpand()) {\r\n                        for (int j = 0; j < (cdmtn[i].getChildCount()); j++) {\r\n                            child[j] = ((DefaultMutableTreeNode) (cdmtn[i].getChildAt(j)));\r\n                        }\r\n                        for (int j = 0; j < (child.length); j++) {\r\n                            child[j].removeFromParent();\r\n                            treeModel.nodesWereRemoved(cdmtn[i], new int[]{ 0 }, new Object[]{ child });\r\n                        }\r\n                    }\r\n                    cdmtn[i].removeFromParent();\r\n                    treeModel.nodesWereRemoved(father, new int[]{ index - 1 }, new Object[]{ cdmtn });\r\n                    father.insert(cdmtn[i], index);\r\n                    treeModel.nodesWereInserted(father, new int[]{ index });\r\n                    if (task.getExpand()) {\r\n                        for (int j = 0; j < (child.length); j++) {\r\n                            cdmtn[i].insert(child[j], j);\r\n                            treeModel.nodesWereInserted(cdmtn[i], new int[]{ j });\r\n                        }\r\n                    }\r\n                    forwardScheduling();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    area.repaint();\r\n}"},
 {"id":808, "name":"dragDropEnd(java.awt.dnd.DragSourceDropEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.dragDropEnd(java.awt.dnd.DragSourceDropEvent)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void dragDropEnd(DragSourceDropEvent dsde) {\r\n}"},
 {"id":809, "name":"dragEnter(java.awt.dnd.DragSourceDragEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.dragEnter(java.awt.dnd.DragSourceDragEvent)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void dragEnter(DragSourceDragEvent dsde) {\r\n}"},
 {"id":810, "name":"dragExit(java.awt.dnd.DragSourceEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.dragExit(java.awt.dnd.DragSourceEvent)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void dragExit(DragSourceEvent dse) {\r\n}"},
 {"id":811, "name":"dragGestureRecognized(java.awt.dnd.DragGestureEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.dragGestureRecognized(java.awt.dnd.DragGestureEvent)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void dragGestureRecognized(DragGestureEvent dge) {\r\n    Point ptDragOrigin = dge.getDragOrigin();\r\n    TreePath path = treetable.getTree().getPathForLocation(ptDragOrigin.x, ptDragOrigin.y);\r\n    if (path == null) {\r\n        return;\r\n    }\r\n    // Work out the offset of the drag point from the TreePath bounding\r\n    // rectangle origin\r\n    Rectangle raPath = treetable.getTree().getPathBounds(path);\r\n    offsetPoint.setLocation(((ptDragOrigin.x) - (raPath.x)), ((ptDragOrigin.y) - (raPath.y)));\r\n    // Get the cell renderer (which is a JLabel) for the path being dragged\r\n    // JLabel lbl = (JLabel)\r\n    // treetable.getTree().getCellRenderer().getTreeCellRendererComponent\r\n    // (\r\n    // treetable, // tree\r\n    // path.getLastPathComponent(), // value\r\n    // false, // isSelected (dont want a colored background)\r\n    // treetable.getTree().isExpanded(path), // isExpanded\r\n    // ((DefaultTreeTableModel)treetable.getModel()).isLeaf(path.getLastPathComponent()),\r\n    // // isLeaf\r\n    // 0, // row (not important for rendering)\r\n    // false // hasFocus (dont want a focus rectangle)\r\n    // );\r\n    JLabel lbl = null;\r\n    lbl.setSize(((int) (raPath.getWidth())), ((int) (raPath.getHeight())));// <--\r\n\r\n    // The\r\n    // layout\r\n    // manager\r\n    // would\r\n    // normally\r\n    // do\r\n    // this\r\n    // Get a buffered image of the selection for dragging a ghost image\r\n    ghostImage = new BufferedImage(((int) (raPath.getWidth())), ((int) (raPath.getHeight())), BufferedImage.TYPE_INT_ARGB_PRE);\r\n    Graphics2D g2 = ghostImage.createGraphics();\r\n    // Ask the cell renderer to paint itself into the BufferedImage\r\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC, 0.5F));// Make\r\n\r\n    // the\r\n    // image\r\n    // ghostlike\r\n    lbl.paint(g2);\r\n    // Now paint a gradient UNDER the ghosted JLabel text (but not under the\r\n    // icon if any)\r\n    // Note: this will need tweaking if your icon is not positioned to the\r\n    // left of the text\r\n    Icon icon = lbl.getIcon();\r\n    int nStartOfText = (icon == null) ? 0 : (icon.getIconWidth()) + (lbl.getIconTextGap());\r\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.DST_OVER, 0.5F));// Make the gradient ghostlike\r\n\r\n    g2.setPaint(new GradientPaint(nStartOfText, 0, SystemColor.controlShadow, getWidth(), 0, new Color(255, 255, 255, 0)));\r\n    g2.fillRect(nStartOfText, 0, getWidth(), ghostImage.getHeight());\r\n    g2.dispose();\r\n    treetable.getTree().setSelectionPath(path);// Select this path in the\r\n\r\n    // tree\r\n    // Wrap the path being transferred into a Transferable object\r\n    Transferable transferable = new GanttTree2.GanttTransferableTreePath(path);\r\n    // Remember the path being dragged (because if it is being moved, we\r\n    // will have to delete it later)\r\n    dragPath = path;\r\n    // We pass our drag image just in case it IS supported by the platform\r\n    dge.startDrag(null, ghostImage, new Point(5, 5), transferable, this);\r\n}"},
 {"id":812, "name":"dragOver(java.awt.dnd.DragSourceDragEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.dragOver(java.awt.dnd.DragSourceDragEvent)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void dragOver(DragSourceDragEvent dsde) {\r\n}"},
 {"id":813, "name":"dropActionChanged(java.awt.dnd.DragSourceDragEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.dropActionChanged(java.awt.dnd.DragSourceDragEvent)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void dropActionChanged(DragSourceDragEvent dsde) {\r\n}"},
 {"id":814, "name":"expandRefresh(javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.expandRefresh(javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"// update 21/03/2003\r\n/**\r\n * Refresh the expantion (recursive function)\r\n */\r\npublic void expandRefresh(DefaultMutableTreeNode moved) {\r\n    if (moved instanceof TaskNode) {\r\n        Task movedTask = ((Task) (moved.getUserObject()));\r\n        // if (expand.contains(new Integer(movedTask.getTaskID()))) {\r\n        if (movedTask.getExpand())\r\n            treetable.getTree().expandPath(new TreePath(moved.getPath()));\r\n\r\n        Enumeration children = moved.children();\r\n        while (children.hasMoreElements()) {\r\n            expandRefresh(((DefaultMutableTreeNode) (children.nextElement())));\r\n        } \r\n    }\r\n}"},
 {"id":815, "name":"forwardScheduling()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.forwardScheduling()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void forwardScheduling() {\r\n    RecalculateTaskScheduleAlgorithm alg = getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm();\r\n    try {\r\n        alg.run();\r\n    } catch (TaskDependencyException e) {\r\n        myUIFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":816, "name":"getAllChildTask(javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getAllChildTask(javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return all sub task for the tree node base\r\n */\r\npublic ArrayList getAllChildTask(DefaultMutableTreeNode base) {\r\n    ArrayList res = new ArrayList();\r\n    if ((base == null) || (!(base instanceof TaskNode)))\r\n        return res;\r\n\r\n    Enumeration e = base.children();\r\n    while (e.hasMoreElements()) {\r\n        Object next = e.nextElement();\r\n        if (next instanceof TaskNode)\r\n            res.add(next);\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":817, "name":"getAllChildTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getAllChildTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return all sub task for the tree node base\r\n */\r\npublic ArrayList getAllChildTask(Task task) {\r\n    ArrayList res = new ArrayList();\r\n    if (task == null)\r\n        return null;\r\n\r\n    DefaultMutableTreeNode base = ((DefaultMutableTreeNode) (getNode(task.getTaskID())));\r\n    if (base == null)\r\n        return res;\r\n\r\n    Enumeration e = base.children();\r\n    while (e.hasMoreElements()) {\r\n        res.add(e.nextElement());\r\n    } \r\n    return res;\r\n}"},
 {"id":818, "name":"getAllNodes(javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getAllNodes(javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"// public int cpId (int index) {\r\n// System.out.println(\"index = \" + index + \" -> \" +\r\n// ((Integer)pasteID.get(index)).intValue());\r\n// return ((Integer)pasteID.get(index)).intValue();\r\n// }\r\npublic void getAllNodes(DefaultMutableTreeNode dmt) {\r\n    // get all the nodes the parent and all his descendance\r\n    if (!(allNodes.contains(dmt)))\r\n        allNodes.add(dmt);\r\n\r\n    for (int i = 0; i < (dmt.getChildCount()); i++) {\r\n        getAllNodes(((DefaultMutableTreeNode) (dmt.getChildAt(i))));\r\n    }\r\n}"},
 {"id":819, "name":"getAllTasks()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getAllTasks()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Returnan ArrayList with all tasks.\r\n */\r\npublic ArrayList getAllTasks() {\r\n    ArrayList res = new ArrayList();\r\n    Enumeration enumeration = rootNode.preorderEnumeration();\r\n    while (enumeration.hasMoreElements()) {\r\n        Object o = enumeration.nextElement();\r\n        if (o instanceof TaskNode) {\r\n            res.add(o);\r\n        }\r\n    } \r\n    return res;\r\n    // return Collections.list(rootNode.preorderEnumeration());\r\n}"},
 {"id":820, "name":"getAllVisibleNodes()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getAllVisibleNodes()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public List getAllVisibleNodes() {\r\n    List res = new ArrayList();\r\n    Enumeration enumeration = rootNode.preorderEnumeration();\r\n    while (enumeration.hasMoreElements()) {\r\n        DefaultMutableTreeNode o = ((DefaultMutableTreeNode) (enumeration.nextElement()));\r\n        if (getTreeTable().getTree().isVisible(new TreePath(o.getPath())))\r\n            res.add(o);\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":821, "name":"getFatherNode(javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getFatherNode(javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Returne the mother task.\r\n */\r\npublic DefaultMutableTreeNode getFatherNode(DefaultMutableTreeNode node) {\r\n    if (node == null) {\r\n        return null;\r\n    }\r\n    return ((DefaultMutableTreeNode) (node.getParent()));\r\n}"},
 {"id":822, "name":"getFatherNode(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getFatherNode(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Returne the mother task.\r\n */\r\npublic DefaultMutableTreeNode getFatherNode(Task node) {\r\n    if (node == null) {\r\n        return null;\r\n    }\r\n    DefaultMutableTreeNode tmp = ((DefaultMutableTreeNode) (getNode(node.getTaskID())));\r\n    if (tmp == null) {\r\n        return null;\r\n    }\r\n    return ((DefaultMutableTreeNode) (tmp.getParent()));\r\n}"},
 {"id":823, "name":"getHiddenTasks()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getHiddenTasks()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/* <Task> */\r\npublic Set getHiddenTasks() {\r\n    HashSet result = new HashSet();\r\n    for (int i = 0; i < (hiddenTask.size()); i++) {\r\n        GanttTree2.HiddenTask next = ((GanttTree2.HiddenTask) (hiddenTask.get(i)));\r\n        result.add(next.getNode().getUserObject());\r\n    }\r\n    return result;\r\n}"},
 {"id":824, "name":"getIndentAction()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getIndentAction()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public Action getIndentAction() {\r\n    return myIndentAction;\r\n}"},
 {"id":825, "name":"getJTree()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getJTree()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return the JTree.\r\n */\r\npublic JTree getJTree() {\r\n    return treetable.getTree();\r\n}"},
 {"id":826, "name":"getLastNode()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getLastNode()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return the last default tree node\r\n */\r\npublic DefaultMutableTreeNode getLastNode() {\r\n    return rootNode.getLastLeaf();\r\n}"},
 {"id":827, "name":"getLinkTasksAction()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getLinkTasksAction()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"private Action getLinkTasksAction() {\r\n    return myLinkTasksAction;\r\n}"},
 {"id":828, "name":"getModel()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getModel()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public GanttTreeTableModel getModel() {\r\n    return treeModel;\r\n}"},
 {"id":829, "name":"getMoveDownAction()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getMoveDownAction()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public Action getMoveDownAction() {\r\n    return myMoveUpAction;\r\n}"},
 {"id":830, "name":"getMoveUpAction()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getMoveUpAction()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public Action getMoveUpAction() {\r\n    return myMoveDownAction;\r\n}"},
 {"id":831, "name":"getNode(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getNode(int)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return the DefaultMutableTreeNode with the name name.\r\n */\r\n/* String name */\r\npublic DefaultMutableTreeNode getNode(int id) {\r\n    DefaultMutableTreeNode res;\r\n    DefaultMutableTreeNode base;\r\n    base = ((DefaultMutableTreeNode) (treetable.getTreeTableModel().getRoot()));\r\n    Enumeration e = base.preorderEnumeration();\r\n    while (e.hasMoreElements()) {\r\n        res = ((DefaultMutableTreeNode) (e.nextElement()));\r\n        if (res instanceof TaskNode)\r\n            if ((((Task) (res.getUserObject())).getTaskID()) == id) {\r\n                return res;\r\n            }\r\n\r\n    } \r\n    return null;\r\n}"},
 {"id":832, "name":"getOnlyTaskNodes(javax.swing.tree.DefaultMutableTreeNode[])", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getOnlyTaskNodes(javax.swing.tree.DefaultMutableTreeNode[])", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"private TaskNode[] getOnlyTaskNodes(DefaultMutableTreeNode[] array) {\r\n    List resAsList = new ArrayList();\r\n    for (int i = 0; i < (array.length); i++) {\r\n        DefaultMutableTreeNode next = array[i];\r\n        if (next instanceof TaskNode)\r\n            resAsList.add(next);\r\n\r\n    }\r\n    return ((TaskNode[]) (resAsList.toArray(new TaskNode[0])));\r\n}"},
 {"id":833, "name":"getPopupMenuActions()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getPopupMenuActions()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public Action[] getPopupMenuActions() {\r\n    List actions = new ArrayList();\r\n    actions.add(new NewTaskAction(((IGanttProject) (appli))));\r\n    if (!(Mediator.getTaskSelectionManager().getSelectedTasks().isEmpty())) {\r\n        actions.add(getTaskPropertiesAction());\r\n        // }\r\n        actions.add(createMenuAction(GanttProject.correctLabel(language.getText(\"deleteTask\")), \"/icons/delete_16.gif\"));\r\n        actions.add(null);\r\n        actions.add(myIndentAction);\r\n        actions.add(myDedentAction);\r\n        actions.add(getMoveUpAction());\r\n        actions.add(getMoveDownAction());\r\n        actions.add(null);\r\n        actions.add(getUnlinkTasksAction());\r\n        actions.add(getLinkTasksAction());\r\n        actions.add(null);\r\n        actions.add(appli.getCutAction());\r\n        actions.add(appli.getCopyAction());\r\n        actions.add(appli.getPasteAction());\r\n        /* actions.add(null);\n        actions.add(createMenuAction(language.getText(\"hideTask\"),\n        \"/icons/hide_16.gif\"));\n        actions.add(createMenuAction(language.getText(\"displayHiddenTasks\"),\n        \"/icons/show_16.gif\"));\n         */\r\n    }\r\n    return ((Action[]) (actions.toArray(new Action[0])));\r\n}"},
 {"id":834, "name":"getProjectTasks()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getProjectTasks()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public ArrayList getProjectTasks() {\r\n    ArrayList projectTasks = new ArrayList();\r\n    // for (int i = 0 ; i < getAllTasks().size() ; i++) {\r\n    // TaskNode node = (TaskNode)getAllTasks().get(i);\r\n    // if (((Task)node.getUserObject()).isProjectTask())\r\n    // projectTasks.add (node);\r\n    // }\r\n    getProjectTasks(this.rootNode, projectTasks);\r\n    return projectTasks;\r\n}"},
 {"id":835, "name":"getProjectTasks(javax.swing.tree.DefaultMutableTreeNode,java.util.ArrayList)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getProjectTasks(javax.swing.tree.DefaultMutableTreeNode,java.util.ArrayList)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void getProjectTasks(DefaultMutableTreeNode node, ArrayList list) {\r\n    ArrayList child = getAllChildTask(node);\r\n    for (int i = 0; i < (child.size()); i++) {\r\n        DefaultMutableTreeNode taskNode = ((DefaultMutableTreeNode) (child.get(i)));\r\n        if (((Task) (taskNode.getUserObject())).isProjectTask())\r\n            list.add(taskNode);\r\n        else\r\n            getProjectTasks(taskNode, list);\r\n\r\n    }\r\n}"},
 {"id":836, "name":"getRoot()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getRoot()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return the root node\r\n */\r\npublic DefaultMutableTreeNode getRoot() {\r\n    return rootNode;\r\n}"},
 {"id":837, "name":"getSelectedNode()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getSelectedNode()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return the selected node\r\n */\r\npublic DefaultMutableTreeNode getSelectedNode() {\r\n    TreePath currentSelection = treetable.getTree().getSelectionPath();\r\n    if (currentSelection == null) {\r\n        return null;\r\n    }\r\n    DefaultMutableTreeNode dmtnselected = ((DefaultMutableTreeNode) (currentSelection.getLastPathComponent()));\r\n    return dmtnselected;\r\n}"},
 {"id":838, "name":"getSelectedNodes()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getSelectedNodes()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n *\r\n *\r\n * @return the list of the selected nodes.\r\n */\r\npublic DefaultMutableTreeNode[] getSelectedNodes() {\r\n    TreePath[] currentSelection = treetable.getTree().getSelectionPaths();\r\n    // no\r\n    // elements\r\n    // are\r\n    // selectionned\r\n    if ((currentSelection == null) || ((currentSelection.length) == 0))\r\n        return null;\r\n\r\n    DefaultMutableTreeNode[] dmtnselected = new DefaultMutableTreeNode[currentSelection.length];\r\n    for (int i = 0; i < (currentSelection.length); i++)\r\n        dmtnselected[i] = ((DefaultMutableTreeNode) (currentSelection[i].getLastPathComponent()));\r\n\r\n    DefaultMutableTreeNode[] res = dmtnselected;\r\n    return res;\r\n}"},
 {"id":839, "name":"getSelectedTask()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getSelectedTask()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return the selected task\r\n */\r\nprivate GanttTask getSelectedTask() {\r\n    DefaultMutableTreeNode node = getSelectedTaskNode();\r\n    if (node == null)\r\n        return null;\r\n\r\n    return ((GanttTask) (node.getUserObject()));\r\n}"},
 {"id":840, "name":"getSelectedTaskNode()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getSelectedTaskNode()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return the selected node\r\n */\r\nprivate DefaultMutableTreeNode getSelectedTaskNode() {\r\n    TreePath currentSelection = treetable.getTree().getSelectionPath();\r\n    if ((currentSelection == null) || (!((currentSelection.getLastPathComponent()) instanceof TaskNode))) {\r\n        return null;\r\n    }\r\n    DefaultMutableTreeNode dmtnselected = ((DefaultMutableTreeNode) (currentSelection.getLastPathComponent()));\r\n    return dmtnselected;\r\n}"},
 {"id":841, "name":"getSelectedTaskNodes()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getSelectedTaskNodes()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public TaskNode[] getSelectedTaskNodes() {\r\n    TreePath[] currentSelection = treetable.getTree().getSelectionPaths();\r\n    if ((currentSelection == null) || ((currentSelection.length) == 0))\r\n        return null;\r\n\r\n    DefaultMutableTreeNode[] dmtnselected = new DefaultMutableTreeNode[currentSelection.length];\r\n    for (int i = 0; i < (currentSelection.length); i++)\r\n        dmtnselected[i] = ((DefaultMutableTreeNode) (currentSelection[i].getLastPathComponent()));\r\n\r\n    TaskNode[] res = getOnlyTaskNodes(dmtnselected);\r\n    return res;\r\n}"},
 {"id":842, "name":"getTable()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getTable()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public JTable getTable() {\r\n    return treetable.getTable();\r\n}"},
 {"id":843, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getTaskManager()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"// /////////////////////////////////////////////////////////////////\r\n// --End CL 15-May-2003\r\nprivate TaskManager getTaskManager() {\r\n    return myTaskManager;\r\n}"},
 {"id":844, "name":"getTaskPropertiesAction()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getTaskPropertiesAction()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"private Action getTaskPropertiesAction() {\r\n    return myTaskPropertiesAction;\r\n}"},
 {"id":845, "name":"getTreeComponent()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getTreeComponent()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"// //////////////////////////////////////////////////////////////////////\r\n// TaskTreeUIFacade\r\npublic Component getTreeComponent() {\r\n    return this;\r\n}"},
 {"id":846, "name":"getTreeTable()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getTreeTable()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public GanttTreeTable getTreeTable() {\r\n    return treetable;\r\n}"},
 {"id":847, "name":"getUndoManager()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getUndoManager()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"private GPUndoManager getUndoManager() {\r\n    return myUIFacade.getUndoManager();\r\n}"},
 {"id":848, "name":"getUnindentAction()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getUnindentAction()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public Action getUnindentAction() {\r\n    return myDedentAction;\r\n}"},
 {"id":849, "name":"getUnlinkTasksAction()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getUnlinkTasksAction()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"private Action getUnlinkTasksAction() {\r\n    return myUnlinkTasksAction;\r\n}"},
 {"id":850, "name":"getVisibleFields()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.getVisibleFields()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public TableHeaderUIFacade getVisibleFields() {\r\n    return treetable.getVisibleFields();\r\n}"},
 {"id":851, "name":"hasAProjectTaskDescendant(javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.hasAProjectTaskDescendant(javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public boolean hasAProjectTaskDescendant(DefaultMutableTreeNode node) {\r\n    ArrayList child = getAllChildTask(node);\r\n    for (int i = 0; i < (child.size()); i++) {\r\n        if (((Task) (((DefaultMutableTreeNode) (child.get(i))).getUserObject())).isProjectTask())\r\n            return true;\r\n\r\n        if (hasAProjectTaskDescendant(((DefaultMutableTreeNode) (child.get(i)))))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":852, "name":"hasTasks()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.hasTasks()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Return tru if the Project has tasks and false is no tasks on the project\r\n */\r\npublic boolean hasTasks() {\r\n    Enumeration e = rootNode.preorderEnumeration();\r\n    while (e.hasMoreElements()) {\r\n        Object next = e.nextElement();\r\n        if (((rootNode) != ((DefaultMutableTreeNode) (next))) && (next instanceof TaskNode))\r\n            return true;\r\n\r\n    } \r\n    return false;\r\n}"},
 {"id":853, "name":"hideSelectedNodes()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.hideSelectedNodes()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Hides the selected tasks.\r\n */\r\npublic void hideSelectedNodes() {\r\n    DefaultMutableTreeNode[] t = getSelectedNodes();\r\n    for (int i = 0; i < (t.length); i++) {\r\n        DefaultMutableTreeNode parent = ((DefaultMutableTreeNode) (t[i].getParent()));\r\n        hiddenTask.add(new GanttTree2.HiddenTask(t[i], parent, parent.getIndex(t[i])));\r\n    }\r\n    for (int i = 0; i < (hiddenTask.size()); i++) {\r\n        GanttTree2.HiddenTask ht = ((GanttTree2.HiddenTask) (hiddenTask.get(i)));\r\n        TreeNode parent = ht.node.getParent();\r\n        if (parent != null)\r\n            ((GanttTreeTableModel) (getTreeTable().getTreeTableModel())).removeNodeFromParent(((GanttTree2.HiddenTask) (hiddenTask.get(i))).getNode());\r\n\r\n    }\r\n}"},
 {"id":854, "name":"indentCurrentNodes()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.indentCurrentNodes()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Indent several nodes that are selected. Based on the IndentCurrentNode\r\n * method.\r\n */\r\nprivate void indentCurrentNodes() {\r\n    final DefaultMutableTreeNode[] cdmtn = getSelectedTaskNodes();\r\n    if (cdmtn == null) {\r\n        myUIFacade.setStatusText(language.getText(\"msg21\"));\r\n        return;\r\n    }\r\n    getUndoManager().undoableEdit(\"Indent\", new Runnable() {\r\n        public void run() {\r\n            for (int i = 0; i < (cdmtn.length); i++) {\r\n                // Where is my nearest sibling in ascending order ?\r\n                DefaultMutableTreeNode newFather = cdmtn[i].getPreviousSibling();\r\n                // If there is no more indentation possible we must stop\r\n                if (!(newFather instanceof TaskNode)) {\r\n                    continue;\r\n                }\r\n                if (((cdmtn[i]) instanceof TaskNode) && (newFather instanceof TaskNode)) {\r\n                    Task nextTask = ((Task) (cdmtn[i].getUserObject()));\r\n                    Task container = ((Task) (newFather.getUserObject()));\r\n                    if (!(getTaskManager().getDependencyCollection().canCreateDependency(container, nextTask))) {\r\n                        continue;\r\n                    }\r\n                    getTaskManager().getTaskHierarchy().move(nextTask, container);\r\n                }\r\n            }\r\n            area.repaint();\r\n            appli.repaint2();\r\n        }\r\n    });\r\n}"},
 {"id":855, "name":"initRootNode()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.initRootNode()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"private void initRootNode() {\r\n    getTaskManager().getRootTask().setName(\"root\");\r\n    rootNode = new TaskNode(getTaskManager().getRootTask());\r\n}"},
 {"id":856, "name":"insertChild(javax.swing.tree.DefaultMutableTreeNode,javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.insertChild(javax.swing.tree.DefaultMutableTreeNode,javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void insertChild(DefaultMutableTreeNode node, DefaultMutableTreeNode copy) {\r\n    Enumeration children = copy.children();\r\n    int index = 0;\r\n    while (children.hasMoreElements()) {\r\n        DefaultMutableTreeNode childCopy = ((DefaultMutableTreeNode) (children.nextElement()));\r\n        DefaultMutableTreeNode child = new DefaultMutableTreeNode(childCopy.getUserObject());\r\n        node.insert(child, index);\r\n        treeModel.nodesWereInserted(node, new int[]{ index });\r\n        this.insertChild(child, childCopy);\r\n        index++;\r\n    } \r\n}"},
 {"id":857, "name":"insertClonedNode(javax.swing.tree.DefaultMutableTreeNode,javax.swing.tree.DefaultMutableTreeNode,int,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.insertClonedNode(javax.swing.tree.DefaultMutableTreeNode,javax.swing.tree.DefaultMutableTreeNode,int,boolean)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Insert the cloned node and its children\r\n */\r\nprivate TaskNode insertClonedNode(DefaultMutableTreeNode parent, DefaultMutableTreeNode child, int location, boolean first) {\r\n    if (parent == null) {\r\n        return null;// it is the root node\r\n\r\n    }\r\n    if (first) {\r\n        GanttTask _t = ((GanttTask) (parent.getUserObject()));\r\n        if (_t.isMilestone()) {\r\n            _t.setMilestone(false);\r\n            GanttTask _c = ((GanttTask) (child.getUserObject()));\r\n            _t.setLength(_c.getLength());\r\n            _t.setStart(_c.getStart());\r\n        }\r\n    }\r\n    GanttTask originalTask = ((GanttTask) (child.getUserObject()));\r\n    GanttTask newTask = originalTask.Clone();\r\n    newTask.setName(((first ? (language.getText(\"copy2\")) + \"_\" : \"\") + (newTask.toString())));\r\n    TaskManagerImpl tmi = ((TaskManagerImpl) (getTaskManager()));\r\n    newTask.setTaskID(((tmi.getMaxID()) + 1));\r\n    mapOriginalIDCopyID.put(new Integer(originalTask.getTaskID()), new Integer(newTask.getTaskID()));\r\n    // copyID.add (new Integer (originalTask.getTaskID()));\r\n    // pasteID.add (new Integer (newTask.getTaskID()));\r\n    ResourceAssignment[] assignment = newTask.getAssignments();\r\n    for (int i = 0; i < (assignment.length); i++) {\r\n        assignment[i].delete();\r\n    }\r\n    getTaskManager().registerTask(newTask);\r\n    DefaultMutableTreeNode cloneChildNode = new TaskNode(newTask);\r\n    for (int i = 0; i < (child.getChildCount()); i++) {\r\n        insertClonedNode(cloneChildNode, ((DefaultMutableTreeNode) (child.getChildAt(i))), i, false);\r\n    }\r\n    // if(child.getParent() != null)\r\n    // if(!child.getParent().equals(parent))\r\n    // parent = (DefaultMutableTreeNode)parent.getParent();\r\n    // \r\n    // \r\n    if (parent == null)\r\n        location = 0;\r\n\r\n    if ((parent.getChildCount()) < location)\r\n        location = parent.getChildCount();\r\n\r\n    ((GanttTreeTableModel) (treeModel)).insertNodeInto(cloneChildNode, parent, location);\r\n    treetable.getTree().scrollPathToVisible(new TreePath(cloneChildNode.getPath()));\r\n    // Remove the node from the expand list\r\n    /* int index = expand.indexOf(new\n    Integer(newTask.getTaskID())cloneChildNode.toString()); if (index >=\n    0) expand.remove(index);\n     */\r\n    newTask.setExpand(false);\r\n    return ((TaskNode) (cloneChildNode));\r\n}"},
 {"id":858, "name":"pasteNode()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.pasteNode()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Paste the node and its child node to current selected position\r\n */\r\npublic void pasteNode() {\r\n    if ((cpNodesArrayList) != null) {\r\n        final GanttTree2 gt2 = this;\r\n        getUndoManager().undoableEdit(\"Paste\", new Runnable() {\r\n            public void run() {\r\n                TaskNode current = ((TaskNode) (treetable.getTree().getLastSelectedPathComponent()));\r\n                List tasksList = new ArrayList();\r\n                if (current == null) {\r\n                    current = rootNode;\r\n                }\r\n                boolean isAProjectTaskChild = false;\r\n                DefaultMutableTreeNode father = ((DefaultMutableTreeNode) (current.getParent()));\r\n                // if the task as a projectTask parent\r\n                while (father != null) {\r\n                    if (((Task) (father.getUserObject())).isProjectTask()) {\r\n                        isAProjectTaskChild = true;\r\n                    }\r\n                    father = ((DefaultMutableTreeNode) (father.getParent()));\r\n                } \r\n                mapOriginalIDCopyID = new HashMap();\r\n                // copyID = new ArrayList ();\r\n                // pasteID = new ArrayList ();\r\n                TaskManagerImpl tmi = ((TaskManagerImpl) (getTaskManager()));\r\n                int MaxID = tmi.getMaxID();\r\n                // for(int i=0; i < cpNodesArrayList.size(); i++) {\r\n                for (int i = (cpNodesArrayList.size()) - 1; i >= 0; i--) {\r\n                    if (isAProjectTaskChild)\r\n                        ((Task) (((TaskNode) (cpNodesArrayList.get(i))).getUserObject())).setProjectTask(false);\r\n\r\n                    /* this will add new custom columns to the newly\n                    created task.\n                     */\r\n                    TreeNode sel = getSelectedTaskNode();\r\n                    TreeNode parent = null;\r\n                    if (sel != null) {\r\n                        parent = sel.getParent();\r\n                        if (parent != null)\r\n                            where = parent.getIndex(sel);\r\n\r\n                    }\r\n                    tasksList.add(((Task) (insertClonedNode((current == (rootNode) ? current : ((DefaultMutableTreeNode) (current.getParent()))), ((DefaultMutableTreeNode) (cpNodesArrayList.get(i))), ((where) + 1), true).getUserObject())));\r\n                    (nbTasks)++;\r\n                }\r\n                if ((cpDependencies) != null) {\r\n                    for (int i = 0; i < (cpDependencies.size()); i++) {\r\n                        // for(int i=cpDependencies.size()-1; i >= 0; i--) {\r\n                        TaskDependency td = ((TaskDependency) (cpDependencies.get(i)));\r\n                        Task dependee = td.getDependee();\r\n                        Task dependant = td.getDependant();\r\n                        TaskDependencyConstraint constraint = td.getConstraint();\r\n                        for (int j = 0; j < (allNodes.size()); j++) {\r\n                            for (int k = 0; k < (allNodes.size()); k++) {\r\n                                if ((dependant.equals(((Task) (((DefaultMutableTreeNode) (allNodes.get(j))).getUserObject())))) && (dependee.equals(((Task) (((DefaultMutableTreeNode) (allNodes.get(k))).getUserObject()))))) {\r\n                                    try {\r\n                                        TaskDependency newDependency = getTaskManager().getDependencyCollection().createDependency(getTaskManager().getTask(((Integer) (mapOriginalIDCopyID.get(new Integer(dependant.getTaskID())))).intValue()), getTaskManager().getTask(((Integer) (mapOriginalIDCopyID.get(new Integer(dependee.getTaskID())))).intValue()), getTaskManager().createConstraint(constraint.getID()));\r\n                                        newDependency.setDifference(td.getDifference());\r\n                                        newDependency.setHardness(td.getHardness());\r\n                                    } catch (TaskDependencyException e) {\r\n                                        myUIFacade.showErrorDialog(e);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                selectTasks(tasksList);\r\n            }\r\n        });\r\n        appli.refreshProjectInfos();\r\n    }\r\n}"},
 {"id":859, "name":"projectClosed()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.projectClosed()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void projectClosed() {\r\n    clearTree();\r\n    getTreeTable().reloadColumns();\r\n}"},
 {"id":860, "name":"projectModified()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.projectModified()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"// /////////////////////////////////////////////////////////////////////////\r\n// ProjectEventListener\r\npublic void projectModified() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":861, "name":"projectSaved()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.projectSaved()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void projectSaved() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":862, "name":"refreshAllChild(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.refreshAllChild(java.lang.String)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * In elder version, this function refresh all the related tasks to the\r\n * taskToMove. In the new version, this function is same as\r\n * forwardScheduling(). It will refresh all the tasks.\r\n *\r\n * @param taskToMove\r\n * \t\t\r\n */\r\npublic void refreshAllChild(String taskToMove) {\r\n    forwardScheduling();\r\n}"},
 {"id":863, "name":"removeChild(javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.removeChild(javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public DefaultMutableTreeNode removeChild(DefaultMutableTreeNode node) {\r\n    DefaultMutableTreeNode nodeCopy = new DefaultMutableTreeNode(node.getUserObject());\r\n    Enumeration children = node.children();\r\n    while (children.hasMoreElements()) {\r\n        DefaultMutableTreeNode child = ((DefaultMutableTreeNode) (children.nextElement()));\r\n        DefaultMutableTreeNode childCopy = this.removeChild(child);\r\n        nodeCopy.add(childCopy);\r\n        child.removeFromParent();\r\n        treeModel.nodesWereRemoved(node, new int[]{ 0 }, new Object[]{ child });\r\n    } \r\n    return nodeCopy;\r\n}"},
 {"id":864, "name":"removeCurrentNode(javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.removeCurrentNode(javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Remove the current node.\r\n *\r\n * @param current\r\n * \t\t\r\n */\r\nvoid removeCurrentNode(DefaultMutableTreeNode currentNode) {\r\n    DefaultMutableTreeNode parent = ((DefaultMutableTreeNode) (currentNode.getParent()));\r\n    getTaskManager().deleteTask(((Task) (currentNode.getUserObject())));\r\n    if (parent != null) {\r\n        ((GanttTreeTableModel) (treeModel)).removeNodeFromParent(currentNode);\r\n        forwardScheduling();\r\n        (nbTasks)--;\r\n        appli.refreshProjectInfos();\r\n        return;\r\n    }\r\n}"},
 {"id":865, "name":"restoreExpand(net.sourceforge.ganttproject.task.TaskNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.restoreExpand(net.sourceforge.ganttproject.task.TaskNode)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Retores the expand state of the node and its children.\r\n *\r\n * @param node\r\n * \t\t\r\n */\r\nprivate void restoreExpand(TaskNode node) {\r\n    Task task = ((Task) (node.getUserObject()));\r\n    boolean expand = task.getExpand();\r\n    Enumeration enumeration = node.children();\r\n    while (enumeration.hasMoreElements())\r\n        restoreExpand(((TaskNode) (enumeration.nextElement())));\r\n\r\n    if (expand)\r\n        getTreeTable().getTree().expandPath(new TreePath(node.getPath()));\r\n    else\r\n        getTreeTable().getTree().collapsePath(new TreePath(node.getPath()));\r\n\r\n    task.setExpand(expand);\r\n}"},
 {"id":866, "name":"selectTask(net.sourceforge.ganttproject.task.Task,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.selectTask(net.sourceforge.ganttproject.task.Task,boolean)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void selectTask(Task task, boolean multipleSelection) {\r\n    DefaultMutableTreeNode taskNode = null;\r\n    for (Enumeration nodes = rootNode.preorderEnumeration(); nodes.hasMoreElements();) {\r\n        DefaultMutableTreeNode nextNode = ((DefaultMutableTreeNode) (nodes.nextElement()));\r\n        if (!(nextNode instanceof TaskNode))\r\n            continue;\r\n\r\n        if (nextNode.getUserObject().equals(task)) {\r\n            taskNode = nextNode;\r\n            break;\r\n        }\r\n    }\r\n    if (taskNode != null) {\r\n        TreePath taskPath = new TreePath(taskNode.getPath());\r\n        if (multipleSelection)\r\n            if (treetable.getTree().getSelectionModel().isPathSelected(taskPath))\r\n                treetable.getTree().getSelectionModel().removeSelectionPath(taskPath);\r\n            else\r\n                treetable.getTree().getSelectionModel().addSelectionPath(taskPath);\r\n\r\n        else\r\n            treetable.getTree().getSelectionModel().setSelectionPath(taskPath);\r\n\r\n    }\r\n    TreePath[] paths = treetable.getTree().getSelectionModel().getSelectionPaths();\r\n    Mediator.getTaskSelectionManager().clear();\r\n    if (paths != null)\r\n        for (int i = 0; i < (paths.length); i++) {\r\n            TaskNode tn = ((TaskNode) (paths[i].getLastPathComponent()));\r\n            if (!(tn.isRoot()))\r\n                Mediator.getTaskSelectionManager().addTask(((Task) (tn.getUserObject())));\r\n\r\n        }\r\n\r\n}"},
 {"id":867, "name":"selectTasks(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.selectTasks(java.util.List)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void selectTasks(List tasksList) {\r\n    boolean multi = false;\r\n    Iterator it = tasksList.iterator();\r\n    if (it.hasNext())\r\n        selectTask(((Task) (it.next())), false);\r\n\r\n    while (it.hasNext())\r\n        selectTask(((Task) (it.next())), true);\r\n\r\n}"},
 {"id":868, "name":"selectTreeRow(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.selectTreeRow(int)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Select the row of the tree\r\n */\r\npublic void selectTreeRow(int row) {\r\n    treetable.getTree().setSelectionRow(row);\r\n}"},
 {"id":869, "name":"setActions()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.setActions()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void setActions() {\r\n    treetable.setAction(appli.getCopyAction());\r\n    treetable.setAction(appli.getPasteAction());\r\n    treetable.setAction(appli.getCutAction());\r\n    treetable.addAction(myIndentAction, KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0));\r\n    treetable.addAction(myDedentAction, KeyStroke.getKeyStroke(KeyEvent.VK_TAB, KeyEvent.SHIFT_DOWN_MASK));\r\n}"},
 {"id":870, "name":"setDelay(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.delay.Delay)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.setDelay(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.delay.Delay)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void setDelay(final Task task, final Delay delay) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            TaskNode taskNode = ((TaskNode) (getNode(task.getTaskID())));\r\n            if (taskNode != null)\r\n                treetable.setDelay(taskNode, delay);\r\n\r\n        }\r\n    });\r\n}"},
 {"id":871, "name":"setEditingTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.setEditingTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Edits the <code>t</code> task name in the treetable.\r\n */\r\npublic void setEditingTask(Task t) {\r\n    selectTask(t, false);\r\n    TreePath tp = new TreePath(getSelectedTaskNode().getPath());\r\n    int c = getTable().convertColumnIndexToView(getTable().getColumn(GanttTreeTableModel.strColName).getModelIndex());\r\n    treetable.getTreeTable().editingStopped(new ChangeEvent(treetable.getTreeTable()));\r\n    treetable.editNewTask(t);\r\n    // treetable.getTreeTable().editCellAt(\r\n    // treetable.getTree().getRowForPath(tp), c);\r\n    // treetable.requestFocus();\r\n    treetable.centerViewOnSelectedCell();\r\n}"},
 {"id":872, "name":"setGraphicArea(net.sourceforge.ganttproject.GanttGraphicArea)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.setGraphicArea(net.sourceforge.ganttproject.GanttGraphicArea)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Change grpahic part\r\n */\r\npublic void setGraphicArea(GanttGraphicArea area) {\r\n    this.area = area;\r\n}"},
 {"id":873, "name":"setLinkTasksAction(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.setLinkTasksAction(javax.swing.Action)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void setLinkTasksAction(Action action) {\r\n    myLinkTasksAction = action;\r\n}"},
 {"id":874, "name":"setTaskPropertiesAction(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.setTaskPropertiesAction(javax.swing.Action)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"void setTaskPropertiesAction(Action action) {\r\n    myTaskPropertiesAction = action;\r\n    treetable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK), action.getValue(Action.NAME));\r\n    treetable.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK), action.getValue(Action.NAME));\r\n    treetable.getActionMap().put(action.getValue(Action.NAME), action);\r\n}"},
 {"id":875, "name":"setUnlinkTasksAction(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.setUnlinkTasksAction(javax.swing.Action)", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"// \r\npublic void setUnlinkTasksAction(Action action) {\r\n    myUnlinkTasksAction = action;\r\n}"},
 {"id":876, "name":"stopEditing()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.stopEditing()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"public void stopEditing() {\r\n    treetable.getTable().editingCanceled(new ChangeEvent(treetable.getTreeTable()));\r\n    treetable.getTreeTable().editingCanceled(new ChangeEvent(treetable.getTreeTable()));\r\n}"},
 {"id":877, "name":"upCurrentNodes()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2.upCurrentNodes()", "ownerclassid":"73", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2", "sourcecode":"/**\r\n * Function to put up the selected tasks\r\n */\r\npublic void upCurrentNodes() {\r\n    final DefaultMutableTreeNode[] cdmtn = getSelectedNodes();\r\n    if (cdmtn == null) {\r\n        myUIFacade.setStatusText(language.getText(\"msg21\"));\r\n        return;\r\n    }\r\n    final TreePath[] selectedPaths = new TreePath[cdmtn.length];\r\n    final GanttTree2 gt2 = this;\r\n    appli.getUndoManager().undoableEdit(\"Up\", new Runnable() {\r\n        public void run() {\r\n            for (int i = 0; i < (cdmtn.length); i++) {\r\n                DefaultMutableTreeNode father = gt2.getFatherNode(cdmtn[i]);\r\n                int index = father.getIndex(((TreeNode) (cdmtn[i])));\r\n                index--;\r\n                Task task = ((Task) (cdmtn[i].getUserObject()));\r\n                if (index >= 0) {\r\n                    DefaultMutableTreeNode[] child = new DefaultMutableTreeNode[cdmtn[i].getChildCount()];\r\n                    if (task.getExpand()) {\r\n                        for (int j = 0; j < (cdmtn[i].getChildCount()); j++) {\r\n                            child[j] = ((DefaultMutableTreeNode) (cdmtn[i].getChildAt(j)));\r\n                        }\r\n                        for (int j = 0; j < (child.length); j++) {\r\n                            child[j].removeFromParent();\r\n                            treeModel.nodesWereRemoved(cdmtn[i], new int[]{ 0 }, new Object[]{ child });\r\n                        }\r\n                    }\r\n                    cdmtn[i].removeFromParent();\r\n                    treeModel.nodesWereRemoved(father, new int[]{ index + 1 }, new Object[]{ cdmtn });\r\n                    father.insert(cdmtn[i], index);\r\n                    treeModel.nodesWereInserted(father, new int[]{ index });\r\n                    if (task.getExpand()) {\r\n                        for (int j = 0; j < (child.length); j++) {\r\n                            cdmtn[i].insert(child[j], j);\r\n                            treeModel.nodesWereInserted(cdmtn[i], new int[]{ j });\r\n                        }\r\n                    }\r\n                    forwardScheduling();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    // treetable.getTree().setSelectionPaths(selectedPaths);\r\n    area.repaint();\r\n}"},
 {"id":878, "name":"-init-(javax.swing.tree.DefaultTreeModel)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$AutoscrollingTree.-init-(javax.swing.tree.DefaultTreeModel)", "ownerclassid":"65", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$AutoscrollingTree", "sourcecode":"public AutoscrollingTree(DefaultTreeModel treeModel) {\r\n    super(treeModel);\r\n}"},
 {"id":879, "name":"autoscroll(java.awt.Point)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$AutoscrollingTree.autoscroll(java.awt.Point)", "ownerclassid":"65", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$AutoscrollingTree", "sourcecode":"public void autoscroll(Point pt) {\r\n    // Figure out which row we\ufffde on.\r\n    int nRow = this.getClosestRowForLocation(pt.x, pt.y);\r\n    // If we are not on a row then ignore this autoscroll request\r\n    if (nRow < 0)\r\n        return;\r\n\r\n    Rectangle raOuter = getBounds();\r\n    // Now decide if the row is at the top of the screen or at the\r\n    // bottom. We do this to make the previous row (or the next\r\n    // row) visible as appropriate. If we\ufffde at the absolute top or\r\n    // bottom, just return the first or last row respectively.\r\n    nRow = (((pt.y) + (raOuter.y)) <= (GanttTree2.AUTOSCROLL_MARGIN)// Is row at top of\r\n    ) ? // screen?\r\n    nRow <= 0 ? 0 : nRow - 1// Yes, scroll up one row\r\n     : nRow < ((this.getRowCount()) - 1) ? nRow + 1 : nRow;// No,\r\n\r\n    // scroll\r\n    // down\r\n    // one\r\n    // row\r\n    this.scrollRowToVisible(nRow);\r\n}"},
 {"id":880, "name":"getAutoscrollInsets()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$AutoscrollingTree.getAutoscrollInsets()", "ownerclassid":"65", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$AutoscrollingTree", "sourcecode":"// Calculate the insets for the *JTREE*, not the viewport\r\n// the tree is in. This makes it a bit messy.\r\npublic Insets getAutoscrollInsets() {\r\n    Rectangle raOuter = getBounds();\r\n    Rectangle raInner = getParent().getBounds();\r\n    return new Insets((((raInner.y) - (raOuter.y)) + (GanttTree2.AUTOSCROLL_MARGIN)), (((raInner.x) - (raOuter.x)) + (GanttTree2.AUTOSCROLL_MARGIN)), (((((raOuter.height) - (raInner.height)) - (raInner.y)) + (raOuter.y)) + (GanttTree2.AUTOSCROLL_MARGIN)), (((((raOuter.width) - (raInner.width)) - (raInner.x)) + (raOuter.x)) + (GanttTree2.AUTOSCROLL_MARGIN)));\r\n}"},
 {"id":881, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttAdjustmentListener.-init-()", "ownerclassid":"66", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttAdjustmentListener", "sourcecode":"GanttAdjustmentListener() {\r\n}"},
 {"id":882, "name":"adjustmentValueChanged(java.awt.event.AdjustmentEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttAdjustmentListener.adjustmentValueChanged(java.awt.event.AdjustmentEvent)", "ownerclassid":"66", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttAdjustmentListener", "sourcecode":"public void adjustmentValueChanged(AdjustmentEvent e) {\r\n    if ((area) != null) {\r\n        int v = e.getValue();\r\n        area.setScrollBar(v);\r\n        area.repaint();\r\n    }\r\n}"},
 {"id":883, "name":"-init-(javax.swing.tree.TreePath)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTransferableTreePath.-init-(javax.swing.tree.TreePath)", "ownerclassid":"67", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTransferableTreePath", "sourcecode":"/**\r\n * Constructs a transferrable tree path object for the specified path.\r\n */\r\npublic GanttTransferableTreePath(TreePath path) {\r\n    _path = path;\r\n}"},
 {"id":884, "name":"getTransferData(java.awt.datatransfer.DataFlavor)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTransferableTreePath.getTransferData(java.awt.datatransfer.DataFlavor)", "ownerclassid":"67", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTransferableTreePath", "sourcecode":"public synchronized Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {\r\n    // DataFlavor.javaJVMLocalObjectMimeType))\r\n    if (flavor.isMimeTypeEqual(GanttTree2.GanttTransferableTreePath.TREEPATH_FLAVOR.getMimeType()))\r\n        return _path;\r\n    else\r\n        throw new UnsupportedFlavorException(flavor);\r\n\r\n}"},
 {"id":885, "name":"getTransferDataFlavors()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTransferableTreePath.getTransferDataFlavors()", "ownerclassid":"67", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTransferableTreePath", "sourcecode":"// Transferable interface methods...\r\npublic DataFlavor[] getTransferDataFlavors() {\r\n    return _flavors;\r\n}"},
 {"id":886, "name":"isDataFlavorSupported(java.awt.datatransfer.DataFlavor)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTransferableTreePath.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)", "ownerclassid":"67", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTransferableTreePath", "sourcecode":"public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n    return Arrays.asList(_flavors).contains(flavor);\r\n}"},
 {"id":887, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeCellRenderer.-init-()", "ownerclassid":"68", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeCellRenderer", "sourcecode":"public GanttTreeCellRenderer() {\r\n    setOpaque(true);\r\n}"},
 {"id":888, "name":"getToolTip(net.sourceforge.ganttproject.task.Task,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeCellRenderer.getToolTip(net.sourceforge.ganttproject.task.Task,int)", "ownerclassid":"68", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeCellRenderer", "sourcecode":"public String getToolTip(Task task, int type) {\r\n    String res = \"<html><body bgcolor=#EAEAEA>\";\r\n    res += (((\"<b>\" + (task.toString())) + \"</b>\") + \"<br>\") + (task.getStart());\r\n    if (type != 1) {\r\n        res += \"  -  \" + (task.getEnd());\r\n    }\r\n    if (type == 1) {\r\n        res += \"<br>\" + (language.getText(\"meetingPoint\"));\r\n    }\r\n    res += \"<br><b>Pri</b> \" + ((task.getPriority()) == 0 ? language.getText(\"low\") : (task.getPriority()) == 1 ? language.getText(\"normal\") : language.getText(\"hight\"));\r\n    ResourceAssignment[] assignments = task.getAssignments();\r\n    if ((assignments.length) > 0) {\r\n        res += \"<br><b>Assign to </b><br>\";\r\n        for (int j = 0; j < (assignments.length); j++) {\r\n            res += (\"&nbsp;&nbsp;\" + (assignments[j].getResource().getName())) + \"<br>\";\r\n        }\r\n    }\r\n    if (((task.getNotes()) != null) && (!(task.getNotes().equals(\"\")))) {\r\n        String notes = task.getNotes();\r\n        res += \"<br><b>Notes </b>: \";\r\n        int maxLength = 150;\r\n        if ((notes.length()) > maxLength) {\r\n            notes = notes.substring(0, maxLength);\r\n            int i = maxLength - 1;\r\n            for (; (i >= 0) && ((notes.charAt(i)) !=  ); i--);\r\n            notes = notes.substring(0, i);\r\n            notes += \" <b>( . . . )</b>\";\r\n        }\r\n        notes = notes.replaceAll(\"\n\", \"<br>\");\r\n        res += (\"<font size=\"-2\">\" + notes) + \"</font>\";\r\n    }\r\n    res += \"</body></html>\";\r\n    return res;\r\n}"},
 {"id":889, "name":"getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)", "ownerclassid":"68", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeCellRenderer", "sourcecode":"public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {\r\n    Task task = ((Task) (((DefaultMutableTreeNode) (value)).getUserObject()));// getTask(value.toString());\r\n\r\n    if (task == null) {\r\n        return this;\r\n    }\r\n    int type = 0;\r\n    setFont(Fonts.GANTT_TREE_FONT);\r\n    if (task.isMilestone()) {\r\n        setIcon(new ImageIcon(getClass().getResource(\"/icons/meeting.gif\")));\r\n        type = 1;\r\n    } else\r\n        if (leaf) {\r\n            if ((task.getPriority()) == (GanttTask.LOW)) {\r\n                setIcon(new ImageIcon(getClass().getResource(\"/icons/task1.gif\")));\r\n            } else\r\n                if ((task.getPriority()) == (GanttTask.NORMAL)) {\r\n                    setIcon(new ImageIcon(getClass().getResource(\"/icons/task.gif\")));\r\n                } else\r\n                    if ((task.getPriority()) == (GanttTask.HIGHT)) {\r\n                        setIcon(new ImageIcon(getClass().getResource(\"/icons/task2.gif\")));\r\n                    }\r\n\r\n\r\n            type = 2;\r\n        } else {\r\n            setIcon(new ImageIcon(getClass().getResource(\"/icons/mtask.gif\")));\r\n            setFont(Fonts.GANTT_TREE_FONT2);\r\n        }\r\n\r\n    setText(task.toString());\r\n    setToolTipText(getToolTip(task, type));\r\n    setBackground((selected ? new Color(((float) (0.29)), ((float) (0.349)), ((float) (0.643))) : (row % 2) == 0 ? Color.white : new Color(((float) (0.933)), ((float) (0.933)), ((float) (0.933)))));\r\n    setForeground((selected ? Color.white : Color.black));\r\n    return this;\r\n}"},
 {"id":890, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener.-init-()", "ownerclassid":"69", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener", "sourcecode":"public GanttTreeDropListener() {\r\n    cueLineColor = new Color(SystemColor.controlShadow.getRed(), SystemColor.controlShadow.getGreen(), SystemColor.controlShadow.getBlue(), 64);\r\n    // Set up a hover timer, so that a node will be automatically\r\n    // expanded or collapsed\r\n    // if the user lingers on it for more than a short time\r\n    hoverTimer = new Timer(1000, new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!(treetable.getTree().isExpanded(lastPath))) {\r\n                treetable.getTree().expandPath(lastPath);\r\n            }\r\n        }\r\n    });\r\n    // Set timer to one-shot mode - it will be restartet when the\r\n    // cursor is over a new node\r\n    hoverTimer.setRepeats(false);\r\n}"},
 {"id":891, "name":"dragEnter(java.awt.dnd.DropTargetDragEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener.dragEnter(java.awt.dnd.DropTargetDragEvent)", "ownerclassid":"69", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener", "sourcecode":"public void dragEnter(DropTargetDragEvent dtde) {\r\n    if ((ghostImage) == null) {\r\n        // In case if you drag a file from out and its not an\r\n        // acceptable, and it can crash if the image is null\r\n        ghostImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE);\r\n    }\r\n    if (!(isDragAcceptable(dtde)))\r\n        dtde.rejectDrag();\r\n    else\r\n        dtde.acceptDrag(dtde.getDropAction());\r\n\r\n}"},
 {"id":892, "name":"dragExit(java.awt.dnd.DropTargetEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener.dragExit(java.awt.dnd.DropTargetEvent)", "ownerclassid":"69", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener", "sourcecode":"public void dragExit(DropTargetEvent dte) {\r\n    if (!(DragSource.isDragImageSupported())) {\r\n        repaint(ghostImageRect.getBounds());\r\n    }\r\n    treetable.repaint();\r\n}"},
 {"id":893, "name":"dragOver(java.awt.dnd.DropTargetDragEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener.dragOver(java.awt.dnd.DropTargetDragEvent)", "ownerclassid":"69", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener", "sourcecode":"public void dragOver(DropTargetDragEvent dtde) {\r\n    if (!(isDragAcceptable(dtde)))\r\n        dtde.rejectDrag();\r\n    else\r\n        dtde.acceptDrag(dtde.getDropAction());\r\n\r\n    // Even if the mouse is not moving, this method is still invoked\r\n    // 10 times per second\r\n    Point pt = dtde.getLocation();\r\n    if (pt.equals(lastEventPoint))\r\n        return;\r\n\r\n    lastEventPoint = pt;\r\n    Graphics2D g2 = ((Graphics2D) (treetable.getGraphics()));\r\n    // If a drag image is not supported by the platform, then draw our\r\n    // own drag image\r\n    if (!(DragSource.isDragImageSupported())) {\r\n        // Rub out the last ghost image and cue line\r\n        treetable.paintImmediately(ghostImageRect.getBounds());\r\n        // And remember where we are about to draw the new ghost image\r\n        ghostImageRect.setRect(((pt.x) - (offsetPoint.x)), ((pt.y) - (offsetPoint.y)), ghostImage.getWidth(), ghostImage.getHeight());\r\n        g2.drawImage(ghostImage, AffineTransform.getTranslateInstance(ghostImageRect.getX(), ghostImageRect.getY()), null);\r\n    } else {\r\n        // Just rub out the last cue line\r\n        treetable.paintImmediately(cueLineRect.getBounds());\r\n    }\r\n    TreePath path = treetable.getTree().getClosestPathForLocation(pt.x, pt.y);\r\n    if (!(path == (lastPath))) {\r\n        lastPath = path;\r\n        hoverTimer.restart();\r\n    }\r\n    // In any case draw (over the ghost image if necessary) a cue line\r\n    // indicating where a drop will occur\r\n    Rectangle raPath = treetable.getTree().getPathBounds(path);\r\n    if (raPath == null)\r\n        raPath = new Rectangle(1, 1);\r\n\r\n    cueLineRect.setRect(0, ((raPath.y) + ((int) (raPath.getHeight()))), getWidth(), 2);\r\n    g2.setColor(cueLineColor);\r\n    g2.fill(cueLineRect);\r\n    // And include the cue line in the area to be rubbed out next time\r\n    ghostImageRect = ghostImageRect.createUnion(cueLineRect);\r\n}"},
 {"id":894, "name":"drop(java.awt.dnd.DropTargetDropEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener.drop(java.awt.dnd.DropTargetDropEvent)", "ownerclassid":"69", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener", "sourcecode":"public void drop(DropTargetDropEvent dtde) {\r\n    if (!(isDropAcceptable(dtde))) {\r\n        dtde.rejectDrop();\r\n        return;\r\n    }\r\n    // Prevent hover timer from doing an unwanted expandPath or\r\n    // collapsePath\r\n    hoverTimer.stop();\r\n    dtde.acceptDrop(dtde.getDropAction());\r\n    Transferable transferable = dtde.getTransferable();\r\n    DataFlavor[] flavors = transferable.getTransferDataFlavors();\r\n    for (int i = 0; i < (flavors.length); i++) {\r\n        DataFlavor flavor = flavors[i];\r\n        if (flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType)) {\r\n            try {\r\n                Point pt = dtde.getLocation();\r\n                DefaultMutableTreeNode target = ((DefaultMutableTreeNode) (treetable.getTree().getClosestPathForLocation(pt.x, pt.y).getLastPathComponent()));\r\n                TreePath pathSource = ((TreePath) (transferable.getTransferData(flavor)));\r\n                DefaultMutableTreeNode source = ((DefaultMutableTreeNode) (pathSource.getLastPathComponent()));\r\n                TreePath pathNewChild = null;\r\n                TreeNode sourceFather = source.getParent();\r\n                int index = sourceFather.getIndex(source);\r\n                source.removeFromParent();\r\n                treeModel.nodesWereRemoved(sourceFather, new int[]{ index }, new Object[]{ source });\r\n                ((GanttTreeTableModel) (treeModel)).insertNodeInto(source, target, 0);\r\n                pathNewChild = new TreePath(((DefaultMutableTreeNode) (pathSource.getLastPathComponent())).getPath());\r\n                if (pathNewChild != null) {\r\n                    treetable.getTree().setSelectionPath(pathNewChild);// Mark\r\n\r\n                    // this\r\n                    // as\r\n                    // the\r\n                    // selected\r\n                    // path\r\n                    // in\r\n                    // the\r\n                    // tree\r\n                }\r\n                // refreshAllFather(source.getUserObject().toString());\r\n                expandRefresh(source);\r\n                forwardScheduling();\r\n                area.repaint();\r\n                appli.setAskForSave(true);\r\n                break;// No need to check remaining flavors\r\n\r\n            } catch (UnsupportedFlavorException ufe) {\r\n                System.out.println(ufe);\r\n                dtde.dropComplete(false);\r\n                return;\r\n            } catch (IOException ioe) {\r\n                System.out.println(ioe);\r\n                dtde.dropComplete(false);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    dtde.dropComplete(true);\r\n}"},
 {"id":895, "name":"dropActionChanged(java.awt.dnd.DropTargetDragEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener.dropActionChanged(java.awt.dnd.DropTargetDragEvent)", "ownerclassid":"69", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener", "sourcecode":"public void dropActionChanged(DropTargetDragEvent dtde) {\r\n    if (!(isDragAcceptable(dtde)))\r\n        dtde.rejectDrag();\r\n    else\r\n        dtde.acceptDrag(dtde.getDropAction());\r\n\r\n}"},
 {"id":896, "name":"isDragAcceptable(java.awt.dnd.DropTargetDragEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener.isDragAcceptable(java.awt.dnd.DropTargetDragEvent)", "ownerclassid":"69", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener", "sourcecode":"public boolean isDragAcceptable(DropTargetDragEvent e) {\r\n    // Only accept COPY or MOVE gestures (ie LINK is not supported)\r\n    if (((e.getDropAction()) & (DnDConstants.ACTION_COPY_OR_MOVE)) == 0) {\r\n        return false;\r\n    }\r\n    // Only accept this particular flavor\r\n    if (!(e.isDataFlavorSupported(GanttTree2.GanttTransferableTreePath.TREEPATH_FLAVOR))) {\r\n        return false;\r\n    }\r\n    // Do not accept dropping on the source node\r\n    Point pt = e.getLocation();\r\n    TreePath path = treetable.getTree().getClosestPathForLocation(pt.x, pt.y);\r\n    if (dragPath.isDescendant(path)) {\r\n        return false;\r\n    }\r\n    if (path.equals(dragPath)) {\r\n        return false;\r\n    }\r\n    // Check if the task is a milestone task\r\n    Task task = ((Task) (((DefaultMutableTreeNode) (path.getLastPathComponent())).getUserObject()));\r\n    if (task.isMilestone())\r\n        return false;\r\n\r\n    return true;\r\n}"},
 {"id":897, "name":"isDropAcceptable(java.awt.dnd.DropTargetDropEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener.isDropAcceptable(java.awt.dnd.DropTargetDropEvent)", "ownerclassid":"69", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeDropListener", "sourcecode":"public boolean isDropAcceptable(DropTargetDropEvent e) {\r\n    // Only accept COPY or MOVE gestures (ie LINK is not supported)\r\n    if (((e.getDropAction()) & (DnDConstants.ACTION_COPY_OR_MOVE)) == 0) {\r\n        return false;\r\n    }\r\n    // Only accept this particular flavor\r\n    if (!(e.isDataFlavorSupported(GanttTree2.GanttTransferableTreePath.TREEPATH_FLAVOR))) {\r\n        return false;\r\n    }\r\n    // prohibit dropping onto the drag source\r\n    Point pt = e.getLocation();\r\n    TreePath path = treetable.getTree().getClosestPathForLocation(pt.x, pt.y);\r\n    if (path.equals(dragPath)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":898, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeExpansionListener.-init-()", "ownerclassid":"70", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeExpansionListener", "sourcecode":"GanttTreeExpansionListener() {\r\n}"},
 {"id":899, "name":"treeCollapsed(javax.swing.event.TreeExpansionEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeExpansionListener.treeCollapsed(javax.swing.event.TreeExpansionEvent)", "ownerclassid":"70", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeExpansionListener", "sourcecode":"/**\r\n * Collapse\r\n */\r\npublic void treeCollapsed(TreeExpansionEvent e) {\r\n    if ((area) != null) {\r\n        area.repaint();\r\n    }\r\n    DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (e.getPath().getLastPathComponent()));\r\n    Task task = ((Task) (node.getUserObject()));\r\n    /* int index = expand.indexOf(new Integer(task.getTaskID())); if\n    (index >= 0) { expand.remove(index); appli.setAskForSave(true); }\n     */\r\n    task.setExpand(false);\r\n    appli.setAskForSave(true);\r\n}"},
 {"id":900, "name":"treeExpanded(javax.swing.event.TreeExpansionEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeExpansionListener.treeExpanded(javax.swing.event.TreeExpansionEvent)", "ownerclassid":"70", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeExpansionListener", "sourcecode":"/**\r\n * Expansion\r\n */\r\npublic void treeExpanded(TreeExpansionEvent e) {\r\n    if ((area) != null) {\r\n        area.repaint();\r\n    }\r\n    DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (e.getPath().getLastPathComponent()));\r\n    Task task = ((Task) (node.getUserObject()));\r\n    /* if(!expand.contains(new Integer(task.getTaskID()))) {\n    expand.add(new Integer(task.getTaskID()));\n    appli.setAskForSave(true); }\n     */\r\n    task.setExpand(true);\r\n    appli.setAskForSave(true);\r\n}"},
 {"id":901, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener.-init-()", "ownerclassid":"71", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener", "sourcecode":"GanttTreeModelListener() {\r\n}"},
 {"id":902, "name":"treeNodesChanged(javax.swing.event.TreeModelEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener.treeNodesChanged(javax.swing.event.TreeModelEvent)", "ownerclassid":"71", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener", "sourcecode":"/**\r\n * modify a node\r\n */\r\npublic void treeNodesChanged(TreeModelEvent e) {\r\n    if ((area) != null) {\r\n        area.repaint();\r\n    }\r\n}"},
 {"id":903, "name":"treeNodesInserted(javax.swing.event.TreeModelEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener.treeNodesInserted(javax.swing.event.TreeModelEvent)", "ownerclassid":"71", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener", "sourcecode":"/**\r\n * Insert a new node.\r\n */\r\npublic void treeNodesInserted(TreeModelEvent e) {\r\n    DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (e.getTreePath().getLastPathComponent()));\r\n    Task task = ((Task) (node.getUserObject()));\r\n    /* if (!expand.contains(new Integer(task.getTaskID()))) {\n    expand.add(new Integer(task.getTaskID())); }\n     */\r\n    // task.setExpand(true);\r\n    if ((area) != null)\r\n        area.repaint();\r\n\r\n}"},
 {"id":904, "name":"treeNodesRemoved(javax.swing.event.TreeModelEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener.treeNodesRemoved(javax.swing.event.TreeModelEvent)", "ownerclassid":"71", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener", "sourcecode":"/**\r\n * Delete a node.\r\n */\r\npublic void treeNodesRemoved(TreeModelEvent e) {\r\n    if ((area) != null) {\r\n        area.repaint();\r\n    }\r\n}"},
 {"id":905, "name":"treeStructureChanged(javax.swing.event.TreeModelEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener.treeStructureChanged(javax.swing.event.TreeModelEvent)", "ownerclassid":"71", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeModelListener", "sourcecode":"/**\r\n * Structur change.\r\n */\r\npublic void treeStructureChanged(TreeModelEvent e) {\r\n    if ((area) != null) {\r\n        area.repaint();\r\n    }\r\n}"},
 {"id":906, "name":"-init-(javax.swing.tree.DefaultMutableTreeNode,javax.swing.tree.DefaultMutableTreeNode,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$HiddenTask.-init-(javax.swing.tree.DefaultMutableTreeNode,javax.swing.tree.DefaultMutableTreeNode,int)", "ownerclassid":"72", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$HiddenTask", "sourcecode":"public HiddenTask(DefaultMutableTreeNode node, DefaultMutableTreeNode parent, int index) {\r\n    this.node = node;\r\n    this.parent = parent;\r\n    this.index = index;\r\n    // this.node.setParent(this.parent);\r\n}"},
 {"id":907, "name":"compareTo(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$HiddenTask.compareTo(java.lang.Object)", "ownerclassid":"72", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$HiddenTask", "sourcecode":"/**\r\n *\r\n *\r\n * @see java.lang.Comparable#compareTo(java.lang.Object)\r\n */\r\npublic int compareTo(Object o) {\r\n    if (o == null)\r\n        return 0;\r\n\r\n    if (o instanceof GanttTree2.HiddenTask) {\r\n        GanttTree2.HiddenTask ht = ((GanttTree2.HiddenTask) (o));\r\n        return (this.index) - (ht.index);\r\n    }\r\n    return 0;\r\n}"},
 {"id":908, "name":"getIndex()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$HiddenTask.getIndex()", "ownerclassid":"72", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$HiddenTask", "sourcecode":"public int getIndex() {\r\n    return index;\r\n}"},
 {"id":909, "name":"getNode()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$HiddenTask.getNode()", "ownerclassid":"72", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$HiddenTask", "sourcecode":"public DefaultMutableTreeNode getNode() {\r\n    return node;\r\n}"},
 {"id":910, "name":"getParent()", "fullmethod":"net.sourceforge.ganttproject.GanttTree2$HiddenTask.getParent()", "ownerclassid":"72", "ownerclassname":"net.sourceforge.ganttproject.GanttTree2$HiddenTask", "sourcecode":"public DefaultMutableTreeNode getParent() {\r\n    return parent;\r\n}"},
 {"id":911, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttTreeTableModel)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttTreeTableModel)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"/**\r\n * Creates an instance of GanttTreeTable with the given TreeTableModel.\r\n *\r\n * @param project\r\n * \t\t\r\n * @param model\r\n * \t\tTreeTableModel.\r\n */\r\npublic GanttTreeTable(IGanttProject project, UIFacade uifacade, GanttTreeTableModel model) {\r\n    super(project, model);\r\n    GanttLanguage.getInstance().addListener(this);\r\n    initTreeTable();\r\n    this.ttModel = model;\r\n    myUIfacade = uifacade;\r\n}"},
 {"id":912, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.-init-()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"1() {\r\n}"},
 {"id":913, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.-init-(java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"public DisplayedColumn(String id) {\r\n    this.id = id;\r\n}"},
 {"id":914, "name":"-init-(javax.swing.table.TableColumn)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.-init-(javax.swing.table.TableColumn)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"/**\r\n * Creates a new ColumnKeeper for the given TableColumn.\r\n *\r\n * @param tc\r\n * \t\tTableColumn to manage.\r\n */\r\npublic ColumnKeeper(TableColumn tc) {\r\n    column = tc;\r\n    index = column.getModelIndex();\r\n}"},
 {"id":915, "name":"addAction(javax.swing.Action,javax.swing.KeyStroke)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.addAction(javax.swing.Action,javax.swing.KeyStroke)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":916, "name":"addKeyListener(java.awt.event.KeyListener)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.addKeyListener(java.awt.event.KeyListener)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":917, "name":"addMouseListener(java.awt.event.MouseListener)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.addMouseListener(java.awt.event.MouseListener)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":918, "name":"addNewCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.addNewCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":919, "name":"addScrollPaneMouseListener(java.awt.event.MouseListener)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.addScrollPaneMouseListener(java.awt.event.MouseListener)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":920, "name":"calculateWidth()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.calculateWidth()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":921, "name":"centerViewOnSelectedCell()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.centerViewOnSelectedCell()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":922, "name":"createPopupMenu()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.createPopupMenu()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":923, "name":"customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"public void customColumsChange(CustomColumEvent event) {\r\n    switch (event.getType()) {\r\n        case CustomColumEvent.EVENT_ADD :\r\n            addNewCustomColumn(event.getColumn());\r\n            break;\r\n        case CustomColumEvent.EVENT_REMOVE :\r\n            deleteCustomColumn(event.getColumn());\r\n            break;\r\n        case CustomColumEvent.EVENT_RENAME :\r\n            renameCustomcolumn(event.getOldName(), event.getColName());\r\n            break;\r\n    }\r\n}"},
 {"id":924, "name":"deleteColumnFromUI(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.deleteColumnFromUI(java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":925, "name":"deleteCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.deleteCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"/**\r\n * Delete permanently a custom column.\r\n *\r\n * @param name\r\n * \t\tName of the column to delete.\r\n */\r\npublic void deleteCustomColumn(CustomColumn column) {\r\n    final String name = column.getName();\r\n    // the column has to be displayed to be removed.\r\n    this.displayColumn(name);\r\n    deleteColumnFromUI(name);\r\n    // Every tasks\r\n    TaskContainmentHierarchyFacade tchf = Mediator.getGanttProjectSingleton().getTaskManager().getTaskHierarchy();\r\n    tchf.getRootTask().getCustomValues().removeCustomColumn(name);\r\n    removeCustomColumnToAllNestedTask(tchf, tchf.getRootTask(), name);\r\n    Mediator.getGanttProjectSingleton().setAskForSave(true);\r\n}"},
 {"id":926, "name":"displayAllColumns()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.displayAllColumns()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"/**\r\n * Displays all the table columns.\r\n */\r\nprivate void displayAllColumns() {\r\n    Iterator it = mapTableColumnColumnKeeper.values().iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.ColumnKeeper ck = ((GanttTreeTable.ColumnKeeper) (it.next()));\r\n        if (!(ck.isShown))\r\n            ck.show();\r\n\r\n    } \r\n    // createPopupMenu();\r\n}"},
 {"id":927, "name":"displayColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.displayColumn(java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":928, "name":"editNewTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.editNewTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":929, "name":"getDisplayColumns()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.getDisplayColumns()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"public GanttTreeTable.DisplayedColumnsList getDisplayColumns() {\r\n    updateDisplayedColumnsOrder();\r\n    return this.listDisplayedColumns;\r\n}"},
 {"id":930, "name":"getIdForName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.getIdForName(java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"String getIdForName(String colName) {\r\n    String id = null;\r\n    if (colName.equals(GanttTreeTableModel.strColType))\r\n        id = \"tpd0\";\r\n    else\r\n        if (colName.equals(GanttTreeTableModel.strColPriority))\r\n            id = \"tpd1\";\r\n        else\r\n            if (colName.equals(GanttTreeTableModel.strColInfo))\r\n                id = \"tpd2\";\r\n            else\r\n                if (colName.equals(GanttTreeTableModel.strColName))\r\n                    id = \"tpd3\";\r\n                else\r\n                    if (colName.equals(GanttTreeTableModel.strColBegDate))\r\n                        id = \"tpd4\";\r\n                    else\r\n                        if (colName.equals(GanttTreeTableModel.strColEndDate))\r\n                            id = \"tpd5\";\r\n                        else\r\n                            if (colName.equals(GanttTreeTableModel.strColDuration))\r\n                                id = \"tpd6\";\r\n                            else\r\n                                if (colName.equals(GanttTreeTableModel.strColCompletion))\r\n                                    id = \"tpd7\";\r\n                                else\r\n                                    if (colName.equals(GanttTreeTableModel.strColCoordinator))\r\n                                        id = \"tpd8\";\r\n                                    else\r\n                                        if (colName.equals(GanttTreeTableModel.strColPredecessors))\r\n                                            id = \"tpd9\";\r\n                                        else\r\n                                            if (colName.equals(GanttTreeTableModel.strColID))\r\n                                                id = \"tpd10\";\r\n                                            else\r\n                                                id = getProject().getCustomColumnsStorage().getIdFromName(colName);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return id;\r\n}"},
 {"id":931, "name":"getNameForId(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.getNameForId(java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"private String getNameForId(String id) {\r\n    String name = null;\r\n    if (id.equals(\"tpd0\"))\r\n        name = GanttTreeTableModel.strColType;\r\n    else\r\n        if (id.equals(\"tpd1\"))\r\n            name = GanttTreeTableModel.strColPriority;\r\n        else\r\n            if (id.equals(\"tpd2\"))\r\n                name = GanttTreeTableModel.strColInfo;\r\n            else\r\n                if (id.equals(\"tpd3\"))\r\n                    name = GanttTreeTableModel.strColName;\r\n                else\r\n                    if (id.equals(\"tpd4\"))\r\n                        name = GanttTreeTableModel.strColBegDate;\r\n                    else\r\n                        if (id.equals(\"tpd5\"))\r\n                            name = GanttTreeTableModel.strColEndDate;\r\n                        else\r\n                            if (id.equals(\"tpd6\"))\r\n                                name = GanttTreeTableModel.strColDuration;\r\n                            else\r\n                                if (id.equals(\"tpd7\"))\r\n                                    name = GanttTreeTableModel.strColCompletion;\r\n                                else\r\n                                    if (id.equals(\"tpd8\"))\r\n                                        name = GanttTreeTableModel.strColCoordinator;\r\n                                    else\r\n                                        if (id.equals(\"tpd9\"))\r\n                                            name = GanttTreeTableModel.strColPredecessors;\r\n                                        else\r\n                                            if (id.equals(\"tpd10\"))\r\n                                                name = GanttTreeTableModel.strColID;\r\n                                            else\r\n                                                name = getProject().getCustomColumnsStorage().getNameFromId(id);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return name;\r\n}"},
 {"id":932, "name":"getScrollPane()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.getScrollPane()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"public JScrollPane getScrollPane() {\r\n    return scrollPane;\r\n}"},
 {"id":933, "name":"getTree()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.getTree()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":934, "name":"getVerticalScrollBar()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.getVerticalScrollBar()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"/**\r\n * Returns the vertical scrollbar.\r\n *\r\n * @return The vertical scrollbar.\r\n */\r\npublic JScrollBar getVerticalScrollBar() {\r\n    return scrollPane.getVerticalScrollBar();\r\n}"},
 {"id":935, "name":"getVisibleFields()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.getVisibleFields()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"public TableHeaderUIFacade getVisibleFields() {\r\n    return myVisibleFields;\r\n}"},
 {"id":936, "name":"hideAllColumns()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.hideAllColumns()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"/**\r\n * Displays all the table columns.\r\n */\r\nprivate void hideAllColumns() {\r\n    Iterator it = mapTableColumnColumnKeeper.values().iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.ColumnKeeper ck = ((GanttTreeTable.ColumnKeeper) (it.next()));\r\n        if (ck.isShown)\r\n            ck.hide();\r\n\r\n    } \r\n    // createPopupMenu();\r\n}"},
 {"id":937, "name":"hideColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.hideColumn(java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"private void hideColumn(String name) {\r\n    Iterator it = mapTableColumnColumnKeeper.keySet().iterator();\r\n    while (it.hasNext()) {\r\n        TableColumn c = ((TableColumn) (it.next()));\r\n        String n = ((String) (c.getHeaderValue()));\r\n        if (n.equals(name)) {\r\n            GanttTreeTable.ColumnKeeper ck = ((GanttTreeTable.ColumnKeeper) (mapTableColumnColumnKeeper.get(c)));\r\n            if (ck.isShown)\r\n                ck.hide();\r\n\r\n            break;\r\n        }\r\n    } \r\n    // createPopupMenu();\r\n}"},
 {"id":938, "name":"initColumnsAlignements()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.initColumnsAlignements()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":939, "name":"initTreeTable()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.initTreeTable()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":940, "name":"languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":941, "name":"onCellSelectionChanged()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.onCellSelectionChanged()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":942, "name":"reloadColumns()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.reloadColumns()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":943, "name":"removeCustomColumnToAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.removeCustomColumnToAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"/**\r\n * Remove permanetly the custom column for the task <code>root</code> and\r\n * all its children.\r\n *\r\n * @param facade\r\n * \t\tTaskContainmentHierarchyFacade ot retrive nested tasks.\r\n * @param root\r\n * \t\tRoot task to start with.\r\n * @param colName\r\n * \t\tName of the custom column to remove.\r\n */\r\nprivate void removeCustomColumnToAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String colName) {\r\n    // root.getCustomValues().removeCustomColumn(colName);\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        tt[i].getCustomValues().removeCustomColumn(colName);\r\n        removeCustomColumnToAllNestedTask(facade, tt[i], colName);\r\n    }\r\n}"},
 {"id":944, "name":"renameCustomColumnForAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.renameCustomColumnForAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String,java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"private void renameCustomColumnForAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String oldName, String newName) {\r\n    // root.getCustomValues().renameCustomColumn(oldName,newName);\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        tt[i].getCustomValues().renameCustomColumn(oldName, newName);\r\n        renameCustomColumnForAllNestedTask(facade, tt[i], oldName, newName);\r\n    }\r\n}"},
 {"id":945, "name":"renameCustomcolumn(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.renameCustomcolumn(java.lang.String,java.lang.String)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":946, "name":"setAction(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.setAction(javax.swing.Action)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"void setAction(Action action) {\r\n    addAction(action, ((KeyStroke) (action.getValue(Action.ACCELERATOR_KEY))));\r\n    // Add the action to the component\r\n}"},
 {"id":947, "name":"setCustomColumnValueToAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.setCustomColumnValueToAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String,java.lang.Object)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"// public void changeDefaultValue(String name, Object newDefaultValue)\r\n// {\r\n// // this.displayColumn(name);\r\n// }\r\n/**\r\n *\r\n *\r\n * @param facade\r\n * \t\tTaskContainmentHierarchyFacade ot retrive nested tasks.\r\n * @param root\r\n * \t\tRoot task to start with.\r\n * @param colName\r\n * \t\tName of the new custom column to add to the tasks.\r\n * @param value\r\n * \t\tValue for this new custom column.\r\n */\r\nprivate void setCustomColumnValueToAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String colName, Object value) {\r\n    try {\r\n        root.getCustomValues().setValue(colName, value);\r\n    } catch (CustomColumnsException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        try {\r\n            tt[i].getCustomValues().setValue(colName, value);\r\n        } catch (CustomColumnsException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n        setCustomColumnValueToAllNestedTask(facade, tt[i], colName, value);\r\n    }\r\n}"},
 {"id":948, "name":"setDelay(net.sourceforge.ganttproject.task.TaskNode,net.sourceforge.ganttproject.delay.Delay)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.setDelay(net.sourceforge.ganttproject.task.TaskNode,net.sourceforge.ganttproject.delay.Delay)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":949, "name":"setDisplayedColumns(net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.setDisplayedColumns(net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList)", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":"public void setDisplayedColumns(GanttTreeTable.DisplayedColumnsList displayedColumns) {\r\n    GanttTreeTable.DisplayedColumnsList l = ((GanttTreeTable.DisplayedColumnsList) (displayedColumns.clone()));\r\n    displayAllColumns();\r\n    hideAllColumns();\r\n    this.listDisplayedColumns = l;\r\n    Collections.sort(this.listDisplayedColumns);\r\n    Iterator it = this.listDisplayedColumns.iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (it.next()));\r\n        String id = dc.getID();\r\n        String name = getNameForId(id);\r\n        if (dc.displayed)\r\n            displayColumn(name);\r\n        else\r\n            hideColumn(name);\r\n\r\n    } \r\n}"},
 {"id":950, "name":"updateDisplayedColumnsOrder()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable.updateDisplayedColumnsOrder()", "ownerclassid":"81", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable", "sourcecode":""},
 {"id":951, "name":"-init-(javax.swing.table.TableColumn)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper.-init-(javax.swing.table.TableColumn)", "ownerclassid":"74", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper", "sourcecode":"/**\r\n * Creates a new ColumnKeeper for the given TableColumn.\r\n *\r\n * @param tc\r\n * \t\tTableColumn to manage.\r\n */\r\npublic ColumnKeeper(TableColumn tc) {\r\n    column = tc;\r\n    index = column.getModelIndex();\r\n}"},
 {"id":952, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper.-init-()", "ownerclassid":"74", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper", "sourcecode":"1() {\r\n}"},
 {"id":953, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"74", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    Mediator.getGanttProjectSingleton().getUndoManager().undoableEdit(\"HIDE OR SHOW A COLUMN\", new Runnable() {\r\n        public void run() {\r\n            if (!(isShown))\r\n                show();\r\n            else\r\n                hide();\r\n\r\n            getTable().repaint();\r\n        }\r\n    });\r\n}"},
 {"id":954, "name":"getInitIndex()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper.getInitIndex()", "ownerclassid":"74", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper", "sourcecode":"/**\r\n * Returns the initial index of the table column.\r\n *\r\n * @return The initial index of the table column.\r\n */\r\npublic int getInitIndex() {\r\n    return index;\r\n}"},
 {"id":955, "name":"hide()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper.hide()", "ownerclassid":"74", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper", "sourcecode":"/**\r\n * Hides the table column.\r\n */\r\nvoid hide() {\r\n    getTable().getColumnModel().removeColumn(column);\r\n    isShown = false;\r\n    String name = ((String) (column.getHeaderValue()));\r\n    String id = getIdForName(name);\r\n    Iterator it = listDisplayedColumns.iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (it.next()));\r\n        if (dc.getID().equals(id))\r\n            dc.setDisplayed(false);\r\n\r\n    } \r\n    // Thread t = new Thread(){\r\n    // public void run(){\r\n    calculateWidth();\r\n    revalidate();\r\n    // }\r\n    // };\r\n    // SwingUtilities.invokeLater(t);\r\n}"},
 {"id":956, "name":"setInitIndex(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper.setInitIndex(int)", "ownerclassid":"74", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper", "sourcecode":"/**\r\n * Set the initial index of the table column.\r\n *\r\n * @param initIndex\r\n * \t\tThe initial index of the table column.\r\n */\r\npublic void setInitIndex(int initIndex) {\r\n    index = initIndex;\r\n}"},
 {"id":957, "name":"show()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper.show()", "ownerclassid":"74", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ColumnKeeper", "sourcecode":"/**\r\n * Shows the table column.\r\n */\r\nvoid show() {\r\n    boolean reloadInfo = false;\r\n    getTable().getColumnModel().addColumn(column);\r\n    try {\r\n        int columnViewIndexOld = index;\r\n        int columnModelIndexActual = column.getModelIndex();\r\n        if (column.getIdentifier().equals(GanttTreeTableModel.strColInfo))\r\n            reloadInfo = true;\r\n\r\n        int columnViewIndexActual = getTable().convertColumnIndexToView(columnModelIndexActual);\r\n        getTable().moveColumn(columnViewIndexActual, columnViewIndexOld);\r\n    } catch (IllegalArgumentException e) {\r\n        index = (getTable().getModel().getColumnCount()) - 1;\r\n    }\r\n    isShown = true;\r\n    String name = ((String) (column.getHeaderValue()));\r\n    String id = getIdForName(name);\r\n    boolean found = false;\r\n    Iterator it = listDisplayedColumns.iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (it.next()));\r\n        if (dc.getID().equals(id)) {\r\n            dc.setDisplayed(true);\r\n            found = true;\r\n        }\r\n    } \r\n    if ((!found) && (id != null)) {\r\n        GanttTreeTable.DisplayedColumn dc = new GanttTreeTable.DisplayedColumn(id);\r\n        dc.setDisplayed(true);\r\n        listDisplayedColumns.add(dc);\r\n    }\r\n    if (reloadInfo)\r\n        if ((Mediator.getDelayManager()) != null)\r\n            Mediator.getDelayManager().fireDelayObservation();\r\n\r\n\r\n    // Thread t = new Thread(){\r\n    // public void run(){\r\n    calculateWidth();\r\n    revalidate();\r\n    // }\r\n    // };\r\n    // SwingUtilities.invokeLater(t);\r\n}"},
 {"id":958, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.-init-(java.lang.String)", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public DisplayedColumn(String id) {\r\n    this.id = id;\r\n}"},
 {"id":959, "name":"clone()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.clone()", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public Object clone() {\r\n    GanttTreeTable.DisplayedColumn dc = new GanttTreeTable.DisplayedColumn(this.id);\r\n    dc.setDisplayed(this.isDisplayed());\r\n    dc.setOrder(this.getOrder());\r\n    dc.setWidth(this.getWidth());\r\n    return dc;\r\n}"},
 {"id":960, "name":"compareTo(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.compareTo(java.lang.Object)", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"/* (non-Javadoc)\n\n@see java.lang.Comparable#compareTo(java.lang.Object)\n */\r\npublic int compareTo(Object o) {\r\n    if (o == null)\r\n        return 0;\r\n\r\n    if (o instanceof GanttTreeTable.DisplayedColumn) {\r\n        GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (o));\r\n        if ((this.order) != (dc.order))\r\n            return (this.order) - (dc.order);\r\n\r\n        return this.id.compareTo(dc.id);\r\n    }\r\n    return 0;\r\n}"},
 {"id":961, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.getID()", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public String getID() {\r\n    return this.id;\r\n}"},
 {"id":962, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.getName()", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public String getName() {\r\n    return getNameForId(getID());\r\n}"},
 {"id":963, "name":"getOrder()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.getOrder()", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public int getOrder() {\r\n    return this.order;\r\n}"},
 {"id":964, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.getWidth()", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public int getWidth() {\r\n    return width;\r\n}"},
 {"id":965, "name":"isDisplayed()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.isDisplayed()", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public boolean isDisplayed() {\r\n    return this.displayed;\r\n}"},
 {"id":966, "name":"isVisible()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.isVisible()", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public boolean isVisible() {\r\n    return isDisplayed();\r\n}"},
 {"id":967, "name":"setDisplayed(boolean)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.setDisplayed(boolean)", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public void setDisplayed(boolean disp) {\r\n    this.displayed = disp;\r\n}"},
 {"id":968, "name":"setID(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.setID(java.lang.String)", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public void setID(String id) {\r\n    this.id = id;\r\n}"},
 {"id":969, "name":"setOrder(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.setOrder(int)", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public void setOrder(int order) {\r\n    this.order = order;\r\n}"},
 {"id":970, "name":"setWidth(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.setWidth(int)", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public void setWidth(int width) {\r\n    this.width = width;\r\n}"},
 {"id":971, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn.toString()", "ownerclassid":"75", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumn", "sourcecode":"public String toString() {\r\n    return (((((\"[ID = \" + (id)) + \", displayed = \") + (displayed)) + \", order = \") + (order)) + \"]\";\r\n}"},
 {"id":972, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList.-init-()", "ownerclassid":"76", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList", "sourcecode":"public DisplayedColumnsList() {\r\n    super();\r\n}"},
 {"id":973, "name":"add(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList.add(java.lang.Object)", "ownerclassid":"76", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList", "sourcecode":"public boolean add(Object o) {\r\n    if (o instanceof GanttTreeTable.DisplayedColumn) {\r\n        GanttTreeTable.DisplayedColumn dc1 = ((GanttTreeTable.DisplayedColumn) (o));\r\n        Iterator it = this.iterator();\r\n        while (it.hasNext()) {\r\n            GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (it.next()));\r\n            if (dc.getID().equals(dc1.getID())) {\r\n                this.remove(dc);\r\n                return super.add(dc1);\r\n            }\r\n        } \r\n        return super.add(dc1);\r\n    }\r\n    return false;\r\n}"},
 {"id":974, "name":"clone()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList.clone()", "ownerclassid":"76", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList", "sourcecode":"public Object clone() {\r\n    GanttTreeTable.DisplayedColumnsList l = new GanttTreeTable.DisplayedColumnsList();\r\n    Iterator it = this.iterator();\r\n    while (it.hasNext())\r\n        l.add(((GanttTreeTable.DisplayedColumn) (it.next())).clone());\r\n\r\n    return l;\r\n}"},
 {"id":975, "name":"getNameForOrder(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList.getNameForOrder(int)", "ownerclassid":"76", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList", "sourcecode":"public String getNameForOrder(int order) {\r\n    Iterator it = this.iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (it.next()));\r\n        if ((dc.getOrder()) == order)\r\n            return getNameForId(dc.getID());\r\n\r\n    } \r\n    return null;\r\n}"},
 {"id":976, "name":"getOrderForName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList.getOrderForName(java.lang.String)", "ownerclassid":"76", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList", "sourcecode":"public int getOrderForName(String name) {\r\n    Iterator it = this.iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (it.next()));\r\n        if (getNameForId(dc.getID()).equals(name))\r\n            return dc.getOrder();\r\n\r\n    } \r\n    return -1;\r\n}"},
 {"id":977, "name":"isDisplayed(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList.isDisplayed(java.lang.String)", "ownerclassid":"76", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList", "sourcecode":"/**\r\n * Returns <code>true</code> if the column name <code>name</code>\r\n * is displayed, <code>false</code> otherwise.\r\n *\r\n * @param name\r\n * \t\tName of the column to check the display.\r\n * @return <code>true</code> if the column name <code>name</code> is\r\ndisplayed, <code>false</code> otherwise.\r\n */\r\npublic boolean isDisplayed(String name) {\r\n    Iterator it = this.iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (it.next()));\r\n        if (getNameForId(dc.getID()).equals(name))\r\n            return dc.isDisplayed();\r\n\r\n    } \r\n    return false;\r\n}"},
 {"id":978, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$HeaderMouseListener.-init-()", "ownerclassid":"77", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$HeaderMouseListener", "sourcecode":"/**\r\n * Creates a new HeaderMouseListener\r\n */\r\npublic HeaderMouseListener() {\r\n    super();\r\n}"},
 {"id":979, "name":"handlePopupTrigger(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$HeaderMouseListener.handlePopupTrigger(java.awt.event.MouseEvent)", "ownerclassid":"77", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$HeaderMouseListener", "sourcecode":"private void handlePopupTrigger(MouseEvent e) {\r\n    if (e.isPopupTrigger()) {\r\n        createPopupMenu();\r\n        Component c = ((Component) (e.getSource()));\r\n        // reorderPopuMenu();\r\n        popupMenu.show(c, e.getX(), e.getY());\r\n        clickPoint = e.getPoint();// popupMenu.getLocationOnScreen();\r\n\r\n        CustomColumn cc = getProject().getCustomColumnsStorage().getCustomColumn(getTable().getColumnName(getTable().columnAtPoint(e.getPoint())));\r\n        if (cc != null)\r\n            jmiDeleteColumn.setEnabled(true);\r\n        else\r\n            jmiDeleteColumn.setEnabled(false);\r\n\r\n    }\r\n}"},
 {"id":980, "name":"mousePressed(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$HeaderMouseListener.mousePressed(java.awt.event.MouseEvent)", "ownerclassid":"77", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$HeaderMouseListener", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown Shows the popupMenu to hide/show columns and to add\r\ncustom columns.\r\n */\r\npublic void mousePressed(MouseEvent e) {\r\n    handlePopupTrigger(e);\r\n}"},
 {"id":981, "name":"mouseReleased(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$HeaderMouseListener.mouseReleased(java.awt.event.MouseEvent)", "ownerclassid":"77", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$HeaderMouseListener", "sourcecode":"public void mouseReleased(MouseEvent e) {\r\n    handlePopupTrigger(e);\r\n}"},
 {"id":982, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ModelListener.-init-()", "ownerclassid":"78", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ModelListener", "sourcecode":"ModelListener() {\r\n}"},
 {"id":983, "name":"tableChanged(javax.swing.event.TableModelEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$ModelListener.tableChanged(javax.swing.event.TableModelEvent)", "ownerclassid":"78", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$ModelListener", "sourcecode":"public void tableChanged(TableModelEvent e) {\r\n    // Mediator.getGanttProjectSingleton().getArea().repaint();\r\n    // getTable().repaint();\r\n    Mediator.getGanttProjectSingleton().repaint();\r\n}"},
 {"id":984, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$NameCellEditor.-init-()", "ownerclassid":"79", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$NameCellEditor", "sourcecode":"public NameCellEditor() {\r\n    super(new JTextField());\r\n    field = ((JTextField) (this.editorComponent));\r\n}"},
 {"id":985, "name":"getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$NameCellEditor.getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)", "ownerclassid":"79", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$NameCellEditor", "sourcecode":"public Component getTableCellEditorComponent(JTable arg0, Object arg1, boolean arg2, int arg3, int arg4) {\r\n    final JTextField result = ((JTextField) (super.getTableCellEditorComponent(arg0, arg1, arg2, arg3, arg4)));\r\n    result.selectAll();\r\n    // result.addFocusListener(new FocusAdapter() {\r\n    // public void focusGained(FocusEvent arg0) {\r\n    // super.focusGained(arg0);\r\n    // ((JTextComponent)result).selectAll();\r\n    // }\r\n    // \r\n    // public void focusLost(FocusEvent arg0) {\r\n    // // TODO Auto-generated method stub\r\n    // super.focusLost(arg0);\r\n    // }\r\n    // \r\n    // });\r\n    // \r\n    return result;\r\n}"},
 {"id":986, "name":"requestFocus()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$NameCellEditor.requestFocus()", "ownerclassid":"79", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$NameCellEditor", "sourcecode":"// \r\npublic void requestFocus() {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            field.requestFocus();\r\n            field.selectAll();\r\n        }\r\n    });\r\n}"},
 {"id":987, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl.-init-()", "ownerclassid":"80", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl", "sourcecode":"VisibleFieldsImpl() {\r\n}"},
 {"id":988, "name":"add(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl.add(java.lang.String,int,int)", "ownerclassid":"80", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl", "sourcecode":"public void add(String name, int order, int width) {\r\n    GanttTreeTable.DisplayedColumn newColumn = new GanttTreeTable.DisplayedColumn(name);\r\n    newColumn.setOrder(order);\r\n    if (width >= 0) {\r\n        newColumn.setWidth(width);\r\n    }\r\n    newColumn.setDisplayed(true);\r\n    GanttTreeTable.DisplayedColumnsList clone = ((GanttTreeTable.DisplayedColumnsList) (getDisplayColumns().clone()));\r\n    clone.add(newColumn);\r\n    setDisplayedColumns(clone);\r\n}"},
 {"id":989, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl.clear()", "ownerclassid":"80", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl", "sourcecode":"public void clear() {\r\n    setDisplayedColumns(new GanttTreeTable.DisplayedColumnsList());\r\n}"},
 {"id":990, "name":"getField(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl.getField(int)", "ownerclassid":"80", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl", "sourcecode":"public TableHeaderUIFacade.Column getField(int index) {\r\n    return ((TableHeaderUIFacade.Column) (getDisplayColumns().get(index)));\r\n}"},
 {"id":991, "name":"getSize()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl.getSize()", "ownerclassid":"80", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl", "sourcecode":"public int getSize() {\r\n    return getDisplayColumns().size();\r\n}"},
 {"id":992, "name":"importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "ownerclassid":"80", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl", "sourcecode":"public void importData(TableHeaderUIFacade source) {\r\n    clear();\r\n    GanttTreeTable.DisplayedColumnsList clone = ((GanttTreeTable.DisplayedColumnsList) (getDisplayColumns().clone()));\r\n    clone.clear();\r\n    for (int i = 0; i < (source.getSize()); i++) {\r\n        TableHeaderUIFacade.Column nextField = source.getField(i);\r\n        GanttTreeTable.DisplayedColumn newColumn = new GanttTreeTable.DisplayedColumn(nextField.getName());\r\n        newColumn.setID(nextField.getID());\r\n        newColumn.setOrder(nextField.getOrder());\r\n        if ((nextField.getWidth()) >= 0) {\r\n            newColumn.setWidth(nextField.getWidth());\r\n        }\r\n        newColumn.setDisplayed(true);\r\n        clone.add(newColumn);\r\n    }\r\n    setDisplayedColumns(clone);\r\n}"},
 {"id":993, "name":"-init-(javax.swing.tree.TreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.-init-(javax.swing.tree.TreeNode)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n * Creates an instance of GanttTreeTableModel with a root.\r\n *\r\n * @param root\r\n * \t\tThe root.\r\n */\r\npublic GanttTreeTableModel(TreeNode root) {\r\n    super(root);\r\n    titles = new ArrayList();\r\n    customColumns = new Vector();\r\n    changeLanguage(GanttTreeTableModel.language);\r\n}"},
 {"id":994, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.-init-()", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"1() {\r\n}"},
 {"id":995, "name":"addCustomColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.addCustomColumn(java.lang.String)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n * Add a custom column to the model.\r\n *\r\n * @param title\r\n * \t\t\r\n */\r\npublic void addCustomColumn(String title) {\r\n    customColumns.add(title);\r\n    (nbColTot)++;\r\n}"},
 {"id":996, "name":"areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic boolean areUnrelated(Task dependant, Task dependee) {\r\n    // TODO Auto-generated method stub\r\n    return false;\r\n}"},
 {"id":997, "name":"changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n * Changes the language.\r\n *\r\n * @param ganttLanguage\r\n * \t\tNew language to use.\r\n */\r\npublic void changeLanguage(GanttLanguage ganttLanguage) {\r\n    GanttTreeTableModel.strColType = GanttTreeTableModel.language.getText(\"tableColType\");\r\n    GanttTreeTableModel.strColPriority = GanttTreeTableModel.language.getText(\"tableColPriority\");\r\n    GanttTreeTableModel.strColInfo = GanttTreeTableModel.language.getText(\"tableColInfo\");\r\n    GanttTreeTableModel.strColName = GanttTreeTableModel.language.getText(\"tableColName\");\r\n    GanttTreeTableModel.strColBegDate = GanttTreeTableModel.language.getText(\"tableColBegDate\");\r\n    GanttTreeTableModel.strColEndDate = GanttTreeTableModel.language.getText(\"tableColEndDate\");\r\n    GanttTreeTableModel.strColDuration = GanttTreeTableModel.language.getText(\"tableColDuration\");\r\n    GanttTreeTableModel.strColCompletion = GanttTreeTableModel.language.getText(\"tableColCompletion\");\r\n    GanttTreeTableModel.strColCoordinator = GanttTreeTableModel.language.getText(\"tableColCoordinator\");\r\n    GanttTreeTableModel.strColPredecessors = GanttTreeTableModel.language.getText(\"tableColPredecessors\");\r\n    GanttTreeTableModel.strColID = GanttTreeTableModel.language.getText(\"tableColID\");\r\n    titles.clear();\r\n    String[] cols = new String[]{ GanttTreeTableModel.strColType, GanttTreeTableModel.strColPriority, GanttTreeTableModel.strColInfo, GanttTreeTableModel.strColName, GanttTreeTableModel.strColBegDate, GanttTreeTableModel.strColEndDate, GanttTreeTableModel.strColDuration, GanttTreeTableModel.strColCompletion, GanttTreeTableModel.strColCoordinator, GanttTreeTableModel.strColPredecessors, GanttTreeTableModel.strColID };\r\n    for (int i = 0; i < (cols.length); i++)\r\n        titles.add(new String(cols[i]));\r\n\r\n}"},
 {"id":998, "name":"columnAdded(javax.swing.event.TableColumnModelEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.columnAdded(javax.swing.event.TableColumnModelEvent)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void columnAdded(TableColumnModelEvent arg0) {\r\n    (nbCol)++;\r\n}"},
 {"id":999, "name":"columnMarginChanged(javax.swing.event.ChangeEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.columnMarginChanged(javax.swing.event.ChangeEvent)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void columnMarginChanged(ChangeEvent arg0) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1000, "name":"columnMoved(javax.swing.event.TableColumnModelEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.columnMoved(javax.swing.event.TableColumnModelEvent)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void columnMoved(TableColumnModelEvent arg0) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1001, "name":"columnRemoved(javax.swing.event.TableColumnModelEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.columnRemoved(javax.swing.event.TableColumnModelEvent)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void columnRemoved(TableColumnModelEvent arg0) {\r\n    (nbCol)--;\r\n}"},
 {"id":1002, "name":"columnSelectionChanged(javax.swing.event.ListSelectionEvent)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.columnSelectionChanged(javax.swing.event.ListSelectionEvent)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void columnSelectionChanged(ListSelectionEvent arg0) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1003, "name":"compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"public int compareDocumentOrder(Task next, Task dependeeTask) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":1004, "name":"contains(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.contains(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"public boolean contains(Task task) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":1005, "name":"deleteCustomColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.deleteCustomColumn(java.lang.String)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n * Delete a custom column.\r\n *\r\n * @param title\r\n * \t\t\r\n */\r\npublic void deleteCustomColumn(String title) {\r\n    customColumns.remove(title);\r\n    this.columnRemoved(null);\r\n    (nbColTot)--;\r\n}"},
 {"id":1006, "name":"getColumnClass(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getColumnClass(int)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":""},
 {"id":1007, "name":"getColumnCount()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getColumnCount()", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"// /**\r\n// * Returns the number of custom columns.\r\n// * @return\r\n// */\r\n// public int getCustomColumnCount()\r\n// {\r\n// return customColumns.size();\r\n// }\r\npublic int getColumnCount() {\r\n    return nbCol;\r\n}"},
 {"id":1008, "name":"getColumnCountTotal()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getColumnCountTotal()", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"public int getColumnCountTotal() {\r\n    return nbColTot;\r\n}"},
 {"id":1009, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getColumnName(int)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"public String getColumnName(int column) {\r\n    if (column < (titles.size()))\r\n        return ((String) (titles.get(column)));\r\n\r\n    try {\r\n        return ((String) (customColumns.get((column - (titles.size())))));\r\n    } catch (IndexOutOfBoundsException e) {\r\n        return ((String) (customColumns.get(((column - (titles.size())) - 1))));\r\n    }\r\n}"},
 {"id":1010, "name":"getContainer(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getContainer(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic Task getContainer(Task nestedTask) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":1011, "name":"getDepth(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getDepth(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"public int getDepth(Task task) {\r\n    // TODO Auto-generated method stub\r\n    return 0;\r\n}"},
 {"id":1012, "name":"getNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic Task[] getNestedTasks(Task container) {\r\n    TaskNode r = ((TaskNode) (root));\r\n    Enumeration e = r.children();\r\n    Vector v = new Vector();\r\n    while (e.hasMoreElements())\r\n        v.add(((TaskNode) (e.nextElement())));\r\n\r\n    Task[] res = new Task[v.size()];\r\n    v.toArray(res);\r\n    return res;\r\n}"},
 {"id":1013, "name":"getRootTask()", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getRootTask()", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":""},
 {"id":1014, "name":"getTaskNodeForTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getTaskNodeForTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":""},
 {"id":1015, "name":"getValueAt(java.lang.Object,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.getValueAt(java.lang.Object,int)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"// public Object getChild(Object parent, int index)\r\n// {\r\n// \r\n// }\r\n// \r\n// public int getChildCount(Object parent)\r\n// {\r\n// \r\n// }\r\n/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic Object getValueAt(Object node, int column) {\r\n    Object res = null;\r\n    if (!(node instanceof TaskNode))\r\n        return null;\r\n\r\n    TaskNode tn = ((TaskNode) (node));\r\n    Task t = ((Task) (tn.getUserObject()));\r\n    // if(tn.getParent()!=null){\r\n    switch (column) {\r\n        case 0 :\r\n            if (((Task) (tn.getUserObject())).isProjectTask()) {\r\n                res = new ImageIcon(getClass().getResource(\"/icons/mproject.gif\"));\r\n            } else\r\n                if (!(tn.isLeaf()))\r\n                    res = new ImageIcon(getClass().getResource(\"/icons/mtask.gif\"));\r\n                else\r\n                    if (t.isMilestone())\r\n                        res = new ImageIcon(getClass().getResource(\"/icons/meeting.gif\"));\r\n                    else\r\n                        res = new ImageIcon(getClass().getResource(\"/icons/tasks2.png\"));\r\n\r\n\r\n\r\n            break;\r\n        case 1 :\r\n            Task task = ((Task) (tn.getUserObject()));\r\n            String path = ((task.getPriority()) == 0) ? \"/icons/task1.gif\" : (task.getPriority()) == 1 ? \"/icons/task.gif\" : \"/icons/task2.gif\";\r\n            res = new ImageIcon(getClass().getResource(path));\r\n            break;\r\n        case 2 :\r\n            // info\r\n            TaskInfo info = t.getTaskInfo();\r\n            if (info != null) {\r\n                if (info instanceof Delay) {\r\n                    int type = ((Delay) (info)).getType();\r\n                    if (type == (Delay.NORMAL))\r\n                        res = new ImageIcon(getClass().getResource(\"/icons/alert1_16.gif\"));\r\n                    else\r\n                        if (type == (Delay.CRITICAL))\r\n                            res = new ImageIcon(getClass().getResource(\"/icons/alert2_16.gif\"));\r\n\r\n\r\n                }\r\n            }\r\n            break;\r\n        case 3 :\r\n            res = tn.getName();\r\n            break;\r\n        case 4 :\r\n            res = tn.getStart();\r\n            break;\r\n        case 5 :\r\n            res = tn.getEnd();\r\n            break;\r\n        case 6 :\r\n            res = new Integer(tn.getDuration());\r\n            break;\r\n        case 7 :\r\n            res = new Integer(tn.getCompletionPercentage());\r\n            break;\r\n        case 8 :\r\n            {\r\n                ResourceAssignment[] tAssign = t.getAssignments();\r\n                StringBuffer sb = new StringBuffer();\r\n                int nb = 0;\r\n                for (int i = 0; i < (tAssign.length); i++) {\r\n                    ResourceAssignment resAss = tAssign[i];\r\n                    if (resAss.isCoordinator())\r\n                        sb.append(((nb++) == 0 ? \"\" : \", \")).append(resAss.getResource().getName());\r\n\r\n                }\r\n                // res = \"Not implemented\";\r\n                res = sb.toString();\r\n                break;\r\n            }\r\n        case 9 :\r\n            {\r\n                String resStr = \"\";\r\n                TaskDependency[] dep = t.getDependenciesAsDependant().toArray();\r\n                int i = 0;\r\n                if ((dep != null) && ((dep.length) > 0)) {\r\n                    for (i = 0; i < ((dep.length) - 1); i++)\r\n                        resStr += (dep[i].getDependee().getTaskID()) + \", \";\r\n\r\n                    resStr += (dep[i].getDependee().getTaskID()) + \"\";\r\n                }\r\n                res = resStr;\r\n                break;\r\n            }\r\n        case 10 :\r\n            res = new Integer(t.getTaskID());\r\n            break;\r\n        default :\r\n            String colName = this.getColumnName(column);\r\n            // System.out.println(\" -> \"+colName);\r\n            // System.out.println(t+\" : \"+t.getCustomValues());\r\n            res = t.getCustomValues().getValue(colName);\r\n            break;\r\n    }\r\n    // }\r\n    // else\r\n    // res =\"\";\r\n    return res;\r\n}"},
 {"id":1016, "name":"hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n * Purpose: Should return true if this Tasks has any nested subtasks.\r\n */\r\npublic boolean hasNestedTasks(Task container) {\r\n    TaskNode r = ((TaskNode) (root));\r\n    if ((r.getChildCount()) > 0) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"},
 {"id":1017, "name":"insertNodeInto(javax.swing.tree.MutableTreeNode,javax.swing.tree.MutableTreeNode,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.insertNodeInto(javax.swing.tree.MutableTreeNode,javax.swing.tree.MutableTreeNode,int)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":""},
 {"id":1018, "name":"isCellEditable(java.lang.Object,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.isCellEditable(java.lang.Object,int)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic boolean isCellEditable(Object node, int column) {\r\n    if (node instanceof TaskNode) {\r\n        Task task = ((Task) (((TaskNode) (node)).getUserObject()));\r\n        switch (column) {\r\n            case 5 :\r\n            case 6 :\r\n                return !(task.isMilestone());\r\n            case 2 :\r\n            case 8 :\r\n            case 9 :\r\n            case 10 :\r\n                return false;\r\n            default :\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":1019, "name":"languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    changeLanguage(event.getLanguage());\r\n}"},
 {"id":1020, "name":"move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void move(Task whatMove, Task whereMove) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1021, "name":"removeNodeFromParent(javax.swing.tree.MutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.removeNodeFromParent(javax.swing.tree.MutableTreeNode)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":""},
 {"id":1022, "name":"renameCustomColumn(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.renameCustomColumn(java.lang.String,java.lang.String)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"public void renameCustomColumn(String oldName, String newName) {\r\n    customColumns.set(customColumns.indexOf(oldName), newName);\r\n}"},
 {"id":1023, "name":"setValue(java.lang.Object,java.lang.Object,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.setValue(java.lang.Object,java.lang.Object,int)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n * Set value in left pane cell\r\n *\r\n * @param value\r\n * \t\t\r\n * @param node\r\n * \t\t\r\n * @param column\r\n * \t\t\r\n */\r\nprivate void setValue(final Object value, final Object node, final int column) {\r\n    switch (column) {\r\n        case 0 :\r\n        case 1 :\r\n        case 2 :\r\n            // info\r\n            ((TaskNode) (node)).setTaskInfo(((TaskInfo) (value)));\r\n        case 8 :\r\n            break;\r\n        case 3 :\r\n            ((TaskNode) (node)).setName(value.toString());\r\n            break;\r\n        case 4 :\r\n            ((TaskNode) (node)).setStart(((GanttCalendar) (value)));\r\n            ((TaskNode) (node)).applyThirdDateConstraint();\r\n            break;\r\n        case 5 :\r\n            ((TaskNode) (node)).setEnd(((GanttCalendar) (value)));\r\n            break;\r\n        case 6 :\r\n            Task task = ((Task) (((TaskNode) (node)).getUserObject()));\r\n            TaskLength tl = task.getDuration();\r\n            ((TaskNode) (node)).setDuration(task.getManager().createLength(tl.getTimeUnit(), ((Integer) (value)).intValue()));\r\n            break;\r\n        case 7 :\r\n            ((TaskNode) (node)).setCompletionPercentage(((Integer) (value)).intValue());\r\n            break;\r\n        default :\r\n            // custom colums\r\n            try {\r\n                ((Task) (((TaskNode) (node)).getUserObject())).getCustomValues().setValue(this.getColumnName(column), value);\r\n            } catch (CustomColumnsException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            }\r\n    }\r\n}"},
 {"id":1024, "name":"setValueAt(java.lang.Object,java.lang.Object,int)", "fullmethod":"net.sourceforge.ganttproject.GanttTreeTableModel.setValueAt(java.lang.Object,java.lang.Object,int)", "ownerclassid":"82", "ownerclassname":"net.sourceforge.ganttproject.GanttTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void setValueAt(final Object value, final Object node, final int column) {\r\n    if (value == null) {\r\n        return;\r\n    }\r\n    if (isCellEditable(node, column)) {\r\n        // System.out.println(\"undoable colonne: \" + column);\r\n        Mediator.getGanttProjectSingleton().getUndoManager().undoableEdit(\"Change properties column\", new Runnable() {\r\n            public void run() {\r\n                setValue(value, node, column);\r\n            }\r\n        });\r\n    } else {\r\n        // System.out.println(\"NOT undoable colonne: \" + column);\r\n        setValue(value, node, column);\r\n    }\r\n    // System.out.println(\"node : \" + node);\r\n    // System.out.println(\"valeur : \" + value);\r\n    Mediator.getGanttProjectSingleton().repaint();\r\n    Mediator.getGanttProjectSingleton().setAskForSave(true);\r\n}"},
 {"id":1025, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.GanttViewer.-init-()", "ownerclassid":"83", "ownerclassname":"net.sourceforge.ganttproject.GanttViewer", "sourcecode":"GanttViewer() {\r\n}"},
 {"id":1026, "name":"main(java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.GanttViewer.main(java.lang.String[])", "ownerclassid":"83", "ownerclassname":"net.sourceforge.ganttproject.GanttViewer", "sourcecode":"public static void main(String[] args) {\r\n    GanttProject ganttFrame = new GanttProject(true);\r\n    ganttFrame.setVisible(true);\r\n}"},
 {"id":1027, "name":"addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void addProjectEventListener(ProjectEventListener listener);"},
 {"id":1028, "name":"close()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.close()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void close();"},
 {"id":1029, "name":"getActiveCalendar()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getActiveCalendar()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"GPCalendar getActiveCalendar();"},
 {"id":1030, "name":"getBaselines()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getBaselines()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"/* <GanttPreviousState */\r\nList getBaselines();"},
 {"id":1031, "name":"getCustomColumnsStorage()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getCustomColumnsStorage()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"CustomColumnsStorage getCustomColumnsStorage();"},
 {"id":1032, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getDescription()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"// \r\nString getDescription();"},
 {"id":1033, "name":"getDocument()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getDocument()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"Document getDocument();"},
 {"id":1034, "name":"getDocumentManager()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getDocumentManager()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"DocumentManager getDocumentManager();"},
 {"id":1035, "name":"getHumanResourceManager()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getHumanResourceManager()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"ResourceManager getHumanResourceManager();"},
 {"id":1036, "name":"getI18n()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getI18n()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"// \r\nGanttLanguage getI18n();"},
 {"id":1037, "name":"getOrganization()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getOrganization()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"// \r\nString getOrganization();"},
 {"id":1038, "name":"getProjectName()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getProjectName()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"String getProjectName();"},
 {"id":1039, "name":"getResourceCustomPropertyManager()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getResourceCustomPropertyManager()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"CustomPropertyManager getResourceCustomPropertyManager();"},
 {"id":1040, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getRoleManager()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"RoleManager getRoleManager();"},
 {"id":1041, "name":"getTaskContainment()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getTaskContainment()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"TaskContainmentHierarchyFacade getTaskContainment();"},
 {"id":1042, "name":"getTaskCustomColumnManager()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getTaskCustomColumnManager()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"CustomColumnsManager getTaskCustomColumnManager();"},
 {"id":1043, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getTaskManager()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"TaskManager getTaskManager();"},
 {"id":1044, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getTimeUnitStack()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"TimeUnitStack getTimeUnitStack();"},
 {"id":1045, "name":"getUIConfiguration()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getUIConfiguration()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"UIConfiguration getUIConfiguration();"},
 {"id":1046, "name":"getWebLink()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.getWebLink()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"// \r\nString getWebLink();"},
 {"id":1047, "name":"isModified()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.isModified()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"boolean isModified();"},
 {"id":1048, "name":"newTask()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.newTask()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"// \r\n/**\r\n * Creates a new task and performs all necessary initialization procedures\r\n * such as changing properties of parent task, adjusting schedule, etc.\r\n */\r\nTask newTask();"},
 {"id":1049, "name":"open(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.open(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void open(Document document) throws IOException;"},
 {"id":1050, "name":"removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void removeProjectEventListener(ProjectEventListener listener);"},
 {"id":1051, "name":"setDescription(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.setDescription(java.lang.String)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void setDescription(String description);"},
 {"id":1052, "name":"setDocument(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.setDocument(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void setDocument(Document document);"},
 {"id":1053, "name":"setModified()", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.setModified()", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void setModified();"},
 {"id":1054, "name":"setModified(boolean)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.setModified(boolean)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void setModified(boolean modified);"},
 {"id":1055, "name":"setOrganization(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.setOrganization(java.lang.String)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void setOrganization(String organization);"},
 {"id":1056, "name":"setProjectName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.setProjectName(java.lang.String)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void setProjectName(String projectName);"},
 {"id":1057, "name":"setWebLink(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.IGanttProject.setWebLink(java.lang.String)", "ownerclassid":"84", "ownerclassname":"net.sourceforge.ganttproject.IGanttProject", "sourcecode":"void setWebLink(String webLink);"},
 {"id":1058, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.Mediator.-init-()", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"Mediator() {\r\n}"},
 {"id":1059, "name":"addChangeValueDispatcher(net.sourceforge.ganttproject.gui.options.model.ChangeValueDispatcher)", "fullmethod":"net.sourceforge.ganttproject.Mediator.addChangeValueDispatcher(net.sourceforge.ganttproject.gui.options.model.ChangeValueDispatcher)", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"public static void addChangeValueDispatcher(ChangeValueDispatcher dispatcher) {\r\n    Mediator.changeValueDispatchers.add(dispatcher);\r\n}"},
 {"id":1060, "name":"getChangeValueDispatchers()", "fullmethod":"net.sourceforge.ganttproject.Mediator.getChangeValueDispatchers()", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"public static List getChangeValueDispatchers() {\r\n    return Mediator.changeValueDispatchers;\r\n}"},
 {"id":1061, "name":"getDelayManager()", "fullmethod":"net.sourceforge.ganttproject.Mediator.getDelayManager()", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"public static DelayManager getDelayManager() {\r\n    return Mediator.delayManager;\r\n}"},
 {"id":1062, "name":"getGanttProjectSingleton()", "fullmethod":"net.sourceforge.ganttproject.Mediator.getGanttProjectSingleton()", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"/**\r\n * Returns the unique GanttProject instance.\r\n *\r\n * @return The unique GanttProject instance.\r\n */\r\npublic static GanttProject getGanttProjectSingleton() {\r\n    return Mediator.ganttprojectSingleton;\r\n}"},
 {"id":1063, "name":"getPluginManager()", "fullmethod":"net.sourceforge.ganttproject.Mediator.getPluginManager()", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"public static PluginManager getPluginManager() {\r\n    return Mediator.pluginManager;\r\n}"},
 {"id":1064, "name":"getTaskSelectionManager()", "fullmethod":"net.sourceforge.ganttproject.Mediator.getTaskSelectionManager()", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"/**\r\n * Returns the unique CustomColumnsStorage instance.\r\n *\r\n * @return The unique CustomColumnsStorage instance.\r\n */\r\n// public static CustomColumnsStorage getCustomColumnsStorage() {\r\n// return customColumnsStorage;\r\n// }\r\n/**\r\n * Returns the unique CustomColumnsManager instance.\r\n *\r\n * @return The unique CustomColumnsManager instance.\r\n */\r\n// public static CustomColumnsManager getCustomColumnsManager() {\r\n// return customColumnsManager;\r\n// }\r\npublic static TaskSelectionManager getTaskSelectionManager() {\r\n    return Mediator.taskSelectionManager;\r\n}"},
 {"id":1065, "name":"getUndoManager()", "fullmethod":"net.sourceforge.ganttproject.Mediator.getUndoManager()", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"// public static RoleManager getRoleManager() {\r\n// return roleManager;\r\n// }\r\n// public static TaskManager getTaskManager() {\r\n// return taskManager;\r\n// }\r\npublic static GPUndoManager getUndoManager() {\r\n    return Mediator.undoManager;\r\n}"},
 {"id":1066, "name":"registerDelayManager(net.sourceforge.ganttproject.delay.DelayManager)", "fullmethod":"net.sourceforge.ganttproject.Mediator.registerDelayManager(net.sourceforge.ganttproject.delay.DelayManager)", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"public static void registerDelayManager(DelayManager delayMgr) {\r\n    Mediator.delayManager = delayMgr;\r\n}"},
 {"id":1067, "name":"registerGanttProject(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.Mediator.registerGanttProject(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"/**\r\n * Regsiters the unique GanttProject instance.\r\n *\r\n * @param gp\r\n * \t\tThe unique GanttProject instance.\r\n */\r\npublic static void registerGanttProject(GanttProject gp) {\r\n    Mediator.ganttprojectSingleton = gp;\r\n}"},
 {"id":1068, "name":"registerTaskSelectionManager(net.sourceforge.ganttproject.task.TaskSelectionManager)", "fullmethod":"net.sourceforge.ganttproject.Mediator.registerTaskSelectionManager(net.sourceforge.ganttproject.task.TaskSelectionManager)", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"/**\r\n * Regsiters the unique CustomColumnsManager instance.\r\n *\r\n * @param managerThe\r\n * \t\tunique CustomColumnsManager instance.\r\n */\r\n// public static void registerCustomColumnsManager(CustomColumnsManager manager) {\r\n// customColumnsManager = manager;\r\n// }\r\n// \r\n// public static void registerCustomColumnsStorage(CustomColumnsStorage storage) {\r\n// customColumnsStorage = storage;\r\n// }\r\n// \r\npublic static void registerTaskSelectionManager(TaskSelectionManager taskSelection) {\r\n    Mediator.taskSelectionManager = taskSelection;\r\n}"},
 {"id":1069, "name":"registerUndoManager(net.sourceforge.ganttproject.undo.GPUndoManager)", "fullmethod":"net.sourceforge.ganttproject.Mediator.registerUndoManager(net.sourceforge.ganttproject.undo.GPUndoManager)", "ownerclassid":"85", "ownerclassname":"net.sourceforge.ganttproject.Mediator", "sourcecode":"// public static void registerRoleManager(RoleManager roleMgr) {\r\n// roleManager = roleMgr;\r\n// }\r\n// \r\n// public static void registerTaskManager(TaskManager taskMgr) {\r\n// taskManager = taskMgr;\r\n// }\r\npublic static void registerUndoManager(GPUndoManager undoMgr) {\r\n    Mediator.undoManager = undoMgr;\r\n}"},
 {"id":1070, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.OSXAdapter.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"86", "ownerclassname":"net.sourceforge.ganttproject.OSXAdapter", "sourcecode":"private OSXAdapter(GanttProject myProj) {\r\n    this.myProj = myProj;\r\n}"},
 {"id":1071, "name":"handleAbout(com.apple.eawt.ApplicationEvent)", "fullmethod":"net.sourceforge.ganttproject.OSXAdapter.handleAbout(com.apple.eawt.ApplicationEvent)", "ownerclassid":"86", "ownerclassname":"net.sourceforge.ganttproject.OSXAdapter", "sourcecode":"/* Handle the Mac OSX \"about\" menu option. */\r\npublic void handleAbout(ApplicationEvent event) {\r\n    AboutDialog abd = new AboutDialog(myProj);\r\n    abd.setVisible(true);\r\n    /* Indicate weve handled this event ourselves */\r\n    event.setHandled(true);\r\n}"},
 {"id":1072, "name":"handleOpenFile(com.apple.eawt.ApplicationEvent)", "fullmethod":"net.sourceforge.ganttproject.OSXAdapter.handleOpenFile(com.apple.eawt.ApplicationEvent)", "ownerclassid":"86", "ownerclassname":"net.sourceforge.ganttproject.OSXAdapter", "sourcecode":"/* This method handles the case when a file in the Finder is dropped onto\nthe app, or GanttProject is selected via the open-with menu option. The\nevent argument contains the path of the file in either case.\n */\r\npublic void handleOpenFile(ApplicationEvent event) {\r\n    String file;\r\n    Document myDocument;\r\n    if ((myProj.checkCurrentProject()) == true) {\r\n        file = event.getFilename();\r\n        myDocument = myProj.getDocumentManager().getDocument(file);\r\n        try {\r\n            myProj.getProjectUIFacade().openProject(myDocument, myProj.getProject());\r\n        } catch (IOException e) {\r\n            myProj.getUIFacade().showErrorDialog(e);\r\n        }\r\n    }\r\n    event.setHandled(true);\r\n}"},
 {"id":1073, "name":"handleQuit(com.apple.eawt.ApplicationEvent)", "fullmethod":"net.sourceforge.ganttproject.OSXAdapter.handleQuit(com.apple.eawt.ApplicationEvent)", "ownerclassid":"86", "ownerclassname":"net.sourceforge.ganttproject.OSXAdapter", "sourcecode":"/* Handles the quit menu option (defaults to command-q) the same way\nchoosing Project->Quit does.\n */\r\npublic void handleQuit(ApplicationEvent event) {\r\n    myProj.quitApplication();\r\n    /* Not a typo. Must set handled to false else the app will still quit\n    even if we say \"cancel\" on confirmation.\n     */\r\n    event.setHandled(false);\r\n}"},
 {"id":1074, "name":"registerMacOSXApplication(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.OSXAdapter.registerMacOSXApplication(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"86", "ownerclassname":"net.sourceforge.ganttproject.OSXAdapter", "sourcecode":"public static void registerMacOSXApplication(GanttProject myProj) {\r\n    if ((OSXAdapter.theApp) == null) {\r\n        OSXAdapter.theApp = new Application();\r\n    }\r\n    if ((OSXAdapter.osxAdapter) == null) {\r\n        OSXAdapter.osxAdapter = new OSXAdapter(myProj);\r\n    }\r\n    OSXAdapter.theApp.addApplicationListener(OSXAdapter.osxAdapter);\r\n}"},
 {"id":1075, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.PrjInfos.-init-()", "ownerclassid":"87", "ownerclassname":"net.sourceforge.ganttproject.PrjInfos", "sourcecode":"/**\r\n * Default constructor with no parameters.\r\n */\r\npublic PrjInfos() {\r\n    this._sProjectName = \"Untitled Gantt Project\";\r\n    this._sDescription = \"\";\r\n    this._sOrganization = \"\";\r\n    this._sWebLink = \"http://\";\r\n}"},
 {"id":1076, "name":"-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.PrjInfos.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"87", "ownerclassname":"net.sourceforge.ganttproject.PrjInfos", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic PrjInfos(String sProjectName, String sDescription, String sOrganization, String sWebLink) {\r\n    this._sProjectName = sProjectName;\r\n    this._sDescription = sDescription;\r\n    this._sOrganization = sOrganization;\r\n    this._sWebLink = sWebLink;\r\n}"},
 {"id":1077, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.PrjInfos.getDescription()", "ownerclassid":"87", "ownerclassname":"net.sourceforge.ganttproject.PrjInfos", "sourcecode":"/**\r\n *\r\n *\r\n * @return the description of the project.\r\n */\r\npublic String getDescription() {\r\n    return _sDescription;\r\n}"},
 {"id":1078, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.PrjInfos.getName()", "ownerclassid":"87", "ownerclassname":"net.sourceforge.ganttproject.PrjInfos", "sourcecode":"/**\r\n *\r\n *\r\n * @return the name of the project.\r\n */\r\npublic String getName() {\r\n    return _sProjectName;\r\n}"},
 {"id":1079, "name":"getOrganization()", "fullmethod":"net.sourceforge.ganttproject.PrjInfos.getOrganization()", "ownerclassid":"87", "ownerclassname":"net.sourceforge.ganttproject.PrjInfos", "sourcecode":"/**\r\n *\r\n *\r\n * @return the organization of the project.\r\n */\r\npublic String getOrganization() {\r\n    return _sOrganization;\r\n}"},
 {"id":1080, "name":"getWebLink()", "fullmethod":"net.sourceforge.ganttproject.PrjInfos.getWebLink()", "ownerclassid":"87", "ownerclassname":"net.sourceforge.ganttproject.PrjInfos", "sourcecode":"/**\r\n *\r\n *\r\n * @return the web link for the project or for the company.\r\n */\r\npublic String getWebLink() {\r\n    return _sWebLink;\r\n}"},
 {"id":1081, "name":"projectClosed()", "fullmethod":"net.sourceforge.ganttproject.ProjectEventListener.projectClosed()", "ownerclassid":"88", "ownerclassname":"net.sourceforge.ganttproject.ProjectEventListener", "sourcecode":"void projectClosed();"},
 {"id":1082, "name":"projectModified()", "fullmethod":"net.sourceforge.ganttproject.ProjectEventListener.projectModified()", "ownerclassid":"88", "ownerclassname":"net.sourceforge.ganttproject.ProjectEventListener", "sourcecode":"void projectModified();"},
 {"id":1083, "name":"projectSaved()", "fullmethod":"net.sourceforge.ganttproject.ProjectEventListener.projectSaved()", "ownerclassid":"88", "ownerclassname":"net.sourceforge.ganttproject.ProjectEventListener", "sourcecode":"void projectSaved();"},
 {"id":1084, "name":"-init-(net.sourceforge.ganttproject.gui.ResourceTreeUIFacade,java.awt.Component)", "fullmethod":"net.sourceforge.ganttproject.ResourceChartTabContentPanel.-init-(net.sourceforge.ganttproject.gui.ResourceTreeUIFacade,java.awt.Component)", "ownerclassid":"89", "ownerclassname":"net.sourceforge.ganttproject.ResourceChartTabContentPanel", "sourcecode":"ResourceChartTabContentPanel(ResourceTreeUIFacade resourceTree, Component resourceChart) {\r\n    myTreeFacade = resourceTree;\r\n    myResourceChart = resourceChart;\r\n}"},
 {"id":1085, "name":"createButtonPanel()", "fullmethod":"net.sourceforge.ganttproject.ResourceChartTabContentPanel.createButtonPanel()", "ownerclassid":"89", "ownerclassname":"net.sourceforge.ganttproject.ResourceChartTabContentPanel", "sourcecode":"private Component createButtonPanel() {\r\n    Box buttonBar = Box.createHorizontalBox();\r\n    TestGanttRolloverButton upButton = new TestGanttRolloverButton(myTreeFacade.getMoveUpAction());\r\n    upButton.setTextHidden(true);\r\n    buttonBar.add(upButton);\r\n    // \r\n    TestGanttRolloverButton downButton = new TestGanttRolloverButton(myTreeFacade.getMoveDownAction());\r\n    downButton.setTextHidden(true);\r\n    buttonBar.add(downButton);\r\n    // \r\n    JPanel buttonPanel = new JPanel(new BorderLayout());\r\n    buttonPanel.add(buttonBar, BorderLayout.WEST);\r\n    return buttonPanel;\r\n}"},
 {"id":1086, "name":"getAdapter(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.ResourceChartTabContentPanel.getAdapter(java.lang.Class)", "ownerclassid":"89", "ownerclassname":"net.sourceforge.ganttproject.ResourceChartTabContentPanel", "sourcecode":"public Object getAdapter(Class adapter) {\r\n    if (Container.class.equals(adapter)) {\r\n        return getComponent();\r\n    }\r\n    if (Chart.class.equals(adapter)) {\r\n        return myResourceChart;\r\n    }\r\n    return null;\r\n}"},
 {"id":1087, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.ResourceChartTabContentPanel.getComponent()", "ownerclassid":"89", "ownerclassname":"net.sourceforge.ganttproject.ResourceChartTabContentPanel", "sourcecode":"Component getComponent() {\r\n    if ((myTabContentPanel) == null) {\r\n        myTabContentPanel = new JPanel(new BorderLayout());\r\n        Component buttonPanel = createButtonPanel();\r\n        myTabContentPanel.add(buttonPanel, BorderLayout.NORTH);\r\n        myTabContentPanel.add(myTreeFacade.getUIComponent(), BorderLayout.CENTER);\r\n    }\r\n    return myTabContentPanel;\r\n}"},
 {"id":1088, "name":"-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ResourceLoadGraphicArea(GanttProject app, ZoomManager zoomManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myChartModel = new ChartModelResource(getTaskManager(), ((HumanResourceManager) (app.getHumanResourceManager())), getTimeUnitStack(), getUIConfiguration(), ((ResourceChart) (this)));\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    margY = 0;\r\n    appli = app;\r\n}"},
 {"id":1089, "name":"-init-(net.sourceforge.ganttproject.resource.HumanResourceManager)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.-init-(net.sourceforge.ganttproject.resource.HumanResourceManager)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"2( $anonymous0) {\r\n}"},
 {"id":1090, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.-init-()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"3() {\r\n}"},
 {"id":1091, "name":"drawGPVersion(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.drawGPVersion(java.awt.Graphics)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"public void drawGPVersion(Graphics g) {\r\n    g.setColor(Color.black);\r\n    g.setFont(Fonts.GP_VERSION_FONT);\r\n    g.drawString(((\"GanttProject (\" + (GanttProject.version)) + \")\"), 3, ((getHeight()) - 8));\r\n}"},
 {"id":1092, "name":"getChart(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"// /** Return the value of the JTrees Scrollbar */\r\n// public int getScrollBar() {\r\n// return margY;\r\n// }\r\npublic BufferedImage getChart(GanttExportSettings settings) {\r\n    RenderedChartImage renderedImage = ((RenderedChartImage) (getRenderedImage(settings)));\r\n    BufferedImage result = renderedImage.getWholeImage();\r\n    repaint();\r\n    return result;\r\n}"},
 {"id":1093, "name":"getChartModel()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getChartModel()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"protected ChartModelBase getChartModel() {\r\n    return myChartModel;\r\n}"},
 {"id":1094, "name":"getEndDate()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getEndDate()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"public Date getEndDate() {\r\n    // return this.end.getTime();\r\n    TaskLength projectLength = getTaskManager().getProjectLength();\r\n    GanttCalendar pstart = new GanttCalendar(getTaskManager().getProjectStart());\r\n    pstart.add(((int) (projectLength.getLength())));\r\n    GanttCalendar end = pstart.Clone();\r\n    return end.getTime();\r\n}"},
 {"id":1095, "name":"getHeaderHeight()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getHeaderHeight()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"protected int getHeaderHeight() {\r\n    return 0;\r\n}"},
 {"id":1096, "name":"getHumanResourceManager()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getHumanResourceManager()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"private HumanResourceManager getHumanResourceManager() {\r\n    return ((HumanResourceManager) (appli.getHumanResourceManager()));\r\n}"},
 {"id":1097, "name":"getIcon()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getIcon()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"public Icon getIcon() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":1098, "name":"getImplementation()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getImplementation()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"protected ChartComponentBase.AbstractChartImplementation getImplementation() {\r\n    return myChartImplementation;\r\n}"},
 {"id":1099, "name":"getMouseListener()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getMouseListener()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"protected MouseListener getMouseListener() {\r\n    if ((myMouseListener) == null) {\r\n        myMouseListener = new ChartComponentBase.MouseListenerBase() {\r\n            protected Action[] getPopupMenuActions() {\r\n                return new Action[]{ getOptionsDialogAction() };\r\n            }\r\n        };\r\n    }\r\n    return myMouseListener;\r\n}"},
 {"id":1100, "name":"getMouseMotionListener()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getMouseMotionListener()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"protected MouseMotionListener getMouseMotionListener() {\r\n    if ((myMouseMotionListener) == null) {\r\n        myMouseMotionListener = new ChartComponentBase.MouseMotionListenerBase();\r\n    }\r\n    return myMouseMotionListener;\r\n}"},
 {"id":1101, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getName()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"public String getName() {\r\n    return GanttLanguage.getInstance().getText(\"resourcesChart\");\r\n}"},
 {"id":1102, "name":"getPreferredSize()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getPreferredSize()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"/**\r\n * The size of the panel.\r\n */\r\npublic Dimension getPreferredSize() {\r\n    return new Dimension(465, 600);\r\n}"},
 {"id":1103, "name":"getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"/**\r\n * Return an image with the gantt chart\r\n */\r\npublic RenderedImage getRenderedImage(GanttExportSettings settings) {\r\n    Date dateStart = ((settings.getStartDate()) == null) ? getStartDate() : settings.getStartDate();\r\n    Date dateEnd = ((settings.getEndDate()) == null) ? getEndDate() : settings.getEndDate();\r\n    if (dateStart.after(dateEnd)) {\r\n        Date tmp = ((Date) (dateStart.clone()));\r\n        dateStart = ((Date) (dateEnd.clone()));\r\n        dateEnd = tmp;\r\n    }\r\n    TaskLength printedLength = getTaskManager().createLength(getViewState().getBottomTimeUnit(), dateStart, dateEnd);\r\n    int chartWidth = ((int) (((printedLength.getLength(getViewState().getBottomTimeUnit())) + 1) * (getViewState().getBottomUnitWidth())));\r\n    if (chartWidth < (getWidth())) {\r\n        chartWidth = getWidth();\r\n    }\r\n    ResourceTreeImageGenerator resourceTreeGenerator = new ResourceTreeImageGenerator(getHumanResourceManager()) {\r\n        protected boolean isAssignmentVisible(ResourceAssignment assignment) {\r\n            AssignmentNode an = appli.getResourcePanel().getResourceTreeTableModel().getNodeForAssigment(assignment);\r\n            return appli.getResourcePanel().getResourceTreeTable().isVisible(an);\r\n        }\r\n\r\n        protected int getRowHeight() {\r\n            return ResourceLoadGraphicArea.this.getRowHeight();\r\n        }\r\n    };\r\n    BufferedImage resourceTreeImage = resourceTreeGenerator.createImage();\r\n    final int chartHeight = resourceTreeImage.getHeight();\r\n    RenderedResourceChartImage renderedImage = new RenderedResourceChartImage(myChartModel, myChartImplementation, resourceTreeImage, chartWidth, chartHeight);\r\n    return renderedImage;\r\n}"},
 {"id":1104, "name":"getRowHeight()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getRowHeight()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"protected int getRowHeight() {\r\n    return 20;\r\n}"},
 {"id":1105, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getStartDate()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"public Date getStartDate() {\r\n    // return this.beg.getTime();\r\n    return getTaskManager().getProjectStart();\r\n}"},
 {"id":1106, "name":"indexOf(java.util.ArrayList,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.indexOf(java.util.ArrayList,java.lang.String)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"/**\r\n * Search for a coef on the arraylist\r\n */\r\npublic int indexOf(ArrayList listOfParam, String coef) {\r\n    for (int i = 0; i < (listOfParam.size()); i++)\r\n        if (coef == (listOfParam.get(i).toString()))\r\n            return i;\r\n\r\n\r\n    return -1;\r\n}"},
 {"id":1107, "name":"isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"public boolean isExpanded(ProjectResource resource) {\r\n    return true;\r\n}"},
 {"id":1108, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.paintComponent(java.awt.Graphics)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"/**\r\n * draw the panel\r\n */\r\npublic void paintComponent(Graphics g) {\r\n    myChartModel.setBounds(getSize());\r\n    myChartImplementation.paintComponent(g);\r\n}"},
 {"id":1109, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.reset()", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"public void reset() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1110, "name":"setScrollBar(int)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.setScrollBar(int)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"/**\r\n * Change the velue connected to the JTrees Scrollbar\r\n */\r\npublic void setScrollBar(int v) {\r\n    margY = v;\r\n    getChartModel().getChartUIConfiguration().setYOffSet(v);\r\n}"},
 {"id":1111, "name":"setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"90", "ownerclassname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "sourcecode":"public void setTaskManager(TaskManager taskManager) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1112, "name":"-init-(net.sourceforge.ganttproject.resource.HumanResourceManager)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeImageGenerator.-init-(net.sourceforge.ganttproject.resource.HumanResourceManager)", "ownerclassid":"91", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator", "sourcecode":"ResourceTreeImageGenerator(HumanResourceManager resourceManager) {\r\n    myResourceManager = resourceManager;\r\n    final BufferedImage testImage = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB);\r\n    final Graphics g = testImage.getGraphics();\r\n    final int nameFontHeight = g.getFontMetrics().getHeight();\r\n    final int nameLinePadding = 3;\r\n    myRowHeight = nameFontHeight + (2 * nameLinePadding);\r\n}"},
 {"id":1113, "name":"calculateDimension()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeImageGenerator.calculateDimension()", "ownerclassid":"91", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator", "sourcecode":"private Dimension calculateDimension() {\r\n    int width = 0;\r\n    int assignmentsCount = 0;\r\n    final BufferedImage testImage = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB);\r\n    final Graphics g = testImage.getGraphics();\r\n    final int tabSize = 5;\r\n    final List users = myResourceManager.getResources();\r\n    for (Iterator user = users.iterator(); user.hasNext();) {\r\n        HumanResource hr = ((HumanResource) (user.next()));\r\n        int nameWidth = TextLengthCalculatorImpl.getTextLength(g, hr.getName());\r\n        if (nameWidth > width) {\r\n            width = nameWidth;\r\n        }\r\n        ResourceAssignment[] assignments = hr.getAssignments();\r\n        if (assignments != null) {\r\n            for (int i = 0; i < (assignments.length); i++) {\r\n                if (isAssignmentVisible(assignments[i])) {\r\n                    int taskWidth = tabSize + (TextLengthCalculatorImpl.getTextLength(g, assignments[i].getTask().getName()));\r\n                    if (taskWidth > width) {\r\n                        width = taskWidth;\r\n                    }\r\n                    assignmentsCount++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    width += 20;\r\n    int height = ((assignmentsCount + (users.size())) * (getRowHeight())) + 90;\r\n    return new Dimension(width, height);\r\n}"},
 {"id":1114, "name":"createImage()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeImageGenerator.createImage()", "ownerclassid":"91", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator", "sourcecode":"BufferedImage createImage() {\r\n    Dimension d = calculateDimension();\r\n    BufferedImage image = new BufferedImage(d.width, d.height, BufferedImage.TYPE_INT_RGB);\r\n    Graphics g = image.getGraphics();\r\n    g.setColor(Color.white);\r\n    g.fillRect(0, 0, d.width, d.height);\r\n    printResources(g, d.width);\r\n    return image;\r\n}"},
 {"id":1115, "name":"getRowHeight()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeImageGenerator.getRowHeight()", "ownerclassid":"91", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator", "sourcecode":"protected int getRowHeight() {\r\n    return myRowHeight;\r\n}"},
 {"id":1116, "name":"isAssignmentVisible(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeImageGenerator.isAssignmentVisible(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"91", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator", "sourcecode":"protected boolean isAssignmentVisible(ResourceAssignment assignment) {\r\n    return true;\r\n}"},
 {"id":1117, "name":"printResources(java.awt.Graphics,int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeImageGenerator.printResources(java.awt.Graphics,int)", "ownerclassid":"91", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator", "sourcecode":"private void printResources(Graphics g, int width) {\r\n    ((Graphics2D) (g)).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n    g.setColor(Color.black);\r\n    g.setFont(Fonts.RESSOURCE_FONT);\r\n    List users = myResourceManager.getResources();\r\n    int y = 67;\r\n    final int nameLinePadding = 3;\r\n    final int nameLineHeight = getRowHeight();\r\n    boolean isOddRow = false;\r\n    for (Iterator user = users.iterator(); user.hasNext();) {\r\n        HumanResource hr = ((HumanResource) (user.next()));\r\n        {\r\n            // paint resource name here\r\n            String nameOfRes = hr.toString();\r\n            if (isOddRow) {\r\n                g.setColor(ODD_ROW_COLOR);\r\n                g.fillRect(0, y, width, nameLineHeight);\r\n            }\r\n            g.setColor(Color.black);\r\n            // \r\n            g.drawRect(0, y, width, nameLineHeight);\r\n            g.drawString(nameOfRes, 5, ((y + nameLineHeight) - nameLinePadding));\r\n            g.setColor(BORDER_COLOR_3D);\r\n            g.drawLine(1, ((y + nameLineHeight) - 1), (width - 1), ((y + nameLineHeight) - 1));\r\n            y += nameLineHeight;\r\n            isOddRow = !isOddRow;\r\n        }\r\n        {\r\n            // paint assigned task names\r\n            ResourceAssignment[] assignments = hr.getAssignments();\r\n            if (assignments != null) {\r\n                for (int i = 0; i < (assignments.length); i++) {\r\n                    if (isAssignmentVisible(assignments[i])) {\r\n                        if (isOddRow) {\r\n                            g.setColor(ODD_ROW_COLOR);\r\n                            g.fillRect(0, y, width, nameLineHeight);\r\n                        }\r\n                        g.setColor(Color.black);\r\n                        g.drawRect(0, y, width, nameLineHeight);\r\n                        g.drawString((\"  \" + (assignments[i].getTask().getName())), 5, ((y + nameLineHeight) - nameLinePadding));\r\n                        g.setColor(BORDER_COLOR_3D);\r\n                        g.drawLine(1, (y + nameLineHeight), (width - 1), ((y + nameLineHeight) - 1));\r\n                        y += nameLineHeight;\r\n                        isOddRow = !isOddRow;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":1118, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,org.jdesktop.swing.treetable.TreeTableModel)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.-init-(net.sourceforge.ganttproject.IGanttProject,org.jdesktop.swing.treetable.TreeTableModel)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"/**\r\n * Creates an instance of GanttTreeTable with the given TreeTableModel.\r\n *\r\n * @param model\r\n * \t\tTreeTableModel.\r\n */\r\npublic ResourceTreeTable(IGanttProject project, TreeTableModel model) {\r\n    super(project, model);\r\n    myProject = project;\r\n    myProject.addProjectEventListener(new ProjectEventListener() {\r\n        public void projectClosed() {\r\n            deleteAllColumns();\r\n        }\r\n\r\n        public void projectModified() {\r\n        }\r\n\r\n        public void projectSaved() {\r\n        }\r\n    });\r\n    myResourceManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n    myRoleManager.addRoleListener(new RoleManager.Listener() {\r\n        public void rolesChanged(RoleManager.RoleEvent e) {\r\n            setUpRolesRenderer();\r\n            setUpAssignementRolesRenderer();\r\n        }\r\n    });\r\n    ttModel = ((ResourceTreeTableModel) (model));\r\n    this.setTreeTableModel(model);\r\n    initTreeTable();\r\n}"},
 {"id":1119, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.-init-()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"1() {\r\n}"},
 {"id":1120, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.-init-(net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public ColumnHandler(ResourceColumn c) {\r\n    column = c;\r\n}"},
 {"id":1121, "name":"addCustomColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.addCustomColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"/* creates a custom property column in the datamodel and on the screen */\r\npublic void addCustomColumn(ResourceColumn column) {\r\n    if (column == null) {\r\n        /* create dialog and create column */\r\n        column = newResourceColumn();\r\n        ResourceDialogCustomColumn d = new ResourceDialogCustomColumn(Mediator.getGanttProjectSingleton().getUIFacade(), column);\r\n        d.setVisible(true);\r\n        if (!(d.isOk())) {\r\n            return;\r\n        }\r\n        column = d.getColumn();\r\n    }\r\n    if ((column.getTitle()) != null) {\r\n        /* adding the column into the datamodel */\r\n        try {\r\n            ttModel.addCustomColumn(column.getTitle(), column);\r\n        } catch (Exception e) {\r\n            /* TODO add translation */\r\n            JOptionPane.showMessageDialog(this, e.getMessage(), \"Column add\", JOptionPane.ERROR_MESSAGE);\r\n            return;\r\n        }\r\n        /* adding the column to the screen */\r\n        this.addColumn(column.getColumn());\r\n        /* setting the cell renderer */\r\n        String colClass = column.getType().getName();\r\n        int align;\r\n        if ((colClass.equals(\"java.lang.Integer\")) || (colClass.equals(\"java.lang.Double\"))) {\r\n            align = SwingConstants.RIGHT;\r\n            setColumnHorizontalAlignment(column.getTitle(), align);\r\n        } else\r\n            if (colClass.equals(\"java.util.GregorianCalendar\")) {\r\n                align = SwingConstants.CENTER;\r\n                setColumnHorizontalAlignment(column.getTitle(), align);\r\n                /* the customised date cell editor */\r\n                column.getColumn().setCellEditor(newDateCellEditor());\r\n            } else {\r\n                align = SwingConstants.LEFT;\r\n                setColumnHorizontalAlignment(column.getTitle(), align);\r\n            }\r\n\r\n    }\r\n}"},
 {"id":1122, "name":"addKeyListener(java.awt.event.KeyListener)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.addKeyListener(java.awt.event.KeyListener)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public void addKeyListener(KeyListener listener) {\r\n    // getTreeTable().addKeyListener(listener);\r\n    super.addKeyListener(listener);\r\n    getTable().addKeyListener(listener);\r\n    getTree().addKeyListener(listener);\r\n}"},
 {"id":1123, "name":"addMandatoryColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.addMandatoryColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public void addMandatoryColumn(ResourceColumn column) {\r\n    this.addColumn(column.getColumn());\r\n    ttModel.addMandatoryColumn(column);\r\n}"},
 {"id":1124, "name":"addMouseListener(java.awt.event.MouseListener)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.addMouseListener(java.awt.event.MouseListener)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public void addMouseListener(MouseListener listener) {\r\n    getTreeTable().addMouseListener(listener);\r\n}"},
 {"id":1125, "name":"createDefinition(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.createDefinition(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public CustomPropertyDefinition createDefinition(String id, String typeAsString, String name, String defaultValueAsString) {\r\n    final ResourceColumn newColumn = newResourceColumn(Integer.valueOf(id).intValue());\r\n    newColumn.setTitle(name);\r\n    final CustomPropertyDefinition stubDefinition = CustomPropertyManager.PropertyTypeEncoder.decodeTypeAndDefaultValue(typeAsString, defaultValueAsString);\r\n    newColumn.setType(stubDefinition.getType());\r\n    newColumn.setDefaultVal(stubDefinition.getDefaultValue());\r\n    assert String.valueOf(newColumn.getIndex()).equals(id);\r\n    addCustomColumn(newColumn);\r\n    List definitions = myResourceManager.getDefinitions();\r\n    return ((CustomPropertyDefinition) (definitions.get(((definitions.size()) - 1))));\r\n}"},
 {"id":1126, "name":"createPopup()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.createPopup()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"/* creates the popup menu for the column management */\r\nprivate void createPopup() {\r\n    popupMenu = new JPopupMenu();\r\n    /* show columns list */\r\n    ArrayList cols = ttModel.getColumns();\r\n    ResourceColumn col;\r\n    int size = cols.size();\r\n    for (int i = 0; i < size; i++) {\r\n        col = ((ResourceColumn) (cols.get(i)));\r\n        JCheckBoxMenuItem item = new JCheckBoxMenuItem(col.getTitle(), col.isVisible());\r\n        item.addActionListener(new ResourceTreeTable.ColumnHandler(col));\r\n        popupMenu.add(item);\r\n    }\r\n    popupMenu.addSeparator();\r\n    /* display all columns button */\r\n    JMenuItem showAllItem = new JMenuItem(ResourceTreeTable.language.getText(\"displayAll\"));\r\n    showAllItem.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            /* TODO the undo management */\r\n            Mediator.getGanttProjectSingleton().getUndoManager().undoableEdit(\"displayAllColumns\", new Runnable() {\r\n                public void run() {\r\n                    /* sets all the columns visible */\r\n                    ArrayList cols = ttModel.getColumns();\r\n                    for (int i = 0; i < (cols.size()); i++) {\r\n                        ResourceColumn col = ((ResourceColumn) (cols.get(i)));\r\n                        if (!(col.isVisible())) {\r\n                            showColumn(col);\r\n                        }\r\n                    }\r\n                    getProject().setModified(true);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    popupMenu.add(showAllItem);\r\n    popupMenu.addSeparator();\r\n    /* add new column button */\r\n    JMenuItem addColumnItem = new JMenuItem(ResourceTreeTable.language.getText(\"addCustomColumn\"));\r\n    addColumnItem.setIcon(new ImageIcon(getClass().getResource(\"/icons/addCol_16.gif\")));\r\n    addColumnItem.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            /* TODO the undo management */\r\n            Mediator.getGanttProjectSingleton().getUndoManager().undoableEdit(\"addCustomColumn\", new Runnable() {\r\n                public void run() {\r\n                    ResourceColumn column = null;\r\n                    addCustomColumn(column);\r\n                    getProject().setModified();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    popupMenu.add(addColumnItem);\r\n    /* delete column button */\r\n    delColumnItem = new JMenuItem(ResourceTreeTable.language.getText(\"deleteCustomColumn\"));\r\n    delColumnItem.setIcon(new ImageIcon(getClass().getResource(\"/icons/removeCol_16.gif\")));\r\n    delColumnItem.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            /* TODO undo managment */\r\n            Mediator.getGanttProjectSingleton().getUndoManager().undoableEdit(\"deleteCustomColumn\", new Runnable() {\r\n                public void run() {\r\n                    int ind = getTable().columnAtPoint(clickPoint);\r\n                    if (ind >= 0) {\r\n                        deleteCustomColumn(getTable().getColumnName(ind));\r\n                        delColumnItem.setEnabled(false);\r\n                        getProject().setModified();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    popupMenu.add(delColumnItem);\r\n}"},
 {"id":1127, "name":"deleteAllColumns()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.deleteAllColumns()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"private void deleteAllColumns() {\r\n    List customPropsDefinitions = getDefinitions();\r\n    for (int i = 0; i < (customPropsDefinitions.size()); i++) {\r\n        CustomPropertyDefinition nextDefinition = ((CustomPropertyDefinition) (customPropsDefinitions.get(i)));\r\n        deleteCustomColumn(nextDefinition.getName());\r\n    }\r\n    ttModel.decreaseCustomPropertyIndex(customPropsDefinitions.size());\r\n}"},
 {"id":1128, "name":"deleteCustomColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.deleteCustomColumn(java.lang.String)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"/* deletes the column from the screen and the data model */\r\npublic void deleteCustomColumn(String name) {\r\n    ResourceColumn col = null;\r\n    col = ttModel.deleteCustomColumn(name);\r\n    this.removeColumn(col.getColumn());\r\n}"},
 {"id":1129, "name":"downResource()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.downResource()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"/**\r\n * Move down the selected resource\r\n */\r\nvoid downResource() {\r\n    final DefaultMutableTreeNode[] selectedNodes = getSelectedNodes();\r\n    if ((selectedNodes.length) == 0) {\r\n        return;\r\n    }\r\n    DefaultMutableTreeNode selectedNode = selectedNodes[0];\r\n    if (selectedNode instanceof ResourceNode) {\r\n        ResourceNode rn = ((ResourceNode) (selectedNode));\r\n        int index = rn.getParent().getIndex(rn);\r\n        if (index < ((rn.getParent().getChildCount()) - 1)) {\r\n            HumanResource people = ((HumanResource) (selectedNodes[0].getUserObject()));\r\n            ttModel.moveDown(people);\r\n            getTree().setSelectionPath(new TreePath(rn.getPath()));\r\n        }\r\n    }\r\n}"},
 {"id":1130, "name":"getDefinitions()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.getDefinitions()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public List getDefinitions() {\r\n    return myResourceManager.getDefinitions();\r\n}"},
 {"id":1131, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.getRoleManager()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"private RoleManager getRoleManager() {\r\n    return myRoleManager;\r\n}"},
 {"id":1132, "name":"getSelectedNodes()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.getSelectedNodes()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"/**\r\n *\r\n *\r\n * @return the list of the selected nodes.\r\n */\r\npublic DefaultMutableTreeNode[] getSelectedNodes() {\r\n    TreePath[] currentSelection = getTreeTable().getTree().getSelectionPaths();\r\n    if ((currentSelection == null) || ((currentSelection.length) == 0)) {\r\n        return new DefaultMutableTreeNode[0];\r\n    }\r\n    DefaultMutableTreeNode[] dmtnselected = new DefaultMutableTreeNode[currentSelection.length];\r\n    for (int i = 0; i < (currentSelection.length); i++) {\r\n        dmtnselected[i] = ((DefaultMutableTreeNode) (currentSelection[i].getLastPathComponent()));\r\n    }\r\n    return dmtnselected;\r\n}"},
 {"id":1133, "name":"getTree()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.getTree()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public JTree getTree() {\r\n    return this.getTreeTable().getTree();\r\n}"},
 {"id":1134, "name":"getVerticalScrollBar()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.getVerticalScrollBar()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public JScrollBar getVerticalScrollBar() {\r\n    return scrollPane.getVerticalScrollBar();\r\n}"},
 {"id":1135, "name":"getVisibleFields()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.getVisibleFields()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public TableHeaderUIFacade getVisibleFields() {\r\n    return myVisibleFields;\r\n}"},
 {"id":1136, "name":"hideColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.hideColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"void hideColumn(ResourceColumn col) {\r\n    col.setVisible(false);\r\n    this.removeColumn(col.getColumn());\r\n}"},
 {"id":1137, "name":"importData(net.sourceforge.ganttproject.CustomPropertyManager)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.importData(net.sourceforge.ganttproject.CustomPropertyManager)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public void importData(CustomPropertyManager source) {\r\n    List sourceDefs = source.getDefinitions();\r\n    for (int i = 0; i < (sourceDefs.size()); i++) {\r\n        CustomPropertyDefinition nextDefinition = ((CustomPropertyDefinition) (sourceDefs.get(i)));\r\n        createDefinition(nextDefinition.getID(), nextDefinition.getTypeAsString(), nextDefinition.getName(), nextDefinition.getDefaultValueAsString());\r\n    }\r\n}"},
 {"id":1138, "name":"initColumnsAlignements()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.initColumnsAlignements()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"private void initColumnsAlignements() {\r\n    // setColumnHorizontalAlignment(ResourceTreeTableModel.strResourceName,\r\n    // SwingConstants.LEFT);\r\n    setColumnHorizontalAlignment(ResourceTreeTableModel.strResourceRole, SwingConstants.LEFT);\r\n    setColumnHorizontalAlignment(ResourceTreeTableModel.strResourceEMail, SwingConstants.LEFT);\r\n    setColumnHorizontalAlignment(ResourceTreeTableModel.strResourcePhone, SwingConstants.RIGHT);\r\n    setColumnHorizontalAlignment(ResourceTreeTableModel.strResourceRoleForTask, SwingConstants.LEFT);\r\n    // Set the columns widths\r\n    getTable().getColumnExt(ResourceTreeTableModel.strResourceName).setPreferredWidth(150);\r\n    getTable().getColumnExt(ResourceTreeTableModel.strResourceRole).setPreferredWidth(120);\r\n    getTable().getColumnExt(ResourceTreeTableModel.strResourceEMail).setPreferredWidth(100);\r\n    getTable().getColumnExt(ResourceTreeTableModel.strResourcePhone).setPreferredWidth(100);\r\n    getTable().getColumnExt(ResourceTreeTableModel.strResourceRoleForTask).setPreferredWidth(100);\r\n    // getTable().getColumnExt(ResourceTreeTableModel.strResourceName)\r\n    // .setMaxWidth(300);\r\n    // getTable().getColumnExt(ResourceTreeTableModel.strResourceRole)\r\n    // .setMaxWidth(300);\r\n    // getTable().getColumnExt(ResourceTreeTableModel.strResourceEMail)\r\n    // .setMaxWidth(300);\r\n    // getTable().getColumnExt(ResourceTreeTableModel.strResourcePhone)\r\n    // .setMaxWidth(300);\r\n    // getTable().getColumnExt(ResourceTreeTableModel.strResourceRoleForTask)\r\n    // .setMaxWidth(300);\r\n}"},
 {"id":1139, "name":"initTreeTable()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.initTreeTable()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"/**\r\n * Initialize the treetable. Addition of various listeners, trees icons,\r\n */\r\npublic void initTreeTable() {\r\n    // ttModel = (ResourceTreeTableModel) this.getTreeTableModel();\r\n    Enumeration enumeration = getTable().getColumnModel().getColumns();\r\n    Collection lToDel = new ArrayList();\r\n    while (enumeration.hasMoreElements()) {\r\n        TableColumnExt tc = ((TableColumnExt) (enumeration.nextElement()));\r\n        lToDel.add(tc);\r\n    } \r\n    Iterator it = lToDel.iterator();\r\n    while (it.hasNext())\r\n        getTable().removeColumn(((TableColumn) (it.next())));\r\n\r\n    getTable().setAutoCreateColumnsFromModel(false);\r\n    getTable().setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);\r\n    TableColumnExt tce1 = newTableColumnExt(0);\r\n    tce1.setTitle(ResourceTreeTableModel.strResourceName);\r\n    TableColumnExt tce2 = newTableColumnExt(1);\r\n    tce2.setTitle(ResourceTreeTableModel.strResourceRole);\r\n    TableColumnExt tce3 = newTableColumnExt(2);\r\n    tce3.setTitle(ResourceTreeTableModel.strResourceEMail);\r\n    TableColumnExt tce4 = newTableColumnExt(3);\r\n    tce4.setTitle(ResourceTreeTableModel.strResourcePhone);\r\n    TableColumnExt tce5 = newTableColumnExt(4);\r\n    tce5.setTitle(ResourceTreeTableModel.strResourceRoleForTask);\r\n    /* adding the columns on the screen and to the data model */\r\n    this.addMandatoryColumn(new ResourceColumn(tce1, ttModel.useNextIndex(), String.class));\r\n    this.addMandatoryColumn(new ResourceColumn(tce2, ttModel.useNextIndex(), String.class));\r\n    this.addMandatoryColumn(new ResourceColumn(tce3, ttModel.useNextIndex(), String.class));\r\n    this.addMandatoryColumn(new ResourceColumn(tce4, ttModel.useNextIndex(), String.class));\r\n    this.addMandatoryColumn(new ResourceColumn(tce5, ttModel.useNextIndex(), String.class));\r\n    initColumnsAlignements();\r\n    ArrayList cols = ttModel.getColumns();\r\n    for (int i = 2; i < (cols.size()); i++) {\r\n        hideColumn(((ResourceColumn) (cols.get(i))));\r\n    }\r\n    // Highlighters to ease the reading of the table.\r\n    setHighlighters(new org.jdesktop.swing.decorator.HighlighterPipeline(new Highlighter[]{ AlternateRowHighlighter.quickSilver, new HierarchicalColumnHighlighter() }));\r\n    setShowHorizontalLines(true);\r\n    setHasColumnControl(true);\r\n    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/simple_task.gif\"));\r\n    setOpenIcon(icon);\r\n    setClosedIcon(icon);\r\n    setCollapsedIcon(new ImageIcon(getClass().getResource(\"/icons/plus.gif\")));\r\n    setExpandedIcon(new ImageIcon(getClass().getResource(\"/icons/minus.gif\")));\r\n    setLeafIcon(icon);\r\n    this.getTreeTable().getParent().setBackground(Color.WHITE);\r\n    setUpRolesRenderer();\r\n    setUpAssignementRolesRenderer();\r\n    // getTable().getTableHeader().addMouseListener(new MouseListener(){\r\n    // \r\n    // public void mouseClicked(MouseEvent arg0) {\r\n    // // TODO Auto-generated method stub\r\n    // \r\n    // }\r\n    // \r\n    // public void mousePressed(MouseEvent arg0) {\r\n    // // TODO Auto-generated method stub\r\n    // \r\n    // }\r\n    // \r\n    // public void mouseReleased(MouseEvent e) {\r\n    // Enumeration en = getTable().getColumnModel().getColumns();\r\n    // while(en.hasMoreElements())\r\n    // {\r\n    // TableColumn tc = (TableColumn)en.nextElement();\r\n    // tc.setPreferredWidth(tc.getWidth());\r\n    // }\r\n    // }\r\n    // \r\n    // public void mouseEntered(MouseEvent arg0) {\r\n    // // TODO Auto-generated method stub\r\n    // \r\n    // }\r\n    // \r\n    // public void mouseExited(MouseEvent arg0) {\r\n    // // TODO Auto-generated method stub\r\n    // \r\n    // }\r\n    // \r\n    // });\r\n    this.getTreeTable().getTree().addTreeExpansionListener(new TreeExpansionListener() {\r\n        public void treeExpanded(TreeExpansionEvent arg0) {\r\n            Mediator.getGanttProjectSingleton().repaint2();\r\n        }\r\n\r\n        public void treeCollapsed(TreeExpansionEvent arg0) {\r\n            Mediator.getGanttProjectSingleton().repaint2();\r\n        }\r\n    });\r\n    this.setPreferredSize(new Dimension(this.getPreferredSize().width, 0));\r\n    /* listener provoking the popup menu for the column management */\r\n    this.getTable().getTableHeader().addMouseListener(new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseReleased(MouseEvent e) {\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        private void handlePopupTrigger(MouseEvent e) {\r\n            if (e.isPopupTrigger()) {\r\n                clickPoint = e.getPoint();\r\n                String name = getTable().getColumnName(getTable().columnAtPoint(clickPoint));\r\n                createPopup();\r\n                /* the delete button is activated only for removable columns */\r\n                if (ttModel.checkRemovableCol(name))\r\n                    delColumnItem.setEnabled(true);\r\n                else\r\n                    delColumnItem.setEnabled(false);\r\n\r\n                Component c = ((Component) (e.getSource()));\r\n                popupMenu.show(c, e.getX(), e.getY());\r\n            }\r\n        }\r\n    });\r\n    getTable().getColumnModel().addColumnModelListener(new TableColumnModelListener() {\r\n        public void columnAdded(TableColumnModelEvent e) {\r\n        }\r\n\r\n        public void columnMarginChanged(ChangeEvent e) {\r\n        }\r\n\r\n        public void columnMoved(TableColumnModelEvent e) {\r\n            if ((e.getFromIndex()) != (e.getToIndex())) {\r\n                updateColumnOrders(e.getFromIndex(), e.getToIndex());\r\n                getProject().setModified();\r\n            }\r\n        }\r\n\r\n        public void columnRemoved(TableColumnModelEvent e) {\r\n        }\r\n\r\n        public void columnSelectionChanged(ListSelectionEvent e) {\r\n        }\r\n    });\r\n}"},
 {"id":1140, "name":"isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public boolean isExpanded(ProjectResource pr) {\r\n    ResourceNode node = ((ResourceTreeTableModel) (getTreeTableModel())).exists(pr);\r\n    if (node != null)\r\n        return getTreeTable().isExpanded(new javax.swing.tree.TreePath(node.getPath()));\r\n\r\n    return false;\r\n}"},
 {"id":1141, "name":"isVisible(javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.isVisible(javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public boolean isVisible(DefaultMutableTreeNode node) {\r\n    return this.getTreeTable().getTree().isVisible(new javax.swing.tree.TreePath(node.getPath()));\r\n}"},
 {"id":1142, "name":"newResourceColumn()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.newResourceColumn()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"private ResourceColumn newResourceColumn() {\r\n    TableColumnExt col = newTableColumnExt(ttModel.useNextIndex());\r\n    ResourceColumn result = new ResourceColumn(col, col.getModelIndex());\r\n    return result;\r\n}"},
 {"id":1143, "name":"newResourceColumn(int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.newResourceColumn(int)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"private ResourceColumn newResourceColumn(int id) {\r\n    TableColumnExt col = newTableColumnExt(ttModel.useNextIndex());\r\n    ResourceColumn result = new ResourceColumn(col, id);\r\n    return result;\r\n}"},
 {"id":1144, "name":"setAction(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.setAction(javax.swing.Action)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public void setAction(Action action) {\r\n    InputMap inputMap = new InputMap();\r\n    inputMap.put(((KeyStroke) (action.getValue(Action.ACCELERATOR_KEY))), action.getValue(Action.NAME));\r\n    inputMap.setParent(getTreeTable().getInputMap(JComponent.WHEN_FOCUSED));\r\n    getTreeTable().setInputMap(JComponent.WHEN_FOCUSED, inputMap);\r\n    // Add the action to the component\r\n    getTreeTable().getActionMap().put(action.getValue(Action.NAME), action);\r\n}"},
 {"id":1145, "name":"setRowHeight(int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.setRowHeight(int)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"public void setRowHeight(int rowHeight) {\r\n    super.setRowHeight(rowHeight);\r\n}"},
 {"id":1146, "name":"setUpAssignementRolesRenderer()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.setUpAssignementRolesRenderer()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"void setUpAssignementRolesRenderer() {\r\n    // Role roles[] = Mediator.getRoleManager().getEnabledRoles();\r\n    // final JComboBox comboBox = new JComboBox();\r\n    // for (int i = 0; i < roles.length; i++)\r\n    // comboBox.addItem(roles[i]);\r\n    final JComboBox comboBox = new JComboBox(getRoleManager().getEnabledRoles());\r\n    try {\r\n        TableColumn roleColumn = this.getColumn(ResourceTreeTableModel.strResourceRoleForTask);\r\n        comboBox.setEditable(false);\r\n        roleColumn.setCellEditor(new DefaultCellEditor(comboBox));\r\n    } catch (IllegalArgumentException ex) {\r\n    }\r\n}"},
 {"id":1147, "name":"setUpRolesRenderer()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.setUpRolesRenderer()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"void setUpRolesRenderer() {\r\n    Role[] roles = getRoleManager().getEnabledRoles();\r\n    final JComboBox comboBox = new JComboBox();\r\n    for (int i = 0; i < (roles.length); i++)\r\n        comboBox.addItem(roles[i]);\r\n\r\n    try {\r\n        TableColumn roleColumn = this.getColumn(ResourceTreeTableModel.strResourceRole);\r\n        comboBox.setEditable(false);\r\n        roleColumn.setCellEditor(new DefaultCellEditor(comboBox));\r\n    } catch (IllegalArgumentException ex) {\r\n    }\r\n}"},
 {"id":1148, "name":"showColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.showColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"/* Shows the given column. The column will appear on\nits default position\n */\r\nvoid showColumn(ResourceColumn col) {\r\n    col.setVisible(true);\r\n    if ((col.getOrder()) < (getTable().getColumnCount())) {\r\n        col.setOrder(getTable().getColumnCount());\r\n    }\r\n    this.addColumn(col.getColumn());\r\n}"},
 {"id":1149, "name":"upResource()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.upResource()", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"void upResource() {\r\n    final DefaultMutableTreeNode[] selectedNodes = getSelectedNodes();\r\n    if ((selectedNodes.length) == 0) {\r\n        return;\r\n    }\r\n    DefaultMutableTreeNode selectedNode = selectedNodes[0];\r\n    if (selectedNode instanceof ResourceNode) {\r\n        ResourceNode rn = ((ResourceNode) (selectedNode));\r\n        int index = rn.getParent().getIndex(rn);\r\n        if (index > 0) {\r\n            HumanResource people = ((HumanResource) (selectedNodes[0].getUserObject()));\r\n            ttModel.moveUp(people);\r\n            getTree().setSelectionPath(new TreePath(rn.getPath()));\r\n        }\r\n    }\r\n}"},
 {"id":1150, "name":"updateColumnOrders(int,int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable.updateColumnOrders(int,int)", "ownerclassid":"94", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable", "sourcecode":"protected void updateColumnOrders(int fromIndex, int toIndex) {\r\n    List columns = ttModel.getColumns();\r\n    for (int i = 0; i < (columns.size()); i++) {\r\n        ResourceColumn nextColumn = ((ResourceColumn) (columns.get(i)));\r\n        if ((nextColumn.getOrder()) == fromIndex) {\r\n            nextColumn.setOrder(toIndex);\r\n            continue;\r\n        }\r\n        if ((nextColumn.getOrder()) == toIndex) {\r\n            nextColumn.setOrder(fromIndex);\r\n            continue;\r\n        }\r\n    }\r\n}"},
 {"id":1151, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable$ColumnHandler.-init-(net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"92", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable$ColumnHandler", "sourcecode":"public ColumnHandler(ResourceColumn c) {\r\n    column = c;\r\n}"},
 {"id":1152, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable$ColumnHandler.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"92", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable$ColumnHandler", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    if (column.isVisible())\r\n        hideColumn(column);\r\n    else\r\n        showColumn(column);\r\n\r\n    getProject().setModified();\r\n}"},
 {"id":1153, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl.-init-()", "ownerclassid":"93", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl", "sourcecode":"TableHeaderImpl() {\r\n}"},
 {"id":1154, "name":"add(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl.add(java.lang.String,int,int)", "ownerclassid":"93", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl", "sourcecode":"public void add(String name, int order, int width) {\r\n    ArrayList cols = ttModel.getColumns();\r\n    for (int i = 0; i < (cols.size()); i++) {\r\n        ResourceColumn col = ((ResourceColumn) (cols.get(i)));\r\n        if ((name.equals(col.getID())) && (!(col.isVisible()))) {\r\n            col.setWidth(width);\r\n            col.setOrder(order);\r\n            showColumn(col);\r\n        }\r\n    }\r\n}"},
 {"id":1155, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl.clear()", "ownerclassid":"93", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl", "sourcecode":"public void clear() {\r\n    deleteAllColumns();\r\n}"},
 {"id":1156, "name":"getField(int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl.getField(int)", "ownerclassid":"93", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl", "sourcecode":"public TableHeaderUIFacade.Column getField(int index) {\r\n    return ((TableHeaderUIFacade.Column) (ttModel.getColumns().get(index)));\r\n}"},
 {"id":1157, "name":"getSize()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl.getSize()", "ownerclassid":"93", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl", "sourcecode":"public int getSize() {\r\n    return ttModel.getColumns().size();\r\n}"},
 {"id":1158, "name":"importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "ownerclassid":"93", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl", "sourcecode":"public void importData(TableHeaderUIFacade source) {\r\n    if ((source.getSize()) == 0) {\r\n        return;\r\n    }\r\n    ArrayList cols = ttModel.getColumns();\r\n    for (int i = 0; i < (cols.size()); i++) {\r\n        ResourceColumn col = ((ResourceColumn) (cols.get(i)));\r\n        hideColumn(col);\r\n    }\r\n    ArrayList sourceColumns = new ArrayList();\r\n    for (int i = 0; i < (source.getSize()); i++) {\r\n        TableHeaderUIFacade.Column nextField = source.getField(i);\r\n        sourceColumns.add(nextField);\r\n    }\r\n    Collections.sort(sourceColumns, new Comparator() {\r\n        public int compare(Object o1, Object o2) {\r\n            TableHeaderUIFacade.Column lhs = ((TableHeaderUIFacade.Column) (o1));\r\n            TableHeaderUIFacade.Column rhs = ((TableHeaderUIFacade.Column) (o2));\r\n            return (lhs.getOrder()) - (rhs.getOrder());\r\n        }\r\n    });\r\n    for (int i = 0; i < (sourceColumns.size()); i++) {\r\n        TableHeaderUIFacade.Column nextField = ((TableHeaderUIFacade.Column) (sourceColumns.get(i)));\r\n        add(nextField.getID(), i, nextField.getWidth());\r\n    }\r\n}"},
 {"id":1159, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public ResourceTreeTableModel(ResourceManager resMgr, TaskManager taskManager) {\r\n    super();\r\n    myResourceManager = ((HumanResourceManager) (resMgr));\r\n    myTaskManager = taskManager;\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        public void taskRemoved(TaskHierarchyEvent e) {\r\n            fireResourceChange(e.getTask());\r\n        }\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            fireResourceChange(e.getTask());\r\n        }\r\n\r\n        void fireResourceChange(Task task) {\r\n            ResourceAssignment[] assignments = task.getAssignments();\r\n            for (int i = 0; i < (assignments.length); i++) {\r\n                assignments[i].getResource().resetLoads();\r\n                resourceAssignmentsChanged(new ProjectResource[]{ assignments[i].getResource() });\r\n            }\r\n        }\r\n    });\r\n    changeLanguage(ResourceTreeTableModel.language);\r\n    root = buildTree();\r\n    this.setRoot(root);\r\n}"},
 {"id":1160, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.-init-()", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"1() {\r\n}"},
 {"id":1161, "name":"addCustomColumn(java.lang.String,net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.addCustomColumn(java.lang.String,net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * Adds a custom column (which is removable) to the datamodel\r\n */\r\npublic void addCustomColumn(String title, ResourceColumn col) throws Exception {\r\n    /* TODO add translation */\r\n    if (((HumanResourceManager) (myResourceManager)).checkCustomField(title))\r\n        throw new Exception(\"Column exists\");\r\n\r\n    ((HumanResourceManager) (myResourceManager)).addCustomField(col);\r\n    columns.put(new Integer(ResourceTreeTableModel.index), col);\r\n}"},
 {"id":1162, "name":"addMandatoryColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.addMandatoryColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * Adds a column that cannot be removed afterwards.\r\n */\r\npublic void addMandatoryColumn(ResourceColumn col) {\r\n    columns.put(new Integer(col.getIndex()), col);\r\n}"},
 {"id":1163, "name":"addResource(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.addResource(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public DefaultMutableTreeNode addResource(ProjectResource people) {\r\n    DefaultMutableTreeNode result = new ResourceNode(people);\r\n    insertNodeInto(result, root, root.getChildCount());\r\n    myResourceManager.toString();\r\n    return result;\r\n}"},
 {"id":1164, "name":"buildAssignmentsSubtree(net.sourceforge.ganttproject.resource.ResourceNode)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.buildAssignmentsSubtree(net.sourceforge.ganttproject.resource.ResourceNode)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"private void buildAssignmentsSubtree(ResourceNode resourceNode) {\r\n    ProjectResource resource = resourceNode.getResource();\r\n    resourceNode.removeAllChildren();\r\n    ResourceAssignment[] assignments = resource.getAssignments();\r\n    int[] indices = new int[assignments.length];\r\n    TreeNode[] children = new TreeNode[assignments.length];\r\n    if ((assignments.length) > 0) {\r\n        for (int i = 0; i < (assignments.length); i++) {\r\n            indices[i] = i;\r\n            AssignmentNode an = new AssignmentNode(assignments[i]);\r\n            children[i] = an;\r\n            resourceNode.add(an);\r\n        }\r\n    }\r\n    fireTreeStructureChanged(this, resourceNode.getPath(), indices, children);\r\n}"},
 {"id":1165, "name":"buildTree()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.buildTree()", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"private ResourceNode buildTree() {\r\n    ResourceNode root = new ResourceNode(null);\r\n    List listResources = myResourceManager.getResources();\r\n    Iterator itRes = listResources.iterator();\r\n    while (itRes.hasNext()) {\r\n        ProjectResource pr = ((ProjectResource) (itRes.next()));\r\n        ResourceAssignment[] tra = pr.getAssignments();\r\n        ResourceNode rnRes = new ResourceNode(pr);// the first for the\r\n\r\n        // resource\r\n        root.add(rnRes);\r\n    } \r\n    return root;\r\n}"},
 {"id":1166, "name":"changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * Changes the language.\r\n *\r\n * @param ganttLanguage\r\n * \t\tNew language to use.\r\n */\r\npublic void changeLanguage(GanttLanguage ganttLanguage) {\r\n    ResourceTreeTableModel.strResourceName = ResourceTreeTableModel.language.getText(\"tableColResourceName\");\r\n    ResourceTreeTableModel.strResourceRole = ResourceTreeTableModel.language.getText(\"tableColResourceRole\");\r\n    ResourceTreeTableModel.strResourceEMail = ResourceTreeTableModel.language.getText(\"tableColResourceEMail\");\r\n    ResourceTreeTableModel.strResourcePhone = ResourceTreeTableModel.language.getText(\"tableColResourcePhone\");\r\n    ResourceTreeTableModel.strResourceRoleForTask = ResourceTreeTableModel.language.getText(\"tableColResourceRoleForTask\");\r\n    // hack assume that INDEX_RESOURCE_ROLE_TASK is the last index\r\n    String[] cols = new String[(ResourceTreeTableModel.INDEX_RESOURCE_ROLE_TASK) + 1];\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_EMAIL] = ResourceTreeTableModel.strResourceEMail;\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_NAME] = ResourceTreeTableModel.strResourceName;\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_PHONE] = ResourceTreeTableModel.strResourcePhone;\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_ROLE] = ResourceTreeTableModel.strResourceRole;\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_ROLE_TASK] = ResourceTreeTableModel.strResourceRoleForTask;\r\n    for (int i = 0; i < (cols.length); i++) {\r\n        ResourceColumn col = ((ResourceColumn) (columns.get(new Integer(i))));\r\n        if (col != null)\r\n            col.setTitle(cols[i]);\r\n\r\n    }\r\n}"},
 {"id":1167, "name":"changePeople(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.changePeople(java.util.List)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public void changePeople(List peoples) {\r\n    Iterator it = peoples.iterator();\r\n    while (it.hasNext())\r\n        addResource(((ProjectResource) (it.next())));\r\n\r\n}"},
 {"id":1168, "name":"checkRemovableCol(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.checkRemovableCol(java.lang.String)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * checks if the given column is removable\r\n */\r\npublic boolean checkRemovableCol(String name) {\r\n    /* only custom columns are removable */\r\n    return ((HumanResourceManager) (myResourceManager)).checkCustomField(name);\r\n}"},
 {"id":1169, "name":"decreaseCustomPropertyIndex(int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.decreaseCustomPropertyIndex(int)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"void decreaseCustomPropertyIndex(int i) {\r\n    ResourceTreeTableModel.index -= i;\r\n}"},
 {"id":1170, "name":"deleteCustomColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.deleteCustomColumn(java.lang.String)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * deletes a custom column from the datamodel\r\n */\r\npublic ResourceColumn deleteCustomColumn(String name) {\r\n    ResourceColumn toDel = null;\r\n    Collection vals = columns.values();\r\n    Iterator i = vals.iterator();\r\n    while (i.hasNext()) {\r\n        toDel = ((ResourceColumn) (i.next()));\r\n        if (name.equals(toDel.getTitle())) {\r\n            ((HumanResourceManager) (myResourceManager)).removeCustomField(toDel.getTitle());\r\n            /* this deletes the object from the Hashtable too */\r\n            vals.remove(toDel);\r\n            return toDel;\r\n        }\r\n    } \r\n    return null;\r\n}"},
 {"id":1171, "name":"deleteResource(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.deleteResource(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public void deleteResource(ProjectResource people) {\r\n    removeNodeFromParent(getNodeForResource(people));\r\n    // myResourceManager.remove(people);\r\n}"},
 {"id":1172, "name":"deleteResources(net.sourceforge.ganttproject.resource.ProjectResource[])", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.deleteResources(net.sourceforge.ganttproject.resource.ProjectResource[])", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public void deleteResources(ProjectResource[] peoples) {\r\n    for (int i = 0; i < (peoples.length); i++) {\r\n        deleteResource(peoples[i]);\r\n    }\r\n}"},
 {"id":1173, "name":"exists(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.exists(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"ResourceNode exists(ProjectResource pr) {\r\n    ResourceNode res = null;\r\n    Enumeration en = root.children();\r\n    while ((res == null) && (en.hasMoreElements())) {\r\n        ResourceNode rn = ((ResourceNode) (en.nextElement()));\r\n        if (rn.getUserObject().equals(pr))\r\n            res = rn;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":1174, "name":"exists(net.sourceforge.ganttproject.resource.ResourceNode,net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.exists(net.sourceforge.ganttproject.resource.ResourceNode,net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"private AssignmentNode exists(ResourceNode rn, ResourceAssignment ra) {\r\n    AssignmentNode res = null;\r\n    Enumeration en = rn.children();\r\n    while ((res == null) && (en.hasMoreElements())) {\r\n        AssignmentNode an = ((AssignmentNode) (en.nextElement()));\r\n        if (an.getUserObject().equals(ra))\r\n            res = an;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":1175, "name":"getAllResouces()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getAllResouces()", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public List getAllResouces() {\r\n    return myResourceManager.getResources();\r\n}"},
 {"id":1176, "name":"getColumn(int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getColumn(int)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * Returns the ResourceColumn associated to the given index\r\n */\r\npublic ResourceColumn getColumn(int index) {\r\n    return ((ResourceColumn) (columns.get(new Integer(index))));\r\n}"},
 {"id":1177, "name":"getColumnClass(int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getColumnClass(int)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * {@inheritDoc }\r\n */\r\npublic Class getColumnClass(int colIndex) {\r\n    if (colIndex == 0) {\r\n        return hierarchicalColumnClass;\r\n    }\r\n    ResourceColumn column = ((ResourceColumn) (columns.get(new Integer(colIndex))));\r\n    return column == null ? String.class : column.getType();\r\n}"},
 {"id":1178, "name":"getColumnCount()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getColumnCount()", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * {@inheritDoc }\r\n */\r\npublic int getColumnCount() {\r\n    return columns.size();\r\n}"},
 {"id":1179, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getColumnName(int)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public String getColumnName(int column) {\r\n    return ((ResourceColumn) (columns.get(new Integer(column)))).getTitle();\r\n}"},
 {"id":1180, "name":"getColumns()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getColumns()", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public ArrayList getColumns() {\r\n    ArrayList res = new ArrayList(columns.values());\r\n    return res;\r\n}"},
 {"id":1181, "name":"getNodeForAssigment(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getNodeForAssigment(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public AssignmentNode getNodeForAssigment(ResourceAssignment assignement) {\r\n    AssignmentNode res = null;\r\n    Enumeration childs = getNodeForResource(assignement.getResource()).children();\r\n    while ((childs.hasMoreElements()) && (res == null)) {\r\n        AssignmentNode an = ((AssignmentNode) (childs.nextElement()));\r\n        if (assignement.equals(an.getUserObject()))\r\n            res = an;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":1182, "name":"getNodeForResource(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getNodeForResource(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public ResourceNode getNodeForResource(ProjectResource resource) {\r\n    ResourceNode res = null;\r\n    Enumeration childs = root.children();\r\n    while ((childs.hasMoreElements()) && (res == null)) {\r\n        ResourceNode rn = ((ResourceNode) (childs.nextElement()));\r\n        if (resource.equals(rn.getUserObject()))\r\n            res = rn;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":1183, "name":"getValueAt(java.lang.Object,int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.getValueAt(java.lang.Object,int)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic Object getValueAt(Object node, int column) {\r\n    Object res = null;\r\n    ResourceNode rn = null;\r\n    AssignmentNode an = null;\r\n    if (node instanceof ResourceNode)\r\n        rn = ((ResourceNode) (node));\r\n    else\r\n        if (node instanceof AssignmentNode)\r\n            an = ((AssignmentNode) (node));\r\n\r\n\r\n    boolean hasChild = rn != null;\r\n    switch (column) {\r\n        case 0 :\r\n            // name\r\n            if (hasChild) {\r\n                res = rn.getName();\r\n            } else {\r\n                res = an.getTask().getName();\r\n            }\r\n            break;\r\n        case 1 :\r\n            // def role\r\n            if (hasChild) {\r\n                res = rn.getDefaultRole();\r\n            } else {\r\n                res = \"\";\r\n            }\r\n            break;\r\n        case 2 :\r\n            // mail\r\n            if (hasChild) {\r\n                res = rn.getEMail();\r\n            } else {\r\n                res = \"\";\r\n            }\r\n            break;\r\n        case 3 :\r\n            // phone\r\n            if (hasChild) {\r\n                res = rn.getPhone();\r\n            } else {\r\n                res = \"\";\r\n            }\r\n            break;\r\n        case 4 :\r\n            // assign role\r\n            if (hasChild) {\r\n                res = \"\";\r\n            } else {\r\n                res = an.getRoleForAssigment();\r\n            }\r\n            break;\r\n        default :\r\n            // custom column\r\n            if (hasChild) {\r\n                res = rn.getCustomField(this.getColumnName(column));\r\n            } else\r\n                res = \"\";\r\n\r\n            break;\r\n    }\r\n    return res;\r\n}"},
 {"id":1184, "name":"insertNodeInto(javax.swing.tree.MutableTreeNode,javax.swing.tree.MutableTreeNode,int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.insertNodeInto(javax.swing.tree.MutableTreeNode,javax.swing.tree.MutableTreeNode,int)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * Invoked this to insert newChild at location index in parents children.\r\n * This will then message nodesWereInserted to create the appropriate event.\r\n * This is the preferred way to add children as it will create the\r\n * appropriate event.\r\n */\r\npublic void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index) {\r\n    parent.insert(newChild, index);\r\n    int[] newIndexs = new int[1];\r\n    newIndexs[0] = index;\r\n    nodesWereInserted(parent, newIndexs);\r\n}"},
 {"id":1185, "name":"isCellEditable(java.lang.Object,int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.isCellEditable(java.lang.Object,int)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic boolean isCellEditable(Object node, int column) {\r\n    return ((node instanceof ResourceNode) && ((((column == (ResourceTreeTableModel.INDEX_RESOURCE_EMAIL)) || (column == (ResourceTreeTableModel.INDEX_RESOURCE_NAME))) || (column == (ResourceTreeTableModel.INDEX_RESOURCE_PHONE))) || (column == (ResourceTreeTableModel.INDEX_RESOURCE_ROLE)))) || (((node instanceof AssignmentNode) && (column == (ResourceTreeTableModel.INDEX_RESOURCE_ROLE_TASK))) || /* assumes the INDEX_RESOURCE_ROLE_TASK is the last mandatory column */\r\n    (column > (ResourceTreeTableModel.INDEX_RESOURCE_ROLE_TASK)));\r\n}"},
 {"id":1186, "name":"moveDown(net.sourceforge.ganttproject.resource.HumanResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.moveDown(net.sourceforge.ganttproject.resource.HumanResource)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public boolean moveDown(HumanResource resource) {\r\n    myResourceManager.down(resource);\r\n    ResourceNode rn = getNodeForResource(resource);\r\n    int index = root.getIndex(root.getChildAfter(rn));\r\n    removeNodeFromParent(rn);\r\n    insertNodeInto(rn, root, index);\r\n    return true;\r\n}"},
 {"id":1187, "name":"moveUp(net.sourceforge.ganttproject.resource.HumanResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.moveUp(net.sourceforge.ganttproject.resource.HumanResource)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * Move Up the selected resource\r\n */\r\npublic boolean moveUp(HumanResource resource) {\r\n    myResourceManager.up(resource);\r\n    ResourceNode rn = getNodeForResource(resource);\r\n    int index = root.getIndex(root.getChildBefore(rn));\r\n    removeNodeFromParent(rn);\r\n    insertNodeInto(rn, root, index);\r\n    return true;\r\n}"},
 {"id":1188, "name":"removeNodeFromParent(javax.swing.tree.MutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.removeNodeFromParent(javax.swing.tree.MutableTreeNode)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n * Message this to remove node from its parent. This will message\r\n * nodesWereRemoved to create the appropriate event. This is the preferred\r\n * way to remove a node as it handles the event creation for you.\r\n */\r\npublic void removeNodeFromParent(MutableTreeNode node) {\r\n    if (node != null) {\r\n        MutableTreeNode parent = ((MutableTreeNode) (node.getParent()));\r\n        if (parent == null)\r\n            throw new IllegalArgumentException(\"node does not have a parent.\");\r\n\r\n        int[] childIndex = new int[1];\r\n        Object[] removedArray = new Object[1];\r\n        childIndex[0] = parent.getIndex(node);\r\n        parent.remove(childIndex[0]);\r\n        removedArray[0] = node;\r\n        nodesWereRemoved(parent, childIndex, removedArray);\r\n    }\r\n}"},
 {"id":1189, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.reset()", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public void reset() {\r\n    myResourceManager.clear();\r\n}"},
 {"id":1190, "name":"resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ProjectResource[])", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ProjectResource[])", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public void resourceAssignmentsChanged(ProjectResource[] resources) {\r\n    for (int i = 0; i < (resources.length); i++) {\r\n        ResourceNode nextNode = exists(resources[i]);\r\n        buildAssignmentsSubtree(nextNode);\r\n    }\r\n}"},
 {"id":1191, "name":"resourceChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.resourceChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public void resourceChanged(ProjectResource resource) {\r\n    ResourceNode node = getNodeForResource(resource);\r\n    if (node == null) {\r\n        return;\r\n    }\r\n    TreeNode parent = node.getParent();\r\n    int index = parent.getIndex(node);\r\n    assert index >= 0;\r\n    nodesChanged(parent, new int[]{ index });\r\n}"},
 {"id":1192, "name":"setValueAt(java.lang.Object,java.lang.Object,int)", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.setValueAt(java.lang.Object,java.lang.Object,int)", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void setValueAt(Object value, Object node, int column) {\r\n    if (isCellEditable(node, column))\r\n        switch (column) {\r\n            case ResourceTreeTableModel.INDEX_RESOURCE_NAME :\r\n                ((ResourceNode) (node)).setName(value.toString());\r\n                break;\r\n            case ResourceTreeTableModel.INDEX_RESOURCE_EMAIL :\r\n                ((ResourceNode) (node)).setEMail(value.toString());\r\n                break;\r\n            case ResourceTreeTableModel.INDEX_RESOURCE_PHONE :\r\n                ((ResourceNode) (node)).setPhone(value.toString());\r\n                break;\r\n            case ResourceTreeTableModel.INDEX_RESOURCE_ROLE :\r\n                ((ResourceNode) (node)).setDefaultRole(((Role) (value)));\r\n                break;\r\n            case ResourceTreeTableModel.INDEX_RESOURCE_ROLE_TASK :\r\n                ((AssignmentNode) (node)).setRoleForAssigment(((Role) (value)));\r\n                break;\r\n            default :\r\n                ((ResourceNode) (node)).setCustomField(this.getColumnName(column), value);\r\n                break;\r\n        }\r\n\r\n    Mediator.getGanttProjectSingleton().setAskForSave(true);\r\n}"},
 {"id":1193, "name":"updateResources()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.updateResources()", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public void updateResources() {\r\n    ProjectResource[] listResources = myResourceManager.getResourcesArray();\r\n    for (int idxResource = 0; idxResource < (listResources.length); idxResource++) {\r\n        ProjectResource pr = listResources[idxResource];\r\n        ResourceNode rnRes = exists(pr);\r\n        if (rnRes == null) {\r\n            rnRes = new ResourceNode(pr);\r\n        }\r\n        buildAssignmentsSubtree(rnRes);\r\n        // for (int i = 0; i < tra.length; i++) {\r\n        // AssignmentNode an = exists(rnRes, tra[i]);\r\n        // if (an == null) {\r\n        // an = new AssignmentNode(tra[i]);\r\n        // rnRes.add(an);\r\n        // }\r\n        // }\r\n        if ((exists(pr)) == null)\r\n            root.add(rnRes);\r\n\r\n        this.nodeStructureChanged(rnRes);\r\n    }\r\n    // this.setRoot(root);\r\n}"},
 {"id":1194, "name":"useNextIndex()", "fullmethod":"net.sourceforge.ganttproject.ResourceTreeTableModel.useNextIndex()", "ownerclassid":"95", "ownerclassname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "sourcecode":"public int useNextIndex() {\r\n    (ResourceTreeTableModel.index)++;\r\n    return ResourceTreeTableModel.index;\r\n}"},
 {"id":1195, "name":"-init-(net.sourceforge.ganttproject.GanttTree2)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.-init-(net.sourceforge.ganttproject.GanttTree2)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public TaskContainmentHierarchyFacadeImpl(GanttTree2 tree) {\r\n    /* <DefaultMutableTreeNode> */\r\n    ArrayList allTasks = tree.getAllTasks();\r\n    // comboBox.addItem(\"no set\");\r\n    // for (int i = 0; i < allTasks.size(); i++) {\r\n    // DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode)\r\n    // allTasks.get(i);\r\n    for (int i = 0; i < (allTasks.size()); i++) {\r\n        DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (allTasks.get(i)));\r\n        Task task = ((Task) (treeNode.getUserObject()));\r\n        if (treeNode.isRoot()) {\r\n            myRootTask = task;\r\n        }\r\n        myTask2treeNode.put(task, treeNode);\r\n        myTask2index.put(task, new Integer(i));\r\n    }\r\n    myTree = tree;\r\n}"},
 {"id":1196, "name":"areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public boolean areUnrelated(Task first, Task second) {\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(first); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(second)) {\r\n        return false;\r\n    }\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(second); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(first)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":1197, "name":"compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public int compareDocumentOrder(Task task1, Task task2) {\r\n    // DefaultMutableTreeNode node1 = (DefaultMutableTreeNode) myTask2treeNode.get(task1);\r\n    // DefaultMutableTreeNode node2 = (DefaultMutableTreeNode) myTask2treeNode.get(task2);\r\n    // int row1 = myTree.getJTree().getRowForPath(new TreePath(node1.getPath()));\r\n    // int row2 = myTree.getJTree().getRowForPath(new TreePath(node2.getPath()));\r\n    Integer index1 = ((Integer) (myTask2index.get(task1)));\r\n    Integer index2 = ((Integer) (myTask2index.get(task2)));\r\n    return (index1.intValue()) - (index2.intValue());\r\n}"},
 {"id":1198, "name":"contains(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.contains(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public boolean contains(Task task) {\r\n    return myTask2treeNode.containsKey(task);\r\n}"},
 {"id":1199, "name":"getContainer(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getContainer(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public Task getContainer(Task nestedTask) {\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(nestedTask)));\r\n    if (treeNode == null) {\r\n        return null;\r\n    }\r\n    DefaultMutableTreeNode containerNode = ((DefaultMutableTreeNode) (treeNode.getParent()));\r\n    return containerNode == null ? null : ((Task) (containerNode.getUserObject()));\r\n}"},
 {"id":1200, "name":"getDepth(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getDepth(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public int getDepth(Task task) {\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(task)));\r\n    return treeNode.getLevel();\r\n}"},
 {"id":1201, "name":"getNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public Task[] getNestedTasks(Task container) {\r\n    Task[] result = null;\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(container)));\r\n    if (treeNode != null) {\r\n        ArrayList list = new ArrayList();\r\n        for (Enumeration children = treeNode.children(); children.hasMoreElements();) {\r\n            DefaultMutableTreeNode next = ((DefaultMutableTreeNode) (children.nextElement()));\r\n            if (next instanceof TaskNode)\r\n                list.add(next.getUserObject());\r\n\r\n        }\r\n        result = ((Task[]) (list.toArray(new Task[0])));\r\n    }\r\n    return result == null ? new Task[0] : result;\r\n}"},
 {"id":1202, "name":"getRootTask()", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getRootTask()", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public Task getRootTask() {\r\n    return myRootTask;\r\n}"},
 {"id":1203, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getTaskManager()", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"private TaskManager getTaskManager() {\r\n    return myRootTask.getManager();\r\n}"},
 {"id":1204, "name":"hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"/**\r\n * Purpose: Returns true if the container Task has any nested tasks.\r\n * This should be a quicker check than using getNestedTasks().\r\n *\r\n * @param container\r\n * \t\tThe Task on which to check for children.\r\n */\r\npublic boolean hasNestedTasks(Task container) {\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(container)));\r\n    if (treeNode != null) {\r\n        if (treeNode.children().hasMoreElements()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":1205, "name":"move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"96", "ownerclassname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "sourcecode":"public void move(Task whatMove, Task whereMove) {\r\n    DefaultMutableTreeNode targetNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(whereMove)));\r\n    DefaultMutableTreeNode movedNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(whatMove)));\r\n    if (movedNode != null) {\r\n        TreePath movedPath = new TreePath(movedNode.getPath());\r\n        boolean wasSelected = myTree.getJTree().getSelectionModel().isPathSelected(movedPath);\r\n        if (wasSelected) {\r\n            myTree.getJTree().getSelectionModel().removeSelectionPath(movedPath);\r\n        }\r\n        myTree.getModel().removeNodeFromParent(movedNode);\r\n        myTree.getModel().insertNodeInto(movedNode, targetNode, targetNode.getChildCount());\r\n        if (wasSelected) {\r\n            movedPath = new TreePath(movedNode.getPath());\r\n            myTree.getJTree().getSelectionModel().addSelectionPath(movedPath);\r\n        }\r\n    } else {\r\n        myTree.addObjectWithExpand(whatMove, targetNode);\r\n    }\r\n    getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().run(whatMove);\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        e.printStackTrace();\r\n        throw new RuntimeException(e);\r\n    }\r\n}"},
 {"id":1206, "name":"-init-(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.-init-(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"TaskModelModificationListener(IGanttProject ganttProject) {\r\n    myGanttProject = ganttProject;\r\n}"},
 {"id":1207, "name":"dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"public void dependencyAdded(TaskDependencyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":1208, "name":"dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"public void dependencyRemoved(TaskDependencyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":1209, "name":"taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"public void taskAdded(TaskHierarchyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":1210, "name":"taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"public void taskMoved(TaskHierarchyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":1211, "name":"taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"public void taskProgressChanged(TaskPropertyEvent e) {\r\n    myGanttProject.setModified();\r\n    e.getTask().getManager().getAlgorithmCollection().getRecalculateTaskCompletionPercentageAlgorithm().run(e.getTask());\r\n}"},
 {"id":1212, "name":"taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"public void taskPropertiesChanged(TaskPropertyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":1213, "name":"taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"public void taskRemoved(TaskHierarchyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":1214, "name":"taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "fullmethod":"net.sourceforge.ganttproject.TaskModelModificationListener.taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "ownerclassid":"97", "ownerclassname":"net.sourceforge.ganttproject.TaskModelModificationListener", "sourcecode":"public void taskScheduleChanged(TaskScheduleEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":1215, "name":"-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.TaskTreeImageGenerator.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"98", "ownerclassname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "sourcecode":"TaskTreeImageGenerator(GanttTree2 treeView, UIConfiguration uiConfiguration) {\r\n    myTreeView = treeView;\r\n    myUIConfiguration = uiConfiguration;\r\n}"},
 {"id":1216, "name":"createImage(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.TaskTreeImageGenerator.createImage(java.util.List)", "ownerclassid":"98", "ownerclassname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "sourcecode":"Image createImage(List myItemsToConsider) {\r\n    BufferedImage tmpImage = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB);\r\n    FontMetrics fmetric = tmpImage.getGraphics().getFontMetrics(myUIConfiguration.getChartMainFont().deriveFont(12.0F));\r\n    int fourEmWidth = fmetric.stringWidth(\"mmmm\");\r\n    int width = 0;\r\n    int height = ((getTree().getTreeTable().getRowHeight()) * 3) + (TaskTreeImageGenerator.HEADER_OFFSET);\r\n    for (Iterator tasks = myItemsToConsider.iterator(); tasks.hasNext();) {\r\n        DefaultMutableTreeNode nextTreeNode = ((DefaultMutableTreeNode) (tasks.next()));\r\n        if (nextTreeNode instanceof BlankLineNode) {\r\n            height += getTree().getTreeTable().getRowHeight();\r\n            continue;\r\n        }\r\n        Task next = ((Task) (nextTreeNode.getUserObject()));\r\n        if (\"None\".equals(next.toString())) {\r\n            continue;\r\n        }\r\n        if (isVisible(next)) {\r\n            height += getTree().getTreeTable().getRowHeight();\r\n            int nbchar = (fmetric.stringWidth(next.getName())) + ((next.getManager().getTaskHierarchy().getDepth(next)) * fourEmWidth);\r\n            if (nbchar > width) {\r\n                width = nbchar;\r\n            }\r\n        }\r\n    }\r\n    width += 10;\r\n    myWidth = width;\r\n    BufferedImage image2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n    // setSize(sizeTOC, getHeight());\r\n    Graphics g2 = image2.getGraphics();\r\n    ((Graphics2D) (g2)).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\r\n    g2.setColor(Color.WHITE);\r\n    g2.fillRect(0, 0, width, height);\r\n    printTasks(g2, myItemsToConsider);\r\n    GanttImagePanel but = new GanttImagePanel(\"big.png\", 300, 47);\r\n    g2.setColor(new Color(102, 153, 153));\r\n    g2.fillRect(0, 0, width, but.getHeight());\r\n    but.paintComponent(g2);\r\n    return image2;\r\n}"},
 {"id":1217, "name":"getPrintableNodes(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.TaskTreeImageGenerator.getPrintableNodes(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"98", "ownerclassname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "sourcecode":"List getPrintableNodes(GanttExportSettings settings) {\r\n    List myItemsToConsider;\r\n    if (settings.isOnlySelectedItem()) {\r\n        myItemsToConsider = Arrays.asList(getTree().getSelectedNodes());\r\n    } else {\r\n        myItemsToConsider = getTree().getAllVisibleNodes();\r\n    }\r\n    System.out.println((\"TaskToConsider.size = \" + (myItemsToConsider.size())));\r\n    for (int i = 0; i < (myItemsToConsider.size()); i++) {\r\n        if (((DefaultMutableTreeNode) (myItemsToConsider.get(i))).isRoot()) {\r\n            myItemsToConsider.remove(i);\r\n            break;\r\n        }\r\n    }\r\n    return myItemsToConsider;\r\n}"},
 {"id":1218, "name":"getTree()", "fullmethod":"net.sourceforge.ganttproject.TaskTreeImageGenerator.getTree()", "ownerclassid":"98", "ownerclassname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "sourcecode":"private GanttTree2 getTree() {\r\n    return myTreeView;\r\n}"},
 {"id":1219, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.TaskTreeImageGenerator.getWidth()", "ownerclassid":"98", "ownerclassname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "sourcecode":"private int getWidth() {\r\n    return myWidth;\r\n}"},
 {"id":1220, "name":"isVisible(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.TaskTreeImageGenerator.isVisible(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"98", "ownerclassname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "sourcecode":"private boolean isVisible(Task thetask) {\r\n    boolean res = true;\r\n    DefaultMutableTreeNode father = getTree().getFatherNode(thetask);\r\n    if (father == null) {\r\n        return false;\r\n    }\r\n    while (father != null) {\r\n        Task taskFather = ((Task) (father.getUserObject()));\r\n        if (!(taskFather.getExpand())) {\r\n            res = false;\r\n        }\r\n        father = ((DefaultMutableTreeNode) (father.getParent()));\r\n    } \r\n    return res;\r\n}"},
 {"id":1221, "name":"printTask(java.awt.Graphics,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.TaskTreeImageGenerator.printTask(java.awt.Graphics,java.util.List)", "ownerclassid":"98", "ownerclassname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "sourcecode":"private int printTask(Graphics g, List child) {\r\n    int rowCount = 0;\r\n    final int h = getTree().getTreeTable().getRowHeight();\r\n    Stack nestingStack = new Stack();\r\n    // int x = 5;\r\n    final int fourEmWidth = new TextLengthCalculatorImpl(g).getTextLength(\"mmmm\");\r\n    int y = (getTree().getTable().getTableHeader().getHeight()) + (TaskTreeImageGenerator.HEADER_OFFSET);\r\n    for (Iterator tasks = child.iterator(); tasks.hasNext();) {\r\n        DefaultMutableTreeNode nextTreeNode = ((DefaultMutableTreeNode) (tasks.next()));\r\n        boolean blankline = nextTreeNode instanceof BlankLineNode;\r\n        Task next = null;\r\n        if (!blankline) {\r\n            next = ((Task) (nextTreeNode.getUserObject()));\r\n            while (!(nestingStack.isEmpty())) {\r\n                DefaultMutableTreeNode topStackNode = ((DefaultMutableTreeNode) (nestingStack.pop()));\r\n                if ((nextTreeNode.getParent()) == topStackNode) {\r\n                    nestingStack.push(topStackNode);\r\n                    break;\r\n                }\r\n            } \r\n            nestingStack.push(nextTreeNode);\r\n        }\r\n        if (blankline || (isVisible(next))) {\r\n            if ((rowCount % 2) == 1) {\r\n                g.setColor(new Color(((float) (0.933)), ((float) (0.933)), ((float) (0.933))));\r\n                g.fillRect(0, y, ((getWidth()) - (h / 2)), h);\r\n            }\r\n            g.setColor(Color.black);\r\n            g.drawRect(0, y, ((getWidth()) - (h / 2)), h);\r\n            if (!blankline) {\r\n                int charH = ((int) (g.getFontMetrics().getLineMetrics(next.getName(), g).getAscent()));\r\n                int x = (((nestingStack.size()) - 1) * fourEmWidth) + 5;\r\n                g.drawString(next.getName(), x, ((y + charH) + ((h - charH) / 2)));\r\n            }\r\n            g.setColor(new Color(((float) (0.807)), ((float) (0.807)), ((float) (0.807))));\r\n            g.drawLine(1, ((y + h) - 1), ((getWidth()) - 11), ((y + h) - 1));\r\n            y += h;\r\n            rowCount++;\r\n            // if (nextTreeNode.getChildCount() != 0) {\r\n            // y = printTask(g, x + (h / 2), y, getTree().getAllChildTask(\r\n            // nextTreeNode));\r\n            // }\r\n        }\r\n    }\r\n    return y;\r\n}"},
 {"id":1222, "name":"printTasks(java.awt.Graphics,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.TaskTreeImageGenerator.printTasks(java.awt.Graphics,java.util.List)", "ownerclassid":"98", "ownerclassname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "sourcecode":"private void printTasks(Graphics g, List taskNodes) {\r\n    g.setColor(Color.black);\r\n    // g.setFont(myUIConfiguration.getChartMainFont().deriveFont(12f));\r\n    g.setFont(Fonts.PRINT_CHART_FONT);\r\n    // JA Changed 42 to 66\r\n    // This is related to the hardcoded headerheight\r\n    // TODO: Fix hard-coded part\r\n    // printTask(g,5,66,getTree().getAllChildTask(getTree().getRoot()));\r\n    printTask(g, taskNodes);\r\n}"},
 {"id":1223, "name":"-init-(javax.swing.table.TableCellEditor)", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.-init-(javax.swing.table.TableCellEditor)", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"TreeTableCellEditorImpl(TableCellEditor proxiedEditor) {\r\n    myProxiedEditor = proxiedEditor;\r\n}"},
 {"id":1224, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.-init-()", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"1() {\r\n}"},
 {"id":1225, "name":"addCellEditorListener(javax.swing.event.CellEditorListener)", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.addCellEditorListener(javax.swing.event.CellEditorListener)", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"public void addCellEditorListener(CellEditorListener arg0) {\r\n    myProxiedEditor.addCellEditorListener(arg0);\r\n}"},
 {"id":1226, "name":"cancelCellEditing()", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.cancelCellEditing()", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"public void cancelCellEditing() {\r\n    myProxiedEditor.cancelCellEditing();\r\n}"},
 {"id":1227, "name":"getCellEditorValue()", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.getCellEditorValue()", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"public Object getCellEditorValue() {\r\n    return myProxiedEditor.getCellEditorValue();\r\n}"},
 {"id":1228, "name":"getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"public Component getTableCellEditorComponent(JTable arg0, Object arg1, boolean arg2, int arg3, int arg4) {\r\n    final Component result = myProxiedEditor.getTableCellEditorComponent(arg0, arg1, arg2, arg3, arg4);\r\n    if (result instanceof JTextComponent) {\r\n        ((JTextComponent) (result)).selectAll();\r\n        result.addFocusListener(new FocusAdapter() {\r\n            public void focusGained(FocusEvent arg0) {\r\n                super.focusGained(arg0);\r\n                ((JTextComponent) (result)).selectAll();\r\n                result.removeFocusListener(this);\r\n            }\r\n\r\n            public void focusLost(FocusEvent arg0) {\r\n                // TODO Auto-generated method stub\r\n                super.focusLost(arg0);\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n}"},
 {"id":1229, "name":"isCellEditable(java.util.EventObject)", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.isCellEditable(java.util.EventObject)", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"public boolean isCellEditable(EventObject arg0) {\r\n    return myProxiedEditor.isCellEditable(arg0);\r\n}"},
 {"id":1230, "name":"removeCellEditorListener(javax.swing.event.CellEditorListener)", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.removeCellEditorListener(javax.swing.event.CellEditorListener)", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"public void removeCellEditorListener(CellEditorListener arg0) {\r\n    myProxiedEditor.removeCellEditorListener(arg0);\r\n}"},
 {"id":1231, "name":"shouldSelectCell(java.util.EventObject)", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.shouldSelectCell(java.util.EventObject)", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"public boolean shouldSelectCell(EventObject arg0) {\r\n    return myProxiedEditor.shouldSelectCell(arg0);\r\n}"},
 {"id":1232, "name":"stopCellEditing()", "fullmethod":"net.sourceforge.ganttproject.TreeTableCellEditorImpl.stopCellEditing()", "ownerclassid":"99", "ownerclassname":"net.sourceforge.ganttproject.TreeTableCellEditorImpl", "sourcecode":"public boolean stopCellEditing() {\r\n    return myProxiedEditor.stopCellEditing();\r\n}"},
 {"id":1233, "name":"-init-(javax.swing.JFrame,net.sourceforge.ganttproject.gui.GanttStatusBar,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.-init-(javax.swing.JFrame,net.sourceforge.ganttproject.gui.GanttStatusBar,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"UIFacadeImpl(JFrame mainFrame, GanttStatusBar statusBar, IGanttProject project, UIFacade fallbackDelegate) {\r\n    myMainFrame = mainFrame;\r\n    myScrollingManager = new ScrollingManagerImpl();\r\n    myZoomManager = new ZoomManager(project.getTimeUnitStack());\r\n    myStatusBar = statusBar;\r\n    myFallbackDelegate = fallbackDelegate;\r\n    Platform.getJobManager().setProgressProvider(this);\r\n    myErrorNotifier = new ErrorNotifier(this);\r\n}"},
 {"id":1234, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.-init-()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"1() {\r\n}"},
 {"id":1235, "name":"-init-(int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.-init-(int,java.lang.String)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"MyDialog(int dialogType, String message) {\r\n    this.contentComponent = createDialogContentComponent(dialogType, message);\r\n}"},
 {"id":1236, "name":"-init-(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.-init-(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"private ProxyOkAction(final Action realAction, final JDialog dialog, final UIFacadeImpl.Commiter commiter) {\r\n    realAction.addPropertyChangeListener(this);\r\n    myRealAction = realAction;\r\n    myDialog = dialog;\r\n    myCommiter = commiter;\r\n    setEnabled(realAction.isEnabled());\r\n}"},
 {"id":1237, "name":"createCancelAction(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.createCancelAction(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"private Action createCancelAction(final Action realAction, final JDialog result, final UIFacadeImpl.Commiter commiter) {\r\n    return new CancelAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            realAction.actionPerformed(e);\r\n            commiter.commit();\r\n            result.setVisible(false);\r\n            result.dispose();\r\n        }\r\n    };\r\n}"},
 {"id":1238, "name":"createDialogContentComponent(int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.createDialogContentComponent(int,java.lang.String)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"private Component createDialogContentComponent(int dialogType, String message) {\r\n    JLabel label;\r\n    switch (dialogType) {\r\n        case GanttDialogInfo.ERROR :\r\n            label = new JLabel(new ImageIcon(getClass().getResource(\"/icons/error.png\")));\r\n            break;\r\n        case GanttDialogInfo.WARNING :\r\n            label = new JLabel(new ImageIcon(getClass().getResource(\"/icons/warning.png\")));\r\n            break;\r\n        case GanttDialogInfo.INFO :\r\n            label = new JLabel(new ImageIcon(getClass().getResource(\"/icons/info.png\")));\r\n            break;\r\n        case GanttDialogInfo.QUESTION :\r\n            label = new JLabel(new ImageIcon(getClass().getResource(\"/icons/question.png\")));\r\n            break;\r\n        default :\r\n            throw new IllegalStateException(\"We should not be here\");\r\n    }\r\n    JPanel imagePanel = new JPanel(new BorderLayout());\r\n    imagePanel.add(label, BorderLayout.NORTH);\r\n    // \r\n    JTextArea textArea = new JTextArea(message);\r\n    textArea.setEditable(false);\r\n    textArea.setBackground(new JLabel().getBackground());\r\n    JPanel result = new JPanel(new BorderLayout());\r\n    result.add(imagePanel, BorderLayout.WEST);\r\n    result.add(textArea, BorderLayout.CENTER);\r\n    return result;\r\n}"},
 {"id":1239, "name":"createMonitor(org.eclipse.core.runtime.jobs.Job)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.createMonitor(org.eclipse.core.runtime.jobs.Job)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public IProgressMonitor createMonitor(Job job) {\r\n    return myStatusBar.createProgressMonitor();\r\n}"},
 {"id":1240, "name":"createMonitor(org.eclipse.core.runtime.jobs.Job,org.eclipse.core.runtime.IProgressMonitor,int)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.createMonitor(org.eclipse.core.runtime.jobs.Job,org.eclipse.core.runtime.IProgressMonitor,int)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public IProgressMonitor createMonitor(Job job, IProgressMonitor group, int ticks) {\r\n    return group;\r\n}"},
 {"id":1241, "name":"createOkAction(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.createOkAction(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"private Action createOkAction(final Action realAction, final JDialog dialog, final UIFacadeImpl.Commiter commiter) {\r\n    return new UIFacadeImpl.ProxyOkAction(realAction, dialog, commiter);\r\n}"},
 {"id":1242, "name":"createProgressGroup()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.createProgressGroup()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public IProgressMonitor createProgressGroup() {\r\n    return myStatusBar.createProgressMonitor();\r\n}"},
 {"id":1243, "name":"getActiveChart()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getActiveChart()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public Chart getActiveChart() {\r\n    return myFallbackDelegate.getActiveChart();\r\n}"},
 {"id":1244, "name":"getDefaultMonitor()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getDefaultMonitor()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public IProgressMonitor getDefaultMonitor() {\r\n    return null;\r\n}"},
 {"id":1245, "name":"getExceptionReport(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getExceptionReport(java.lang.Throwable)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"static String getExceptionReport(Throwable e) {\r\n    StringBuffer result = new StringBuffer();\r\n    result.append(((e.getMessage()) + \"\n\n\"));\r\n    StringWriter stringWriter = new StringWriter();\r\n    PrintWriter writer = new PrintWriter(stringWriter);\r\n    e.printStackTrace(writer);\r\n    writer.close();\r\n    result.append(stringWriter.getBuffer().toString());\r\n    return result.toString();\r\n}"},
 {"id":1246, "name":"getGanttChart()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getGanttChart()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public GanttChart getGanttChart() {\r\n    return myFallbackDelegate.getGanttChart();\r\n}"},
 {"id":1247, "name":"getGanttDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getGanttDividerLocation()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public int getGanttDividerLocation() {\r\n    return myFallbackDelegate.getGanttDividerLocation();\r\n}"},
 {"id":1248, "name":"getLanguage()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getLanguage()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"private static GanttLanguage getLanguage() {\r\n    return GanttLanguage.getInstance();\r\n}"},
 {"id":1249, "name":"getMainFrame()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getMainFrame()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public Frame getMainFrame() {\r\n    return myMainFrame;\r\n}"},
 {"id":1250, "name":"getResourceChart()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getResourceChart()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public Chart getResourceChart() {\r\n    return myFallbackDelegate.getResourceChart();\r\n}"},
 {"id":1251, "name":"getResourceDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getResourceDividerLocation()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public int getResourceDividerLocation() {\r\n    return myFallbackDelegate.getResourceDividerLocation();\r\n}"},
 {"id":1252, "name":"getResourceTree()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getResourceTree()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public ResourceTreeUIFacade getResourceTree() {\r\n    return myFallbackDelegate.getResourceTree();\r\n}"},
 {"id":1253, "name":"getScrollingManager()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getScrollingManager()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public ScrollingManager getScrollingManager() {\r\n    return myScrollingManager;\r\n}"},
 {"id":1254, "name":"getTaskSelectionContext()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getTaskSelectionContext()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public TaskSelectionContext getTaskSelectionContext() {\r\n    return myFallbackDelegate.getTaskSelectionContext();\r\n}"},
 {"id":1255, "name":"getTaskTree()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getTaskTree()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public TaskTreeUIFacade getTaskTree() {\r\n    return myFallbackDelegate.getTaskTree();\r\n}"},
 {"id":1256, "name":"getUndoManager()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getUndoManager()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public GPUndoManager getUndoManager() {\r\n    return myFallbackDelegate.getUndoManager();\r\n}"},
 {"id":1257, "name":"getViewIndex()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getViewIndex()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public int getViewIndex() {\r\n    return myFallbackDelegate.getViewIndex();\r\n}"},
 {"id":1258, "name":"getZoomManager()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.getZoomManager()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public ZoomManager getZoomManager() {\r\n    return myZoomManager;\r\n}"},
 {"id":1259, "name":"logErrorMessage(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.logErrorMessage(java.lang.Throwable)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void logErrorMessage(Throwable e) {\r\n    myErrorNotifier.add(e);\r\n    myStatusBar.setErrorNotifier(myErrorNotifier);\r\n}"},
 {"id":1260, "name":"refresh()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.refresh()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void refresh() {\r\n    myFallbackDelegate.refresh();\r\n}"},
 {"id":1261, "name":"resetErrorLog()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.resetErrorLog()", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"void resetErrorLog() {\r\n    myStatusBar.setErrorNotifier(null);\r\n}"},
 {"id":1262, "name":"setGanttDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.setGanttDividerLocation(int)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void setGanttDividerLocation(int location) {\r\n    myFallbackDelegate.setGanttDividerLocation(location);\r\n}"},
 {"id":1263, "name":"setResourceDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.setResourceDividerLocation(int)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void setResourceDividerLocation(int location) {\r\n    myFallbackDelegate.setResourceDividerLocation(location);\r\n}"},
 {"id":1264, "name":"setStatusText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.setStatusText(java.lang.String)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void setStatusText(String text) {\r\n    myStatusBar.setFirstText(text, 2000);\r\n}"},
 {"id":1265, "name":"setViewIndex(int)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.setViewIndex(int)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void setViewIndex(int viewIndex) {\r\n    myFallbackDelegate.setViewIndex(viewIndex);\r\n}"},
 {"id":1266, "name":"setWorkbenchTitle(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.setWorkbenchTitle(java.lang.String)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void setWorkbenchTitle(String title) {\r\n    myMainFrame.setTitle(title);\r\n}"},
 {"id":1267, "name":"showConfirmationDialog(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.showConfirmationDialog(java.lang.String,java.lang.String)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public UIFacade.Choice showConfirmationDialog(String message, String title) {\r\n    /* MyDialog dialog = new MyDialog(GanttDialogInfo.WARNING, message);\n    dialog.show();\n    return dialog.result;\n     */\r\n    // int result = JOptionPane.showConfirmDialog(myMainFrame, message);\r\n    String yes = GanttLanguage.getInstance().getText(\"yes\");\r\n    String no = GanttLanguage.getInstance().getText(\"no\");\r\n    String cancel = GanttLanguage.getInstance().getText(\"cancel\");\r\n    int result = JOptionPane.showOptionDialog(myMainFrame, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{ yes, no, cancel }, yes);\r\n    switch (result) {\r\n        case JOptionPane.YES_OPTION :\r\n            return UIFacade.Choice.YES;\r\n        case JOptionPane.NO_OPTION :\r\n            return UIFacade.Choice.NO;\r\n        case JOptionPane.CANCEL_OPTION :\r\n            return UIFacade.Choice.CANCEL;\r\n        case JOptionPane.CLOSED_OPTION :\r\n            return UIFacade.Choice.CANCEL;\r\n        default :\r\n            return UIFacade.Choice.CANCEL;\r\n    }\r\n}"},
 {"id":1268, "name":"showDialog(java.awt.Component,javax.swing.Action[])", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.showDialog(java.awt.Component,javax.swing.Action[])", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void showDialog(Component content, Action[] buttonActions) {\r\n    showDialog(content, buttonActions, \"\");\r\n}"},
 {"id":1269, "name":"showDialog(java.awt.Component,javax.swing.Action[],java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.showDialog(java.awt.Component,javax.swing.Action[],java.lang.String)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void showDialog(Component content, Action[] buttonActions, String title) {\r\n    JDialog result = new JDialog(myMainFrame, true);\r\n    result.setTitle(title);\r\n    final UIFacadeImpl.Commiter commiter = new UIFacadeImpl.Commiter();\r\n    Action okAction = null;\r\n    Action cancelAction = null;\r\n    Box buttonBox = Box.createHorizontalBox();\r\n    for (int i = 0; i < (buttonActions.length); i++) {\r\n        Action nextAction = buttonActions[i];\r\n        JButton nextButton = null;\r\n        if (nextAction instanceof OkAction) {\r\n            nextAction = createOkAction(nextAction, result, commiter);\r\n            okAction = nextAction;\r\n            nextButton = new JButton(nextAction);\r\n            result.getRootPane().setDefaultButton(nextButton);\r\n        }\r\n        if (nextAction instanceof CancelAction) {\r\n            nextAction = createCancelAction(nextAction, result, commiter);\r\n            cancelAction = nextAction;\r\n            result.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), nextAction.getValue(Action.NAME));\r\n            result.getRootPane().getActionMap().put(nextAction.getValue(Action.NAME), nextAction);\r\n        }\r\n        if (nextButton == null) {\r\n            nextButton = new JButton(nextAction);\r\n        }\r\n        buttonBox.add(nextButton);\r\n        if (i < ((buttonActions.length) - 1)) {\r\n            buttonBox.add(Box.createHorizontalStrut(5));\r\n        }\r\n    }\r\n    result.getContentPane().setLayout(new BorderLayout());\r\n    result.getContentPane().add(content, BorderLayout.CENTER);\r\n    // \r\n    JPanel buttonPanel = new JPanel(new BorderLayout());\r\n    buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 5));\r\n    buttonPanel.add(buttonBox, BorderLayout.EAST);\r\n    result.getContentPane().add(buttonPanel, BorderLayout.SOUTH);\r\n    // \r\n    result.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n    final Action localOkAction = okAction;\r\n    final Action localCancelAction = cancelAction;\r\n    result.addWindowListener(new WindowAdapter() {\r\n        public void windowClosed(WindowEvent e) {\r\n            if ((localCancelAction != null) && (!(commiter.isCommited()))) {\r\n                localCancelAction.actionPerformed(null);\r\n            }\r\n        }\r\n    });\r\n    result.pack();\r\n    // setSize(300, 300);\r\n    DialogAligner.center(result, myMainFrame);\r\n    result.setVisible(true);\r\n}"},
 {"id":1270, "name":"showErrorDialog(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.showErrorDialog(java.lang.String)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void showErrorDialog(String errorMessage) {\r\n    if (myMainFrame.isVisible()) {\r\n        GanttDialogInfo gdi = new GanttDialogInfo(myMainFrame, GanttDialogInfo.ERROR, GanttDialogInfo.YES_OPTION, errorMessage, UIFacadeImpl.getLanguage().getText(\"error\"));\r\n        gdi.show();\r\n    } else {\r\n        System.err.println((\"[GanttProjectBase] showErrorDialog:\n \" + errorMessage));\r\n    }\r\n}"},
 {"id":1271, "name":"showErrorDialog(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.showErrorDialog(java.lang.Throwable)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void showErrorDialog(Throwable e) {\r\n    showErrorDialog(UIFacadeImpl.getExceptionReport(e));\r\n    GPLogger.log(e);\r\n}"},
 {"id":1272, "name":"showPopupMenu(java.awt.Component,javax.swing.Action[],int,int)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl.showPopupMenu(java.awt.Component,javax.swing.Action[],int,int)", "ownerclassid":"103", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl", "sourcecode":"public void showPopupMenu(Component invoker, Action[] actions, int x, int y) {\r\n    JPopupMenu menu = new JPopupMenu();\r\n    for (int i = 0; i < (actions.length); i++) {\r\n        Action next = actions[i];\r\n        if (next == null) {\r\n            menu.addSeparator();\r\n        } else {\r\n            menu.add(next);\r\n        }\r\n    }\r\n    menu.applyComponentOrientation(UIFacadeImpl.getLanguage().getComponentOrientation());\r\n    menu.show(invoker, x, y);\r\n}"},
 {"id":1273, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter.-init-()", "ownerclassid":"100", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter", "sourcecode":"Commiter() {\r\n}"},
 {"id":1274, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter.commit()", "ownerclassid":"100", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter", "sourcecode":"void commit() {\r\n    isCommited = true;\r\n}"},
 {"id":1275, "name":"isCommited()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter.isCommited()", "ownerclassid":"100", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter", "sourcecode":"boolean isCommited() {\r\n    return isCommited;\r\n}"},
 {"id":1276, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$MyDialog.-init-()", "ownerclassid":"101", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$MyDialog", "sourcecode":"1() {\r\n}"},
 {"id":1277, "name":"-init-(int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$MyDialog.-init-(int,java.lang.String)", "ownerclassid":"101", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$MyDialog", "sourcecode":"MyDialog(int dialogType, String message) {\r\n    this.contentComponent = createDialogContentComponent(dialogType, message);\r\n}"},
 {"id":1278, "name":"show()", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$MyDialog.show()", "ownerclassid":"101", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$MyDialog", "sourcecode":"void show() {\r\n    showDialog(contentComponent, new Action[]{ okAction, cancelAction });\r\n}"},
 {"id":1279, "name":"-init-(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$ProxyOkAction.-init-(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "ownerclassid":"102", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$ProxyOkAction", "sourcecode":"private ProxyOkAction(final Action realAction, final JDialog dialog, final UIFacadeImpl.Commiter commiter) {\r\n    realAction.addPropertyChangeListener(this);\r\n    myRealAction = realAction;\r\n    myDialog = dialog;\r\n    myCommiter = commiter;\r\n    setEnabled(realAction.isEnabled());\r\n}"},
 {"id":1280, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$ProxyOkAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"102", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$ProxyOkAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    myRealAction.removePropertyChangeListener(this);\r\n    myRealAction.actionPerformed(e);\r\n    myCommiter.commit();\r\n    if (myDialog.isVisible()) {\r\n        myDialog.setVisible(false);\r\n        myDialog.dispose();\r\n    }\r\n}"},
 {"id":1281, "name":"propertyChange(java.beans.PropertyChangeEvent)", "fullmethod":"net.sourceforge.ganttproject.UIFacadeImpl$ProxyOkAction.propertyChange(java.beans.PropertyChangeEvent)", "ownerclassid":"102", "ownerclassname":"net.sourceforge.ganttproject.UIFacadeImpl$ProxyOkAction", "sourcecode":"public void propertyChange(PropertyChangeEvent evt) {\r\n    setEnabled(myRealAction.isEnabled());\r\n}"},
 {"id":1282, "name":"-init-(net.sourceforge.ganttproject.GanttTree2)", "fullmethod":"net.sourceforge.ganttproject.action.AddBlankLineAction.-init-(net.sourceforge.ganttproject.GanttTree2)", "ownerclassid":"104", "ownerclassname":"net.sourceforge.ganttproject.action.AddBlankLineAction", "sourcecode":"public AddBlankLineAction(GanttTree2 ganttTree) {\r\n    myGanttTree = ganttTree;\r\n}"},
 {"id":1283, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.AddBlankLineAction.-init-()", "ownerclassid":"104", "ownerclassname":"net.sourceforge.ganttproject.action.AddBlankLineAction", "sourcecode":"1() {\r\n}"},
 {"id":1284, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.AddBlankLineAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"104", "ownerclassname":"net.sourceforge.ganttproject.action.AddBlankLineAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    final DefaultMutableTreeNode selectedNode = myGanttTree.getSelectedNode();\r\n    Mediator.getUndoManager().undoableEdit(\"add blank line\", new Runnable() {\r\n        public void run() {\r\n            myGanttTree.addBlankLine(selectedNode, (selectedNode == null ? -1 : selectedNode.getParent().getIndex(selectedNode)));\r\n        }\r\n    });\r\n}"},
 {"id":1285, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.AddBlankLineAction.getIconFilePrefix()", "ownerclassid":"104", "ownerclassname":"net.sourceforge.ganttproject.action.AddBlankLineAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return null;\r\n}"},
 {"id":1286, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.AddBlankLineAction.getLocalizedName()", "ownerclassid":"104", "ownerclassname":"net.sourceforge.ganttproject.action.AddBlankLineAction", "sourcecode":"protected String getLocalizedName() {\r\n    return GanttLanguage.getInstance().getText(\"addBlankLine\");\r\n}"},
 {"id":1287, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttOptions,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttOptions,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"105", "ownerclassname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "sourcecode":"public CalculateCriticalPathAction(TaskManager taskManager, GanttTree2 tree, GanttOptions options, UIConfiguration uiConfiguration, GanttProject appli) {\r\n    super(null, options.getIconSize());\r\n    this.taskManager = taskManager;\r\n    this.tree = tree;\r\n    myUIConfiguration = uiConfiguration;\r\n    myOptions = options;\r\n    this.appli = appli;\r\n}"},
 {"id":1288, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"105", "ownerclassname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    TaskNode root = ((TaskNode) (tree.getRoot()));\r\n    setOn((!(isOn())));\r\n    putValue(Action.SMALL_ICON, createIcon(myOptions.getIconSize()));\r\n    if (isOn()) {\r\n        taskManager.processCriticalPath(root);\r\n        ArrayList projectTasks = ((GanttTree2) (tree)).getProjectTasks();\r\n        if ((projectTasks.size()) != 0)\r\n            for (int i = 0; i < (projectTasks.size()); i++)\r\n                taskManager.processCriticalPath(((TaskNode) (projectTasks.get(i))));\r\n\r\n\r\n    }\r\n    Mediator.getGanttProjectSingleton().repaint();\r\n    appli.getUIFacade().setStatusText(GanttLanguage.getInstance().getText(\"criticalPath\"));\r\n}"},
 {"id":1289, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.getIconFilePrefix()", "ownerclassid":"105", "ownerclassname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return isOn() ? CalculateCriticalPathAction.ICON_PREFIX_ON : CalculateCriticalPathAction.ICON_PREFIX_OFF;\r\n}"},
 {"id":1290, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.getLocalizedName()", "ownerclassid":"105", "ownerclassname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "sourcecode":"protected String getLocalizedName() {\r\n    return GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"criticalPath\"));\r\n}"},
 {"id":1291, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.isIconVisible(boolean)", "ownerclassid":"105", "ownerclassname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1292, "name":"isOn()", "fullmethod":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.isOn()", "ownerclassid":"105", "ownerclassname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "sourcecode":"private boolean isOn() {\r\n    return (myUIConfiguration) == null ? false : myUIConfiguration.isCriticalPathOn();\r\n}"},
 {"id":1293, "name":"setOn(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.setOn(boolean)", "ownerclassid":"105", "ownerclassname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "sourcecode":"private void setOn(boolean on) {\r\n    myUIConfiguration.setCriticalPathOn(on);\r\n}"},
 {"id":1294, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.CancelAction.-init-()", "ownerclassid":"106", "ownerclassname":"net.sourceforge.ganttproject.action.CancelAction", "sourcecode":"public CancelAction() {\r\n    super(GanttLanguage.getInstance().getText(\"cancel\"));\r\n}"},
 {"id":1295, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.AssignmentContext,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.AssignmentContext,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"107", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "sourcecode":"public DeleteAssignmentAction(ResourceManager hrManager, AssignmentContext context, GanttProject projectFrame) {\r\n    myProjectFrame = projectFrame;\r\n    // this.putValue(AbstractAction.NAME, GanttProject\r\n    // .correctLabel(getLanguage().getText(\"deleteAssignment\")));\r\n    myContext = context;\r\n}"},
 {"id":1296, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.-init-()", "ownerclassid":"107", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "sourcecode":"1() {\r\n}"},
 {"id":1297, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"107", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    myProjectFrame.getTabs().setSelectedIndex(UIFacade.RESOURCES_INDEX);\r\n    final ResourceAssignment[] context = myContext.getResourceAssignments();\r\n    if ((context != null) && ((context.length) > 0)) {\r\n        UIFacade.Choice choice = myProjectFrame.getUIFacade().showConfirmationDialog(((((getI18n(\"msg23\")) + \" \") + (DeleteAssignmentAction.getDisplayName(context))) + \"?\"), getI18n(\"warning\"));\r\n        if (choice == (UIFacade.Choice.YES)) {\r\n            myProjectFrame.getUIFacade().getUndoManager().undoableEdit(\"Resource removed\", new Runnable() {\r\n                public void run() {\r\n                    deleteAssignments(context);\r\n                    myProjectFrame.setAskForSave(true);\r\n                    myProjectFrame.refreshProjectInfos();\r\n                    myProjectFrame.repaint2();\r\n                }\r\n            });\r\n        }\r\n    } else {\r\n        myProjectFrame.deleteResources();\r\n    }\r\n}"},
 {"id":1298, "name":"deleteAssignments(net.sourceforge.ganttproject.task.ResourceAssignment[])", "fullmethod":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.deleteAssignments(net.sourceforge.ganttproject.task.ResourceAssignment[])", "ownerclassid":"107", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "sourcecode":"private void deleteAssignments(ResourceAssignment[] context) {\r\n    for (int i = 0; i < (context.length); i++) {\r\n        ResourceAssignment ra = context[i];\r\n        ra.delete();\r\n        ra.getTask().getAssignmentCollection().deleteAssignment(ra.getResource());\r\n    }\r\n}"},
 {"id":1299, "name":"getDisplayName(java.lang.Object[])", "fullmethod":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.getDisplayName(java.lang.Object[])", "ownerclassid":"107", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "sourcecode":"private static String getDisplayName(Object[] objs) {\r\n    if ((objs.length) == 1) {\r\n        return objs[0].toString();\r\n    }\r\n    StringBuffer result = new StringBuffer();\r\n    for (int i = 0; i < (objs.length); i++) {\r\n        result.append(objs[i].toString());\r\n        if (i < ((objs.length) - 1)) {\r\n            result.append(\", \");\r\n        }\r\n    }\r\n    return result.toString();\r\n}"},
 {"id":1300, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.getIconFilePrefix()", "ownerclassid":"107", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"delete_\";\r\n}"},
 {"id":1301, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.getLocalizedName()", "ownerclassid":"107", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"deleteAssignment\");\r\n}"},
 {"id":1302, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.action.DeleteHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"108", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "sourcecode":"public DeleteHumanAction(ResourceManager hrManager, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    super(hrManager);\r\n    myUIFacade = uiFacade;\r\n    myProjectFrame = projectFrame;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"deleteHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_J, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(DeleteHumanAction.ICON_URL);\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myContext = context;\r\n}"},
 {"id":1303, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.DeleteHumanAction.-init-()", "ownerclassid":"108", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "sourcecode":"1() {\r\n}"},
 {"id":1304, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.DeleteHumanAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"108", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "sourcecode":"public void actionPerformed(ActionEvent event) {\r\n    final ProjectResource[] context = getContext().getResources();\r\n    if ((context.length) > 0) {\r\n        final String message = (((getLanguage().getText(\"msg6\")) + \" \") + (getDisplayName(context))) + \"?\";\r\n        final String title = getLanguage().getText(\"question\");\r\n        UIFacade.Choice choice = myUIFacade.showConfirmationDialog(message, title);\r\n        if (choice == (UIFacade.Choice.YES)) {\r\n            myUIFacade.getUndoManager().undoableEdit(\"Resource removed\", new Runnable() {\r\n                public void run() {\r\n                    deleteResources(context);\r\n                    getProjectFrame().repaint2();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}"},
 {"id":1305, "name":"deleteResources(net.sourceforge.ganttproject.resource.ProjectResource[])", "fullmethod":"net.sourceforge.ganttproject.action.DeleteHumanAction.deleteResources(net.sourceforge.ganttproject.resource.ProjectResource[])", "ownerclassid":"108", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "sourcecode":"private void deleteResources(ProjectResource[] context) {\r\n    for (int i = 0; i < (context.length); i++) {\r\n        context[i].delete();\r\n    }\r\n}"},
 {"id":1306, "name":"getContext()", "fullmethod":"net.sourceforge.ganttproject.action.DeleteHumanAction.getContext()", "ownerclassid":"108", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "sourcecode":"private ResourceContext getContext() {\r\n    return myContext;\r\n}"},
 {"id":1307, "name":"getDisplayName(net.sourceforge.ganttproject.resource.ProjectResource[])", "fullmethod":"net.sourceforge.ganttproject.action.DeleteHumanAction.getDisplayName(net.sourceforge.ganttproject.resource.ProjectResource[])", "ownerclassid":"108", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "sourcecode":"private String getDisplayName(ProjectResource[] resources) {\r\n    if ((resources.length) == 1) {\r\n        return resources[0].toString();\r\n    }\r\n    StringBuffer result = new StringBuffer();\r\n    for (int i = 0; i < (resources.length); i++) {\r\n        result.append(resources[i].toString());\r\n        if (i < ((resources.length) - 1)) {\r\n            result.append(\", \");\r\n        }\r\n    }\r\n    return result.toString();\r\n}"},
 {"id":1308, "name":"getProjectFrame()", "fullmethod":"net.sourceforge.ganttproject.action.DeleteHumanAction.getProjectFrame()", "ownerclassid":"108", "ownerclassname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "sourcecode":"private GanttProject getProjectFrame() {\r\n    return myProjectFrame;\r\n}"},
 {"id":1309, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.-init-()", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"protected GPAction() {\r\n    this(null, \"16\");\r\n}"},
 {"id":1310, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.-init-(java.lang.String,java.lang.String)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"protected GPAction(String name, String iconSize) {\r\n    super(name);\r\n    setIconSize(iconSize);\r\n    updateName();\r\n    updateTooltip();\r\n    GanttLanguage.getInstance().addListener(this);\r\n}"},
 {"id":1311, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.-init-(java.lang.String)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"public GPAction(String name) {\r\n    this(name, \"16\");\r\n}"},
 {"id":1312, "name":"createIcon(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.createIcon(java.lang.String)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"protected Icon createIcon(String iconSize) {\r\n    if ((iconSize == null) || (false == (iconVisible))) {\r\n        return null;\r\n    }\r\n    URL resource = getClass().getResource((((((getIconFileDirectory()) + \"/\") + (getIconFilePrefix())) + iconSize) + \".gif\"));\r\n    return resource == null ? null : new ImageIcon(resource);\r\n}"},
 {"id":1313, "name":"getI18n(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.getI18n(java.lang.String)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"protected String getI18n(String key) {\r\n    return GanttLanguage.getInstance().getText(key);\r\n}"},
 {"id":1314, "name":"getIconFileDirectory()", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.getIconFileDirectory()", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"protected String getIconFileDirectory() {\r\n    return \"/icons\";\r\n}"},
 {"id":1315, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.getIconFilePrefix()", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"protected abstract String getIconFilePrefix();"},
 {"id":1316, "name":"getIconOnMouseOver()", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.getIconOnMouseOver()", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"public Icon getIconOnMouseOver() {\r\n    return ((Icon) (getValue(Action.SMALL_ICON)));\r\n}"},
 {"id":1317, "name":"getKeyStroke(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.getKeyStroke(java.lang.String)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"public static KeyStroke getKeyStroke(String keystrokeID) {\r\n    if ((GPAction.ourProperties) == null) {\r\n        GPAction.ourProperties = new Properties();\r\n        URL url = GPAction.class.getResource(\"/keyboard.properties\");\r\n        if (url == null) {\r\n            return null;\r\n        }\r\n        URL resolvedUrl;\r\n        try {\r\n            resolvedUrl = Platform.resolve(url);\r\n            GPAction.ourProperties.load(resolvedUrl.openStream());\r\n        } catch (IOException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    String stringKeyStroke = ((String) (GPAction.ourProperties.get(keystrokeID)));\r\n    return KeyStroke.getKeyStroke(stringKeyStroke);\r\n}"},
 {"id":1318, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.getLocalizedName()", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"protected String getLocalizedName() {\r\n    return \"\";\r\n}"},
 {"id":1319, "name":"getTooltipText()", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.getTooltipText()", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"protected String getTooltipText() {\r\n    String localizedName = getLocalizedName();\r\n    return localizedName == null ? \"\" : GanttLanguage.getInstance().correctLabel(getLocalizedName());\r\n}"},
 {"id":1320, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.isIconVisible(boolean)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1321, "name":"languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    updateName();\r\n    updateTooltip();\r\n}"},
 {"id":1322, "name":"setIconSize(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.setIconSize(java.lang.String)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"public void setIconSize(String iconSize) {\r\n    Icon icon = createIcon(iconSize);\r\n    if (icon != null) {\r\n        putValue(Action.SMALL_ICON, icon);\r\n        myIcon = icon;\r\n    }\r\n}"},
 {"id":1323, "name":"setIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.setIconVisible(boolean)", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"public void setIconVisible(boolean isVisible) {\r\n    iconVisible = isVisible;\r\n    putValue(Action.SMALL_ICON, (iconVisible ? myIcon : null));\r\n}"},
 {"id":1324, "name":"updateName()", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.updateName()", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"private void updateName() {\r\n    String localizedName = getLocalizedName();\r\n    if (localizedName == null) {\r\n        localizedName = String.valueOf(getValue(Action.NAME));\r\n    }\r\n    if (localizedName != null) {\r\n        int bucksPos = localizedName.indexOf($);\r\n        if (bucksPos >= 0) {\r\n            localizedName = new StringBuffer(localizedName).deleteCharAt(bucksPos).toString();\r\n        }\r\n        putValue(Action.NAME, localizedName);\r\n        if (bucksPos >= 0) {\r\n            putValue(Action.MNEMONIC_KEY, new Integer(Character.toLowerCase(localizedName.charAt(bucksPos))));\r\n        }\r\n    }\r\n}"},
 {"id":1325, "name":"updateTooltip()", "fullmethod":"net.sourceforge.ganttproject.action.GPAction.updateTooltip()", "ownerclassid":"109", "ownerclassname":"net.sourceforge.ganttproject.action.GPAction", "sourcecode":"private void updateTooltip() {\r\n    putValue(Action.SHORT_DESCRIPTION, ((\"<html><body bgcolor=#EAEAEA>\" + (getTooltipText())) + \"</body></html>\"));\r\n}"},
 {"id":1326, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.ImportResources.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"110", "ownerclassname":"net.sourceforge.ganttproject.action.ImportResources", "sourcecode":"public ImportResources(ResourceManager resourceManager, TaskManager taskManager, RoleManager roleManager, GanttProject project) {\r\n    myTaskManager = taskManager;\r\n    myRoleManager = roleManager;\r\n    GanttLanguage language = GanttLanguage.getInstance();\r\n    this.putValue(AbstractAction.NAME, language.getText(\"importResources\"));\r\n    myResourceManager = resourceManager;\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/impres_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myproject = project;\r\n}"},
 {"id":1327, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.ImportResources.-init-()", "ownerclassid":"110", "ownerclassname":"net.sourceforge.ganttproject.action.ImportResources", "sourcecode":"1() {\r\n}"},
 {"id":1328, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.ImportResources.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"110", "ownerclassname":"net.sourceforge.ganttproject.action.ImportResources", "sourcecode":"/**\r\n *\r\n *\r\n * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\r\n */\r\npublic void actionPerformed(ActionEvent event) {\r\n    final File file = getResourcesFile();\r\n    if (file != null) {\r\n        Mediator.getUndoManager().undoableEdit(\"Import Resources\", new Runnable() {\r\n            public void run() {\r\n                GanttXMLOpen loader = new GanttXMLOpen(myTaskManager);\r\n                ResourceTagHandler tagHandler = new ResourceTagHandler(myResourceManager, myRoleManager, myproject.getResourceCustomPropertyManager());\r\n                DependencyTagHandler dependencyHandler = new DependencyTagHandler(loader.getContext(), myTaskManager, myproject.getUIFacade());\r\n                RoleTagHandler rolesHandler = new RoleTagHandler(net.sourceforge.ganttproject.roles.RoleManager.Access.getInstance());\r\n                loader.addTagHandler(tagHandler);\r\n                loader.addTagHandler(dependencyHandler);\r\n                loader.addTagHandler(rolesHandler);\r\n                loader.load(file);\r\n                // myproject.setQuickSave (true);\r\n                // myproject.quickSave (\"Import Resources\");\r\n            }\r\n        });\r\n    }\r\n}"},
 {"id":1329, "name":"getResourcesFile()", "fullmethod":"net.sourceforge.ganttproject.action.ImportResources.getResourcesFile()", "ownerclassid":"110", "ownerclassname":"net.sourceforge.ganttproject.action.ImportResources", "sourcecode":"private File getResourcesFile() {\r\n    OpenFileDialog openDialog;\r\n    if ((startFile) != null)\r\n        openDialog = new OpenFileDialog(startFile.getPath());\r\n    else\r\n        openDialog = new OpenFileDialog(myproject);\r\n\r\n    File result = openDialog.show();\r\n    if (result != null)\r\n        startFile = result;\r\n\r\n    return result;\r\n}"},
 {"id":1330, "name":"-init-(net.sourceforge.ganttproject.action.NewArtefactAction$ActiveActionProvider,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.NewArtefactAction.-init-(net.sourceforge.ganttproject.action.NewArtefactAction$ActiveActionProvider,java.lang.String)", "ownerclassid":"112", "ownerclassname":"net.sourceforge.ganttproject.action.NewArtefactAction", "sourcecode":"public NewArtefactAction(NewArtefactAction.ActiveActionProvider provider, String iconSize) {\r\n    super(\"\", iconSize);\r\n    myProvider = provider;\r\n}"},
 {"id":1331, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.NewArtefactAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"112", "ownerclassname":"net.sourceforge.ganttproject.action.NewArtefactAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    AbstractAction activeAction = myProvider.getActiveAction();\r\n    activeAction.actionPerformed(e);\r\n}"},
 {"id":1332, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.NewArtefactAction.getIconFilePrefix()", "ownerclassid":"112", "ownerclassname":"net.sourceforge.ganttproject.action.NewArtefactAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"insert_\";\r\n}"},
 {"id":1333, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.NewArtefactAction.isIconVisible(boolean)", "ownerclassid":"112", "ownerclassname":"net.sourceforge.ganttproject.action.NewArtefactAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1334, "name":"getActiveAction()", "fullmethod":"net.sourceforge.ganttproject.action.NewArtefactAction$ActiveActionProvider.getActiveAction()", "ownerclassid":"111", "ownerclassname":"net.sourceforge.ganttproject.action.NewArtefactAction$ActiveActionProvider", "sourcecode":"public AbstractAction getActiveAction();"},
 {"id":1335, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,javax.swing.JFrame,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.NewHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,javax.swing.JFrame,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"113", "ownerclassname":"net.sourceforge.ganttproject.action.NewHumanAction", "sourcecode":"public NewHumanAction(ResourceManager hrManager, RoleManager roleManager, JFrame projectFrame, GanttProject project) {\r\n    super(hrManager);\r\n    myRoleManager = roleManager;\r\n    myProjectFrame = projectFrame;\r\n    myProject = project;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"newHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_H, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/insert_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n}"},
 {"id":1336, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.NewHumanAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"113", "ownerclassname":"net.sourceforge.ganttproject.action.NewHumanAction", "sourcecode":"public void actionPerformed(ActionEvent event) {\r\n    // final HumanResource people =\r\n    // ((HumanResourceManager)getManager()).newHumanResource();\r\n    // people.setRole(myRoleManager.getDefaultRole());\r\n    // GanttDialogPerson dp = new GanttDialogPerson(getProjectFrame(),\r\n    // getLanguage(), people);\r\n    // dp.show();\r\n    // if(dp.result()) {\r\n    // \r\n    // myProject.getUndoManager().undoableEdit(\"new Resource\", new\r\n    // Runnable(){\r\n    // public void run() {\r\n    // getManager().add(people);\r\n    // }});\r\n    // myProject.quickSave (\"new Resource\");\r\n    // }\r\n    myProject.newHumanResource();\r\n}"},
 {"id":1337, "name":"getProjectFrame()", "fullmethod":"net.sourceforge.ganttproject.action.NewHumanAction.getProjectFrame()", "ownerclassid":"113", "ownerclassname":"net.sourceforge.ganttproject.action.NewHumanAction", "sourcecode":"private JFrame getProjectFrame() {\r\n    return myProjectFrame;\r\n}"},
 {"id":1338, "name":"languageChanged()", "fullmethod":"net.sourceforge.ganttproject.action.NewHumanAction.languageChanged()", "ownerclassid":"113", "ownerclassname":"net.sourceforge.ganttproject.action.NewHumanAction", "sourcecode":"public void languageChanged() {\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"newHuman\")));\r\n}"},
 {"id":1339, "name":"-init-(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.NewTaskAction.-init-(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"114", "ownerclassname":"net.sourceforge.ganttproject.action.NewTaskAction", "sourcecode":"public NewTaskAction(IGanttProject project) {\r\n    myProject = project;\r\n    setText(project.getI18n());\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_T, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/insert_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    project.getI18n().addListener(this);\r\n}"},
 {"id":1340, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.NewTaskAction.-init-()", "ownerclassid":"114", "ownerclassname":"net.sourceforge.ganttproject.action.NewTaskAction", "sourcecode":"1() {\r\n}"},
 {"id":1341, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.NewTaskAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"114", "ownerclassname":"net.sourceforge.ganttproject.action.NewTaskAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    Mediator.getUndoManager().undoableEdit(\"New Task\", new Runnable() {\r\n        public void run() {\r\n            myProject.newTask();\r\n        }\r\n    });\r\n}"},
 {"id":1342, "name":"languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "fullmethod":"net.sourceforge.ganttproject.action.NewTaskAction.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "ownerclassid":"114", "ownerclassname":"net.sourceforge.ganttproject.action.NewTaskAction", "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    setText(event.getLanguage());\r\n}"},
 {"id":1343, "name":"setText(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.action.NewTaskAction.setText(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"114", "ownerclassname":"net.sourceforge.ganttproject.action.NewTaskAction", "sourcecode":"/**\r\n *\r\n *\r\n * @param language\r\n * \t\t\r\n */\r\nprivate void setText(GanttLanguage language) {\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(language.getText(\"newTask\")));\r\n}"},
 {"id":1344, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.OkAction.-init-()", "ownerclassid":"115", "ownerclassname":"net.sourceforge.ganttproject.action.OkAction", "sourcecode":"public OkAction() {\r\n    super(GanttLanguage.getInstance().getText(\"ok\"));\r\n}"},
 {"id":1345, "name":"-init-(net.sourceforge.ganttproject.undo.GPUndoManager,java.lang.String,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.RedoAction.-init-(net.sourceforge.ganttproject.undo.GPUndoManager,java.lang.String,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"116", "ownerclassname":"net.sourceforge.ganttproject.action.RedoAction", "sourcecode":"public RedoAction(GPUndoManager undoManager, String iconSize, GanttProject appli) {\r\n    super(null, iconSize);\r\n    myUndoManager = undoManager;\r\n    myUndoManager.addUndoableEditListener(this);\r\n    this.appli = appli;\r\n    setEnabled(myUndoManager.canRedo());\r\n}"},
 {"id":1346, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.RedoAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"116", "ownerclassname":"net.sourceforge.ganttproject.action.RedoAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    appli.getUIFacade().setStatusText(GanttLanguage.getInstance().getText(\"redo\"));\r\n    myUndoManager.redo();\r\n}"},
 {"id":1347, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.RedoAction.getIconFilePrefix()", "ownerclassid":"116", "ownerclassname":"net.sourceforge.ganttproject.action.RedoAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"redo_\";\r\n}"},
 {"id":1348, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.RedoAction.getLocalizedName()", "ownerclassid":"116", "ownerclassname":"net.sourceforge.ganttproject.action.RedoAction", "sourcecode":"protected String getLocalizedName() {\r\n    return GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"redo\"));\r\n}"},
 {"id":1349, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.RedoAction.isIconVisible(boolean)", "ownerclassid":"116", "ownerclassname":"net.sourceforge.ganttproject.action.RedoAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1350, "name":"undoOrRedoHappened()", "fullmethod":"net.sourceforge.ganttproject.action.RedoAction.undoOrRedoHappened()", "ownerclassid":"116", "ownerclassname":"net.sourceforge.ganttproject.action.RedoAction", "sourcecode":"public void undoOrRedoHappened() {\r\n    setEnabled(myUndoManager.canRedo());\r\n}"},
 {"id":1351, "name":"undoableEditHappened(javax.swing.event.UndoableEditEvent)", "fullmethod":"net.sourceforge.ganttproject.action.RedoAction.undoableEditHappened(javax.swing.event.UndoableEditEvent)", "ownerclassid":"116", "ownerclassname":"net.sourceforge.ganttproject.action.RedoAction", "sourcecode":"public void undoableEditHappened(UndoableEditEvent e) {\r\n    setEnabled(myUndoManager.canRedo());\r\n}"},
 {"id":1352, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttOptions)", "fullmethod":"net.sourceforge.ganttproject.action.RefreshViewAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttOptions)", "ownerclassid":"117", "ownerclassname":"net.sourceforge.ganttproject.action.RefreshViewAction", "sourcecode":"public RefreshViewAction(UIFacade uiFacade, GanttOptions options) {\r\n    super(null, options.getIconSize());\r\n    myUIFacade = uiFacade;\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_R, GPAction.MENU_MASK));\r\n}"},
 {"id":1353, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.RefreshViewAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"117", "ownerclassname":"net.sourceforge.ganttproject.action.RefreshViewAction", "sourcecode":"public void actionPerformed(ActionEvent ae) {\r\n    myUIFacade.refresh();\r\n}"},
 {"id":1354, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.RefreshViewAction.getIconFilePrefix()", "ownerclassid":"117", "ownerclassname":"net.sourceforge.ganttproject.action.RefreshViewAction", "sourcecode":"public String getIconFilePrefix() {\r\n    return \"refresh_\";\r\n}"},
 {"id":1355, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.RefreshViewAction.isIconVisible(boolean)", "ownerclassid":"117", "ownerclassname":"net.sourceforge.ganttproject.action.RefreshViewAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(true);\r\n}"},
 {"id":1356, "name":"setIconSize(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.RefreshViewAction.setIconSize(java.lang.String)", "ownerclassid":"117", "ownerclassname":"net.sourceforge.ganttproject.action.RefreshViewAction", "sourcecode":"public void setIconSize(String iconSize) {\r\n    putValue(Action.SMALL_ICON, createIcon(\"16\"));\r\n}"},
 {"id":1357, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager)", "fullmethod":"net.sourceforge.ganttproject.action.ResourceAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager)", "ownerclassid":"118", "ownerclassname":"net.sourceforge.ganttproject.action.ResourceAction", "sourcecode":"public ResourceAction(ResourceManager hrManager) {\r\n    myManager = hrManager;\r\n}"},
 {"id":1358, "name":"getLanguage()", "fullmethod":"net.sourceforge.ganttproject.action.ResourceAction.getLanguage()", "ownerclassid":"118", "ownerclassname":"net.sourceforge.ganttproject.action.ResourceAction", "sourcecode":"protected GanttLanguage getLanguage() {\r\n    return GanttLanguage.getInstance();\r\n}"},
 {"id":1359, "name":"getManager()", "fullmethod":"net.sourceforge.ganttproject.action.ResourceAction.getManager()", "ownerclassid":"118", "ownerclassname":"net.sourceforge.ganttproject.action.ResourceAction", "sourcecode":"protected ResourceManager getManager() {\r\n    return myManager;\r\n}"},
 {"id":1360, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.action.ResourceActionSet.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"119", "ownerclassname":"net.sourceforge.ganttproject.action.ResourceActionSet", "sourcecode":"public ResourceActionSet(IGanttProject project, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    myManager = project.getHumanResourceManager();\r\n    myRoleManager = project.getRoleManager();\r\n    myContext = context;\r\n    myProjectFrame = projectFrame;\r\n    myUIFacade = uiFacade;\r\n    myDeleteHumanAction = new DeleteHumanAction(myManager, myContext, myProjectFrame, myUIFacade);\r\n}"},
 {"id":1361, "name":"getActions()", "fullmethod":"net.sourceforge.ganttproject.action.ResourceActionSet.getActions()", "ownerclassid":"119", "ownerclassname":"net.sourceforge.ganttproject.action.ResourceActionSet", "sourcecode":"public AbstractAction[] getActions() {\r\n    if ((myActions) == null) {\r\n        myActions = new AbstractAction[]{ new NewHumanAction(myManager, myRoleManager, myProjectFrame, myProjectFrame), myDeleteHumanAction };\r\n    }\r\n    return myActions;\r\n}"},
 {"id":1362, "name":"getDeleteHumanAction()", "fullmethod":"net.sourceforge.ganttproject.action.ResourceActionSet.getDeleteHumanAction()", "ownerclassid":"119", "ownerclassname":"net.sourceforge.ganttproject.action.ResourceActionSet", "sourcecode":"public Action getDeleteHumanAction() {\r\n    return myDeleteHumanAction;\r\n}"},
 {"id":1363, "name":"getIconOnMouseOver()", "fullmethod":"net.sourceforge.ganttproject.action.RolloverAction.getIconOnMouseOver()", "ownerclassid":"120", "ownerclassname":"net.sourceforge.ganttproject.action.RolloverAction", "sourcecode":"Icon getIconOnMouseOver();"},
 {"id":1364, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.RolloverAction.isIconVisible(boolean)", "ownerclassid":"120", "ownerclassname":"net.sourceforge.ganttproject.action.RolloverAction", "sourcecode":"void isIconVisible(boolean isNull);"},
 {"id":1365, "name":"setIconSize(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.RolloverAction.setIconSize(java.lang.String)", "ownerclassid":"120", "ownerclassname":"net.sourceforge.ganttproject.action.RolloverAction", "sourcecode":"void setIconSize(String iconSize);"},
 {"id":1366, "name":"-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction.-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,java.lang.String)", "ownerclassid":"121", "ownerclassname":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction", "sourcecode":"public ScrollGanttChartLeftAction(ScrollingManager scrollingManager, String iconSize) {\r\n    super(\"ScrollLeft\", iconSize);\r\n    myScrollingManager = scrollingManager;\r\n}"},
 {"id":1367, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"121", "ownerclassname":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    myScrollingManager.scrollLeft();\r\n}"},
 {"id":1368, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction.getIconFilePrefix()", "ownerclassid":"121", "ownerclassname":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"prev_\";\r\n}"},
 {"id":1369, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction.isIconVisible(boolean)", "ownerclassid":"121", "ownerclassname":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1370, "name":"-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction.-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,java.lang.String)", "ownerclassid":"122", "ownerclassname":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction", "sourcecode":"public ScrollGanttChartRightAction(ScrollingManager scrollingManager, String iconSize) {\r\n    super(\"ScrollRight\", iconSize);\r\n    myScrollingManager = scrollingManager;\r\n}"},
 {"id":1371, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"122", "ownerclassname":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    myScrollingManager.scrollRight();\r\n}"},
 {"id":1372, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction.getIconFilePrefix()", "ownerclassid":"122", "ownerclassname":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"next_\";\r\n}"},
 {"id":1373, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction.isIconVisible(boolean)", "ownerclassid":"122", "ownerclassname":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1374, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.SwitchViewAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"123", "ownerclassname":"net.sourceforge.ganttproject.action.SwitchViewAction", "sourcecode":"public SwitchViewAction(GanttProject project) {\r\n    tabbedPane = project.getTabs();\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F7, GPAction.MENU_MASK));\r\n}"},
 {"id":1375, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.SwitchViewAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"123", "ownerclassname":"net.sourceforge.ganttproject.action.SwitchViewAction", "sourcecode":"public void actionPerformed(ActionEvent arg0) {\r\n    tabbedPane.setSelectedIndex((((tabbedPane.getSelectedIndex()) + 1) % (tabbedPane.getTabCount())));\r\n}"},
 {"id":1376, "name":"-init-(net.sourceforge.ganttproject.undo.GPUndoManager,java.lang.String,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.UndoAction.-init-(net.sourceforge.ganttproject.undo.GPUndoManager,java.lang.String,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"124", "ownerclassname":"net.sourceforge.ganttproject.action.UndoAction", "sourcecode":"public UndoAction(GPUndoManager undoManager, String iconSize, GanttProject appli) {\r\n    super(null, iconSize);\r\n    myUndoManager = undoManager;\r\n    myUndoManager.addUndoableEditListener(this);\r\n    this.appli = appli;\r\n    setEnabled(myUndoManager.canUndo());\r\n}"},
 {"id":1377, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.UndoAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"124", "ownerclassname":"net.sourceforge.ganttproject.action.UndoAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    appli.getUIFacade().setStatusText(GanttLanguage.getInstance().getText(\"undo\"));\r\n    myUndoManager.undo();\r\n}"},
 {"id":1378, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.UndoAction.getIconFilePrefix()", "ownerclassid":"124", "ownerclassname":"net.sourceforge.ganttproject.action.UndoAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"undo_\";\r\n}"},
 {"id":1379, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.UndoAction.getLocalizedName()", "ownerclassid":"124", "ownerclassname":"net.sourceforge.ganttproject.action.UndoAction", "sourcecode":"protected String getLocalizedName() {\r\n    return GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"undo\"));\r\n}"},
 {"id":1380, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.UndoAction.isIconVisible(boolean)", "ownerclassid":"124", "ownerclassname":"net.sourceforge.ganttproject.action.UndoAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1381, "name":"undoOrRedoHappened()", "fullmethod":"net.sourceforge.ganttproject.action.UndoAction.undoOrRedoHappened()", "ownerclassid":"124", "ownerclassname":"net.sourceforge.ganttproject.action.UndoAction", "sourcecode":"public void undoOrRedoHappened() {\r\n    setEnabled(myUndoManager.canUndo());\r\n}"},
 {"id":1382, "name":"undoableEditHappened(javax.swing.event.UndoableEditEvent)", "fullmethod":"net.sourceforge.ganttproject.action.UndoAction.undoableEditHappened(javax.swing.event.UndoableEditEvent)", "ownerclassid":"124", "ownerclassname":"net.sourceforge.ganttproject.action.UndoAction", "sourcecode":"public void undoableEditHappened(UndoableEditEvent e) {\r\n    setEnabled(myUndoManager.canUndo());\r\n}"},
 {"id":1383, "name":"-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.ZoomInAction.-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,java.lang.String)", "ownerclassid":"125", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomInAction", "sourcecode":"public ZoomInAction(ZoomManager zoomManager, String iconSize) {\r\n    super(\"ZoomIn\", iconSize);\r\n    myZoomManager = zoomManager;\r\n    myZoomManager.addZoomListener(this);\r\n}"},
 {"id":1384, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.ZoomInAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"125", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomInAction", "sourcecode":"public void actionPerformed(ActionEvent arg0) {\r\n    if (myZoomManager.canZoomIn()) {\r\n        myZoomManager.zoomIn();\r\n    }\r\n    setEnabled(myZoomManager.canZoomIn());\r\n}"},
 {"id":1385, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.ZoomInAction.getIconFilePrefix()", "ownerclassid":"125", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomInAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"zoomp_\";\r\n}"},
 {"id":1386, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.ZoomInAction.isIconVisible(boolean)", "ownerclassid":"125", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomInAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1387, "name":"zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "fullmethod":"net.sourceforge.ganttproject.action.ZoomInAction.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "ownerclassid":"125", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomInAction", "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n    setEnabled(myZoomManager.canZoomIn());\r\n}"},
 {"id":1388, "name":"-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.action.ZoomOutAction.-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,java.lang.String)", "ownerclassid":"126", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomOutAction", "sourcecode":"public ZoomOutAction(ZoomManager zoomManager, String iconSize) {\r\n    super(\"ZoomOut\", iconSize);\r\n    myZoomManager = zoomManager;\r\n    myZoomManager.addZoomListener(this);\r\n}"},
 {"id":1389, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.ZoomOutAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"126", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomOutAction", "sourcecode":"public void actionPerformed(ActionEvent arg0) {\r\n    if (myZoomManager.canZoomOut()) {\r\n        myZoomManager.zoomOut();\r\n    }\r\n    setEnabled(myZoomManager.canZoomOut());\r\n}"},
 {"id":1390, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.ZoomOutAction.getIconFilePrefix()", "ownerclassid":"126", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomOutAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"zoomm_\";\r\n}"},
 {"id":1391, "name":"isIconVisible()", "fullmethod":"net.sourceforge.ganttproject.action.ZoomOutAction.isIconVisible()", "ownerclassid":"126", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomOutAction", "sourcecode":"public void isIconVisible() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1392, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.action.ZoomOutAction.isIconVisible(boolean)", "ownerclassid":"126", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomOutAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n    setIconVisible(isNull);\r\n}"},
 {"id":1393, "name":"zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "fullmethod":"net.sourceforge.ganttproject.action.ZoomOutAction.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "ownerclassid":"126", "ownerclassname":"net.sourceforge.ganttproject.action.ZoomOutAction", "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n    setEnabled(myZoomManager.canZoomOut());\r\n}"},
 {"id":1394, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.ExitAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"127", "ownerclassname":"net.sourceforge.ganttproject.action.project.ExitAction", "sourcecode":"ExitAction(GanttProject mainFrame) {\r\n    super(\"quit\");\r\n    myMainFrame = mainFrame;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_Q, GPAction.MENU_MASK));\r\n}"},
 {"id":1395, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.project.ExitAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"127", "ownerclassname":"net.sourceforge.ganttproject.action.project.ExitAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    myMainFrame.quitApplication();\r\n}"},
 {"id":1396, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.project.ExitAction.getIconFilePrefix()", "ownerclassid":"127", "ownerclassname":"net.sourceforge.ganttproject.action.project.ExitAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"exit_\";\r\n}"},
 {"id":1397, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.project.ExitAction.getLocalizedName()", "ownerclassid":"127", "ownerclassname":"net.sourceforge.ganttproject.action.project.ExitAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"quit\");\r\n}"},
 {"id":1398, "name":"getTooltipText()", "fullmethod":"net.sourceforge.ganttproject.action.project.ExitAction.getTooltipText()", "ownerclassid":"127", "ownerclassname":"net.sourceforge.ganttproject.action.project.ExitAction", "sourcecode":"protected String getTooltipText() {\r\n    return getI18n(\"quit\");\r\n}"},
 {"id":1399, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.NewProjectAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"128", "ownerclassname":"net.sourceforge.ganttproject.action.project.NewProjectAction", "sourcecode":"public NewProjectAction(GanttProject mainFrame) {\r\n    super(\"newProject\", \"16\");\r\n    myMainFrame = mainFrame;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_N, GPAction.MENU_MASK));\r\n}"},
 {"id":1400, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.project.NewProjectAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"128", "ownerclassname":"net.sourceforge.ganttproject.action.project.NewProjectAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    myMainFrame.newProject();\r\n}"},
 {"id":1401, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.project.NewProjectAction.getIconFilePrefix()", "ownerclassid":"128", "ownerclassname":"net.sourceforge.ganttproject.action.project.NewProjectAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"new_\";\r\n}"},
 {"id":1402, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.project.NewProjectAction.getLocalizedName()", "ownerclassid":"128", "ownerclassname":"net.sourceforge.ganttproject.action.project.NewProjectAction", "sourcecode":"protected String getLocalizedName() {\r\n    return GanttLanguage.getInstance().getText(\"newProject\");\r\n}"},
 {"id":1403, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenProjectAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"129", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenProjectAction", "sourcecode":"OpenProjectAction(GanttProject mainFrame) {\r\n    super(\"openProject\", \"16\");\r\n    myMainFrame = mainFrame;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_O, GPAction.MENU_MASK));\r\n}"},
 {"id":1404, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenProjectAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"129", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenProjectAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    try {\r\n        myMainFrame.openFile();\r\n    } catch (Exception ex) {\r\n        myMainFrame.getUIFacade().showErrorDialog(ex);\r\n    }\r\n}"},
 {"id":1405, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenProjectAction.getIconFilePrefix()", "ownerclassid":"129", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenProjectAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"open_\";\r\n}"},
 {"id":1406, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenProjectAction.getLocalizedName()", "ownerclassid":"129", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenProjectAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"openProject\");\r\n}"},
 {"id":1407, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenURLAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"130", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenURLAction", "sourcecode":"OpenURLAction(GanttProject mainFrame) {\r\n    myMainFrame = mainFrame;\r\n}"},
 {"id":1408, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenURLAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"130", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenURLAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    if (myMainFrame.checkCurrentProject()) {\r\n        myMainFrame.openURL();\r\n    }\r\n}"},
 {"id":1409, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenURLAction.getIconFilePrefix()", "ownerclassid":"130", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenURLAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return null;\r\n}"},
 {"id":1410, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenURLAction.getLocalizedName()", "ownerclassid":"130", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenURLAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"openFromServer\");\r\n}"},
 {"id":1411, "name":"getTooltipText()", "fullmethod":"net.sourceforge.ganttproject.action.project.OpenURLAction.getTooltipText()", "ownerclassid":"130", "ownerclassname":"net.sourceforge.ganttproject.action.project.OpenURLAction", "sourcecode":"protected String getTooltipText() {\r\n    return getLocalizedName();\r\n}"},
 {"id":1412, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.PrintAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"131", "ownerclassname":"net.sourceforge.ganttproject.action.project.PrintAction", "sourcecode":"PrintAction(GanttProject mainFrame) {\r\n    super(\"print\");\r\n    myMainFrame = mainFrame;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_P, GPAction.MENU_MASK));\r\n}"},
 {"id":1413, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.project.PrintAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"131", "ownerclassname":"net.sourceforge.ganttproject.action.project.PrintAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    myMainFrame.printProject();\r\n}"},
 {"id":1414, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.project.PrintAction.getIconFilePrefix()", "ownerclassid":"131", "ownerclassname":"net.sourceforge.ganttproject.action.project.PrintAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"print_\";\r\n}"},
 {"id":1415, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.project.PrintAction.getLocalizedName()", "ownerclassid":"131", "ownerclassname":"net.sourceforge.ganttproject.action.project.PrintAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"printProject\");\r\n}"},
 {"id":1416, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public ProjectMenu(GanttProject mainFrame) {\r\n    myMainFrame = mainFrame;\r\n    myNewProjectAction = new NewProjectAction(mainFrame);\r\n    myOpenProjectAction = new OpenProjectAction(mainFrame);\r\n    mySaveProjectAction = new SaveProjectAction(mainFrame);\r\n    mySaveProjectAsAction = new SaveProjectAsAction(mainFrame);\r\n    myOpenURLAction = new OpenURLAction(mainFrame);\r\n    mySaveURLAction = new SaveURLAction(mainFrame);\r\n    myPrintAction = new PrintAction(mainFrame);\r\n    myExitAction = new ExitAction(mainFrame);\r\n}"},
 {"id":1417, "name":"getExitAction()", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.getExitAction()", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public GPAction getExitAction() {\r\n    return myExitAction;\r\n}"},
 {"id":1418, "name":"getNewProjectAction()", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.getNewProjectAction()", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public GPAction getNewProjectAction() {\r\n    return myNewProjectAction;\r\n}"},
 {"id":1419, "name":"getOpenProjectAction()", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.getOpenProjectAction()", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public GPAction getOpenProjectAction() {\r\n    return myOpenProjectAction;\r\n}"},
 {"id":1420, "name":"getOpenURLAction()", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.getOpenURLAction()", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public GPAction getOpenURLAction() {\r\n    return myOpenURLAction;\r\n}"},
 {"id":1421, "name":"getPrintAction()", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.getPrintAction()", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public GPAction getPrintAction() {\r\n    return myPrintAction;\r\n}"},
 {"id":1422, "name":"getSaveProjectAction()", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.getSaveProjectAction()", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public GPAction getSaveProjectAction() {\r\n    return mySaveProjectAction;\r\n}"},
 {"id":1423, "name":"getSaveProjectAsAction()", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.getSaveProjectAsAction()", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public GPAction getSaveProjectAsAction() {\r\n    return mySaveProjectAsAction;\r\n}"},
 {"id":1424, "name":"getSaveURLAction()", "fullmethod":"net.sourceforge.ganttproject.action.project.ProjectMenu.getSaveURLAction()", "ownerclassid":"132", "ownerclassname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "sourcecode":"public GPAction getSaveURLAction() {\r\n    return mySaveURLAction;\r\n}"},
 {"id":1425, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"133", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "sourcecode":"SaveProjectAction(GanttProject mainFrame) {\r\n    super(\"saveProject\", \"16\");\r\n    myMainFrame = mainFrame;\r\n    mainFrame.addProjectEventListener(this);\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_S, GPAction.MENU_MASK));\r\n    setEnabled(false);\r\n}"},
 {"id":1426, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"133", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    try {\r\n        myMainFrame.saveProject();\r\n    } catch (IOException e1) {\r\n        myMainFrame.getUIFacade().showErrorDialog(e1);\r\n    }\r\n}"},
 {"id":1427, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAction.getIconFilePrefix()", "ownerclassid":"133", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"save_\";\r\n}"},
 {"id":1428, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAction.getLocalizedName()", "ownerclassid":"133", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"saveProject\");\r\n}"},
 {"id":1429, "name":"getTooltipText()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAction.getTooltipText()", "ownerclassid":"133", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "sourcecode":"protected String getTooltipText() {\r\n    return getI18n(\"saveProject\");\r\n}"},
 {"id":1430, "name":"projectClosed()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAction.projectClosed()", "ownerclassid":"133", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "sourcecode":"public void projectClosed() {\r\n    setEnabled(false);\r\n}"},
 {"id":1431, "name":"projectModified()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAction.projectModified()", "ownerclassid":"133", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "sourcecode":"public void projectModified() {\r\n    setEnabled(true);\r\n}"},
 {"id":1432, "name":"projectSaved()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAction.projectSaved()", "ownerclassid":"133", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "sourcecode":"public void projectSaved() {\r\n    setEnabled(false);\r\n}"},
 {"id":1433, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"134", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction", "sourcecode":"SaveProjectAsAction(GanttProject mainFrame) {\r\n    super(\"saveas\");\r\n    myMainFrame = mainFrame;\r\n}"},
 {"id":1434, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"134", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    try {\r\n        myMainFrame.saveAsProject();\r\n    } catch (IOException e1) {\r\n        myMainFrame.showErrorDialog(e1);\r\n    }\r\n}"},
 {"id":1435, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction.getIconFilePrefix()", "ownerclassid":"134", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"saveas_\";\r\n}"},
 {"id":1436, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction.getLocalizedName()", "ownerclassid":"134", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"saveAsProject\");\r\n}"},
 {"id":1437, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveURLAction.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"135", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveURLAction", "sourcecode":"SaveURLAction(GanttProject mainFrame) {\r\n    myMainFrame = mainFrame;\r\n}"},
 {"id":1438, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveURLAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"135", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveURLAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    try {\r\n        myMainFrame.saveAsURLProject();\r\n    } catch (Exception ex) {\r\n        myMainFrame.getUIFacade().showErrorDialog(ex);\r\n    }\r\n}"},
 {"id":1439, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveURLAction.getIconFilePrefix()", "ownerclassid":"135", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveURLAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return null;\r\n}"},
 {"id":1440, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.project.SaveURLAction.getLocalizedName()", "ownerclassid":"135", "ownerclassname":"net.sourceforge.ganttproject.action.project.SaveURLAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"saveToServer\");\r\n}"},
 {"id":1441, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"public ResourcePropertiesAction(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK));\r\n}"},
 {"id":1442, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"public void actionPerformed(ActionEvent arg0) {\r\n    if ((getSelectedResource()) != null) {\r\n        GanttDialogPerson dp = new GanttDialogPerson(getUIFacade(), GanttLanguage.getInstance(), getSelectedResource());\r\n        dp.setVisible(true);\r\n        if (dp.result()) {\r\n            getProject().setModified(true);\r\n        }\r\n    }\r\n}"},
 {"id":1443, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.getIconFilePrefix()", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"properties_\";\r\n}"},
 {"id":1444, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.getLocalizedName()", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"propertiesHuman\");\r\n}"},
 {"id":1445, "name":"getProject()", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.getProject()", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"private IGanttProject getProject() {\r\n    return myProject;\r\n}"},
 {"id":1446, "name":"getSelectedResource()", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.getSelectedResource()", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"private HumanResource getSelectedResource() {\r\n    return mySelectedResource;\r\n}"},
 {"id":1447, "name":"getTooltipText()", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.getTooltipText()", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"protected String getTooltipText() {\r\n    return getI18n(\"propertiesHuman\");\r\n}"},
 {"id":1448, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.getUIFacade()", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"private UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":1449, "name":"setContext(net.sourceforge.ganttproject.resource.ResourceContext)", "fullmethod":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.setContext(net.sourceforge.ganttproject.resource.ResourceContext)", "ownerclassid":"136", "ownerclassname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "sourcecode":"public void setContext(ResourceContext context) {\r\n    ProjectResource[] resources = context.getResources();\r\n    if ((resources.length) == 1) {\r\n        mySelectedResource = ((HumanResource) (resources[0]));\r\n        setEnabled(true);\r\n    } else {\r\n        setEnabled(false);\r\n    }\r\n}"},
 {"id":1450, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.action.task.LinkTasksAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"137", "ownerclassname":"net.sourceforge.ganttproject.action.task.LinkTasksAction", "sourcecode":"public LinkTasksAction(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(taskManager, selectionManager, uiFacade);\r\n}"},
 {"id":1451, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.task.LinkTasksAction.getIconFilePrefix()", "ownerclassid":"137", "ownerclassname":"net.sourceforge.ganttproject.action.task.LinkTasksAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"link_\";\r\n}"},
 {"id":1452, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.task.LinkTasksAction.getLocalizedName()", "ownerclassid":"137", "ownerclassname":"net.sourceforge.ganttproject.action.task.LinkTasksAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"link\");\r\n}"},
 {"id":1453, "name":"isEnabled(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.LinkTasksAction.isEnabled(java.util.List)", "ownerclassid":"137", "ownerclassname":"net.sourceforge.ganttproject.action.task.LinkTasksAction", "sourcecode":"protected boolean isEnabled(List selection) {\r\n    return (selection.size()) >= 2;\r\n}"},
 {"id":1454, "name":"run(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.LinkTasksAction.run(java.util.List)", "ownerclassid":"137", "ownerclassname":"net.sourceforge.ganttproject.action.task.LinkTasksAction", "sourcecode":"protected void run(List selection) throws TaskDependencyException {\r\n    for (int i = 0; i < ((selection.size()) - 1); i++) {\r\n        Task dependant = ((Task) (selection.get((i + 1))));\r\n        Task dependee = ((Task) (selection.get(i)));\r\n        if (getTaskManager().getDependencyCollection().canCreateDependency(dependant, dependee)) {\r\n            getTaskManager().getDependencyCollection().createDependency(dependant, dependee);\r\n        }\r\n    }\r\n}"},
 {"id":1455, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"protected TaskActionBase(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    myTaskManager = taskManager;\r\n    selectionManager.addSelectionListener(this);\r\n    selectionChanged(selectionManager.getSelectedTasks());\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":1456, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.-init-()", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"1() {\r\n}"},
 {"id":1457, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    final List selection = new ArrayList(mySelection);\r\n    myUIFacade.getUndoManager().undoableEdit(getLocalizedName(), new Runnable() {\r\n        public void run() {\r\n            try {\r\n                TaskActionBase.this.run(selection);\r\n            } catch (Exception e) {\r\n                getUIFacade().showErrorDialog(e);\r\n            }\r\n        }\r\n    });\r\n}"},
 {"id":1458, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.getTaskManager()", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"protected TaskManager getTaskManager() {\r\n    return myTaskManager;\r\n}"},
 {"id":1459, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.getUIFacade()", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"protected UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":1460, "name":"isEnabled(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.isEnabled(java.util.List)", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"protected abstract boolean isEnabled(List selection);"},
 {"id":1461, "name":"run(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.run(java.util.List)", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"protected abstract void run(List selection) throws Exception;"},
 {"id":1462, "name":"selectionChanged(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.selectionChanged(java.util.List)", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"public void selectionChanged(List currentSelection) {\r\n    setEnabled(isEnabled(currentSelection));\r\n    mySelection = currentSelection;\r\n}"},
 {"id":1463, "name":"userInputConsumerChanged(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskActionBase.userInputConsumerChanged(java.lang.Object)", "ownerclassid":"138", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "sourcecode":"public void userInputConsumerChanged(Object newConsumer) {\r\n}"},
 {"id":1464, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"139", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "sourcecode":"public TaskPropertiesAction(IGanttProject project, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(project.getTaskManager(), selectionManager, uiFacade);\r\n    myProject = project;\r\n    mySelectionManager = selectionManager;\r\n    myHumanManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n}"},
 {"id":1465, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.-init-()", "ownerclassid":"139", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "sourcecode":"1() {\r\n}"},
 {"id":1466, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.getIconFilePrefix()", "ownerclassid":"139", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"properties_\";\r\n}"},
 {"id":1467, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.getLocalizedName()", "ownerclassid":"139", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"propertiesTask\");\r\n}"},
 {"id":1468, "name":"isEnabled(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.isEnabled(java.util.List)", "ownerclassid":"139", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "sourcecode":"protected boolean isEnabled(List selection) {\r\n    return (selection.size()) == 1;\r\n}"},
 {"id":1469, "name":"run(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.run(java.util.List)", "ownerclassid":"139", "ownerclassname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "sourcecode":"protected void run(/* <Task> */\r\nList selection) throws Exception {\r\n    if ((selection.size()) != 1) {\r\n        return;\r\n    }\r\n    final GanttTask[] tasks = new GanttTask[]{ ((GanttTask) (selection.get(0))) };\r\n    GanttDialogProperties pd = new GanttDialogProperties(tasks);\r\n    mySelectionManager.setUserInputConsumer(pd);\r\n    pd.show(myProject, getUIFacade());\r\n    if (pd.change) {\r\n        myProject.setModified(true);\r\n        // setRowHeight(rowHeight);\r\n        // getResourcePanel().getResourceTreeTableModel()\r\n        // .updateResources();\r\n    }\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            mySelectionManager.clear();\r\n            mySelectionManager.addTask(tasks[0]);\r\n        }\r\n    });\r\n}"},
 {"id":1470, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"140", "ownerclassname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction", "sourcecode":"public UnlinkTasksAction(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(taskManager, selectionManager, uiFacade);\r\n}"},
 {"id":1471, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction.getIconFilePrefix()", "ownerclassid":"140", "ownerclassname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"unlink_\";\r\n}"},
 {"id":1472, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction.getLocalizedName()", "ownerclassid":"140", "ownerclassname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"unlink\");\r\n}"},
 {"id":1473, "name":"isEnabled(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction.isEnabled(java.util.List)", "ownerclassid":"140", "ownerclassname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction", "sourcecode":"protected boolean isEnabled(List selection) {\r\n    return false == (selection.isEmpty());\r\n}"},
 {"id":1474, "name":"run(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction.run(java.util.List)", "ownerclassid":"140", "ownerclassname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction", "sourcecode":"protected void run(List selection) throws Exception {\r\n    for (int i = 0; i < (selection.size()); i++) {\r\n        Task nextTask = ((Task) (selection.get(i)));\r\n        nextTask.getDependencies().clear(selection);\r\n    }\r\n}"},
 {"id":1475, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.application.MainApplication.-init-()", "ownerclassid":"141", "ownerclassname":"net.sourceforge.ganttproject.application.MainApplication", "sourcecode":"MainApplication() {\r\n}"},
 {"id":1476, "name":"run(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.application.MainApplication.run(java.lang.Object)", "ownerclassid":"141", "ownerclassname":"net.sourceforge.ganttproject.application.MainApplication", "sourcecode":"// The hack with waiting is necessary because when you\r\n// launch Runtime Workbench in Eclipse, it exists as soon as\r\n// GanttProject.main() method exits\r\n// without Eclipse, Swing thread continues execution. So we wait until main\r\n// window closes\r\npublic Object run(Object args) throws Exception {\r\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\r\n    GPLogger.setup();\r\n    String[] cmdLine = ((String[]) (args));\r\n    WindowAdapter closingListener = new WindowAdapter() {\r\n        public void windowClosed(WindowEvent e) {\r\n            myLock.notify();\r\n        }\r\n    };\r\n    GanttProject.setWindowListener(closingListener);\r\n    GanttProject.main(cmdLine);\r\n    synchronized(myLock) {\r\n        myLock.wait();\r\n    }\r\n    return null;\r\n}"},
 {"id":1477, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.-init-()", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"AlwaysWorkingTimeCalendarImpl() {\r\n}"},
 {"id":1478, "name":"findClosestWorkingTime(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.findClosestWorkingTime(java.util.Date)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public Date findClosestWorkingTime(Date time) {\r\n    return time;\r\n}"},
 {"id":1479, "name":"getActivities(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getActivities(java.util.Date,java.util.Date)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public List getActivities(Date startDate, Date endDate) {\r\n    return Collections.singletonList(new CalendarActivityImpl(startDate, endDate, true));\r\n}"},
 {"id":1480, "name":"getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public List getActivities(Date startingFrom, TaskLength period) {\r\n    return getActivities(startingFrom, period.getTimeUnit(), period.getLength());\r\n}"},
 {"id":1481, "name":"getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"protected List getActivitiesBackward(Date startDate, TimeUnit timeUnit, long unitCount) {\r\n    Date activityEnd = timeUnit.adjustLeft(startDate);\r\n    Date activityStart = activityEnd;\r\n    while ((unitCount--) > 0) {\r\n        activityStart = timeUnit.jumpLeft(activityStart);\r\n    } \r\n    return Collections.singletonList(new CalendarActivityImpl(activityStart, activityEnd, true));\r\n}"},
 {"id":1482, "name":"getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"protected List getActivitiesForward(Date startDate, TimeUnit timeUnit, long l) {\r\n    Date activityStart = timeUnit.adjustLeft(startDate);\r\n    Date activityEnd = activityStart;\r\n    for (; l > 0; l--) {\r\n        activityEnd = timeUnit.adjustRight(activityEnd);\r\n    }\r\n    return Collections.singletonList(new CalendarActivityImpl(activityStart, activityEnd, true));\r\n}"},
 {"id":1483, "name":"getDayTypeDate(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getDayTypeDate(java.util.Date)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public GPCalendar.DayType getDayTypeDate(Date curDayStart) {\r\n    // TODO Auto-generated method stub\r\n    return GPCalendar.DayType.WORKING;\r\n}"},
 {"id":1484, "name":"getPublicHolidays()", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getPublicHolidays()", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public Collection getPublicHolidays() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":1485, "name":"getWeekDayType(int)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getWeekDayType(int)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public GPCalendar.DayType getWeekDayType(int day) {\r\n    return GPCalendar.DayType.WORKING;\r\n}"},
 {"id":1486, "name":"isNonWorkingDay(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.isNonWorkingDay(java.util.Date)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public boolean isNonWorkingDay(Date curDayStart) {\r\n    // TODO Auto-generated method stub\r\n    return false;\r\n}"},
 {"id":1487, "name":"isPublicHoliDay(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.isPublicHoliDay(java.util.Date)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public boolean isPublicHoliDay(Date curDayStart) {\r\n    // TODO Auto-generated method stub\r\n    return false;\r\n}"},
 {"id":1488, "name":"setPublicHoliDayType(int,int)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.setPublicHoliDayType(int,int)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public void setPublicHoliDayType(int month, int date) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1489, "name":"setPublicHoliDayType(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.setPublicHoliDayType(java.util.Date)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public void setPublicHoliDayType(Date curDayStart) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1490, "name":"setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public void setPublicHolidays(URL calendar, GanttProject gp) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1491, "name":"setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "fullmethod":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "ownerclassid":"142", "ownerclassname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "sourcecode":"public void setWeekDayType(int day, GPCalendar.DayType type) {\r\n    if (type == (GPCalendar.DayType.WEEKEND)) {\r\n        throw new IllegalArgumentException(\"I am always working time calendar, I dont accept holidays!\");\r\n    }\r\n}"},
 {"id":1492, "name":"-init-(java.util.Date,java.util.Date,boolean)", "fullmethod":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl.-init-(java.util.Date,java.util.Date,boolean)", "ownerclassid":"143", "ownerclassname":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl", "sourcecode":"public CalendarActivityImpl(Date startDate, Date endDate, boolean isWorkingTime) {\r\n    myStartDate = startDate;\r\n    myEndDate = endDate;\r\n    this.isWorkingTime = isWorkingTime;\r\n}"},
 {"id":1493, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl.getEnd()", "ownerclassid":"143", "ownerclassname":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl", "sourcecode":"public Date getEnd() {\r\n    return myEndDate;\r\n}"},
 {"id":1494, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl.getStart()", "ownerclassid":"143", "ownerclassname":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl", "sourcecode":"public Date getStart() {\r\n    return myStartDate;\r\n}"},
 {"id":1495, "name":"isWorkingTime()", "fullmethod":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl.isWorkingTime()", "ownerclassid":"143", "ownerclassname":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl", "sourcecode":"public boolean isWorkingTime() {\r\n    return isWorkingTime;\r\n}"},
 {"id":1496, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl.toString()", "ownerclassid":"143", "ownerclassname":"net.sourceforge.ganttproject.calendar.CalendarActivityImpl", "sourcecode":"/* (non-Javadoc)\n\n@see java.lang.Object#toString()\n */\r\npublic String toString() {\r\n    return (((((isWorkingTime() ? \"Working time: \" : \"Holiday: \") + \"[\") + (getStart())) + \", \") + (getEnd())) + \"]\";\r\n}"},
 {"id":1497, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.CalendarFactory.-init-()", "ownerclassid":"144", "ownerclassname":"net.sourceforge.ganttproject.calendar.CalendarFactory", "sourcecode":"CalendarFactory() {\r\n}"},
 {"id":1498, "name":"newCalendar()", "fullmethod":"net.sourceforge.ganttproject.calendar.CalendarFactory.newCalendar()", "ownerclassid":"144", "ownerclassname":"net.sourceforge.ganttproject.calendar.CalendarFactory", "sourcecode":"public static Calendar newCalendar() {\r\n    return GanttLanguage.getInstance().newCalendar();\r\n}"},
 {"id":1499, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.-init-()", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"DayType() {\r\n}"},
 {"id":1500, "name":"findClosestWorkingTime(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.findClosestWorkingTime(java.util.Date)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"Date findClosestWorkingTime(Date time);"},
 {"id":1501, "name":"getActivities(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.getActivities(java.util.Date,java.util.Date)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"List getActivities(Date startDate, Date endDate);"},
 {"id":1502, "name":"getActivities(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.getActivities(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"List getActivities(Date startDate, TimeUnit timeUnit, long l);"},
 {"id":1503, "name":"getDayTypeDate(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.getDayTypeDate(java.util.Date)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"public GPCalendar.DayType getDayTypeDate(Date curDayStart);"},
 {"id":1504, "name":"getPublicHolidays()", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.getPublicHolidays()", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"public Collection getPublicHolidays();"},
 {"id":1505, "name":"getWeekDayType(int)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.getWeekDayType(int)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"GPCalendar.DayType getWeekDayType(int day);"},
 {"id":1506, "name":"isNonWorkingDay(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.isNonWorkingDay(java.util.Date)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"public boolean isNonWorkingDay(Date curDayStart);"},
 {"id":1507, "name":"isPublicHoliDay(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.isPublicHoliDay(java.util.Date)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"public boolean isPublicHoliDay(Date curDayStart);"},
 {"id":1508, "name":"setPublicHoliDayType(int,int)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.setPublicHoliDayType(int,int)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"void setPublicHoliDayType(int month, int date);"},
 {"id":1509, "name":"setPublicHoliDayType(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.setPublicHoliDayType(java.util.Date)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"public void setPublicHoliDayType(Date curDayStart);"},
 {"id":1510, "name":"setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"public void setPublicHolidays(URL calendar, GanttProject gp);"},
 {"id":1511, "name":"setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"void setWeekDayType(int day, GPCalendar.DayType type);"},
 {"id":1512, "name":"shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar.shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"146", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar", "sourcecode":"/**\r\n * Adds <code>shift</code> period to <code>input</code> date taking into\r\n * account this calendar working/non-working time If input date corresponds\r\n * to friday midnight and this calendar if configured to have a weekend on\r\n * saturday and sunday then adding a shift of \"1 day\" will result to the\r\n * midnight of the next monday\r\n */\r\nDate shiftDate(Date input, TaskLength shift);"},
 {"id":1513, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendar$DayType.-init-()", "ownerclassid":"145", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendar$DayType", "sourcecode":"DayType() {\r\n}"},
 {"id":1514, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarActivity.getEnd()", "ownerclassid":"147", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarActivity", "sourcecode":"Date getEnd();"},
 {"id":1515, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarActivity.getStart()", "ownerclassid":"147", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarActivity", "sourcecode":"Date getStart();"},
 {"id":1516, "name":"isWorkingTime()", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarActivity.isWorkingTime()", "ownerclassid":"147", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarActivity", "sourcecode":"boolean isWorkingTime();"},
 {"id":1517, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarBase.-init-()", "ownerclassid":"148", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "sourcecode":"GPCalendarBase() {\r\n}"},
 {"id":1518, "name":"getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarBase.getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"148", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "sourcecode":"public List getActivities(/* <GPCalendarActivity> */\r\nDate startingFrom, TaskLength period) {\r\n    return getActivities(startingFrom, period.getTimeUnit(), period.getLength());\r\n}"},
 {"id":1519, "name":"getActivities(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarBase.getActivities(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"148", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "sourcecode":"public List getActivities(Date startDate, TimeUnit timeUnit, long unitCount) {\r\n    return unitCount > 0 ? getActivitiesForward(startDate, timeUnit, unitCount) : getActivitiesBackward(startDate, timeUnit, (-unitCount));\r\n}"},
 {"id":1520, "name":"getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarBase.getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"148", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "sourcecode":"protected abstract List getActivitiesBackward(Date startDate, TimeUnit timeUnit, long l);"},
 {"id":1521, "name":"getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarBase.getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"148", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "sourcecode":"protected abstract List getActivitiesForward(Date startDate, TimeUnit timeUnit, long l);"},
 {"id":1522, "name":"shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.calendar.GPCalendarBase.shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"148", "ownerclassname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "sourcecode":"public Date shiftDate(Date input, TaskLength shift) {\r\n    List activities = getActivities(input, shift);\r\n    if (activities.isEmpty()) {\r\n        throw new RuntimeException((((\"FIXME: Failed to compute calendar activities in time period=\" + shift) + \" starting from \") + input));\r\n    }\r\n    Date result;\r\n    if ((shift.getValue()) >= 0) {\r\n        GPCalendarActivity lastActivity = ((GPCalendarActivity) (activities.get(((activities.size()) - 1))));\r\n        result = lastActivity.getEnd();\r\n    } else {\r\n        GPCalendarActivity firstActivity = ((GPCalendarActivity) (activities.get(0)));\r\n        result = firstActivity.getStart();\r\n    }\r\n    return result;\r\n}"},
 {"id":1523, "name":"-init-(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.-init-(java.util.Date,java.util.Date)", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public GanttDaysOff(Date start, Date finish) {\r\n    myStart = new GanttCalendar(start);\r\n    myFinish = new GanttCalendar(finish);\r\n}"},
 {"id":1524, "name":"-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public GanttDaysOff(GanttCalendar start, GanttCalendar finish) {\r\n    myStart = new GanttCalendar(start.getYear(), start.getMonth(), start.getDate());\r\n    myFinish = finish;\r\n}"},
 {"id":1525, "name":"clone()", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.clone()", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public Object clone() {\r\n    return new GanttDaysOff(myStart.Clone(), myFinish.Clone());\r\n}"},
 {"id":1526, "name":"equals(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.equals(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public boolean equals(GanttDaysOff dayOffs) {\r\n    return (dayOffs.getStart().equals(myStart)) && (dayOffs.getFinish().equals(myFinish));\r\n}"},
 {"id":1527, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.getDuration()", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public int getDuration() {\r\n    return (myStart.diff(myFinish)) + 1;\r\n}"},
 {"id":1528, "name":"getFinish()", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.getFinish()", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public GanttCalendar getFinish() {\r\n    return myFinish;\r\n}"},
 {"id":1529, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.getStart()", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public GanttCalendar getStart() {\r\n    return myStart;\r\n}"},
 {"id":1530, "name":"isADayOff(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.isADayOff(java.util.Date)", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public boolean isADayOff(Date date) {\r\n    return ((date.equals(myStart.getTime())) || (date.equals(myFinish.getTime()))) || ((date.before(myFinish.getTime())) && (date.after(myStart.getTime())));\r\n}"},
 {"id":1531, "name":"isADayOff(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.isADayOff(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public boolean isADayOff(GanttCalendar date) {\r\n    return ((date.equals(myStart)) || (date.equals(myFinish))) || ((date.before(myFinish)) && (date.after(myStart)));\r\n}"},
 {"id":1532, "name":"isADayOffInWeek(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.isADayOffInWeek(java.util.Date)", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public int isADayOffInWeek(Date date) {\r\n    GanttCalendar start = myStart.Clone();\r\n    GanttCalendar finish = myFinish.Clone();\r\n    for (int i = 0; i < 7; i++) {\r\n        start.add((-1));\r\n        finish.add((-1));\r\n        if (((date.equals(start.getTime())) || (date.equals(finish.getTime()))) || ((date.before(finish.getTime())) && (date.after(start.getTime()))))\r\n            return i + 1;\r\n\r\n    }\r\n    return -1;\r\n}"},
 {"id":1533, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.calendar.GanttDaysOff.toString()", "ownerclassid":"149", "ownerclassname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "sourcecode":"public String toString() {\r\n    return ((myStart) + \" -> \") + (myFinish);\r\n}"},
 {"id":1534, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.-init-()", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public WeekendCalendarImpl() {\r\n    for (int i = 0; i < (myTypes.length); i++) {\r\n        myTypes[i] = GPCalendar.DayType.WORKING;\r\n    }\r\n    setWeekDayType(GregorianCalendar.SATURDAY, GPCalendar.DayType.WEEKEND);\r\n    setWeekDayType(GregorianCalendar.SUNDAY, GPCalendar.DayType.WEEKEND);\r\n}"},
 {"id":1535, "name":"findClosestWorkingTime(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.findClosestWorkingTime(java.util.Date)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public Date findClosestWorkingTime(Date time) {\r\n    if ((myWeekendDaysCount) == 0) {\r\n        return time;\r\n    }\r\n    if (!(isNonWorkingDay(time))) {\r\n        return time;\r\n    }\r\n    return getStateChangeDate(time, false);\r\n}"},
 {"id":1536, "name":"getActivities(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getActivities(java.util.Date,java.util.Date)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public List getActivities(/* <GPCalendarActivity> */\r\nDate startDate, final Date endDate) {\r\n    if ((myWeekendDaysCount) == 0) {\r\n        return myRestlessCalendar.getActivities(startDate, endDate);\r\n    }\r\n    List result = new ArrayList();\r\n    Date curDayStart = myFramer.adjustLeft(startDate);\r\n    boolean isWeekendState = isNonWorkingDay(curDayStart);\r\n    // System.err.println(\"getActivities(): start=\"+startDate+\"\r\n    // end=\"+endDate);\r\n    while (curDayStart.before(endDate)) {\r\n        // System.err.println(\"curDayStart=\"+curDayStart);\r\n        Date changeStateDayStart = getStateChangeDate(curDayStart, (!isWeekendState));\r\n        // System.err.println(\"changeStateDayStart=\"+changeStateDayStart);\r\n        if (changeStateDayStart.before(endDate)) {\r\n            result.add(new CalendarActivityImpl(curDayStart, changeStateDayStart, (!isWeekendState)));\r\n            curDayStart = changeStateDayStart;\r\n            isWeekendState = !isWeekendState;\r\n            continue;\r\n        } else {\r\n            result.add(new CalendarActivityImpl(curDayStart, endDate, (!isWeekendState)));\r\n            break;\r\n        }\r\n    } \r\n    return result;\r\n}"},
 {"id":1537, "name":"getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public List getActivities(Date startingFrom, TaskLength period) {\r\n    return getActivities(startingFrom, period.getTimeUnit(), period.getLength());\r\n}"},
 {"id":1538, "name":"getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"protected List getActivitiesBackward(Date startDate, TimeUnit timeUnit, long unitCount) {\r\n    List result = new LinkedList();\r\n    Date unitStart = timeUnit.adjustLeft(startDate);\r\n    while (unitCount > 0) {\r\n        Date prevUnitStart = timeUnit.jumpLeft(unitStart);\r\n        boolean isWeekendState = isNonWorkingDay(prevUnitStart);\r\n        if (isWeekendState) {\r\n            Date lastWorkingUnitStart = getStateChangeDate(prevUnitStart, timeUnit, false, false);\r\n            Date firstWeekendUnitStart = timeUnit.adjustRight(lastWorkingUnitStart);\r\n            Date lastWeekendUnitEnd = unitStart;\r\n            result.add(0, new CalendarActivityImpl(firstWeekendUnitStart, lastWeekendUnitEnd, false));\r\n            unitStart = firstWeekendUnitStart;\r\n        } else {\r\n            result.add(0, new CalendarActivityImpl(prevUnitStart, unitStart, true));\r\n            unitCount--;\r\n            unitStart = prevUnitStart;\r\n        }\r\n    } \r\n    return result;\r\n}"},
 {"id":1539, "name":"getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"protected List getActivitiesForward(Date startDate, TimeUnit timeUnit, long unitCount) {\r\n    List result = new ArrayList();\r\n    Date unitStart = timeUnit.adjustLeft(startDate);\r\n    while (unitCount > 0) {\r\n        boolean isWeekendState = isNonWorkingDay(unitStart);\r\n        if (isWeekendState) {\r\n            Date workingUnitStart = getStateChangeDate(unitStart, timeUnit, false, true);\r\n            result.add(new CalendarActivityImpl(unitStart, workingUnitStart, false));\r\n            unitStart = workingUnitStart;\r\n            continue;\r\n        }\r\n        Date nextUnitStart = timeUnit.adjustRight(unitStart);\r\n        result.add(new CalendarActivityImpl(unitStart, nextUnitStart, true));\r\n        unitStart = nextUnitStart;\r\n        unitCount--;\r\n    } \r\n    return result;\r\n}"},
 {"id":1540, "name":"getDayTypeDate(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getDayTypeDate(java.util.Date)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public GPCalendar.DayType getDayTypeDate(Date curDayStart) {\r\n    myCalendar.setTime(curDayStart);\r\n    int dayOfYear = myCalendar.get(Calendar.DAY_OF_YEAR);\r\n    myCalendar.setTime(curDayStart);\r\n    int dayOfWeek = myCalendar.get(Calendar.DAY_OF_WEEK);\r\n    if ((!(isPublicHoliDay(curDayStart))) && ((getWeekDayType(dayOfWeek)) == (GPCalendar.DayType.WORKING)))\r\n        return GPCalendar.DayType.WORKING;\r\n    else\r\n        if (isPublicHoliDay(curDayStart))\r\n            return GPCalendar.DayType.HOLIDAY;\r\n        else\r\n            return GPCalendar.DayType.WEEKEND;\r\n\r\n\r\n}"},
 {"id":1541, "name":"getPublicHolidays()", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getPublicHolidays()", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public Collection getPublicHolidays() {\r\n    return publicHolidaysArray;\r\n}"},
 {"id":1542, "name":"getStateChangeDate(java.util.Date,boolean)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getStateChangeDate(java.util.Date,boolean)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"private Date getStateChangeDate(Date startDate, boolean changeToWeekend) {\r\n    Date nextDayStart = myFramer.adjustRight(startDate);\r\n    if (!(changeToWeekend ^ (isNonWorkingDay(nextDayStart)))) {\r\n        return nextDayStart;\r\n    } else {\r\n        return getStateChangeDate(nextDayStart, changeToWeekend);\r\n    }\r\n}"},
 {"id":1543, "name":"getStateChangeDate(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getStateChangeDate(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,boolean,boolean)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"private Date getStateChangeDate(Date startDate, TimeUnit timeUnit, boolean changeToWeekend, boolean moveRightNotLeft) {\r\n    Date nextUnitStart = (moveRightNotLeft) ? timeUnit.adjustRight(startDate) : timeUnit.jumpLeft(startDate);\r\n    if (!(changeToWeekend ^ (isNonWorkingDay(nextUnitStart)))) {\r\n        return nextUnitStart;\r\n    } else {\r\n        return getStateChangeDate(nextUnitStart, timeUnit, changeToWeekend, moveRightNotLeft);\r\n    }\r\n}"},
 {"id":1544, "name":"getWeekDayType(int)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getWeekDayType(int)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public GPCalendar.DayType getWeekDayType(int day) {\r\n    return myTypes[(day - 1)];\r\n}"},
 {"id":1545, "name":"isNonWorkingDay(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.isNonWorkingDay(java.util.Date)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public boolean isNonWorkingDay(Date curDayStart) {\r\n    if ((isWeekend(curDayStart)) || (isPublicHoliDay(curDayStart)))\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}"},
 {"id":1546, "name":"isPublicHoliDay(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.isPublicHoliDay(java.util.Date)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public boolean isPublicHoliDay(Date curDayStart) {\r\n    boolean result = publicHolidaysArray.contains(curDayStart);\r\n    if (!result) {\r\n        result = myStableHolidays.contains(new GanttCalendar(1, curDayStart.getMonth(), curDayStart.getDate()).getTime());\r\n    }\r\n    return result;\r\n}"},
 {"id":1547, "name":"isWeekend(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.isWeekend(java.util.Date)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public boolean isWeekend(Date curDayStart) {\r\n    myCalendar.setTime(curDayStart);\r\n    int dayOfWeek = myCalendar.get(Calendar.DAY_OF_WEEK);\r\n    return (myTypes[(dayOfWeek - 1)]) == (GPCalendar.DayType.WEEKEND);\r\n}"},
 {"id":1548, "name":"setPublicHoliDayType(int,int)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.setPublicHoliDayType(int,int)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public void setPublicHoliDayType(int month, int date) {\r\n    setPublicHoliDayType(new GanttCalendar(1, (month - 1), date).getTime());\r\n    myStableHolidays.add(new GanttCalendar(1, (month - 1), date).getTime());\r\n}"},
 {"id":1549, "name":"setPublicHoliDayType(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.setPublicHoliDayType(java.util.Date)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public void setPublicHoliDayType(Date curDayStart) {\r\n    publicHolidaysArray.add(curDayStart);\r\n}"},
 {"id":1550, "name":"setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public void setPublicHolidays(URL calendar, GanttProject gp) {\r\n    publicHolidaysArray.clear();\r\n    if (calendar != null) {\r\n        XMLCalendarOpen opener = new XMLCalendarOpen();\r\n        HolidayTagHandler dependencyHandler = new HolidayTagHandler(gp);\r\n        opener.addTagHandler(dependencyHandler);\r\n        opener.addParsingListener(dependencyHandler);\r\n        try {\r\n            opener.load(calendar.openStream());\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}"},
 {"id":1551, "name":"setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "fullmethod":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "ownerclassid":"150", "ownerclassname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "sourcecode":"public void setWeekDayType(int day, GPCalendar.DayType type) {\r\n    if (type != (myTypes[(day - 1)])) {\r\n        myWeekendDaysCount += (type == (GPCalendar.DayType.WEEKEND)) ? 1 : -1;\r\n    }\r\n    myTypes[(day - 1)] = type;\r\n}"},
 {"id":1552, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.-init-()", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"XMLCalendarOpen() {\r\n}"},
 {"id":1553, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.-init-(java.lang.String)", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"public Filter(String extension) {\r\n    if (extension == null) {\r\n        throw new NullPointerException(\"La description (ou extension) ne peut \ufffdtre null.\");\r\n    }\r\n    this.extension = extension;\r\n}"},
 {"id":1554, "name":"addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"void addParsingListener(ParsingListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":1555, "name":"addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"void addTagHandler(TagHandler handler) {\r\n    myTagHandlers.add(handler);\r\n}"},
 {"id":1556, "name":"getCalendarResources()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.getCalendarResources()", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"public URL[] getCalendarResources() {\r\n    return ((URL[]) (myCalendarResources.toArray(new URL[0])));\r\n}"},
 {"id":1557, "name":"getDefaultTagHandler()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.getDefaultTagHandler()", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"private TagHandler getDefaultTagHandler() {\r\n    return new XMLCalendarOpen.DefaultTagHandler();\r\n}"},
 {"id":1558, "name":"getLabels()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.getLabels()", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"public String[] getLabels() {\r\n    return myCalendarLabels;\r\n}"},
 {"id":1559, "name":"load(java.io.InputStream)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.load(java.io.InputStream)", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"boolean load(InputStream inputStream) throws IOException, ParserConfigurationException, SAXException {\r\n    // Use an instance of ourselves as the SAX event handler\r\n    DefaultHandler handler = new XMLCalendarOpen.GanttXMLParser();\r\n    // Use the default (non-validating) parser\r\n    SAXParserFactory factory = SAXParserFactory.newInstance();\r\n    SAXParser saxParser = factory.newSAXParser();\r\n    saxParser.parse(inputStream, handler);\r\n    return true;\r\n}"},
 {"id":1560, "name":"setCalendars()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.setCalendars()", "ownerclassid":"154", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "sourcecode":"public void setCalendars() throws Exception {\r\n    // TODO The loading of the calendar is not clear. There are 2 cases here\r\n    // :\r\n    // - using eclipse where test is a directory\r\n    // - using the built jar archive where test is not a directory\r\n    // \r\n    // URL url = getClass().getResource(\"/calendar\");\r\n    // URL resolvedUrl = Platform.resolve(url);\r\n    // File test = new File(resolvedUrl.getPath());\r\n    // File path = new File(URLDecoder.decode(test.getAbsolutePath()));\r\n    // if(test.isDirectory())\r\n    // path = test;\r\n    // else\r\n    // path = new File(\"calendar\");\r\n    myCalendarResources.clear();\r\n    XMLCalendarOpen.DefaultTagHandler th = ((XMLCalendarOpen.DefaultTagHandler) (getDefaultTagHandler()));\r\n    addTagHandler(th);\r\n    IConfigurationElement[] calendarExtensions = Platform.getExtensionRegistry().getConfigurationElementsFor(GPCalendar.EXTENSION_POINT_ID);\r\n    // myCalendarFiles = path.listFiles(new Filter(\".calendar\"));\r\n    myCalendarLabels = new String[calendarExtensions.length];\r\n    for (int i = 0; i < (calendarExtensions.length); i++) {\r\n        Bundle nextBundle = Platform.getBundle(calendarExtensions[i].getDeclaringExtension().getNamespace());\r\n        URL calendarUrl = nextBundle.getResource(calendarExtensions[i].getAttribute(\"resource-url\"));\r\n        if (calendarUrl != null) {\r\n            load(calendarUrl.openStream());\r\n            myCalendarLabels[i] = th.getName();\r\n            myCalendarResources.add(calendarUrl);\r\n        }\r\n    }\r\n}"},
 {"id":1561, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$DefaultTagHandler.-init-()", "ownerclassid":"151", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$DefaultTagHandler", "sourcecode":"DefaultTagHandler() {\r\n}"},
 {"id":1562, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$DefaultTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"151", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$DefaultTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n}"},
 {"id":1563, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$DefaultTagHandler.getName()", "ownerclassid":"151", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$DefaultTagHandler", "sourcecode":"public String getName() {\r\n    return name;\r\n}"},
 {"id":1564, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$DefaultTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"151", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$DefaultTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    String eName = qName;// element name\r\n\r\n    if (attrs != null) {\r\n        for (int i = 0; i < (attrs.getLength()); i++) {\r\n            String aName = attrs.getLocalName(i);// Attr name\r\n\r\n            if (\"\".equals(aName)) {\r\n                aName = attrs.getQName(i);\r\n                // The project part\r\n            }\r\n            if (eName.equals(\"calendar\")) {\r\n                if (aName.equals(\"name\")) {\r\n                    name = attrs.getValue(i);\r\n                } else\r\n                    if (aName.equals(\"type\")) {\r\n                    }\r\n\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":1565, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$Filter.-init-(java.lang.String)", "ownerclassid":"152", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$Filter", "sourcecode":"public Filter(String extension) {\r\n    if (extension == null) {\r\n        throw new NullPointerException(\"La description (ou extension) ne peut \ufffdtre null.\");\r\n    }\r\n    this.extension = extension;\r\n}"},
 {"id":1566, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$Filter.accept(java.io.File)", "ownerclassid":"152", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$Filter", "sourcecode":"public boolean accept(File arg0) {\r\n    // TODO Auto-generated method stub\r\n    return false;\r\n}"},
 {"id":1567, "name":"accept(java.io.File,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$Filter.accept(java.io.File,java.lang.String)", "ownerclassid":"152", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$Filter", "sourcecode":"public boolean accept(File file, String arg1) {\r\n    return arg1.endsWith(extension);\r\n}"},
 {"id":1568, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$Filter.getDescription()", "ownerclassid":"152", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$Filter", "sourcecode":"public String getDescription() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":1569, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$GanttXMLParser.-init-()", "ownerclassid":"153", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$GanttXMLParser", "sourcecode":"GanttXMLParser() {\r\n}"},
 {"id":1570, "name":"endDocument()", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$GanttXMLParser.endDocument()", "ownerclassid":"153", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$GanttXMLParser", "sourcecode":"// ===========================================================\r\n// SAX DocumentHandler methods\r\n// ===========================================================\r\npublic void endDocument() throws SAXException {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        ParsingListener l = ((ParsingListener) (myListeners.get(i)));\r\n        l.parsingFinished();\r\n    }\r\n}"},
 {"id":1571, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$GanttXMLParser.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"153", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$GanttXMLParser", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) throws SAXException {\r\n    for (Iterator handlers = myTagHandlers.iterator(); handlers.hasNext();) {\r\n        TagHandler next = ((TagHandler) (handlers.next()));\r\n        next.endElement(namespaceURI, sName, qName);\r\n    }\r\n}"},
 {"id":1572, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$GanttXMLParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"153", "ownerclassname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen$GanttXMLParser", "sourcecode":"public void startElement(String namespaceURI, String sName, // simple\r\n// name\r\nString qName, // qualified name\r\nAttributes attrs) throws SAXException {\r\n    for (Iterator handlers = myTagHandlers.iterator(); handlers.hasNext();) {\r\n        TagHandler next = ((TagHandler) (handlers.next()));\r\n        try {\r\n            next.startElement(namespaceURI, sName, qName, attrs);\r\n        } catch (FileFormatException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}"},
 {"id":1573, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "fullmethod":"net.sourceforge.ganttproject.chart.BackgroundRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "ownerclassid":"155", "ownerclassname":"net.sourceforge.ganttproject.chart.BackgroundRendererImpl", "sourcecode":"public BackgroundRendererImpl(ChartModelBase model) {\r\n    super(model);\r\n}"},
 {"id":1574, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.BackgroundRendererImpl.beforeProcessingTimeFrames()", "ownerclassid":"155", "ownerclassname":"net.sourceforge.ganttproject.chart.BackgroundRendererImpl", "sourcecode":"public void beforeProcessingTimeFrames() {\r\n    super.beforeProcessingTimeFrames();\r\n    GraphicPrimitiveContainer.Rectangle r = getPrimitiveContainer().createRectangle(0, 0, getWidth(), getHeight());\r\n    r.setBackgroundColor(Color.WHITE);\r\n}"},
 {"id":1575, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"public BottomUnitLineRendererImpl(ChartModelBase model, UIConfiguration projectConfig) {\r\n    this(model, new GraphicPrimitiveContainer(), projectConfig);\r\n}"},
 {"id":1576, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer,net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer,net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"public BottomUnitLineRendererImpl(ChartModelBase model, GraphicPrimitiveContainer primitiveContainer, UIConfiguration projectConfig) {\r\n    super(model);\r\n    myPrimitiveContainer = primitiveContainer;\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n}"},
 {"id":1577, "name":"getLineBottomPosition()", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.getLineBottomPosition()", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"protected int getLineBottomPosition() {\r\n    return 0;\r\n}"},
 {"id":1578, "name":"getLineHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.getLineHeight()", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"protected int getLineHeight() {\r\n    return getLineTopPosition();\r\n}"},
 {"id":1579, "name":"getLineTopPosition()", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.getLineTopPosition()", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"protected int getLineTopPosition() {\r\n    return getChartModel().getChartUIConfiguration().getSpanningHeaderHeight();\r\n}"},
 {"id":1580, "name":"getOffsets()", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.getOffsets()", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"protected List getOffsets() {\r\n    return getChartModel().getDefaultUnitOffsets();\r\n}"},
 {"id":1581, "name":"getPrimitiveContainer()", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.getPrimitiveContainer()", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"public GraphicPrimitiveContainer getPrimitiveContainer() {\r\n    return myPrimitiveContainer;\r\n}"},
 {"id":1582, "name":"getTextBaselinePosition()", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.getTextBaselinePosition()", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"protected int getTextBaselinePosition() {\r\n    return (getLineBottomPosition()) - 5;\r\n}"},
 {"id":1583, "name":"isProjectBoundariesOptionOn()", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.isProjectBoundariesOptionOn()", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"private boolean isProjectBoundariesOptionOn() {\r\n    return myProjectDatesOption.isChecked();\r\n}"},
 {"id":1584, "name":"render()", "fullmethod":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.render()", "ownerclassid":"156", "ownerclassname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "sourcecode":"public void render() {\r\n    myToday = myDayFramer.adjustLeft(CalendarFactory.newCalendar().getTime());\r\n    getPrimitiveContainer().clear();\r\n    int curX = 0;\r\n    Date curDate = getChartModel().getStartDate();\r\n    final int topUnitHeight = getLineTopPosition();\r\n    boolean firstWeekendDay = true;\r\n    List offsets = getOffsets();\r\n    for (int i = 0; i < (offsets.size()); i++) {\r\n        ChartModelBase.Offset nextOffset = ((ChartModelBase.Offset) (offsets.get(i)));\r\n        if (((nextOffset.getDayType()) == (GPCalendar.DayType.WEEKEND)) || ((nextOffset.getDayType()) == (GPCalendar.DayType.HOLIDAY))) {\r\n            GraphicPrimitiveContainer.Rectangle r = getPrimitiveContainer().createRectangle(curX, ((getLineBottomPosition()) + 1), ((nextOffset.getOffsetPixels()) - curX), getHeight());\r\n            Color background = ((nextOffset.getDayType()) == (GPCalendar.DayType.WEEKEND)) ? getConfig().getHolidayTimeBackgroundColor() : getConfig().getPublicHolidayTimeBackgroundColor();\r\n            r.setBackgroundColor(background);\r\n            r.setStyle(\"calendar.holiday\");\r\n            getPrimitiveContainer().bind(r, nextOffset.getDayType());\r\n            // if (firstWeekendDay) {\r\n            // getPrimitiveContainer().createLine(\r\n            // curX, getLineTopPosition(), curX, getLineTopPosition()+10);\r\n            // firstWeekendDay = false;\r\n            // }\r\n        }\r\n        // else {\r\n        // TimeUnitText timeUnitText = nextOffset.getOffsetUnit().format(curDate);\r\n        // String unitText = timeUnitText.getText(-1);\r\n        // int posY = getTextBaselinePosition();\r\n        // GraphicPrimitiveContainer.Text text = getPrimitiveContainer().createText(\r\n        // curX + 2, posY, unitText);\r\n        // getPrimitiveContainer().bind(text, timeUnitText);\r\n        // text.setMaxLength(nextOffset.getOffsetPixels() - curX);\r\n        // text.setFont(getChartModel().getChartUIConfiguration().getSpanningHeaderFont());\r\n        // getPrimitiveContainer().createLine(\r\n        // curX, getLineTopPosition(), curX, getLineTopPosition()+10);\r\n        // firstWeekendDay = true;\r\n        // }\r\n        if ((curDate.equals(myToday)) && (myRedlineOption.isChecked())) {\r\n            GraphicPrimitiveContainer.Line redLine = getPrimitiveContainer().createLine((curX + 2), ((getLineBottomPosition()) + 1), (curX + 2), getHeight());\r\n            redLine.setForegroundColor(Color.RED);\r\n        }\r\n        if (((curDate.equals(getChartModel().getTaskManager().getProjectStart())) || (curDate.equals(getChartModel().getTaskManager().getProjectEnd()))) && (isProjectBoundariesOptionOn())) {\r\n            GraphicPrimitiveContainer.Line blueLine = getPrimitiveContainer().createLine(curX, ((getLineBottomPosition()) + 1), curX, getHeight());\r\n            blueLine.setForegroundColor(Color.BLUE);\r\n        }\r\n        curX = nextOffset.getOffsetPixels();\r\n        curDate = nextOffset.getOffsetEnd();\r\n        // System.err.println(\"curDate=\"+curDate+\" curX=\"+curX);\r\n    }\r\n}"},
 {"id":1585, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "fullmethod":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl.-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "ownerclassid":"158", "ownerclassname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl", "sourcecode":"CachingOffsetCalculatorImpl(TimeUnitStack timeUnitStack) {\r\n    myCalculator = new OffsetCalculatorImpl(timeUnitStack);\r\n}"},
 {"id":1586, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"158", "ownerclassname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl", "sourcecode":"private UnitPair(TimeUnit mainUnit, TimeUnit offsetUnit) {\r\n    myMainUnit = mainUnit;\r\n    myOffsetUnit = offsetUnit;\r\n}"},
 {"id":1587, "name":"calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"158", "ownerclassname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl", "sourcecode":"ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    ChartModelBase.Offset[] result = null;\r\n    CachingOffsetCalculatorImpl.UnitPair unitPair = new CachingOffsetCalculatorImpl.UnitPair(frameBottomUnit, offsetUnit);\r\n    LinkedHashMap startDate_Offsets = ((LinkedHashMap) (myUnitPair_StartDate.get(unitPair)));\r\n    if (startDate_Offsets == null) {\r\n        startDate_Offsets = new LinkedHashMap();\r\n        myUnitPair_StartDate.put(unitPair, startDate_Offsets);\r\n    }\r\n    result = ((ChartModelBase.Offset[]) (startDate_Offsets.get(bottomUnitStartDate)));\r\n    if (result == null) {\r\n        result = myCalculator.calculateOffsets(timeFrame, frameBottomUnit, bottomUnitStartDate, offsetUnit, frameBottomUnitWidth);\r\n        startDate_Offsets.put(bottomUnitStartDate, result);\r\n        if ((startDate_Offsets.size()) > (CachingOffsetCalculatorImpl.MAX_CACHE_SIZE)) {\r\n            Iterator iter = startDate_Offsets.entrySet().iterator();\r\n            iter.next();\r\n            iter.remove();\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1588, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl.reset()", "ownerclassid":"158", "ownerclassname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl", "sourcecode":"void reset() {\r\n    myUnitPair_StartDate.clear();\r\n}"},
 {"id":1589, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"157", "ownerclassname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair", "sourcecode":"private UnitPair(TimeUnit mainUnit, TimeUnit offsetUnit) {\r\n    myMainUnit = mainUnit;\r\n    myOffsetUnit = offsetUnit;\r\n}"},
 {"id":1590, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair.equals(java.lang.Object)", "ownerclassid":"157", "ownerclassname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair", "sourcecode":"public boolean equals(Object o) {\r\n    if (false == (o instanceof CachingOffsetCalculatorImpl.UnitPair)) {\r\n        return false;\r\n    }\r\n    CachingOffsetCalculatorImpl.UnitPair rvalue = ((CachingOffsetCalculatorImpl.UnitPair) (o));\r\n    return (rvalue.myMainUnit.equals(myMainUnit)) && (rvalue.myOffsetUnit.equals(myOffsetUnit));\r\n}"},
 {"id":1591, "name":"hashCode()", "fullmethod":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair.hashCode()", "ownerclassid":"157", "ownerclassname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair", "sourcecode":"public int hashCode() {\r\n    return (myMainUnit.hashCode()) + (myOffsetUnit.hashCode());\r\n}"},
 {"id":1592, "name":"addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public void addSelectionListener(ChartSelectionListener listener);"},
 {"id":1593, "name":"canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public IStatus canPaste(ChartSelection selection);"},
 {"id":1594, "name":"createCopy()", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.createCopy()", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public Chart createCopy();"},
 {"id":1595, "name":"getChart(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"/**\r\n *\r\n *\r\n * @deprecated Use getRenderedImage\r\n */\r\npublic BufferedImage getChart(GanttExportSettings settings);"},
 {"id":1596, "name":"getEndDate()", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.getEndDate()", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public Date getEndDate();"},
 {"id":1597, "name":"getIcon()", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.getIcon()", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public Icon getIcon();"},
 {"id":1598, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.getName()", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public String getName();"},
 {"id":1599, "name":"getOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.getOptionGroups()", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public GPOptionGroup[] getOptionGroups();"},
 {"id":1600, "name":"getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public RenderedImage getRenderedImage(GanttExportSettings settings);"},
 {"id":1601, "name":"getSelection()", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.getSelection()", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public ChartSelection getSelection();"},
 {"id":1602, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.getStartDate()", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public Date getStartDate();"},
 {"id":1603, "name":"paste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public void paste(ChartSelection selection);"},
 {"id":1604, "name":"removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public void removeSelectionListener(ChartSelectionListener listener);"},
 {"id":1605, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.reset()", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public void reset();"},
 {"id":1606, "name":"setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.chart.Chart.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"159", "ownerclassname":"net.sourceforge.ganttproject.chart.Chart", "sourcecode":"public void setTaskManager(TaskManager taskManager);"},
 {"id":1607, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"public ChartGridImpl(ChartModelBase chartModel, final UIConfiguration projectConfig) {\r\n    super(chartModel);\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n    myOptions = new ChartOptionGroup(\"ganttChartGridDetails\", new GPOption[]{ myRedlineOption, myProjectDatesOption }, chartModel.getOptionEventDispatcher());\r\n}"},
 {"id":1608, "name":"afterProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.afterProcessingTimeFrames()", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"public void afterProcessingTimeFrames() {\r\n}"},
 {"id":1609, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.beforeProcessingTimeFrames()", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"public void beforeProcessingTimeFrames() {\r\n    getPrimitiveContainer().clear();\r\n    myPosX = 0;\r\n    myToday = myDayFramer.adjustLeft(CalendarFactory.newCalendar().getTime());\r\n    projectStart = getChartModel().getTaskManager().getProjectStart();\r\n    projectEnd = getChartModel().getTaskManager().getProjectEnd();\r\n}"},
 {"id":1610, "name":"drawDateLine(java.util.Date,int,java.util.Date,net.sourceforge.ganttproject.chart.ChartModelBase$Offset[],java.awt.Color,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.drawDateLine(java.util.Date,int,java.util.Date,net.sourceforge.ganttproject.chart.ChartModelBase$Offset[],java.awt.Color,int)", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"private void drawDateLine(Date unitStart, int unitIndex, Date lineDate, ChartModelBase.Offset[] offsets, Color color, int horizontalOffset) {\r\n    int redLineOffset = -1;\r\n    if ((unitStart.before(lineDate)) && (myCurrentFrame.getUnitFinish(myCurrentUnit, unitIndex).after(lineDate))) {\r\n        for (int i = 0; i < (offsets.length); i++) {\r\n            if (offsets[i].getOffsetEnd().equals(lineDate)) {\r\n                redLineOffset = offsets[i].getOffsetPixels();\r\n                break;\r\n            }\r\n        }\r\n    } else\r\n        if (unitStart.equals(lineDate)) {\r\n            redLineOffset = 0;\r\n        }\r\n\r\n    if (redLineOffset >= 0) {\r\n        GraphicPrimitiveContainer.Line redLine = getPrimitiveContainer().createLine((((myPosX) + redLineOffset) + horizontalOffset), 0, (((myPosX) + redLineOffset) + horizontalOffset), getHeight());\r\n        redLine.setForegroundColor(color);\r\n    }\r\n}"},
 {"id":1611, "name":"endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"public void endTimeFrame(TimeFrame timeFrame) {\r\n    myCurrentFrame = null;\r\n}"},
 {"id":1612, "name":"endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"public void endUnitLine(TimeUnit timeUnit) {\r\n    areUnitsAccepted = false;\r\n    myCurrentUnit = null;\r\n}"},
 {"id":1613, "name":"getOptions()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.getOptions()", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"GPOptionGroup getOptions() {\r\n    return myOptions;\r\n}"},
 {"id":1614, "name":"isProjectBoundariesOptionOn()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.isProjectBoundariesOptionOn()", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"private boolean isProjectBoundariesOptionOn() {\r\n    return myProjectDatesOption.isChecked();\r\n}"},
 {"id":1615, "name":"nextTimeUnit(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.nextTimeUnit(int)", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"public void nextTimeUnit(int unitIndex) {\r\n    if (areUnitsAccepted) {\r\n        // if (myRedlineOption.isChecked()\r\n        // && myCurrentFrame.getUnitStart(myCurrentUnit, unitIndex)\r\n        // .compareTo(myToday) <= 0\r\n        // && myCurrentFrame.getUnitFinish(myCurrentUnit, unitIndex)\r\n        // .compareTo(myToday) > 0) {\r\n        // \r\n        // }\r\n        Date unitStart = myCurrentFrame.getUnitStart(myCurrentUnit, unitIndex);\r\n        DayTypeAlternance[] alternance = getChartModel().getDayTypeAlternance(myCurrentFrame, myCurrentUnit, unitIndex);\r\n        ChartModelBase.Offset[] offsets = getChartModel().calculateOffsets(myCurrentFrame, myCurrentUnit, unitStart, getChartModel().getTimeUnitStack().getDefaultTimeUnit(), getChartModel().getBottomUnitWidth());\r\n        if (myRedlineOption.isChecked()) {\r\n            drawDateLine(unitStart, unitIndex, myToday, offsets, Color.RED, 2);\r\n        }\r\n        if (isProjectBoundariesOptionOn()) {\r\n            drawDateLine(unitStart, unitIndex, projectStart, offsets, Color.BLUE, 0);\r\n            drawDateLine(unitStart, unitIndex, projectEnd, offsets, Color.BLUE, 0);\r\n        }\r\n        // int posX = myPosX;\r\n        // float delta = (float) getChartModel().getBottomUnitWidth()\r\n        // / (float) alternance.length;\r\n        // int width=0;\r\n        int prevOffset = 0;\r\n        // DayTypeAlternance next=null;\r\n        for (int i = 0; i < (alternance.length); i++) {\r\n            DayTypeAlternance next = alternance[i];\r\n            int alternanceEndOffset = getChartModel().getBottomUnitWidth();\r\n            for (int j = 0; j < (offsets.length); j++) {\r\n                if (offsets[j].getOffsetEnd().equals(next.getEnd())) {\r\n                    alternanceEndOffset = offsets[j].getOffsetPixels();\r\n                    break;\r\n                }\r\n            }\r\n            // System.err.println(\"[ChartGridImpl] nextTimeUnit(): lternance=\"+next);\r\n            // int width = (int)(next.getDuration().getLength(myCurrentUnit)*getChartModel().getBottomUnitWidth());\r\n            // posX = (int) (myPosX + delta * i);\r\n            // nextPosX = i < alternance.length - 1 ? (int) (myPosX + delta\r\n            // * (i + 1))\r\n            // : myPosX + getChartModel().getBottomUnitWidth();\r\n            // width = nextPosX - posX;\r\n            if ((GPCalendar.DayType.WEEKEND) == (next.getDayType())) {\r\n                // System.err.println(\"[ChartGridImpl] nextTimeUnit(): prevOffset=\"+prevOffset+\" endOffset=\"+alternanceEndOffset);\r\n                // System.err.println(\"[ChartGridImpl] nextTimeUnit(): end=\"+next.getEnd()+\" offset=\"+alternanceEndOffset+\" bottom width=\"+getChartModel().getBottomUnitWidth());\r\n                GraphicPrimitiveContainer.Rectangle r = getPrimitiveContainer().createRectangle(((myPosX) + prevOffset), 0, (alternanceEndOffset - prevOffset), getHeight());\r\n                r.setBackgroundColor(getConfig().getHolidayTimeBackgroundColor());\r\n                r.setStyle(\"calendar.holiday\");\r\n                getPrimitiveContainer().bind(r, next.getDayType());\r\n            }\r\n            if ((GPCalendar.DayType.HOLIDAY) == (next.getDayType())) {\r\n                GraphicPrimitiveContainer.Rectangle r = getPrimitiveContainer().createRectangle(((myPosX) + prevOffset), 0, alternanceEndOffset, getHeight());\r\n                r.setBackgroundColor(getConfig().getPublicHolidayTimeBackgroundColor());\r\n                r.setStyle(\"calendar.holiday\");\r\n                getPrimitiveContainer().bind(r, next.getDayType());\r\n            }\r\n            prevOffset = alternanceEndOffset;\r\n            // posX = myPosX+width;\r\n        }\r\n        // \r\n        myPosX += getChartModel().getBottomUnitWidth();\r\n    }\r\n}"},
 {"id":1616, "name":"startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"public void startTimeFrame(TimeFrame timeFrame) {\r\n    myCurrentFrame = timeFrame;\r\n}"},
 {"id":1617, "name":"startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartGridImpl.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"160", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "sourcecode":"public void startUnitLine(TimeUnit timeUnit) {\r\n    if (timeUnit == (myCurrentFrame.getBottomUnit())) {\r\n        areUnitsAccepted = true;\r\n        myCurrentUnit = timeUnit;\r\n    }\r\n}"},
 {"id":1618, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"ChartHeaderImpl(ChartModelBase model, final UIConfiguration projectConfig) {\r\n    super(model);\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n    myOptions = new ChartOptionGroup(\"ganttChartGridDetails\", new GPOption[]{ myRedlineOption, myProjectDatesOption }, model.getOptionEventDispatcher());\r\n    myPrimitiveContainer = new GraphicPrimitiveContainer();\r\n}"},
 {"id":1619, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.beforeProcessingTimeFrames()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"public void beforeProcessingTimeFrames() {\r\n    myPrimitiveContainer = new GraphicPrimitiveContainer();\r\n    myPrimitiveContainer.clear();\r\n    createGreyRectangleWithNiceBorders();\r\n    myToday = myDayFramer.adjustLeft(CalendarFactory.newCalendar().getTime());\r\n}"},
 {"id":1620, "name":"createGreyRectangleWithNiceBorders()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.createGreyRectangleWithNiceBorders()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"/**\r\n * Draws the timeline box\r\n */\r\nprivate void createGreyRectangleWithNiceBorders() {\r\n    int sizex = getWidth();\r\n    int spanningHeaderHeight = getChartModel().getChartUIConfiguration().getSpanningHeaderHeight();\r\n    GraphicPrimitiveContainer.Rectangle headerRectangle = myPrimitiveContainer.createRectangle(0, 0, sizex, (spanningHeaderHeight * 2));\r\n    headerRectangle.setBackgroundColor(getChartModel().getChartUIConfiguration().getSpanningHeaderBackgroundColor());\r\n    // \r\n    GraphicPrimitiveContainer.Rectangle spanningHeaderBorder = myPrimitiveContainer.createRectangle(0, 0, (sizex - 1), spanningHeaderHeight);\r\n    spanningHeaderBorder.setForegroundColor(getChartModel().getChartUIConfiguration().getHeaderBorderColor());\r\n    // \r\n    GraphicPrimitiveContainer.Rectangle timeunitHeaderBorder = myPrimitiveContainer.createRectangle(0, spanningHeaderHeight, (sizex - 1), spanningHeaderHeight);\r\n    timeunitHeaderBorder.setForegroundColor(getChartModel().getChartUIConfiguration().getHeaderBorderColor());\r\n    // \r\n    GraphicPrimitiveContainer.Line middleGutter1 = myPrimitiveContainer.createLine(1, (spanningHeaderHeight - 1), (sizex - 2), (spanningHeaderHeight - 1));\r\n    middleGutter1.setForegroundColor(getChartModel().getChartUIConfiguration().getHorizontalGutterColor1());\r\n    // \r\n    GraphicPrimitiveContainer.Line bottomGutter = myPrimitiveContainer.createLine(0, ((spanningHeaderHeight * 2) - 2), (sizex - 2), ((spanningHeaderHeight * 2) - 2));\r\n    bottomGutter.setForegroundColor(getChartModel().getChartUIConfiguration().getHorizontalGutterColor1());\r\n    // \r\n    GraphicPrimitiveContainer.Line topGutter = myPrimitiveContainer.createLine(1, 1, (sizex - 2), 1);\r\n    topGutter.setForegroundColor(getChartModel().getChartUIConfiguration().getHorizontalGutterColor2());\r\n    // \r\n    myPrimitiveContainer.createLine(0, (spanningHeaderHeight + 1), (sizex - 2), (spanningHeaderHeight + 1));\r\n    topGutter.setForegroundColor(getChartModel().getChartUIConfiguration().getHorizontalGutterColor2());\r\n}"},
 {"id":1621, "name":"getOptions()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.getOptions()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"GPOptionGroup getOptions() {\r\n    return myOptions;\r\n}"},
 {"id":1622, "name":"getPrimitiveContainer()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.getPrimitiveContainer()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"public GraphicPrimitiveContainer getPrimitiveContainer() {\r\n    return myPrimitiveContainer;\r\n}"},
 {"id":1623, "name":"isProjectBoundariesOptionOn()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.isProjectBoundariesOptionOn()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"private boolean isProjectBoundariesOptionOn() {\r\n    return myProjectDatesOption.isChecked();\r\n}"},
 {"id":1624, "name":"paint()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.paint()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"public GraphicPrimitiveContainer paint() {\r\n    return myPrimitiveContainer;\r\n}"},
 {"id":1625, "name":"render()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.render()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"public void render() {\r\n    beforeProcessingTimeFrames();\r\n    renderTopUnits();\r\n    renderBottomUnits();\r\n}"},
 {"id":1626, "name":"renderBottomUnits()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.renderBottomUnits()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"/**\r\n * Draws cells of the bottom line in the time line\r\n */\r\nprivate void renderBottomUnits() {\r\n    int curX = 0;\r\n    Date curDate = getChartModel().getStartDate();\r\n    final int topUnitHeight = getChartModel().getChartUIConfiguration().getSpanningHeaderHeight();\r\n    boolean firstWeekendDay = true;\r\n    for (int i = 0; i < (getChartModel().getBottomUnitOffsets().size()); i++) {\r\n        ChartModelBase.Offset nextOffset = ((ChartModelBase.Offset) (getChartModel().getBottomUnitOffsets().get(i)));\r\n        TimeUnitText timeUnitText = nextOffset.getOffsetUnit().format(curDate);\r\n        String unitText = timeUnitText.getText((-1));\r\n        int posY = (2 * topUnitHeight) - 5;\r\n        GraphicPrimitiveContainer.Text text = myPrimitiveContainer.createText((curX + 2), posY, unitText);\r\n        myPrimitiveContainer.bind(text, timeUnitText);\r\n        text.setMaxLength(((nextOffset.getOffsetPixels()) - curX));\r\n        text.setFont(getChartModel().getChartUIConfiguration().getSpanningHeaderFont());\r\n        myPrimitiveContainer.createLine(curX, topUnitHeight, curX, (2 * topUnitHeight));\r\n        firstWeekendDay = true;\r\n        curX = nextOffset.getOffsetPixels();\r\n        curDate = nextOffset.getOffsetEnd();\r\n    }\r\n}"},
 {"id":1627, "name":"renderTopUnits()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.renderTopUnits()", "ownerclassid":"162", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "sourcecode":"/**\r\n * Draws cells of the top line in the time line\r\n */\r\nprivate void renderTopUnits() {\r\n    int curX = 0;\r\n    Date curDate = getChartModel().getStartDate();\r\n    final int topUnitHeight = getChartModel().getChartUIConfiguration().getSpanningHeaderHeight();\r\n    for (int i = 0; i < (getChartModel().getTopUnitOffsets().size()); i++) {\r\n        ChartModelBase.Offset nextOffset = ((ChartModelBase.Offset) (getChartModel().getTopUnitOffsets().get(i)));\r\n        TimeUnitText timeUnitText = nextOffset.getOffsetUnit().format(curDate);\r\n        String unitText = timeUnitText.getText((-1));\r\n        int posY = topUnitHeight - 5;\r\n        GraphicPrimitiveContainer.Text text = myPrimitiveContainer.createText((curX + 2), posY, unitText);\r\n        myPrimitiveContainer.bind(text, timeUnitText);\r\n        text.setMaxLength(((nextOffset.getOffsetPixels()) - curX));\r\n        text.setFont(getChartModel().getChartUIConfiguration().getSpanningHeaderFont());\r\n        myPrimitiveContainer.createLine(curX, 0, curX, topUnitHeight);\r\n        curX = nextOffset.getOffsetPixels();\r\n        curDate = nextOffset.getOffsetEnd();\r\n    }\r\n}"},
 {"id":1628, "name":"calculateLength(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.calculateLength(int,int,int)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"float calculateLength(int fromX, int toX, int y);"},
 {"id":1629, "name":"findTaskWithCoordinates(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.findTaskWithCoordinates(int,int)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"Task findTaskWithCoordinates(int x, int y);"},
 {"id":1630, "name":"getBoundingRectangle(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.getBoundingRectangle(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"Rectangle getBoundingRectangle(Task task);"},
 {"id":1631, "name":"getChartHeader()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.getChartHeader()", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"ChartHeader getChartHeader();"},
 {"id":1632, "name":"getEndDate()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.getEndDate()", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"/**\r\n * This method calculates the end date of this chart. It is a function of\r\n * (start date, bounds, bottom time unit, top time unit, bottom unit width)\r\n * so it expects that all these parameters are set correctly.\r\n */\r\nDate getEndDate();"},
 {"id":1633, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.getStartDate()", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"Date getStartDate();"},
 {"id":1634, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.paint(java.awt.Graphics)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void paint(Graphics g);"},
 {"id":1635, "name":"setBottomTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setBottomTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setBottomTimeUnit(TimeUnit bottomTimeUnit);"},
 {"id":1636, "name":"setBottomUnitWidth(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setBottomUnitWidth(int)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setBottomUnitWidth(int pixelsWidth);"},
 {"id":1637, "name":"setBounds(java.awt.Dimension)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setBounds(java.awt.Dimension)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setBounds(Dimension bounds);"},
 {"id":1638, "name":"setRowHeight(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setRowHeight(int)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setRowHeight(int rowHeight);"},
 {"id":1639, "name":"setStartDate(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setStartDate(java.util.Date)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setStartDate(Date startDate);"},
 {"id":1640, "name":"setTaskContainment(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setTaskContainment(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setTaskContainment(TaskContainmentHierarchyFacade taskContainment);"},
 {"id":1641, "name":"setTopTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setTopTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setTopTimeUnit(TimeUnit topTimeUnit);"},
 {"id":1642, "name":"setVerticalOffset(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setVerticalOffset(int)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setVerticalOffset(int i);"},
 {"id":1643, "name":"setVisibleTasks(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModel.setVisibleTasks(java.util.List)", "ownerclassid":"163", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModel", "sourcecode":"void setVisibleTasks(/* <Task> */\r\nList visibleTasks);"},
 {"id":1644, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public ChartModelBase(TaskManager taskManager, TimeUnitStack timeUnitStack, UIConfiguration projectConfig) {\r\n    myTaskManager = taskManager;\r\n    myProjectConfig = projectConfig;\r\n    myChartUIConfiguration = new ChartUIConfiguration(projectConfig);\r\n    myPainter = new StyledPainterImpl(myChartUIConfiguration);\r\n    myTimeUnitStack = timeUnitStack;\r\n    myChartHeader = new ChartHeaderImpl(this, projectConfig);\r\n    myChartGrid = new ChartGridImpl(this, projectConfig);\r\n    // myBottomUnitLineRenderer = new BottomUnitLineRendererImpl(this);\r\n    myBackgroundRenderer = new BackgroundRendererImpl(this);\r\n    myTimeUnitVisitors.add(myChartGrid);\r\n    // myTimeUnitVisitors.add(myBottomUnitLineRenderer);\r\n    myCachingOffsetCalculator = new CachingOffsetCalculatorImpl(myTimeUnitStack);\r\n}"},
 {"id":1645, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int,float)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int,float)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"1( $anonymous0,  $anonymous1,  $anonymous2,  $anonymous3,  $anonymous4,  $anonymous5,  $anonymous6,  $anonymous7) {\r\n}"},
 {"id":1646, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.-init-(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public Range(ChartModelBase.Offset startOffset, ChartModelBase.Offset endOffset) {\r\n    start = startOffset;\r\n    end = endOffset;\r\n}"},
 {"id":1647, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.-init-()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"AlternanceFactory() {\r\n}"},
 {"id":1648, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date,int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.-init-(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date,int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"Offset(TimeUnit offsetUnit, Date offsetAnchor, Date offsetEnd, int offsetPixels, GPCalendar.DayType dayType) {\r\n    myOffsetAnchor = offsetAnchor;\r\n    myOffsetEnd = offsetEnd;\r\n    myOffsetPixels = offsetPixels;\r\n    myOffsetUnit = offsetUnit;\r\n    myDayType = dayType;\r\n}"},
 {"id":1649, "name":"addOptionChangeListener(net.sourceforge.ganttproject.gui.options.model.GPOptionChangeListener)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.addOptionChangeListener(net.sourceforge.ganttproject.gui.options.model.GPOptionChangeListener)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void addOptionChangeListener(GPOptionChangeListener listener) {\r\n    myOptionListeners.add(listener);\r\n}"},
 {"id":1650, "name":"calculateLength(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.calculateLength(int,int,int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public float calculateLength(int fromX, int toX, int y) {\r\n    // return toX - fromX;\r\n    int curX = fromX;\r\n    int totalPixels = toX - fromX;\r\n    int holidayPixels = 0;\r\n    while (curX < toX) {\r\n        GraphicPrimitiveContainer.GraphicPrimitive nextPrimitive = getChartGrid().getPrimitiveContainer().getPrimitive(curX, (y - (getChartUIConfiguration().getHeaderHeight())));\r\n        if ((nextPrimitive instanceof GraphicPrimitiveContainer.Rectangle) && ((GPCalendar.DayType.WEEKEND) == (nextPrimitive.getModelObject()))) {\r\n            GraphicPrimitiveContainer.Rectangle nextRect = ((GraphicPrimitiveContainer.Rectangle) (nextPrimitive));\r\n            holidayPixels += (nextRect.getRightX()) - curX;\r\n            if ((nextRect.myLeftX) < curX) {\r\n                holidayPixels -= curX - (nextRect.myLeftX);\r\n            }\r\n            if ((nextRect.myLeftX) < fromX) {\r\n                holidayPixels -= fromX - (nextRect.myLeftX);\r\n            }\r\n            if ((nextRect.getRightX()) > toX) {\r\n                holidayPixels -= (nextRect.getRightX()) - toX;\r\n            }\r\n            curX = (nextRect.getRightX()) + 1;\r\n        } else {\r\n            curX += getBottomUnitWidth();\r\n        }\r\n    } \r\n    float workPixels = ((float) (totalPixels)) - ((float) (holidayPixels));\r\n    return workPixels / ((float) (getBottomUnitWidth()));\r\n}"},
 {"id":1651, "name":"calculateLengthNoWeekends(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.calculateLengthNoWeekends(int,int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public float calculateLengthNoWeekends(int fromX, int toX) {\r\n    int totalPixels = toX - fromX;\r\n    return totalPixels / ((float) (getBottomUnitWidth()));\r\n}"},
 {"id":1652, "name":"calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    return myCachingOffsetCalculator.calculateOffsets(timeFrame, frameBottomUnit, bottomUnitStartDate, offsetUnit, frameBottomUnitWidth);\r\n}"},
 {"id":1653, "name":"calculateTimeFrames(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.calculateTimeFrames(java.util.Date)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"private TimeFrame[] calculateTimeFrames(Date exactDate) {\r\n    ArrayList result = new ArrayList();\r\n    int totalFramesWidth = 0;\r\n    Date currentDate = myStartDate;\r\n    do {\r\n        TimeFrame currentFrame = myTimeUnitStack.createTimeFrame(currentDate, getTopUnit(currentDate), myBottomUnit);\r\n        if ((exactDate != null) && (currentFrame.getStartDate().before(exactDate))) {\r\n            currentFrame.trimLeft(exactDate);\r\n        }\r\n        if (currentFrame.getStartDate().after(currentFrame.getFinishDate())) {\r\n            throw new IllegalStateException((((\"Frame is invalid:\n\" + currentFrame) + \"\n date=\") + exactDate));\r\n        }\r\n        result.add(currentFrame);\r\n        int frameWidth = myFrameWidthFunction.getTimeFrameWidth(currentFrame);\r\n        totalFramesWidth += frameWidth;\r\n        currentDate = currentFrame.getFinishDate();\r\n    } while (totalFramesWidth <= (getBounds().getWidth()) );\r\n    // \r\n    return ((TimeFrame[]) (result.toArray(new TimeFrame[0])));\r\n}"},
 {"id":1654, "name":"createCopy()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.createCopy()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public ChartModelBase createCopy() {\r\n    return new ChartModelBase(getTaskManager(), getTimeUnitStack(), myProjectConfig);\r\n}"},
 {"id":1655, "name":"enableRenderers1()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.enableRenderers1()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected void enableRenderers1() {\r\n    myChartHeader.setEnabled(false);\r\n    // myBottomUnitLineRenderer.setEnabled(true);\r\n    myChartGrid.setEnabled(true);\r\n}"},
 {"id":1656, "name":"enableRenderers2()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.enableRenderers2()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected void enableRenderers2() {\r\n    myChartHeader.setEnabled(true);\r\n    // myBottomUnitLineRenderer.setEnabled(false);\r\n    myChartGrid.setEnabled(false);\r\n}"},
 {"id":1657, "name":"fireAfterProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.fireAfterProcessingTimeFrames()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"void fireAfterProcessingTimeFrames() {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.afterProcessingTimeFrames();\r\n    }\r\n}"},
 {"id":1658, "name":"fireBeforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.fireBeforeProcessingTimeFrames()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"void fireBeforeProcessingTimeFrames() {\r\n    myBackgroundRenderer.beforeProcessingTimeFrames();\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.beforeProcessingTimeFrames();\r\n    }\r\n}"},
 {"id":1659, "name":"fireFrameFinished(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.fireFrameFinished(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"void fireFrameFinished(TimeFrame timeFrame) {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.endTimeFrame(timeFrame);\r\n    }\r\n}"},
 {"id":1660, "name":"fireFrameStarted(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.fireFrameStarted(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"void fireFrameStarted(TimeFrame timeFrame) {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.startTimeFrame(timeFrame);\r\n    }\r\n}"},
 {"id":1661, "name":"fireOptionsChanged()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.fireOptionsChanged()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected void fireOptionsChanged() {\r\n    for (int i = 0; i < (myOptionListeners.size()); i++) {\r\n        GPOptionChangeListener next = ((GPOptionChangeListener) (myOptionListeners.get(i)));\r\n        next.optionsChanged();\r\n    }\r\n}"},
 {"id":1662, "name":"fireUnitLineFinished(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.fireUnitLineFinished(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"void fireUnitLineFinished(TimeUnit timeUnit) {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.endUnitLine(timeUnit);\r\n    }\r\n}"},
 {"id":1663, "name":"fireUnitLineStarted(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.fireUnitLineStarted(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"void fireUnitLineStarted(TimeUnit timeUnit) {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.startUnitLine(timeUnit);\r\n    }\r\n}"},
 {"id":1664, "name":"getBottomUnit()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getBottomUnit()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected TimeUnit getBottomUnit() {\r\n    return myBottomUnit;\r\n}"},
 {"id":1665, "name":"getBottomUnitOffsets()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getBottomUnitOffsets()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"List getBottomUnitOffsets() {\r\n    return myBottomUnitOffsets;\r\n}"},
 {"id":1666, "name":"getBottomUnitWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getBottomUnitWidth()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected int getBottomUnitWidth() {\r\n    return myAtomUnitPixels;\r\n}"},
 {"id":1667, "name":"getBottomUnitWidth(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getBottomUnitWidth(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"int getBottomUnitWidth(TimeFrame nextFrame) {\r\n    int frameWidth = myFrameWidthFunction.getTimeFrameWidth(nextFrame);\r\n    int bottomUnitsCount = nextFrame.getUnitCount(nextFrame.getBottomUnit());\r\n    // System.err.println(\"ChartModelImpl: getBottomUnitWidth:\r\n    // nextFrame=\"+nextFrame+\" width=\"+frameWidth+\"\r\n    // bottomUnitsCount=\"+bottomUnitsCount);\r\n    return frameWidth / bottomUnitsCount;\r\n}"},
 {"id":1668, "name":"getBounds()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getBounds()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected Dimension getBounds() {\r\n    return myBounds;\r\n}"},
 {"id":1669, "name":"getChartGrid()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getChartGrid()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected ChartGridImpl getChartGrid() {\r\n    return myChartGrid;\r\n}"},
 {"id":1670, "name":"getChartHeader()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getChartHeader()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public ChartHeader getChartHeader() {\r\n    return myChartHeader;\r\n}"},
 {"id":1671, "name":"getChartOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getChartOptionGroups()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public GPOptionGroup[] getChartOptionGroups() {\r\n    return new GPOptionGroup[]{ myChartGrid.getOptions() };\r\n}"},
 {"id":1672, "name":"getChartUIConfiguration()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getChartUIConfiguration()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public ChartUIConfiguration getChartUIConfiguration() {\r\n    return myChartUIConfiguration;\r\n}"},
 {"id":1673, "name":"getDayType(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getDayType(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public GPCalendar.DayType getDayType(TimeFrame timeFrame, TimeUnit timeUnit, int unitIndex) {\r\n    Date startDate = timeFrame.getUnitStart(timeUnit, unitIndex);\r\n    Date endDate = timeFrame.getUnitFinish(timeUnit, unitIndex);\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(startDate);\r\n    int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n    c.setTime(endDate);\r\n    int endDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n    // return startDayOfWeek==Calendar.SATURDAY ||\r\n    // startDayOfWeek==Calendar.SUNDAY;\r\n    // return getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n    return getTaskManager().getCalendar().getDayTypeDate(startDate);\r\n}"},
 {"id":1674, "name":"getDayTypeAlternance(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getDayTypeAlternance(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected DayTypeAlternance[] getDayTypeAlternance(TimeFrame timeFrame, TimeUnit timeUnit, int unitIndex) {\r\n    class AlternanceFactory {\r\n        private Calendar c = CalendarFactory.newCalendar();\r\n\r\n        DayTypeAlternance createAlternance(TimeUnit timeUnit, Date startDate, Date endDate) {\r\n            c.setTime(startDate);\r\n            int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n            c.setTime(endDate);\r\n            int endDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n            TaskLength duration = myTaskManager.createLength(timeUnit, startDate, endDate);\r\n            GPCalendar.DayType dayType = getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n            dayType = getTaskManager().getCalendar().getDayTypeDate(startDate);\r\n            return new DayTypeAlternance(dayType, duration, endDate);\r\n        }\r\n\r\n        void createAlternance(TimeUnit timeUnit, TimeFrame timeFrame, List output) {\r\n            GPCalendar.DayType startType = null;\r\n            Date startDate = null;\r\n            int unitCount = timeFrame.getUnitCount(timeUnit);\r\n            for (int i = 0; i < unitCount; i++) {\r\n                Date start = timeFrame.getUnitStart(timeUnit, i);\r\n                c.setTime(start);\r\n                int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n                GPCalendar.DayType dayType = getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n                if (startType == null) {\r\n                    startType = dayType;\r\n                    startDate = start;\r\n                }\r\n                if (startType != dayType) {\r\n                    Date end = timeFrame.getUnitFinish(timeUnit, (i - 1));\r\n                    TaskLength duration = myTaskManager.createLength(timeUnit, startDate, end);\r\n                    output.add(new DayTypeAlternance(startType, duration, end));\r\n                    startType = dayType;\r\n                    startDate = start;\r\n                }\r\n            }\r\n            Date end = timeFrame.getUnitFinish(timeUnit, (unitCount - 1));\r\n            TaskLength duration = myTaskManager.createLength(timeUnit, startDate, end);\r\n            output.add(new DayTypeAlternance(startType, duration, end));\r\n        }\r\n    }\r\n    AlternanceFactory f = new AlternanceFactory();\r\n    DayTypeAlternance[] result;\r\n    Date startDate = timeFrame.getUnitStart(timeUnit, unitIndex);\r\n    Date endDate = timeFrame.getUnitFinish(timeUnit, unitIndex);\r\n    if (timeUnit.equals(myTimeUnitStack.getDefaultTimeUnit())) {\r\n        result = new DayTypeAlternance[]{ f.createAlternance(timeUnit, startDate, endDate) };\r\n    } else\r\n        if (timeUnit.isConstructedFrom(myTimeUnitStack.getDefaultTimeUnit())) {\r\n            List buf = new ArrayList();\r\n            TimeUnit defaultUnit = myTimeUnitStack.getDefaultTimeUnit();\r\n            TimeFrame innerFrame = myTimeUnitStack.createTimeFrame(startDate, timeUnit, defaultUnit);\r\n            // System.err.println(\"[ChartModelImpl] topUnit=\"+timeUnit+\"\r\n            // bottom=\"+defaultUnit+\"\r\n            // count=\"+innerFrame.getUnitCount(defaultUnit));\r\n            f.createAlternance(defaultUnit, innerFrame, buf);\r\n            result = ((DayTypeAlternance[]) (buf.toArray(new DayTypeAlternance[buf.size()])));\r\n        } else {\r\n            throw new RuntimeException(\"We should not be here\");\r\n        }\r\n\r\n    // System.err.println(\"from \"+startDate+\" to\r\n    // \"+endDate+\"\n\"+java.util.Arrays.asList(result));\r\n    return result;\r\n}"},
 {"id":1675, "name":"getDefaultUnitOffsets()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getDefaultUnitOffsets()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"List getDefaultUnitOffsets() {\r\n    if (myDefaultUnitOffsets.isEmpty()) {\r\n        ArrayList tmpOffsets = new ArrayList();\r\n        RegularFrameOffsetBuilder offsetBuilder = new RegularFrameOffsetBuilder(getTimeUnitStack(), myTaskManager.getCalendar(), getBottomUnit(), getTimeUnitStack().getDefaultTimeUnit(), myStartDate, getBottomUnitWidth(), ((int) (getBounds().getWidth())), RegularFrameOffsetBuilder.WEEKEND_UNIT_WIDTH_DECREASE_FACTOR) {\r\n            protected float getOffsetStep(TimeFrame timeFrame) {\r\n                int offsetUnitCount = timeFrame.getUnitCount(getTimeUnitStack().getDefaultTimeUnit());\r\n                return 1.0F / offsetUnitCount;\r\n            }\r\n        };\r\n        offsetBuilder.constructOffsets(tmpOffsets, myDefaultUnitOffsets);\r\n    }\r\n    return myDefaultUnitOffsets;\r\n}"},
 {"id":1676, "name":"getDefaultUnitOffsetsInRange(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getDefaultUnitOffsetsInRange(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"List getDefaultUnitOffsetsInRange(/* <Offset> */\r\nChartModelBase.Offset startOffset, ChartModelBase.Offset endOffset) {\r\n    ChartModelBase.Range range = new ChartModelBase.Range(startOffset, endOffset);\r\n    /* <Offset> */\r\n    List result = ((List) (myRange2DefaultUnitOffsets.get(range)));\r\n    if (result != null) {\r\n        return result;\r\n    }\r\n    /* <Offset> */\r\n    ArrayList tmpOffsets = /* <Offset> */\r\n    new ArrayList();\r\n    result = /* <Offset> */\r\n    new ArrayList();\r\n    int initialEnd = (startOffset == null) ? 0 : startOffset.getOffsetPixels();\r\n    Date startDate = (startOffset == null) ? myStartDate : startOffset.getOffsetEnd();\r\n    RegularFrameOffsetBuilder offsetBuilder = new RegularFrameOffsetBuilder(getTimeUnitStack(), myTaskManager.getCalendar(), endOffset.getOffsetUnit(), getTimeUnitStack().getDefaultTimeUnit(), startDate, getBottomUnitWidth(), endOffset.getOffsetPixels(), 1.0F) {\r\n        protected float getOffsetStep(TimeFrame timeFrame) {\r\n            int offsetUnitCount = timeFrame.getUnitCount(getTimeUnitStack().getDefaultTimeUnit());\r\n            return 1.0F / offsetUnitCount;\r\n        }\r\n    };\r\n    offsetBuilder.constructOffsets(tmpOffsets, result, initialEnd);\r\n    myRange2DefaultUnitOffsets.put(range, result);\r\n    // System.err.println(\"For start offstet[\"+startOffset+\"] end offset[\"+endOffset+\"]\");\r\n    // for (Offset t : result) {\r\n    // System.err.println(t);\r\n    // }\r\n    return result;\r\n}"},
 {"id":1677, "name":"getEndDate()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getEndDate()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public Date getEndDate() {\r\n    TimeFrame[] timeFrames = getTimeFrames(null);\r\n    // for(int i = 0 ; i<timeFrames.length; i++)\r\n    // System.out.println(\"< \"+timeFrames[i].getStartDate() + \"\" +\r\n    // timeFrames[i].getFinishDate()+\" >\");\r\n    TimeFrame last = timeFrames[((timeFrames.length) - 1)];\r\n    return last.getFinishDate();\r\n}"},
 {"id":1678, "name":"getOptionEventDispatcher()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getOptionEventDispatcher()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public ChartModelBase.OptionEventDispatcher getOptionEventDispatcher() {\r\n    return myOptionEventDispatcher;\r\n}"},
 {"id":1679, "name":"getPainter()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getPainter()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected StyledPainterImpl getPainter() {\r\n    return myPainter;\r\n}"},
 {"id":1680, "name":"getProjectConfig()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getProjectConfig()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected UIConfiguration getProjectConfig() {\r\n    return myProjectConfig;\r\n}"},
 {"id":1681, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getStartDate()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public Date getStartDate() {\r\n    return myStartDate;\r\n}"},
 {"id":1682, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getTaskManager()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected TaskManager getTaskManager() {\r\n    return myTaskManager;\r\n}"},
 {"id":1683, "name":"getTimeFrames(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getTimeFrames(java.util.Date)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"TimeFrame[] getTimeFrames(Date exactDate) {\r\n    if ((myTimeFrames) == null) {\r\n        myTimeFrames = calculateTimeFrames(exactDate);\r\n    }\r\n    return myTimeFrames;\r\n}"},
 {"id":1684, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getTimeUnitStack()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected TimeUnitStack getTimeUnitStack() {\r\n    return myTimeUnitStack;\r\n}"},
 {"id":1685, "name":"getTopUnit()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getTopUnit()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected TimeUnit getTopUnit() {\r\n    return getTopUnit(myStartDate);\r\n}"},
 {"id":1686, "name":"getTopUnit(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getTopUnit(java.util.Date)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"private TimeUnit getTopUnit(Date startDate) {\r\n    TimeUnit result = myTopUnit;\r\n    if ((myTopUnit) instanceof TimeUnitFunctionOfDate) {\r\n        if (startDate == null) {\r\n            throw new RuntimeException(\"No date is set\");\r\n        } else {\r\n            result = ((TimeUnitFunctionOfDate) (myTopUnit)).createTimeUnit(startDate);\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1687, "name":"getTopUnitOffsets()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getTopUnitOffsets()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"List getTopUnitOffsets() {\r\n    return myTopUnitOffsets;\r\n}"},
 {"id":1688, "name":"getVerticalOffset()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getVerticalOffset()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected int getVerticalOffset() {\r\n    return myVerticalOffset;\r\n}"},
 {"id":1689, "name":"getVisibleLength()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.getVisibleLength()", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"/**\r\n *\r\n *\r\n * @return A length of the visible part of this chart area measured in the\r\nbottom line time units\r\n */\r\npublic TaskLength getVisibleLength() {\r\n    double pixelsLength = getBounds().getWidth();\r\n    float unitsLength = ((float) (pixelsLength / (getBottomUnitWidth())));\r\n    TaskLength result = getTaskManager().createLength(getBottomUnit(), unitsLength);\r\n    return result;\r\n}"},
 {"id":1690, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.paint(java.awt.Graphics)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void paint(Graphics g) {\r\n    int height = ((int) (getBounds().getHeight())) - (getChartUIConfiguration().getHeaderHeight());\r\n    myTopUnitOffsets.clear();\r\n    myBottomUnitOffsets.clear();\r\n    myDefaultUnitOffsets.clear();\r\n    if (getTopUnit().isConstructedFrom(getBottomUnit())) {\r\n        // It is the case when top unit can always be constructed from integer number of bottom units,\r\n        // and bounds of top unit and start/end bottom units are aligned\r\n        // e.g. week can be constructed from days\r\n        RegularFrameOffsetBuilder offsetBuilder = new RegularFrameOffsetBuilder(myTimeUnitStack, myTaskManager.getCalendar(), myTopUnit, getBottomUnit(), myStartDate, getBottomUnitWidth(), ((int) (getBounds().getWidth())), RegularFrameOffsetBuilder.WEEKEND_UNIT_WIDTH_DECREASE_FACTOR);\r\n        offsetBuilder.constructOffsets(myTopUnitOffsets, myBottomUnitOffsets);\r\n    } else {\r\n        // In this case top unit cant be constructed from integer number of bottom units\r\n        // and unit boundaries arent aligned. Thus, month and weeks are skewed units\r\n        SkewedFrameOffsetBuilder offsetBuilder = new SkewedFrameOffsetBuilder(myTimeUnitStack, myTaskManager.getCalendar(), myTopUnit, getBottomUnit(), myStartDate, getBottomUnitWidth(), ((int) (getBounds().getWidth())));\r\n        offsetBuilder.constructOffsets(myTopUnitOffsets, myBottomUnitOffsets);\r\n    }\r\n    myChartHeader.setHeight(height);\r\n    myChartHeader.render();\r\n    myChartGrid.setHeight(height);\r\n    myBackgroundRenderer.setHeight(height);\r\n    myPainter.setGraphics(g);\r\n    myBackgroundRenderer.getPrimitiveContainer().paint(getPainter(), g);\r\n    myChartHeader.getPrimitiveContainer().paint(getPainter(), g);\r\n}"},
 {"id":1691, "name":"paintMainArea(java.awt.Graphics,net.sourceforge.ganttproject.chart.Painter)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.paintMainArea(java.awt.Graphics,net.sourceforge.ganttproject.chart.Painter)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected void paintMainArea(Graphics mainArea, Painter p) {\r\n    myChartGrid.getPrimitiveContainer().paint(p, mainArea);\r\n}"},
 {"id":1692, "name":"paintRegularTimeFrames(java.awt.Graphics,net.sourceforge.ganttproject.time.TimeFrame[])", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.paintRegularTimeFrames(java.awt.Graphics,net.sourceforge.ganttproject.time.TimeFrame[])", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected void paintRegularTimeFrames(Graphics g, TimeFrame[] timeFrames) {\r\n    fireBeforeProcessingTimeFrames();\r\n    for (int i = 0; i < (timeFrames.length); i++) {\r\n        TimeFrame next = timeFrames[i];\r\n        fireFrameStarted(next);\r\n        TimeUnit topUnit = next.getTopUnit();\r\n        fireUnitLineStarted(topUnit);\r\n        fireUnitLineFinished(topUnit);\r\n        // \r\n        TimeUnit bottomUnit = myBottomUnit;// next.getBottomUnit();\r\n\r\n        fireUnitLineStarted(bottomUnit);\r\n        visitTimeUnits(next, bottomUnit);\r\n        fireUnitLineFinished(bottomUnit);\r\n        fireFrameFinished(next);\r\n    }\r\n    fireAfterProcessingTimeFrames();\r\n    // Painter p = new StyledPainterImpl(g, getChartUIConfiguration());\r\n    myChartHeader.getPrimitiveContainer().paint(myPainter, g);\r\n    // myBottomUnitLineRenderer.getPrimitiveContainer().paint(myPainter, g);\r\n    Graphics mainArea = g.create(0, getChartUIConfiguration().getHeaderHeight(), ((int) (getBounds().getWidth())), ((int) (getBounds().getHeight())));\r\n    myPainter.setGraphics(mainArea);\r\n    // p = new StyledPainterImpl(mainArea, getChartUIConfiguration());\r\n    myBackgroundRenderer.getPrimitiveContainer().paint(myPainter, g);\r\n    paintMainArea(mainArea, myPainter);\r\n    // Graphics resourcesArea = g.create((int)getBounds().getWidth()-20,\r\n    // getChartUIConfiguration().getHeaderHeight(), 20,\r\n    // (int)getBounds().getHeight());\r\n    // myResourcesRendererImpl.getPrimitiveContainer().paint(p,\r\n    // resourcesArea);\r\n    // myTaskProgressRendererImpl.getPrimitiveContainer().paint(p,\r\n    // mainArea);\r\n}"},
 {"id":1693, "name":"paintSkewedTimeFrames(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.paintSkewedTimeFrames(java.awt.Graphics)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"protected void paintSkewedTimeFrames(Graphics g) {\r\n    TimeUnit savedBottomUnit = myBottomUnit;\r\n    TimeUnit topUnit = getTopUnit();\r\n    setTopUnit(myBottomUnit);\r\n    myTimeFrames = null;\r\n    enableRenderers1();\r\n    TimeFrame[] timeFrames = getTimeFrames(null);\r\n    paintRegularTimeFrames(g, timeFrames);\r\n    Date exactStart = timeFrames[0].getStartDate();\r\n    // System.err.println(\"... done\");\r\n    // System.err.println(\"[ChartModelImpl] rendering skewed frames. Top\r\n    // unit=\"+myTopUnit+\" bottom unit=\"+myBottomUnit);\r\n    // System.err.println(\" rendering top line\");\r\n    myTimeFrames = null;\r\n    setTopUnit(topUnit);\r\n    myBottomUnit = topUnit;\r\n    enableRenderers2();\r\n    timeFrames = getTimeFrames(exactStart);\r\n    paintRegularTimeFrames(g, timeFrames);\r\n    myBottomUnit = savedBottomUnit;\r\n    // \r\n    // System.err.println(\" rendering bottom line\");\r\n}"},
 {"id":1694, "name":"setBottomTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setBottomTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void setBottomTimeUnit(TimeUnit bottomTimeUnit) {\r\n    myBottomUnit = bottomTimeUnit;\r\n    myTimeFrames = null;\r\n}"},
 {"id":1695, "name":"setBottomUnitWidth(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setBottomUnitWidth(int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void setBottomUnitWidth(int pixelsWidth) {\r\n    if ((myAtomUnitPixels) != pixelsWidth) {\r\n        myCachingOffsetCalculator.reset();\r\n    }\r\n    myAtomUnitPixels = pixelsWidth;\r\n}"},
 {"id":1696, "name":"setBounds(java.awt.Dimension)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setBounds(java.awt.Dimension)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void setBounds(Dimension bounds) {\r\n    myBounds = bounds;\r\n}"},
 {"id":1697, "name":"setHeaderHeight(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setHeaderHeight(int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void setHeaderHeight(int i) {\r\n    getChartUIConfiguration().setHeaderHeight(i);\r\n}"},
 {"id":1698, "name":"setRowHeight(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setRowHeight(int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void setRowHeight(int rowHeight) {\r\n    getChartUIConfiguration().setRowHeight(rowHeight);\r\n}"},
 {"id":1699, "name":"setStartDate(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setStartDate(java.util.Date)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void setStartDate(Date startDate) {\r\n    if (!(startDate.equals(myStartDate))) {\r\n        myStartDate = startDate;\r\n        myTimeFrames = null;\r\n    }\r\n    myRange2DefaultUnitOffsets.clear();\r\n}"},
 {"id":1700, "name":"setTopTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setTopTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void setTopTimeUnit(TimeUnit topTimeUnit) {\r\n    setTopUnit(topTimeUnit);\r\n    myTimeFrames = null;\r\n}"},
 {"id":1701, "name":"setTopUnit(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setTopUnit(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"private void setTopUnit(TimeUnit myTopUnit) {\r\n    this.myTopUnit = myTopUnit;\r\n}"},
 {"id":1702, "name":"setVerticalOffset(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.setVerticalOffset(int)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void setVerticalOffset(int offset) {\r\n    myVerticalOffset = offset;\r\n}"},
 {"id":1703, "name":"startDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.startDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void startDateChanged(ChartViewState.ViewStateEvent e) {\r\n    setStartDate(((Date) (e.getNewValue())));\r\n}"},
 {"id":1704, "name":"visitTimeUnits(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.visitTimeUnits(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"void visitTimeUnits(TimeFrame timeFrame, TimeUnit timeUnit) {\r\n    for (int j = 0; j < (timeFrame.getUnitCount(timeUnit)); j++) {\r\n        for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n            TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n            if (!(nextVisitor.isEnabled())) {\r\n                continue;\r\n            }\r\n            nextVisitor.nextTimeUnit(j);\r\n        }\r\n    }\r\n}"},
 {"id":1705, "name":"zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "ownerclassid":"170", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase", "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n}"},
 {"id":1706, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date,int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.-init-(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date,int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"Offset(TimeUnit offsetUnit, Date offsetAnchor, Date offsetEnd, int offsetPixels, GPCalendar.DayType dayType) {\r\n    myOffsetAnchor = offsetAnchor;\r\n    myOffsetEnd = offsetEnd;\r\n    myOffsetPixels = offsetPixels;\r\n    myOffsetUnit = offsetUnit;\r\n    myDayType = dayType;\r\n}"},
 {"id":1707, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.equals(java.lang.Object)", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"public boolean equals(Object that) {\r\n    if (false == (that instanceof ChartModelBase.Offset)) {\r\n        return false;\r\n    }\r\n    ChartModelBase.Offset thatOffset = ((ChartModelBase.Offset) (that));\r\n    return (((myOffsetPixels) == (thatOffset.myOffsetPixels)) && (myOffsetEnd.equals(thatOffset.myOffsetEnd))) && (myOffsetAnchor.equals(thatOffset.myOffsetAnchor));\r\n}"},
 {"id":1708, "name":"getDayType()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.getDayType()", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"public GPCalendar.DayType getDayType() {\r\n    return myDayType;\r\n}"},
 {"id":1709, "name":"getOffsetAnchor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.getOffsetAnchor()", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"// TaskLength getOffsetLength() {\r\n// return null;\r\n// }\r\nDate getOffsetAnchor() {\r\n    return myOffsetAnchor;\r\n}"},
 {"id":1710, "name":"getOffsetEnd()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.getOffsetEnd()", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"public Date getOffsetEnd() {\r\n    return myOffsetEnd;\r\n}"},
 {"id":1711, "name":"getOffsetPixels()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.getOffsetPixels()", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"public int getOffsetPixels() {\r\n    return myOffsetPixels;\r\n}"},
 {"id":1712, "name":"getOffsetUnit()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.getOffsetUnit()", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"TimeUnit getOffsetUnit() {\r\n    return myOffsetUnit;\r\n}"},
 {"id":1713, "name":"hashCode()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.hashCode()", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"public int hashCode() {\r\n    return myOffsetEnd.hashCode();\r\n}"},
 {"id":1714, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.toString()", "ownerclassid":"164", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "sourcecode":"public String toString() {\r\n    return ((\"end date: \" + (myOffsetEnd)) + \" end pixel: \") + (myOffsetPixels);\r\n}"},
 {"id":1715, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$OptionEventDispatcher.-init-()", "ownerclassid":"165", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$OptionEventDispatcher", "sourcecode":"OptionEventDispatcher() {\r\n}"},
 {"id":1716, "name":"optionsChanged()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$OptionEventDispatcher.optionsChanged()", "ownerclassid":"165", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$OptionEventDispatcher", "sourcecode":"void optionsChanged() {\r\n    fireOptionsChanged();\r\n}"},
 {"id":1717, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Range.-init-(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "ownerclassid":"166", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Range", "sourcecode":"public Range(ChartModelBase.Offset startOffset, ChartModelBase.Offset endOffset) {\r\n    start = startOffset;\r\n    end = endOffset;\r\n}"},
 {"id":1718, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Range.equals(java.lang.Object)", "ownerclassid":"166", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Range", "sourcecode":"public boolean equals(Object that) {\r\n    if (false == (that instanceof ChartModelBase.Range)) {\r\n        return false;\r\n    }\r\n    ChartModelBase.Range thatRange = ((ChartModelBase.Range) (that));\r\n    return ((this.start) == null ? (thatRange.start) == null : this.start.equals(thatRange.start)) && (thatRange.end.equals(this.end));\r\n}"},
 {"id":1719, "name":"hashCode()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$Range.hashCode()", "ownerclassid":"166", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$Range", "sourcecode":"public int hashCode() {\r\n    return (((this.start) == null ? 0 : 7 * (this.start.hashCode())) + (11 * (this.end.hashCode()))) / 13;\r\n}"},
 {"id":1720, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$RegularFramesWithFunction.-init-()", "ownerclassid":"167", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$RegularFramesWithFunction", "sourcecode":"RegularFramesWithFunction() {\r\n}"},
 {"id":1721, "name":"getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$RegularFramesWithFunction.getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"167", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$RegularFramesWithFunction", "sourcecode":"public int getTimeFrameWidth(TimeFrame timeFrame) {\r\n    return (timeFrame.getUnitCount(myBottomUnit)) * (myAtomUnitPixels);\r\n}"},
 {"id":1722, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$SkewedFramesWidthFunction.-init-()", "ownerclassid":"168", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$SkewedFramesWidthFunction", "sourcecode":"SkewedFramesWidthFunction() {\r\n}"},
 {"id":1723, "name":"getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$SkewedFramesWidthFunction.getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"168", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$SkewedFramesWidthFunction", "sourcecode":"public int getTimeFrameWidth(TimeFrame timeFrame) {\r\n    int defaultUnitsPerTopUnit = timeFrame.getUnitCount(myTimeUnitStack.getDefaultTimeUnit());\r\n    return ((int) (defaultUnitsPerTopUnit * (myWidthPerDefaultUnit)));\r\n}"},
 {"id":1724, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$SkewedFramesWidthFunction.initialize()", "ownerclassid":"168", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$SkewedFramesWidthFunction", "sourcecode":"void initialize() {\r\n    int defaultUnitsPerBottomUnit = myBottomUnit.getAtomCount(myTimeUnitStack.getDefaultTimeUnit());\r\n    myWidthPerDefaultUnit = ((float) (myAtomUnitPixels)) / defaultUnitsPerBottomUnit;\r\n}"},
 {"id":1725, "name":"getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelBase$TimeFrameWidthFunction.getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"169", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelBase$TimeFrameWidthFunction", "sourcecode":"int getTimeFrameWidth(TimeFrame timeFrame);"},
 {"id":1726, "name":"-init-(boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.-init-(boolean,boolean)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public TuningOptions(boolean renderProgress, boolean renderDependencies) {\r\n    this.renderProgress = renderProgress;\r\n    this.renderDependencies = renderDependencies;\r\n}"},
 {"id":1727, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public ChartModelImpl(TaskManager taskManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    this.taskManager = taskManager;\r\n    myTaskRendererImpl = new TaskRendererImpl(this);\r\n    myTaskGridRendererImpl = new TaskGridRendererImpl(this);\r\n    // myResourcesRendererImpl = new ResourcesRendererImpl(this);\r\n    // myTaskProgressRendererImpl = new TaskProgressRendererImpl(this);\r\n    myTimeUnitVisitors.add(myTaskGridRendererImpl);\r\n    myTimeUnitVisitors.add(myTaskRendererImpl);\r\n    class NewTaskColorOption extends DefaultColorOption implements GP1XOptionConverter {\r\n        private NewTaskColorOption() {\r\n            super(\"newTaskDefaultColor\");\r\n        }\r\n\r\n        public String getTagName() {\r\n            return \"colors\";\r\n        }\r\n\r\n        public String getAttributeName() {\r\n            return \"tasks\";\r\n        }\r\n\r\n        public void loadValue(String legacyValue) {\r\n            lock();\r\n            loadPersistentValue(legacyValue);\r\n            commit();\r\n        }\r\n\r\n        public void commit() {\r\n            super.commit();\r\n            projectConfig.setTaskColor(getValue());\r\n        }\r\n    }\r\n    myTaskDefaultColorOption = new NewTaskColorOption();\r\n    myDefaultColorOptions = new ChartOptionGroup(\"ganttChartDefaultColors\", new GPOption[]{ myTaskDefaultColorOption, projectConfig.getWeekendAlphaRenderingOption() }, getOptionEventDispatcher());\r\n    {\r\n        myTaskAheadOfScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskAheadOfScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setEarlierPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskAheadOfScheduleColor.lock();\r\n        myTaskAheadOfScheduleColor.setValue(new Color(50, 229, 50));\r\n        myTaskAheadOfScheduleColor.commit();\r\n        // \r\n        myTaskBehindScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskBehindScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setLaterPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskBehindScheduleColor.lock();\r\n        myTaskBehindScheduleColor.setValue(new Color(229, 50, 50));\r\n        myTaskBehindScheduleColor.commit();\r\n        // \r\n        myTaskOnScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskOnScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskOnScheduleColor.lock();\r\n        myTaskOnScheduleColor.setValue(Color.LIGHT_GRAY);\r\n        myTaskOnScheduleColor.commit();\r\n        // \r\n        myStateDiffOptions = new ChartOptionGroup(\"ganttChartStateDiffColors\", new GPOption[]{ myTaskOnScheduleColor, myTaskAheadOfScheduleColor, myTaskBehindScheduleColor }, getOptionEventDispatcher());\r\n    }\r\n}"},
 {"id":1728, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.-init-()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"private NewTaskColorOption() {\r\n    super(\"newTaskDefaultColor\");\r\n}"},
 {"id":1729, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.-init-(java.lang.String)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":1730, "name":"createCopy()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.createCopy()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public ChartModelBase createCopy() {\r\n    return new ChartModelImpl(getTaskManager(), getTimeUnitStack(), getProjectConfig());\r\n}"},
 {"id":1731, "name":"enableRenderers1()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.enableRenderers1()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"protected void enableRenderers1() {\r\n    super.enableRenderers1();\r\n    myTaskRendererImpl.setEnabled(true);\r\n}"},
 {"id":1732, "name":"enableRenderers2()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.enableRenderers2()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"protected void enableRenderers2() {\r\n    super.enableRenderers2();\r\n    myTaskRendererImpl.setEnabled(false);\r\n}"},
 {"id":1733, "name":"findTaskBoundaryItem(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.findTaskBoundaryItem(int,int)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"private ChartItem findTaskBoundaryItem(int x, int y) {\r\n    ChartItem result = null;\r\n    GraphicPrimitiveContainer.GraphicPrimitive primitive = myTaskRendererImpl.getPrimitiveContainer().getPrimitive(x, (y - (getChartUIConfiguration().getHeaderHeight())));\r\n    if (primitive == null) {\r\n        primitive = myTaskRendererImpl.getPrimitiveContainer().getLayer(2).getPrimitive(x, (y - (getChartUIConfiguration().getHeaderHeight())));\r\n    }\r\n    if (primitive instanceof GraphicPrimitiveContainer.Rectangle) {\r\n        GraphicPrimitiveContainer.Rectangle rect = ((GraphicPrimitiveContainer.Rectangle) (primitive));\r\n        TaskActivity activity = ((TaskActivity) (primitive.getModelObject()));\r\n        if (activity != null) {\r\n            if (((activity.isFirst()) && (((rect.myLeftX) - 2) <= x)) && (((rect.myLeftX) + 2) >= x)) {\r\n                result = new TaskBoundaryChartItem(activity.getTask(), true);\r\n            }\r\n            if ((((result == null) && (activity.isLast())) && ((((rect.myLeftX) + (rect.myWidth)) - 2) <= x)) && ((((rect.myLeftX) + (rect.myWidth)) + 2) >= x)) {\r\n                result = new TaskBoundaryChartItem(activity.getTask(), false);\r\n            }\r\n            if (result == null) {\r\n                result = new TaskRegularAreaChartItem(activity.getTask());\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1734, "name":"findTaskProgressItem(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.findTaskProgressItem(int,int)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"private ChartItem findTaskProgressItem(int x, int y) {\r\n    ChartItem result = null;\r\n    GraphicPrimitiveContainer.GraphicPrimitive primitive = myTaskRendererImpl.getPrimitiveContainer().getLayer(1).getPrimitive(x, 4, (y - (getChartUIConfiguration().getHeaderHeight())), 0);\r\n    if (primitive instanceof GraphicPrimitiveContainer.Rectangle) {\r\n        GraphicPrimitiveContainer.Rectangle rect = ((GraphicPrimitiveContainer.Rectangle) (primitive));\r\n        if (((\"task.progress.end\".equals(primitive.getStyle())) && ((rect.getRightX()) >= (x - 4))) && ((rect.getRightX()) <= (x + 4))) {\r\n            result = new TaskProgressChartItem(x, getBottomUnitWidth(), getBottomUnit(), ((Task) (primitive.getModelObject())));\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1735, "name":"findTaskWithCoordinates(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.findTaskWithCoordinates(int,int)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public Task findTaskWithCoordinates(int x, int y) {\r\n    y = y + (getVerticalOffset());\r\n    GraphicPrimitiveContainer.GraphicPrimitive primitive = myTaskRendererImpl.getPrimitiveContainer().getPrimitive(x, (y - (getChartUIConfiguration().getHeaderHeight())));\r\n    if (primitive instanceof GraphicPrimitiveContainer.Rectangle) {\r\n        TaskActivity activity = ((TaskActivity) (primitive.getModelObject()));\r\n        return activity == null ? null : activity.getTask();\r\n    }\r\n    return null;\r\n}"},
 {"id":1736, "name":"getBoundingRectangle(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.getBoundingRectangle(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public Rectangle getBoundingRectangle(Task task) {\r\n    Rectangle result = null;\r\n    TaskActivity[] activities = task.getActivities();\r\n    for (int i = 0; i < (activities.length); i++) {\r\n        GraphicPrimitiveContainer.Rectangle nextRectangle = ((GraphicPrimitiveContainer.Rectangle) (myTaskRendererImpl.getPrimitive(activities[i])));\r\n        if (nextRectangle != null) {\r\n            Rectangle nextAwtRectangle = new Rectangle(nextRectangle.myLeftX, nextRectangle.myTopY, nextRectangle.myWidth, nextRectangle.myHeight);\r\n            if (result == null) {\r\n                result = nextAwtRectangle;\r\n            } else {\r\n                result = result.union(nextAwtRectangle);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1737, "name":"getChartItemWithCoordinates(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.getChartItemWithCoordinates(int,int)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public ChartItem getChartItemWithCoordinates(int x, int y) {\r\n    y = y + (getVerticalOffset());\r\n    ChartItem result = findTaskProgressItem(x, y);\r\n    if (result == null) {\r\n        result = findTaskBoundaryItem(x, y);\r\n    }\r\n    return result;\r\n}"},
 {"id":1738, "name":"getChartOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.getChartOptionGroups()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public GPOptionGroup[] getChartOptionGroups() {\r\n    GPOptionGroup[] superGroups = super.getChartOptionGroups();\r\n    GPOptionGroup[] rendererGroups = myTaskRendererImpl.getOptionGroups();\r\n    List result = new ArrayList();\r\n    result.addAll(Arrays.asList(superGroups));\r\n    result.addAll(Arrays.asList(rendererGroups));\r\n    result.add(myDefaultColorOptions);\r\n    result.add(myStateDiffOptions);\r\n    return ((GPOptionGroup[]) (result.toArray(new GPOptionGroup[result.size()])));\r\n}"},
 {"id":1739, "name":"getRowHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.getRowHeight()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public int getRowHeight() {\r\n    return rowHeight;\r\n}"},
 {"id":1740, "name":"getTaskActivityRectangles(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.getTaskActivityRectangles(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"GraphicPrimitiveContainer.Rectangle[] getTaskActivityRectangles(Task task) {\r\n    List result = new ArrayList();\r\n    TaskActivity[] activities = task.getActivities();\r\n    for (int i = 0; i < (activities.length); i++) {\r\n        GraphicPrimitiveContainer.Rectangle nextRectangle = ((GraphicPrimitiveContainer.Rectangle) (myTaskRendererImpl.getPrimitive(activities[i])));\r\n        if (nextRectangle != null) {\r\n            result.add(nextRectangle);\r\n        }\r\n    }\r\n    return ((GraphicPrimitiveContainer.Rectangle[]) (result.toArray(new GraphicPrimitiveContainer.Rectangle[0])));\r\n}"},
 {"id":1741, "name":"getTaskContainment()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.getTaskContainment()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"TaskContainmentHierarchyFacade getTaskContainment() {\r\n    return myTaskContainment;\r\n}"},
 {"id":1742, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.getTaskManager()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public TaskManager getTaskManager() {\r\n    return taskManager;\r\n}"},
 {"id":1743, "name":"getVisibleTasks()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.getVisibleTasks()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"/* <Task> */\r\nList getVisibleTasks() {\r\n    return myVisibleTasks;\r\n}"},
 {"id":1744, "name":"isExplicitlyHidden(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.isExplicitlyHidden(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public boolean isExplicitlyHidden(Task task) {\r\n    return (myHiddenTasks) == null ? false : myHiddenTasks.contains(task);\r\n}"},
 {"id":1745, "name":"isOnlyDown()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.isOnlyDown()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public boolean isOnlyDown() {\r\n    return isOnlyDown;\r\n}"},
 {"id":1746, "name":"isOnlyUp()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.isOnlyUp()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public boolean isOnlyUp() {\r\n    return isOnlyUp;\r\n}"},
 {"id":1747, "name":"isPrevious()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.isPrevious()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public boolean isPrevious() {\r\n    return isPreviousState;\r\n}"},
 {"id":1748, "name":"isSelected(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.isSelected(int)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public boolean isSelected(int index) {\r\n    return myTaskRendererImpl.isVisible(index);\r\n}"},
 {"id":1749, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.paint(java.awt.Graphics)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public void paint(Graphics g) {\r\n    super.paint(g);\r\n    if (getTopUnit().isConstructedFrom(myBottomUnit)) {\r\n        myFrameWidthFunction = myRegularFrameWidthFunction;\r\n        for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n            ((TimeUnitVisitor) (myTimeUnitVisitors.get(i))).setEnabled(true);\r\n        }\r\n        paintRegularTimeFrames(g, getTimeFrames(null));\r\n    } else {\r\n        myFrameWidthFunction = mySkewedFrameWidthFunction;\r\n        mySkewedFrameWidthFunction.initialize();\r\n        paintSkewedTimeFrames(g);\r\n    }\r\n}"},
 {"id":1750, "name":"paintMainArea(java.awt.Graphics,net.sourceforge.ganttproject.chart.Painter)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.paintMainArea(java.awt.Graphics,net.sourceforge.ganttproject.chart.Painter)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"protected void paintMainArea(Graphics mainArea, Painter p) {\r\n    super.paintMainArea(mainArea, p);\r\n    mainArea.translate(0, (-(getVerticalOffset())));\r\n    myTaskRendererImpl.getPrimitiveContainer().paint(p, mainArea);\r\n    myTaskGridRendererImpl.getPrimitiveContainer().paint(p, mainArea);\r\n    myTaskRendererImpl.getPrimitiveContainer().getLayer(1).paint(p, mainArea);\r\n    myTaskRendererImpl.getPrimitiveContainer().getLayer(2).paint(p, mainArea);\r\n    // \r\n    // myTaskRendererImpl.getPrimitiveContainer().paint(p, mainArea);\r\n    // myTaskRendererImpl.getPrimitiveContainer().getLayer(1).paint(p,\r\n    // mainArea);\r\n    // super.paintMainArea(mainArea, p);\r\n    // myTaskRendererImpl.getPrimitiveContainer().getLayer(2).paint(p,\r\n    // mainArea);\r\n    // myTaskGridRendererImpl.getPrimitiveContainer().paint(p, mainArea);\r\n}"},
 {"id":1751, "name":"setExplicitlyHiddenTasks(java.util.Set)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.setExplicitlyHiddenTasks(java.util.Set)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public void setExplicitlyHiddenTasks(Set hiddenTasks) {\r\n    myHiddenTasks = hiddenTasks;\r\n}"},
 {"id":1752, "name":"setPreviousStateTasks(java.util.ArrayList)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.setPreviousStateTasks(java.util.ArrayList)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public int setPreviousStateTasks(ArrayList tasks) {\r\n    if (tasks == null)\r\n        isPreviousState = false;\r\n    else\r\n        isPreviousState = true;\r\n\r\n    myTaskRendererImpl.setPreviousStateTasks(tasks);\r\n    return setRowHeight();\r\n}"},
 {"id":1753, "name":"setRowHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.setRowHeight()", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public int setRowHeight() {\r\n    boolean textUP = false;\r\n    boolean textDOWN = false;\r\n    isOnlyDown = false;\r\n    isOnlyUp = false;\r\n    // GPOption[] options = myTaskRendererImpl.getOptionGroups()[0]\r\n    // .getOptions();// HACK: we assume there is at least one option\r\n    // group which is label options group\r\n    // for (int i = 1; i < options.length; i++) {\r\n    // EnumerationOption nextOption = (EnumerationOption) options[i];\r\n    // if ((LabelPositionOptionImpl.UP.equals(nextOption.getValue()))) {\r\n    // textUP = true;\r\n    // }\r\n    // if ((LabelPositionOptionImpl.DOWN.equals(nextOption.getValue()))) {\r\n    // textDOWN = true;\r\n    // }\r\n    // }\r\n    textUP = myTaskRendererImpl.isTextUp();\r\n    textDOWN = myTaskRendererImpl.isTextDown();\r\n    if (textUP && textDOWN) {\r\n        rowHeight = 40;\r\n    } else\r\n        if (textUP) {\r\n            rowHeight = 30;\r\n            isOnlyUp = true;\r\n        } else\r\n            if (textDOWN) {\r\n                rowHeight = 30;\r\n                isOnlyDown = true;\r\n            } else {\r\n                rowHeight = 20;\r\n            }\r\n\r\n\r\n    if (isPreviousState)\r\n        rowHeight = (rowHeight) + 8;\r\n\r\n    return rowHeight;\r\n}"},
 {"id":1754, "name":"setTaskContainment(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.setTaskContainment(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.chart.ChartModel#setTaskContainment(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)\n */\r\npublic void setTaskContainment(TaskContainmentHierarchyFacade taskContainment) {\r\n    myTaskContainment = taskContainment;\r\n}"},
 {"id":1755, "name":"setTuningOptions(net.sourceforge.ganttproject.chart.ChartModelImpl$TuningOptions)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.setTuningOptions(net.sourceforge.ganttproject.chart.ChartModelImpl$TuningOptions)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public void setTuningOptions(ChartModelImpl.TuningOptions tuningOptions) {\r\n    myTaskRendererImpl.setProgressRenderingEnabled(tuningOptions.renderProgress);\r\n    myTaskRendererImpl.setDependenciesRenderingEnabled(tuningOptions.renderDependencies);\r\n}"},
 {"id":1756, "name":"setVisibleTasks(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl.setVisibleTasks(java.util.List)", "ownerclassid":"172", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "sourcecode":"public void setVisibleTasks(/* <Task> */\r\nList visibleTasks) {\r\n    myVisibleTasks = visibleTasks;\r\n}"},
 {"id":1757, "name":"-init-(boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelImpl$TuningOptions.-init-(boolean,boolean)", "ownerclassid":"171", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelImpl$TuningOptions", "sourcecode":"public TuningOptions(boolean renderProgress, boolean renderDependencies) {\r\n    this.renderProgress = renderProgress;\r\n    this.renderDependencies = renderDependencies;\r\n}"},
 {"id":1758, "name":"-init-(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource.-init-(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"174", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource", "sourcecode":"ResourceLoadOption(String id, String tagName, String attributeName) {\r\n    super(id);\r\n    myTagName = tagName;\r\n    myAttributeName = attributeName;\r\n}"},
 {"id":1759, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.chart.ResourceChart)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.chart.ResourceChart)", "ownerclassid":"174", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource", "sourcecode":"public ChartModelResource(TaskManager taskManager, HumanResourceManager resourceManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig, ResourceChart resourceChart) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    myResourceLoadRenderer = new ResourceLoadRenderer(this, resourceChart);\r\n    myBottomLineRenderer = new BottomUnitLineRendererImpl(this, projectConfig);\r\n    myManager = resourceManager;\r\n    {\r\n        myResourceNormalLoadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.normalLoad\", \"colors\", \"resources\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceColor(getValue());\r\n            }\r\n        };\r\n        myResourceNormalLoadOption.lock();\r\n        myResourceNormalLoadOption.setValue(new Color(140, 182, 206));\r\n        myResourceNormalLoadOption.commit();\r\n    }\r\n    {\r\n        myResourceOverloadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.overLoad\", \"colors\", \"resourceOverload\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceOverloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceOverloadOption.lock();\r\n        myResourceOverloadOption.setValue(new Color(229, 50, 50));\r\n        myResourceOverloadOption.commit();\r\n    }\r\n    {\r\n        myResourceUnderloadOption = new DefaultColorOption(\"resourceChartColors.underLoad\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceUnderloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceUnderloadOption.lock();\r\n        myResourceUnderloadOption.setValue(new Color(50, 229, 50));\r\n        myResourceUnderloadOption.commit();\r\n    }\r\n    {\r\n        myDayOffOption = new DefaultColorOption(\"resourceChartColors.dayOff\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setDayOffColor(getValue());\r\n            }\r\n        };\r\n        myDayOffOption.lock();\r\n        myDayOffOption.setValue(new Color(0.9F, 1.0F, 0.17F));\r\n        myDayOffOption.commit();\r\n    }\r\n    myColorOptions = new GPOptionGroup(\"resourceChartColors\", new GPOption[]{ myResourceNormalLoadOption, myResourceOverloadOption, myResourceUnderloadOption, myDayOffOption });\r\n}"},
 {"id":1760, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource.-init-(java.lang.String)", "ownerclassid":"174", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource", "sourcecode":"3( $anonymous0) {\r\n}"},
 {"id":1761, "name":"getChartOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource.getChartOptionGroups()", "ownerclassid":"174", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource", "sourcecode":"public GPOptionGroup[] getChartOptionGroups() {\r\n    List result = new ArrayList();\r\n    GPOptionGroup[] superGroups = super.getChartOptionGroups();\r\n    result.add(myColorOptions);\r\n    return ((GPOptionGroup[]) (result.toArray(new GPOptionGroup[result.size()])));\r\n}"},
 {"id":1762, "name":"getVisibleResources()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource.getVisibleResources()", "ownerclassid":"174", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource", "sourcecode":"public ProjectResource[] getVisibleResources() {\r\n    return ((ProjectResource[]) (myManager.getResources().toArray(new ProjectResource[0])));\r\n}"},
 {"id":1763, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource.paint(java.awt.Graphics)", "ownerclassid":"174", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource", "sourcecode":"public void paint(Graphics g) {\r\n    super.paint(g);\r\n    Graphics mainArea = g.create(0, getChartUIConfiguration().getHeaderHeight(), ((int) (getBounds().getWidth())), ((int) (getBounds().getHeight())));\r\n    mainArea.translate(0, (-(getVerticalOffset())));\r\n    getPainter().setGraphics(mainArea);\r\n    myResourceLoadRenderer.render();\r\n    myBottomLineRenderer.setHeight(getBounds().height);\r\n    myBottomLineRenderer.render();\r\n    myBottomLineRenderer.getPrimitiveContainer().paint(getPainter(), mainArea);\r\n    myResourceLoadRenderer.getPrimitiveContainer().paint(getPainter(), mainArea);\r\n}"},
 {"id":1764, "name":"-init-(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource$ResourceLoadOption.-init-(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"173", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource$ResourceLoadOption", "sourcecode":"ResourceLoadOption(String id, String tagName, String attributeName) {\r\n    super(id);\r\n    myTagName = tagName;\r\n    myAttributeName = attributeName;\r\n}"},
 {"id":1765, "name":"getAttributeName()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource$ResourceLoadOption.getAttributeName()", "ownerclassid":"173", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource$ResourceLoadOption", "sourcecode":"public String getAttributeName() {\r\n    return myAttributeName;\r\n}"},
 {"id":1766, "name":"getTagName()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource$ResourceLoadOption.getTagName()", "ownerclassid":"173", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource$ResourceLoadOption", "sourcecode":"public String getTagName() {\r\n    return myTagName;\r\n}"},
 {"id":1767, "name":"loadValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartModelResource$ResourceLoadOption.loadValue(java.lang.String)", "ownerclassid":"173", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartModelResource$ResourceLoadOption", "sourcecode":"public void loadValue(String legacyValue) {\r\n    loadPersistentValue(legacyValue);\r\n}"},
 {"id":1768, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[],net.sourceforge.ganttproject.chart.ChartModelBase$OptionEventDispatcher)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartOptionGroup.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[],net.sourceforge.ganttproject.chart.ChartModelBase$OptionEventDispatcher)", "ownerclassid":"175", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartOptionGroup", "sourcecode":"public ChartOptionGroup(String id, GPOption[] options, ChartModelBase.OptionEventDispatcher eventDispatcher) {\r\n    super(id, options);\r\n    myEventDispatcher = eventDispatcher;\r\n}"},
 {"id":1769, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartOptionGroup.commit()", "ownerclassid":"175", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartOptionGroup", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    myEventDispatcher.optionsChanged();\r\n}"},
 {"id":1770, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"public ChartRendererBase(ChartModelBase model) {\r\n    myPrimitiveContainer = new GraphicPrimitiveContainer();\r\n    myChartModel = model;\r\n}"},
 {"id":1771, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.beforeProcessingTimeFrames()", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"public void beforeProcessingTimeFrames() {\r\n    myPrimitiveContainer.clear();\r\n}"},
 {"id":1772, "name":"getChartModel()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.getChartModel()", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"protected ChartModelBase getChartModel() {\r\n    return myChartModel;\r\n}"},
 {"id":1773, "name":"getConfig()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.getConfig()", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"protected ChartUIConfiguration getConfig() {\r\n    return getChartModel().getChartUIConfiguration();\r\n}"},
 {"id":1774, "name":"getHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.getHeight()", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"protected int getHeight() {\r\n    return myHeight;\r\n}"},
 {"id":1775, "name":"getPrimitiveContainer()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.getPrimitiveContainer()", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"public GraphicPrimitiveContainer getPrimitiveContainer() {\r\n    return myPrimitiveContainer;\r\n}"},
 {"id":1776, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.getWidth()", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"protected int getWidth() {\r\n    return ((int) (getChartModel().getBounds().getWidth()));\r\n}"},
 {"id":1777, "name":"isEnabled()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.isEnabled()", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"public boolean isEnabled() {\r\n    return isEnabled;\r\n}"},
 {"id":1778, "name":"setEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.setEnabled(boolean)", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"public void setEnabled(boolean enabled) {\r\n    isEnabled = enabled;\r\n}"},
 {"id":1779, "name":"setHeight(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartRendererBase.setHeight(int)", "ownerclassid":"176", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "sourcecode":"void setHeight(int height) {\r\n    myHeight = height;\r\n}"},
 {"id":1780, "name":"cancelClipboardTransaction()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelection.cancelClipboardTransaction()", "ownerclassid":"177", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelection", "sourcecode":"void cancelClipboardTransaction();"},
 {"id":1781, "name":"commitClipboardTransaction()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelection.commitClipboardTransaction()", "ownerclassid":"177", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelection", "sourcecode":"void commitClipboardTransaction();"},
 {"id":1782, "name":"getHumanResources()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelection.getHumanResources()", "ownerclassid":"177", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelection", "sourcecode":"/* <HumanResource> */\r\nList getHumanResources();"},
 {"id":1783, "name":"getTasks()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelection.getTasks()", "ownerclassid":"177", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelection", "sourcecode":"/* <Task> */\r\nList getTasks();"},
 {"id":1784, "name":"isDeletable()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelection.isDeletable()", "ownerclassid":"177", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelection", "sourcecode":"IStatus isDeletable();"},
 {"id":1785, "name":"isEmpty()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelection.isEmpty()", "ownerclassid":"177", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelection", "sourcecode":"boolean isEmpty();"},
 {"id":1786, "name":"startCopyClipboardTransaction()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelection.startCopyClipboardTransaction()", "ownerclassid":"177", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelection", "sourcecode":"void startCopyClipboardTransaction();"},
 {"id":1787, "name":"startMoveClipboardTransaction()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelection.startMoveClipboardTransaction()", "ownerclassid":"177", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelection", "sourcecode":"void startMoveClipboardTransaction();"},
 {"id":1788, "name":"selectionChanged()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartSelectionListener.selectionChanged()", "ownerclassid":"178", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "sourcecode":"public void selectionChanged();"},
 {"id":1789, "name":"-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"ChartUIConfiguration(UIConfiguration projectConfig) {\r\n    mySpanningRowTextFont = Fonts.TOP_UNIT_FONT;\r\n    myBottomUnitFont = projectConfig.getChartMainFont();\r\n    mySpanningHeaderBackgroundColor = new Color(0.93F, 0.93F, 0.93F);\r\n    myHeaderBorderColor = new Color(0.482F, 0.482F, 0.482F);\r\n    myWorkingTimeBackgroundColor = Color.WHITE;\r\n    myHolidayTimeBackgroundColor = new Color(0.93F, 0.93F, 0.93F);\r\n    myPublicHolidayTimeBackgroundColor = new Color(240, 220, 240);\r\n    // myHeaderBorderColor = new Color(0f, 1f, 0f);\r\n    myBottomUnitGridColor = new Color(0.482F, 0.482F, 0.482F);\r\n    myProjectConfig = projectConfig;\r\n}"},
 {"id":1790, "name":"getBottomUnitFont()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getBottomUnitFont()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"Font getBottomUnitFont() {\r\n    return myBottomUnitFont;\r\n}"},
 {"id":1791, "name":"getBottomUnitGridColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getBottomUnitGridColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getBottomUnitGridColor() {\r\n    return myBottomUnitGridColor;\r\n}"},
 {"id":1792, "name":"getChartFont()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getChartFont()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Font getChartFont() {\r\n    return myProjectConfig.getChartMainFont();\r\n}"},
 {"id":1793, "name":"getDayOffColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getDayOffColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getDayOffColor() {\r\n    return myProjectConfig.getDayOffColor();\r\n}"},
 {"id":1794, "name":"getDefaultTaskColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getDefaultTaskColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getDefaultTaskColor() {\r\n    return myProjectConfig.getTaskColor();\r\n}"},
 {"id":1795, "name":"getEarlierPreviousTaskColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getEarlierPreviousTaskColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getEarlierPreviousTaskColor() {\r\n    return myProjectConfig.getEarlierPreviousTaskColor();\r\n}"},
 {"id":1796, "name":"getHeaderBorderColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getHeaderBorderColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getHeaderBorderColor() {\r\n    return myHeaderBorderColor;\r\n}"},
 {"id":1797, "name":"getHeaderHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getHeaderHeight()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public int getHeaderHeight() {\r\n    return myHeaderHeight;\r\n}"},
 {"id":1798, "name":"getHolidayTimeBackgroundColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getHolidayTimeBackgroundColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getHolidayTimeBackgroundColor() {\r\n    return myHolidayTimeBackgroundColor;\r\n}"},
 {"id":1799, "name":"getHorizontalGutterColor1()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getHorizontalGutterColor1()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getHorizontalGutterColor1() {\r\n    return myHorizontalGutterColor1;\r\n}"},
 {"id":1800, "name":"getHorizontalGutterColor2()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getHorizontalGutterColor2()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getHorizontalGutterColor2() {\r\n    return myHorizontalGutterColor2;\r\n}"},
 {"id":1801, "name":"getLaterPreviousTaskColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getLaterPreviousTaskColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getLaterPreviousTaskColor() {\r\n    return myProjectConfig.getLaterPreviousTaskColor();\r\n}"},
 {"id":1802, "name":"getMargin()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getMargin()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public int getMargin() {\r\n    return myMargin;\r\n}"},
 {"id":1803, "name":"getPreviousTaskColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getPreviousTaskColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getPreviousTaskColor() {\r\n    return myProjectConfig.getPreviousTaskColor();\r\n}"},
 {"id":1804, "name":"getPublicHolidayTimeBackgroundColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getPublicHolidayTimeBackgroundColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getPublicHolidayTimeBackgroundColor() {\r\n    return myPublicHolidayTimeBackgroundColor;\r\n}"},
 {"id":1805, "name":"getResourceNormalLoadColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getResourceNormalLoadColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getResourceNormalLoadColor() {\r\n    return myProjectConfig.getResourceColor();\r\n}"},
 {"id":1806, "name":"getResourceOverloadColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getResourceOverloadColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getResourceOverloadColor() {\r\n    return myProjectConfig.getResourceOverloadColor();\r\n}"},
 {"id":1807, "name":"getResourceUnderLoadColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getResourceUnderLoadColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getResourceUnderLoadColor() {\r\n    return myProjectConfig.getResourceUnderloadColor();\r\n}"},
 {"id":1808, "name":"getRowHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getRowHeight()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public int getRowHeight() {\r\n    return myRowHeight;\r\n}"},
 {"id":1809, "name":"getSpanningHeaderBackgroundColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getSpanningHeaderBackgroundColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getSpanningHeaderBackgroundColor() {\r\n    return mySpanningHeaderBackgroundColor;\r\n}"},
 {"id":1810, "name":"getSpanningHeaderFont()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getSpanningHeaderFont()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"Font getSpanningHeaderFont() {\r\n    return mySpanningRowTextFont;\r\n}"},
 {"id":1811, "name":"getSpanningHeaderHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getSpanningHeaderHeight()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public int getSpanningHeaderHeight() {\r\n    return (myHeaderHeight) / 2;\r\n}"},
 {"id":1812, "name":"getWeekEndColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getWeekEndColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getWeekEndColor() {\r\n    return myProjectConfig.getWeekEndColor();\r\n}"},
 {"id":1813, "name":"getWeekendAlphaValue()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getWeekendAlphaValue()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public float getWeekendAlphaValue() {\r\n    return myProjectConfig.getWeekendAlphaRenderingOption().getValueAsFloat();\r\n}"},
 {"id":1814, "name":"getWorkingTimeBackgroundColor()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getWorkingTimeBackgroundColor()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public Color getWorkingTimeBackgroundColor() {\r\n    return myWorkingTimeBackgroundColor;\r\n}"},
 {"id":1815, "name":"getYOffSet()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.getYOffSet()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public int getYOffSet() {\r\n    return myYOffset;\r\n}"},
 {"id":1816, "name":"isCriticalPathOn()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.isCriticalPathOn()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public boolean isCriticalPathOn() {\r\n    return myProjectConfig.isCriticalPathOn();\r\n}"},
 {"id":1817, "name":"isRedlineOn()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.isRedlineOn()", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public boolean isRedlineOn() {\r\n    return myProjectConfig.isRedlineOn();\r\n}"},
 {"id":1818, "name":"setHeaderHeight(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.setHeaderHeight(int)", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public void setHeaderHeight(int headerHeight) {\r\n    myHeaderHeight = headerHeight;\r\n}"},
 {"id":1819, "name":"setRowHeight(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.setRowHeight(int)", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public void setRowHeight(int rowHeight) {\r\n    myRowHeight = rowHeight;\r\n}"},
 {"id":1820, "name":"setYOffSet(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.setYOffSet(int)", "ownerclassid":"179", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "sourcecode":"public void setYOffSet(int offset) {\r\n    myYOffset = offset;\r\n}"},
 {"id":1821, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public ChartViewState(IGanttProject project, UIFacade uiFacade) {\r\n    iProject = project;\r\n    myUIFacade = uiFacade;\r\n    myTimeUnitStack = project.getTimeUnitStack();\r\n    myStartDate = CalendarFactory.newCalendar().getTime();\r\n    uiFacade.getZoomManager().addZoomListener(this);\r\n    myCurrentTimeFrame = myTimeUnitStack.createTimeFrame(myStartDate, getTopTimeUnit(), getBottomTimeUnit());\r\n    // setDefaultBottomUnitWidth();\r\n}"},
 {"id":1822, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.-init-()", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"1() {\r\n}"},
 {"id":1823, "name":"-init-(net.sourceforge.ganttproject.chart.ChartViewState,java.lang.Object,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.-init-(net.sourceforge.ganttproject.chart.ChartViewState,java.lang.Object,java.lang.Object)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public ViewStateEvent(ChartViewState viewState, Object oldValue, Object newValue) {\r\n    super(viewState);\r\n    myOldValue = oldValue;\r\n    myNewValue = newValue;\r\n}"},
 {"id":1824, "name":"addStateListener(net.sourceforge.ganttproject.chart.ChartViewState$Listener)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.addStateListener(net.sourceforge.ganttproject.chart.ChartViewState$Listener)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public void addStateListener(ChartViewState.Listener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":1825, "name":"fireStartDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.fireStartDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"private void fireStartDateChanged(ChartViewState.ViewStateEvent e) {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        ChartViewState.Listener nextListener = ((ChartViewState.Listener) (myListeners.get(i)));\r\n        nextListener.startDateChanged(e);\r\n    }\r\n}"},
 {"id":1826, "name":"getBottomTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.getBottomTimeUnit()", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic TimeUnit getBottomTimeUnit() {\r\n    return getCurrentZoomState().getTimeUnitPair().getBottomTimeUnit();\r\n}"},
 {"id":1827, "name":"getBottomUnitWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.getBottomUnitWidth()", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public int getBottomUnitWidth() {\r\n    return getCurrentZoomState().getBottomUnitWidth();\r\n}"},
 {"id":1828, "name":"getCurrentZoomState()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.getCurrentZoomState()", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"private ZoomManager.ZoomState getCurrentZoomState() {\r\n    return myCurrentZoomState;\r\n}"},
 {"id":1829, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.getStartDate()", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"// private void setDefaultBottomUnitWidth() {\r\n// myBottomUnitWidth = 20;\r\n// }\r\npublic Date getStartDate() {\r\n    return myStartDate;\r\n}"},
 {"id":1830, "name":"getTopTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.getTopTimeUnit()", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic TimeUnit getTopTimeUnit() {\r\n    return getCurrentZoomState().getTimeUnitPair().getTopTimeUnit();\r\n}"},
 {"id":1831, "name":"removeStateListener(net.sourceforge.ganttproject.chart.ChartViewState$Listener)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.removeStateListener(net.sourceforge.ganttproject.chart.ChartViewState$Listener)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public void removeStateListener(ChartViewState.Listener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":1832, "name":"scrollLeft()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.scrollLeft()", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public void scrollLeft() {\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(myStartDate);\r\n    c.add(Calendar.MILLISECOND, (-1));\r\n    Date scrolledDate = c.getTime();\r\n    setStartDate(scrolledDate);\r\n}"},
 {"id":1833, "name":"scrollLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.scrollLeft(java.util.Date)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public void scrollLeft(Date date) {\r\n    setStartDate(date);\r\n}"},
 {"id":1834, "name":"scrollRight()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.scrollRight()", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public void scrollRight() {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            Date scrolledDate;\r\n            if ((myCurrentTimeFrame.getUnitCount(getBottomTimeUnit())) > 1) {\r\n                scrolledDate = myCurrentTimeFrame.getUnitStart(getBottomTimeUnit(), 1);\r\n            } else {\r\n                scrolledDate = myCurrentTimeFrame.getFinishDate();\r\n            }\r\n            setStartDate(scrolledDate);\r\n        }\r\n    });\r\n}"},
 {"id":1835, "name":"scrollTimeFrame(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.scrollTimeFrame(java.util.Date)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"private TimeFrame scrollTimeFrame(Date scrolledDate) {\r\n    TimeFrame result = null;\r\n    if (getTopTimeUnit().isConstructedFrom(getBottomTimeUnit())) {\r\n        result = myTimeUnitStack.createTimeFrame(scrolledDate, getTopTimeUnit(), getBottomTimeUnit());\r\n    } else {\r\n        result = myTimeUnitStack.createTimeFrame(scrolledDate, getBottomTimeUnit(), getBottomTimeUnit());\r\n    }\r\n    return result;\r\n}"},
 {"id":1836, "name":"setStartDate(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.setStartDate(java.util.Date)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public void setStartDate(Date startDate) {\r\n    myCurrentTimeFrame = scrollTimeFrame(startDate);\r\n    startDate = myCurrentTimeFrame.getStartDate();\r\n    ChartViewState.ViewStateEvent e = new ChartViewState.ViewStateEvent(this, myStartDate, startDate);\r\n    myStartDate = startDate;\r\n    fireStartDateChanged(e);\r\n}"},
 {"id":1837, "name":"zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "ownerclassid":"182", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState", "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n    myCurrentZoomState = e.getNewZoomState();\r\n    Date date = null;\r\n    if ((myUIFacade.getViewIndex()) == (UIFacade.GANTT_INDEX)) {\r\n        Date d = Mediator.getTaskSelectionManager().getEarliestStart();\r\n        // boolean zoomin = e.getZoomValue() < e.getOldValue();\r\n        // if (zoomin && myZoomStateIndex>0) {\r\n        // myZoomStateIndex--;\r\n        // }\r\n        // else if (!zoomin && myZoomStateIndex<myZoomStates.length-1) {\r\n        // myZoomStateIndex++;\r\n        // }\r\n        // myCurrentTimeFrame = scrollTimeFrame(d==null ? getStartDate() :\r\n        // d);\r\n        date = (d == null) ? getStartDate() : d;\r\n    } else\r\n        date = getStartDate();\r\n\r\n    setStartDate(date);\r\n}"},
 {"id":1838, "name":"startDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState$Listener.startDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "ownerclassid":"180", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState$Listener", "sourcecode":"public void startDateChanged(ChartViewState.ViewStateEvent e);"},
 {"id":1839, "name":"zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState$Listener.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "ownerclassid":"180", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState$Listener", "sourcecode":"public void zoomChanged(ZoomEvent e);"},
 {"id":1840, "name":"-init-(net.sourceforge.ganttproject.chart.ChartViewState,java.lang.Object,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent.-init-(net.sourceforge.ganttproject.chart.ChartViewState,java.lang.Object,java.lang.Object)", "ownerclassid":"181", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent", "sourcecode":"public ViewStateEvent(ChartViewState viewState, Object oldValue, Object newValue) {\r\n    super(viewState);\r\n    myOldValue = oldValue;\r\n    myNewValue = newValue;\r\n}"},
 {"id":1841, "name":"getNewValue()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent.getNewValue()", "ownerclassid":"181", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent", "sourcecode":"public Object getNewValue() {\r\n    return myNewValue;\r\n}"},
 {"id":1842, "name":"getOldValue()", "fullmethod":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent.getOldValue()", "ownerclassid":"181", "ownerclassname":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent", "sourcecode":"public Object getOldValue() {\r\n    return myOldValue;\r\n}"},
 {"id":1843, "name":"-init-(net.sourceforge.ganttproject.calendar.GPCalendar$DayType,net.sourceforge.ganttproject.task.TaskLength,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.DayTypeAlternance.-init-(net.sourceforge.ganttproject.calendar.GPCalendar$DayType,net.sourceforge.ganttproject.task.TaskLength,java.util.Date)", "ownerclassid":"183", "ownerclassname":"net.sourceforge.ganttproject.chart.DayTypeAlternance", "sourcecode":"DayTypeAlternance(GPCalendar.DayType dayType, TaskLength duration, Date endDate) {\r\n    myDayType = dayType;\r\n    myDuration = duration;\r\n    myEnd = endDate;\r\n}"},
 {"id":1844, "name":"getDayType()", "fullmethod":"net.sourceforge.ganttproject.chart.DayTypeAlternance.getDayType()", "ownerclassid":"183", "ownerclassname":"net.sourceforge.ganttproject.chart.DayTypeAlternance", "sourcecode":"public GPCalendar.DayType getDayType() {\r\n    return myDayType;\r\n}"},
 {"id":1845, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.chart.DayTypeAlternance.getDuration()", "ownerclassid":"183", "ownerclassname":"net.sourceforge.ganttproject.chart.DayTypeAlternance", "sourcecode":"public TaskLength getDuration() {\r\n    return myDuration;\r\n}"},
 {"id":1846, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.chart.DayTypeAlternance.getEnd()", "ownerclassid":"183", "ownerclassname":"net.sourceforge.ganttproject.chart.DayTypeAlternance", "sourcecode":"public Date getEnd() {\r\n    return myEnd;\r\n}"},
 {"id":1847, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.chart.DayTypeAlternance.toString()", "ownerclassid":"183", "ownerclassname":"net.sourceforge.ganttproject.chart.DayTypeAlternance", "sourcecode":"public String toString() {\r\n    return (((((\"period length=\" + (myDuration.getLength())) + \" (\") + (myDuration.getTimeUnit().getName())) + \")\") + \" is\") + ((myDayType) == (GPCalendar.DayType.WEEKEND) ? \" holiday\" : \" working\n\");\r\n}"},
 {"id":1848, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer.-init-()", "ownerclassid":"184", "ownerclassname":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer", "sourcecode":"public DependencyInteractionRenderer() {\r\n    x1 = x2 = y1 = y2 = 0;\r\n    draw = false;\r\n}"},
 {"id":1849, "name":"-init-(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer.-init-(int,int,int,int)", "ownerclassid":"184", "ownerclassname":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer", "sourcecode":"public DependencyInteractionRenderer(int x1, int y1, int x2, int y2) {\r\n    this.x1 = x1;\r\n    this.x2 = x2;\r\n    this.y1 = y1;\r\n    this.y2 = y2;\r\n    this.draw = true;\r\n}"},
 {"id":1850, "name":"changePoint2(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer.changePoint2(int,int)", "ownerclassid":"184", "ownerclassname":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer", "sourcecode":"public void changePoint2(int x2, int y2) {\r\n    this.x2 = x2;\r\n    this.y2 = y2;\r\n}"},
 {"id":1851, "name":"getDraw()", "fullmethod":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer.getDraw()", "ownerclassid":"184", "ownerclassname":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer", "sourcecode":"public boolean getDraw() {\r\n    return draw;\r\n}"},
 {"id":1852, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer.paint(java.awt.Graphics)", "ownerclassid":"184", "ownerclassname":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer", "sourcecode":"public void paint(Graphics g) {\r\n    if (draw) {\r\n        // draw the line\r\n        g.setColor(Color.black);\r\n        g.drawLine(x1, y1, x2, y2);\r\n        // Draw the triangle\r\n        int[] xPoints = new int[3];\r\n        int[] yPoints = new int[3];\r\n        int vx = (x2) - (x1);\r\n        int vy = (y2) - (y1);\r\n        int px = ((int) (0.08F * ((float) (vx))));\r\n        int py = ((int) (0.08F * ((float) (vy))));\r\n        int total = (px < 0 ? -px : px) + (py < 0 ? -py : py);\r\n        px = ((int) ((((float) (px)) * 10.0F) / ((float) (total))));\r\n        py = ((int) ((((float) (py)) * 10.0F) / ((float) (total))));\r\n        xPoints[0] = x2;\r\n        yPoints[0] = y2;\r\n        xPoints[1] = ((x2) - px) + (py / 2);\r\n        yPoints[1] = ((y2) - py) - (px / 2);\r\n        xPoints[2] = ((x2) - px) - (py / 2);\r\n        yPoints[2] = ((y2) - py) + (px / 2);\r\n        g.fillPolygon(xPoints, yPoints, 3);\r\n    }\r\n}"},
 {"id":1853, "name":"setDraw(boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer.setDraw(boolean)", "ownerclassid":"184", "ownerclassname":"net.sourceforge.ganttproject.chart.DependencyInteractionRenderer", "sourcecode":"public void setDraw(boolean d) {\r\n    draw = d;\r\n}"},
 {"id":1854, "name":"appendBlankRow()", "fullmethod":"net.sourceforge.ganttproject.chart.GanttChart.appendBlankRow()", "ownerclassid":"185", "ownerclassname":"net.sourceforge.ganttproject.chart.GanttChart", "sourcecode":"void appendBlankRow();"},
 {"id":1855, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.-init-()", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"GraphicPrimitive() {\r\n}"},
 {"id":1856, "name":"-init-(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.-init-(int,int,int,int)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"private Rectangle(int leftx, int topy, int width, int height) {\r\n    myLeftX = leftx;\r\n    myTopY = topy;\r\n    myWidth = width;\r\n    myHeight = height;\r\n}"},
 {"id":1857, "name":"-init-(int,int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.-init-(int,int,java.lang.String)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"Text(int leftX, int bottomY, String text) {\r\n    myLeftX = leftX;\r\n    myBottomY = bottomY;\r\n    myText = text;\r\n    myMaxLength = -1;\r\n}"},
 {"id":1858, "name":"bind(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.bind(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,java.lang.Object)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"void bind(GraphicPrimitiveContainer.GraphicPrimitive primitive, Object modelObject) {\r\n    myModelObject2primitive.put(modelObject, primitive);\r\n    primitive.setModelObject(modelObject);\r\n}"},
 {"id":1859, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.clear()", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"public void clear() {\r\n    myRectangles.clear();\r\n    myLines.clear();\r\n    myTexts.clear();\r\n    myModelObject2primitive.clear();\r\n}"},
 {"id":1860, "name":"createLine(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.createLine(int,int,int,int)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"GraphicPrimitiveContainer.Line createLine(int startx, int starty, int finishx, int finishy) {\r\n    GraphicPrimitiveContainer.Line result = new GraphicPrimitiveContainer.Line(startx, starty, finishx, finishy);\r\n    myLines.add(result);\r\n    return result;\r\n}"},
 {"id":1861, "name":"createRectangle(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.createRectangle(int,int,int,int)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"GraphicPrimitiveContainer.Rectangle createRectangle(int leftx, int topy, int width, int height) {\r\n    if (width < 0) {\r\n        width = -width;\r\n        leftx = leftx - width;\r\n    }\r\n    GraphicPrimitiveContainer.Rectangle result = new GraphicPrimitiveContainer.Rectangle(leftx, topy, width, height);\r\n    myRectangles.add(result);\r\n    return result;\r\n}"},
 {"id":1862, "name":"createText(int,int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.createText(int,int,java.lang.String)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"GraphicPrimitiveContainer.Text createText(int leftx, int bottomy, String text) {\r\n    GraphicPrimitiveContainer.Text result = new GraphicPrimitiveContainer.Text(leftx, bottomy, text);\r\n    myTexts.add(result);\r\n    return result;\r\n}"},
 {"id":1863, "name":"getLayer(int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.getLayer(int)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"public GraphicPrimitiveContainer getLayer(int layer) {\r\n    if ((layer < 0) || (layer >= (myLayers.size()))) {\r\n        return this;\r\n    }\r\n    return ((GraphicPrimitiveContainer) (myLayers.get(layer)));\r\n}"},
 {"id":1864, "name":"getPrimitive(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.getPrimitive(int,int)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"public GraphicPrimitiveContainer.GraphicPrimitive getPrimitive(int x, int y) {\r\n    // System.err.println(\"looking for primitive under point x=\"+x+\" y=\"+y);\r\n    return getPrimitive(x, 0, y, 0);\r\n    // for (int i = 0; i < myRectangles.size(); i++) {\r\n    // Rectangle next = (Rectangle) myRectangles.get(i);\r\n    // // System.err.println(\" next rectangle=\"+next);\r\n    // if (next.myLeftX <= x && next.myLeftX + next.myWidth >= x\r\n    // && next.myTopY <= y && next.myTopY + next.myHeight >= y) {\r\n    // return next;\r\n    // }\r\n    // }\r\n    // return null;\r\n}"},
 {"id":1865, "name":"getPrimitive(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.getPrimitive(int,int,int,int)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"public GraphicPrimitiveContainer.GraphicPrimitive getPrimitive(int x, int xThreshold, int y, int yThreshold) {\r\n    for (int i = 0; i < (myRectangles.size()); i++) {\r\n        GraphicPrimitiveContainer.Rectangle next = ((GraphicPrimitiveContainer.Rectangle) (myRectangles.get(i)));\r\n        // System.err.println(\" next rectangle=\"+next);\r\n        if (((((next.myLeftX) <= (x + xThreshold)) && (((next.myLeftX) + (next.myWidth)) >= (x - xThreshold))) && ((next.myTopY) <= (y + yThreshold))) && (((next.myTopY) + (next.myHeight)) >= (y - yThreshold))) {\r\n            return next;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":1866, "name":"getPrimitive(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.getPrimitive(java.lang.Object)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"GraphicPrimitiveContainer.GraphicPrimitive getPrimitive(Object modelObject) {\r\n    return ((GraphicPrimitiveContainer.GraphicPrimitive) (myModelObject2primitive.get(modelObject)));\r\n}"},
 {"id":1867, "name":"newLayer()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.newLayer()", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"public GraphicPrimitiveContainer newLayer() {\r\n    GraphicPrimitiveContainer result = new GraphicPrimitiveContainer();\r\n    myLayers.add(result);\r\n    return result;\r\n}"},
 {"id":1868, "name":"paint(net.sourceforge.ganttproject.chart.Painter,java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.paint(net.sourceforge.ganttproject.chart.Painter,java.awt.Graphics)", "ownerclassid":"192", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "sourcecode":"void paint(Painter painter, Graphics g) {\r\n    for (int i = 0; i < (myRectangles.size()); i++) {\r\n        GraphicPrimitiveContainer.Rectangle next = ((GraphicPrimitiveContainer.Rectangle) (myRectangles.get(i)));\r\n        painter.paint(next);\r\n    }\r\n    for (int i = 0; i < (myLines.size()); i++) {\r\n        GraphicPrimitiveContainer.Line next = ((GraphicPrimitiveContainer.Line) (myLines.get(i)));\r\n        Color foreColor = next.getForegroundColor();\r\n        if (foreColor == null) {\r\n            foreColor = Color.BLACK;\r\n        }\r\n        g.setColor(foreColor);\r\n        g.drawLine(next.myStartX, next.myStartY, next.myFinishX, next.myFinishY);\r\n    }\r\n    for (int i = 0; i < (myTexts.size()); i++) {\r\n        GraphicPrimitiveContainer.Text next = ((GraphicPrimitiveContainer.Text) (myTexts.get(i)));\r\n        painter.paint(next);\r\n    }\r\n}"},
 {"id":1869, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.-init-()", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"GraphicPrimitive() {\r\n}"},
 {"id":1870, "name":"getBackgroundColor()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.getBackgroundColor()", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"public Color getBackgroundColor() {\r\n    return myBackgroundColor;\r\n}"},
 {"id":1871, "name":"getForegroundColor()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.getForegroundColor()", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"public Color getForegroundColor() {\r\n    return myForegroundColor;\r\n}"},
 {"id":1872, "name":"getModelObject()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.getModelObject()", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic Object getModelObject() {\r\n    return myModelObject;\r\n}"},
 {"id":1873, "name":"getStyle()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.getStyle()", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"public String getStyle() {\r\n    return myStyleName;\r\n}"},
 {"id":1874, "name":"setBackgroundColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.setBackgroundColor(java.awt.Color)", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"public void setBackgroundColor(Color myBackgroundColor) {\r\n    this.myBackgroundColor = myBackgroundColor;\r\n}"},
 {"id":1875, "name":"setForegroundColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.setForegroundColor(java.awt.Color)", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"public void setForegroundColor(Color myForegroundColor) {\r\n    this.myForegroundColor = myForegroundColor;\r\n}"},
 {"id":1876, "name":"setModelObject(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.setModelObject(java.lang.Object)", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"/**\r\n *\r\n *\r\n * @param modelObject\r\n * \t\t\r\n */\r\nvoid setModelObject(Object modelObject) {\r\n    myModelObject = modelObject;\r\n}"},
 {"id":1877, "name":"setStyle(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive.setStyle(java.lang.String)", "ownerclassid":"186", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "sourcecode":"public void setStyle(String styleName) {\r\n    myStyleName = styleName;\r\n}"},
 {"id":1878, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$HAlignment.-init-()", "ownerclassid":"187", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$HAlignment", "sourcecode":"HAlignment() {\r\n}"},
 {"id":1879, "name":"-init-(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Line.-init-(int,int,int,int)", "ownerclassid":"188", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Line", "sourcecode":"private Line(int startx, int starty, int finishx, int finishy) {\r\n    myStartX = startx;\r\n    myStartY = starty;\r\n    myFinishX = finishx;\r\n    myFinishY = finishy;\r\n}"},
 {"id":1880, "name":"-init-(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle.-init-(int,int,int,int)", "ownerclassid":"189", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "sourcecode":"private Rectangle(int leftx, int topy, int width, int height) {\r\n    myLeftX = leftx;\r\n    myTopY = topy;\r\n    myWidth = width;\r\n    myHeight = height;\r\n}"},
 {"id":1881, "name":"getBottomY()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle.getBottomY()", "ownerclassid":"189", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "sourcecode":"public int getBottomY() {\r\n    return (myTopY) + (myHeight);\r\n}"},
 {"id":1882, "name":"getMiddleX()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle.getMiddleX()", "ownerclassid":"189", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "sourcecode":"public int getMiddleX() {\r\n    return (myLeftX) + ((myWidth) / 2);\r\n}"},
 {"id":1883, "name":"getMiddleY()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle.getMiddleY()", "ownerclassid":"189", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "sourcecode":"public int getMiddleY() {\r\n    return (myTopY) + ((myHeight) / 2);\r\n}"},
 {"id":1884, "name":"getRightX()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle.getRightX()", "ownerclassid":"189", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "sourcecode":"public int getRightX() {\r\n    return (myLeftX) + (myWidth);\r\n}"},
 {"id":1885, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle.toString()", "ownerclassid":"189", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "sourcecode":"public String toString() {\r\n    return ((((((\"leftx=\" + (myLeftX)) + \" topy=\") + (myTopY)) + \" width=\") + (myWidth)) + \" height=\") + (myHeight);\r\n}"},
 {"id":1886, "name":"-init-(int,int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.-init-(int,int,java.lang.String)", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"Text(int leftX, int bottomY, String text) {\r\n    myLeftX = leftX;\r\n    myBottomY = bottomY;\r\n    myText = text;\r\n    myMaxLength = -1;\r\n}"},
 {"id":1887, "name":"getBottomY()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.getBottomY()", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public int getBottomY() {\r\n    return myBottomY;\r\n}"},
 {"id":1888, "name":"getFont()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.getFont()", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public Font getFont() {\r\n    return myFont;\r\n}"},
 {"id":1889, "name":"getHAlignment()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.getHAlignment()", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public GraphicPrimitiveContainer.HAlignment getHAlignment() {\r\n    return myHAlignment;\r\n}"},
 {"id":1890, "name":"getLeftX()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.getLeftX()", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public int getLeftX() {\r\n    return myLeftX;\r\n}"},
 {"id":1891, "name":"getMaxLength()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.getMaxLength()", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public int getMaxLength() {\r\n    return myMaxLength;\r\n}"},
 {"id":1892, "name":"getText()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.getText()", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public String getText() {\r\n    return myText;\r\n}"},
 {"id":1893, "name":"getVAlignment()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.getVAlignment()", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public GraphicPrimitiveContainer.VAlignment getVAlignment() {\r\n    return myVAlignment;\r\n}"},
 {"id":1894, "name":"setAlignment(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$HAlignment,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$VAlignment)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.setAlignment(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$HAlignment,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$VAlignment)", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public void setAlignment(GraphicPrimitiveContainer.HAlignment halignment, GraphicPrimitiveContainer.VAlignment valignment) {\r\n    myHAlignment = halignment;\r\n    myVAlignment = valignment;\r\n}"},
 {"id":1895, "name":"setFont(java.awt.Font)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.setFont(java.awt.Font)", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public void setFont(Font font) {\r\n    myFont = font;\r\n}"},
 {"id":1896, "name":"setMaxLength(int)", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.setMaxLength(int)", "ownerclassid":"190", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "sourcecode":"public void setMaxLength(int maxLength) {\r\n    myMaxLength = maxLength;\r\n}"},
 {"id":1897, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$VAlignment.-init-()", "ownerclassid":"191", "ownerclassname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$VAlignment", "sourcecode":"VAlignment() {\r\n}"},
 {"id":1898, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl.-init-(java.lang.String)", "ownerclassid":"193", "ownerclassname":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl", "sourcecode":"LabelPositionOptionImpl(String id) {\r\n    super(id);\r\n    myValue = LabelPositionOptionImpl.VALUES[0];\r\n}"},
 {"id":1899, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl.commit()", "ownerclassid":"193", "ownerclassname":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    myValue = myLockedValue;\r\n}"},
 {"id":1900, "name":"getAvailableValues()", "fullmethod":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl.getAvailableValues()", "ownerclassid":"193", "ownerclassname":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl", "sourcecode":"public String[] getAvailableValues() {\r\n    return LabelPositionOptionImpl.VALUES;\r\n}"},
 {"id":1901, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl.getValue()", "ownerclassid":"193", "ownerclassname":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl", "sourcecode":"public String getValue() {\r\n    return myValue;\r\n}"},
 {"id":1902, "name":"setValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl.setValue(java.lang.String)", "ownerclassid":"193", "ownerclassname":"net.sourceforge.ganttproject.chart.LabelPositionOptionImpl", "sourcecode":"public void setValue(String value) {\r\n    if (!(isLocked())) {\r\n        throw new IllegalStateException(\"Lock option before setting value\");\r\n    }\r\n    myLockedValue = value;\r\n}"},
 {"id":1903, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "fullmethod":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl.-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "ownerclassid":"194", "ownerclassname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl", "sourcecode":"public OffsetCalculatorImpl(TimeUnitStack timeunitStack) {\r\n    myStack = timeunitStack;\r\n}"},
 {"id":1904, "name":"calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"194", "ownerclassname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl", "sourcecode":"public ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    ChartModelBase.Offset[] result;\r\n    // Date bottomUnitEndDate = timeFrame.getUnitFinish(frameBottomUnit, unitIndex);\r\n    if (offsetUnit.equals(frameBottomUnit)) {\r\n        result = new ChartModelBase.Offset[]{ new ChartModelBase.Offset(offsetUnit, bottomUnitStartDate, bottomUnitStartDate, 0, null) };\r\n    } else\r\n        if (frameBottomUnit.isConstructedFrom(offsetUnit)) {\r\n            // java.util.List buf = new ArrayList();\r\n            int outerFrameUnitCount = timeFrame.getUnitCount(offsetUnit);\r\n            TimeFrame innerFrame = myStack.createTimeFrame(bottomUnitStartDate, frameBottomUnit, offsetUnit);\r\n            int offsetUnitCount = innerFrame.getUnitCount(offsetUnit);\r\n            result = new ChartModelBase.Offset[offsetUnitCount];\r\n            for (int i = 0; i < offsetUnitCount; i++) {\r\n                Date offsetEnd = innerFrame.getUnitFinish(offsetUnit, i);\r\n                int offsetPixels = ((i + 1) * frameBottomUnitWidth) / outerFrameUnitCount;\r\n                result[i] = new ChartModelBase.Offset(offsetUnit, bottomUnitStartDate, offsetEnd, offsetPixels, null);\r\n            }\r\n        } else {\r\n            throw new RuntimeException(\"We should not be here\");\r\n        }\r\n\r\n    return result;\r\n}"},
 {"id":1905, "name":"-init-(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.-init-(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"public OptionsDialogAction(GPOptionGroup[] groups, UIFacade uifacade) {\r\n    super(GanttLanguage.getInstance().getText(\"chartOptions\"));\r\n    myGroups = groups;\r\n    myUIFacade = uifacade;\r\n    this.putValue(Action.SMALL_ICON, new ImageIcon(getClass().getResource(\"/icons/chartOptions_16.gif\")));\r\n}"},
 {"id":1906, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.-init-()", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"1() {\r\n}"},
 {"id":1907, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    for (int i = 0; i < (myGroups.length); i++) {\r\n        myGroups[i].lock();\r\n    }\r\n    final OkAction okAction = new OkAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            commit();\r\n        }\r\n    };\r\n    final CancelAction cancelAction = new CancelAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            rollback();\r\n        }\r\n    };\r\n    myUIFacade.showDialog(createDialogComponent(), new Action[]{ okAction, cancelAction });\r\n}"},
 {"id":1908, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.commit()", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"private void commit() {\r\n    for (int i = 0; i < (myGroups.length); i++) {\r\n        myGroups[i].commit();\r\n    }\r\n}"},
 {"id":1909, "name":"createDialogComponent()", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.createDialogComponent()", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"private Component createDialogComponent() {\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    JPanel combinedPanel = new JPanel(new BorderLayout());\r\n    JComponent comp = builder.buildPage(myGroups, \"ganttChart\");\r\n    combinedPanel.add(comp, BorderLayout.CENTER);\r\n    combinedPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 3, 0));\r\n    Component previewComponent = createPreviewComponent();\r\n    if (previewComponent != null) {\r\n        JPanel previewPanel = new JPanel(new BorderLayout());\r\n        previewPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), GanttLanguage.getInstance().getText(\"previewBar\")));\r\n        previewPanel.add(previewComponent, BorderLayout.CENTER);\r\n        combinedPanel.add(previewPanel, BorderLayout.SOUTH);\r\n    }\r\n    return combinedPanel;\r\n}"},
 {"id":1910, "name":"createPreviewComponent()", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.createPreviewComponent()", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"protected Component createPreviewComponent() {\r\n    return null;\r\n}"},
 {"id":1911, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.getIconFilePrefix()", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return null;\r\n}"},
 {"id":1912, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.getLocalizedName()", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"chartOptions\");\r\n}"},
 {"id":1913, "name":"rollback()", "fullmethod":"net.sourceforge.ganttproject.chart.OptionsDialogAction.rollback()", "ownerclassid":"195", "ownerclassname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "sourcecode":"private void rollback() {\r\n    for (int i = 0; i < (myGroups.length); i++) {\r\n        myGroups[i].rollback();\r\n    }\r\n}"},
 {"id":1914, "name":"paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "fullmethod":"net.sourceforge.ganttproject.chart.Painter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "ownerclassid":"196", "ownerclassname":"net.sourceforge.ganttproject.chart.Painter", "sourcecode":"void paint(GraphicPrimitiveContainer.Rectangle rectangle);"},
 {"id":1915, "name":"paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text)", "fullmethod":"net.sourceforge.ganttproject.chart.Painter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text)", "ownerclassid":"196", "ownerclassname":"net.sourceforge.ganttproject.chart.Painter", "sourcecode":"void paint(GraphicPrimitiveContainer.Text next);"},
 {"id":1916, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"197", "ownerclassname":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction", "sourcecode":"public PublicHolidayDialogAction(IGanttProject project, UIFacade uiFacade) {\r\n    super(GanttProject.correctLabel(PublicHolidayDialogAction.language.getText(\"editPublicHolidays\")));\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    this.putValue(Action.SMALL_ICON, new ImageIcon(getClass().getResource(\"/icons/holidays_16.gif\")));\r\n}"},
 {"id":1917, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction.-init-()", "ownerclassid":"197", "ownerclassname":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction", "sourcecode":"1() {\r\n}"},
 {"id":1918, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"197", "ownerclassname":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction", "sourcecode":"public void actionPerformed(ActionEvent arg0) {\r\n    // myUIFacade.showDialog(createDialogComponent(), new Action[]{okAction,\r\n    // cancelAction});\r\n    final GanttDialogPublicHoliday dialog = new GanttDialogPublicHoliday(myProject, myUIFacade);\r\n    Component dialogContent = dialog.getContentPane();\r\n    myUIFacade.showDialog(dialogContent, new Action[]{ new OkAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            updateHolidays(dialog.getHolidays());\r\n        }\r\n    }, new CancelAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n        }\r\n    } });\r\n}"},
 {"id":1919, "name":"updateHolidays(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction.updateHolidays(java.util.List)", "ownerclassid":"197", "ownerclassname":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction", "sourcecode":"private void updateHolidays(List holidays) {\r\n    myProject.getActiveCalendar().getPublicHolidays().clear();\r\n    for (int i = 0; i < (holidays.size()); i++) {\r\n        myProject.getActiveCalendar().setPublicHoliDayType(((GanttCalendar) (holidays.get(i))).getTime());\r\n    }\r\n}"},
 {"id":1920, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int,float)", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int,float)", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"RegularFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth, float weekendDecreaseFactor) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n    myWeekendDecreaseFactor = weekendDecreaseFactor;\r\n}"},
 {"id":1921, "name":"constructOffsets(java.util.List,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.constructOffsets(java.util.List,java.util.List)", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"void constructOffsets(List topUnitOffsets, /* <Offset> */\r\n/* <Offset> */\r\nList bottomUnitOffsets) {\r\n    constructOffsets(topUnitOffsets, bottomUnitOffsets, 0);\r\n}"},
 {"id":1922, "name":"constructOffsets(java.util.List,java.util.List,int)", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.constructOffsets(java.util.List,java.util.List,int)", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"void constructOffsets(List topUnitOffsets, /* <Offset> */\r\nList bottomUnitOffsets, /* <Offset> */\r\nint initialEnd) {\r\n    // Number relative to the chart start. It can only be increased.\r\n    float offsetEnd = 0;\r\n    Date currentDate = myStartDate;\r\n    // We dont want to create numerous vertical stripes for weekend units (e.g., for 16\r\n    // non-working hours may produce 16 vertical stripes that looks awful). We\r\n    // accumulate consecutive weekend units instead and add just a single block.\r\n    do {\r\n        TimeFrame currentFrame = getTimeUnitStack().createTimeFrame(currentDate, getTopUnit(currentDate), myBottomUnit);\r\n        int bottomUnitCount = currentFrame.getUnitCount(getBottomUnit());\r\n        // int bottomUnit\r\n        // This will be true if there is at least one working bottom unit in this time frame\r\n        // If there are only weekend bottom units, well merge neighbor top units\r\n        // (like merging two weekend days into one continuous grey stripe)\r\n        boolean addTopUnitOffset = false;\r\n        int bottomUnitWidth = getBottomUnitWidth();\r\n        float offsetStep = getOffsetStep(currentFrame);\r\n        if (bottomUnitWidth == 0) {\r\n            bottomUnitWidth = 1;\r\n        }\r\n        for (int i = 0; i < bottomUnitCount; i++) {\r\n            Date startDate = currentFrame.getUnitStart(getBottomUnit(), i);\r\n            Date endDate = currentFrame.getUnitFinish(getBottomUnit(), i);\r\n            GPCalendar.DayType dayType = getCalendar().getDayTypeDate(startDate);\r\n            if (dayType == (GPCalendar.DayType.WEEKEND)) {\r\n                offsetEnd += offsetStep / (myWeekendDecreaseFactor);\r\n                bottomUnitOffsets.add(new ChartModelBase.Offset(getBottomUnit(), myStartDate, endDate, (initialEnd + ((int) (offsetEnd * bottomUnitWidth))), dayType));\r\n                continue;\r\n            }\r\n            addTopUnitOffset = true;\r\n            offsetEnd += offsetStep;\r\n            bottomUnitOffsets.add(new ChartModelBase.Offset(getBottomUnit(), myStartDate, endDate, (initialEnd + ((int) (offsetEnd * bottomUnitWidth))), dayType));\r\n        }\r\n        currentDate = currentFrame.getFinishDate();\r\n        if (!addTopUnitOffset) {\r\n            continue;\r\n        }\r\n        topUnitOffsets.add(new ChartModelBase.Offset(getTopUnit(), myStartDate, currentDate, (initialEnd + ((int) (offsetEnd * bottomUnitWidth))), GPCalendar.DayType.WORKING));\r\n    } while ((offsetEnd * (getBottomUnitWidth())) <= (getChartWidth()) );\r\n}"},
 {"id":1923, "name":"getBottomUnit()", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getBottomUnit()", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"protected TimeUnit getBottomUnit() {\r\n    return myBottomUnit;\r\n}"},
 {"id":1924, "name":"getBottomUnitWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getBottomUnitWidth()", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"protected int getBottomUnitWidth() {\r\n    return myBottomUnitWidth;\r\n}"},
 {"id":1925, "name":"getCalendar()", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getCalendar()", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"protected GPCalendar getCalendar() {\r\n    return myCalendar;\r\n}"},
 {"id":1926, "name":"getChartWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getChartWidth()", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"protected int getChartWidth() {\r\n    return myChartWidth;\r\n}"},
 {"id":1927, "name":"getOffsetStep(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getOffsetStep(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"protected float getOffsetStep(TimeFrame timeFrame) {\r\n    return 1;\r\n}"},
 {"id":1928, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getTimeUnitStack()", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"protected TimeUnitStack getTimeUnitStack() {\r\n    return myTimeUnitStack;\r\n}"},
 {"id":1929, "name":"getTopUnit()", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getTopUnit()", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"protected TimeUnit getTopUnit() {\r\n    return myTopUnit;\r\n}"},
 {"id":1930, "name":"getTopUnit(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getTopUnit(java.util.Date)", "ownerclassid":"198", "ownerclassname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "sourcecode":"protected TimeUnit getTopUnit(Date startDate) {\r\n    TimeUnit result = myTopUnit;\r\n    if ((myTopUnit) instanceof TimeUnitFunctionOfDate) {\r\n        if (startDate == null) {\r\n            throw new RuntimeException(\"No date is set\");\r\n        } else {\r\n            result = ((TimeUnitFunctionOfDate) (myTopUnit)).createTimeUnit(startDate);\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1931, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase,java.awt.image.BufferedImage,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedChartImage.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,java.awt.image.BufferedImage,int,int)", "ownerclassid":"199", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedChartImage", "sourcecode":"public RenderedChartImage(ChartModelBase chartModel, BufferedImage taskImage, int chartWidth, int chartHeight) {\r\n    myChartModel = chartModel;\r\n    myTaskImage = taskImage;\r\n    sampleModel = myColorModel.createCompatibleSampleModel(chartWidth, chartHeight);\r\n    colorModel = myColorModel;\r\n    minX = 0;\r\n    minY = 0;\r\n    width = chartWidth + (taskImage.getWidth());\r\n    height = chartHeight;\r\n    tileWidth = width;\r\n    tileHeight = 32;\r\n}"},
 {"id":1932, "name":"getChart(int,int,int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedChartImage.getChart(int,int,int,int,int,int)", "ownerclassid":"199", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedChartImage", "sourcecode":"private BufferedImage getChart(int offsetx, int offsety, int width, int height, int chartWidth, int chartHeight) {\r\n    BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n    Graphics g2 = result.getGraphics();\r\n    g2.setColor(Color.white);\r\n    g2.fillRect(0, 0, width, height);\r\n    g2.translate(offsetx, (-offsety));\r\n    g2.clipRect(0, offsety, width, height);\r\n    myChartModel.setBounds(new Dimension(chartWidth, chartHeight));\r\n    paintChart(g2);\r\n    // myChartModel.setTuningOptions(ChartModelImpl.TuningOptions.DEFAULT);\r\n    return result;\r\n}"},
 {"id":1933, "name":"getTile(int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedChartImage.getTile(int,int)", "ownerclassid":"199", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedChartImage", "sourcecode":"public Raster getTile(int tileX, int tileY) {\r\n    if ((myCurrentTile) != tileY) {\r\n        int offsety = tileY * (getTileHeight());\r\n        BufferedImage tile = getChart(myTaskImage.getWidth(), offsety, getTileWidth(), getTileHeight(), getWidth(), getHeight());\r\n        Graphics g = tile.getGraphics();\r\n        g.translate(0, (-offsety));\r\n        g.drawImage(myTaskImage, 0, 0, null);\r\n        myCurrentRaster = tile.getRaster().createTranslatedChild(0, (tileY * (getTileHeight())));\r\n        myCurrentTile = tileY;\r\n    }\r\n    return myCurrentRaster;\r\n}"},
 {"id":1934, "name":"getWholeImage()", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedChartImage.getWholeImage()", "ownerclassid":"199", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedChartImage", "sourcecode":"public BufferedImage getWholeImage() {\r\n    BufferedImage chartImage = getChart(0, 0, getWidth(), getHeight(), getWidth(), getHeight());\r\n    BufferedImage result = new BufferedImage(((chartImage.getWidth()) + (myTaskImage.getWidth())), getHeight(), BufferedImage.TYPE_INT_RGB);\r\n    Graphics g = result.getGraphics();\r\n    g.drawImage(myTaskImage, 0, 0, null);\r\n    g.translate(myTaskImage.getWidth(), 0);\r\n    g.drawImage(chartImage, 0, 0, null);\r\n    return result;\r\n}"},
 {"id":1935, "name":"paintChart(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedChartImage.paintChart(java.awt.Graphics)", "ownerclassid":"199", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedChartImage", "sourcecode":"protected abstract void paintChart(Graphics g);"},
 {"id":1936, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation,java.util.List,java.awt.image.BufferedImage,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedGanttChartImage.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation,java.util.List,java.awt.image.BufferedImage,int,int)", "ownerclassid":"200", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedGanttChartImage", "sourcecode":"public RenderedGanttChartImage(ChartModelBase chartModel, GanttGraphicArea.ChartImplementation chartImplementation, List tasks, BufferedImage taskImage, int chartWidth, int chartHeight) {\r\n    super(chartModel, taskImage, chartWidth, chartHeight);\r\n    myVisibleTasks = tasks;\r\n    myChartImplementation = chartImplementation;\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":1937, "name":"paintChart(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedGanttChartImage.paintChart(java.awt.Graphics)", "ownerclassid":"200", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedGanttChartImage", "sourcecode":"protected void paintChart(Graphics g) {\r\n    if (myVisibleTasks.isEmpty()) {\r\n        myChartImplementation.paintComponent(g);\r\n    } else {\r\n        myChartImplementation.paintComponent(g, myVisibleTasks);\r\n    }\r\n}"},
 {"id":1938, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation,java.awt.image.BufferedImage,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedResourceChartImage.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation,java.awt.image.BufferedImage,int,int)", "ownerclassid":"201", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedResourceChartImage", "sourcecode":"public RenderedResourceChartImage(ChartModelBase chartModel, ChartComponentBase.AbstractChartImplementation chartImplementation, BufferedImage resourceTreeImage, int chartWidth, int chartHeight) {\r\n    super(chartModel, resourceTreeImage, chartWidth, chartHeight);\r\n    myChartImplementation = chartImplementation;\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":1939, "name":"paintChart(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.RenderedResourceChartImage.paintChart(java.awt.Graphics)", "ownerclassid":"201", "ownerclassname":"net.sourceforge.ganttproject.chart.RenderedResourceChartImage", "sourcecode":"protected void paintChart(Graphics g) {\r\n    myChartImplementation.paintComponent(g);\r\n}"},
 {"id":1940, "name":"isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceChart.isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"202", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceChart", "sourcecode":"boolean isExpanded(ProjectResource resource);"},
 {"id":1941, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelResource,net.sourceforge.ganttproject.chart.ResourceChart)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.-init-(net.sourceforge.ganttproject.chart.ChartModelResource,net.sourceforge.ganttproject.chart.ResourceChart)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"public ResourceLoadRenderer(ChartModelResource model, ResourceChart resourceChart) {\r\n    super(model);\r\n    myResourcechart = resourceChart;\r\n}"},
 {"id":1942, "name":"-init-(float)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.-init-(float)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"ResourceLoad(float load) {\r\n    this.load = load;\r\n}"},
 {"id":1943, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.beforeProcessingTimeFrames()", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"public void beforeProcessingTimeFrames() {\r\n    myDistributions = /* <LoadDistribution> */\r\n    new ArrayList();\r\n    getPrimitiveContainer().clear();\r\n    ProjectResource[] resources = ((ChartModelResource) (getChartModel())).getVisibleResources();\r\n    for (int i = 0; i < (resources.length); i++) {\r\n        ProjectResource nextResource = resources[i];\r\n        LoadDistribution nextDistribution = nextResource.getLoadDistribution();\r\n        myDistributions.add(nextDistribution);\r\n    }\r\n}"},
 {"id":1944, "name":"buildTasksLoadsRectangles(java.util.List,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.buildTasksLoadsRectangles(java.util.List,int)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"/**\r\n * Renders a list of loads in a single chart row\r\n * Precondition: loads belong to the same pair (resource,task) and are ordered\r\n * by their time values\r\n */\r\nprivate void buildTasksLoadsRectangles(List partition, /* <Load> */\r\nint ypos) {\r\n    /* <Offset> */\r\n    LinkedList offsets = getOffsets();\r\n    /* <Load> */\r\n    Iterator loads = partition.iterator();\r\n    while ((loads.hasNext()) && ((offsets.getFirst()) != null)) {\r\n        final LoadDistribution.Load nextLoad = ((LoadDistribution.Load) (loads.next()));\r\n        final Date nextStart = nextLoad.startDate;\r\n        final Date nextEnd = nextLoad.endDate;\r\n        GraphicPrimitiveContainer.Rectangle nextRect = createRectangle(offsets, nextStart, nextEnd, ypos);\r\n        if (nextRect == null) {\r\n            continue;\r\n        }\r\n        String style;\r\n        if ((nextLoad.load) < 100.0F) {\r\n            style = \"load.underload\";\r\n        } else\r\n            if ((nextLoad.load) > 100.0F) {\r\n                style = \"load.overload\";\r\n            } else {\r\n                style = \"load.normal\";\r\n            }\r\n\r\n        style += \".first.last\";\r\n        nextRect.setStyle(style);\r\n        nextRect.setModelObject(new ResourceLoadRenderer.ResourceLoad(nextLoad.load));\r\n    } \r\n}"},
 {"id":1945, "name":"calculateGap(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.calculateGap(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"private int calculateGap(ProjectResource resource) {\r\n    return (resource.getAssignments().length) * (getConfig().getRowHeight());\r\n}"},
 {"id":1946, "name":"createRectangle(java.util.LinkedList,java.util.Date,java.util.Date,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.createRectangle(java.util.LinkedList,java.util.Date,java.util.Date,int)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"private GraphicPrimitiveContainer.Rectangle createRectangle(LinkedList offsets, /* <Offset> */\r\nDate start, Date end, int ypos) {\r\n    if ((start.after(getChartEndDate())) || ((end.compareTo(getChartStartDate())) <= 0)) {\r\n        return null;\r\n    }\r\n    Date lastOffsetEnd = ((ChartModelBase.Offset) (offsets.getLast())).getOffsetEnd();\r\n    if (end.after(lastOffsetEnd)) {\r\n        end = lastOffsetEnd;\r\n    }\r\n    ArrayList copy = new ArrayList(offsets);\r\n    ChartModelBase.Offset offsetBefore = null;\r\n    ChartModelBase.Offset offsetAfter = null;\r\n    LinkedList buffer = new LinkedList();\r\n    while ((offsets.getFirst()) != null) {\r\n        ChartModelBase.Offset offset = ((ChartModelBase.Offset) (offsets.getFirst()));\r\n        if ((offset.getOffsetEnd().compareTo(start)) <= 0) {\r\n            offsetBefore = offset;\r\n            buffer.clear();\r\n        }\r\n        if ((offset.getOffsetEnd().compareTo(end)) >= 0) {\r\n            offsetAfter = offset;\r\n            if (offset.getOffsetEnd().after(end)) {\r\n                offsets.addAll(0, buffer);\r\n            }\r\n            break;\r\n        }\r\n        buffer.addLast(offset);\r\n        offsets.removeFirst();\r\n    } \r\n    int rectStart;\r\n    int rectEnd;\r\n    if (offsetAfter == null) {\r\n        rectEnd = getChartModel().getBounds().width;\r\n    } else\r\n        if (offsetAfter.getOffsetEnd().equals(end)) {\r\n            rectEnd = offsetAfter.getOffsetPixels();\r\n        } else {\r\n            rectEnd = -1;\r\n        }\r\n\r\n    if (offsetBefore == null) {\r\n        rectStart = 0;\r\n    } else\r\n        if (offsetBefore.getOffsetEnd().equals(start)) {\r\n            rectStart = offsetBefore.getOffsetPixels();\r\n        } else {\r\n            rectStart = -1;\r\n        }\r\n\r\n    if ((rectStart == (-1)) || (rectEnd == (-1))) {\r\n        return createRectangle(getDefaultOffsetsInRange(offsetBefore, offsetAfter), start, end, ypos);\r\n    }\r\n    GraphicPrimitiveContainer.Rectangle nextRect = getPrimitiveContainer().createRectangle(rectStart, ypos, (rectEnd - rectStart), getConfig().getRowHeight());\r\n    return nextRect;\r\n}"},
 {"id":1947, "name":"getChartEndDate()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.getChartEndDate()", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"private Date getChartEndDate() {\r\n    return ((ChartModelBase.Offset) (getChartModel().getBottomUnitOffsets().get(((getChartModel().getBottomUnitOffsets().size()) - 1)))).getOffsetEnd();\r\n}"},
 {"id":1948, "name":"getChartStartDate()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.getChartStartDate()", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"private Date getChartStartDate() {\r\n    return getChartModel().getStartDate();\r\n}"},
 {"id":1949, "name":"getDefaultOffsetsInRange(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.getDefaultOffsetsInRange(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"private LinkedList getDefaultOffsetsInRange(/* <Offset> */\r\nChartModelBase.Offset offsetBefore, ChartModelBase.Offset offsetAfter) {\r\n    /* <Offset> */\r\n    LinkedList result = /* <Offset> */\r\n    new LinkedList(getChartModel().getDefaultUnitOffsetsInRange(offsetBefore, offsetAfter));\r\n    if (offsetBefore != null) {\r\n        result.addFirst(offsetBefore);\r\n    }\r\n    return result;\r\n}"},
 {"id":1950, "name":"getOffsets()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.getOffsets()", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"/* <Offset> */\r\nprivate LinkedList getOffsets() {\r\n    return /* <Offset> */\r\n    new LinkedList(getChartModel().getBottomUnitOffsets());\r\n}"},
 {"id":1951, "name":"render()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.render()", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"/**\r\n * Renders load distribution one by one, from top of the chart downwards\r\n * If some resource is expanded, calls rendering of the load details\r\n */\r\npublic void render() {\r\n    beforeProcessingTimeFrames();\r\n    int ypos = 0 - (getConfig().getYOffSet());\r\n    for (int i = 0; i < (myDistributions.size()); i++) {\r\n        LoadDistribution nextDistribution = ((LoadDistribution) (myDistributions.get(i)));\r\n        List loads = nextDistribution.getLoads();\r\n        renderLoads(nextDistribution.getDaysOff(), ypos);\r\n        renderLoads(loads, ypos);\r\n        if (myResourcechart.isExpanded(nextDistribution.getResource())) {\r\n            renderLoadDetails(nextDistribution, ypos);\r\n            ypos += calculateGap(nextDistribution.getResource());\r\n        }\r\n        ypos += getConfig().getRowHeight();\r\n        GraphicPrimitiveContainer.Line nextLine = getPrimitiveContainer().createLine(0, ypos, ((int) (getChartModel().getBounds().getWidth())), ypos);\r\n        nextLine.setForegroundColor(Color.GRAY);\r\n    }\r\n}"},
 {"id":1952, "name":"renderLoadDetails(net.sourceforge.ganttproject.resource.LoadDistribution,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.renderLoadDetails(net.sourceforge.ganttproject.resource.LoadDistribution,int)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"/**\r\n * Renders resource load details, that is, tasks where the resource\r\n * is assigned to, with that resource load percentage\r\n */\r\nprivate void renderLoadDetails(LoadDistribution distribution, int ypos) {\r\n    int yPos2 = ypos;\r\n    /* <Task, List<Load>> */\r\n    Map task2loads = distribution.getSeparatedTaskLoads();\r\n    ResourceAssignment[] assignments = distribution.getResource().getAssignments();\r\n    for (int i = 0; i < (assignments.length); i++) {\r\n        ResourceAssignment assignment = assignments[i];\r\n        List nextLoads = ((List) (task2loads.get(assignment.getTask())));\r\n        yPos2 += getConfig().getRowHeight();\r\n        if (nextLoads == null) {\r\n            continue;\r\n        }\r\n        buildTasksLoadsRectangles(nextLoads, yPos2);\r\n    }\r\n}"},
 {"id":1953, "name":"renderLoads(java.util.List,int)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.renderLoads(java.util.List,int)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"/**\r\n * Renders the list of loads in a single chart row\r\n * Preconditions: loads come from the same distribution and are ordered by\r\n * their time offsets\r\n */\r\nprivate void renderLoads(List loads, /* <Load> */\r\nint ypos) {\r\n    LoadDistribution.Load prevLoad = null;\r\n    LoadDistribution.Load curLoad = null;\r\n    /* <Offset> */\r\n    LinkedList offsets = getOffsets();\r\n    String suffix = \"\";\r\n    for (int curIndex = 1; (curIndex < (loads.size())) && ((offsets.getFirst()) != null); curIndex++) {\r\n        curLoad = ((LoadDistribution.Load) (loads.get(curIndex)));\r\n        prevLoad = ((LoadDistribution.Load) (loads.get((curIndex - 1))));\r\n        if ((prevLoad.load) != 0) {\r\n            renderLoads(prevLoad, curLoad, offsets, ypos, suffix);\r\n            suffix = \"\";\r\n        } else\r\n            if ((curLoad.load) > 0) {\r\n                suffix = \".first\";\r\n            }\r\n\r\n    }\r\n}"},
 {"id":1954, "name":"renderLoads(net.sourceforge.ganttproject.resource.LoadDistribution$Load,net.sourceforge.ganttproject.resource.LoadDistribution$Load,java.util.LinkedList,int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.renderLoads(net.sourceforge.ganttproject.resource.LoadDistribution$Load,net.sourceforge.ganttproject.resource.LoadDistribution$Load,java.util.LinkedList,int,java.lang.String)", "ownerclassid":"204", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "sourcecode":"/**\r\n * Renders prevLoad, with curLoad serving as a load right border marker and style hint\r\n */\r\nprivate void renderLoads(LoadDistribution.Load prevLoad, LoadDistribution.Load curLoad, LinkedList offsets, /* <Offset> */\r\nint ypos, String suffix) {\r\n    final Date prevEnd = curLoad.startDate;\r\n    final Date prevStart = prevLoad.startDate;\r\n    GraphicPrimitiveContainer.Rectangle nextRect = createRectangle(offsets, prevStart, prevEnd, ypos);\r\n    if (nextRect == null) {\r\n        return;\r\n    }\r\n    String style;\r\n    if (prevLoad.isResourceUnavailable()) {\r\n        style = \"dayoff\";\r\n    } else {\r\n        suffix += ((curLoad.load) == 0) ? \".last\" : \"\";\r\n        if ((prevLoad.load) < 100.0F) {\r\n            style = \"load.underload\";\r\n        } else\r\n            if ((prevLoad.load) > 100.0F) {\r\n                style = \"load.overload\";\r\n            } else {\r\n                style = \"load.normal\";\r\n            }\r\n\r\n        style += suffix;\r\n    }\r\n    nextRect.setStyle(style);\r\n    nextRect.setModelObject(new ResourceLoadRenderer.ResourceLoad(prevLoad.load));\r\n}"},
 {"id":1955, "name":"-init-(float)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer$ResourceLoad.-init-(float)", "ownerclassid":"203", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer$ResourceLoad", "sourcecode":"ResourceLoad(float load) {\r\n    this.load = load;\r\n}"},
 {"id":1956, "name":"getLoad()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer$ResourceLoad.getLoad()", "ownerclassid":"203", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer$ResourceLoad", "sourcecode":"public float getLoad() {\r\n    return load;\r\n}"},
 {"id":1957, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer$ResourceLoad.toString()", "ownerclassid":"203", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer$ResourceLoad", "sourcecode":"public String toString() {\r\n    return Float.toString(load);\r\n}"},
 {"id":1958, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "ownerclassid":"205", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "sourcecode":"public ResourcesRendererImpl(ChartModelImpl model) {\r\n    super(model);\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":1959, "name":"afterProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.afterProcessingTimeFrames()", "ownerclassid":"205", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "sourcecode":"public void afterProcessingTimeFrames() {\r\n    List visibleTasks = ((ChartModelImpl) (getChartModel())).getVisibleTasks();\r\n    int bottomY = getConfig().getRowHeight();\r\n    for (int i = 0; i < (visibleTasks.size()); i++) {\r\n        Task nextTask = ((Task) (visibleTasks.get(i)));\r\n        ResourceAssignment[] assignments = nextTask.getAssignments();\r\n        if ((assignments.length) > 0) {\r\n            StringBuffer resources = new StringBuffer();\r\n            for (int j = 0; j < (assignments.length); j++) {\r\n                resources.append(assignments[j].getResource().getName());\r\n                if (j < ((assignments.length) - 1)) {\r\n                    resources.append(\", \");\r\n                }\r\n            }\r\n            GraphicPrimitiveContainer.Text text = getPrimitiveContainer().createText(0, bottomY, resources.toString());\r\n            text.setStyle(\"task.resources\");\r\n        }\r\n        bottomY += getConfig().getRowHeight();\r\n    }\r\n}"},
 {"id":1960, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.beforeProcessingTimeFrames()", "ownerclassid":"205", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "sourcecode":"public void beforeProcessingTimeFrames() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1961, "name":"endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"205", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "sourcecode":"public void endTimeFrame(TimeFrame timeFrame) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1962, "name":"endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"205", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "sourcecode":"public void endUnitLine(TimeUnit timeUnit) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1963, "name":"nextTimeUnit(int)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.nextTimeUnit(int)", "ownerclassid":"205", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "sourcecode":"public void nextTimeUnit(int unitIndex) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1964, "name":"startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"205", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "sourcecode":"public void startTimeFrame(TimeFrame timeFrame) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1965, "name":"startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"205", "ownerclassname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "sourcecode":"public void startUnitLine(TimeUnit timeUnit) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":1966, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.-init-()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"public SimpleRenderedImage() {\r\n}"},
 {"id":1967, "name":"XToTileX(int)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.XToTileX(int)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Converts a pixels X coordinate into a horizontal tile index.\r\n * This is a convenience method.  No attempt is made to detect\r\n * out-of-range coordinates.\r\n *\r\n * @param x\r\n * \t\tthe X coordinate of a pixel.\r\n * @return the X index of the tile containing the pixel.\r\n */\r\npublic int XToTileX(int x) {\r\n    return SimpleRenderedImage.XToTileX(x, getTileGridXOffset(), getTileWidth());\r\n}"},
 {"id":1968, "name":"XToTileX(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.XToTileX(int,int,int)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"// Utility methods.\r\n/**\r\n * Converts a pixels X coordinate into a horizontal tile index\r\n * relative to a given tile grid layout specified by its X offset\r\n * and tile width.\r\n */\r\npublic static int XToTileX(int x, int tileGridXOffset, int tileWidth) {\r\n    x -= tileGridXOffset;\r\n    if (x < 0) {\r\n        x += 1 - tileWidth;// Force round to -infinity\r\n\r\n    }\r\n    return x / tileWidth;\r\n}"},
 {"id":1969, "name":"YToTileY(int)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.YToTileY(int)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Converts a pixels Y coordinate into a vertical tile index.\r\n * This is a convenience method.  No attempt is made to detect\r\n * out-of-range coordinates.\r\n *\r\n * @param y\r\n * \t\tthe Y coordinate of a pixel.\r\n * @return the Y index of the tile containing the pixel.\r\n */\r\npublic int YToTileY(int y) {\r\n    return SimpleRenderedImage.YToTileY(y, getTileGridYOffset(), getTileHeight());\r\n}"},
 {"id":1970, "name":"YToTileY(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.YToTileY(int,int,int)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Converts a pixels Y coordinate into a vertical tile index\r\n * relative to a given tile grid layout specified by its Y offset\r\n * and tile height.\r\n */\r\npublic static int YToTileY(int y, int tileGridYOffset, int tileHeight) {\r\n    y -= tileGridYOffset;\r\n    if (y < 0) {\r\n        y += 1 - tileHeight;// Force round to -infinity\r\n\r\n    }\r\n    return y / tileHeight;\r\n}"},
 {"id":1971, "name":"copyData(java.awt.image.WritableRaster)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.copyData(java.awt.image.WritableRaster)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Copies an arbitrary rectangular region of the RenderedImage\r\n * into a caller-supplied WritableRaster.  The region to be\r\n * computed is determined by clipping the bounds of the supplied\r\n * WritableRaster against the bounds of the image.  The supplied\r\n * WritableRaster must have a SampleModel that is compatible with\r\n * that of the image.\r\n *\r\n * <p> If the raster argument is null, the entire image will\r\n * be copied into a newly-created WritableRaster with a SampleModel\r\n * that is compatible with that of the image.\r\n *\r\n * @param dest\r\n * \t\ta WritableRaster to hold the returned portion of\r\n * \t\tthe image.\r\n * @return a reference to the supplied WritableRaster, or to a\r\nnew WritableRaster if the supplied one was null.\r\n */\r\npublic WritableRaster copyData(WritableRaster dest) {\r\n    Rectangle bounds;\r\n    Raster tile;\r\n    if (dest == null) {\r\n        bounds = getBounds();\r\n        Point p = new Point(minX, minY);\r\n        /* A SampleModel to hold the entire image. */\r\n        SampleModel sm = sampleModel.createCompatibleSampleModel(width, height);\r\n        dest = Raster.createWritableRaster(sm, p);\r\n    } else {\r\n        bounds = dest.getBounds();\r\n    }\r\n    int startX = XToTileX(bounds.x);\r\n    int startY = YToTileY(bounds.y);\r\n    int endX = XToTileX((((bounds.x) + (bounds.width)) - 1));\r\n    int endY = YToTileY((((bounds.y) + (bounds.height)) - 1));\r\n    for (int j = startY; j <= endY; j++) {\r\n        for (int i = startX; i <= endX; i++) {\r\n            tile = getTile(i, j);\r\n            Rectangle intersectRect = bounds.intersection(tile.getBounds());\r\n            Raster liveRaster = tile.createChild(intersectRect.x, intersectRect.y, intersectRect.width, intersectRect.height, intersectRect.x, intersectRect.y, null);\r\n            /* WritableRaster.setDataElements takes into account of\n            inRasters minX and minY and add these to x and y. Since\n            liveRaster has the origin at the correct location, the\n            following call should not again give these coordinates in\n            places of x and y.\n             */\r\n            dest.setDataElements(0, 0, liveRaster);\r\n        }\r\n    }\r\n    return dest;\r\n}"},
 {"id":1972, "name":"getBounds()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getBounds()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns a Rectangle indicating the image bounds.\r\n */\r\npublic Rectangle getBounds() {\r\n    return new Rectangle(getMinX(), getMinY(), getWidth(), getHeight());\r\n}"},
 {"id":1973, "name":"getColorModel()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getColorModel()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the ColorModel of the image.\r\n */\r\npublic ColorModel getColorModel() {\r\n    return colorModel;\r\n}"},
 {"id":1974, "name":"getData()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getData()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the entire image in a single Raster.  For images with\r\n * multiple tiles this will require making a copy.\r\n *\r\n * <p> The returned Raster is semantically a copy.  This means\r\n * that updates to the source image will not be reflected in the\r\n * returned Raster.  For non-writable (immutable) source images,\r\n * the returned value may be a reference to the images internal\r\n * data.  The returned Raster should be considered non-writable;\r\n * any attempt to alter its pixel data (such as by casting it to\r\n * WritableRaster or obtaining and modifying its DataBuffer) may\r\n * result in undefined behavior.  The copyData method should be\r\n * used if the returned Raster is to be modified.\r\n *\r\n * @return a Raster containing a copy of this images data.\r\n */\r\npublic Raster getData() {\r\n    Rectangle rect = new Rectangle(getMinX(), getMinY(), getWidth(), getHeight());\r\n    return getData(rect);\r\n}"},
 {"id":1975, "name":"getData(java.awt.Rectangle)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getData(java.awt.Rectangle)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns an arbitrary rectangular region of the RenderedImage\r\n * in a Raster.  The rectangle of interest will be clipped against\r\n * the image bounds.\r\n *\r\n * <p> The returned Raster is semantically a copy.  This means\r\n * that updates to the source image will not be reflected in the\r\n * returned Raster.  For non-writable (immutable) source images,\r\n * the returned value may be a reference to the images internal\r\n * data.  The returned Raster should be considered non-writable;\r\n * any attempt to alter its pixel data (such as by casting it to\r\n * WritableRaster or obtaining and modifying its DataBuffer) may\r\n * result in undefined behavior.  The copyData method should be\r\n * used if the returned Raster is to be modified.\r\n *\r\n * @param bounds\r\n * \t\tthe region of the RenderedImage to be returned.\r\n */\r\npublic Raster getData(Rectangle bounds) {\r\n    int startX = XToTileX(bounds.x);\r\n    int startY = YToTileY(bounds.y);\r\n    int endX = XToTileX((((bounds.x) + (bounds.width)) - 1));\r\n    int endY = YToTileY((((bounds.y) + (bounds.height)) - 1));\r\n    Raster tile;\r\n    if ((startX == endX) && (startY == endY)) {\r\n        tile = getTile(startX, startY);\r\n        return tile.createChild(bounds.x, bounds.y, bounds.width, bounds.height, bounds.x, bounds.y, null);\r\n    } else {\r\n        // Create a WritableRaster of the desired size\r\n        SampleModel sm = sampleModel.createCompatibleSampleModel(bounds.width, bounds.height);\r\n        // Translate it\r\n        WritableRaster dest = Raster.createWritableRaster(sm, bounds.getLocation());\r\n        for (int j = startY; j <= endY; j++) {\r\n            for (int i = startX; i <= endX; i++) {\r\n                tile = getTile(i, j);\r\n                Rectangle intersectRect = bounds.intersection(tile.getBounds());\r\n                Raster liveRaster = tile.createChild(intersectRect.x, intersectRect.y, intersectRect.width, intersectRect.height, intersectRect.x, intersectRect.y, null);\r\n                dest.setDataElements(0, 0, liveRaster);\r\n            }\r\n        }\r\n        return dest;\r\n    }\r\n}"},
 {"id":1976, "name":"getHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getHeight()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the height of the image.\r\n */\r\npublic int getHeight() {\r\n    return height;\r\n}"},
 {"id":1977, "name":"getMaxTileX()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getMaxTileX()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the horizontal index of the rightmost column of tiles.\r\n * getMaxTileX() is implemented in terms of getMaxX()\r\n * and so does not need to be implemented by subclasses.\r\n */\r\npublic int getMaxTileX() {\r\n    return XToTileX(((getMaxX()) - 1));\r\n}"},
 {"id":1978, "name":"getMaxTileY()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getMaxTileY()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the vertical index of the bottom row of tiles.  getMaxTileY()\r\n * is implemented in terms of getMaxY() and so does not need to\r\n * be implemented by subclasses.\r\n */\r\npublic int getMaxTileY() {\r\n    return YToTileY(((getMaxY()) - 1));\r\n}"},
 {"id":1979, "name":"getMaxX()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getMaxX()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the X coordinate of the column immediatetely to the\r\n * right of the rightmost column of the image.  getMaxX() is\r\n * implemented in terms of getMinX() and getWidth() and so does\r\n * not need to be implemented by subclasses.\r\n */\r\npublic final int getMaxX() {\r\n    return (getMinX()) + (getWidth());\r\n}"},
 {"id":1980, "name":"getMaxY()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getMaxY()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the Y coordinate of the row immediately below the\r\n * bottom row of the image.  getMaxY() is implemented in terms of\r\n * getMinY() and getHeight() and so does not need to be\r\n * implemented by subclasses.\r\n */\r\npublic final int getMaxY() {\r\n    return (getMinY()) + (getHeight());\r\n}"},
 {"id":1981, "name":"getMinTileX()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getMinTileX()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the horizontal index of the leftmost column of tiles.\r\n * getMinTileX() is implemented in terms of getMinX()\r\n * and so does not need to be implemented by subclasses.\r\n */\r\npublic int getMinTileX() {\r\n    return XToTileX(getMinX());\r\n}"},
 {"id":1982, "name":"getMinTileY()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getMinTileY()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the vertical index of the uppermost row of tiles.  getMinTileY()\r\n * is implemented in terms of getMinY() and so does not need to be\r\n * implemented by subclasses.\r\n */\r\npublic int getMinTileY() {\r\n    return YToTileY(getMinY());\r\n}"},
 {"id":1983, "name":"getMinX()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getMinX()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the X coordinate of the leftmost column of the image.\r\n */\r\npublic int getMinX() {\r\n    return minX;\r\n}"},
 {"id":1984, "name":"getMinY()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getMinY()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the X coordinate of the uppermost row of the image.\r\n */\r\npublic int getMinY() {\r\n    return minY;\r\n}"},
 {"id":1985, "name":"getNumXTiles()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getNumXTiles()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the number of tiles along the tile grid in the\r\n * horizontal direction.  getNumXTiles() is implemented in terms\r\n * of getMinTileX() and getMaxTileX() and so does not need to be\r\n * implemented by subclasses.\r\n */\r\npublic int getNumXTiles() {\r\n    return ((getMaxTileX()) - (getMinTileX())) + 1;\r\n}"},
 {"id":1986, "name":"getNumYTiles()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getNumYTiles()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the number of tiles along the tile grid in the vertical\r\n * direction.  getNumYTiles() is implemented in terms\r\n * of getMinTileY() and getMaxTileY() and so does not need to be\r\n * implemented by subclasses.\r\n */\r\npublic int getNumYTiles() {\r\n    return ((getMaxTileY()) - (getMinTileY())) + 1;\r\n}"},
 {"id":1987, "name":"getProperty(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getProperty(java.lang.String)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Gets a property from the property set of this image.  If the\r\n * property name is not recognized,\r\n * <code>java.awt.Image.UndefinedProperty</code> will be returned.\r\n *\r\n * @param name\r\n * \t\tthe name of the property to get, as a\r\n * \t\t<code>String</code>.  @return a reference to the property\r\n * \t\t<code>Object</code>, or the value\r\n * \t\t<code>java.awt.Image.UndefinedProperty.</code>\r\n */\r\npublic Object getProperty(String name) {\r\n    name = name.toLowerCase();\r\n    return properties.get(name);\r\n}"},
 {"id":1988, "name":"getPropertyNames()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getPropertyNames()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns a list of the properties recognized by this image.  If\r\n * no properties are available, <code>null</code> will be\r\n * returned.\r\n *\r\n * @return an array of <code>String</code>s representing valid\r\nproperty names.\r\n */\r\npublic String[] getPropertyNames() {\r\n    String[] names = new String[properties.size()];\r\n    int index = 0;\r\n    Enumeration e = properties.keys();\r\n    while (e.hasMoreElements()) {\r\n        String name = ((String) (e.nextElement()));\r\n        names[(index++)] = name;\r\n    } \r\n    return names;\r\n}"},
 {"id":1989, "name":"getPropertyNames(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getPropertyNames(java.lang.String)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns an array of <code>String</code>s recognized as names by\r\n * this property source that begin with the supplied prefix.  If\r\n * no property names match, <code>null</code> will be returned.\r\n * The comparison is done in a case-independent manner.\r\n *\r\n * <p> The default implementation calls\r\n * <code>getPropertyNames()</code> and searches the list of names\r\n * for matches.\r\n *\r\n * @return an array of <code>String</code>s giving the valid\r\nproperty names.\r\n */\r\npublic String[] getPropertyNames(String prefix) {\r\n    String[] propertyNames = getPropertyNames();\r\n    if (propertyNames == null) {\r\n        return null;\r\n    }\r\n    prefix = prefix.toLowerCase();\r\n    Vector names = new Vector();\r\n    for (int i = 0; i < (propertyNames.length); i++) {\r\n        if (propertyNames[i].startsWith(prefix)) {\r\n            names.addElement(propertyNames[i]);\r\n        }\r\n    }\r\n    if ((names.size()) == 0) {\r\n        return null;\r\n    }\r\n    // Copy the strings from the Vector over to a String array.\r\n    String[] prefixNames = new String[names.size()];\r\n    int count = 0;\r\n    for (Iterator it = names.iterator(); it.hasNext();) {\r\n        prefixNames[(count++)] = ((String) (it.next()));\r\n    }\r\n    return prefixNames;\r\n}"},
 {"id":1990, "name":"getSampleModel()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getSampleModel()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the SampleModel of the image.\r\n */\r\npublic SampleModel getSampleModel() {\r\n    return sampleModel;\r\n}"},
 {"id":1991, "name":"getSources()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getSources()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"public Vector getSources() {\r\n    return null;\r\n}"},
 {"id":1992, "name":"getTileGridXOffset()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getTileGridXOffset()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the X coordinate of the upper-left pixel of tile (0, 0).\r\n */\r\npublic int getTileGridXOffset() {\r\n    return tileGridXOffset;\r\n}"},
 {"id":1993, "name":"getTileGridYOffset()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getTileGridYOffset()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the Y coordinate of the upper-left pixel of tile (0, 0).\r\n */\r\npublic int getTileGridYOffset() {\r\n    return tileGridYOffset;\r\n}"},
 {"id":1994, "name":"getTileHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getTileHeight()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the height of a tile.\r\n */\r\npublic int getTileHeight() {\r\n    return tileHeight;\r\n}"},
 {"id":1995, "name":"getTileWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getTileWidth()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the width of a tile.\r\n */\r\npublic int getTileWidth() {\r\n    return tileWidth;\r\n}"},
 {"id":1996, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.getWidth()", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Returns the width of the image.\r\n */\r\npublic int getWidth() {\r\n    return width;\r\n}"},
 {"id":1997, "name":"tileXToX(int)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.tileXToX(int)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Converts a horizontal tile index into the X coordinate of its\r\n * upper left pixel.  This is a convenience method.  No attempt is made\r\n * to detect out-of-range indices.\r\n *\r\n * @param tx\r\n * \t\tthe horizontal index of a tile.\r\n * @return the X coordinate of the tiles upper left pixel.\r\n */\r\npublic int tileXToX(int tx) {\r\n    return (tx * (tileWidth)) + (tileGridXOffset);\r\n}"},
 {"id":1998, "name":"tileXToX(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.tileXToX(int,int,int)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Converts a horizontal tile index into the X coordinate of its\r\n * upper left pixel relative to a given tile grid layout specified\r\n * by its X offset and tile width.\r\n */\r\npublic static int tileXToX(int tx, int tileGridXOffset, int tileWidth) {\r\n    return (tx * tileWidth) + tileGridXOffset;\r\n}"},
 {"id":1999, "name":"tileYToY(int)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.tileYToY(int)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Converts a vertical tile index into the Y coordinate of its\r\n * upper left pixel.  This is a convenience method.  No attempt is made\r\n * to detect out-of-range indices.\r\n *\r\n * @param ty\r\n * \t\tthe vertical index of a tile.\r\n * @return the Y coordinate of the tiles upper left pixel.\r\n */\r\npublic int tileYToY(int ty) {\r\n    return (ty * (tileHeight)) + (tileGridYOffset);\r\n}"},
 {"id":2000, "name":"tileYToY(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.SimpleRenderedImage.tileYToY(int,int,int)", "ownerclassid":"206", "ownerclassname":"net.sourceforge.ganttproject.chart.SimpleRenderedImage", "sourcecode":"/**\r\n * Converts a vertical tile index into the Y coordinate of\r\n * its upper left pixel relative to a given tile grid layout\r\n * specified by its Y offset and tile height.\r\n */\r\npublic static int tileYToY(int ty, int tileGridYOffset, int tileHeight) {\r\n    return (ty * tileHeight) + tileGridYOffset;\r\n}"},
 {"id":2001, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int)", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"SkewedFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n}"},
 {"id":2002, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.-init-()", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"SkewedFramesWidthFunction() {\r\n}"},
 {"id":2003, "name":"constructOffsets(java.util.List,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.constructOffsets(java.util.List,java.util.List)", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"void constructOffsets(List topUnitOffsets, List bottomUnitOffsets) {\r\n    {\r\n        int offsetEnd = 0;\r\n        Date currentDate = myStartDate;\r\n        do {\r\n            final TimeUnit bottomUnit = getBottomUnit();\r\n            final TimeUnit defaultUnit = myTimeUnitStack.getDefaultTimeUnit();\r\n            TimeFrame currentFrame = myTimeUnitStack.createTimeFrame(currentDate, bottomUnit, defaultUnit);\r\n            Date endDate = currentFrame.getFinishDate();\r\n            offsetEnd += getBottomUnitWidth();\r\n            bottomUnitOffsets.add(new ChartModelBase.Offset(bottomUnit, myStartDate, endDate, offsetEnd, null));\r\n            currentDate = endDate;\r\n        } while (offsetEnd <= (getChartWidth()) );\r\n    }\r\n    {\r\n        int offsetEnd = 0;\r\n        Date currentDate = myStartDate;\r\n        SkewedFrameOffsetBuilder.SkewedFramesWidthFunction widthFunction = new SkewedFrameOffsetBuilder.SkewedFramesWidthFunction();\r\n        widthFunction.initialize();\r\n        do {\r\n            final TimeUnit topUnit = getTopUnit(currentDate);\r\n            final TimeUnit defaultUnit = myTimeUnitStack.getDefaultTimeUnit();\r\n            final TimeFrame currentFrame = myTimeUnitStack.createTimeFrame(currentDate, topUnit, defaultUnit);\r\n            Date endDate = currentFrame.getFinishDate();\r\n            offsetEnd += widthFunction.getTimeFrameWidth(currentFrame);\r\n            topUnitOffsets.add(new ChartModelBase.Offset(topUnit, myStartDate, endDate, offsetEnd, null));\r\n            currentDate = endDate;\r\n        } while (offsetEnd <= (getChartWidth()) );\r\n    }\r\n}"},
 {"id":2004, "name":"getBottomUnit()", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.getBottomUnit()", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"protected TimeUnit getBottomUnit() {\r\n    return myBottomUnit;\r\n}"},
 {"id":2005, "name":"getBottomUnitWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.getBottomUnitWidth()", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"protected int getBottomUnitWidth() {\r\n    return myBottomUnitWidth;\r\n}"},
 {"id":2006, "name":"getCalendar()", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.getCalendar()", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"protected GPCalendar getCalendar() {\r\n    return myCalendar;\r\n}"},
 {"id":2007, "name":"getChartWidth()", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.getChartWidth()", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"protected int getChartWidth() {\r\n    return myChartWidth;\r\n}"},
 {"id":2008, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.getTimeUnitStack()", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"protected TimeUnitStack getTimeUnitStack() {\r\n    return myTimeUnitStack;\r\n}"},
 {"id":2009, "name":"getTopUnit(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.getTopUnit(java.util.Date)", "ownerclassid":"208", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "sourcecode":"// protected TimeUnit getTopUnit() {\r\n// return myTopUnit;\r\n// }\r\nprotected TimeUnit getTopUnit(Date startDate) {\r\n    TimeUnit result = myTopUnit;\r\n    if ((myTopUnit) instanceof TimeUnitFunctionOfDate) {\r\n        if (startDate == null) {\r\n            throw new RuntimeException(\"No date is set\");\r\n        } else {\r\n            result = ((TimeUnitFunctionOfDate) (myTopUnit)).createTimeUnit(startDate);\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":2010, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder$SkewedFramesWidthFunction.-init-()", "ownerclassid":"207", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder$SkewedFramesWidthFunction", "sourcecode":"SkewedFramesWidthFunction() {\r\n}"},
 {"id":2011, "name":"getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder$SkewedFramesWidthFunction.getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"207", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder$SkewedFramesWidthFunction", "sourcecode":"public int getTimeFrameWidth(TimeFrame timeFrame) {\r\n    int defaultUnitsPerTopUnit = timeFrame.getUnitCount(myTimeUnitStack.getDefaultTimeUnit());\r\n    return ((int) (defaultUnitsPerTopUnit * (myWidthPerDefaultUnit)));\r\n}"},
 {"id":2012, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder$SkewedFramesWidthFunction.initialize()", "ownerclassid":"207", "ownerclassname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder$SkewedFramesWidthFunction", "sourcecode":"void initialize() {\r\n    int defaultUnitsPerBottomUnit = myBottomUnit.getAtomCount(myTimeUnitStack.getDefaultTimeUnit());\r\n    myWidthPerDefaultUnit = ((float) (getBottomUnitWidth())) / defaultUnitsPerBottomUnit;\r\n}"},
 {"id":2013, "name":"-init-(net.sourceforge.ganttproject.chart.ChartUIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl.-init-(net.sourceforge.ganttproject.chart.ChartUIConfiguration)", "ownerclassid":"212", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "sourcecode":"public StyledPainterImpl(ChartUIConfiguration configuration) {\r\n    // myGraphics = g;\r\n    myStyle2painter.put(\"task\", myTaskRectanglePainter);\r\n    myStyle2painter.put(\"task.start\", myTaskStartRectanglePainter);\r\n    myStyle2painter.put(\"task.end\", myTaskEndRectanglePainter);\r\n    myStyle2painter.put(\"task.startend\", myTaskStartEndRectanglePainter);\r\n    myConfig = configuration;\r\n    myStyle2painter.put(\"calendar.holiday\", myCalendarHolidayPainter);\r\n    myStyle2painter.put(\"task.milestone\", myMilestonePanter);\r\n    myStyle2painter.put(\"task.holiday\", myTaskHolidayRectanglePainter);\r\n    myStyle2painter.put(\"task.supertask\", myTaskSupertaskRectanglePainter);\r\n    myStyle2painter.put(\"task.supertask.start\", mySupertaskStartPainter);\r\n    myStyle2painter.put(\"task.supertask.end\", mySupertaskEndPainter);\r\n    myStyle2painter.put(\"task.projectTask\", myTaskProjectTaskRectanglePainter);\r\n    myStyle2painter.put(\"task.projectTask.start\", myProjectTaskStartPainter);\r\n    myStyle2painter.put(\"task.projectTask.end\", myProjectTaskEndPainter);\r\n    myStyle2painter.put(\"task.progress\", new StyledPainterImpl.ColouredRectanglePainter(Color.BLACK));\r\n    myStyle2painter.put(\"task.progress.end\", new StyledPainterImpl.ColouredRectanglePainter(Color.BLACK));\r\n    myStyle2painter.put(\"load.normal\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.normal.first\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.normal.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.normal.first.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.overload\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"dependency.arrow.down\", myArrowDownPainter);\r\n    myStyle2painter.put(\"load.overload.first\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.overload.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.overload.first.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"dependency.arrow.up\", myArrowUpPainter);\r\n    myStyle2painter.put(\"dependency.arrow.left\", myArrowLeftPainter);\r\n    myStyle2painter.put(\"dependency.arrow.right\", myArrowRightPainter);\r\n    myStyle2painter.put(\"dayoff\", myDayOffPainter);\r\n    myStyle2painter.put(\"load.underload\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.underload.first\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.underload.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.underload.first.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"previousStateTask\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.earlier\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.later\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.milestone\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.milestone.earlier\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.milestone.later\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.earlier\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.later\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.apart\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.apart.earlier\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.apart.later\", myPreviousStateTaskRectanglePainter);\r\n    myTextLengthCalculator = new TextLengthCalculatorImpl(myGraphics);\r\n    margin = myConfig.getMargin();\r\n}"},
 {"id":2014, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl.-init-()", "ownerclassid":"212", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "sourcecode":"1() {\r\n}"},
 {"id":2015, "name":"-init-(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl.-init-(java.awt.Color)", "ownerclassid":"212", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "sourcecode":"private ColouredRectanglePainter(Color color) {\r\n    myColor = color;\r\n}"},
 {"id":2016, "name":"paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "ownerclassid":"212", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "sourcecode":"public void paint(GraphicPrimitiveContainer.Rectangle next) {\r\n    if ((myGraphics) == null) {\r\n        throw new RuntimeException(\"Graphics is null\");\r\n    }\r\n    Graphics g = myGraphics;\r\n    StyledPainterImpl.RectanglePainter painter = ((StyledPainterImpl.RectanglePainter) (myStyle2painter.get(next.getStyle())));\r\n    if (painter != null) {\r\n        painter.paint(next);\r\n    } else {\r\n        if ((next.getBackgroundColor()) == null) {\r\n            Color foreColor = next.getForegroundColor();\r\n            if (foreColor == null) {\r\n                foreColor = Color.BLACK;\r\n            }\r\n            g.setColor(foreColor);\r\n            g.drawRect(next.myLeftX, next.myTopY, next.myWidth, next.myHeight);\r\n        } else {\r\n            g.setColor(next.getBackgroundColor());\r\n            g.fillRect(next.myLeftX, next.myTopY, next.myWidth, next.myHeight);\r\n        }\r\n    }\r\n}"},
 {"id":2017, "name":"paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text)", "ownerclassid":"212", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "sourcecode":"public void paint(GraphicPrimitiveContainer.Text next) {\r\n    Font graphicFont = myGraphics.getFont();\r\n    int requestedMaxLength = next.getMaxLength();\r\n    Color foreColor = next.getForegroundColor();\r\n    if (foreColor == null) {\r\n        foreColor = Color.BLACK;\r\n    }\r\n    myGraphics.setColor(foreColor);\r\n    if ((next.getFont()) != null) {\r\n        myGraphics.setFont(next.getFont());\r\n    } else {\r\n        myGraphics.setFont(myConfig.getChartFont());\r\n    }\r\n    // myGraphics.setFont(myConfig.getChartFont().deriveFont(10f));\r\n    if (((next.getStyle()) != null) && (next.getStyle().equals(\"text.ganttinfo\")))\r\n        myGraphics.setFont(myConfig.getChartFont());\r\n\r\n    int actualLength;\r\n    String nextTextString = next.getText();\r\n    if ((next.getModelObject()) != null) {\r\n        TimeUnitText nextText = ((TimeUnitText) (next.getModelObject()));\r\n        nextTextString = nextText.getText(requestedMaxLength, myTextLengthCalculator);\r\n        actualLength = requestedMaxLength;\r\n    } else {\r\n        actualLength = TextLengthCalculatorImpl.getTextLength(myGraphics, next.getText());\r\n        if ((requestedMaxLength >= 0) && (actualLength > requestedMaxLength)) {\r\n            return;\r\n        }\r\n    }\r\n    int fontHeight = myGraphics.getFont().getSize();\r\n    int xleft = next.getLeftX();\r\n    int ybottom = next.getBottomY();\r\n    if ((GraphicPrimitiveContainer.HAlignment.CENTER) == (next.getHAlignment())) {\r\n        xleft -= actualLength / 2;\r\n    }\r\n    if ((GraphicPrimitiveContainer.HAlignment.RIGHT) == (next.getHAlignment())) {\r\n        xleft -= actualLength;\r\n    }\r\n    if ((GraphicPrimitiveContainer.VAlignment.CENTER) == (next.getVAlignment())) {\r\n        ybottom += fontHeight / 2;\r\n    }\r\n    if ((GraphicPrimitiveContainer.VAlignment.TOP) == (next.getVAlignment())) {\r\n        ybottom += fontHeight;\r\n    }\r\n    myGraphics.drawString(nextTextString, xleft, ybottom);\r\n    myGraphics.setFont(graphicFont);\r\n}"},
 {"id":2018, "name":"setGraphics(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl.setGraphics(java.awt.Graphics)", "ownerclassid":"212", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "sourcecode":"public void setGraphics(Graphics g) {\r\n    myGraphics = g;\r\n    myTextLengthCalculator.setGraphics(g);\r\n}"},
 {"id":2019, "name":"-init-(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl$ColouredRectanglePainter.-init-(java.awt.Color)", "ownerclassid":"209", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$ColouredRectanglePainter", "sourcecode":"private ColouredRectanglePainter(Color color) {\r\n    myColor = color;\r\n}"},
 {"id":2020, "name":"paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl$ColouredRectanglePainter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "ownerclassid":"209", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$ColouredRectanglePainter", "sourcecode":"public void paint(GraphicPrimitiveContainer.Rectangle next) {\r\n    Graphics g = myGraphics;\r\n    g.setColor(myColor);\r\n    g.fillRect(next.myLeftX, next.myTopY, next.myWidth, next.myHeight);\r\n}"},
 {"id":2021, "name":"paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl$RectanglePainter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "ownerclassid":"210", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$RectanglePainter", "sourcecode":"public void paint(GraphicPrimitiveContainer.Rectangle next);"},
 {"id":2022, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter.-init-()", "ownerclassid":"211", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter", "sourcecode":"TaskRectanglePainter() {\r\n}"},
 {"id":2023, "name":"drawBorder(java.awt.Graphics,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter.drawBorder(java.awt.Graphics,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "ownerclassid":"211", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter", "sourcecode":"protected void drawBorder(Graphics g, GraphicPrimitiveContainer.Rectangle next) {\r\n    g.drawLine(((next.myLeftX) - (getCorrectionShift())), next.myTopY, ((next.getRightX()) - (getCorrectionShift())), next.myTopY);\r\n    g.drawLine(((next.myLeftX) - (getCorrectionShift())), next.getBottomY(), ((next.getRightX()) - (getCorrectionShift())), next.getBottomY());\r\n}"},
 {"id":2024, "name":"getCorrectionShift()", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter.getCorrectionShift()", "ownerclassid":"211", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter", "sourcecode":"protected int getCorrectionShift() {\r\n    return 0;\r\n}"},
 {"id":2025, "name":"getDefaultColor()", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter.getDefaultColor()", "ownerclassid":"211", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter", "sourcecode":"private Color getDefaultColor() {\r\n    return Color.BLUE;\r\n}"},
 {"id":2026, "name":"paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "fullmethod":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "ownerclassid":"211", "ownerclassname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter", "sourcecode":"public void paint(GraphicPrimitiveContainer.Rectangle next) {\r\n    Object modelObject = next.getModelObject();\r\n    if ((modelObject instanceof TaskActivity) == false) {\r\n        throw new RuntimeException(\"Model object is expected to be TaskActivity \");\r\n    }\r\n    Task task = ((TaskActivity) (modelObject)).getTask();\r\n    Color c = task.getColor();\r\n    if (c == null) {\r\n        c = getDefaultColor();\r\n    }\r\n    Graphics2D g = ((Graphics2D) (myGraphics));\r\n    g.setColor(c);\r\n    ShapePaint shapePaint = task.getShape();\r\n    if ((myConfig.isCriticalPathOn()) && (task.isCritical())) {\r\n        shapePaint = new ShapePaint(ShapeConstants.THICK_BACKSLASH, Color.BLACK, c);\r\n    }\r\n    if (shapePaint != null) {\r\n        g.setPaint(shapePaint);\r\n    }\r\n    g.fillRect(next.myLeftX, next.myTopY, next.myWidth, next.myHeight);\r\n    g.setColor(Color.black);\r\n    drawBorder(g, next);\r\n}"},
 {"id":2027, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"public TaskGridRendererImpl(ChartModelImpl model) {\r\n    super(model);\r\n}"},
 {"id":2028, "name":"afterProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.afterProcessingTimeFrames()", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"public void afterProcessingTimeFrames() {\r\n}"},
 {"id":2029, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.beforeProcessingTimeFrames()", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"public void beforeProcessingTimeFrames() {\r\n    getPrimitiveContainer().clear();\r\n    // GraphicPrimitiveContainer.Rectangle r =\r\n    // getPrimitiveContainer().createRectangle(0, 0, getWidth(),\r\n    // getHeight());\r\n    // r.setBackgroundColor(Color.WHITE);\r\n    // System.err.println(\"background rect=\"+r);\r\n    int rowHeight = getConfig().getRowHeight();\r\n    int ypos = rowHeight;\r\n    /* <Task> */\r\n    List tasks = ((ChartModelImpl) (getChartModel())).getVisibleTasks();\r\n    // boolean isLightLine = true;\r\n    for (int i = 0; i < (tasks.size()); i++) {\r\n        // GraphicPrimitiveContainer.Rectangle nextRect =\r\n        // getPrimitiveContainer().createRectangle(0, ypos,\r\n        // (int)getChartModel().getBounds().getWidth(), rowHeight-1);\r\n        // nextRect.setStyle(isLightLine ? \"grid.light\" : \"grid.dark\");\r\n        GraphicPrimitiveContainer.Line nextLine = getPrimitiveContainer().createLine(0, ypos, ((int) (getChartModel().getBounds().getWidth())), ypos);\r\n        nextLine.setForegroundColor(Color.GRAY);\r\n        // isLightLine = !isLightLine;\r\n        ypos += rowHeight;\r\n    }\r\n}"},
 {"id":2030, "name":"endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"public void endTimeFrame(TimeFrame timeFrame) {\r\n}"},
 {"id":2031, "name":"endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"public void endUnitLine(TimeUnit timeUnit) {\r\n}"},
 {"id":2032, "name":"getHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.getHeight()", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"protected int getHeight() {\r\n    return ((int) (getChartModel().getBounds().getHeight())) - (getConfig().getHeaderHeight());\r\n}"},
 {"id":2033, "name":"nextTimeUnit(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.nextTimeUnit(int)", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"public void nextTimeUnit(int unitIndex) {\r\n}"},
 {"id":2034, "name":"startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"public void startTimeFrame(TimeFrame timeFrame) {\r\n}"},
 {"id":2035, "name":"startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"213", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "sourcecode":"public void startUnitLine(TimeUnit timeUnit) {\r\n}"},
 {"id":2036, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer.-init-()", "ownerclassid":"214", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer", "sourcecode":"public TaskInteractionHintRenderer() {\r\n    draw = false;\r\n}"},
 {"id":2037, "name":"-init-(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer.-init-(java.lang.String,int,int)", "ownerclassid":"214", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer", "sourcecode":"public TaskInteractionHintRenderer(String s, int x, int y) {\r\n    this.n = s;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.draw = true;\r\n}"},
 {"id":2038, "name":"getDraw()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer.getDraw()", "ownerclassid":"214", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer", "sourcecode":"public boolean getDraw() {\r\n    return draw;\r\n}"},
 {"id":2039, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer.paint(java.awt.Graphics)", "ownerclassid":"214", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer", "sourcecode":"public void paint(Graphics g) {\r\n    if (draw) {\r\n        g.setColor(myColor);\r\n        g.fillRect(((x) - 2), y, 70, 16);\r\n        g.setColor(Color.black);\r\n        g.drawRect(((x) - 2), y, 70, 16);\r\n        g.drawString(n, x, ((y) + 12));\r\n    }\r\n}"},
 {"id":2040, "name":"setDraw(boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer.setDraw(boolean)", "ownerclassid":"214", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer", "sourcecode":"public void setDraw(boolean d) {\r\n    draw = d;\r\n}"},
 {"id":2041, "name":"setString(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer.setString(java.lang.String)", "ownerclassid":"214", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer", "sourcecode":"public void setString(String s) {\r\n    n = s;\r\n}"},
 {"id":2042, "name":"setX(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer.setX(int)", "ownerclassid":"214", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskInteractionHintRenderer", "sourcecode":"public void setX(int x) {\r\n    this.x = x;\r\n}"},
 {"id":2043, "name":"-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public TaskRendererImpl(ChartModelImpl model) {\r\n    super(model);\r\n    this.myModel = model;\r\n    getPrimitiveContainer().newLayer();\r\n    getPrimitiveContainer().newLayer();\r\n    DefaultEnumerationOption deo0 = new DefaultEnumerationOption(\"taskLabelUp\", TaskRendererImpl.ourInfoList);\r\n    DefaultEnumerationOption deo1 = new DefaultEnumerationOption(\"taskLabelDown\", TaskRendererImpl.ourInfoList);\r\n    DefaultEnumerationOption deo2 = new DefaultEnumerationOption(\"taskLabelLeft\", TaskRendererImpl.ourInfoList);\r\n    DefaultEnumerationOption deo3 = new DefaultEnumerationOption(\"taskLabelRight\", TaskRendererImpl.ourInfoList);\r\n    Mediator.addChangeValueDispatcher(deo0);\r\n    Mediator.addChangeValueDispatcher(deo1);\r\n    Mediator.addChangeValueDispatcher(deo2);\r\n    Mediator.addChangeValueDispatcher(deo3);\r\n    myLabelOptions = new EnumerationOption[]{ deo0, deo1, deo2, deo3 };\r\n    myOptionGroups = new GPOptionGroup[1];\r\n    updateOptions();\r\n}"},
 {"id":2044, "name":"-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public DependencyDrawData(TaskDependency dependency, GraphicPrimitiveContainer.GraphicPrimitive dependantPrimitive, GraphicPrimitiveContainer.GraphicPrimitive dependeePrimitive, TaskRendererImpl.PointVector dependantVector, TaskRendererImpl.PointVector dependeeVector) {\r\n    myDependency = dependency;\r\n    myDependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantPrimitive));\r\n    myDependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeePrimitive));\r\n    myDependantVector = dependantVector;\r\n    myDependeeVector = dependeeVector;\r\n}"},
 {"id":2045, "name":"-init-(java.awt.Point)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.-init-(java.awt.Point)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"protected PointVector(Point point) {\r\n    myPoint = point;\r\n}"},
 {"id":2046, "name":"addOption(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.addOption(java.lang.String)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void addOption(String name) {\r\n    TaskRendererImpl.ourInfoList.add(name);\r\n    updateOptions();\r\n}"},
 {"id":2047, "name":"afterProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.afterProcessingTimeFrames()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void afterProcessingTimeFrames() {\r\n    for (int i = 0; i < (myActivitiesOutOfView.size()); i++) {\r\n        TaskActivity next = ((TaskActivity) (myActivitiesOutOfView.get(i)));\r\n        Integer nextOrdNumber = ((Integer) (myActivity2ordinalNumber.get(next)));\r\n        int topy = ((nextOrdNumber.intValue()) * (getRowHeight())) + 4;// JA Added\r\n\r\n        GraphicPrimitiveContainer container = getContainerFor(next.getTask());\r\n        GraphicPrimitiveContainer.Rectangle rectangle = container.createRectangle((-10), topy, 1, getRowHeight());\r\n        container.bind(rectangle, next);\r\n    }\r\n    for (int i = 0; i < (myVisibleActivities.size()); i++) {\r\n        TaskActivity next = ((TaskActivity) (myVisibleActivities.get(i)));\r\n        Integer nextOrdNumber = ((Integer) (myActivity2ordinalNumber.get(next)));\r\n        int topy = ((nextOrdNumber.intValue()) * (getRowHeight())) + 4;// JA Added\r\n\r\n        GraphicPrimitiveContainer container = getContainerFor(next.getTask());\r\n        GraphicPrimitiveContainer.Rectangle rectangle = container.createRectangle(((getWidth()) + 10), topy, 1, getRowHeight());\r\n        container.bind(rectangle, next);\r\n    }\r\n    if (myDependenciesRenderingEnabled) {\r\n        createDependencyLines();\r\n    }\r\n}"},
 {"id":2048, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.beforeProcessingTimeFrames()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void beforeProcessingTimeFrames() {\r\n    getPrimitiveContainer().clear();\r\n    getPrimitiveContainer().getLayer(1).clear();\r\n    getPrimitiveContainer().getLayer(2).clear();\r\n    myActivity2ordinalNumber.clear();\r\n    myTask_WorkingRectanglesLength.clear();\r\n    myActivitiesOutOfView.clear();\r\n    myVisibleActivities = getSortedTaskActivities();\r\n    if ((myTasks) != null) {\r\n        myPreviousStateTasks = ((ArrayList) (myTasks.clone()));\r\n    }\r\n    myCurrentlyProcessed.clear();\r\n    myPosX = 0;\r\n}"},
 {"id":2049, "name":"createDependencyLines()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createDependencyLines()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void createDependencyLines() {\r\n    /* <DependencyDrawData> */\r\n    List dependencyDrawData = prepareDependencyDrawData();\r\n    drawDependencies(dependencyDrawData);\r\n}"},
 {"id":2050, "name":"createDownSideText(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createDownSideText(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void createDownSideText(TaskActivity taskActivity) {\r\n    String text;\r\n    text = getTaskLabel(taskActivity.getTask(), TaskRendererImpl.DOWN);\r\n    if ((text.length()) > 0) {\r\n        Rectangle taskRectangle = myModel.getBoundingRectangle(taskActivity.getTask());\r\n        int xOrigin = ((int) (taskRectangle.getMinX())) + (((int) (taskRectangle.getWidth())) / 2);\r\n        int yOrigin = ((int) (taskRectangle.getMaxY())) + 2;\r\n        GraphicPrimitiveContainer.Text textPrimitive = processText(xOrigin, yOrigin, text);\r\n        textPrimitive.setAlignment(GraphicPrimitiveContainer.HAlignment.CENTER, GraphicPrimitiveContainer.VAlignment.TOP);\r\n    }\r\n}"},
 {"id":2051, "name":"createLeftSideText(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createLeftSideText(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void createLeftSideText(TaskActivity taskActivity) {\r\n    String text;\r\n    text = getTaskLabel(taskActivity.getTask(), TaskRendererImpl.LEFT);\r\n    if ((text.length()) > 0) {\r\n        Rectangle taskRectangle = myModel.getBoundingRectangle(taskActivity.getTask());\r\n        int xOrigin = ((int) (taskRectangle.getMinX())) - 9;\r\n        int yOrigin = ((int) ((taskRectangle.getMaxY()) - 3));\r\n        GraphicPrimitiveContainer.Text textPrimitive = processText(xOrigin, yOrigin, text);\r\n        textPrimitive.setAlignment(GraphicPrimitiveContainer.HAlignment.RIGHT, GraphicPrimitiveContainer.VAlignment.BOTTOM);\r\n    }\r\n}"},
 {"id":2052, "name":"createRightSideText(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createRightSideText(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void createRightSideText(TaskActivity taskActivity) {\r\n    Rectangle bounds = getBoundingRectangle(taskActivity);\r\n    String text = \"\";\r\n    int xText;\r\n    int yText;\r\n    text = getTaskLabel(taskActivity.getTask(), TaskRendererImpl.RIGHT);\r\n    xText = ((int) (bounds.getMaxX())) + 9;\r\n    yText = ((int) (myModel.getBoundingRectangle(taskActivity.getTask()).getMaxY())) - 3;\r\n    GraphicPrimitiveContainer.Text textPrimitive = processText(xText, yText, text);\r\n}"},
 {"id":2053, "name":"createUpSideText(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createUpSideText(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void createUpSideText(TaskActivity taskActivity) {\r\n    String text;\r\n    text = getTaskLabel(taskActivity.getTask(), TaskRendererImpl.UP);\r\n    if ((text.length()) > 0) {\r\n        Rectangle taskRectangle = myModel.getBoundingRectangle(taskActivity.getTask());\r\n        int xOrigin = ((int) (taskRectangle.getMinX())) + (((int) (taskRectangle.getWidth())) / 2);\r\n        int yOrigin = ((int) (taskRectangle.getMinY())) - 3;\r\n        GraphicPrimitiveContainer.Text textPrimitive = processText(xOrigin, yOrigin, text);\r\n        textPrimitive.setAlignment(GraphicPrimitiveContainer.HAlignment.CENTER, GraphicPrimitiveContainer.VAlignment.BOTTOM);\r\n    }\r\n}"},
 {"id":2054, "name":"drawDependencies(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.drawDependencies(java.util.List)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"/**\r\n *\r\n *\r\n * @param dependencyDrawData\r\n * \t\t\r\n */\r\nprivate void drawDependencies(List dependencyDrawData) {\r\n    // if(dependencyDrawData.size() == 0)\r\n    // System.out.println(\"VIDE\");\r\n    GraphicPrimitiveContainer primitiveContainer = getPrimitiveContainer().getLayer(2);\r\n    int arrowLength = 7;\r\n    for (int i = 0; i < (dependencyDrawData.size()); i++) {\r\n        TaskRendererImpl.DependencyDrawData next = ((TaskRendererImpl.DependencyDrawData) (dependencyDrawData.get(i)));\r\n        if (next.myDependeeVector.reaches(next.myDependantVector.getPoint())) {\r\n            // when dependee.end <= dependant.start && dependency.type is\r\n            // any\r\n            // or dependee.end <= dependant.end && dependency.type==FF\r\n            // or dependee.start >= dependant.end && dependency.type==SF\r\n            int ysign = signum(((next.myDependantVector.getPoint().y) - (next.myDependeeVector.getPoint().y)));\r\n            Point first = new Point(next.myDependeeVector.getPoint().x, next.myDependeeVector.getPoint().y);\r\n            Point second = new Point(next.myDependantVector.getPoint((-3)).x, next.myDependeeVector.getPoint().y);\r\n            Point third = new Point(next.myDependantVector.getPoint((-3)).x, next.myDependantVector.getPoint().y);\r\n            Rectangle arrowBoundary = null;\r\n            String style;\r\n            if (next.myDependantVector.reaches(third)) {\r\n                second.x += arrowLength;\r\n                third.x += arrowLength;\r\n                Point forth = next.myDependantVector.getPoint();\r\n                primitiveContainer.createLine(third.x, third.y, forth.x, forth.y);\r\n                arrowBoundary = new Rectangle(forth.x, ((forth.y) - 3), arrowLength, 6);\r\n                style = \"dependency.arrow.left\";\r\n            } else {\r\n                third.y -= (ysign * (next.myDependantRectangle.myHeight)) / 2;\r\n                arrowBoundary = new Rectangle(((third.x) - 3), ((third.y) - (ysign > 0 ? ysign * arrowLength : 0)), 6, arrowLength);\r\n                style = (ysign > 0) ? \"dependency.arrow.down\" : \"dependency.arrow.up\";\r\n            }\r\n            primitiveContainer.createLine(first.x, first.y, second.x, second.y);\r\n            primitiveContainer.createLine(second.x, second.y, third.x, third.y);\r\n            if (arrowBoundary != null) {\r\n                GraphicPrimitiveContainer.Rectangle arrow = getPrimitiveContainer().createRectangle(arrowBoundary.x, arrowBoundary.y, arrowBoundary.width, arrowBoundary.height);\r\n                arrow.setStyle(style);\r\n            }\r\n        } else {\r\n            Point first = next.myDependeeVector.getPoint(3);\r\n            if (next.myDependantVector.reaches(first)) {\r\n                Point second = new Point(first.x, next.myDependantVector.getPoint().y);\r\n                primitiveContainer.createLine(next.myDependeeVector.getPoint().x, next.myDependeeVector.getPoint().y, first.x, first.y);\r\n                primitiveContainer.createLine(first.x, first.y, second.x, second.y);\r\n                primitiveContainer.createLine(second.x, second.y, next.myDependantVector.getPoint().x, next.myDependantVector.getPoint().y);\r\n                int xsign = signum(((next.myDependantVector.getPoint().x) - (second.x)));\r\n                Rectangle arrowBoundary = new Rectangle(next.myDependantVector.getPoint(7).x, ((next.myDependantVector.getPoint().y) - 3), (xsign * 7), 6);\r\n                GraphicPrimitiveContainer.Rectangle arrow = primitiveContainer.createRectangle(arrowBoundary.x, arrowBoundary.y, arrowBoundary.width, arrowBoundary.height);\r\n                arrow.setStyle((xsign < 0 ? \"dependency.arrow.left\" : \"dependency.arrow.right\"));\r\n            } else {\r\n                Point forth = next.myDependantVector.getPoint(3);\r\n                Point second = new Point(first.x, (((first.y) + (forth.y)) / 2));\r\n                Point third = new Point(forth.x, (((first.y) + (forth.y)) / 2));\r\n                primitiveContainer.createLine(next.myDependeeVector.getPoint().x, next.myDependeeVector.getPoint().y, first.x, first.y);\r\n                primitiveContainer.createLine(first.x, first.y, second.x, second.y);\r\n                primitiveContainer.createLine(second.x, second.y, third.x, third.y);\r\n                primitiveContainer.createLine(third.x, third.y, forth.x, forth.y);\r\n                primitiveContainer.createLine(forth.x, forth.y, next.myDependantVector.getPoint().x, next.myDependantVector.getPoint().y);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":2055, "name":"drawPreviousStateTask(net.sourceforge.ganttproject.GanttPreviousStateTask,int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.drawPreviousStateTask(net.sourceforge.ganttproject.GanttPreviousStateTask,int)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"// [dbarashev] This method violates the rule: rendering model knows (almost)\r\n// nothing about\r\n// specific rendering library (such as java.awt.*) and knows absolutely\r\n// nothing about\r\n// application framework (such as GanttGraphicArea)\r\n// I understand that it is nice to render coordinators with bold font and\r\n// linebreak. However,\r\n// there exist other ways of doing this\r\n/* private void processText(int xInit, int yInit, String text) { String save =\ntext; boolean startNew = false; StringTokenizer st = new\nStringTokenizer(text, \"{}\", true); while (st.hasMoreTokens()) { String\ntoken = st.nextToken(); if (token.equals(\"{\")) { startNew = true;\ncontinue; } if (token.equals(\"}\")) { startNew = false; continue; } if\n(startNew) { Text t =\ngetPrimitiveContainer().getLayer(2).createText(xInit, yInit, token);\nxInit += TextLengthCalculatorImpl.getTextLength(myModel\n.getArea().getGraphics(), token); t.setFont(new Font(null, Font.BOLD,\n9)); continue; } getPrimitiveContainer().getLayer(2).createText(xInit,\nyInit, token); xInit +=\nTextLengthCalculatorImpl.getTextLength(myModel.getArea() .getGraphics(),\ntoken); } }\n */\r\nprivate void drawPreviousStateTask(GanttPreviousStateTask task, int row) {\r\n    int topy = ((row * (getRowHeight())) + (getRowHeight())) - 8;\r\n    int posX = myPosX;\r\n    if ((task.getStart().getTime().compareTo(myUnitStart)) >= 0) {\r\n        TaskLength deltaLength = myModel.getTaskManager().createLength(getChartModel().getTimeUnitStack().getDefaultTimeUnit(), myUnitStart, task.getStart().getTime());\r\n        int deltaX = ((int) ((deltaLength.getLength(myCurrentUnit)) * (getChartModel().getBottomUnitWidth())));\r\n        posX += deltaX;\r\n    }\r\n    int duration = task.getEnd(myModel.getTaskManager().getCalendar()).diff(task.getStart());\r\n    TaskLength tl = myModel.getTaskManager().createLength(duration);\r\n    int length = ((int) ((tl.getLength(myCurrentUnit)) * (getChartModel().getBottomUnitWidth())));\r\n    Integer nextOrdNumber = ((Integer) (myActivity2ordinalNumber.get(task)));\r\n    GraphicPrimitiveContainer container = getPrimitiveContainer();\r\n    GraphicPrimitiveContainer.Rectangle rect = container.createRectangle(posX, topy, length, 6);\r\n    String style = \"\";\r\n    if (task.isMilestone()) {\r\n        style = \"previousStateTask.milestone\";\r\n    } else\r\n        if (task.hasNested()) {\r\n            style = \"previousStateTask.super\";\r\n            if (task.isAPart())\r\n                style = \"previousStateTask.super.apart\";\r\n\r\n        } else {\r\n            style = \"previousStateTask\";\r\n        }\r\n\r\n    if ((task.getState()) == (GanttPreviousStateTask.EARLIER))\r\n        style = style + \".earlier\";\r\n    else\r\n        if ((task.getState()) == (GanttPreviousStateTask.LATER))\r\n            style = style + \".later\";\r\n\r\n\r\n    rect.setStyle(style);\r\n}"},
 {"id":2056, "name":"endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void endTimeFrame(TimeFrame timeFrame) {\r\n    myCurrentTimeFrame = null;\r\n}"},
 {"id":2057, "name":"endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void endUnitLine(TimeUnit timeUnit) {\r\n    myCurrentUnit = null;\r\n}"},
 {"id":2058, "name":"getBoundingRectangle(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getBoundingRectangle(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private Rectangle getBoundingRectangle(TaskActivity activity) {\r\n    // System.err.println(\"[TaskRendererImpl] getBoundingRectangle():\nunit start=\"+myUnitStart+\"\nactivity=\"+activity);\r\n    int posX = myPosX;\r\n    int length;\r\n    if (false == (activity.getStart().equals(myUnitStart))) {\r\n        int deltaX = 0;\r\n        if (activity.getStart().before(myUnitStart)) {\r\n            deltaX = ((int) (getNegativeOffset(activity.getStart(), myUnitStart)));\r\n        } else\r\n            if (activity.getStart().after(myUnitStart)) {\r\n                deltaX = ((int) (getPositiveOffset(activity.getStart(), myUnitStart)));\r\n            }\r\n\r\n        posX += deltaX;\r\n        length = ((int) (getPositiveOffset(activity.getEnd(), myUnitStart))) - deltaX;\r\n        // System.err.println(\"[TaskRendererImpl] getBoundingRectangle(): delta=\"+deltaX+\" length=\"+length);\r\n    } else {\r\n        length = ((int) ((activity.getDuration().getLength(myCurrentUnit)) * (getChartModel().getBottomUnitWidth())));\r\n    }\r\n    Integer nextOrdNumber = ((Integer) (myActivity2ordinalNumber.get(activity)));\r\n    int topy = ((nextOrdNumber.intValue()) * (getRowHeight())) + 4;// JA Added\r\n\r\n    // 4 so that\r\n    // it draws\r\n    // in middle\r\n    // of row\r\n    return new Rectangle(posX, topy, length, getRowHeight());\r\n}"},
 {"id":2059, "name":"getContainerFor(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getContainerFor(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private GraphicPrimitiveContainer getContainerFor(Task task) {\r\n    boolean hasNested = ((ChartModelImpl) (getChartModel())).getTaskContainment().hasNestedTasks(task);// JA Switch to\r\n\r\n    return hasNested ? getPrimitiveContainer().getLayer(2) : getPrimitiveContainer();\r\n}"},
 {"id":2060, "name":"getNegativeOffset(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getNegativeOffset(java.util.Date,java.util.Date)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private long getNegativeOffset(Date offsetDate, Date anchorDate) {\r\n    if (getChartModel().getTimeUnitStack().getDefaultTimeUnit().equals(myCurrentUnit)) {\r\n        TaskLength length = getChartModel().getTaskManager().createLength(myCurrentUnit, offsetDate, anchorDate);\r\n        return (-(length.getLength())) * (getChartModel().getBottomUnitWidth());\r\n    }\r\n    int length = 0;\r\n    while (true) {\r\n        ChartModelBase.Offset[] offsets = getChartModel().calculateOffsets(myCurrentTimeFrame, myCurrentUnit, offsetDate, getChartModel().getTimeUnitStack().getDefaultTimeUnit(), getChartModel().getBottomUnitWidth());\r\n        assert (offsets.length) > 0;\r\n        Date lastOffsetEnd = offsets[((offsets.length) - 1)].getOffsetEnd();\r\n        if (lastOffsetEnd.before(anchorDate)) {\r\n            offsetDate = lastOffsetEnd;\r\n            length += offsets[((offsets.length) - 1)].getOffsetPixels();\r\n            continue;\r\n        }\r\n        for (int i = (offsets.length) - 1; i >= 0; i--) {\r\n            ChartModelBase.Offset offset = offsets[i];\r\n            if (offset.getOffsetEnd().after(anchorDate)) {\r\n                continue;\r\n            }\r\n            length += offset.getOffsetPixels();\r\n            break;\r\n        }\r\n        break;\r\n    } \r\n    return -length;\r\n}"},
 {"id":2061, "name":"getOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getOptionGroups()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public GPOptionGroup[] getOptionGroups() {\r\n    return myOptionGroups;\r\n}"},
 {"id":2062, "name":"getPositiveOffset(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getPositiveOffset(java.util.Date,java.util.Date)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private long getPositiveOffset(Date offsetDate, Date anchorDate) {\r\n    if (getChartModel().getTimeUnitStack().getDefaultTimeUnit().equals(myCurrentUnit)) {\r\n        TaskLength length = getChartModel().getTaskManager().createLength(myCurrentUnit, anchorDate, offsetDate);\r\n        return (length.getLength()) * (getChartModel().getBottomUnitWidth());\r\n    }\r\n    int length = 0;\r\n    while (true) {\r\n        ChartModelBase.Offset[] offsets = getChartModel().calculateOffsets(myCurrentTimeFrame, myCurrentUnit, anchorDate, getChartModel().getTimeUnitStack().getDefaultTimeUnit(), getChartModel().getBottomUnitWidth());\r\n        if ((offsets.length) == 0) {\r\n            throw new IllegalStateException((\"Failed to calculate offsets for anchorDate=\" + anchorDate));\r\n        }\r\n        Date lastOffsetEnd = offsets[((offsets.length) - 1)].getOffsetEnd();\r\n        // System.err.println(\"[TaskRendererImpl] getPositiveOffset(): |offsets|=\"+offsets.length+\" last offset end=\"+lastOffsetEnd+\" last offset pixels=\"+offsets[offsets.length-1].getOffsetPixels());\r\n        if (lastOffsetEnd.before(offsetDate)) {\r\n            anchorDate = lastOffsetEnd;\r\n            length += offsets[((offsets.length) - 1)].getOffsetPixels();\r\n            continue;\r\n        }\r\n        // int firstOffsetPixels = offsets[0].getOffsetPixels();\r\n        for (int i = 0; i < (offsets.length); i++) {\r\n            ChartModelBase.Offset offset = offsets[i];\r\n            if (false == (offset.getOffsetEnd().before(offsetDate))) {\r\n                length += offset.getOffsetPixels();\r\n                break;\r\n            }\r\n        }\r\n        break;\r\n    } \r\n    return length;\r\n}"},
 {"id":2063, "name":"getPreviousStateTaskIndex(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getPreviousStateTaskIndex(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"// return the index in the List tasks of the previous Task which have the\r\n// same ID as next\r\n// return -1 if there is no previous Task with the next ID\r\nprivate int getPreviousStateTaskIndex(Task task) {\r\n    if ((myPreviousStateTasks) == null)\r\n        return -1;\r\n\r\n    for (int i = 0; i < (myPreviousStateTasks.size()); i++) {\r\n        if ((task.getTaskID()) == (((GanttPreviousStateTask) (myPreviousStateTasks.get(i))).getId()))\r\n            return i;\r\n\r\n    }\r\n    return -1;\r\n}"},
 {"id":2064, "name":"getPrimitive(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getPrimitive(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public GraphicPrimitiveContainer.Rectangle getPrimitive(TaskActivity activity) {\r\n    return ((GraphicPrimitiveContainer.Rectangle) (getContainerFor(activity.getTask()).getPrimitive(activity)));\r\n}"},
 {"id":2065, "name":"getRowHeight()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getRowHeight()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private int getRowHeight() {\r\n    return myModel.getRowHeight();\r\n}"},
 {"id":2066, "name":"getSortedTaskActivities()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getSortedTaskActivities()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"/* <Task> */\r\nprivate List getSortedTaskActivities() {\r\n    List visibleTasks = ((ChartModelImpl) (getChartModel())).getVisibleTasks();\r\n    List visibleActivities = new ArrayList();\r\n    myActivity2ordinalNumber.clear();\r\n    for (int i = 0; i < (visibleTasks.size()); i++) {\r\n        if (visibleTasks.get(i).equals(BlankLineNode.BLANK_LINE))\r\n            continue;\r\n        // todo a revoir...\r\n\r\n        Task nextTask = ((Task) (visibleTasks.get(i)));\r\n        Integer nextOrdinal = new Integer(i);\r\n        if (nextTask == null) {\r\n            continue;// case of space\r\n\r\n        }\r\n        TaskActivity[] activities = nextTask.getActivities();\r\n        // System.err.println(\"[TaskRendererImpl]task=\"+nextTask+\"\nactivities=\"+java.util.Arrays.asList(activities));\r\n        float totalTaskLength = 0;\r\n        for (int j = 0; j < (activities.length); j++) {\r\n            final TaskActivity nextActivity = activities[j];\r\n            myActivity2ordinalNumber.put(nextActivity, nextOrdinal);\r\n            visibleActivities.add(nextActivity);\r\n            if ((!(nextActivity.getEnd().before(getChartModel().getStartDate()))) && ((nextActivity.getIntensity()) > 0)) {\r\n                totalTaskLength += (activities[j].getDuration().getLength(getChartModel().getBottomUnit())) * (getChartModel().getBottomUnitWidth());\r\n            }\r\n        }\r\n        myTask_WorkingRectanglesLength.put(nextTask, new Long(((long) ((totalTaskLength * (nextTask.getCompletionPercentage())) / 100))));\r\n    }\r\n    Set hashedVisible = new HashSet(visibleActivities);\r\n    Integer maxOrdinal = new Integer(((hashedVisible.size()) + 1));\r\n    Integer minOrdinal = new Integer((-2));\r\n    for (int i = 0; i < (visibleTasks.size()); i++) {\r\n        Task next = ((Task) (visibleTasks.get(i)));\r\n        TaskDependency[] dependencies = next.getDependenciesAsDependant().toArray();\r\n        for (int j = 0; j < (dependencies.length); j++) {\r\n            TaskDependency nextDependency = dependencies[j];\r\n            TaskActivity dependeeActivity = nextDependency.getActivityBinding().getDependeeActivity();\r\n            if (hashedVisible.contains(dependeeActivity)) {\r\n                continue;\r\n            }\r\n            Task dependeeTask = dependeeActivity.getTask();\r\n            if (false == (getChartModel().getTaskManager().getTaskHierarchy().contains(dependeeTask))) {\r\n                continue;\r\n            }\r\n            if (false == (isPathExpanded(dependeeTask))) {\r\n                continue;\r\n            }\r\n            int diff = getChartModel().getTaskManager().getTaskHierarchy().compareDocumentOrder(next, dependeeTask);\r\n            assert diff != 0;\r\n            Integer dependeePosition = (diff < 0) ? maxOrdinal : minOrdinal;\r\n            myActivity2ordinalNumber.put(dependeeActivity, dependeePosition);\r\n            visibleActivities.add(dependeeActivity);\r\n            hashedVisible.add(dependeeActivity);\r\n        }\r\n        dependencies = next.getDependenciesAsDependee().toArray();\r\n        for (int j = 0; j < (dependencies.length); j++) {\r\n            TaskDependency nextDependency = dependencies[j];\r\n            TaskActivity dependantActivity = nextDependency.getActivityBinding().getDependantActivity();\r\n            if (hashedVisible.contains(dependantActivity)) {\r\n                continue;\r\n            }\r\n            Task dependantTask = dependantActivity.getTask();\r\n            if (false == (getChartModel().getTaskManager().getTaskHierarchy().contains(dependantTask))) {\r\n                continue;\r\n            }\r\n            if (false == (isPathExpanded(dependantTask))) {\r\n                continue;\r\n            }\r\n            int diff = getChartModel().getTaskManager().getTaskHierarchy().compareDocumentOrder(next, dependantTask);\r\n            assert diff != 0;\r\n            Integer dependantPosition = (diff < 0) ? maxOrdinal : minOrdinal;\r\n            myActivity2ordinalNumber.put(dependantActivity, dependantPosition);\r\n            visibleActivities.add(dependantActivity);\r\n            hashedVisible.add(dependantActivity);\r\n        }\r\n    }\r\n    TaskRendererImpl.ourAlgorithm.sortByStartDate(visibleActivities);\r\n    return visibleActivities;\r\n}"},
 {"id":2067, "name":"getTaskLabel(net.sourceforge.ganttproject.task.Task,int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getTaskLabel(net.sourceforge.ganttproject.task.Task,int)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private String getTaskLabel(Task task, int position) {\r\n    StringBuffer result = new StringBuffer();\r\n    Object property = TaskProperties.getProperty(task, myLabelOptions[position].getValue());\r\n    if (property != null) {\r\n        if (property instanceof Boolean)\r\n            if (((Boolean) (property)).booleanValue())\r\n                result.append(lang.getText(\"yes\"));\r\n            else\r\n                result.append(lang.getText(\"no\"));\r\n\r\n        else\r\n            result.append(property);\r\n\r\n    }\r\n    return result.toString();\r\n}"},
 {"id":2068, "name":"isPathExpanded(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.isPathExpanded(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private boolean isPathExpanded(Task task) {\r\n    boolean result = true;\r\n    TaskContainmentHierarchyFacade taskHierarchy = getChartModel().getTaskManager().getTaskHierarchy();\r\n    for (Task supertask = taskHierarchy.getContainer(task); (supertask != null) && (supertask != (getChartModel().getTaskManager().getRootTask())); supertask = taskHierarchy.getContainer(supertask)) {\r\n        if (!(supertask.getExpand())) {\r\n            result = false;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":2069, "name":"isTextDown()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.isTextDown()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public boolean isTextDown() {\r\n    return ((myLabelOptions[TaskRendererImpl.DOWN].getValue()) != null) && ((myLabelOptions[TaskRendererImpl.DOWN].getValue().length()) != 0);\r\n}"},
 {"id":2070, "name":"isTextUp()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.isTextUp()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public boolean isTextUp() {\r\n    return ((myLabelOptions[TaskRendererImpl.UP].getValue()) != null) && ((myLabelOptions[TaskRendererImpl.UP].getValue().length()) != 0);\r\n}"},
 {"id":2071, "name":"isVisible(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.isVisible(int)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public boolean isVisible(int index) {\r\n    return isVisible[index];\r\n}"},
 {"id":2072, "name":"nextTimeUnit(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.nextTimeUnit(int)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void nextTimeUnit(int unitIndex) {\r\n    if ((myCurrentUnit) != null) {\r\n        Date unitStart = myCurrentTimeFrame.getUnitStart(myCurrentUnit, unitIndex);\r\n        Date unitFinish = myCurrentTimeFrame.getUnitFinish(myCurrentUnit, unitIndex);\r\n        myUnitStart = unitStart;\r\n        pullQueue(unitStart, unitFinish);\r\n        // System.err.println(\"[TaskRendererImpl] nextTimeUnit():\r\n        // unitStart=\"+unitStart+\" posX=\"+myPosX);\r\n        // if (!myCurrentlyProcessed.isEmpty()) {\r\n        // System.err.println(\"[TaskRendererImpl] nextTimeUnit():\r\n        // processing:\"+myCurrentlyProcessed);\r\n        // }\r\n        for (Iterator startedActivities = myCurrentlyProcessed.iterator(); startedActivities.hasNext(); startedActivities.remove()) {\r\n            TaskActivity nextStarted = ((TaskActivity) (startedActivities.next()));\r\n            processActivity(nextStarted);\r\n        }\r\n        if (myModel.isPrevious()) {\r\n            for (int i = 0; i < (myPreviousStateCurrentlyProcessed.size()); i++) {\r\n                Object next = myPreviousStateCurrentlyProcessed.get(i);\r\n                // System.out.println (next + \" : \" + i);\r\n                if (next != null) {\r\n                    GanttPreviousStateTask previousTask = ((GanttPreviousStateTask) (next));\r\n                    drawPreviousStateTask(previousTask, i);\r\n                }\r\n            }\r\n            myPreviousStateCurrentlyProcessed = new ArrayList();\r\n        }\r\n        myPosX += getChartModel().getBottomUnitWidth();\r\n    }\r\n}"},
 {"id":2073, "name":"prepareDependencyDrawData()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.prepareDependencyDrawData()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\nprivate List prepareDependencyDrawData() {\r\n    List result = new ArrayList();\r\n    /* <Task> */\r\n    List visibleTasks = ((ChartModelImpl) (getChartModel())).getVisibleTasks();\r\n    for (int i = 0; i < (visibleTasks.size()); i++) {\r\n        if (visibleTasks.get(i).equals(BlankLineNode.BLANK_LINE))\r\n            continue;\r\n        // todo a revoir...\r\n\r\n        Task nextTask = ((Task) (visibleTasks.get(i)));\r\n        if (nextTask != null)\r\n            prepareDependencyDrawData(nextTask, result);\r\n\r\n    }\r\n    return result;\r\n}"},
 {"id":2074, "name":"prepareDependencyDrawData(net.sourceforge.ganttproject.task.Task,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.prepareDependencyDrawData(net.sourceforge.ganttproject.task.Task,java.util.List)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void prepareDependencyDrawData(Task task, List result) {\r\n    TaskDependency[] deps = task.getDependencies().toArray();\r\n    for (int i = 0; i < (deps.length); i++) {\r\n        TaskDependency next = deps[i];\r\n        TaskDependency.ActivityBinding activityBinding = next.getActivityBinding();\r\n        TaskActivity dependant = activityBinding.getDependantActivity();\r\n        GraphicPrimitiveContainer dependantContainer = getContainerFor(dependant.getTask());\r\n        GraphicPrimitiveContainer.Rectangle dependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantContainer.getPrimitive(dependant)));\r\n        if (dependantRectangle == null) {\r\n            // System.out.println(\"dependantRectangle == null\");\r\n            continue;\r\n        }\r\n        TaskActivity dependee = activityBinding.getDependeeActivity();\r\n        GraphicPrimitiveContainer dependeeContainer = getContainerFor(dependee.getTask());\r\n        GraphicPrimitiveContainer.Rectangle dependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeeContainer.getPrimitive(dependee)));\r\n        if (dependeeRectangle == null) {\r\n            // System.out.println(\"dependeeRectangle == null\");\r\n            continue;\r\n        }\r\n        Date[] bounds = activityBinding.getAlignedBounds();\r\n        TaskRendererImpl.PointVector dependantVector;\r\n        if (bounds[0].equals(dependant.getStart())) {\r\n            dependantVector = new TaskRendererImpl.WestPointVector(new Point(dependantRectangle.myLeftX, dependantRectangle.getMiddleY()));\r\n        } else\r\n            if (bounds[0].equals(dependant.getEnd())) {\r\n                dependantVector = new TaskRendererImpl.EastPointVector(new Point(dependantRectangle.getRightX(), dependantRectangle.getMiddleY()));\r\n            } else {\r\n                throw new RuntimeException();\r\n            }\r\n\r\n        // \r\n        TaskRendererImpl.PointVector dependeeVector;\r\n        if (bounds[1].equals(dependee.getStart())) {\r\n            dependeeVector = new TaskRendererImpl.WestPointVector(new Point(dependeeRectangle.myLeftX, dependeeRectangle.getMiddleY()));\r\n        } else\r\n            if (bounds[1].equals(dependee.getEnd())) {\r\n                dependeeVector = new TaskRendererImpl.EastPointVector(new Point(dependeeRectangle.getRightX(), dependeeRectangle.getMiddleY()));\r\n            } else {\r\n                throw new RuntimeException();\r\n            }\r\n\r\n        TaskRendererImpl.DependencyDrawData data = new TaskRendererImpl.DependencyDrawData(next, dependantRectangle, dependeeRectangle, dependantVector, dependeeVector);\r\n        result.add(data);\r\n    }\r\n}"},
 {"id":2075, "name":"processActivity(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processActivity(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void processActivity(TaskActivity nextStarted) {\r\n    if (nextStarted.isLast()) {\r\n        processLastActivity(nextStarted);\r\n    } else\r\n        if (nextStarted.isFirst()) {\r\n            processFirstActivity(nextStarted);\r\n        } else {\r\n            processRegularActivity(nextStarted);\r\n        }\r\n\r\n}"},
 {"id":2076, "name":"processFirstActivity(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processFirstActivity(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void processFirstActivity(TaskActivity taskActivity) {\r\n    boolean stop = (taskActivity.getIntensity()) == 0.0F;\r\n    if (!stop) {\r\n        processRegularActivity(taskActivity);\r\n    }\r\n}"},
 {"id":2077, "name":"processLastActivity(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processLastActivity(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void processLastActivity(TaskActivity taskActivity) {\r\n    if ((taskActivity.getIntensity()) != 0.0F) {\r\n        processRegularActivity(taskActivity);\r\n    }\r\n    if (taskActivity.getTask().isMilestone()) {\r\n        return;\r\n    }\r\n    createRightSideText(taskActivity);\r\n    createDownSideText(taskActivity);\r\n    createUpSideText(taskActivity);\r\n    createLeftSideText(taskActivity);\r\n    // \r\n    // drawProjectBoundaries();\r\n}"},
 {"id":2078, "name":"processRegularActivity(net.sourceforge.ganttproject.task.TaskActivity)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processRegularActivity(net.sourceforge.ganttproject.task.TaskActivity)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private GraphicPrimitiveContainer.Rectangle processRegularActivity(TaskActivity nextStarted) {\r\n    Task nextTask = nextStarted.getTask();\r\n    if ((nextTask.isMilestone()) && (!(nextStarted.isFirst()))) {\r\n        return null;\r\n    }\r\n    Rectangle nextBounds = getBoundingRectangle(nextStarted);\r\n    int nextLength = ((int) (nextBounds.width));\r\n    int topy = nextBounds.y;\r\n    topy = topy + (((getRowHeight()) - 20) / 2);\r\n    if (myModel.isOnlyDown())\r\n        topy = topy - 6;\r\n    else\r\n        if (myModel.isOnlyUp())\r\n            topy = topy + 6;\r\n\r\n\r\n    if (myModel.isPrevious())\r\n        topy = topy - 5;\r\n\r\n    // int posX = myPosX;\r\n    GraphicPrimitiveContainer.Rectangle nextRectangle;\r\n    // // if (nextStarted.getStart().compareTo(myUnitStart)>=0) {\r\n    // TaskLength deltaLength = nextTask.getManager().createLength(\r\n    // getChartModel().getTimeUnitStack().getDefaultTimeUnit(),\r\n    // myUnitStart, nextStarted.getStart());\r\n    // \r\n    // int deltaX = (int) (deltaLength.getLength(myCurrentUnit) * getChartModel()\r\n    // .getBottomUnitWidth());\r\n    // posX += deltaX;\r\n    // System.err.println(\"[TaskRendererImpl] myUnitStart=\"+myUnitStart+\"\r\n    // nextActivity=\"+nextStarted+\" deltaX=\"+deltaX+\"\r\n    // deltaLength=\"+deltaLength.getLength(myCurrentUnit));\r\n    // }\r\n    // else {\r\n    // nextRectangle =\r\n    // getPrimitiveContainer().createRectangle(myPosX+getChartModel().getBottomUnitWidth()-nextLength,\r\n    // topy, nextLength, getRowHeight()*3/5);\r\n    // }\r\n    boolean nextHasNested = ((ChartModelImpl) (getChartModel())).getTaskContainment().hasNestedTasks(nextTask);// JA Switch to\r\n\r\n    GraphicPrimitiveContainer container = getContainerFor(nextTask);\r\n    nextRectangle = container.createRectangle(nextBounds.x, topy, ((int) (nextLength)), 12);// CodeReview: why 12, not 15?\r\n\r\n    // System.err.println(\"task=\"+nextStarted.getTask()+\" nested tasks\r\n    // length=\"+nextStarted.getTask().getNestedTasks().length);\r\n    if (nextStarted.getTask().isMilestone()) {\r\n        nextRectangle.setStyle(\"task.milestone\");\r\n    } else\r\n        if (nextTask.isProjectTask()) {\r\n            nextRectangle.setStyle(\"task.projectTask\");\r\n            if (nextStarted.isFirst()) {\r\n                // CodeReview: why 12, not 15?\r\n                GraphicPrimitiveContainer.Rectangle supertaskStart = container.createRectangle(nextRectangle.myLeftX, topy, ((int) (nextLength)), 12);\r\n                supertaskStart.setStyle(\"task.projectTask.start\");\r\n            }\r\n            if (nextStarted.isLast()) {\r\n                GraphicPrimitiveContainer.Rectangle supertaskEnd = container.createRectangle(((myPosX) - 1), topy, ((int) (nextLength)), 12);\r\n                supertaskEnd.setStyle(\"task.projectTask.end\");\r\n            }\r\n        } else\r\n            if (nextHasNested) {\r\n                nextRectangle.setStyle(\"task.supertask\");\r\n                if (nextStarted.isFirst()) {\r\n                    // CodeReview: why 12, not 15?\r\n                    GraphicPrimitiveContainer.Rectangle supertaskStart = container.createRectangle(nextRectangle.myLeftX, topy, ((int) (nextLength)), 12);\r\n                    supertaskStart.setStyle(\"task.supertask.start\");\r\n                }\r\n                if (nextStarted.isLast()) {\r\n                    // CodeReview: why 12, not 15?\r\n                    GraphicPrimitiveContainer.Rectangle supertaskEnd = container.createRectangle(nextRectangle.myLeftX, topy, ((int) (nextLength)), 12);\r\n                    supertaskEnd.setStyle(\"task.supertask.end\");\r\n                }\r\n            } else\r\n                if ((nextStarted.getIntensity()) == 0.0F) {\r\n                    nextRectangle.setStyle(\"task.holiday\");\r\n                } else {\r\n                    if ((nextStarted.isFirst()) && (nextStarted.isLast())) {\r\n                        nextRectangle.setStyle(\"task.startend\");\r\n                    } else\r\n                        if ((false == (nextStarted.isFirst())) ^ (nextStarted.isLast())) {\r\n                            nextRectangle.setStyle(\"task\");\r\n                        } else\r\n                            if (nextStarted.isFirst()) {\r\n                                nextRectangle.setStyle(\"task.start\");\r\n                            } else\r\n                                if (nextStarted.isLast()) {\r\n                                    nextRectangle.setStyle(\"task.end\");\r\n                                }\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n    if (((myProgressRenderingEnabled) && (!(nextTask.isMilestone()))) && (!nextHasNested)) {\r\n        renderProgressBar(nextStarted, nextRectangle);\r\n    }\r\n    if ((!(\"task.holiday\".equals(nextRectangle.getStyle()))) && (!(\"task.supertask\".equals(nextRectangle.getStyle())))) {\r\n        nextRectangle.setBackgroundColor(nextStarted.getTask().getColor());\r\n    }\r\n    container.bind(nextRectangle, nextStarted);\r\n    return nextRectangle;\r\n}"},
 {"id":2079, "name":"processText(int,int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processText(int,int,java.lang.String)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private GraphicPrimitiveContainer.Text processText(int xorigin, int yorigin, String text) {\r\n    GraphicPrimitiveContainer.Text res = getPrimitiveContainer().getLayer(2).createText(xorigin, yorigin, text);\r\n    res.setStyle(\"text.ganttinfo\");\r\n    return res;\r\n}"},
 {"id":2080, "name":"pullQueue(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.pullQueue(java.util.Date,java.util.Date)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void pullQueue(Date unitStart, Date unitFinish) {\r\n    for (Iterator activities = myVisibleActivities.iterator(); activities.hasNext();) {\r\n        TaskActivity next = ((TaskActivity) (activities.next()));\r\n        if (next.getEnd().before(getChartModel().getStartDate())) {\r\n            myActivitiesOutOfView.add(next);\r\n            activities.remove();\r\n            continue;\r\n        }\r\n        if ((next.getStart().before(getChartModel().getStartDate())) && (next.getEnd().after(getChartModel().getEndDate()))) {\r\n            myCurrentlyProcessed.add(next);\r\n            activities.remove();\r\n            continue;\r\n        }\r\n        if (next.getStart().after(unitFinish)) {\r\n            break;\r\n        }\r\n        if ((((next.getStart().compareTo(unitStart)) >= 0) && ((next.getStart().compareTo(unitFinish)) < 0)) || (((next.getEnd().compareTo(unitStart)) >= 0) && ((next.getEnd().compareTo(unitFinish)) < 0))) {\r\n            // System.err.println(\"pullQueue: \nnextActivity=\"+next+\"\ntask=\"+next.getTask()+\" \nunitStart=\"+unitStart+\" unitFinish=\"+unitFinish);\r\n            myCurrentlyProcessed.add(next);\r\n            activities.remove();\r\n        }\r\n    }\r\n    // initialize the myPreviousCurrentlyProcessed List\r\n    // each index value matches with the row\r\n    // null value means there is no previous task for this row or\r\n    // the previous task is not between unitStart & unitFinish\r\n    if (myModel.isPrevious()) {\r\n        List visibleTasks = ((ChartModelImpl) (getChartModel())).getVisibleTasks();\r\n        for (int i = 0; i < (visibleTasks.size()); i++) {\r\n            Task task = ((Task) (visibleTasks.get(i)));\r\n            int index = getPreviousStateTaskIndex(task);\r\n            GPCalendar calendar = myModel.getTaskManager().getCalendar();\r\n            if (index != (-1)) {\r\n                GanttPreviousStateTask previousStateTask = ((GanttPreviousStateTask) (myPreviousStateTasks.get(index)));\r\n                previousStateTask.setState(task, calendar);\r\n                if (previousStateTask.getStart().after(unitFinish)) {\r\n                    myPreviousStateCurrentlyProcessed.add(null);\r\n                } else\r\n                    // )|| previousStateTask.getEnd(\r\n                    // calendar)\r\n                    // .getTime().compareTo(unitStart) > 0\r\n                    // && previousStateTask.getEnd(\r\n                    // calendar)\r\n                    // .getTime().compareTo(unitFinish) < 0)\r\n                    if (((previousStateTask.getStart().getTime().compareTo(unitStart)) >= 0) && ((previousStateTask.getStart().getTime().compareTo(unitFinish)) < 0)) {\r\n                        myPreviousStateCurrentlyProcessed.add(previousStateTask);\r\n                        myPreviousStateTasks.remove(index);\r\n                    } else// if just a part of the previous task is visible\r\n\r\n                        if (((previousStateTask.getStart().getTime().compareTo(unitStart)) < 0) && ((previousStateTask.getEnd(calendar).getTime().compareTo(unitStart)) > 0)) {\r\n                            GanttCalendar newStart = new GanttCalendar(unitStart);\r\n                            int id = previousStateTask.getId();\r\n                            int duration = (previousStateTask.getDuration()) - (newStart.diff(previousStateTask.getStart()));\r\n                            int diff = newStart.diff(previousStateTask.getStart());\r\n                            for (int j = 0; j < diff; j++) {\r\n                                if (calendar.isNonWorkingDay(previousStateTask.getStart().newAdd(j).getTime())) {\r\n                                    duration++;\r\n                                }\r\n                            }\r\n                            boolean isMilestone = previousStateTask.isMilestone();\r\n                            boolean hasNested = previousStateTask.hasNested();\r\n                            GanttPreviousStateTask partOfPreviousTask = new GanttPreviousStateTask(id, newStart, duration, isMilestone, hasNested);\r\n                            partOfPreviousTask.setState(task, calendar);\r\n                            partOfPreviousTask.setIsAPart(true);\r\n                            myPreviousStateCurrentlyProcessed.add(partOfPreviousTask);\r\n                            myPreviousStateTasks.remove(index);\r\n                        } else\r\n                            myPreviousStateCurrentlyProcessed.add(null);\r\n\r\n\r\n\r\n            } else\r\n                myPreviousStateCurrentlyProcessed.add(null);\r\n\r\n        }\r\n    }\r\n}"},
 {"id":2081, "name":"removeOption(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.removeOption(java.lang.String)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void removeOption(String name) {\r\n    TaskRendererImpl.ourInfoList.remove(name);\r\n    updateOptions();\r\n}"},
 {"id":2082, "name":"renderProgressBar(net.sourceforge.ganttproject.task.TaskActivity,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.renderProgressBar(net.sourceforge.ganttproject.task.TaskActivity,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void renderProgressBar(TaskActivity nextStarted, GraphicPrimitiveContainer.Rectangle nextActivityRectangle) {\r\n    if ((nextStarted.getIntensity()) == 0) {\r\n        return;\r\n    }\r\n    Task nextTask = nextStarted.getTask();\r\n    int nextLength = nextActivityRectangle.myWidth;\r\n    Long workingRectanglesLength = ((Long) (myTask_WorkingRectanglesLength.get(nextTask)));\r\n    if (workingRectanglesLength != null) {\r\n        long nextProgressLength = nextLength;\r\n        String style;\r\n        if ((workingRectanglesLength.longValue()) > nextLength) {\r\n            myTask_WorkingRectanglesLength.put(nextTask, new Long(((workingRectanglesLength.longValue()) - nextLength)));\r\n            style = \"task.progress\";\r\n        } else {\r\n            nextProgressLength = workingRectanglesLength.longValue();\r\n            myTask_WorkingRectanglesLength.remove(nextTask);\r\n            style = \"task.progress.end\";\r\n        }\r\n        int nextMidY = nextActivityRectangle.getMiddleY();\r\n        GraphicPrimitiveContainer.GraphicPrimitive nextProgressRect = getPrimitiveContainer().getLayer(1).createRectangle(nextActivityRectangle.myLeftX, (nextMidY - 1), ((int) (nextProgressLength)), 3);\r\n        nextProgressRect.setStyle(style);\r\n        getPrimitiveContainer().getLayer(1).bind(nextProgressRect, nextTask);\r\n    }\r\n}"},
 {"id":2083, "name":"setDependenciesRenderingEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.setDependenciesRenderingEnabled(boolean)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void setDependenciesRenderingEnabled(boolean renderDependencies) {\r\n    myDependenciesRenderingEnabled = renderDependencies;\r\n}"},
 {"id":2084, "name":"setPreviousStateTasks(java.util.ArrayList)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.setPreviousStateTasks(java.util.ArrayList)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void setPreviousStateTasks(ArrayList tasks) {\r\n    myTasks = tasks;\r\n}"},
 {"id":2085, "name":"setProgressRenderingEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.setProgressRenderingEnabled(boolean)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void setProgressRenderingEnabled(boolean renderProgress) {\r\n    myProgressRenderingEnabled = renderProgress;\r\n}"},
 {"id":2086, "name":"signum(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.signum(int)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private final int signum(int value) {\r\n    if (value == 0) {\r\n        return 0;\r\n    }\r\n    return value < 0 ? -1 : 1;\r\n}"},
 {"id":2087, "name":"startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void startTimeFrame(TimeFrame timeFrame) {\r\n    myCurrentTimeFrame = timeFrame;\r\n}"},
 {"id":2088, "name":"startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"public void startUnitLine(TimeUnit timeUnit) {\r\n    if ((myCurrentTimeFrame.getBottomUnit()) == timeUnit) {\r\n        myCurrentUnit = timeUnit;\r\n    }\r\n}"},
 {"id":2089, "name":"updateOptions()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl.updateOptions()", "ownerclassid":"219", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "sourcecode":"private void updateOptions() {\r\n    myDetailsOptions = new GPOption[myLabelOptions.length];\r\n    System.arraycopy(myLabelOptions, 0, myDetailsOptions, 0, myLabelOptions.length);\r\n    myOptionGroups[0] = new ChartOptionGroup(\"ganttChartDetails\", myDetailsOptions, myModel.getOptionEventDispatcher());\r\n}"},
 {"id":2090, "name":"-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "ownerclassid":"215", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData", "sourcecode":"public DependencyDrawData(TaskDependency dependency, GraphicPrimitiveContainer.GraphicPrimitive dependantPrimitive, GraphicPrimitiveContainer.GraphicPrimitive dependeePrimitive, TaskRendererImpl.PointVector dependantVector, TaskRendererImpl.PointVector dependeeVector) {\r\n    myDependency = dependency;\r\n    myDependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantPrimitive));\r\n    myDependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeePrimitive));\r\n    myDependantVector = dependantVector;\r\n    myDependeeVector = dependeeVector;\r\n}"},
 {"id":2091, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData.toString()", "ownerclassid":"215", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData", "sourcecode":"public String toString() {\r\n    return ((((((\"From activity=\" + (myDependency.getActivityBinding().getDependantActivity())) + \" (vector=\") + (myDependantVector)) + \")\n to activity=\") + (myDependency.getActivityBinding().getDependeeActivity())) + \" (vector=\") + (myDependeeVector);\r\n}"},
 {"id":2092, "name":"-init-(java.awt.Point)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$EastPointVector.-init-(java.awt.Point)", "ownerclassid":"216", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$EastPointVector", "sourcecode":"protected EastPointVector(Point point) {\r\n    super(point);\r\n}"},
 {"id":2093, "name":"getPoint(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$EastPointVector.getPoint(int)", "ownerclassid":"216", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$EastPointVector", "sourcecode":"Point getPoint(int diff) {\r\n    return new Point(((getPoint().x) + diff), getPoint().y);\r\n}"},
 {"id":2094, "name":"reaches(java.awt.Point)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$EastPointVector.reaches(java.awt.Point)", "ownerclassid":"216", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$EastPointVector", "sourcecode":"boolean reaches(Point targetPoint) {\r\n    return (targetPoint.x) >= (getPoint().x);\r\n}"},
 {"id":2095, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$EastPointVector.toString()", "ownerclassid":"216", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$EastPointVector", "sourcecode":"public String toString() {\r\n    return \">=\" + (getPoint().toString());\r\n}"},
 {"id":2096, "name":"-init-(java.awt.Point)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector.-init-(java.awt.Point)", "ownerclassid":"217", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector", "sourcecode":"protected PointVector(Point point) {\r\n    myPoint = point;\r\n}"},
 {"id":2097, "name":"getPoint()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector.getPoint()", "ownerclassid":"217", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector", "sourcecode":"Point getPoint() {\r\n    return myPoint;\r\n}"},
 {"id":2098, "name":"getPoint(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector.getPoint(int)", "ownerclassid":"217", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector", "sourcecode":"abstract Point getPoint(int i);"},
 {"id":2099, "name":"reaches(java.awt.Point)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector.reaches(java.awt.Point)", "ownerclassid":"217", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector", "sourcecode":"abstract boolean reaches(Point targetPoint);"},
 {"id":2100, "name":"-init-(java.awt.Point)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$WestPointVector.-init-(java.awt.Point)", "ownerclassid":"218", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$WestPointVector", "sourcecode":"protected WestPointVector(Point point) {\r\n    super(point);\r\n}"},
 {"id":2101, "name":"getPoint(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$WestPointVector.getPoint(int)", "ownerclassid":"218", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$WestPointVector", "sourcecode":"Point getPoint(int diff) {\r\n    return new Point(((getPoint().x) - diff), getPoint().y);\r\n}"},
 {"id":2102, "name":"reaches(java.awt.Point)", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$WestPointVector.reaches(java.awt.Point)", "ownerclassid":"218", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$WestPointVector", "sourcecode":"boolean reaches(Point targetPoint) {\r\n    return (targetPoint.x) <= (getPoint().x);\r\n}"},
 {"id":2103, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.chart.TaskRendererImpl$WestPointVector.toString()", "ownerclassid":"218", "ownerclassname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$WestPointVector", "sourcecode":"public String toString() {\r\n    return \"<=\" + (getPoint().toString());\r\n}"},
 {"id":2104, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.-init-()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"TestChart() {\r\n}"},
 {"id":2105, "name":"addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public void addSelectionListener(ChartSelectionListener listener) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2106, "name":"canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public IStatus canPaste(ChartSelection selection) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2107, "name":"createCopy()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.createCopy()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public Chart createCopy() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2108, "name":"getAdapter(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getAdapter(java.lang.Class)", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public Object getAdapter(Class arg0) {\r\n    return null;\r\n}"},
 {"id":2109, "name":"getChart(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public BufferedImage getChart(GanttExportSettings settings) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":2110, "name":"getEndDate()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getEndDate()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public Date getEndDate() {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":2111, "name":"getIcon()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getIcon()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public Icon getIcon() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2112, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getName()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public String getName() {\r\n    return \"Test chart\";\r\n}"},
 {"id":2113, "name":"getOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getOptionGroups()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public GPOptionGroup[] getOptionGroups() {\r\n    return null;\r\n}"},
 {"id":2114, "name":"getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public RenderedImage getRenderedImage(GanttExportSettings settings) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2115, "name":"getSelection()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getSelection()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public ChartSelection getSelection() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2116, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.getStartDate()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public Date getStartDate() {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":2117, "name":"paste(net.sourceforge.ganttproject.chart.ChartSelection)", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public void paste(ChartSelection selection) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2118, "name":"removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public void removeSelectionListener(ChartSelectionListener listener) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2119, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.reset()", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public void reset() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2120, "name":"setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.chart.TestChart.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"220", "ownerclassname":"net.sourceforge.ganttproject.chart.TestChart", "sourcecode":"public void setTaskManager(TaskManager taskManager) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2121, "name":"afterProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.afterProcessingTimeFrames()", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"void afterProcessingTimeFrames();"},
 {"id":2122, "name":"beforeProcessingTimeFrames()", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.beforeProcessingTimeFrames()", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"void beforeProcessingTimeFrames();"},
 {"id":2123, "name":"endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"void endTimeFrame(TimeFrame timeFrame);"},
 {"id":2124, "name":"endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"void endUnitLine(TimeUnit timeUnit);"},
 {"id":2125, "name":"isEnabled()", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.isEnabled()", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\nboolean isEnabled();"},
 {"id":2126, "name":"nextTimeUnit(int)", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.nextTimeUnit(int)", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"void nextTimeUnit(int unitIndex);"},
 {"id":2127, "name":"setEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.setEnabled(boolean)", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"void setEnabled(boolean enabled);"},
 {"id":2128, "name":"startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"void startTimeFrame(TimeFrame timeFrame);"},
 {"id":2129, "name":"startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"221", "ownerclassname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "sourcecode":"void startUnitLine(TimeUnit timeUnit);"},
 {"id":2130, "name":"-init-(net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GPViewManager)", "fullmethod":"net.sourceforge.ganttproject.chart.ToggleChartAction.-init-(net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GPViewManager)", "ownerclassid":"222", "ownerclassname":"net.sourceforge.ganttproject.chart.ToggleChartAction", "sourcecode":"public ToggleChartAction(Chart chart, GPViewManager viewManager) {\r\n    myChart = chart;\r\n    putValue(Action.NAME, getLocalizedName());\r\n    // putValue(Action.SMALL_ICON,chart.getIcon());\r\n    myView = viewManager.createView(chart, chart.getIcon());\r\n    myViewManager = viewManager;\r\n}"},
 {"id":2131, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.chart.ToggleChartAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"222", "ownerclassname":"net.sourceforge.ganttproject.chart.ToggleChartAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    System.err.println((\"[ToggleChartAction] actionPerformed: toggling chart=\" + (myChart.getName())));\r\n    myView.setVisible((!(myView.isVisible())));\r\n}"},
 {"id":2132, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.chart.ToggleChartAction.getIconFilePrefix()", "ownerclassid":"222", "ownerclassname":"net.sourceforge.ganttproject.chart.ToggleChartAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return null;\r\n}"},
 {"id":2133, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.chart.ToggleChartAction.getLocalizedName()", "ownerclassid":"222", "ownerclassname":"net.sourceforge.ganttproject.chart.ToggleChartAction", "sourcecode":"protected String getLocalizedName() {\r\n    return (myChart) == null ? null : myChart.getName();\r\n}"},
 {"id":2134, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.chart.VisibleNodesFilter.-init-()", "ownerclassid":"223", "ownerclassname":"net.sourceforge.ganttproject.chart.VisibleNodesFilter", "sourcecode":"VisibleNodesFilter() {\r\n}"},
 {"id":2135, "name":"getVisibleNodes(javax.swing.JTree,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.chart.VisibleNodesFilter.getVisibleNodes(javax.swing.JTree,int,int,int)", "ownerclassid":"223", "ownerclassname":"net.sourceforge.ganttproject.chart.VisibleNodesFilter", "sourcecode":"public List getVisibleNodes(/* <Task> */\r\nJTree jtree, int minHeight, int maxHeight, int nodeHeight) {\r\n    List preorderedNodes = Collections.list(((DefaultMutableTreeNode) (jtree.getModel().getRoot())).preorderEnumeration());\r\n    List result = new ArrayList();\r\n    int currentHeight = 0;\r\n    for (int i = 1; i < (preorderedNodes.size()); i++) {\r\n        DefaultMutableTreeNode nextNode = ((DefaultMutableTreeNode) (preorderedNodes.get(i)));\r\n        if (false == ((nextNode.getUserObject()) instanceof Task)) {\r\n            continue;\r\n        }\r\n        if (((currentHeight + nodeHeight) > minHeight) && (jtree.isVisible(new TreePath(nextNode.getPath())))) {\r\n            result.add(nextNode.getUserObject());\r\n        }\r\n        if (jtree.isVisible(new TreePath(nextNode.getPath()))) {\r\n            currentHeight += nodeHeight;\r\n        }\r\n        if (currentHeight > (minHeight + maxHeight)) {\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":2136, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.item.ChartItem.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"224", "ownerclassname":"net.sourceforge.ganttproject.chart.item.ChartItem", "sourcecode":"protected ChartItem(Task task) {\r\n    myTask = task;\r\n}"},
 {"id":2137, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.chart.item.ChartItem.getTask()", "ownerclassid":"224", "ownerclassname":"net.sourceforge.ganttproject.chart.item.ChartItem", "sourcecode":"public Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":2138, "name":"-init-(net.sourceforge.ganttproject.task.Task,boolean)", "fullmethod":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem.-init-(net.sourceforge.ganttproject.task.Task,boolean)", "ownerclassid":"225", "ownerclassname":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "sourcecode":"public TaskBoundaryChartItem(Task task, boolean isStart) {\r\n    super(task);\r\n    this.isStart = isStart;\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":2139, "name":"isStartBoundary()", "fullmethod":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem.isStartBoundary()", "ownerclassid":"225", "ownerclassname":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "sourcecode":"public boolean isStartBoundary() {\r\n    return isStart;\r\n}"},
 {"id":2140, "name":"-init-(int,int,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem.-init-(int,int,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"226", "ownerclassname":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem", "sourcecode":"public TaskProgressChartItem(int posX, int unitWidth, TimeUnit bottomUnit, Task task) {\r\n    super(task);\r\n    myPosX = posX;\r\n    myUnitWidth = unitWidth;\r\n    myTimeUnit = bottomUnit;\r\n    myTaskLength = task.getDuration().getLength(bottomUnit);\r\n}"},
 {"id":2141, "name":"getProgressDelta(int)", "fullmethod":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem.getProgressDelta(int)", "ownerclassid":"226", "ownerclassname":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem", "sourcecode":"public float getProgressDelta(int currentX) {\r\n    int deltaX = currentX - (myPosX);\r\n    float deltaUnits = ((float) (deltaX)) / ((float) (myUnitWidth));\r\n    return (100 * deltaUnits) / (myTaskLength);\r\n}"},
 {"id":2142, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"227", "ownerclassname":"net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem", "sourcecode":"public TaskRegularAreaChartItem(Task task) {\r\n    super(task);\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":2143, "name":"-init-(int)", "fullmethod":"net.sourceforge.ganttproject.delay.Delay.-init-(int)", "ownerclassid":"228", "ownerclassname":"net.sourceforge.ganttproject.delay.Delay", "sourcecode":"private Delay(int type) {\r\n    myType = type;\r\n}"},
 {"id":2144, "name":"getDelay(int)", "fullmethod":"net.sourceforge.ganttproject.delay.Delay.getDelay(int)", "ownerclassid":"228", "ownerclassname":"net.sourceforge.ganttproject.delay.Delay", "sourcecode":"public static Delay getDelay(int type) {\r\n    return new Delay(type);\r\n}"},
 {"id":2145, "name":"getType()", "fullmethod":"net.sourceforge.ganttproject.delay.Delay.getType()", "ownerclassid":"228", "ownerclassname":"net.sourceforge.ganttproject.delay.Delay", "sourcecode":"public int getType() {\r\n    return myType;\r\n}"},
 {"id":2146, "name":"setType(int)", "fullmethod":"net.sourceforge.ganttproject.delay.Delay.setType(int)", "ownerclassid":"228", "ownerclassname":"net.sourceforge.ganttproject.delay.Delay", "sourcecode":"public void setType(int type) {\r\n    myType = type;\r\n}"},
 {"id":2147, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public DelayManager(TaskManager taskManager, GanttTree2 tree) {\r\n    myObservers = new ArrayList();\r\n    myTaskManager = taskManager;\r\n    myRoot = ((TaskNode) (tree.getRoot()));\r\n    myTree = tree;\r\n    Mediator.getUndoManager().addUndoableEditListener(this);\r\n}"},
 {"id":2148, "name":"addObserver(net.sourceforge.ganttproject.delay.DelayObserver)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.addObserver(net.sourceforge.ganttproject.delay.DelayObserver)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void addObserver(DelayObserver observer) {\r\n    myObservers.add(observer);\r\n}"},
 {"id":2149, "name":"calculateDelay(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.calculateDelay(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"/**\r\n * The delay is calculated as follow : The reference date is today. The\r\n * check is performed on the end date of the task. There could be a delay\r\n * only if percentage completion is not equal to 100%. If task end date <\r\n * today && completion < 100 there is a delay. The delay is critical is the\r\n * task is critical.\r\n *\r\n * @param t\r\n * \t\tThe task.\r\n * @return The calculated delay\r\n */\r\nprivate Delay calculateDelay(Task t) {\r\n    Delay res = Delay.getDelay(Delay.NONE);\r\n    int completionPercentage = t.getCompletionPercentage();\r\n    if ((t.isMilestone()) || (completionPercentage == 100))\r\n        return res;\r\n\r\n    Date endDate = t.getEnd().getTime();\r\n    if (endDate.before(myToday))\r\n        if (t.isCritical())\r\n            res.setType(Delay.CRITICAL);\r\n        else\r\n            res.setType(Delay.NORMAL);\r\n\r\n\r\n    return res;\r\n}"},
 {"id":2150, "name":"dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void dependencyAdded(TaskDependencyEvent e) {\r\n    // ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":2151, "name":"dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void dependencyRemoved(TaskDependencyEvent e) {\r\n    // ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":2152, "name":"fireDelayObservation()", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.fireDelayObservation()", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void fireDelayObservation() {\r\n    // System.err.println(\"fireDelayObservation\");\r\n    myToday = new Date();\r\n    if (ourCriticProcess) {\r\n        ourCriticProcess = false;\r\n        myTaskManager.processCriticalPath(myRoot);\r\n        ArrayList projectTasks = myTree.getProjectTasks();\r\n        if ((projectTasks.size()) != 0)\r\n            for (int i = 0; i < (projectTasks.size()); i++)\r\n                myTaskManager.processCriticalPath(((TaskNode) (projectTasks.get(i))));\r\n\r\n\r\n        // System.out.println(\"critical path processed\");\r\n    }\r\n    Iterator itTasks = Arrays.asList(myTaskManager.getTasks()).iterator();\r\n    while (itTasks.hasNext()) {\r\n        Task task = ((Task) (itTasks.next()));\r\n        Delay delay = calculateDelay(task);\r\n        Iterator itObservers = myObservers.iterator();\r\n        while (itObservers.hasNext()) {\r\n            DelayObserver observer = ((DelayObserver) (itObservers.next()));\r\n            observer.setDelay(task, delay);\r\n            // System.out.println(\"delay \" + delay.getType() + \" (critical = \"+delay.CRITICAL+\")\");\r\n        } \r\n    } \r\n}"},
 {"id":2153, "name":"removeObserver(net.sourceforge.ganttproject.delay.DelayObserver)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.removeObserver(net.sourceforge.ganttproject.delay.DelayObserver)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void removeObserver(DelayObserver observer) {\r\n    myObservers.remove(observer);\r\n}"},
 {"id":2154, "name":"taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void taskAdded(TaskHierarchyEvent e) {\r\n    // ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":2155, "name":"taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void taskMoved(TaskHierarchyEvent e) {\r\n}"},
 {"id":2156, "name":"taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void taskProgressChanged(TaskPropertyEvent e) {\r\n    fireDelayObservation();\r\n}"},
 {"id":2157, "name":"taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void taskPropertiesChanged(TaskPropertyEvent e) {\r\n}"},
 {"id":2158, "name":"taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void taskRemoved(TaskHierarchyEvent e) {\r\n    // ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":2159, "name":"taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void taskScheduleChanged(TaskScheduleEvent e) {\r\n    if (!(e.getNewFinishDate().equals(e.getOldFinishDate()))) {\r\n        // ourCriticProcess = false;\r\n        fireDelayObservation();\r\n    }\r\n}"},
 {"id":2160, "name":"undoOrRedoHappened()", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.undoOrRedoHappened()", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void undoOrRedoHappened() {\r\n    // System.out.println(\"undoOrRedoHappened\");\r\n    ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":2161, "name":"undoableEditHappened(javax.swing.event.UndoableEditEvent)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayManager.undoableEditHappened(javax.swing.event.UndoableEditEvent)", "ownerclassid":"229", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayManager", "sourcecode":"public void undoableEditHappened(UndoableEditEvent arg0) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2162, "name":"setDelay(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.delay.Delay)", "fullmethod":"net.sourceforge.ganttproject.delay.DelayObserver.setDelay(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.delay.Delay)", "ownerclassid":"230", "ownerclassname":"net.sourceforge.ganttproject.delay.DelayObserver", "sourcecode":"public void setDelay(Task task, Delay delay);"},
 {"id":2163, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.-init-()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"AbstractDocument() {\r\n}"},
 {"id":2164, "name":"acquireLock()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.acquireLock()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public boolean acquireLock() {\r\n    return true;\r\n}"},
 {"id":2165, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.equals(java.lang.Object)", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public boolean equals(Object o) {\r\n    if (o instanceof Document) {\r\n        return ((Document) (o)).getPath().equals(this.getPath());\r\n    }\r\n    return false;\r\n}"},
 {"id":2166, "name":"getFilePath()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.getFilePath()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public String getFilePath() {\r\n    return null;\r\n}"},
 {"id":2167, "name":"getLastError()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.getLastError()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public String getLastError() {\r\n    return \"\";\r\n}"},
 {"id":2168, "name":"getPassword()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.getPassword()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public String getPassword() {\r\n    return null;\r\n}"},
 {"id":2169, "name":"getPortfolio()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.getPortfolio()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public Portfolio getPortfolio() {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":2170, "name":"getURLPath()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.getURLPath()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public String getURLPath() {\r\n    return null;\r\n}"},
 {"id":2171, "name":"getUsername()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.getUsername()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public String getUsername() {\r\n    return null;\r\n}"},
 {"id":2172, "name":"read()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.read()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public void read() throws IOException {\r\n    throw new UnsupportedOperationException(\"This method should be overriden in derived classes\");\r\n}"},
 {"id":2173, "name":"releaseLock()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.releaseLock()", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public void releaseLock() {\r\n}"},
 {"id":2174, "name":"setUserInfo(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.AbstractDocument.setUserInfo(java.lang.String,java.lang.String)", "ownerclassid":"231", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractDocument", "sourcecode":"public void setUserInfo(String user, String pass) {\r\n}"},
 {"id":2175, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractURLDocument.-init-()", "ownerclassid":"232", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractURLDocument", "sourcecode":"AbstractURLDocument() {\r\n}"},
 {"id":2176, "name":"getURLPath()", "fullmethod":"net.sourceforge.ganttproject.document.AbstractURLDocument.getURLPath()", "ownerclassid":"232", "ownerclassname":"net.sourceforge.ganttproject.document.AbstractURLDocument", "sourcecode":"/**\r\n * \"URLDocuments\" dont return null on calls to getURLPath().\r\n */\r\npublic String getURLPath() {\r\n    return getPath();\r\n}"},
 {"id":2177, "name":"acquireLock()", "fullmethod":"net.sourceforge.ganttproject.document.Document.acquireLock()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Tries to acquire a lock. <br>\r\n * This method is optional. Storage containers, for which locking is\r\n * inappropriate, should always return true.\r\n *\r\n * @return wether a lock could be successfully acquired\r\n * @see #releaseLock()\r\n */\r\npublic boolean acquireLock();"},
 {"id":2178, "name":"canRead()", "fullmethod":"net.sourceforge.ganttproject.document.Document.canRead()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Checks, wether the document is readable.\r\n *\r\n * @return readability\r\n */\r\npublic boolean canRead();"},
 {"id":2179, "name":"canWrite()", "fullmethod":"net.sourceforge.ganttproject.document.Document.canWrite()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Checks, wether the document is writable.\r\n *\r\n * @return writability\r\n */\r\npublic boolean canWrite();"},
 {"id":2180, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getDescription()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets the description of the document (can be displayed in the\r\n * applications titlebar).\r\n *\r\n * @return the description of the document\r\n */\r\npublic String getDescription();"},
 {"id":2181, "name":"getFilePath()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getFilePath()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets the path to the document, if it is a file on a local file system\r\n * (can be used to initialize a JFileChooser).\r\n *\r\n * @return the path, if the document is a local file; <code>null</code>,\r\notherwise.\r\n */\r\npublic String getFilePath();"},
 {"id":2182, "name":"getInputStream()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getInputStream()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets an InputStream, that allows to read from the document.\r\n *\r\n * @return InputStream to read from\r\n */\r\npublic InputStream getInputStream() throws IOException;"},
 {"id":2183, "name":"getLastError()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getLastError()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets the last error\r\n *\r\n * @return errormessage\r\n */\r\npublic String getLastError();"},
 {"id":2184, "name":"getOutputStream()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getOutputStream()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets an OutputStream, that allows to write to the document.\r\n *\r\n * @return OutputStream to write to\r\n */\r\npublic OutputStream getOutputStream() throws IOException;"},
 {"id":2185, "name":"getPassword()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getPassword()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets the password used to authenticate to the storage container\r\n *\r\n * @return username\r\n */\r\npublic String getPassword();"},
 {"id":2186, "name":"getPath()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getPath()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets the path to the document.\r\n *\r\n * @return the path to the document\r\n */\r\npublic String getPath();"},
 {"id":2187, "name":"getPortfolio()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getPortfolio()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"Portfolio getPortfolio();"},
 {"id":2188, "name":"getURI()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getURI()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"public URI getURI();"},
 {"id":2189, "name":"getURLPath()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getURLPath()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets the path to the document, if it is a file on a server (can be used\r\n * to initialize an UrlChooser).\r\n *\r\n * @return the path, if the document is a server file; <code>null</code>,\r\notherwise.\r\n */\r\npublic String getURLPath();"},
 {"id":2190, "name":"getUsername()", "fullmethod":"net.sourceforge.ganttproject.document.Document.getUsername()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Gets the username used to authenticate to the storage container\r\n *\r\n * @return username\r\n */\r\npublic String getUsername();"},
 {"id":2191, "name":"isLocal()", "fullmethod":"net.sourceforge.ganttproject.document.Document.isLocal()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"boolean isLocal();"},
 {"id":2192, "name":"isValidForMRU()", "fullmethod":"net.sourceforge.ganttproject.document.Document.isValidForMRU()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Checks, wether the document should appear in the MRU (list of <b>m</b>ost\r\n * <b>r</b>ecently <b>u</b>sed files).\r\n *\r\n * @return validity for MRU\r\n */\r\npublic boolean isValidForMRU();"},
 {"id":2193, "name":"read()", "fullmethod":"net.sourceforge.ganttproject.document.Document.read()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"public void read() throws IOException;"},
 {"id":2194, "name":"releaseLock()", "fullmethod":"net.sourceforge.ganttproject.document.Document.releaseLock()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Releases a previously acquired lock.\r\n *\r\n * @see #acquireLock()\r\n */\r\npublic void releaseLock();"},
 {"id":2195, "name":"setUserInfo(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.Document.setUserInfo(java.lang.String,java.lang.String)", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"/**\r\n * Sets the credentials used to authenticate to the storage container\r\n *\r\n * @param user\r\n * \t\tusername\r\n * @param pass\r\n * \t\tpassword\r\n */\r\npublic void setUserInfo(String user, String pass);"},
 {"id":2196, "name":"write()", "fullmethod":"net.sourceforge.ganttproject.document.Document.write()", "ownerclassid":"233", "ownerclassname":"net.sourceforge.ganttproject.document.Document", "sourcecode":"public void write() throws IOException;"},
 {"id":2197, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public DocumentCreator(IGanttProject project, UIFacade uiFacade, ParserFactory parserFactory) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    setParserFactory(parserFactory);\r\n}"},
 {"id":2198, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[])", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[])", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"1( $anonymous0,  $anonymous1) {\r\n}"},
 {"id":2199, "name":"-init-(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.-init-(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"private StringOptionImpl(String optionName, String legacyTagName, String legacyAttrName) {\r\n    super(optionName);\r\n    myLegacyTagName = legacyTagName;\r\n    myLegacyAttrName = legacyAttrName;\r\n}"},
 {"id":2200, "name":"addToRecentDocuments(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.addToRecentDocuments(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public void addToRecentDocuments(Document document) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2201, "name":"changeWorkingDirectory(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.changeWorkingDirectory(java.io.File)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public void changeWorkingDirectory(File directory) {\r\n    assert directory.isDirectory();\r\n    myWorkingDirectory.lock();\r\n    myWorkingDirectory.setValue(directory.getAbsolutePath());\r\n    myWorkingDirectory.commit();\r\n}"},
 {"id":2202, "name":"createDocument(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.createDocument(java.lang.String)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"/**\r\n * Creates an HttpDocument if path starts with \"http://\" or \"https://\";\r\n * creates a FileDocument otherwise.\r\n *\r\n * @param path\r\n * \t\tpath to the document\r\n * @return an implementation of the interface Document\r\n */\r\nprivate Document createDocument(String path) {\r\n    return createDocument(path, null, null);\r\n}"},
 {"id":2203, "name":"createDocument(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.createDocument(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"/**\r\n * Creates an HttpDocument if path starts with \"http://\" or \"https://\";\r\n * creates a FileDocument otherwise.\r\n *\r\n * @param path\r\n * \t\tpath to the document\r\n * @param user\r\n * \t\tusername\r\n * @param pass\r\n * \t\tpassword\r\n * @return an implementation of the interface Document\r\n */\r\nprivate Document createDocument(String path, String user, String pass) {\r\n    assert path != null;\r\n    path = path.trim();\r\n    if ((path.toLowerCase().startsWith(\"http://\")) || (path.toLowerCase().startsWith(\"https://\"))) {\r\n        return new HttpDocument(path, user, pass);\r\n    } else\r\n        if (path.toLowerCase().startsWith(\"ftp:\")) {\r\n            return new FtpDocument(path, myFtpUserOption, myFtpPasswordOption);\r\n        } else {\r\n            return new FileDocument(new File(path));\r\n        }\r\n\r\n}"},
 {"id":2204, "name":"createTemporaryFile()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.createTemporaryFile()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"String createTemporaryFile() throws IOException {\r\n    File tempFile = File.createTempFile(\"project\", \".gan\", getWorkingDirectoryFile());\r\n    return tempFile.getAbsolutePath();\r\n}"},
 {"id":2205, "name":"getDocument(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getDocument(java.lang.String)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public Document getDocument(String path) {\r\n    Document physicalDocument = createDocument(path);\r\n    Document proxyDocument = new ProxyDocument(this, physicalDocument, myProject, myUIFacade, getVisibleFields(), getParserFactory());\r\n    return proxyDocument;\r\n}"},
 {"id":2206, "name":"getDocument(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getDocument(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public Document getDocument(String path, String userName, String password) {\r\n    Document physicalDocument = createDocument(path, userName, password);\r\n    Document proxyDocument = new ProxyDocument(this, physicalDocument, myProject, myUIFacade, getVisibleFields(), getParserFactory());\r\n    return proxyDocument;\r\n}"},
 {"id":2207, "name":"getFTPOptions()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getFTPOptions()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public DocumentManager.FTPOptions getFTPOptions() {\r\n    return myFtpOptions;\r\n}"},
 {"id":2208, "name":"getLastWebDAVDocumentOption()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getLastWebDAVDocumentOption()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public StringOption getLastWebDAVDocumentOption() {\r\n    return myLastWebDAVDocument;\r\n}"},
 {"id":2209, "name":"getNetworkOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getNetworkOptionGroups()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public GPOptionGroup[] getNetworkOptionGroups() {\r\n    return new GPOptionGroup[]{ myFtpOptions };\r\n}"},
 {"id":2210, "name":"getOptionGroup()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getOptionGroup()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public GPOptionGroup getOptionGroup() {\r\n    return myOptionGroup;\r\n}"},
 {"id":2211, "name":"getParserFactory()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getParserFactory()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"protected ParserFactory getParserFactory() {\r\n    return myParserFactory;\r\n}"},
 {"id":2212, "name":"getVisibleFields()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getVisibleFields()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"protected TableHeaderUIFacade getVisibleFields() {\r\n    return null;\r\n}"},
 {"id":2213, "name":"getWorkingDirectory()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getWorkingDirectory()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"public String getWorkingDirectory() {\r\n    return myWorkingDirectory.getValue();\r\n}"},
 {"id":2214, "name":"getWorkingDirectoryFile()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.getWorkingDirectoryFile()", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"private File getWorkingDirectoryFile() {\r\n    return new File(getWorkingDirectory());\r\n}"},
 {"id":2215, "name":"setParserFactory(net.sourceforge.ganttproject.parser.ParserFactory)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator.setParserFactory(net.sourceforge.ganttproject.parser.ParserFactory)", "ownerclassid":"235", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator", "sourcecode":"protected void setParserFactory(ParserFactory myParserFactory) {\r\n    this.myParserFactory = myParserFactory;\r\n}"},
 {"id":2216, "name":"-init-(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator$StringOptionImpl.-init-(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"234", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator$StringOptionImpl", "sourcecode":"private StringOptionImpl(String optionName, String legacyTagName, String legacyAttrName) {\r\n    super(optionName);\r\n    myLegacyTagName = legacyTagName;\r\n    myLegacyAttrName = legacyAttrName;\r\n}"},
 {"id":2217, "name":"getAttributeName()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator$StringOptionImpl.getAttributeName()", "ownerclassid":"234", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator$StringOptionImpl", "sourcecode":"public String getAttributeName() {\r\n    return myLegacyAttrName;\r\n}"},
 {"id":2218, "name":"getTagName()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator$StringOptionImpl.getTagName()", "ownerclassid":"234", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator$StringOptionImpl", "sourcecode":"public String getTagName() {\r\n    return myLegacyTagName;\r\n}"},
 {"id":2219, "name":"loadValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentCreator$StringOptionImpl.loadValue(java.lang.String)", "ownerclassid":"234", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentCreator$StringOptionImpl", "sourcecode":"public void loadValue(String legacyValue) {\r\n    lock();\r\n    loadPersistentValue(legacyValue);\r\n    commit();\r\n}"},
 {"id":2220, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[])", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[])", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"public FTPOptions(String id, GPOption[] options) {\r\n    super(id, options);\r\n}"},
 {"id":2221, "name":"addToRecentDocuments(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.addToRecentDocuments(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"void addToRecentDocuments(Document document);"},
 {"id":2222, "name":"changeWorkingDirectory(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.changeWorkingDirectory(java.io.File)", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"void changeWorkingDirectory(File parentFile);"},
 {"id":2223, "name":"getDocument(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.getDocument(java.lang.String)", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"Document getDocument(String path);"},
 {"id":2224, "name":"getDocument(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.getDocument(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"Document getDocument(String path, String userName, String password);"},
 {"id":2225, "name":"getFTPOptions()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.getFTPOptions()", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"DocumentManager.FTPOptions getFTPOptions();"},
 {"id":2226, "name":"getLastWebDAVDocumentOption()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.getLastWebDAVDocumentOption()", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"StringOption getLastWebDAVDocumentOption();"},
 {"id":2227, "name":"getNetworkOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.getNetworkOptionGroups()", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"GPOptionGroup[] getNetworkOptionGroups();"},
 {"id":2228, "name":"getOptionGroup()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.getOptionGroup()", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"GPOptionGroup getOptionGroup();"},
 {"id":2229, "name":"getWorkingDirectory()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager.getWorkingDirectory()", "ownerclassid":"237", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager", "sourcecode":"String getWorkingDirectory();"},
 {"id":2230, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[])", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[])", "ownerclassid":"236", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions", "sourcecode":"public FTPOptions(String id, GPOption[] options) {\r\n    super(id, options);\r\n}"},
 {"id":2231, "name":"getDirectoryName()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions.getDirectoryName()", "ownerclassid":"236", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions", "sourcecode":"public abstract StringOption getDirectoryName();"},
 {"id":2232, "name":"getPassword()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions.getPassword()", "ownerclassid":"236", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions", "sourcecode":"public abstract StringOption getPassword();"},
 {"id":2233, "name":"getServerName()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions.getServerName()", "ownerclassid":"236", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions", "sourcecode":"public abstract StringOption getServerName();"},
 {"id":2234, "name":"getUserName()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions.getUserName()", "ownerclassid":"236", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions", "sourcecode":"public abstract StringOption getUserName();"},
 {"id":2235, "name":"-init-(int)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentsMRU.-init-(int)", "ownerclassid":"238", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentsMRU", "sourcecode":"public DocumentsMRU(int maxSize) {\r\n    if (maxSize <= 0)\r\n        throw new IllegalArgumentException(((\"maxSize must be larger than zero (\" + maxSize) + \")\"));\r\n\r\n    this.maxSize = maxSize;\r\n    documents = new ArrayList(maxSize);\r\n}"},
 {"id":2236, "name":"add(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentsMRU.add(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"238", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentsMRU", "sourcecode":"/**\r\n * Adds a Document at the top of the list of Documents MRU. If the list is\r\n * already full, an old entry is removed, to make place for this new\r\n * document.\r\n *\r\n * @param document\r\n * \t\tthe Document that should be added\r\n * @return wether the list has changed through the addition\r\n */\r\npublic boolean add(Document document) {\r\n    // if the document is invalid, we dont add it\r\n    if (!(document.isValidForMRU()))\r\n        return false;\r\n\r\n    int i = documents.indexOf(document);\r\n    // if the document is already on the top,\r\n    // nothing needs to change.\r\n    if (0 == i)\r\n        return false;\r\n\r\n    if (0 < i) {\r\n        documents.remove(i);\r\n    } else {\r\n        while ((documents.size()) >= (maxSize))\r\n            documents.remove(((maxSize) - 1));\r\n\r\n    }\r\n    documents.add(0, document);\r\n    return true;\r\n}"},
 {"id":2237, "name":"append(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.document.DocumentsMRU.append(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"238", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentsMRU", "sourcecode":"/**\r\n * Appends a Document to the list of Documents MRU. If the list is already\r\n * full, the document will <b>not</b> be appended.\r\n *\r\n * @param document\r\n * \t\tthe Document that should be added\r\n * @return wether the list has changed through the addition\r\n */\r\npublic boolean append(Document document) {\r\n    // if the document is invalid, we dont add it\r\n    if (!(document.isValidForMRU()))\r\n        return false;\r\n\r\n    int i = documents.indexOf(document);\r\n    // if the document is already at the bottom,\r\n    // nothing needs to change.\r\n    if (i == ((maxSize) - 1))\r\n        return false;\r\n\r\n    if (i != (-1)) {\r\n        documents.remove(i);\r\n    }\r\n    if ((documents.size()) < (maxSize)) {\r\n        documents.add(document);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"},
 {"id":2238, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentsMRU.clear()", "ownerclassid":"238", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentsMRU", "sourcecode":"/**\r\n * clears the list of Documents MRU\r\n */\r\npublic void clear() {\r\n    documents.clear();\r\n}"},
 {"id":2239, "name":"iterator()", "fullmethod":"net.sourceforge.ganttproject.document.DocumentsMRU.iterator()", "ownerclassid":"238", "ownerclassname":"net.sourceforge.ganttproject.document.DocumentsMRU", "sourcecode":"/**\r\n * returns an Iterator over the entries of the list of Documents MRU\r\n */\r\npublic Iterator iterator() {\r\n    return documents.iterator();\r\n}"},
 {"id":2240, "name":"-init-(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.-init-(java.io.File)", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public FileDocument(File file) {\r\n    this.file = file;\r\n}"},
 {"id":2241, "name":"canRead()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.canRead()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public boolean canRead() {\r\n    return file.canRead();\r\n}"},
 {"id":2242, "name":"canWrite()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.canWrite()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public boolean canWrite() {\r\n    boolean writable = file.canWrite();\r\n    if ((!writable) && (!(file.exists()))) {\r\n        try {\r\n            if (file.createNewFile()) {\r\n                file.delete();\r\n                writable = true;\r\n            }\r\n        } catch (IOException e) {\r\n        }\r\n    }\r\n    return writable;\r\n}"},
 {"id":2243, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.getDescription()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public String getDescription() {\r\n    return file.getName();\r\n}"},
 {"id":2244, "name":"getFilePath()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.getFilePath()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public String getFilePath() {\r\n    return getPath();\r\n}"},
 {"id":2245, "name":"getInputStream()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.getInputStream()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public InputStream getInputStream() throws FileNotFoundException {\r\n    return new FileInputStream(file);\r\n}"},
 {"id":2246, "name":"getOutputStream()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.getOutputStream()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public OutputStream getOutputStream() throws FileNotFoundException {\r\n    return new FileOutputStream(file);\r\n}"},
 {"id":2247, "name":"getPath()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.getPath()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public String getPath() {\r\n    return file.getPath();\r\n}"},
 {"id":2248, "name":"getURI()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.getURI()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public URI getURI() {\r\n    return file.toURI();\r\n}"},
 {"id":2249, "name":"isLocal()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.isLocal()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public boolean isLocal() {\r\n    return true;\r\n}"},
 {"id":2250, "name":"isValidForMRU()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.isValidForMRU()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public boolean isValidForMRU() {\r\n    return file.exists();\r\n}"},
 {"id":2251, "name":"open()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.open()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public void open() throws IOException {\r\n}"},
 {"id":2252, "name":"write()", "fullmethod":"net.sourceforge.ganttproject.document.FileDocument.write()", "ownerclassid":"239", "ownerclassname":"net.sourceforge.ganttproject.document.FileDocument", "sourcecode":"public void write() throws IOException {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2253, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.StringOption,net.sourceforge.ganttproject.gui.options.model.StringOption)", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.StringOption,net.sourceforge.ganttproject.gui.options.model.StringOption)", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"FtpDocument(String urlAsString, StringOption ftpUser, StringOption ftpPassword) {\r\n    assert urlAsString != null;\r\n    try {\r\n        URI url = new URI(urlAsString);\r\n        String userInfo = url.getUserInfo();\r\n        if ((userInfo == null) || (FtpDocument.EMPTY_STRING.equals(userInfo))) {\r\n            StringBuffer buf = new StringBuffer();\r\n            if ((ftpUser.getValue()) != null) {\r\n                buf.append(ftpUser.getValue());\r\n            }\r\n            if ((ftpPassword.getValue()) != null) {\r\n                buf.append(:).append(ftpPassword.getValue());\r\n            }\r\n            myURI = new URI(\"ftp\", buf.toString(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getFragment());\r\n        } else {\r\n            myURI = url;\r\n        }\r\n        urlAsString = myURI.toString();\r\n        myURI.toURL().openConnection().connect();\r\n    } catch (URISyntaxException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    } catch (MalformedURLException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace();\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace();\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    }\r\n}"},
 {"id":2254, "name":"canRead()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.canRead()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public boolean canRead() {\r\n    return true;\r\n}"},
 {"id":2255, "name":"canWrite()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.canWrite()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public boolean canWrite() {\r\n    return true;\r\n}"},
 {"id":2256, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.getDescription()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public String getDescription() {\r\n    return myURI.toString();\r\n}"},
 {"id":2257, "name":"getInputStream()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.getInputStream()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public InputStream getInputStream() throws IOException {\r\n    return myURI.toURL().openConnection().getInputStream();\r\n}"},
 {"id":2258, "name":"getOutputStream()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.getOutputStream()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public OutputStream getOutputStream() throws IOException {\r\n    return myURI.toURL().openConnection().getOutputStream();\r\n}"},
 {"id":2259, "name":"getPath()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.getPath()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public String getPath() {\r\n    return myURI.toString();\r\n}"},
 {"id":2260, "name":"getURI()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.getURI()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public URI getURI() {\r\n    return myURI;\r\n}"},
 {"id":2261, "name":"isLocal()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.isLocal()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public boolean isLocal() {\r\n    return false;\r\n}"},
 {"id":2262, "name":"isValidForMRU()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.isValidForMRU()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public boolean isValidForMRU() {\r\n    return true;\r\n}"},
 {"id":2263, "name":"write()", "fullmethod":"net.sourceforge.ganttproject.document.FtpDocument.write()", "ownerclassid":"240", "ownerclassname":"net.sourceforge.ganttproject.document.FtpDocument", "sourcecode":"public void write() throws IOException {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":2264, "name":"-init-(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.-init-(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public HttpDocument(String url, String user, String pass) {\r\n    this.url = url;\r\n    try {\r\n        httpURL = new HttpURL(url);\r\n        if ((user == null) || ((user.length()) == 0))\r\n            user = httpURL.getUser();\r\n\r\n        if ((pass == null) || ((pass.length()) == 0))\r\n            pass = httpURL.getPassword();\r\n\r\n        if (user != null)\r\n            httpURL.setUserinfo(user, pass);\r\n\r\n    } catch (URIException e) {\r\n        lastError = e.getMessage();\r\n        malformedURL = true;\r\n    }\r\n}"},
 {"id":2265, "name":"acquireLock()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.acquireLock()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.document.Document#acquireLock(java.lang.String)\n */\r\npublic boolean acquireLock() {\r\n    if (locked)\r\n        return true;\r\n\r\n    if (null == (getWebdavResource()))\r\n        return false;\r\n\r\n    try {\r\n        String userName = \" (GanttProject)\";\r\n        try {\r\n            userName = (\" (\" + (System.getProperty(\"user.name\"))) + \"@GanttProject)\";\r\n        } catch (AccessControlException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n        int lockSeconds = ((HttpDocument.lockDAVMinutes) > 0) ? (HttpDocument.lockDAVMinutes) * 60 : 15;\r\n        locked = getWebdavResource().lockMethod(((httpURL.getUser()) + userName), lockSeconds);\r\n        return locked;\r\n    } catch (HttpException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":2266, "name":"canRead()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.canRead()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public boolean canRead() {\r\n    WebdavResource res = getWebdavResource();\r\n    return null == res ? false : (res.exists()) && (!(res.isCollection()));\r\n}"},
 {"id":2267, "name":"canWrite()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.canWrite()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public boolean canWrite() {\r\n    WebdavResource res = getWebdavResource();\r\n    if (null == res)\r\n        return false;\r\n\r\n    try {\r\n        res.setProperties(0);\r\n    } catch (HttpException e) {\r\n        if (404 != (e.getReasonCode()))\r\n            return false;\r\n\r\n    } catch (IOException e) {\r\n        return false;\r\n    }\r\n    if (res.exists()) {\r\n        return !(res.isCollection());\r\n    } else {\r\n        try {\r\n            HttpURL parentURL = new HttpURL(httpURL.toString());\r\n            String user = httpURL.getUser();\r\n            String pass = httpURL.getPassword();\r\n            if (user != null)\r\n                parentURL.setUserinfo(user, pass);\r\n\r\n            String currentHierPath = httpURL.getCurrentHierPath();\r\n            if (!(currentHierPath.endsWith(\"/\")))\r\n                currentHierPath = currentHierPath + \"/\";\r\n\r\n            parentURL.setPath(currentHierPath);\r\n            WebdavResource parentRes = new WebdavResource(parentURL);\r\n            if (!(parentRes.isCollection()))\r\n                return false;\r\n\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n}"},
 {"id":2268, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getDescription()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public String getDescription() {\r\n    String description = httpURL.toString();\r\n    return description != null ? description : url;\r\n}"},
 {"id":2269, "name":"getInputStream()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getInputStream()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public InputStream getInputStream() throws IOException {\r\n    if (null == (getWebdavResource()))\r\n        throw new IOException(lastError);\r\n\r\n    try {\r\n        return getWebdavResource().getMethodData();\r\n    } catch (HttpException e) {\r\n        throw new IOException(((((e.getMessage()) + \"(\") + (e.getReasonCode())) + \")\"));\r\n    }\r\n}"},
 {"id":2270, "name":"getLastError()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getLastError()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public String getLastError() {\r\n    return lastError;\r\n}"},
 {"id":2271, "name":"getOutputStream()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getOutputStream()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public OutputStream getOutputStream() throws IOException {\r\n    if (null == (getWebdavResource()))\r\n        throw new IOException(lastError);\r\n\r\n    return new HttpDocumentOutputStream(getWebdavResource());\r\n}"},
 {"id":2272, "name":"getPassword()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getPassword()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public String getPassword() {\r\n    try {\r\n        return httpURL.getPassword();\r\n    } catch (URIException e) {\r\n        return null;\r\n    }\r\n}"},
 {"id":2273, "name":"getPath()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getPath()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public String getPath() {\r\n    return getDescription();\r\n}"},
 {"id":2274, "name":"getURI()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getURI()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public URI getURI() {\r\n    try {\r\n        return new URI(url);\r\n    } catch (URISyntaxException e) {\r\n        return null;\r\n    }\r\n}"},
 {"id":2275, "name":"getURLPath()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getURLPath()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public String getURLPath() {\r\n    return getPath();\r\n}"},
 {"id":2276, "name":"getUsername()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getUsername()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public String getUsername() {\r\n    try {\r\n        return httpURL.getUser();\r\n    } catch (URIException e) {\r\n        return null;\r\n    }\r\n}"},
 {"id":2277, "name":"getWebdavResource()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.getWebdavResource()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"private WebdavResource getWebdavResource() {\r\n    if (null == (webdavResource))\r\n        try {\r\n            webdavResource = new WebdavResource(httpURL, WebdavResource.NOACTION, 0);\r\n            webdavResource.setFollowRedirects(true);\r\n        } catch (HttpException e) {\r\n            lastError = (((e.getMessage()) + \"(\") + (e.getReasonCode())) + \")\";\r\n        } catch (IOException e) {\r\n            lastError = e.getMessage();\r\n        }\r\n\r\n    return webdavResource;\r\n}"},
 {"id":2278, "name":"isLocal()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.isLocal()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public boolean isLocal() {\r\n    return false;\r\n}"},
 {"id":2279, "name":"isValidForMRU()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.isValidForMRU()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public boolean isValidForMRU() {\r\n    return !(malformedURL);\r\n}"},
 {"id":2280, "name":"releaseLock()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.releaseLock()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.document.Document#releaseLock()\n */\r\npublic void releaseLock() {\r\n    if (null == (getWebdavResource()))\r\n        return;\r\n\r\n    try {\r\n        locked = false;\r\n        getWebdavResource().unlockMethod();\r\n    } catch (HttpException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n}"},
 {"id":2281, "name":"setLockDAVMinutes(int)", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.setLockDAVMinutes(int)", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public static void setLockDAVMinutes(int i) {\r\n    HttpDocument.lockDAVMinutes = i;\r\n}"},
 {"id":2282, "name":"setUserInfo(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.setUserInfo(java.lang.String,java.lang.String)", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public void setUserInfo(String user, String pass) {\r\n    try {\r\n        httpURL.setUserinfo(user, pass);\r\n        webdavResource = null;\r\n    } catch (URIException e) {\r\n        lastError = e.getMessage();\r\n        malformedURL = true;\r\n    }\r\n}"},
 {"id":2283, "name":"write()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocument.write()", "ownerclassid":"241", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocument", "sourcecode":"public void write() throws IOException {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2284, "name":"-init-(org.apache.webdav.lib.WebdavResource)", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocumentOutputStream.-init-(org.apache.webdav.lib.WebdavResource)", "ownerclassid":"242", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocumentOutputStream", "sourcecode":"public HttpDocumentOutputStream(WebdavResource webdavResource) {\r\n    super();\r\n    this.webdavResource = webdavResource;\r\n}"},
 {"id":2285, "name":"close()", "fullmethod":"net.sourceforge.ganttproject.document.HttpDocumentOutputStream.close()", "ownerclassid":"242", "ownerclassname":"net.sourceforge.ganttproject.document.HttpDocumentOutputStream", "sourcecode":"public void close() throws IOException {\r\n    try {\r\n        super.close();\r\n    } finally {\r\n        try {\r\n            webdavResource.putMethod(toByteArray());\r\n        } catch (HttpException e) {\r\n            throw new IOException(((((e.getMessage()) + \"(\") + (e.getReasonCode())) + \")\"));\r\n        }\r\n    }\r\n}"},
 {"id":2286, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.-init-()", "ownerclassid":"243", "ownerclassname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "sourcecode":"NetworkOptionPageProvider() {\r\n}"},
 {"id":2287, "name":"buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"243", "ownerclassname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "sourcecode":"public Component buildPageComponent(IGanttProject project, final UIFacade uiFacade) {\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    builder.setI18N(new OptionsPageBuilder.I18N() {\r\n        public String getPageTitle(String pageID) {\r\n            return getValue(\"ftpexport\");\r\n        }\r\n\r\n        public String getPageDescription(String pageID) {\r\n            return getValue(\"settingsFTPExport\");\r\n        }\r\n\r\n        public String getOptionGroupLabel(GPOptionGroup group) {\r\n            return getValue(\"ftpexport\");\r\n        }\r\n\r\n        public String getOptionLabel(GPOption option) {\r\n            final String id = option.getID();\r\n            if (DocumentCreator.DIRECTORYNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpdirectory\");\r\n            }\r\n            if (DocumentCreator.PASSWORD_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftppwd\");\r\n            }\r\n            if (DocumentCreator.SERVERNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpserver\");\r\n            }\r\n            if (DocumentCreator.USERNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpuser\");\r\n            }\r\n            return super.getOptionLabel(option);\r\n        }\r\n    });\r\n    final GPOptionGroup ftpGroup = project.getDocumentManager().getNetworkOptionGroups()[0];\r\n    final DefaultStringOption usernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.USERNAME_OPTION_ID)));\r\n    final DefaultStringOption servernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.SERVERNAME_OPTION_ID)));\r\n    final DefaultStringOption dirnameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.DIRECTORYNAME_OPTION_ID)));\r\n    final DefaultStringOption passwordOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.PASSWORD_OPTION_ID)));\r\n    final JComponent optionsPane = builder.buildPage(project.getDocumentManager().getNetworkOptionGroups(), getPageID());\r\n    final Action testConnectionAction = new AbstractAction() {\r\n        {\r\n            putValue(Action.NAME, GanttLanguage.getInstance().getText(\"testFTPConnection\"));\r\n            setEnabled(canEnableTestAction(ftpGroup));\r\n        }\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            StringBuffer urlString = new StringBuffer();\r\n            urlString.append(\"ftp://\");\r\n            urlString.append(((usernameOption.getUncommitedValue()) == null ? \"\" : usernameOption.getUncommitedValue()));\r\n            urlString.append(((passwordOption.getUncommitedValue()) == null ? \"\" : \":\" + (passwordOption.getUncommitedValue())));\r\n            urlString.append(\"@\");\r\n            urlString.append(servernameOption.getUncommitedValue());\r\n            urlString.append(\"/\");\r\n            urlString.append(dirnameOption.getUncommitedValue());\r\n            urlString.append(\"/\");\r\n            URL url = null;\r\n            try {\r\n                url = new URL(((urlString.toString()) + \"test.txt\"));\r\n                URLConnection urlc = url.openConnection();\r\n                OutputStream os = urlc.getOutputStream();\r\n                os.write(\"This is GanttProject +++ I was here!\".getBytes());\r\n                os.close();\r\n                JOptionPane.showMessageDialog(optionsPane, GanttLanguage.getInstance().getText(\"successFTPConnection\"), GanttLanguage.getInstance().getText(\"success\"), JOptionPane.INFORMATION_MESSAGE);\r\n            } catch (IOException e2) {\r\n                uiFacade.showErrorDialog(e2);\r\n                // JOptionPane.showMessageDialog(, GanttLanguage\r\n                // .getInstance().getText(\"errorFTPConnection\"),\r\n                // GanttLanguage.getInstance().getText(\"error\"),\r\n                // JOptionPane.ERROR_MESSAGE);\r\n            } finally {\r\n            }\r\n        }\r\n    };\r\n    ChangeValueListener listener = new ChangeValueListener() {\r\n        public void changeValue(ChangeValueEvent event) {\r\n            testConnectionAction.setEnabled(canEnableTestAction(ftpGroup));\r\n        }\r\n    };\r\n    servernameOption.addChangeValueListener(listener);\r\n    usernameOption.addChangeValueListener(listener);\r\n    passwordOption.addChangeValueListener(listener);\r\n    Box result = Box.createVerticalBox();\r\n    result.add(optionsPane);\r\n    result.add(new JButton(testConnectionAction));\r\n    return result;\r\n}"},
 {"id":2288, "name":"canEnableTestAction(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "fullmethod":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.canEnableTestAction(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "ownerclassid":"243", "ownerclassname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "sourcecode":"private boolean canEnableTestAction(GPOptionGroup ftpGroup) {\r\n    final DefaultStringOption usernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.USERNAME_OPTION_ID)));\r\n    final DefaultStringOption servernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.SERVERNAME_OPTION_ID)));\r\n    final DefaultStringOption passwordOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.PASSWORD_OPTION_ID)));\r\n    return (((servernameOption.getUncommitedValue()) != null) && ((usernameOption.getUncommitedValue()) != null)) && ((passwordOption.getUncommitedValue()) != null);\r\n}"},
 {"id":2289, "name":"getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"243", "ownerclassname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return project.getDocumentManager().getNetworkOptionGroups();\r\n}"},
 {"id":2290, "name":"getPageID()", "fullmethod":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.getPageID()", "ownerclassid":"243", "ownerclassname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "sourcecode":"public String getPageID() {\r\n    return \"ftpexport\";\r\n}"},
 {"id":2291, "name":"hasCustomComponent()", "fullmethod":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.hasCustomComponent()", "ownerclassid":"243", "ownerclassname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "sourcecode":"public boolean hasCustomComponent() {\r\n    return true;\r\n}"},
 {"id":2292, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.toString()", "ownerclassid":"243", "ownerclassname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "sourcecode":"public String toString() {\r\n    return \"FTP\";\r\n}"},
 {"id":2293, "name":"-init-(int,net.sourceforge.ganttproject.document.Document,java.awt.event.ActionListener)", "fullmethod":"net.sourceforge.ganttproject.document.OpenDocumentAction.-init-(int,net.sourceforge.ganttproject.document.Document,java.awt.event.ActionListener)", "ownerclassid":"244", "ownerclassname":"net.sourceforge.ganttproject.document.OpenDocumentAction", "sourcecode":"/**\r\n * Creates a new action, that stores the specified document and invokes the\r\n * specified listener.\r\n */\r\npublic OpenDocumentAction(int index, Document document, ActionListener listener) {\r\n    super(((index + \". \") + (document.getDescription())));\r\n    this.document = document;\r\n    this.listener = listener;\r\n    if (index < (OpenDocumentAction.MNEMONIC_KEYS.length)) {\r\n        putValue(Action.MNEMONIC_KEY, new Integer(OpenDocumentAction.MNEMONIC_KEYS[(index - 1)]));\r\n    }\r\n    if (index < (OpenDocumentAction.SHORTCUT_KEYS.length))\r\n        putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(OpenDocumentAction.SHORTCUT_KEYS[(index - 1)], OpenDocumentAction.MENU_MASK));\r\n\r\n}"},
 {"id":2294, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.document.OpenDocumentAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"244", "ownerclassname":"net.sourceforge.ganttproject.document.OpenDocumentAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    listener.actionPerformed(new ActionEvent(document, e.getID(), e.getActionCommand()));\r\n}"},
 {"id":2295, "name":"getDefaultDocument()", "fullmethod":"net.sourceforge.ganttproject.document.Portfolio.getDefaultDocument()", "ownerclassid":"245", "ownerclassname":"net.sourceforge.ganttproject.document.Portfolio", "sourcecode":"Document getDefaultDocument();"},
 {"id":2296, "name":"-init-(net.sourceforge.ganttproject.document.DocumentCreator,net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TableHeaderUIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.DocumentCreator,net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TableHeaderUIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"ProxyDocument(DocumentCreator creator, Document physicalDocument, IGanttProject project, UIFacade uiFacade, TableHeaderUIFacade visibleFields, ParserFactory parserFactory) {\r\n    myPhysicalDocument = physicalDocument;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myParserFactory = parserFactory;\r\n    myCreator = creator;\r\n    myVisibleFields = visibleFields;\r\n}"},
 {"id":2297, "name":"-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState)", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"/**\r\n *\r\n *\r\n * @param parsing\r\n * \t\t\r\n * @param confirmation\r\n * \t\t\r\n */\r\npublic AcquireLockState(ProxyDocument.ParsingState parsing, ProxyDocument.OpenCopyConfirmationState confirmation) {\r\n    myParsingState = parsing;\r\n    myConfirmationState = confirmation;\r\n}"},
 {"id":2298, "name":"-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"/**\r\n *\r\n *\r\n * @param parsing\r\n * \t\t\r\n * @param failure\r\n * \t\t\r\n */\r\npublic OpenCopyConfirmationState(ProxyDocument.ParsingState parsing, ProxyDocument.FailureState failure) {\r\n    myParsingState = parsing;\r\n    myExitState = failure;\r\n}"},
 {"id":2299, "name":"-init-(net.sourceforge.ganttproject.document.ProxyDocument$SuccessState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.ProxyDocument$SuccessState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"/**\r\n *\r\n *\r\n * @param success\r\n * \t\t\r\n * @param failure\r\n * \t\t\r\n */\r\npublic ParsingState(ProxyDocument.SuccessState success, ProxyDocument.FailureState failure) {\r\n    mySuccessState = success;\r\n    myFailureState = failure;\r\n}"},
 {"id":2300, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.-init-()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"SuccessState() {\r\n}"},
 {"id":2301, "name":"acquireLock()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.acquireLock()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public boolean acquireLock() {\r\n    return myPhysicalDocument.acquireLock();\r\n}"},
 {"id":2302, "name":"canRead()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.canRead()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public boolean canRead() {\r\n    return myPhysicalDocument.canRead();\r\n}"},
 {"id":2303, "name":"canWrite()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.canWrite()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public boolean canWrite() {\r\n    return myPhysicalDocument.canWrite();\r\n}"},
 {"id":2304, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.equals(java.lang.Object)", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"/* (non-Javadoc)\n@see java.lang.Object#equals(java.lang.Object)\n@author arun_ram\nAdded on Feb 26, 2006\n */\r\npublic boolean equals(Object doc) {\r\n    if (false == (doc instanceof ProxyDocument)) {\r\n        return false;\r\n    }\r\n    return getPath().equals(((Document) (doc)).getPath());\r\n}"},
 {"id":2305, "name":"getActiveCalendar()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getActiveCalendar()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"private GPCalendar getActiveCalendar() {\r\n    return myProject.getActiveCalendar();\r\n}"},
 {"id":2306, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getDescription()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public String getDescription() {\r\n    return myPhysicalDocument.getDescription();\r\n}"},
 {"id":2307, "name":"getFilePath()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getFilePath()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public String getFilePath() {\r\n    String result = myPhysicalDocument.getFilePath();\r\n    if (result == null) {\r\n        try {\r\n            result = myCreator.createTemporaryFile();\r\n        } catch (IOException e) {\r\n            myUIFacade.showErrorDialog(e);\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":2308, "name":"getHumanResourceManager()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getHumanResourceManager()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"private HumanResourceManager getHumanResourceManager() {\r\n    return ((HumanResourceManager) (myProject.getHumanResourceManager()));\r\n}"},
 {"id":2309, "name":"getInputStream()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getInputStream()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public InputStream getInputStream() throws IOException {\r\n    return myPhysicalDocument.getInputStream();\r\n}"},
 {"id":2310, "name":"getLastError()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getLastError()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public String getLastError() {\r\n    return myPhysicalDocument.getLastError();\r\n}"},
 {"id":2311, "name":"getOutputStream()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getOutputStream()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public OutputStream getOutputStream() throws IOException {\r\n    return myPhysicalDocument.getOutputStream();\r\n}"},
 {"id":2312, "name":"getPassword()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getPassword()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public String getPassword() {\r\n    return myPhysicalDocument.getPassword();\r\n}"},
 {"id":2313, "name":"getPath()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getPath()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public String getPath() {\r\n    return myPhysicalDocument.getPath();\r\n}"},
 {"id":2314, "name":"getPortfolio()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getPortfolio()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public Portfolio getPortfolio() {\r\n    return myPortfolio;\r\n}"},
 {"id":2315, "name":"getPortfolioImpl()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getPortfolioImpl()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"private ProxyDocument.PortfolioImpl getPortfolioImpl() {\r\n    if ((myPortfolio) == null) {\r\n        myPortfolio = new ProxyDocument.PortfolioImpl();\r\n    }\r\n    return myPortfolio;\r\n}"},
 {"id":2316, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getRoleManager()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"private RoleManager getRoleManager() {\r\n    return myProject.getRoleManager();\r\n}"},
 {"id":2317, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getTaskManager()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"private TaskManagerImpl getTaskManager() {\r\n    return ((TaskManagerImpl) (myProject.getTaskManager()));\r\n}"},
 {"id":2318, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getUIFacade()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"private UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":2319, "name":"getURI()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getURI()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public URI getURI() {\r\n    return myPhysicalDocument.getURI();\r\n}"},
 {"id":2320, "name":"getURLPath()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getURLPath()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public String getURLPath() {\r\n    return myPhysicalDocument.getURLPath();\r\n}"},
 {"id":2321, "name":"getUsername()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.getUsername()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public String getUsername() {\r\n    return myPhysicalDocument.getUsername();\r\n}"},
 {"id":2322, "name":"isLocal()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.isLocal()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public boolean isLocal() {\r\n    return myPhysicalDocument.isLocal();\r\n}"},
 {"id":2323, "name":"isValidForMRU()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.isValidForMRU()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public boolean isValidForMRU() {\r\n    return myPhysicalDocument.isValidForMRU();\r\n}"},
 {"id":2324, "name":"read()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.read()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public void read() throws IOException {\r\n    ProxyDocument.FailureState failure = new ProxyDocument.FailureState();\r\n    ProxyDocument.SuccessState success = new ProxyDocument.SuccessState();\r\n    ProxyDocument.ParsingState parsing = new ProxyDocument.ParsingState(success, failure);\r\n    // OpenCopyConfirmationState confirmation = new OpenCopyConfirmationState(\r\n    // parsing, failure);\r\n    // AcquireLockState lock = new AcquireLockState(parsing, confirmation);\r\n    try {\r\n        getTaskManager().setEventsEnabled(false);\r\n        parsing.enter();\r\n    } finally {\r\n        getTaskManager().setEventsEnabled(true);\r\n    }\r\n    // lock.enter();\r\n}"},
 {"id":2325, "name":"releaseLock()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.releaseLock()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public void releaseLock() {\r\n    myPhysicalDocument.releaseLock();\r\n}"},
 {"id":2326, "name":"setUserInfo(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.setUserInfo(java.lang.String,java.lang.String)", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public void setUserInfo(String user, String pass) {\r\n    myPhysicalDocument.setUserInfo(user, pass);\r\n}"},
 {"id":2327, "name":"write()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument.write()", "ownerclassid":"253", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument", "sourcecode":"public void write() throws IOException {\r\n    GPSaver saver = myParserFactory.newSaver();\r\n    byte[] buffer;\r\n    try {\r\n        ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\r\n        saver.save(bufferStream);\r\n        bufferStream.flush();\r\n        buffer = bufferStream.toByteArray();\r\n    } catch (IOException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n        return;\r\n    }\r\n    OutputStream output = getOutputStream();\r\n    try {\r\n        output.write(buffer);\r\n        output.flush();\r\n    } finally {\r\n        output.close();\r\n    }\r\n}"},
 {"id":2328, "name":"-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$AcquireLockState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState)", "ownerclassid":"246", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$AcquireLockState", "sourcecode":"/**\r\n *\r\n *\r\n * @param parsing\r\n * \t\t\r\n * @param confirmation\r\n * \t\t\r\n */\r\npublic AcquireLockState(ProxyDocument.ParsingState parsing, ProxyDocument.OpenCopyConfirmationState confirmation) {\r\n    myParsingState = parsing;\r\n    myConfirmationState = confirmation;\r\n}"},
 {"id":2329, "name":"enter()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$AcquireLockState.enter()", "ownerclassid":"246", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$AcquireLockState", "sourcecode":"void enter() throws IOException {\r\n    boolean locked = acquireLock();\r\n    if (!locked) {\r\n        myConfirmationState.enter();\r\n    } else {\r\n        myParsingState.enter();\r\n    }\r\n}"},
 {"id":2330, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$FailureState.-init-()", "ownerclassid":"247", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$FailureState", "sourcecode":"FailureState() {\r\n}"},
 {"id":2331, "name":"enter()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$FailureState.enter()", "ownerclassid":"247", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$FailureState", "sourcecode":"void enter() {\r\n}"},
 {"id":2332, "name":"-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "ownerclassid":"248", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState", "sourcecode":"/**\r\n *\r\n *\r\n * @param parsing\r\n * \t\t\r\n * @param failure\r\n * \t\t\r\n */\r\npublic OpenCopyConfirmationState(ProxyDocument.ParsingState parsing, ProxyDocument.FailureState failure) {\r\n    myParsingState = parsing;\r\n    myExitState = failure;\r\n}"},
 {"id":2333, "name":"enter()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState.enter()", "ownerclassid":"248", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState", "sourcecode":"void enter() throws IOException {\r\n    String message = GanttLanguage.getInstance().getText(\"msg13\");\r\n    String title = GanttLanguage.getInstance().getText(\"warning\");\r\n    if ((UIFacade.Choice.YES) == (getUIFacade().showConfirmationDialog(message, title))) {\r\n        myParsingState.enter();\r\n    } else {\r\n        myExitState.enter();\r\n    }\r\n}"},
 {"id":2334, "name":"-init-(net.sourceforge.ganttproject.document.ProxyDocument$SuccessState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$SuccessState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "ownerclassid":"249", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState", "sourcecode":"/**\r\n *\r\n *\r\n * @param success\r\n * \t\t\r\n * @param failure\r\n * \t\t\r\n */\r\npublic ParsingState(ProxyDocument.SuccessState success, ProxyDocument.FailureState failure) {\r\n    mySuccessState = success;\r\n    myFailureState = failure;\r\n}"},
 {"id":2335, "name":"enter()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState.enter()", "ownerclassid":"249", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState", "sourcecode":"void enter() throws IOException {\r\n    GPParser opener = myParserFactory.newParser();\r\n    ResourceManager hrManager = getHumanResourceManager();\r\n    RoleManager roleManager = getRoleManager();\r\n    TaskManager taskManager = getTaskManager();\r\n    ResourceTagHandler resourceHandler = new ResourceTagHandler(hrManager, roleManager, myProject.getResourceCustomPropertyManager());\r\n    DependencyTagHandler dependencyHandler = new DependencyTagHandler(opener.getContext(), taskManager, getUIFacade());\r\n    AllocationTagHandler allocationHandler = new AllocationTagHandler(hrManager, getTaskManager(), getRoleManager());\r\n    VacationTagHandler vacationHandler = new VacationTagHandler(hrManager);\r\n    PreviousStateTasksTagHandler previousStateHandler = new PreviousStateTasksTagHandler(myProject.getBaselines());\r\n    RoleTagHandler rolesHandler = new RoleTagHandler(roleManager);\r\n    TaskTagHandler taskHandler = new TaskTagHandler(taskManager, opener.getContext());\r\n    DefaultWeekTagHandler weekHandler = new DefaultWeekTagHandler(getActiveCalendar());\r\n    ViewTagHandler viewHandler = new ViewTagHandler(getUIFacade());\r\n    TaskPropertiesTagHandler taskPropHandler = new TaskPropertiesTagHandler(myProject.getCustomColumnsStorage());\r\n    opener.addTagHandler(taskPropHandler);\r\n    CustomPropertiesTagHandler customPropHandler = new CustomPropertiesTagHandler(opener.getContext(), getTaskManager(), myProject.getCustomColumnsStorage());\r\n    opener.addTagHandler(customPropHandler);\r\n    TaskDisplayColumnsTagHandler taskDisplayHandler = new TaskDisplayColumnsTagHandler(myVisibleFields);\r\n    opener.addTagHandler(taskDisplayHandler);\r\n    TaskDisplayColumnsTagHandler resourceViewHandler = new TaskDisplayColumnsTagHandler(getUIFacade().getResourceTree().getVisibleFields(), \"field\", \"id\", \"order\", \"width\");\r\n    opener.addTagHandler(resourceViewHandler);\r\n    opener.addParsingListener(resourceViewHandler);\r\n    opener.addTagHandler(taskHandler);\r\n    opener.addParsingListener(taskPropHandler);\r\n    opener.addParsingListener(taskDisplayHandler);\r\n    opener.addParsingListener(customPropHandler);\r\n    opener.addTagHandler(opener.getDefaultTagHandler());\r\n    opener.addTagHandler(resourceHandler);\r\n    opener.addTagHandler(dependencyHandler);\r\n    opener.addTagHandler(allocationHandler);\r\n    opener.addParsingListener(allocationHandler);\r\n    opener.addTagHandler(vacationHandler);\r\n    opener.addTagHandler(previousStateHandler);\r\n    opener.addTagHandler(rolesHandler);\r\n    opener.addTagHandler(weekHandler);\r\n    opener.addTagHandler(viewHandler);\r\n    opener.addParsingListener(dependencyHandler);\r\n    opener.addParsingListener(resourceHandler);\r\n    HolidayTagHandler holidayHandler = new HolidayTagHandler(myProject);\r\n    opener.addTagHandler(holidayHandler);\r\n    opener.addParsingListener(holidayHandler);\r\n    // \r\n    ProxyDocument.PortfolioTagHandler portfolioHandler = new ProxyDocument.PortfolioTagHandler();\r\n    opener.addTagHandler(portfolioHandler);\r\n    if (opener.load(getInputStream())) {\r\n        mySuccessState.enter();\r\n    } else {\r\n        myFailureState.enter();\r\n    }\r\n}"},
 {"id":2336, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioImpl.-init-()", "ownerclassid":"250", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioImpl", "sourcecode":"PortfolioImpl() {\r\n}"},
 {"id":2337, "name":"getDefaultDocument()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioImpl.getDefaultDocument()", "ownerclassid":"250", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioImpl", "sourcecode":"public Document getDefaultDocument() {\r\n    return myDefaultDocument;\r\n}"},
 {"id":2338, "name":"setDefaultDocument(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioImpl.setDefaultDocument(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"250", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioImpl", "sourcecode":"void setDefaultDocument(Document document) {\r\n    if ((myDefaultDocument) != null) {\r\n        throw new IllegalStateException(\"Dont set default document twice\");\r\n    }\r\n    myDefaultDocument = document;\r\n}"},
 {"id":2339, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioTagHandler.-init-()", "ownerclassid":"251", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioTagHandler", "sourcecode":"PortfolioTagHandler() {\r\n}"},
 {"id":2340, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"251", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n    if (ProxyDocument.PortfolioTagHandler.PORTFOLIO_TAG.equals(qName)) {\r\n        isReadingPortfolio = false;\r\n    }\r\n}"},
 {"id":2341, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"251", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    if (ProxyDocument.PortfolioTagHandler.PORTFOLIO_TAG.equals(qName)) {\r\n        isReadingPortfolio = true;\r\n        return;\r\n    }\r\n    if ((ProxyDocument.PortfolioTagHandler.PROJECT_TAG.equals(qName)) && (isReadingPortfolio)) {\r\n        String locationAsString = attrs.getValue(ProxyDocument.PortfolioTagHandler.LOCATION_ATTR);\r\n        if (locationAsString != null) {\r\n            Document document = myCreator.getDocument(locationAsString);\r\n            getPortfolioImpl().setDefaultDocument(document);\r\n        }\r\n    }\r\n}"},
 {"id":2342, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$SuccessState.-init-()", "ownerclassid":"252", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$SuccessState", "sourcecode":"SuccessState() {\r\n}"},
 {"id":2343, "name":"enter()", "fullmethod":"net.sourceforge.ganttproject.document.ProxyDocument$SuccessState.enter()", "ownerclassid":"252", "ownerclassname":"net.sourceforge.ganttproject.document.ProxyDocument$SuccessState", "sourcecode":"void enter() {\r\n}"},
 {"id":2344, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.export.CommandLineExportApplication.-init-()", "ownerclassid":"254", "ownerclassname":"net.sourceforge.ganttproject.export.CommandLineExportApplication", "sourcecode":"public CommandLineExportApplication() {\r\n    Exporter[] exporters = Mediator.getPluginManager().getExporters();\r\n    for (int i = 0; i < (exporters.length); i++) {\r\n        Exporter next = exporters[i];\r\n        List nextExtensions = Arrays.asList(next.getFileExtensions());\r\n        for (int j = 0; j < (nextExtensions.size()); j++) {\r\n            myFlag2exporter.put((\"-\" + (nextExtensions.get(j))), next);\r\n        }\r\n    }\r\n}"},
 {"id":2345, "name":"export(java.util.Map)", "fullmethod":"net.sourceforge.ganttproject.export.CommandLineExportApplication.export(java.util.Map)", "ownerclassid":"254", "ownerclassname":"net.sourceforge.ganttproject.export.CommandLineExportApplication", "sourcecode":"public boolean export(Map parsedArgs) {\r\n    if (parsedArgs.isEmpty()) {\r\n        return false;\r\n    }\r\n    List values = new ArrayList();\r\n    Exporter exporter = findExporter(parsedArgs, values);\r\n    if ((exporter != null) && ((values.size()) > 0)) {\r\n        GanttProject project = new GanttProject(false);\r\n        String inputFileName = String.valueOf(values.get(0));\r\n        project.openStartupDocument(inputFileName);\r\n        ConsoleUIFacade consoleUI = new ConsoleUIFacade(project.getUIFacade());\r\n        File inputFile = new File(inputFileName);\r\n        if (false == (inputFile.exists())) {\r\n            consoleUI.showErrorDialog(((\"File \" + inputFileName) + \" does not exist.\"));\r\n            return true;\r\n        }\r\n        if (false == (inputFile.canRead())) {\r\n            consoleUI.showErrorDialog(((\"File \" + inputFileName) + \" is not readable.\"));\r\n            return true;\r\n        }\r\n        Platform.getJobManager().setProgressProvider(null);\r\n        File outputFile;\r\n        if ((values.size()) > 1) {\r\n            outputFile = new File(String.valueOf(values.get(1)));\r\n        } else {\r\n            outputFile = FileChooserPage.proposeOutputFile(project, exporter);\r\n        }\r\n        System.err.println((\"[CommandLineExportApplication] export(): exporting with \" + exporter));\r\n        exporter.setContext(project, consoleUI);\r\n        if (exporter instanceof ExportFileWizardImpl.LegacyOptionsClient) {\r\n            ((ExportFileWizardImpl.LegacyOptionsClient) (exporter)).setOptions(project.getOptions());\r\n        }\r\n        try {\r\n            ExportFinalizationJob finalizationJob = new ExportFinalizationJob() {\r\n                public void run(File[] exportedFiles) {\r\n                    System.exit(0);\r\n                }\r\n            };\r\n            exporter.run(outputFile, finalizationJob);\r\n        } catch (Exception e) {\r\n            consoleUI.showErrorDialog(e);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}"},
 {"id":2346, "name":"findExporter(java.util.Map,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.export.CommandLineExportApplication.findExporter(java.util.Map,java.util.List)", "ownerclassid":"254", "ownerclassname":"net.sourceforge.ganttproject.export.CommandLineExportApplication", "sourcecode":"private Exporter findExporter(Map args, List outputParams) {\r\n    for (Iterator exporters = myFlag2exporter.entrySet().iterator(); exporters.hasNext();) {\r\n        Map.Entry nextEntry = ((Map.Entry) (exporters.next()));\r\n        String flag = ((String) (nextEntry.getKey()));\r\n        if (args.containsKey(flag)) {\r\n            outputParams.addAll(((Collection) (args.get(flag))));\r\n            return ((Exporter) (nextEntry.getValue()));\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":2347, "name":"getCommandLineFlags()", "fullmethod":"net.sourceforge.ganttproject.export.CommandLineExportApplication.getCommandLineFlags()", "ownerclassid":"254", "ownerclassname":"net.sourceforge.ganttproject.export.CommandLineExportApplication", "sourcecode":"public Collection getCommandLineFlags() {\r\n    return myFlag2exporter.keySet();\r\n}"},
 {"id":2348, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.-init-(net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"ConsoleUIFacade(UIFacade realFacade) {\r\n    myRealFacade = realFacade;\r\n}"},
 {"id":2349, "name":"changeWorkingDirectory(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.changeWorkingDirectory(java.io.File)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void changeWorkingDirectory(File parentFile) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2350, "name":"getActiveChart()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getActiveChart()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public Chart getActiveChart() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2351, "name":"getGanttChart()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getGanttChart()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public GanttChart getGanttChart() {\r\n    return myRealFacade.getGanttChart();\r\n}"},
 {"id":2352, "name":"getGanttDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getGanttDividerLocation()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public int getGanttDividerLocation() {\r\n    // TODO Auto-generated method stub\r\n    return 0;\r\n}"},
 {"id":2353, "name":"getMainFrame()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getMainFrame()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public Frame getMainFrame() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2354, "name":"getResourceChart()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getResourceChart()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public Chart getResourceChart() {\r\n    return myRealFacade.getResourceChart();\r\n}"},
 {"id":2355, "name":"getResourceDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getResourceDividerLocation()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public int getResourceDividerLocation() {\r\n    // TODO Auto-generated method stub\r\n    return 0;\r\n}"},
 {"id":2356, "name":"getResourceTree()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getResourceTree()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public ResourceTreeUIFacade getResourceTree() {\r\n    return myRealFacade.getResourceTree();\r\n}"},
 {"id":2357, "name":"getScrollingManager()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getScrollingManager()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public ScrollingManager getScrollingManager() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2358, "name":"getTaskSelectionContext()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getTaskSelectionContext()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public TaskSelectionContext getTaskSelectionContext() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2359, "name":"getTaskTree()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getTaskTree()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public TaskTreeUIFacade getTaskTree() {\r\n    return myRealFacade.getTaskTree();\r\n}"},
 {"id":2360, "name":"getUndoManager()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getUndoManager()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public GPUndoManager getUndoManager() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2361, "name":"getViewIndex()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getViewIndex()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public int getViewIndex() {\r\n    // TODO Auto-generated method stub\r\n    return 0;\r\n}"},
 {"id":2362, "name":"getZoomManager()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.getZoomManager()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public ZoomManager getZoomManager() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2363, "name":"logErrorMessage(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.logErrorMessage(java.lang.Throwable)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void logErrorMessage(Throwable e) {\r\n    System.err.println((\"[ConsoleUIFacade] ERROR:\" + (e.getMessage())));\r\n    e.printStackTrace();\r\n}"},
 {"id":2364, "name":"refresh()", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.refresh()", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void refresh() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2365, "name":"setGanttDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.setGanttDividerLocation(int)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void setGanttDividerLocation(int location) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2366, "name":"setResourceDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.setResourceDividerLocation(int)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void setResourceDividerLocation(int location) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2367, "name":"setStatusText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.setStatusText(java.lang.String)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void setStatusText(String text) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2368, "name":"setViewIndex(int)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.setViewIndex(int)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void setViewIndex(int viewIndex) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2369, "name":"setWorkbenchTitle(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.setWorkbenchTitle(java.lang.String)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void setWorkbenchTitle(String title) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2370, "name":"showConfirmationDialog(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.showConfirmationDialog(java.lang.String,java.lang.String)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public UIFacade.Choice showConfirmationDialog(String message, String title) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2371, "name":"showDialog(java.awt.Component,javax.swing.Action[])", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.showDialog(java.awt.Component,javax.swing.Action[])", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void showDialog(Component content, Action[] buttonActions) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2372, "name":"showDialog(java.awt.Component,javax.swing.Action[],java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.showDialog(java.awt.Component,javax.swing.Action[],java.lang.String)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void showDialog(Component content, Action[] buttonActions, String title) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2373, "name":"showErrorDialog(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.showErrorDialog(java.lang.String)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void showErrorDialog(String errorMessage) {\r\n    System.err.println((\"[ConsoleUIFacade] ERROR: \" + errorMessage));\r\n}"},
 {"id":2374, "name":"showErrorDialog(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.showErrorDialog(java.lang.Throwable)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void showErrorDialog(Throwable e) {\r\n    System.err.println((\"[ConsoleUIFacade] ERROR: \" + (e.getMessage())));\r\n    e.printStackTrace();\r\n}"},
 {"id":2375, "name":"showPopupMenu(java.awt.Component,javax.swing.Action[],int,int)", "fullmethod":"net.sourceforge.ganttproject.export.ConsoleUIFacade.showPopupMenu(java.awt.Component,javax.swing.Action[],int,int)", "ownerclassid":"255", "ownerclassname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "sourcecode":"public void showPopupMenu(Component invoker, Action[] actions, int x, int y) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":2376, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,java.lang.String,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData.-init-(net.sourceforge.ganttproject.IGanttProject,java.lang.String,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings,java.lang.String)", "ownerclassid":"256", "ownerclassname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData", "sourcecode":"public DeprecatedProjectExportData(IGanttProject project, final String myFilename, final Chart myGanttChart, final Chart myResourceChart, final GanttExportSettings myExportOptions, final String myXslFoScript) {\r\n    super();\r\n    this.myProject = project;\r\n    this.myFilename = myFilename;\r\n    this.myGanttChart = myGanttChart;\r\n    this.myResourceChart = myResourceChart;\r\n    this.myExportOptions = myExportOptions;\r\n    this.myXslFoScript = myXslFoScript;\r\n}"},
 {"id":2377, "name":"-init-(java.lang.String,java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.export.ExportException.-init-(java.lang.String,java.lang.Throwable)", "ownerclassid":"257", "ownerclassname":"net.sourceforge.ganttproject.export.ExportException", "sourcecode":"public ExportException(String message, Throwable cause) {\r\n    super(message, cause);\r\n}"},
 {"id":2378, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ExportException.-init-(java.lang.String)", "ownerclassid":"257", "ownerclassname":"net.sourceforge.ganttproject.export.ExportException", "sourcecode":"public ExportException(String message) {\r\n    super(message);\r\n}"},
 {"id":2379, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "ownerclassid":"258", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileAction", "sourcecode":"public ExportFileAction(UIFacade uiFacade, IGanttProject project, GanttOptions options) {\r\n    super(null, \"16\");\r\n    /* putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_E,\n    MENU_MASK));\n     */\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myOptions = options;\r\n}"},
 {"id":2380, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"258", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    ExportFileWizardImpl wizard = new ExportFileWizardImpl(myUIFacade, myProject, myOptions);\r\n    wizard.show();\r\n    // myProject.export();\r\n}"},
 {"id":2381, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileAction.getIconFilePrefix()", "ownerclassid":"258", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"export_\";\r\n}"},
 {"id":2382, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileAction.getLocalizedName()", "ownerclassid":"258", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileAction", "sourcecode":"protected String getLocalizedName() {\r\n    return getI18n(\"export\");\r\n}"},
 {"id":2383, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "ownerclassid":"262", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, GanttOptions options) {\r\n    this(uiFacade, project, uiFacade.getGanttChart(), uiFacade.getResourceChart(), uiFacade.getActiveChart(), options);\r\n}"},
 {"id":2384, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttOptions)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttOptions)", "ownerclassid":"262", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, Chart ganttChart, Chart resourceChart, Chart visibleChart, GanttOptions options) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"exportWizard.dialog.title\"));\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n    myGanttChart = ganttChart;\r\n    myResourceChart = resourceChart;\r\n    myVisibleChart = visibleChart;\r\n    myOptions = options;\r\n    myState = new ExportFileWizardImpl.State(project.getDocument());\r\n    if ((ExportFileWizardImpl.ourExporters) == null) {\r\n        ExportFileWizardImpl.ourExporters = Mediator.getPluginManager().getExporters();\r\n    }\r\n    Exporter[] exporters = ExportFileWizardImpl.ourExporters;\r\n    myState.setExporter(((ExportFileWizardImpl.ourLastSelectedExporter) == null ? exporters[0] : ExportFileWizardImpl.ourLastSelectedExporter));\r\n    for (int i = 0; i < (exporters.length); i++) {\r\n        exporters[i].setContext(project, uiFacade);\r\n        if ((exporters[i]) instanceof ExportFileWizardImpl.LegacyOptionsClient) {\r\n            ((ExportFileWizardImpl.LegacyOptionsClient) (exporters[i])).setOptions(myOptions);\r\n        }\r\n    }\r\n    addPage(new ExporterChooserPage(exporters, myState));\r\n    addPage(new FileChooserPage(myState, myProject));\r\n}"},
 {"id":2385, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-()", "ownerclassid":"262", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "sourcecode":"1() {\r\n}"},
 {"id":2386, "name":"-init-(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"262", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "sourcecode":"State(Document projectDocument) {\r\n    // myProjectDocument = projectDocument;\r\n}"},
 {"id":2387, "name":"canFinish()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.canFinish()", "ownerclassid":"262", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "sourcecode":"protected boolean canFinish() {\r\n    return ((myState.getExporter()) != null) && ((myState.myFile) != null);\r\n}"},
 {"id":2388, "name":"getLanguage()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.getLanguage()", "ownerclassid":"262", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "sourcecode":"/* public void doExport() {\ntry {\ndoExport(myExportFileInfo);\n} catch (Exception e) {\ne.printStackTrace();\ngetUIFacade().showErrorDialog(e);\n}\n}\n\nprivate void doExport(ExportFileInfo info) throws Exception {\nExporter[] exporters = Mediator.getPluginManager().getExporters();\nfor (int i=0; i<exporters.length; i++) {\nExporter next = exporters[i];\nCollection extensions = Arrays.asList(next.getFileExtensions());\nif (extensions.contains(info.getFileExtension())) {\nnext.setContext(myProject, myUIFacade);\nnext.run(info.myFile);\ncontinue;\n}\n}\nswitch (info.myFormat) {\ncase ExportFileInfo.FORMAT_XFIG: {\n// show a message on the status bar\nsetStatusText(getLanguage().getText(\"xfigexport\"));\nString filename = info.myFile.toString();\nif (!filename.toUpperCase().endsWith(\".FIG\"))\nfilename += \".fig\";\n\nGanttXFIGSaver saver = new GanttXFIGSaver(myProject);\nsaver.save(new FileOutputStream(new File(filename)));\nbreak;\n}\n\ncase ExportFileInfo.FORMAT_CSV: {\n// show a message on the status bar\nsetStatusText(getLanguage().getText(\"csvexport\"));\nString filename = info.myFile.toString();\nif (!filename.toUpperCase().endsWith(\".CSV\"))\nfilename += \".csv\";\n\nGanttCSVExport saver = new GanttCSVExport(myProject, myOptions\n.getCSVOptions());\nsaver.save(new FileOutputStream(new File(filename)));\nbreak;\n}\n}\n}\n */\r\nprivate GanttLanguage getLanguage() {\r\n    return GanttLanguage.getInstance();\r\n}"},
 {"id":2389, "name":"onOkPressed()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.onOkPressed()", "ownerclassid":"262", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "sourcecode":"protected void onOkPressed() {\r\n    super.onOkPressed();\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            try {\r\n                ExportFinalizationJob finalizationJob = new ExportFileWizardImpl.ExportFinalizationJobImpl();\r\n                myState.getExporter().run(myState.getFile(), finalizationJob);\r\n            } catch (Exception e) {\r\n                getUIFacade().showErrorDialog(e);\r\n            }\r\n        }\r\n    });\r\n}"},
 {"id":2390, "name":"setStatusText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.setStatusText(java.lang.String)", "ownerclassid":"262", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "sourcecode":"private void setStatusText(String text) {\r\n    getUIFacade().setStatusText(text);\r\n}"},
 {"id":2391, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$ExportFinalizationJobImpl.-init-()", "ownerclassid":"259", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$ExportFinalizationJobImpl", "sourcecode":"ExportFinalizationJobImpl() {\r\n}"},
 {"id":2392, "name":"run(java.io.File[])", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$ExportFinalizationJobImpl.run(java.io.File[])", "ownerclassid":"259", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$ExportFinalizationJobImpl", "sourcecode":"public void run(File[] exportedFiles) {\r\n    if ((myState.getPublishInWebOption().isChecked()) && ((exportedFiles.length) > 0)) {\r\n        WebPublisher publisher = new WebPublisher();\r\n        publisher.run(exportedFiles, myProject.getDocumentManager().getFTPOptions(), getUIFacade());\r\n    }\r\n}"},
 {"id":2393, "name":"setOptions(net.sourceforge.ganttproject.GanttOptions)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$LegacyOptionsClient.setOptions(net.sourceforge.ganttproject.GanttOptions)", "ownerclassid":"260", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$LegacyOptionsClient", "sourcecode":"void setOptions(GanttOptions options);"},
 {"id":2394, "name":"-init-(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State.-init-(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"261", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "sourcecode":"State(Document projectDocument) {\r\n    // myProjectDocument = projectDocument;\r\n}"},
 {"id":2395, "name":"getExporter()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State.getExporter()", "ownerclassid":"261", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "sourcecode":"Exporter getExporter() {\r\n    return myExporter;\r\n}"},
 {"id":2396, "name":"getFile()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State.getFile()", "ownerclassid":"261", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "sourcecode":"public File getFile() {\r\n    return myFile;\r\n}"},
 {"id":2397, "name":"getPublishInWebOption()", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State.getPublishInWebOption()", "ownerclassid":"261", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "sourcecode":"BooleanOption getPublishInWebOption() {\r\n    return myPublishInWebOption;\r\n}"},
 {"id":2398, "name":"setExporter(net.sourceforge.ganttproject.export.Exporter)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State.setExporter(net.sourceforge.ganttproject.export.Exporter)", "ownerclassid":"261", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "sourcecode":"void setExporter(Exporter exporter) {\r\n    myExporter = exporter;\r\n    ExportFileWizardImpl.ourLastSelectedExporter = exporter;\r\n}"},
 {"id":2399, "name":"setFile(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State.setFile(java.io.File)", "ownerclassid":"261", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "sourcecode":"public void setFile(File file) {\r\n    myFile = file;\r\n    this.adjustButtonState();\r\n}"},
 {"id":2400, "name":"run(java.io.File[])", "fullmethod":"net.sourceforge.ganttproject.export.ExportFinalizationJob.run(java.io.File[])", "ownerclassid":"263", "ownerclassname":"net.sourceforge.ganttproject.export.ExportFinalizationJob", "sourcecode":"void run(File[] exportedFiles);"},
 {"id":2401, "name":"getFileExtensions()", "fullmethod":"net.sourceforge.ganttproject.export.Exporter.getFileExtensions()", "ownerclassid":"264", "ownerclassname":"net.sourceforge.ganttproject.export.Exporter", "sourcecode":"String[] getFileExtensions();"},
 {"id":2402, "name":"getFileNamePattern()", "fullmethod":"net.sourceforge.ganttproject.export.Exporter.getFileNamePattern()", "ownerclassid":"264", "ownerclassname":"net.sourceforge.ganttproject.export.Exporter", "sourcecode":"String getFileNamePattern();"},
 {"id":2403, "name":"getFileTypeDescription()", "fullmethod":"net.sourceforge.ganttproject.export.Exporter.getFileTypeDescription()", "ownerclassid":"264", "ownerclassname":"net.sourceforge.ganttproject.export.Exporter", "sourcecode":"String getFileTypeDescription();"},
 {"id":2404, "name":"getOptions()", "fullmethod":"net.sourceforge.ganttproject.export.Exporter.getOptions()", "ownerclassid":"264", "ownerclassname":"net.sourceforge.ganttproject.export.Exporter", "sourcecode":"GPOptionGroup getOptions();"},
 {"id":2405, "name":"getSecondaryOptions()", "fullmethod":"net.sourceforge.ganttproject.export.Exporter.getSecondaryOptions()", "ownerclassid":"264", "ownerclassname":"net.sourceforge.ganttproject.export.Exporter", "sourcecode":"GPOptionGroup[] getSecondaryOptions();"},
 {"id":2406, "name":"proposeFileExtension()", "fullmethod":"net.sourceforge.ganttproject.export.Exporter.proposeFileExtension()", "ownerclassid":"264", "ownerclassname":"net.sourceforge.ganttproject.export.Exporter", "sourcecode":"// File proposeOutputFile(IGanttProject project);\r\nString proposeFileExtension();"},
 {"id":2407, "name":"run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "fullmethod":"net.sourceforge.ganttproject.export.Exporter.run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "ownerclassid":"264", "ownerclassname":"net.sourceforge.ganttproject.export.Exporter", "sourcecode":"void run(File outputFile, ExportFinalizationJob finalizationJob) throws Exception;"},
 {"id":2408, "name":"setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.export.Exporter.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"264", "ownerclassname":"net.sourceforge.ganttproject.export.Exporter", "sourcecode":"void setContext(IGanttProject project, UIFacade uiFacade);"},
 {"id":2409, "name":"-init-(net.sourceforge.ganttproject.export.Exporter[],net.sourceforge.ganttproject.export.ExportFileWizardImpl$State)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterChooserPage.-init-(net.sourceforge.ganttproject.export.Exporter[],net.sourceforge.ganttproject.export.ExportFileWizardImpl$State)", "ownerclassid":"265", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterChooserPage", "sourcecode":"/**\r\n *\r\n */\r\nExporterChooserPage(Exporter[] exporters, ExportFileWizardImpl.State state) {\r\n    myExporters = exporters;\r\n    myState = state;\r\n}"},
 {"id":2410, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterChooserPage.-init-(java.lang.String)", "ownerclassid":"265", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterChooserPage", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":2411, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterChooserPage.getComponent()", "ownerclassid":"265", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterChooserPage", "sourcecode":"public Component getComponent() {\r\n    int selectedGroupIndex = 0;\r\n    Action[] choiceChangeActions = new Action[myExporters.length];\r\n    GPOptionGroup[] choiceOptions = new GPOptionGroup[myExporters.length];\r\n    for (int i = 0; i < (myExporters.length); i++) {\r\n        final Exporter nextExporter = myExporters[i];\r\n        if (nextExporter == (myState.getExporter())) {\r\n            selectedGroupIndex = i;\r\n        }\r\n        Action nextAction = new AbstractAction(nextExporter.getFileTypeDescription()) {\r\n            public void actionPerformed(ActionEvent e) {\r\n                ExporterChooserPage.this.myState.setExporter(nextExporter);\r\n            }\r\n        };\r\n        GPOptionGroup nextOptions = nextExporter.getOptions();\r\n        if (nextOptions != null) {\r\n            nextOptions.lock();\r\n        }\r\n        choiceChangeActions[i] = nextAction;\r\n        choiceOptions[i] = nextOptions;\r\n    }\r\n    GPOptionChoicePanel choicePanel = new GPOptionChoicePanel();\r\n    return choicePanel.getComponent(choiceChangeActions, choiceOptions, selectedGroupIndex);\r\n}"},
 {"id":2412, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterChooserPage.getTitle()", "ownerclassid":"265", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterChooserPage", "sourcecode":"public String getTitle() {\r\n    return language.getText(\"option.exporter.title\");\r\n}"},
 {"id":2413, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterChooserPage.setActive(boolean)", "ownerclassid":"265", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterChooserPage", "sourcecode":"public void setActive(boolean b) {\r\n    if (false == b) {\r\n        for (int i = 0; i < (myExporters.length); i++) {\r\n            if ((myExporters[i].getOptions()) != null) {\r\n                myExporters[i].getOptions().commit();\r\n            }\r\n        }\r\n    } else {\r\n        for (int i = 0; i < (myExporters.length); i++) {\r\n            if ((myExporters[i].getOptions()) != null) {\r\n                myExporters[i].getOptions().lock();\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":2414, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.-init-()", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"ExporterToCSV() {\r\n}"},
 {"id":2415, "name":"getFileExtensions()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.getFileExtensions()", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public String[] getFileExtensions() {\r\n    return ExporterToCSV.FILE_EXTENSIONS;\r\n}"},
 {"id":2416, "name":"getFileNamePattern()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.getFileNamePattern()", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public String getFileNamePattern() {\r\n    return ExporterToCSV.FILE_EXTENSIONS[0];\r\n}"},
 {"id":2417, "name":"getFileTypeDescription()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.getFileTypeDescription()", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public String getFileTypeDescription() {\r\n    return GanttLanguage.getInstance().getText(\"impex.csv.description\");\r\n}"},
 {"id":2418, "name":"getOptions()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.getOptions()", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public GPOptionGroup getOptions() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2419, "name":"getSecondaryOptions()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.getSecondaryOptions()", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public GPOptionGroup[] getSecondaryOptions() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":2420, "name":"proposeFileExtension()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.proposeFileExtension()", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public String proposeFileExtension() {\r\n    return ExporterToCSV.FILE_EXTENSIONS[0];\r\n}"},
 {"id":2421, "name":"run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public void run(File outputFile, ExportFinalizationJob finalizationJob) throws Exception {\r\n    // TODO Auto-generated method stub\r\n    if (!(outputFile.exists())) {\r\n        outputFile.createNewFile();\r\n    }\r\n    GanttCSVExport legacyExporter = new GanttCSVExport(myProject, myOptions.getCSVOptions());\r\n    legacyExporter.save(new FileOutputStream(outputFile));\r\n    finalizationJob.run(new File[]{ outputFile });\r\n}"},
 {"id":2422, "name":"setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public void setContext(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n}"},
 {"id":2423, "name":"setOptions(net.sourceforge.ganttproject.GanttOptions)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToCSV.setOptions(net.sourceforge.ganttproject.GanttOptions)", "ownerclassid":"266", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToCSV", "sourcecode":"public void setOptions(GanttOptions options) {\r\n    myOptions = options;\r\n}"},
 {"id":2424, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.-init-()", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"FileTypeOption() {\r\n    super(\"impex.image.fileformat\");\r\n}"},
 {"id":2425, "name":"getFileExtensions()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.getFileExtensions()", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"public String[] getFileExtensions() {\r\n    return ExporterToImage.FileTypeOption.FILE_EXTENSION;\r\n}"},
 {"id":2426, "name":"getFileNamePattern()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.getFileNamePattern()", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"public String getFileNamePattern() {\r\n    return proposeFileExtension();\r\n}"},
 {"id":2427, "name":"getFileTypeDescription()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.getFileTypeDescription()", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"public String getFileTypeDescription() {\r\n    return MessageFormat.format(GanttLanguage.getInstance().getText(\"impex.image.description\"), new Object[]{ proposeFileExtension() });\r\n}"},
 {"id":2428, "name":"getOptions()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.getOptions()", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"public GPOptionGroup getOptions() {\r\n    return myOptions;\r\n}"},
 {"id":2429, "name":"getSecondaryOptions()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.getSecondaryOptions()", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"public GPOptionGroup[] getSecondaryOptions() {\r\n    // return myGanttChart.getOptionGroups();\r\n    return null;\r\n}"},
 {"id":2430, "name":"proposeFileExtension()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.proposeFileExtension()", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"public String proposeFileExtension() {\r\n    return myFileTypeOption.proposeFileExtension();\r\n}"},
 {"id":2431, "name":"run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"public void run(File outputFile, ExportFinalizationJob finalizationJob) throws Exception {\r\n    Chart chart = myUIFacade.getActiveChart();\r\n    if (chart == null) {\r\n        chart = myUIFacade.getGanttChart();\r\n    }\r\n    RenderedImage renderedImage = chart.getRenderedImage(new GanttExportSettings());\r\n    ImageIO.write(renderedImage, myFileTypeOption.proposeFileExtension(), outputFile);\r\n    finalizationJob.run(new File[]{ outputFile });\r\n}"},
 {"id":2432, "name":"setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"268", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage", "sourcecode":"public void setContext(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myGanttChart = uiFacade.getGanttChart().createCopy();\r\n}"},
 {"id":2433, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption.-init-()", "ownerclassid":"267", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption", "sourcecode":"FileTypeOption() {\r\n    super(\"impex.image.fileformat\");\r\n}"},
 {"id":2434, "name":"getAvailableValues()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption.getAvailableValues()", "ownerclassid":"267", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption", "sourcecode":"public String[] getAvailableValues() {\r\n    return ExporterToImage.FileTypeOption.FILE_FORMAT_ID;\r\n}"},
 {"id":2435, "name":"getPersistentValue()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption.getPersistentValue()", "ownerclassid":"267", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption", "sourcecode":"public String getPersistentValue() {\r\n    return null;\r\n}"},
 {"id":2436, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption.getValue()", "ownerclassid":"267", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption", "sourcecode":"public String getValue() {\r\n    return myValue;\r\n}"},
 {"id":2437, "name":"isChanged()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption.isChanged()", "ownerclassid":"267", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption", "sourcecode":"public boolean isChanged() {\r\n    return false;\r\n}"},
 {"id":2438, "name":"loadPersistentValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption.loadPersistentValue(java.lang.String)", "ownerclassid":"267", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption", "sourcecode":"public void loadPersistentValue(String value) {\r\n}"},
 {"id":2439, "name":"proposeFileExtension()", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption.proposeFileExtension()", "ownerclassid":"267", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption", "sourcecode":"String proposeFileExtension() {\r\n    for (int i = 0; i < (ExporterToImage.FileTypeOption.FILE_FORMAT_ID.length); i++) {\r\n        if (myValue.equals(ExporterToImage.FileTypeOption.FILE_FORMAT_ID[i])) {\r\n            return ExporterToImage.FileTypeOption.FILE_EXTENSION[i];\r\n        }\r\n    }\r\n    throw new IllegalStateException((((\"Selected format=\" + (myValue)) + \" has not been found in known formats:\") + (Arrays.asList(ExporterToImage.FileTypeOption.FILE_FORMAT_ID))));\r\n}"},
 {"id":2440, "name":"setValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption.setValue(java.lang.String)", "ownerclassid":"267", "ownerclassname":"net.sourceforge.ganttproject.export.ExporterToImage$FileTypeOption", "sourcecode":"public void setValue(String value) {\r\n    myValue = value;\r\n}"},
 {"id":2441, "name":"-init-(net.sourceforge.ganttproject.export.ExportFileWizardImpl$State,net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.-init-(net.sourceforge.ganttproject.export.ExportFileWizardImpl$State,net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"FileChooserPage(ExportFileWizardImpl.State state, IGanttProject project) {\r\n    myState = state;\r\n    myProject = project;\r\n    myWebPublishingGroup = new GPOptionGroup(\"exporter.webPublishing\", new GPOption[]{ state.getPublishInWebOption() });\r\n    myWebPublishingGroup.setTitled(false);\r\n    // myOptionsBuilder = new OptionsPageBuilder();\r\n}"},
 {"id":2442, "name":"createFileFilter()", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.createFileFilter()", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"protected FileFilter createFileFilter() {\r\n    return new ExtensionBasedFileFilter(myState.getExporter().getFileNamePattern(), myState.getExporter().getFileTypeDescription());\r\n}"},
 {"id":2443, "name":"getFileChooserTitle()", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.getFileChooserTitle()", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"protected String getFileChooserTitle() {\r\n    return GanttLanguage.getInstance().getText(\"selectFileToExport\");\r\n}"},
 {"id":2444, "name":"getOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.getOptionGroups()", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"protected GPOptionGroup[] getOptionGroups() {\r\n    GPOptionGroup[] exporterOptions = null;\r\n    if ((myState.getExporter()) != null) {\r\n        exporterOptions = myState.getExporter().getSecondaryOptions();\r\n    }\r\n    if (exporterOptions == null) {\r\n        return new GPOptionGroup[]{ myWebPublishingGroup };\r\n    }\r\n    GPOptionGroup[] result = new GPOptionGroup[(exporterOptions.length) + 1];\r\n    result[0] = myWebPublishingGroup;\r\n    System.arraycopy(exporterOptions, 0, result, 1, exporterOptions.length);\r\n    return result;\r\n}"},
 {"id":2445, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.getTitle()", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"public String getTitle() {\r\n    return GanttLanguage.getInstance().getText(\"selectFileToExport\");\r\n}"},
 {"id":2446, "name":"onFileChosen(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.onFileChosen(java.io.File)", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"protected void onFileChosen(File file) {\r\n    String proposedExtension = myState.getExporter().proposeFileExtension();\r\n    if (proposedExtension != null) {\r\n        if (false == (file.getName().toLowerCase().endsWith(proposedExtension))) {\r\n            file = new File((((file.getAbsolutePath()) + \".\") + proposedExtension));\r\n        }\r\n    }\r\n    myState.setFile(file);\r\n}"},
 {"id":2447, "name":"proposeOutputFile(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.proposeOutputFile(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"public File proposeOutputFile(IGanttProject project) {\r\n    return FileChooserPage.proposeOutputFile(project, myState.getExporter());\r\n}"},
 {"id":2448, "name":"proposeOutputFile(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.export.Exporter)", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.proposeOutputFile(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.export.Exporter)", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"static File proposeOutputFile(IGanttProject project, Exporter exporter) {\r\n    String proposedExtension = exporter.proposeFileExtension();\r\n    if (proposedExtension == null) {\r\n        return null;\r\n    }\r\n    if ((FileChooserPage.ourLastSelectedFile) != null) {\r\n        String name = FileChooserPage.ourLastSelectedFile.getAbsolutePath();\r\n        int lastDot = name.lastIndexOf(.);\r\n        String extension = (lastDot >= 0) ? name.substring((lastDot + 1)) : \"\";\r\n        if (extension.equals(proposedExtension)) {\r\n            return FileChooserPage.ourLastSelectedFile;\r\n        }\r\n    }\r\n    File userHome = new File(System.getProperty(\"user.home\"));\r\n    File result = new File(userHome, (((project.getProjectName()) + \".\") + proposedExtension));\r\n    Document projectDocument = project.getDocument();\r\n    if (projectDocument != null) {\r\n        File localFile = new File(projectDocument.getFilePath());\r\n        if (localFile.exists()) {\r\n            String name = localFile.getAbsolutePath();\r\n            int lastDot = name.lastIndexOf(.);\r\n            name = ((name.substring(0, lastDot)) + \".\") + proposedExtension;\r\n            result = new File(name);\r\n        } else {\r\n            File directory = localFile.getParentFile();\r\n            if (directory.exists()) {\r\n                result = new File(directory, (((project.getProjectName()) + \".\") + proposedExtension));\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":2449, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.export.FileChooserPage.setActive(boolean)", "ownerclassid":"269", "ownerclassname":"net.sourceforge.ganttproject.export.FileChooserPage", "sourcecode":"public void setActive(boolean b) {\r\n    if (b == false) {\r\n        myState.setFile(getSelectedFile());\r\n        FileChooserPage.ourLastSelectedFile = getSelectedFile();\r\n        super.setActive(b);\r\n    } else {\r\n        super.setActive(b);\r\n        File proposedFile = proposeOutputFile(myProject);\r\n        if (proposedFile == null) {\r\n            setSelectedFile(myState.getFile());\r\n            return;\r\n        }\r\n        if (false == (proposedFile.equals(getSelectedFile()))) {\r\n            setSelectedFile(proposedFile);\r\n            myState.setFile(proposedFile);\r\n        }\r\n    }\r\n}"},
 {"id":2450, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.export.TaskVisitor.-init-()", "ownerclassid":"270", "ownerclassname":"net.sourceforge.ganttproject.export.TaskVisitor", "sourcecode":"TaskVisitor() {\r\n}"},
 {"id":2451, "name":"serializeTask(net.sourceforge.ganttproject.task.Task,int)", "fullmethod":"net.sourceforge.ganttproject.export.TaskVisitor.serializeTask(net.sourceforge.ganttproject.task.Task,int)", "ownerclassid":"270", "ownerclassname":"net.sourceforge.ganttproject.export.TaskVisitor", "sourcecode":"protected abstract String serializeTask(Task t, int depth) throws Exception;"},
 {"id":2452, "name":"visit(net.sourceforge.ganttproject.task.Task,int,java.lang.StringBuffer)", "fullmethod":"net.sourceforge.ganttproject.export.TaskVisitor.visit(net.sourceforge.ganttproject.task.Task,int,java.lang.StringBuffer)", "ownerclassid":"270", "ownerclassname":"net.sourceforge.ganttproject.export.TaskVisitor", "sourcecode":"void visit(Task task, int depth, StringBuffer out) throws Exception {\r\n    Task[] nestedTasks = task.getManager().getTaskHierarchy().getNestedTasks(task);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        Task next = nestedTasks[i];\r\n        String nextSerialized = serializeTask(next, depth);\r\n        out.append(nextSerialized);\r\n        visit(next, (depth + 1), out);\r\n    }\r\n}"},
 {"id":2453, "name":"visit(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.export.TaskVisitor.visit(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"270", "ownerclassname":"net.sourceforge.ganttproject.export.TaskVisitor", "sourcecode":"public String visit(TaskManager taskManager) throws Exception {\r\n    StringBuffer out = new StringBuffer();\r\n    visit(taskManager.getTaskHierarchy().getRootTask(), 0, out);\r\n    return out.toString();\r\n}"},
 {"id":2454, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.export.WebPublisher.-init-()", "ownerclassid":"271", "ownerclassname":"net.sourceforge.ganttproject.export.WebPublisher", "sourcecode":"WebPublisher() {\r\n}"},
 {"id":2455, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.export.WebPublisher.-init-(java.lang.String)", "ownerclassid":"271", "ownerclassname":"net.sourceforge.ganttproject.export.WebPublisher", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":2456, "name":"createTransferJob(java.net.URL,java.io.File)", "fullmethod":"net.sourceforge.ganttproject.export.WebPublisher.createTransferJob(java.net.URL,java.io.File)", "ownerclassid":"271", "ownerclassname":"net.sourceforge.ganttproject.export.WebPublisher", "sourcecode":"private Job createTransferJob(URL baseUrl, final File file) throws IOException {\r\n    final URL outUrl = new URL(baseUrl, file.getName());\r\n    Job result = new Job((\"transfer file \" + (file.getName()))) {\r\n        protected IStatus run(IProgressMonitor monitor) {\r\n            byte[] buffer = new byte[((int) (file.length()))];\r\n            FileInputStream inputStream = null;\r\n            OutputStream outStream = null;\r\n            try {\r\n                inputStream = new FileInputStream(file);\r\n                inputStream.read(buffer);\r\n                GPLogger.log((\"writing to file=\" + outUrl));\r\n                outStream = outUrl.openConnection().getOutputStream();\r\n                outStream.write(buffer);\r\n                outStream.flush();\r\n                monitor.worked(1);\r\n                return Status.OK_STATUS;\r\n            } catch (IOException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n                return Status.CANCEL_STATUS;\r\n            } finally {\r\n                if (inputStream != null) {\r\n                    try {\r\n                        inputStream.close();\r\n                    } catch (IOException e) {\r\n                        if (!(GPLogger.log(e))) {\r\n                            e.printStackTrace(System.err);\r\n                        }\r\n                    }\r\n                }\r\n                if (outStream != null) {\r\n                    try {\r\n                        outStream.close();\r\n                    } catch (IOException e) {\r\n                        if (!(GPLogger.log(e))) {\r\n                            e.printStackTrace(System.err);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return result;\r\n}"},
 {"id":2457, "name":"run(java.io.File[],net.sourceforge.ganttproject.document.DocumentManager$FTPOptions,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.export.WebPublisher.run(java.io.File[],net.sourceforge.ganttproject.document.DocumentManager$FTPOptions,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"271", "ownerclassname":"net.sourceforge.ganttproject.export.WebPublisher", "sourcecode":"public void run(final File[] exportFiles, final DocumentManager.FTPOptions options, UIFacade uiFacade) {\r\n    IJobManager jobManager = Platform.getJobManager();\r\n    IProgressMonitor monitor = jobManager.createProgressGroup();\r\n    Job startingJob = new Job(\"starting\") {\r\n        protected IStatus run(IProgressMonitor monitor) {\r\n            monitor.beginTask(\"Publishing files on FTP\", exportFiles.length);\r\n            try {\r\n                final URL baseUrl = buildURL(options);\r\n                if (baseUrl == null) {\r\n                    throw new RuntimeException(\"Failed to discover your FTP settings. Please make sure that you specified server name and user name\");\r\n                }\r\n                for (int i = 0; i < (exportFiles.length); i++) {\r\n                    Job nextJob = createTransferJob(baseUrl, exportFiles[i]);\r\n                    nextJob.setProgressGroup(monitor, 1);\r\n                    nextJob.schedule();\r\n                    nextJob.join();\r\n                }\r\n                Job finishingJob = new Job(\"finishing\") {\r\n                    protected IStatus run(IProgressMonitor monitor) {\r\n                        monitor.done();\r\n                        return Status.OK_STATUS;\r\n                    }\r\n                };\r\n                finishingJob.setProgressGroup(monitor, 0);\r\n                finishingJob.schedule();\r\n                finishingJob.join();\r\n            } catch (IOException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            } catch (InterruptedException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            }\r\n            return Status.OK_STATUS;\r\n        }\r\n\r\n        private URL buildURL(DocumentManager.FTPOptions options) {\r\n            if ((options.getServerName().getValue()) == null) {\r\n                return null;\r\n            }\r\n            StringBuffer spec = new StringBuffer(\"ftp://\");\r\n            boolean hasUserSpec = false;\r\n            if ((options.getUserName().getValue()) != null) {\r\n                spec.append(options.getUserName().getValue());\r\n                hasUserSpec = true;\r\n            }\r\n            if ((options.getPassword().getValue()) != null) {\r\n                spec.append(:).append(options.getPassword().getValue());\r\n            }\r\n            if (hasUserSpec) {\r\n                spec.append(@);\r\n            }\r\n            spec.append(options.getServerName().getValue()).append(/);\r\n            if ((options.getDirectoryName().getValue()) != null) {\r\n                spec.append(options.getDirectoryName().getValue()).append(/);\r\n            }\r\n            try {\r\n                URL result = new URL(spec.toString());\r\n                return result;\r\n            } catch (MalformedURLException e) {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    startingJob.setProgressGroup(monitor, 0);\r\n    startingJob.schedule();\r\n}"},
 {"id":2458, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter.-init-(java.lang.String,java.lang.String)", "ownerclassid":"272", "ownerclassname":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter", "sourcecode":"public ExtensionBasedFileFilter(String fileExtension, String description) {\r\n    myDescription = description;\r\n    myPattern = Pattern.compile(fileExtension);\r\n}"},
 {"id":2459, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter.accept(java.io.File)", "ownerclassid":"272", "ownerclassname":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter", "sourcecode":"public boolean accept(File f) {\r\n    if (f.isDirectory()) {\r\n        return true;\r\n    }\r\n    return matches(ExtensionBasedFileFilter.getExtension(f));\r\n}"},
 {"id":2460, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter.getDescription()", "ownerclassid":"272", "ownerclassname":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter", "sourcecode":"public String getDescription() {\r\n    return myDescription;\r\n}"},
 {"id":2461, "name":"getExtension(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter.getExtension(java.io.File)", "ownerclassid":"272", "ownerclassname":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter", "sourcecode":"/**\r\n * Extention return\r\n */\r\nprivate static String getExtension(File f) {\r\n    String ext = null;\r\n    String s = f.getName();\r\n    int i = s.lastIndexOf(.);\r\n    if ((i > 0) && (i < ((s.length()) - 1))) {\r\n        ext = s.substring((i + 1)).toLowerCase();\r\n    }\r\n    return ext;\r\n}"},
 {"id":2462, "name":"matches(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter.matches(java.lang.String)", "ownerclassid":"272", "ownerclassname":"net.sourceforge.ganttproject.filter.ExtensionBasedFileFilter", "sourcecode":"private boolean matches(String fileExtension) {\r\n    boolean result = (fileExtension != null) && (myPattern.matcher(fileExtension).matches());\r\n    return result;\r\n}"},
 {"id":2463, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttCSVFilter.-init-()", "ownerclassid":"273", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttCSVFilter", "sourcecode":"GanttCSVFilter() {\r\n}"},
 {"id":2464, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttCSVFilter.accept(java.io.File)", "ownerclassid":"273", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttCSVFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#accept(java.io.File)\n */\r\npublic boolean accept(File f) {\r\n    if (f.isDirectory()) {\r\n        return true;\r\n    }\r\n    String extension = GanttCSVFilter.getExtension(f);\r\n    if ((extension != null) && /* extension.equals(\"txt\") || */\r\n    (extension.equals(\"csv\")))\r\n        return true;\r\n\r\n    return false;\r\n}"},
 {"id":2465, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttCSVFilter.getDescription()", "ownerclassid":"273", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttCSVFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#getDescription()\n */\r\npublic String getDescription() {\r\n    return GanttLanguage.getInstance().getText(\"filtercsv\");\r\n}"},
 {"id":2466, "name":"getExtension(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttCSVFilter.getExtension(java.io.File)", "ownerclassid":"273", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttCSVFilter", "sourcecode":"/**\r\n * Extention return\r\n */\r\npublic static String getExtension(File f) {\r\n    String ext = null;\r\n    String s = f.getName();\r\n    int i = s.lastIndexOf(.);\r\n    if ((i > 0) && (i < ((s.length()) - 1))) {\r\n        ext = s.substring((i + 1)).toLowerCase();\r\n    }\r\n    return ext;\r\n}"},
 {"id":2467, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttHTMLFileFilter.-init-()", "ownerclassid":"274", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttHTMLFileFilter", "sourcecode":"GanttHTMLFileFilter() {\r\n}"},
 {"id":2468, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttHTMLFileFilter.accept(java.io.File)", "ownerclassid":"274", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttHTMLFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#accept(java.io.File)\n */\r\npublic boolean accept(File f) {\r\n    return ((f.getName().toLowerCase().endsWith(\".html\")) || (f.getName().toLowerCase().endsWith(\".htm\"))) || (f.isDirectory());\r\n}"},
 {"id":2469, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttHTMLFileFilter.getDescription()", "ownerclassid":"274", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttHTMLFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#getDescription()\n */\r\npublic String getDescription() {\r\n    return GanttLanguage.getInstance().getText(\"filterhtml\");\r\n}"},
 {"id":2470, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttJPGFileFilter.-init-()", "ownerclassid":"275", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttJPGFileFilter", "sourcecode":"GanttJPGFileFilter() {\r\n}"},
 {"id":2471, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttJPGFileFilter.accept(java.io.File)", "ownerclassid":"275", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttJPGFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#accept(java.io.File)\n */\r\npublic boolean accept(File f) {\r\n    return ((f.getName().toLowerCase().endsWith(\".jpg\")) || (f.getName().toLowerCase().endsWith(\".jpeg\"))) || (f.isDirectory());\r\n}"},
 {"id":2472, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttJPGFileFilter.getDescription()", "ownerclassid":"275", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttJPGFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#getDescription()\n */\r\npublic String getDescription() {\r\n    return GanttLanguage.getInstance().getText(\"filterjpg\");\r\n}"},
 {"id":2473, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttMSProjectLFileFilter.-init-()", "ownerclassid":"276", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttMSProjectLFileFilter", "sourcecode":"public GanttMSProjectLFileFilter() {\r\n    super(\"mpx|xml\", \"MS-Project files (.mpx, .xml)\");\r\n}"},
 {"id":2474, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttPDFFileFilter.-init-()", "ownerclassid":"277", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttPDFFileFilter", "sourcecode":"GanttPDFFileFilter() {\r\n}"},
 {"id":2475, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttPDFFileFilter.accept(java.io.File)", "ownerclassid":"277", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttPDFFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#accept(java.io.File)\n */\r\npublic boolean accept(File f) {\r\n    return (f.getName().toLowerCase().endsWith(\".pdf\")) || (f.isDirectory());\r\n}"},
 {"id":2476, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttPDFFileFilter.getDescription()", "ownerclassid":"277", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttPDFFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#getDescription()\n */\r\npublic String getDescription() {\r\n    return GanttLanguage.getInstance().getText(\"filterpdf\");\r\n}"},
 {"id":2477, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttPNGFileFilter.-init-()", "ownerclassid":"278", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttPNGFileFilter", "sourcecode":"GanttPNGFileFilter() {\r\n}"},
 {"id":2478, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttPNGFileFilter.accept(java.io.File)", "ownerclassid":"278", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttPNGFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#accept(java.io.File)\n */\r\npublic boolean accept(File f) {\r\n    return (f.getName().toLowerCase().endsWith(\".png\")) || (f.isDirectory());\r\n}"},
 {"id":2479, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttPNGFileFilter.getDescription()", "ownerclassid":"278", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttPNGFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#getDescription()\n */\r\npublic String getDescription() {\r\n    return GanttLanguage.getInstance().getText(\"filterpng\");\r\n}"},
 {"id":2480, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttTXTFileFilter.-init-()", "ownerclassid":"279", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttTXTFileFilter", "sourcecode":"GanttTXTFileFilter() {\r\n}"},
 {"id":2481, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttTXTFileFilter.accept(java.io.File)", "ownerclassid":"279", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttTXTFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#accept(java.io.File)\n */\r\npublic boolean accept(File f) {\r\n    if (f.isDirectory()) {\r\n        return true;\r\n    }\r\n    String extension = GanttTXTFileFilter.getExtension(f);\r\n    if ((extension != null) && (extension.equals(\"txt\")))\r\n        return true;\r\n\r\n    return false;\r\n}"},
 {"id":2482, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttTXTFileFilter.getDescription()", "ownerclassid":"279", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttTXTFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#getDescription()\n */\r\npublic String getDescription() {\r\n    return \"Text files (txt)\";\r\n}"},
 {"id":2483, "name":"getExtension(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttTXTFileFilter.getExtension(java.io.File)", "ownerclassid":"279", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttTXTFileFilter", "sourcecode":"/**\r\n * Extention return\r\n */\r\npublic static String getExtension(File f) {\r\n    String ext = null;\r\n    String s = f.getName();\r\n    int i = s.lastIndexOf(.);\r\n    if ((i > 0) && (i < ((s.length()) - 1))) {\r\n        ext = s.substring((i + 1)).toLowerCase();\r\n    }\r\n    return ext;\r\n}"},
 {"id":2484, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttXFIGFileFilter.-init-()", "ownerclassid":"280", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttXFIGFileFilter", "sourcecode":"GanttXFIGFileFilter() {\r\n}"},
 {"id":2485, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttXFIGFileFilter.accept(java.io.File)", "ownerclassid":"280", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttXFIGFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#accept(java.io.File)\n */\r\npublic boolean accept(File f) {\r\n    return ((f.getName().toLowerCase().endsWith(\".fig\")) || (f.getName().toLowerCase().endsWith(\".xfig\"))) || (f.isDirectory());\r\n}"},
 {"id":2486, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttXFIGFileFilter.getDescription()", "ownerclassid":"280", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttXFIGFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#getDescription()\n */\r\npublic String getDescription() {\r\n    return GanttLanguage.getInstance().getText(\"filterfig\");\r\n}"},
 {"id":2487, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttXMLFileFilter.-init-()", "ownerclassid":"281", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttXMLFileFilter", "sourcecode":"public GanttXMLFileFilter() {\r\n    super(\"xml|gan\", \"GanttProject files (.gan, .xml)\");\r\n}"},
 {"id":2488, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttXSLFileFilter.-init-()", "ownerclassid":"282", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttXSLFileFilter", "sourcecode":"GanttXSLFileFilter() {\r\n}"},
 {"id":2489, "name":"accept(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.filter.GanttXSLFileFilter.accept(java.io.File)", "ownerclassid":"282", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttXSLFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#accept(java.io.File)\n */\r\npublic boolean accept(File f) {\r\n    return (f.getName().toLowerCase().endsWith(\".xsl\")) || (f.isDirectory());\r\n}"},
 {"id":2490, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.filter.GanttXSLFileFilter.getDescription()", "ownerclassid":"282", "ownerclassname":"net.sourceforge.ganttproject.filter.GanttXSLFileFilter", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.filechooser.FileFilter#getDescription()\n */\r\npublic String getDescription() {\r\n    return GanttLanguage.getInstance().getText(\"filterxsl\");\r\n}"},
 {"id":2491, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.font.Fonts.-init-()", "ownerclassid":"283", "ownerclassname":"net.sourceforge.ganttproject.font.Fonts", "sourcecode":"Fonts() {\r\n}"},
 {"id":2492, "name":"-init-(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor.-init-(java.util.Date,java.util.Date)", "ownerclassid":"288", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor", "sourcecode":"public DateInterval(Date start, Date end) {\r\n    this.start = start;\r\n    this.end = end;\r\n}"},
 {"id":2493, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor.-init-()", "ownerclassid":"288", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor", "sourcecode":"DefaultDateIntervalModel() {\r\n}"},
 {"id":2494, "name":"-init-(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor.-init-(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel)", "ownerclassid":"288", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor", "sourcecode":"public DateIntervalListEditor(final DateIntervalListEditor.DateIntervalModel intervalsModel) {\r\n    super(new BorderLayout());\r\n    myIntervalsModel = intervalsModel;\r\n    myStart = new DefaultDateOption(\"generic.startDate\") {\r\n        public void setValue(Date value) {\r\n            super.setValue(value);\r\n            commit();\r\n            if ((intervalsModel.getMaxIntervalLength()) == 1) {\r\n                DateIntervalListEditor.this.myFinish.setValue(value);\r\n            }\r\n            DateIntervalListEditor.this.updateActions();\r\n            lock();\r\n        }\r\n    };\r\n    myFinish = new DefaultDateOption(\"generic.endDate\") {\r\n        public void setValue(Date value) {\r\n            super.setValue(value);\r\n            commit();\r\n            DateIntervalListEditor.this.updateActions();\r\n            lock();\r\n        }\r\n    };\r\n    myStart.lock();\r\n    myFinish.lock();\r\n    init();\r\n}"},
 {"id":2495, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor.-init-(java.lang.String)", "ownerclassid":"288", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":2496, "name":"init()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor.init()", "ownerclassid":"288", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor", "sourcecode":"private void init() {\r\n    myAddAction = new GPAction() {\r\n        protected String getIconFilePrefix() {\r\n            return null;\r\n        }\r\n\r\n        protected String getLocalizedName() {\r\n            return getI18n(\"add\");\r\n        }\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            myIntervalsModel.add(new DateIntervalListEditor.DateInterval(myStart.getValue(), myFinish.getValue()));\r\n            myListModel.update();\r\n        }\r\n    };\r\n    myDeleteAction = new GPAction() {\r\n        protected String getIconFilePrefix() {\r\n            return null;\r\n        }\r\n\r\n        protected String getLocalizedName() {\r\n            return getI18n(\"delete\");\r\n        }\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            int selected = myListSelectionModel.getMinSelectionIndex();\r\n            myIntervalsModel.remove(myIntervalsModel.getIntervals()[selected]);\r\n            myListModel.update();\r\n            myListSelectionModel.removeIndexInterval(selected, selected);\r\n            updateActions();\r\n        }\r\n    };\r\n    JPanel topPanel = new JPanel(new BorderLayout());\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    builder.setOptionKeyPrefix(\"\");\r\n    // Box datesBox = Box.createVerticalBox();\r\n    // Component startDatePanel = builder.createStandaloneOptionPanel(myStart);\r\n    // datesBox.add(startDatePanel);\r\n    // if (myIntervalsModel.getMaxIntervalLength()>1) {\r\n    // Component finishDatePanel = builder.createStandaloneOptionPanel(myFinish);\r\n    // //\r\n    // datesBox.add(finishDatePanel);\r\n    // }\r\n    // topPanel.add(datesBox, BorderLayout.CENTER);\r\n    GPOptionGroup group = ((myIntervalsModel.getMaxIntervalLength()) == 1) ? new GPOptionGroup(\"\", new GPOption[]{ myStart }) : new GPOptionGroup(\"\", new GPOption[]{ myStart, myFinish });\r\n    group.setTitled(false);\r\n    JComponent datesBox = builder.buildPlanePage(new GPOptionGroup[]{ group });\r\n    topPanel.add(datesBox, BorderLayout.CENTER);\r\n    // \r\n    Box buttonBox = Box.createHorizontalBox();\r\n    buttonBox.setBorder(BorderFactory.createEmptyBorder(3, 0, 3, 0));\r\n    buttonBox.add(new JButton(myAddAction));\r\n    buttonBox.add(Box.createHorizontalStrut(5));\r\n    buttonBox.add(new JButton(myDeleteAction));\r\n    topPanel.add(buttonBox, BorderLayout.SOUTH);\r\n    topPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 0, 5));\r\n    add(topPanel, BorderLayout.NORTH);\r\n    // \r\n    JList list = new JList(myListModel);\r\n    list.setName(\"list\");\r\n    list.setBorder(BorderFactory.createLoweredBevelBorder());\r\n    myListSelectionModel = list.getSelectionModel();\r\n    myListSelectionModel.addListSelectionListener(new ListSelectionListener() {\r\n        public void valueChanged(ListSelectionEvent e) {\r\n            updateActions();\r\n        }\r\n    });\r\n    JScrollPane scrollPane = new JScrollPane(list);\r\n    scrollPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n    scrollPane.setPreferredSize(new Dimension(120, 200));\r\n    add(scrollPane, BorderLayout.CENTER);\r\n    updateActions();\r\n}"},
 {"id":2497, "name":"updateActions()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor.updateActions()", "ownerclassid":"288", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor", "sourcecode":"private void updateActions() {\r\n    if ((((myStart.getValue()) != null) && ((myFinish.getValue()) != null)) && (false == (myFinish.getValue().before(myStart.getValue())))) {\r\n        myAddAction.setEnabled(true);\r\n    } else {\r\n        myAddAction.setEnabled(false);\r\n    }\r\n    myDeleteAction.setEnabled((false == (myListSelectionModel.isSelectionEmpty())));\r\n}"},
 {"id":2498, "name":"-init-(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval.-init-(java.util.Date,java.util.Date)", "ownerclassid":"284", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval", "sourcecode":"public DateInterval(Date start, Date end) {\r\n    this.start = start;\r\n    this.end = end;\r\n}"},
 {"id":2499, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval.equals(java.lang.Object)", "ownerclassid":"284", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval", "sourcecode":"public boolean equals(Object obj) {\r\n    if (false == (obj instanceof DateIntervalListEditor.DateInterval)) {\r\n        return false;\r\n    }\r\n    DateIntervalListEditor.DateInterval rvalue = ((DateIntervalListEditor.DateInterval) (obj));\r\n    return (this.start.equals(rvalue.start)) && (this.end.equals(rvalue.end));\r\n}"},
 {"id":2500, "name":"hashCode()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval.hashCode()", "ownerclassid":"284", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval", "sourcecode":"public int hashCode() {\r\n    return this.start.hashCode();\r\n}"},
 {"id":2501, "name":"add(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel.add(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "ownerclassid":"285", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel", "sourcecode":"void add(DateIntervalListEditor.DateInterval interval);"},
 {"id":2502, "name":"getIntervals()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel.getIntervals()", "ownerclassid":"285", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel", "sourcecode":"DateIntervalListEditor.DateInterval[] getIntervals();"},
 {"id":2503, "name":"getMaxIntervalLength()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel.getMaxIntervalLength()", "ownerclassid":"285", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel", "sourcecode":"int getMaxIntervalLength();"},
 {"id":2504, "name":"remove(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel.remove(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "ownerclassid":"285", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel", "sourcecode":"void remove(DateIntervalListEditor.DateInterval interval);"},
 {"id":2505, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel.-init-()", "ownerclassid":"286", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel", "sourcecode":"DefaultDateIntervalModel() {\r\n}"},
 {"id":2506, "name":"add(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel.add(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "ownerclassid":"286", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel", "sourcecode":"public void add(DateIntervalListEditor.DateInterval interval) {\r\n    myIntervals.add(interval);\r\n}"},
 {"id":2507, "name":"getIntervals()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel.getIntervals()", "ownerclassid":"286", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel", "sourcecode":"public DateIntervalListEditor.DateInterval[] getIntervals() {\r\n    return ((DateIntervalListEditor.DateInterval[]) (myIntervals.toArray(new DateIntervalListEditor.DateInterval[myIntervals.size()])));\r\n}"},
 {"id":2508, "name":"getMaxIntervalLength()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel.getMaxIntervalLength()", "ownerclassid":"286", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel", "sourcecode":"public int getMaxIntervalLength() {\r\n    return 1;\r\n}"},
 {"id":2509, "name":"remove(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel.remove(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "ownerclassid":"286", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel", "sourcecode":"public void remove(DateIntervalListEditor.DateInterval interval) {\r\n    myIntervals.remove(interval);\r\n}"},
 {"id":2510, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$MyListModel.-init-()", "ownerclassid":"287", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$MyListModel", "sourcecode":"MyListModel() {\r\n}"},
 {"id":2511, "name":"getElementAt(int)", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$MyListModel.getElementAt(int)", "ownerclassid":"287", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$MyListModel", "sourcecode":"public Object getElementAt(int index) {\r\n    DateIntervalListEditor.DateInterval interval = myIntervalsModel.getIntervals()[index];\r\n    StringBuffer result = new StringBuffer(GanttLanguage.getInstance().getDateFormat().format(interval.start));\r\n    if (!(interval.end.equals(interval.start))) {\r\n        result.append(\"...\");\r\n        result.append(GanttLanguage.getInstance().getDateFormat().format(interval.end));\r\n    }\r\n    return result.toString();\r\n}"},
 {"id":2512, "name":"getSize()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$MyListModel.getSize()", "ownerclassid":"287", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$MyListModel", "sourcecode":"public int getSize() {\r\n    return myIntervalsModel.getIntervals().length;\r\n}"},
 {"id":2513, "name":"update()", "fullmethod":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$MyListModel.update()", "ownerclassid":"287", "ownerclassname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$MyListModel", "sourcecode":"public void update() {\r\n    fireContentsChanged(this, 0, myIntervalsModel.getIntervals().length);\r\n}"},
 {"id":2514, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.DialogAligner.-init-()", "ownerclassid":"289", "ownerclassname":"net.sourceforge.ganttproject.gui.DialogAligner", "sourcecode":"DialogAligner() {\r\n}"},
 {"id":2515, "name":"center(javax.swing.JDialog,java.awt.Container)", "fullmethod":"net.sourceforge.ganttproject.gui.DialogAligner.center(javax.swing.JDialog,java.awt.Container)", "ownerclassid":"289", "ownerclassname":"net.sourceforge.ganttproject.gui.DialogAligner", "sourcecode":"public static void center(JDialog dialog, Container parent) {\r\n    boolean alignToParent = false;\r\n    if (parent != null) {\r\n        alignToParent = parent.isVisible();\r\n    }\r\n    if (alignToParent) {\r\n        Point point = parent.getLocationOnScreen();\r\n        int x = ((int) (point.getX())) + ((parent.getWidth()) / 2);\r\n        int y = ((int) (point.getY())) + ((parent.getHeight()) / 2);\r\n        dialog.setLocation((x - ((dialog.getWidth()) / 2)), (y - ((dialog.getHeight()) / 2)));\r\n    } else {\r\n        DialogAligner.centerOnScreen(dialog);\r\n    }\r\n}"},
 {"id":2516, "name":"center(javax.swing.JFrame)", "fullmethod":"net.sourceforge.ganttproject.gui.DialogAligner.center(javax.swing.JFrame)", "ownerclassid":"289", "ownerclassname":"net.sourceforge.ganttproject.gui.DialogAligner", "sourcecode":"public static void center(JFrame frame) {\r\n    DialogAligner.centerOnScreen(frame);\r\n}"},
 {"id":2517, "name":"centerOnScreen(java.awt.Component)", "fullmethod":"net.sourceforge.ganttproject.gui.DialogAligner.centerOnScreen(java.awt.Component)", "ownerclassid":"289", "ownerclassname":"net.sourceforge.ganttproject.gui.DialogAligner", "sourcecode":"private static void centerOnScreen(Component component) {\r\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\r\n    component.setLocation((((screenSize.width) / 2) - ((component.getWidth()) / 2)), (((screenSize.height) / 2) - ((component.getHeight()) / 2)));\r\n}"},
 {"id":2518, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.-init-()", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"protected FileChooserPageBase() {\r\n    myOptionsBuilder = new OptionsPageBuilder();\r\n    mySecondaryOptionsComponent = new JPanel(new BorderLayout());\r\n}"},
 {"id":2519, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.-init-(java.lang.String,java.lang.String)", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"1( $anonymous0,  $anonymous1) {\r\n}"},
 {"id":2520, "name":"createFileFilter()", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.createFileFilter()", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"protected abstract FileFilter createFileFilter();"},
 {"id":2521, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.getComponent()", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"public Component getComponent() {\r\n    myComponent = new JPanel(new BorderLayout());\r\n    myChooser = new TextFieldAndFileChooserComponent(((GanttLanguage.getInstance().getText(\"file\")) + \":\"), getFileChooserTitle()) {\r\n        protected void onFileChosen(File file) {\r\n            FileChooserPageBase.this.onFileChosen(file);\r\n            super.onFileChosen(file);\r\n        }\r\n    };\r\n    JComponent contentPanel = new JPanel(new BorderLayout());\r\n    contentPanel.add(myChooser.getComponent(), BorderLayout.NORTH);\r\n    contentPanel.add(mySecondaryOptionsComponent, BorderLayout.CENTER);\r\n    // SpringUtilities.makeCompactGrid(contentPanel, 2, 1,\r\n    // 0, 0, 5, 5);\r\n    myComponent.add(contentPanel, BorderLayout.NORTH);\r\n    return myComponent;\r\n}"},
 {"id":2522, "name":"getFileChooserTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.getFileChooserTitle()", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"protected abstract String getFileChooserTitle();"},
 {"id":2523, "name":"getOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.getOptionGroups()", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"protected abstract GPOptionGroup[] getOptionGroups();"},
 {"id":2524, "name":"getSelectedFile()", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.getSelectedFile()", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"protected File getSelectedFile() {\r\n    return myChooser.getFile();\r\n}"},
 {"id":2525, "name":"onFileChosen(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.onFileChosen(java.io.File)", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"protected abstract void onFileChosen(File file);"},
 {"id":2526, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.setActive(boolean)", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"public void setActive(boolean b) {\r\n    GPOptionGroup[] optionGroups = getOptionGroups();\r\n    if (b == false) {\r\n        for (int i = 0; i < (optionGroups.length); i++) {\r\n            optionGroups[i].commit();\r\n        }\r\n    } else {\r\n        for (int i = 0; i < (optionGroups.length); i++) {\r\n            optionGroups[i].lock();\r\n        }\r\n        if ((mySecondaryOptionsComponent) != null) {\r\n            mySecondaryOptionsComponent.removeAll();\r\n        }\r\n        // mySecondaryOptionsComponent= new JPanel(new BorderLayout());\r\n        mySecondaryOptionsComponent.add(myOptionsBuilder.buildPlanePage(optionGroups), BorderLayout.NORTH);\r\n        // myComponent.add(mySecondaryOptionsComponent, BorderLayout.CENTER);\r\n        mySecondaryOptionsComponent.invalidate();\r\n        myComponent.invalidate();\r\n        myChooser.setFileFilter(createFileFilter());\r\n    }\r\n}"},
 {"id":2527, "name":"setEnabledTree(javax.swing.JComponent,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.setEnabledTree(javax.swing.JComponent,boolean)", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"private void setEnabledTree(JComponent root, boolean isEnabled) {\r\n    UIUtil.setEnabledTree(root, isEnabled);\r\n}"},
 {"id":2528, "name":"setOptionsEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.setOptionsEnabled(boolean)", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"protected void setOptionsEnabled(boolean enabled) {\r\n    if ((mySecondaryOptionsComponent) != null) {\r\n        setEnabledTree(mySecondaryOptionsComponent, enabled);\r\n    }\r\n}"},
 {"id":2529, "name":"setSelectedFile(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.gui.FileChooserPageBase.setSelectedFile(java.io.File)", "ownerclassid":"290", "ownerclassname":"net.sourceforge.ganttproject.gui.FileChooserPageBase", "sourcecode":"protected void setSelectedFile(File file) {\r\n    myChooser.setFile(file);\r\n}"},
 {"id":2530, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GPlainDocument.-init-(java.lang.String)", "ownerclassid":"291", "ownerclassname":"net.sourceforge.ganttproject.gui.GPlainDocument", "sourcecode":"/**\r\n * Creates an instance of GPlainDocument with a valid character string.\r\n *\r\n * @param validchars\r\n * \t\t\r\n */\r\npublic GPlainDocument(String validchars) {\r\n    super();\r\n    this.valid_characters = validchars;\r\n}"},
 {"id":2531, "name":"insertString(int,java.lang.String,javax.swing.text.AttributeSet)", "fullmethod":"net.sourceforge.ganttproject.gui.GPlainDocument.insertString(int,java.lang.String,javax.swing.text.AttributeSet)", "ownerclassid":"291", "ownerclassname":"net.sourceforge.ganttproject.gui.GPlainDocument", "sourcecode":"/**\r\n * Inserts the string <code>str</code> into the document if it matches\r\n * with the valid characters.\r\n *\r\n * @param offs\r\n * \t\tOffset for the insertion.\r\n * @param str\r\n * \t\tString to insert.\r\n * @param a\r\n * \t\tAttibutSet.\r\n * @throws BadLocationException\r\n * \t\t\r\n */\r\npublic void insertString(int offs, String str, AttributeSet a) throws BadLocationException {\r\n    if ((this.pattern) != null) {\r\n        String s = this.getText(0, this.getLength());\r\n        Matcher m = this.pattern.matcher((s + str));\r\n        if (m.matches())\r\n            super.insertString(offs, str, a);\r\n\r\n    } else {\r\n        // //\r\n        StringBuffer sb = new StringBuffer();\r\n        for (int i = 0; i < (str.length()); i++)\r\n            if (((this.valid_characters) == null) || ((this.valid_characters.indexOf(str.charAt(i))) != (-1)))\r\n                sb.append(str.charAt(i));\r\n            else\r\n                Toolkit.getDefaultToolkit().beep();\r\n\r\n\r\n        super.insertString(offs, sb.toString(), a);\r\n    }\r\n}"},
 {"id":2532, "name":"setPattern(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GPlainDocument.setPattern(java.lang.String)", "ownerclassid":"291", "ownerclassname":"net.sourceforge.ganttproject.gui.GPlainDocument", "sourcecode":"/**\r\n * Sets the regular expression pattern.\r\n *\r\n * @param pattern\r\n * \t\tThe regular expression pattern to set.\r\n */\r\nprotected void setPattern(String pattern) {\r\n    this.pattern = Pattern.compile(pattern);\r\n}"},
 {"id":2533, "name":"setValidCharacters(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GPlainDocument.setValidCharacters(java.lang.String)", "ownerclassid":"291", "ownerclassname":"net.sourceforge.ganttproject.gui.GPlainDocument", "sourcecode":"/**\r\n * Sets the valid characters.\r\n *\r\n * @param valid_chars\r\n * \t\tThe valid characters to set.\r\n */\r\nprotected void setValidCharacters(String valid_chars) {\r\n    this.valid_characters = valid_chars;\r\n}"},
 {"id":2534, "name":"-init-(javax.swing.JFormattedTextField$AbstractFormatter)", "fullmethod":"net.sourceforge.ganttproject.gui.GTextField.-init-(javax.swing.JFormattedTextField$AbstractFormatter)", "ownerclassid":"292", "ownerclassname":"net.sourceforge.ganttproject.gui.GTextField", "sourcecode":"/**\r\n * Creates an instance of GTextField with a default format.\r\n *\r\n * @param format\r\n * \t\tTextfields format.\r\n */\r\npublic GTextField(JFormattedTextField.AbstractFormatter format) {\r\n    super(format);\r\n    // this.setDocument(new CPlainDocument(null));\r\n    this.setHorizontalAlignment(SwingConstants.RIGHT);\r\n}"},
 {"id":2535, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GTextField.-init-(java.lang.String)", "ownerclassid":"292", "ownerclassname":"net.sourceforge.ganttproject.gui.GTextField", "sourcecode":"/**\r\n * Creates an instance of GTextField with a default text.\r\n *\r\n * @param text\r\n * \t\tText to be put into the text field.\r\n */\r\npublic GTextField(String text) {\r\n    super();\r\n    this.setDocument(new GPlainDocument(null));\r\n    this.setText(text);\r\n    this.setHorizontalAlignment(SwingConstants.RIGHT);\r\n}"},
 {"id":2536, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GTextField.-init-()", "ownerclassid":"292", "ownerclassname":"net.sourceforge.ganttproject.gui.GTextField", "sourcecode":"/**\r\n * Creates an instance of GTextField.\r\n */\r\npublic GTextField() {\r\n    super();\r\n    super.setColumns(15);\r\n    this.setDocument(new GPlainDocument(null));\r\n    this.setHorizontalAlignment(SwingConstants.RIGHT);\r\n}"},
 {"id":2537, "name":"main(java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.gui.GTextField.main(java.lang.String[])", "ownerclassid":"292", "ownerclassname":"net.sourceforge.ganttproject.gui.GTextField", "sourcecode":"public static void main(String[] args) {\r\n    GTextField f = new GTextField();\r\n    f.setPattern(\"[0-9]*.?[0-9]*\");\r\n    JFrame jf = new JFrame();\r\n    jf.getContentPane().add(f);\r\n    jf.pack();\r\n    jf.show();\r\n    // f.setText(\"ere\");\r\n}"},
 {"id":2538, "name":"setFocus()", "fullmethod":"net.sourceforge.ganttproject.gui.GTextField.setFocus()", "ownerclassid":"292", "ownerclassname":"net.sourceforge.ganttproject.gui.GTextField", "sourcecode":"/**\r\n * Give the focus to the text field.\r\n */\r\npublic void setFocus() {\r\n    super.requestFocusInWindow();\r\n}"},
 {"id":2539, "name":"setPattern(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GTextField.setPattern(java.lang.String)", "ownerclassid":"292", "ownerclassname":"net.sourceforge.ganttproject.gui.GTextField", "sourcecode":"/**\r\n * Indicates the valid characters by giving an regular expression pattern.\r\n *\r\n * @param pattern\r\n * \t\tThe regular expression with which the matching is done.\r\n */\r\npublic void setPattern(String pattern) {\r\n    Document d = this.getDocument();\r\n    if (d instanceof GPlainDocument) {\r\n        ((GPlainDocument) (d)).setPattern(pattern);\r\n    }\r\n}"},
 {"id":2540, "name":"setValidCharacters(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GTextField.setValidCharacters(java.lang.String)", "ownerclassid":"292", "ownerclassname":"net.sourceforge.ganttproject.gui.GTextField", "sourcecode":"/**\r\n * Indicates the valid characters to accept in edition.\r\n *\r\n * @param valid_chars\r\n * \t\tString containing all the valid characters.\r\n */\r\npublic void setValidCharacters(String valid_chars) {\r\n    Document d = this.getDocument();\r\n    if (d instanceof GPlainDocument) {\r\n        ((GPlainDocument) (d)).setValidCharacters(valid_chars);\r\n    }\r\n}"},
 {"id":2541, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttCellListRenderer.-init-()", "ownerclassid":"293", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttCellListRenderer", "sourcecode":"public GanttCellListRenderer() {\r\n    setOpaque(true);\r\n    applyComponentOrientation(GanttLanguage.getInstance().getComponentOrientation());\r\n}"},
 {"id":2542, "name":"getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttCellListRenderer.getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)", "ownerclassid":"293", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttCellListRenderer", "sourcecode":"public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\r\n    setText(String.valueOf(value));\r\n    setBackground((isSelected ? new Color(((float) (0.29)), ((float) (0.349)), ((float) (0.643))) : Color.white));\r\n    setForeground((isSelected ? Color.white : Color.black));\r\n    return this;\r\n}"},
 {"id":2543, "name":"-init-(javax.swing.JFrame)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCalendar.-init-(javax.swing.JFrame)", "ownerclassid":"294", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCalendar", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogCalendar(JFrame parent) {\r\n    super(parent, GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"editCalendars\")), true);\r\n    setResizable(false);\r\n    JToolBar top = new JToolBar();\r\n    top.setFloatable(false);\r\n    bNew = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/new_16.gif\")));\r\n    bDelete = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/delete_16.gif\")));\r\n    bImport = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/open_16.gif\")));\r\n    bSelectDays = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/calendar_16.gif\")));\r\n    top.add(bNew);\r\n    top.add(bDelete);\r\n    top.add(bImport);\r\n    top.addSeparator();\r\n    top.add(bSelectDays);\r\n    bNew.addActionListener(this);\r\n    bDelete.addActionListener(this);\r\n    bImport.addActionListener(this);\r\n    bSelectDays.addActionListener(this);\r\n    bNew.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"newCalendar\"))));\r\n    bDelete.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"deleteCalendar\"))));\r\n    bImport.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"importCalendar\"))));\r\n    bSelectDays.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"selectDays\"))));\r\n    String[] list = new String[20];\r\n    list[0] = \"Default\";\r\n    list[1] = \"Night Calendar\";\r\n    list[2] = \"Default\";\r\n    list[3] = \"Night Calendar\";\r\n    list[4] = \"Default\";\r\n    list[5] = \"Night Calendar\";\r\n    list[6] = \"Default\";\r\n    list[7] = \"Night Calendar\";\r\n    list[8] = \"Default\";\r\n    list[9] = \"Night Calendar\";\r\n    list[10] = \"Default\";\r\n    list[11] = \"Night Calendar\";\r\n    list[12] = \"Default\";\r\n    list[13] = \"Night Calendar\";\r\n    list[14] = \"Default\";\r\n    list[15] = \"Night Calendar\";\r\n    list[16] = \"Default\";\r\n    list[17] = \"Night Calendar\";\r\n    list[18] = \"Default\";\r\n    list[19] = \"Night Calendar\";\r\n    listCalendar = new JList(list);\r\n    panelDate = new GanttPanelDate(new GanttCalendar());\r\n    JPanel panel1 = new JPanel();\r\n    JPanel panel2 = new JPanel();\r\n    JPanel panel3 = new JPanel();\r\n    Box vb1 = Box.createVerticalBox();\r\n    /* bWork = new JRadioButton(\"Working Day\", new\n    ImageIcon(getClass().getResource(\"/icons/working_day_16.gif\")),\n    true); bNonWork = new JRadioButton(\"Working Day\", new\n    ImageIcon(getClass().getResource(\"/icons/non_working_day_16.gif\")),\n    false);\n     */\r\n    bWork = new JRadioButton(\"Working Day\", true);\r\n    bNonWork = new JRadioButton(\"Non-Working Day\", false);\r\n    /* panel3.add(bWork, BorderLayout.WEST); panel3.add(bNonWork,\n    BorderLayout.EAST);\n     */\r\n    vb1.add(panelDate);\r\n    vb1.add(bWork);\r\n    vb1.add(bNonWork);\r\n    // panel2.add(panelDate,BorderLayout.NORTH);\r\n    // panel2.add(panel3,BorderLayout.SOUTH);\r\n    panel1.add(new JScrollPane(listCalendar), BorderLayout.WEST);\r\n    panel1.add(vb1, BorderLayout.EAST);\r\n    JPanel p = new JPanel();\r\n    JButton ok = new JButton(language.getText(\"ok\"));\r\n    getRootPane().setDefaultButton(ok);\r\n    p.add(ok);\r\n    ok.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n        }\r\n    });\r\n    JButton cancel = new JButton(language.getText(\"cancel\"));\r\n    p.add(cancel);\r\n    cancel.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n        }\r\n    });\r\n    getContentPane().add(top, BorderLayout.NORTH);\r\n    getContentPane().add(panel1, \"Center\");\r\n    getContentPane().add(p, BorderLayout.SOUTH);\r\n    pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2544, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCalendar.-init-()", "ownerclassid":"294", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCalendar", "sourcecode":"1() {\r\n}"},
 {"id":2545, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCalendar.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"294", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCalendar", "sourcecode":"/**\r\n * Action listener when click the button\r\n */\r\npublic void actionPerformed(ActionEvent e) {\r\n}"},
 {"id":2546, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.-init-(java.lang.String)", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":2547, "name":"-init-(java.lang.String,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.-init-(java.lang.String,java.util.List)", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"3( $anonymous0,  $anonymous1) {\r\n}"},
 {"id":2548, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.task.CustomColumn)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.task.CustomColumn)", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"public GanttDialogCustomColumn(UIFacade uiFacade, CustomColumn customCol) {\r\n    myUIFacade = uiFacade;\r\n    customColumn = customCol;\r\n    myOptionGroup.lock();\r\n    myDate.lock();\r\n    myDate.setValue(new Date());\r\n    myName.setValue(\"\");\r\n    myOptionGroup.setTitled(false);\r\n    myDefaultValueOptionGroup.setTitled(false);\r\n    myDefaultValueOptionGroup.lock();\r\n    isOk = false;\r\n}"},
 {"id":2549, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.-init-()", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"5() {\r\n}"},
 {"id":2550, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.getComponent()", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"private Component getComponent() {\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    OptionsPageBuilder.I18N i18n = new OptionsPageBuilder.I18N() {\r\n        public String getOptionLabel(GPOption option) {\r\n            if (option == (myDefaultValue)) {\r\n                return GanttDialogCustomColumn.language.getText(\"defaultValue\");\r\n            }\r\n            if (option == (myDate)) {\r\n                return \"\";\r\n            }\r\n            return super.getOptionLabel(option);\r\n        }\r\n    };\r\n    builder.setI18N(i18n);\r\n    {\r\n        // Text\r\n        textArea = new JTextArea();\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setLineWrap(true);\r\n        textArea.setColumns(25);\r\n        textArea.setRows(5);\r\n        JScrollPane jsp = new JScrollPane(textArea);\r\n        panelText = new JPanel(new BorderLayout());\r\n        panelText.add(jsp, BorderLayout.CENTER);\r\n    }\r\n    {\r\n        // Boolean\r\n        radioTrue = new JRadioButton(GanttDialogCustomColumn.language.getText(\"yes\"));\r\n        radioFalse = new JRadioButton(GanttDialogCustomColumn.language.getText(\"no\"));\r\n        ButtonGroup group = new ButtonGroup();\r\n        group.add(radioFalse);\r\n        group.add(radioTrue);\r\n        radioTrue.setSelected(true);\r\n        Box box = Box.createVerticalBox();\r\n        box.add(radioTrue);\r\n        box.add(radioFalse);\r\n        panelBoolean = box;\r\n    }\r\n    {\r\n        // Integer\r\n        fieldInteger = new GTextField();\r\n        fieldInteger.setPattern(GTextField.PATTERN_INTEGER);\r\n        fieldInteger.setColumns(10);\r\n        fieldInteger.setText(\"0\");\r\n        panelInteger = new JPanel(new BorderLayout());\r\n        panelInteger.add(fieldInteger, BorderLayout.NORTH);\r\n    }\r\n    {\r\n        // Double\r\n        fieldDouble = new GTextField();\r\n        fieldDouble.setPattern(GTextField.PATTERN_DOUBLE);\r\n        fieldDouble.setColumns(10);\r\n        fieldDouble.setText(\"0.0\");\r\n        panelDouble = new JPanel(new BorderLayout());\r\n        panelDouble.add(fieldDouble, BorderLayout.NORTH);\r\n    }\r\n    {\r\n        panelDate = builder.createStandaloneOptionPanel(myDate);\r\n        cardLayoutDefaultValue = new CardLayout();\r\n        panelDefaultValue = new JPanel(cardLayoutDefaultValue);\r\n        panelDefaultValue.add(GanttDialogCustomColumn.cardText, panelText);\r\n        panelDefaultValue.add(GanttDialogCustomColumn.cardBoolean, panelBoolean);\r\n        panelDefaultValue.add(GanttDialogCustomColumn.cardInteger, panelInteger);\r\n        panelDefaultValue.add(GanttDialogCustomColumn.cardDouble, panelDouble);\r\n        panelDefaultValue.add(GanttDialogCustomColumn.cardDate, panelDate);\r\n    }\r\n    Component optionsComponent = builder.createGroupComponent(myOptionGroup);\r\n    Box result = Box.createVerticalBox();\r\n    result.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n    // result.setLayout(new BorderLayout());\r\n    result.add(optionsComponent);\r\n    result.add(Box.createVerticalStrut(10));\r\n    result.add(builder.createGroupComponent(myDefaultValueOptionGroup));\r\n    result.add(panelDefaultValue);\r\n    setDefaultValuePanelEnabled(false);\r\n    return result;\r\n}// TODO change the default value for custom columns.\r\n"},
 {"id":2551, "name":"getSelectedType(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.getSelectedType(java.lang.String)", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"private int getSelectedType(String typeName) {\r\n    for (int i = 0; i < (CustomColumnsStorage.availableTypes.size()); i++) {\r\n        if (CustomColumnsStorage.availableTypes.get(i).equals(typeName)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"},
 {"id":2552, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.getUIFacade()", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"private UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":2553, "name":"isOk()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.isOk()", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"public boolean isOk() {\r\n    return isOk;\r\n}"},
 {"id":2554, "name":"ok()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.ok()", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"private void ok() {\r\n    // Mediator.getGanttProjectSingleton().setAskForSave(true);\r\n    // String colName = fieldName.getText().trim();\r\n    String colName = myName.getValue();\r\n    Object defValue = null;\r\n    if ((colName.length()) != 0) {\r\n        Class colClass;\r\n        int colType = getSelectedType(myType.getValue());\r\n        switch (colType) {\r\n            case 0 :\r\n                colClass = String.class;\r\n                defValue = textArea.getText();\r\n                break;\r\n            case 1 :\r\n                colClass = Integer.class;\r\n                String ti = fieldInteger.getText();\r\n                if ((ti.trim().length()) > 0) {\r\n                    defValue = new Integer(Integer.parseInt(ti));\r\n                }\r\n                break;\r\n            case 2 :\r\n                colClass = Double.class;\r\n                String td = fieldDouble.getText();\r\n                if ((td.trim().length()) > 0) {\r\n                    defValue = new Double(Double.parseDouble(td));\r\n                }\r\n                break;\r\n            case 3 :\r\n                colClass = GregorianCalendar.class;\r\n                defValue = ((myDate.getValue()) == null) ? null : new GanttCalendar(myDate.getValue());\r\n                break;\r\n            case 4 :\r\n                colClass = Boolean.class;\r\n                defValue = new Boolean(radioTrue.isSelected());\r\n                break;\r\n            default :\r\n                // normally never reached.\r\n                colClass = String.class;\r\n                defValue = \"default\";\r\n        }\r\n        if ((customColumn) != null) {\r\n            customColumn.setName(colName);\r\n            customColumn.setType(colClass);\r\n            if ((myDefaultValue.isChecked()) && (defValue != null)) {\r\n                customColumn.setDefaultValue(defValue);\r\n            }\r\n        }\r\n        isOk = true;\r\n    }\r\n}"},
 {"id":2555, "name":"setDefaultValuePanelEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.setDefaultValuePanelEnabled(boolean)", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"protected void setDefaultValuePanelEnabled(boolean enabled) {\r\n    UIUtil.setEnabledTree(panelDefaultValue, enabled);\r\n}"},
 {"id":2556, "name":"setVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.setVisible(boolean)", "ownerclassid":"295", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "sourcecode":"public void setVisible(boolean visible) {\r\n    Component rootComponent = getComponent();\r\n    getUIFacade().showDialog(rootComponent, new Action[]{ new OkAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            myOptionGroup.commit();\r\n            myDate.commit();\r\n            GanttDialogCustomColumn.this.ok();\r\n        }\r\n    }, new CancelAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            myOptionGroup.rollback();\r\n            myDate.rollback();\r\n        }\r\n    } });\r\n}"},
 {"id":2557, "name":"-init-(javax.swing.JDialog,net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogDate.-init-(javax.swing.JDialog,net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"296", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogDate", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogDate(JDialog parent, GanttCalendar date) {\r\n    this(parent, date, false);\r\n}"},
 {"id":2558, "name":"-init-(javax.swing.JDialog,net.sourceforge.ganttproject.GanttCalendar,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogDate.-init-(javax.swing.JDialog,net.sourceforge.ganttproject.GanttCalendar,boolean)", "ownerclassid":"296", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogDate", "sourcecode":"public GanttDialogDate(JDialog parent, GanttCalendar date, boolean showFixedDateCheckBox) {\r\n    super(parent, GanttLanguage.getInstance().getText(\"chooseDate\"), true);\r\n    myFixedDate = date.isFixed();\r\n    setResizable(false);\r\n    panel = new GanttPanelDate(date);\r\n    // Container contentPane = getContentPane();\r\n    JComponent contentPane = Box.createVerticalBox();\r\n    // contentPane.setLayout(new GridLayout(3,1, 5, 5));\r\n    JPanel p = new JPanel();\r\n    JButton ok = new JButton(language.getText(\"ok\"));\r\n    getRootPane().setDefaultButton(ok);\r\n    p.add(ok);\r\n    ok.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n            value = GanttDialogDate.OK;\r\n        }\r\n    });\r\n    JButton cancel = new JButton(language.getText(\"cancel\"));\r\n    p.add(cancel);\r\n    cancel.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n            panel.cancel();\r\n        }\r\n    });\r\n    contentPane.add(panel);\r\n    if (showFixedDateCheckBox) {\r\n        final JCheckBox fixedDate = new JCheckBox(language.getText(\"fixedDate\"));\r\n        fixedDate.setSelected(myFixedDate);\r\n        fixedDate.addChangeListener(new ChangeListener() {\r\n            public void stateChanged(ChangeEvent e) {\r\n                myFixedDate = fixedDate.isSelected();\r\n            }\r\n        });\r\n        contentPane.add(fixedDate);\r\n    }\r\n    contentPane.add(p);\r\n    getContentPane().add(contentPane);\r\n    addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(WindowEvent arg0) {\r\n            panel.cancel();\r\n        }\r\n    });\r\n    pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2559, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogDate.-init-()", "ownerclassid":"296", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogDate", "sourcecode":"1() {\r\n}"},
 {"id":2560, "name":"getDate()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogDate.getDate()", "ownerclassid":"296", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogDate", "sourcecode":"/**\r\n * Return The selected date.\r\n */\r\npublic GanttCalendar getDate() {\r\n    GanttCalendar result = panel.getDate();\r\n    // System.err.println(\"[GanttDialogDate] getDate():\r\n    // fixed=\"+myFixedDate);\r\n    result.setFixed(myFixedDate);\r\n    return result;\r\n}"},
 {"id":2561, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogDate.getValue()", "ownerclassid":"296", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogDate", "sourcecode":"public int getValue() {\r\n    return value;\r\n}"},
 {"id":2562, "name":"-init-(java.awt.Frame,int,int,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogInfo.-init-(java.awt.Frame,int,int,java.lang.String,java.lang.String)", "ownerclassid":"297", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogInfo", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogInfo(Frame parent, int msgtype, int button, String message, String title) {\r\n    super(parent, title, true);\r\n    GanttLanguage language = GanttLanguage.getInstance();\r\n    res = button;\r\n    Box b1 = Box.createVerticalBox();\r\n    if (msgtype == (GanttDialogInfo.ERROR))\r\n        b1.add(new JLabel(new ImageIcon(getClass().getResource(\"/icons/error.png\"))));\r\n    else\r\n        if (msgtype == (GanttDialogInfo.WARNING))\r\n            b1.add(new JLabel(new ImageIcon(getClass().getResource(\"/icons/warning.png\"))));\r\n        else\r\n            if (msgtype == (GanttDialogInfo.INFO))\r\n                b1.add(new JLabel(new ImageIcon(getClass().getResource(\"/icons/info.png\"))));\r\n            else\r\n                if (msgtype == (GanttDialogInfo.QUESTION))\r\n                    b1.add(new JLabel(new ImageIcon(getClass().getResource(\"/icons/question.png\"))));\r\n\r\n\r\n\r\n\r\n    getContentPane().add(b1, \"West\");\r\n    Box b2 = Box.createVerticalBox();\r\n    JTextArea textArea = new JTextArea(message);\r\n    textArea.setEditable(false);\r\n    textArea.setBackground(new JLabel().getBackground());\r\n    b2.add(textArea);\r\n    getContentPane().add(b2, \"Center\");\r\n    JPanel p = new JPanel();\r\n    // YES BUTTON\r\n    JButton yes = new JButton((button == 0 ? language.getText(\"ok\") : language.getText(\"yes\")));\r\n    getRootPane().setDefaultButton(yes);\r\n    p.add(yes);\r\n    yes.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n            dispose();\r\n            res = GanttDialogInfo.YES;\r\n        }\r\n    });\r\n    if (button > 0) {\r\n        // NO BUTTON\r\n        JButton no = new JButton(language.getText(\"no\"));\r\n        p.add(no);\r\n        no.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent evt) {\r\n                setVisible(false);\r\n                dispose();\r\n                res = GanttDialogInfo.NO;\r\n            }\r\n        });\r\n        if (button > 1) {\r\n            // CANCEL BUTTON\r\n            JButton cancel = new JButton(language.getText(\"cancel\"));\r\n            p.add(cancel);\r\n            cancel.addActionListener(new ActionListener() {\r\n                public void actionPerformed(ActionEvent evt) {\r\n                    setVisible(false);\r\n                    dispose();\r\n                    res = GanttDialogInfo.CANCEL;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    getContentPane().add(p, BorderLayout.SOUTH);\r\n    pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2563, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogInfo.-init-()", "ownerclassid":"297", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogInfo", "sourcecode":"1() {\r\n}"},
 {"id":2564, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.language.GanttLanguage,net.sourceforge.ganttproject.resource.HumanResource)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.language.GanttLanguage,net.sourceforge.ganttproject.resource.HumanResource)", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"/**\r\n * Creates new form GanttDialogPerson\r\n */\r\npublic GanttDialogPerson(UIFacade uiFacade, GanttLanguage language, HumanResource person) {\r\n    // super(parent, GanttProject.correctLabel(language.getText(\"human\")),\r\n    // true);\r\n    // \r\n    myUIFacade = uiFacade;\r\n    this.person = person;\r\n    Role[] enabledRoles = net.sourceforge.ganttproject.roles.RoleManager.Access.getInstance().getEnabledRoles();\r\n    String[] roleFieldValues = new String[enabledRoles.length];\r\n    for (int i = 0; i < (enabledRoles.length); i++) {\r\n        roleFieldValues[i] = enabledRoles[i].getName();\r\n    }\r\n    myRoleField = new DefaultEnumerationOption(\"colRole\", roleFieldValues);\r\n    myGroup = new GPOptionGroup(\"\", new GPOption[]{ myNameField, myPhoneField, myMailField, myRoleField });\r\n    myGroup.setTitled(false);\r\n}"},
 {"id":2565, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.-init-()", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"1() {\r\n}"},
 {"id":2566, "name":"applyChanges()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.applyChanges()", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"private void applyChanges() {\r\n    person.setName(myNameField.getValue());\r\n    person.setMail(myMailField.getValue());\r\n    person.setPhone(myPhoneField.getValue());\r\n    Role role = findRole(myRoleField.getValue());\r\n    if (role != null) {\r\n        person.setRole(role);\r\n    }\r\n    DateIntervalListEditor.DateInterval[] intervals = myDaysOffModel.getIntervals();\r\n    person.getDaysOff().clear();\r\n    for (int i = 0; i < (intervals.length); i++) {\r\n        person.addDaysOff(new GanttDaysOff(intervals[i].start, intervals[i].end));\r\n    }\r\n}"},
 {"id":2567, "name":"constructDaysOffPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.constructDaysOffPanel()", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"public JPanel constructDaysOffPanel() {\r\n    myDaysOffModel = new DateIntervalListEditor.DefaultDateIntervalModel() {\r\n        public int getMaxIntervalLength() {\r\n            return 2;\r\n        }\r\n\r\n        public void add(DateIntervalListEditor.DateInterval interval) {\r\n            super.add(interval);\r\n        }\r\n\r\n        public void remove(DateIntervalListEditor.DateInterval interval) {\r\n            super.remove(interval);\r\n        }\r\n    };\r\n    DefaultListModel daysOff = person.getDaysOff();\r\n    for (int i = 0; i < (daysOff.getSize()); i++) {\r\n        GanttDaysOff next = ((GanttDaysOff) (daysOff.get(i)));\r\n        myDaysOffModel.add(new DateIntervalListEditor.DateInterval(next.getStart().getTime(), next.getFinish().getTime()));\r\n    }\r\n    DateIntervalListEditor editor = new DateIntervalListEditor(myDaysOffModel);\r\n    return editor;\r\n}"},
 {"id":2568, "name":"findRole(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.findRole(java.lang.String)", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"private Role findRole(String roleName) {\r\n    Role[] enabledRoles = net.sourceforge.ganttproject.roles.RoleManager.Access.getInstance().getEnabledRoles();\r\n    for (int i = 0; i < (enabledRoles.length); i++) {\r\n        if (enabledRoles[i].getName().equals(roleName)) {\r\n            return enabledRoles[i];\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":2569, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.getComponent()", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"private Component getComponent() {\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    OptionsPageBuilder.I18N i18n = new OptionsPageBuilder.I18N() {\r\n        public String getOptionLabel(GPOption option) {\r\n            return getValue(option.getID());\r\n        }\r\n    };\r\n    builder.setI18N(i18n);\r\n    final JComponent mainPage = builder.buildPlanePage(new GPOptionGroup[]{ myGroup });\r\n    mainPage.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n    tabbedPane = new JTabbedPane();\r\n    tabbedPane.addTab(language.getText(\"general\"), new ImageIcon(getClass().getResource(\"/icons/properties_16.gif\")), mainPage);\r\n    tabbedPane.addTab(language.getText(\"daysOff\"), new ImageIcon(getClass().getResource(\"/icons/holidays_16.gif\")), constructDaysOffPanel());\r\n    // mainPage.requestDefaultFocus();\r\n    // final FocusTraversalPolicy defaultPolicy = mainPage.getFocusTraversalPolicy();\r\n    // FocusTraversalPolicy customPolicy = new FocusTraversalPolicy() {\r\n    // public Component getComponentAfter(Container aContainer, Component aComponent) {\r\n    // return defaultPolicy.getComponentAfter(aContainer, aComponent);\r\n    // }\r\n    // \r\n    // public Component getComponentBefore(Container aContainer, Component aComponent) {\r\n    // return defaultPolicy.getComponentBefore(aContainer, aComponent);\r\n    // }\r\n    // \r\n    // public Component getFirstComponent(Container aContainer) {\r\n    // return defaultPolicy.getFirstComponent(aContainer);\r\n    // }\r\n    // \r\n    // public Component getLastComponent(Container aContainer) {\r\n    // return defaultPolicy.getLastComponent(aContainer);\r\n    // }\r\n    // \r\n    // public Component getDefaultComponent(Container aContainer) {\r\n    // return mainPage;\r\n    // }\r\n    // };\r\n    // //mainPage.setFocusCycleRoot(true);\r\n    // mainPage.setFocusTraversalPolicy(customPolicy);\r\n    tabbedPane.addFocusListener(new FocusAdapter() {\r\n        boolean isFirstTime = true;\r\n\r\n        public void focusGained(FocusEvent e) {\r\n            if (isFirstTime) {\r\n                mainPage.requestFocus();\r\n                isFirstTime = false;\r\n            }\r\n            super.focusGained(e);\r\n        }\r\n    });\r\n    return tabbedPane;\r\n}"},
 {"id":2570, "name":"loadFields()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.loadFields()", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"private void loadFields() {\r\n    myGroup.lock();\r\n    myNameField.setValue(person.getName());\r\n    myPhoneField.setValue(person.getPhone());\r\n    myMailField.setValue(person.getMail());\r\n    Role role = person.getRole();\r\n    if (role != null) {\r\n        myRoleField.setValue(role.getName());\r\n    }\r\n    myGroup.commit();\r\n    myGroup.lock();\r\n}"},
 {"id":2571, "name":"okButtonActionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.okButtonActionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"private void okButtonActionPerformed(ActionEvent evt) {\r\n    // GEN-FIRST:event_okButtonActionPerformed\r\n    if ((person.getId()) != (-1)) {\r\n        // person ID is -1 when it is new one\r\n        // i.e. before the Person dialog is\r\n        // closed\r\n        myUIFacade.getUndoManager().undoableEdit(\"Resource properties changed\", new Runnable() {\r\n            public void run() {\r\n                applyChanges();\r\n            }\r\n        });\r\n    } else {\r\n        applyChanges();\r\n    }\r\n    change = true;\r\n}"},
 {"id":2572, "name":"result()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.result()", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"public boolean result() {\r\n    return change;\r\n}"},
 {"id":2573, "name":"setVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPerson.setVisible(boolean)", "ownerclassid":"298", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "sourcecode":"public void setVisible(boolean isVisible) {\r\n    if (isVisible) {\r\n        loadFields();\r\n        Component contentPane = getComponent();\r\n        OkAction okAction = new OkAction() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                myGroup.commit();\r\n                okButtonActionPerformed(e);\r\n            }\r\n        };\r\n        CancelAction cancelAction = new CancelAction() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                myGroup.rollback();\r\n                change = false;\r\n            }\r\n        };\r\n        myUIFacade.showDialog(contentPane, new Action[]{ okAction, cancelAction }, language.getText(\"human\"));\r\n    }\r\n}"},
 {"id":2574, "name":"-init-(net.sourceforge.ganttproject.GanttTask[])", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogProperties.-init-(net.sourceforge.ganttproject.GanttTask[])", "ownerclassid":"299", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogProperties", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogProperties(GanttTask[] tasks) {\r\n    myTasks = tasks;\r\n}"},
 {"id":2575, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogProperties.-init-()", "ownerclassid":"299", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogProperties", "sourcecode":"1() {\r\n}"},
 {"id":2576, "name":"show(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogProperties.show(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"299", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogProperties", "sourcecode":"public void show(IGanttProject project, final UIFacade uiFacade) {\r\n    // super(parent, GanttLanguage.getInstance().getText(\"propertiesFor\")\r\n    // + \" \" + tasksNames + \"\", true);\r\n    final GanttTaskPropertiesBean taskPropertiesBean = new GanttTaskPropertiesBean(myTasks, project, uiFacade);\r\n    final Action[] actions = new Action[]{ new OkAction() {\r\n        public void actionPerformed(ActionEvent arg0) {\r\n            uiFacade.getUndoManager().undoableEdit(\"Properties changed\", new Runnable() {\r\n                public void run() {\r\n                    Task[] returnTask = taskPropertiesBean.getReturnTask();\r\n                    // System.err.println(\"[GanttDialogProperties]\r\n                    // returnTask=\"+returnTask);\r\n                    // returnTask.setTaskID(this.task.getTaskID());\r\n                    // getTaskManager().setTask(returnTask);\r\n                    // DefaultMutableTreeNode father;\r\n                    // for (int i = 0; i < returnTask.length; i++) {\r\n                    // tree.getNode(myTasks[i].getTaskID())\r\n                    // .setUserObject(returnTask[i]);\r\n                    // // Refresh all father\r\n                    // father = tree.getFatherNode(tree\r\n                    // .getNode(myTasks[i].getTaskID()));\r\n                    // while (father != null) {\r\n                    // tree.forwardScheduling();\r\n                    // father = tree.getFatherNode(father);\r\n                    // }\r\n                    // }\r\n                }\r\n            });\r\n        }\r\n    }, new CancelAction() {\r\n        public void actionPerformed(ActionEvent arg0) {\r\n        }\r\n    } };\r\n    StringBuffer taskNames = new StringBuffer();\r\n    for (int i = 0; i < (myTasks.length); i++) {\r\n        if (i > 0) {\r\n            taskNames.append(,);\r\n        }\r\n        taskNames.append(myTasks[i].getName());\r\n    }\r\n    final String title = (((GanttLanguage.getInstance().getText(\"propertiesFor\")) + \" \") + taskNames) + \"\";\r\n    uiFacade.showDialog(taskPropertiesBean, actions, title);\r\n}"},
 {"id":2577, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"300", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday", "sourcecode":"public GanttDialogPublicHoliday(IGanttProject project, UIFacade uiFacade) {\r\n    publicHolidays = new DateIntervalListEditor.DefaultDateIntervalModel();\r\n    for (Iterator iter = project.getActiveCalendar().getPublicHolidays().iterator(); iter.hasNext();) {\r\n        Date d = ((Date) (iter.next()));\r\n        publicHolidays.add(new DateIntervalListEditor.DateInterval(d, d));\r\n    }\r\n    // publicHolidayBean = new GanttPublicHolidayBean(publicHolidays);\r\n    publicHolidayBean = new DateIntervalListEditor(publicHolidays);\r\n    myUIFacade = uiFacade;\r\n    // publicHolidayBean.addActionListener(this);\r\n}"},
 {"id":2578, "name":"getContentPane()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday.getContentPane()", "ownerclassid":"300", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday", "sourcecode":"public Component getContentPane() {\r\n    return publicHolidayBean;\r\n}"},
 {"id":2579, "name":"getHolidays()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday.getHolidays()", "ownerclassid":"300", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday", "sourcecode":"public List getHolidays() {\r\n    // return Arrays.asList(publicHolidays.toArray());\r\n    List result = new ArrayList();\r\n    DateIntervalListEditor.DateInterval[] intervals = publicHolidays.getIntervals();\r\n    for (int i = 0; i < (intervals.length); i++) {\r\n        result.add(new GanttCalendar(intervals[i].start));\r\n    }\r\n    return result;\r\n}"},
 {"id":2580, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo.-init-(java.lang.String,java.lang.String)", "ownerclassid":"301", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo", "sourcecode":"public GanttLookAndFeelInfo(String name, String className) {\r\n    super(name, className);\r\n    toString = name;\r\n}"},
 {"id":2581, "name":"-init-(javax.swing.UIManager$LookAndFeelInfo)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo.-init-(javax.swing.UIManager$LookAndFeelInfo)", "ownerclassid":"301", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo", "sourcecode":"public GanttLookAndFeelInfo(UIManager.LookAndFeelInfo info) {\r\n    this(info.getName(), info.getClassName());\r\n}"},
 {"id":2582, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo.toString()", "ownerclassid":"301", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo", "sourcecode":"/**\r\n * returns the name of the LookAndFeel\r\n */\r\npublic String toString() {\r\n    return toString;\r\n}"},
 {"id":2583, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeels.-init-()", "ownerclassid":"302", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels", "sourcecode":"protected GanttLookAndFeels() {\r\n    infoByClass = new HashMap();\r\n    infoByName = new HashMap();\r\n    UIManager.LookAndFeelInfo[] lookAndFeels = UIManager.getInstalledLookAndFeels();\r\n    for (int i = 0; i < (lookAndFeels.length); i++) {\r\n        GanttLookAndFeelInfo info = new GanttLookAndFeelInfo(lookAndFeels[i]);\r\n        addLookAndFeel(info);\r\n    }\r\n}"},
 {"id":2584, "name":"addLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeels.addLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "ownerclassid":"302", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels", "sourcecode":"protected void addLookAndFeel(GanttLookAndFeelInfo info) {\r\n    if ((info.getName().startsWith(\"Kunststoff\")) && (System.getProperty(\"os.name\").startsWith(\"Mac\"))) {\r\n        System.err.println(\"LookAndFeel not added (Kunststoff is ignored on MacOS).\");\r\n    } else {\r\n        if (!(infoByClass.containsKey(info.getClassName()))) {\r\n            infoByClass.put(info.getClassName(), info);\r\n            infoByName.put(info.getName(), info);\r\n        } else {\r\n            System.err.println(((((\"LookAndFeel \" + info) + \"(\") + (info.getClassName())) + \") already installed.\"));\r\n        }\r\n    }\r\n}"},
 {"id":2585, "name":"getDefaultInfo()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeels.getDefaultInfo()", "ownerclassid":"302", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels", "sourcecode":"public GanttLookAndFeelInfo getDefaultInfo() {\r\n    GanttLookAndFeelInfo info = getInfoByClass(UIManager.getSystemLookAndFeelClassName());\r\n    if (null == info)\r\n        info = getInfoByClass(UIManager.getCrossPlatformLookAndFeelClassName());\r\n\r\n    return info;\r\n}"},
 {"id":2586, "name":"getGanttLookAndFeels()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeels.getGanttLookAndFeels()", "ownerclassid":"302", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels", "sourcecode":"public static GanttLookAndFeels getGanttLookAndFeels() {\r\n    if ((GanttLookAndFeels.singleton) == null) {\r\n        GanttLookAndFeels.singleton = new GanttLookAndFeels();\r\n    }\r\n    return GanttLookAndFeels.singleton;\r\n}"},
 {"id":2587, "name":"getInfoByClass(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeels.getInfoByClass(java.lang.String)", "ownerclassid":"302", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels", "sourcecode":"public GanttLookAndFeelInfo getInfoByClass(String className) {\r\n    return ((GanttLookAndFeelInfo) (infoByClass.get(className)));\r\n}"},
 {"id":2588, "name":"getInfoByName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeels.getInfoByName(java.lang.String)", "ownerclassid":"302", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels", "sourcecode":"public GanttLookAndFeelInfo getInfoByName(String name) {\r\n    return ((GanttLookAndFeelInfo) (infoByName.get(name)));\r\n}"},
 {"id":2589, "name":"getInstalledLookAndFeels()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttLookAndFeels.getInstalledLookAndFeels()", "ownerclassid":"302", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels", "sourcecode":"public GanttLookAndFeelInfo[] getInstalledLookAndFeels() {\r\n    GanttLookAndFeelInfo[] lookAndFeels = new GanttLookAndFeelInfo[0];\r\n    return ((GanttLookAndFeelInfo[]) (infoByClass.values().toArray(lookAndFeels)));\r\n}"},
 {"id":2590, "name":"-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttMetalTheme.-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"303", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttMetalTheme", "sourcecode":"public GanttMetalTheme(UIConfiguration config) {\r\n    super();\r\n    font = new FontUIResource(config.getMenuFont());\r\n}"},
 {"id":2591, "name":"getControlTextFont()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttMetalTheme.getControlTextFont()", "ownerclassid":"303", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttMetalTheme", "sourcecode":"public FontUIResource getControlTextFont() {\r\n    return font;\r\n}"},
 {"id":2592, "name":"getMenuTextFont()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttMetalTheme.getMenuTextFont()", "ownerclassid":"303", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttMetalTheme", "sourcecode":"public FontUIResource getMenuTextFont() {\r\n    return font;\r\n}"},
 {"id":2593, "name":"getSystemTextFont()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttMetalTheme.getSystemTextFont()", "ownerclassid":"303", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttMetalTheme", "sourcecode":"public FontUIResource getSystemTextFont() {\r\n    return font;\r\n}"},
 {"id":2594, "name":"getUserTextFont()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttMetalTheme.getUserTextFont()", "ownerclassid":"303", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttMetalTheme", "sourcecode":"public FontUIResource getUserTextFont() {\r\n    return font;\r\n}"},
 {"id":2595, "name":"getWindowTitleFont()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttMetalTheme.getWindowTitleFont()", "ownerclassid":"303", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttMetalTheme", "sourcecode":"public FontUIResource getWindowTitleFont() {\r\n    return font;\r\n}"},
 {"id":2596, "name":"-init-(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate.-init-(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"305", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttPanelDate(GanttCalendar date) {\r\n    // super(parent, GanttLanguage.getInstance().getText(\"chooseDate\"),\r\n    // true);\r\n    // setResizable(false);\r\n    this.save = date.Clone();\r\n    // month = date.getDayMonthLanguage();\r\n    Box vb1 = Box.createVerticalBox();\r\n    Box hb1 = Box.createHorizontalBox();\r\n    jbPrevYear = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/prevyear.gif\")));\r\n    jbPrevYear.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            rollDate(Calendar.YEAR, (-1));\r\n        }\r\n    });\r\n    jbPrevMonth = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/prevmonth.gif\")));\r\n    jbPrevMonth.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            rollDate(Calendar.MONTH, (-1));\r\n        }\r\n    });\r\n    jbNextMonth = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/nextmonth.gif\")));\r\n    jbNextMonth.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            rollDate(Calendar.MONTH, (+1));\r\n        }\r\n    });\r\n    jbNextYear = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/nextyear.gif\")));\r\n    jbNextYear.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            rollDate(Calendar.YEAR, (+1));\r\n        }\r\n    });\r\n    jbPrevYear.setToolTipText(GanttProject.getToolTip(language.getText(\"prevYear\")));\r\n    jbPrevMonth.setToolTipText(GanttProject.getToolTip(language.getText(\"prevMonth\")));\r\n    jbNextMonth.setToolTipText(GanttProject.getToolTip(language.getText(\"nextMonth\")));\r\n    jbNextYear.setToolTipText(GanttProject.getToolTip(language.getText(\"nextYear\")));\r\n    ddd = new GanttPanelDate.GanttDialogDateDay(date, language);\r\n    jtDate = new JFormattedTextField(new SimpleDateFormat(\"MMM yyyy\"));\r\n    jtDate.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            GregorianCalendar tmp = new GregorianCalendar();\r\n            tmp.setTime(((Date) (jtDate.getValue())));\r\n            changeDate(tmp);\r\n        }\r\n    });\r\n    jtDate.setValue(ddd.date.getTime());\r\n    jtDate.setEditable(false);\r\n    hb1.add(jbPrevYear);\r\n    hb1.add(jbPrevMonth);\r\n    hb1.add(jtDate);\r\n    hb1.add(jbNextMonth);\r\n    hb1.add(jbNextYear);\r\n    vb1.add(hb1);\r\n    vb1.add(ddd);\r\n    add(vb1, \"Center\");\r\n}"},
 {"id":2597, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate.-init-()", "ownerclassid":"305", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "sourcecode":"1() {\r\n}"},
 {"id":2598, "name":"-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate.-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"305", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogDateDay(GanttCalendar date, GanttLanguage language) {\r\n    this.date = date;\r\n    this.language = language;\r\n    MouseListener ml = new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            clickFunction(e.getX(), e.getY());\r\n        }\r\n    };\r\n    this.addMouseListener(ml);\r\n}"},
 {"id":2599, "name":"cancel()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate.cancel()", "ownerclassid":"305", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "sourcecode":"/**\r\n * Signified that cancel button has been clicked, cancel the selectio and\r\n * restur the old date\r\n */\r\npublic void cancel() {\r\n    ddd.date = save;\r\n    changeDate(save);\r\n}"},
 {"id":2600, "name":"changeDate(net.sourceforge.ganttproject.time.gregorian.GregorianCalendar)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate.changeDate(net.sourceforge.ganttproject.time.gregorian.GregorianCalendar)", "ownerclassid":"305", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "sourcecode":"/**\r\n * Fill the content of the central label *\r\n */\r\nprivate void changeDate(GregorianCalendar newDate) {\r\n    boolean differentMonth = ((ddd.date.get(Calendar.MONTH)) != (newDate.get(Calendar.MONTH))) || ((ddd.date.get(Calendar.YEAR)) != (newDate.get(Calendar.YEAR)));\r\n    ddd.date.setTime(newDate.getTime());\r\n    if (differentMonth) {\r\n        jtDate.setValue(ddd.date.getTime());\r\n        ddd.repaint();\r\n    }\r\n}"},
 {"id":2601, "name":"getDate()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate.getDate()", "ownerclassid":"305", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "sourcecode":"/**\r\n * Return The selected date.\r\n */\r\npublic GanttCalendar getDate() {\r\n    return ddd.date;\r\n}"},
 {"id":2602, "name":"rollDate(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate.rollDate(int,int)", "ownerclassid":"305", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "sourcecode":"/**\r\n * This function rolls the date *\r\n */\r\nprivate void rollDate(int field, int amount) {\r\n    ddd.date.add(field, amount);\r\n    jtDate.setValue(ddd.date.getTime());\r\n    ddd.repaint();\r\n}"},
 {"id":2603, "name":"-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay.-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"304", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogDateDay(GanttCalendar date, GanttLanguage language) {\r\n    this.date = date;\r\n    this.language = language;\r\n    MouseListener ml = new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            clickFunction(e.getX(), e.getY());\r\n        }\r\n    };\r\n    this.addMouseListener(ml);\r\n}"},
 {"id":2604, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay.-init-()", "ownerclassid":"304", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay", "sourcecode":"1() {\r\n}"},
 {"id":2605, "name":"clickFunction(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay.clickFunction(int,int)", "ownerclassid":"304", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay", "sourcecode":"/**\r\n * When the user click on the widget\r\n */\r\npublic void clickFunction(int x, int y) {\r\n    // Has he click on the panel???\r\n    if (((x < (((getWidth()) / 7) * 7)) && (y > 15)) && (y < (7 * 15))) {\r\n        int X = x / ((getWidth()) / 7);\r\n        int Y = (y - 15) / 15;\r\n        // Recup the first monday\r\n        GanttCalendar tmpdate = date.Clone();\r\n        tmpdate.setDay(1);\r\n        String d = tmpdate.getdayWeek();\r\n        while (!(d.equals(language.getDay(1)))) {\r\n            tmpdate.go(Calendar.DATE, (-1));\r\n            d = tmpdate.getdayWeek();\r\n        } \r\n        // Search the exact day\r\n        for (int i = 0; i < ((Y * 7) + X); i++)\r\n            tmpdate.go(Calendar.DATE, 1);\r\n\r\n        // Check the validity of the month\r\n        // if(tmpdate.getMonth() == date.getMonth())\r\n        // date = tmpdate;\r\n        changeDate(tmpdate);\r\n    }\r\n    repaint();\r\n}"},
 {"id":2606, "name":"getPreferredSize()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay.getPreferredSize()", "ownerclassid":"304", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay", "sourcecode":"/**\r\n * The default size.\r\n */\r\npublic Dimension getPreferredSize() {\r\n    return new Dimension(230, 105);// 210\r\n\r\n}"},
 {"id":2607, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay.paintComponent(java.awt.Graphics)", "ownerclassid":"304", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay", "sourcecode":"/**\r\n * draw the panel\r\n */\r\npublic void paintComponent(Graphics g) {\r\n    super.paintComponent(g);\r\n    int sizex = getWidth();\r\n    int sizey = getHeight();\r\n    // Display the legend at top\r\n    g.setColor(Color.white);\r\n    g.fillRect(0, 0, sizex, sizey);\r\n    // two colors uses\r\n    Color gris = new Color(((float) (0.827)), ((float) (0.827)), ((float) (0.827)));\r\n    Color bleu = new Color(((float) (0.29)), ((float) (0.349)), ((float) (0.643)));\r\n    g.setColor(bleu);\r\n    g.fillRect(0, 0, sizex, 15);\r\n    String[] dayWeek = date.getDayWeekLanguage();\r\n    g.setColor(Color.white);\r\n    for (int i = 0; i < (dayWeek.length); i++) {\r\n        String dw = dayWeek[((i + 1) % 7)];\r\n        g.drawString(dw.substring(0, ((dw.length()) < 3 ? dw.length() : 3)), (((i * sizex) / 7) + 3), 12);\r\n    }\r\n    GanttCalendar tmpdate = date.Clone();\r\n    TimeZone timeZone = tmpdate.getTimeZone();\r\n    tmpdate.setDay(1);\r\n    String d = tmpdate.getdayWeek();\r\n    while (!(d.equals(language.getDay(1)))) {\r\n        tmpdate.go(Calendar.DATE, (-1));\r\n        d = tmpdate.getdayWeek();\r\n    } \r\n    for (int i = 0; i < 6; i++) {\r\n        for (int j = 0; j < 7; j++) {\r\n            if ((tmpdate.getMonth()) != (date.getMonth()))\r\n                g.setColor(gris);\r\n            else {\r\n                if ((tmpdate.getDay()) == (date.getDay())) {\r\n                    g.setColor(bleu);\r\n                    g.fillRect((((j * sizex) / 7) - 1), (15 + (i * 15)), (sizex / 7), 15);\r\n                    g.setColor(Color.white);\r\n                } else\r\n                    g.setColor(Color.black);\r\n\r\n            }\r\n            g.drawString((\"\" + (tmpdate.getDate())), (((j * sizex) / 7) + 4), ((30 + (i * 15)) - 3));\r\n            tmpdate.go(Calendar.DATE, 1);\r\n            if ((timeZone != null) && (timeZone.inDaylightTime(tmpdate.getTime()))) {\r\n                tmpdate.add(Calendar.MILLISECOND, timeZone.getDSTSavings());\r\n                timeZone = null;\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":2608, "name":"-init-(javax.swing.JFrame)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.-init-(javax.swing.JFrame)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"/**\r\n * Default constructor.\r\n */\r\npublic GanttStatusBar(JFrame mainFrame) {\r\n    super(new BorderLayout());\r\n    myMainFrame = mainFrame;\r\n    // pbp = new ProgressBarPanel();\r\n    message0 = new GanttStatusBar.MessagePanel(215, false);\r\n    message1 = new GanttStatusBar.MessagePanel(400, true);\r\n    message2 = new GanttStatusBar.MessagePanel(250, true);\r\n    myErrorNotificationPanel = new GanttStatusBar.ErrorNotificationPanel();\r\n    // myMainFrame.setGlassPane(pbp);\r\n    // pbp.setPreferredSize(new Dimension(160, 16));\r\n    // message1.setPreferredSize(new Dimension(360,25));\r\n    // message2.setPreferredSize(new Dimension(210,25));\r\n    // add(pbp, BorderLayout.WEST);\r\n    // add(message0, BorderLayout.WEST);\r\n    add(myErrorNotificationPanel, BorderLayout.WEST);\r\n    add(message1, BorderLayout.CENTER);\r\n    add(message2, BorderLayout.EAST);\r\n    message0.setText(((\"GanttProject.biz (\" + (GanttProject.version)) + \")\"));\r\n    // pbp.setValue(0);\r\n    setFirstText(GanttLanguage.getInstance().getText(\"welcome\"), 500);\r\n}"},
 {"id":2609, "name":"-init-(int,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.-init-(int,boolean)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic MessagePanel(int size, boolean separator) {\r\n    super(new FlowLayout());\r\n    message = new JLabel() {\r\n        public void paint(Graphics g) {\r\n            Graphics2D g2 = ((Graphics2D) (g));\r\n            g2.setColor(textColor);\r\n            g2.drawString(getText(), 0, 12);\r\n        }\r\n    };\r\n    if (size != (-1)) {\r\n        message.setPreferredSize(new Dimension(size, 16));\r\n        message.setMaximumSize(new Dimension(size, 16));\r\n        message.setMaximumSize(new Dimension(size, 16));\r\n    }\r\n    if (separator)\r\n        add(new JLabel(\"|\"));\r\n\r\n    add(message);\r\n}"},
 {"id":2610, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.-init-()", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"1() {\r\n}"},
 {"id":2611, "name":"-init-(org.eclipse.core.runtime.IProgressMonitor)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.-init-(org.eclipse.core.runtime.IProgressMonitor)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"private ProgressBarDialog(IProgressMonitor progressMonitor) {\r\n    super(myMainFrame, true);\r\n    myProgressMonitor = progressMonitor;\r\n}"},
 {"id":2612, "name":"clearErrorNotification()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.clearErrorNotification()", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"private void clearErrorNotification() {\r\n    myErrorNotificationPanel.disableNotifier();\r\n}"},
 {"id":2613, "name":"createErrorNotification(java.lang.Runnable)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.createErrorNotification(java.lang.Runnable)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"private void createErrorNotification(Runnable notifier) {\r\n    myErrorNotificationPanel.enableNotifier(notifier);\r\n}"},
 {"id":2614, "name":"createProgressMonitor()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.createProgressMonitor()", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"public IProgressMonitor createProgressMonitor() {\r\n    return new GanttStatusBar.ProgressMonitorImpl();\r\n}"},
 {"id":2615, "name":"getPreferredSize()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.getPreferredSize()", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"/**\r\n *\r\n *\r\n * @return the preferred size of this component.\r\n */\r\npublic Dimension getPreferredSize() {\r\n    return new Dimension(getWidth(), 24);\r\n}"},
 {"id":2616, "name":"run()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.run()", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"public void run() {\r\n    try {\r\n        // while(true){\r\n        switch (mode) {\r\n            case GanttStatusBar.MESSAGE_1 :\r\n                Thread.sleep(message1.getTimer());\r\n                message1.hideText();\r\n                message1.setText(\"\");\r\n                break;\r\n            case GanttStatusBar.MESSAGE_2 :\r\n                Thread.sleep(message2.getTimer());\r\n                message2.hideText();\r\n                message2.setText(\"\");\r\n                break;\r\n        }\r\n        mode = GanttStatusBar.NO_MESSAGE;\r\n        // }\r\n    } catch (Exception e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n    bRunning = false;\r\n}"},
 {"id":2617, "name":"setErrorNotifier(java.lang.Runnable)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.setErrorNotifier(java.lang.Runnable)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"public void setErrorNotifier(Runnable notifier) {\r\n    if ((notifier == null) && ((myErrorNotifier) != null)) {\r\n        clearErrorNotification();\r\n        return;\r\n    }\r\n    if ((myErrorNotifier) == null) {\r\n        createErrorNotification(notifier);\r\n    }\r\n    myErrorNotifier = notifier;\r\n}"},
 {"id":2618, "name":"setFirstText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.setFirstText(java.lang.String)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"public void setFirstText(String text) {\r\n    message1.setText(text);\r\n}"},
 {"id":2619, "name":"setFirstText(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.setFirstText(java.lang.String,int)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"public void setFirstText(String text, int mlTimer) {\r\n    if (!(isVisible()))\r\n        return;\r\n\r\n    message1.setText(text, mlTimer);\r\n    mode = GanttStatusBar.MESSAGE_1;\r\n    if (!(bRunning)) {\r\n        bRunning = true;\r\n        new Thread(this).start();\r\n    }\r\n}"},
 {"id":2620, "name":"setSecondText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.setSecondText(java.lang.String)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"public void setSecondText(String text) {\r\n    message2.setText(text);\r\n}"},
 {"id":2621, "name":"setSecondText(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar.setSecondText(java.lang.String,int)", "ownerclassid":"310", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar", "sourcecode":"public void setSecondText(String text, int mlTimer) {\r\n    if (!(isVisible()))\r\n        return;\r\n\r\n    message2.setText(text, mlTimer);\r\n    mode = GanttStatusBar.MESSAGE_2;\r\n    if (!(bRunning)) {\r\n        bRunning = true;\r\n        new Thread(this).start();\r\n    }\r\n}"},
 {"id":2622, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ErrorNotificationPanel.-init-()", "ownerclassid":"306", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ErrorNotificationPanel", "sourcecode":"ErrorNotificationPanel() {\r\n    super(new BorderLayout());\r\n}"},
 {"id":2623, "name":"disableNotifier()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ErrorNotificationPanel.disableNotifier()", "ownerclassid":"306", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ErrorNotificationPanel", "sourcecode":"void disableNotifier() {\r\n    remove(myLabel);\r\n    revalidate();\r\n}"},
 {"id":2624, "name":"enableNotifier(java.lang.Runnable)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ErrorNotificationPanel.enableNotifier(java.lang.Runnable)", "ownerclassid":"306", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ErrorNotificationPanel", "sourcecode":"void enableNotifier(final Runnable notifier) {\r\n    myLabel = new JLabel(\"<html><body><b>Errors happened. Click here to see the details</b></body></html>\");\r\n    myLabel.addMouseListener(new MouseAdapter() {\r\n        public void mouseClicked(MouseEvent e) {\r\n            notifier.run();\r\n        }\r\n    });\r\n    add(myLabel);\r\n    revalidate();\r\n}"},
 {"id":2625, "name":"-init-(int,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel.-init-(int,boolean)", "ownerclassid":"307", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic MessagePanel(int size, boolean separator) {\r\n    super(new FlowLayout());\r\n    message = new JLabel() {\r\n        public void paint(Graphics g) {\r\n            Graphics2D g2 = ((Graphics2D) (g));\r\n            g2.setColor(textColor);\r\n            g2.drawString(getText(), 0, 12);\r\n        }\r\n    };\r\n    if (size != (-1)) {\r\n        message.setPreferredSize(new Dimension(size, 16));\r\n        message.setMaximumSize(new Dimension(size, 16));\r\n        message.setMaximumSize(new Dimension(size, 16));\r\n    }\r\n    if (separator)\r\n        add(new JLabel(\"|\"));\r\n\r\n    add(message);\r\n}"},
 {"id":2626, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel.-init-()", "ownerclassid":"307", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel", "sourcecode":"1() {\r\n}"},
 {"id":2627, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel.clear()", "ownerclassid":"307", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel", "sourcecode":"/**\r\n * clear the panel.\r\n */\r\npublic void clear() {\r\n    message.setText(\"\");\r\n}"},
 {"id":2628, "name":"getTimer()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel.getTimer()", "ownerclassid":"307", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel", "sourcecode":"/**\r\n *\r\n *\r\n * @return the timer.\r\n */\r\npublic int getTimer() {\r\n    return timer;\r\n}"},
 {"id":2629, "name":"hideText()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel.hideText()", "ownerclassid":"307", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel", "sourcecode":"/**\r\n * Hide the text by decrease the color.\r\n */\r\npublic void hideText() {\r\n    try {\r\n        Color cPanel = getBackground();\r\n        Color cBlack = Color.BLACK;\r\n        int step = 50;\r\n        float dRed = ((float) (cPanel.getRed())) / ((float) (step));\r\n        float dGreen = ((float) (cPanel.getGreen())) / ((float) (step));\r\n        float dBlue = ((float) (cPanel.getBlue())) / ((float) (step));\r\n        for (int i = 0; i < step; i++) {\r\n            textColor = new Color(((int) (dRed * ((float) (i)))), ((int) (dGreen * ((float) (i)))), ((int) (dBlue * ((float) (i)))));\r\n            repaint();\r\n            Thread.sleep(20);\r\n        }\r\n        textColor = Color.BLACK;\r\n    } catch (Exception e) {\r\n        // exception for the thread.sleep\r\n    }\r\n}"},
 {"id":2630, "name":"setText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel.setText(java.lang.String)", "ownerclassid":"307", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel", "sourcecode":"/**\r\n * set a new text to the message.\r\n */\r\npublic void setText(String text) {\r\n    message.setText(text);\r\n    timer = 0;\r\n}"},
 {"id":2631, "name":"setText(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel.setText(java.lang.String,int)", "ownerclassid":"307", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$MessagePanel", "sourcecode":"/**\r\n * set a new text to the message.\r\n */\r\npublic void setText(String text, int mltimer) {\r\n    message.setText(text);\r\n    timer = mltimer;\r\n}"},
 {"id":2632, "name":"-init-(org.eclipse.core.runtime.IProgressMonitor)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog.-init-(org.eclipse.core.runtime.IProgressMonitor)", "ownerclassid":"308", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog", "sourcecode":"private ProgressBarDialog(IProgressMonitor progressMonitor) {\r\n    super(myMainFrame, true);\r\n    myProgressMonitor = progressMonitor;\r\n}"},
 {"id":2633, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog.-init-()", "ownerclassid":"308", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog", "sourcecode":"1() {\r\n}"},
 {"id":2634, "name":"dialogInit()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog.dialogInit()", "ownerclassid":"308", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog", "sourcecode":"protected void dialogInit() {\r\n    super.dialogInit();\r\n    myProgressBar = new JProgressBar();\r\n    myProgressBar.setMinimumSize(new Dimension(400, 50));\r\n    myProgressBar.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n    myLabel = new JLabel();\r\n    myLabel.setFont(Fonts.GENERAL_DIALOG_FONT.deriveFont(14));\r\n    myLabel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));\r\n    getContentPane().setLayout(new BorderLayout());\r\n    getContentPane().add(myProgressBar, BorderLayout.CENTER);\r\n    JPanel labelAndButton = new JPanel(new BorderLayout());\r\n    labelAndButton.add(myLabel, BorderLayout.CENTER);\r\n    JButton cancelButton = new JButton(new CancelAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            myProgressMonitor.setCanceled(true);\r\n            // System.err.println(\"\n\n\"+Platform.getJobManager().currentJob().getName()+\"\n\n\");\r\n            // Platform.getJobManager().currentJob().cancel();\r\n        }\r\n    });\r\n    labelAndButton.add(cancelButton, BorderLayout.EAST);\r\n    getContentPane().add(labelAndButton, BorderLayout.SOUTH);\r\n    setResizable(false);\r\n    this.setUndecorated(true);\r\n}"},
 {"id":2635, "name":"done()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog.done()", "ownerclassid":"308", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog", "sourcecode":"void done() {\r\n    dispose();\r\n}"},
 {"id":2636, "name":"getLabelText()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog.getLabelText()", "ownerclassid":"308", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog", "sourcecode":"private String getLabelText() {\r\n    return (((\"<html><body><b>\" + (myTask)) + \" ... \") + (((myProgressBar.getValue()) * 100) / (myProgressBar.getMaximum()))) + \"%</b></body></html>\";\r\n}"},
 {"id":2637, "name":"setProgress(int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog.setProgress(int)", "ownerclassid":"308", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog", "sourcecode":"void setProgress(int work) {\r\n    myProgressBar.setValue(work);\r\n    myLabel.setText(getLabelText());\r\n}"},
 {"id":2638, "name":"start(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog.start(java.lang.String,int)", "ownerclassid":"308", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressBarDialog", "sourcecode":"void start(String task, int totalWork) {\r\n    myProgressBar.setMaximum(totalWork);\r\n    myProgressBar.setMinimum(0);\r\n    myTask = task;\r\n    myLabel.setText(getLabelText());\r\n    pack();\r\n    setSize(400, 60);\r\n    DialogAligner.center(this, myMainFrame);\r\n    setVisible(true);\r\n}"},
 {"id":2639, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.-init-()", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"ProgressMonitorImpl() {\r\n    // myProgressPanel = new ProgressBarPanel();\r\n    myProgressDialog = new GanttStatusBar.ProgressBarDialog(this);\r\n}"},
 {"id":2640, "name":"beginTask(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.beginTask(java.lang.String,int)", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"public void beginTask(final String name, final int totalWork) {\r\n    /* catch (InterruptedException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n    } catch (InvocationTargetException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n    }\n     */\r\n    try {\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n            public void run() {\r\n                // pbp.reset(name, totalWork);\r\n                // pbp.setVisible(true);\r\n                myTaskName = name;\r\n                myTotalWork = totalWork;\r\n                // myMainFrame.setGlassPane(myProgressPanel);\r\n                // myProgressPanel.setVisible(true);\r\n                // myMainFrame.getRootPane().revalidate();\r\n                // myProgressPanel.start();\r\n                myProgressDialog.start(name, totalWork);\r\n                GPLogger.log((\"[ProgressMonitorImpl] beginTask: name=\" + name));\r\n            }\r\n        });\r\n    } finally {\r\n    }\r\n}"},
 {"id":2641, "name":"done()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.done()", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"public void done() {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            // myProgressPanel.stop();\r\n            // myProgressPanel.setVisible(false);\r\n            myProgressDialog.done();\r\n            // pbp.reset();\r\n            // pbp.setVisible(false);\r\n        }\r\n    });\r\n}"},
 {"id":2642, "name":"internalWorked(double)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.internalWorked(double)", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"public void internalWorked(double work) {\r\n}"},
 {"id":2643, "name":"isCanceled()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.isCanceled()", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"public boolean isCanceled() {\r\n    return isCanceled;\r\n}"},
 {"id":2644, "name":"setCanceled(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.setCanceled(boolean)", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"public void setCanceled(boolean value) {\r\n    myProgressDialog.done();\r\n    isCanceled = value;\r\n}"},
 {"id":2645, "name":"setTaskName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.setTaskName(java.lang.String)", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"public void setTaskName(String name) {\r\n}"},
 {"id":2646, "name":"subTask(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.subTask(java.lang.String)", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"public void subTask(String name) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":2647, "name":"worked(int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl.worked(int)", "ownerclassid":"309", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttStatusBar$ProgressMonitorImpl", "sourcecode":"public void worked(final int work) {\r\n    /* catch (InterruptedException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n    } catch (InvocationTargetException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n    }\n     */\r\n    try {\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n            public void run() {\r\n                myWorked += work;\r\n                myProgressDialog.setProgress(myWorked);\r\n            }\r\n        });\r\n    } finally {\r\n    }\r\n}"},
 {"id":2648, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTabbedPane.-init-()", "ownerclassid":"311", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "sourcecode":"public GanttTabbedPane() {\r\n    super();\r\n}"},
 {"id":2649, "name":"-init-(int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTabbedPane.-init-(int)", "ownerclassid":"311", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "sourcecode":"public GanttTabbedPane(int tabPlacement) {\r\n    super(tabPlacement);\r\n}"},
 {"id":2650, "name":"-init-(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTabbedPane.-init-(int,int)", "ownerclassid":"311", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "sourcecode":"public GanttTabbedPane(int tabPlacement, int tabLayoutPolicy) {\r\n    super(tabPlacement, tabLayoutPolicy);\r\n}"},
 {"id":2651, "name":"addTab(java.lang.String,java.awt.Component,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTabbedPane.addTab(java.lang.String,java.awt.Component,java.lang.Object)", "ownerclassid":"311", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "sourcecode":"public void addTab(String title, Component component, Object userObject) {\r\n    super.addTab(title, component);\r\n    myUserObjectsMap.put(component, userObject);\r\n}"},
 {"id":2652, "name":"addTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTabbedPane.addTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.Object)", "ownerclassid":"311", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "sourcecode":"public void addTab(String title, Icon icon, Component component, Object userObject) {\r\n    super.addTab(title, icon, component);\r\n    myUserObjectsMap.put(component, userObject);\r\n}"},
 {"id":2653, "name":"addTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTabbedPane.addTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,java.lang.Object)", "ownerclassid":"311", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "sourcecode":"public void addTab(String title, Icon icon, Component component, String tip, Object userObject) {\r\n    super.addTab(title, icon, component, tip);\r\n    myUserObjectsMap.put(component, userObject);\r\n}"},
 {"id":2654, "name":"getSelectedUserObject()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTabbedPane.getSelectedUserObject()", "ownerclassid":"311", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "sourcecode":"public Object getSelectedUserObject() {\r\n    Object selectedComp = this.getSelectedComponent();\r\n    return myUserObjectsMap.get(selectedComp);\r\n}"},
 {"id":2655, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.-init-()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"1() {\r\n}"},
 {"id":2656, "name":"-init-(net.sourceforge.ganttproject.GanttTask[],net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.-init-(net.sourceforge.ganttproject.GanttTask[],net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttTaskPropertiesBean(GanttTask[] selectedTasks, IGanttProject project, UIFacade uifacade) {\r\n    this.onlyOneTask = false;\r\n    if ((selectedTasks.length) == 1)\r\n        this.onlyOneTask = true;\r\n\r\n    this.selectedTasks = selectedTasks;\r\n    setInitialValues(selectedTasks[0]);\r\n    myHumanResourceManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n    myTaskManager = project.getTaskManager();\r\n    myProject = project;\r\n    myUIfacade = uifacade;\r\n    // setTree(tree);\r\n    init();\r\n    // this.managerHash = managerHash;\r\n    setSelectedTask();\r\n}"},
 {"id":2657, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.-init-(java.lang.String)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"10( $anonymous0) {\r\n}"},
 {"id":2658, "name":"addActionListener(java.awt.event.ActionListener)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.addActionListener(java.awt.event.ActionListener)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Add the differents action listener on the differents widgets\r\n */\r\npublic void addActionListener(ActionListener l) {\r\n    nameField1.addActionListener(l);\r\n    startDateButton1.addActionListener(l);\r\n    finishDateButton1.addActionListener(l);\r\n    thirdDateButton1.addActionListener(l);\r\n    thirdDateComboBox.addActionListener(l);\r\n    durationField1.addActionListener(l);\r\n}"},
 {"id":2659, "name":"addUsingGBL(java.awt.Container,java.awt.Component,java.awt.GridBagConstraints,int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.addUsingGBL(java.awt.Container,java.awt.Component,java.awt.GridBagConstraints,int,int,int,int)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * add a component to container by using GridBagConstraints.\r\n */\r\nprivate void addUsingGBL(Container container, Component component, GridBagConstraints gbc, int x, int y, int w, int h) {\r\n    gbc.gridx = x;\r\n    gbc.gridy = y;\r\n    gbc.gridwidth = w;\r\n    gbc.gridheight = h;\r\n    gbc.weighty = 0;\r\n    container.add(component, gbc);\r\n}"},
 {"id":2660, "name":"adjustLength()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.adjustLength()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"private void adjustLength() {\r\n    myUnpluggedClone.setStart(this.start);\r\n    myUnpluggedClone.setEnd(this.end);\r\n    length = ((int) (myUnpluggedClone.getDuration().getLength()));\r\n    durationField1.setText((\"\" + (length)));\r\n    // durationField2.setText(\"\"+length);\r\n    myAllocationsPanel[0].durationChanged(length);\r\n    durationFieldNotes.setText((\"\" + (length)));\r\n}"},
 {"id":2661, "name":"canBeProjectTask(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.canBeProjectTask(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"private boolean canBeProjectTask(Task testedTask, TaskContainmentHierarchyFacade taskHierarchy) {\r\n    Task[] nestedTasks = taskHierarchy.getNestedTasks(testedTask);\r\n    if ((nestedTasks.length) == 0) {\r\n        return false;\r\n    }\r\n    for (Task parent = taskHierarchy.getContainer(testedTask); parent != null; parent = taskHierarchy.getContainer(parent)) {\r\n        if (parent.isProjectTask()) {\r\n            return false;\r\n        }\r\n    }\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        if (isProjectTaskOrContainsProjectTask(nestedTasks[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"},
 {"id":2662, "name":"changeLength(int)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.changeLength(int)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Set the duration of the task\r\n */\r\npublic void changeLength(int _length) {\r\n    if (_length <= 0) {\r\n        _length = 1;\r\n    }\r\n    durationField1.setText((_length + \"\"));\r\n    if (onlyOneTask)\r\n        myDependenciesPanel.durationChanged(_length);\r\n\r\n    myAllocationsPanel[0].durationChanged(_length);\r\n    durationFieldNotes.setText((_length + \"\"));\r\n    length = _length;\r\n    // change the end date\r\n    GanttCalendar _end = start.newAdd(length);\r\n    this.end = _end;\r\n    finishDateField1.setText(_end.toString());\r\n}"},
 {"id":2663, "name":"changeNameOfTask()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.changeNameOfTask()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Change the name of the task on all textfiled of task name\r\n */\r\npublic void changeNameOfTask() {\r\n    if (((nameField1) != null) && ((nameFieldNotes) != null)) {\r\n        String nameOfTask = nameField1.getText().trim();\r\n        nameField1.setText(nameOfTask);\r\n        if (onlyOneTask)\r\n            myDependenciesPanel.nameChanged(nameOfTask);\r\n\r\n        myAllocationsPanel[0].nameChanged(nameOfTask);\r\n        nameFieldNotes.setText(nameOfTask);\r\n    }\r\n}"},
 {"id":2664, "name":"constructCheckBox()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.constructCheckBox()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"private JCheckBox constructCheckBox() {\r\n    boolean canBeProjectTask = true;\r\n    boolean canBeMilestone = true;\r\n    TaskContainmentHierarchyFacade taskHierarchy = myTaskManager.getTaskHierarchy();\r\n    for (int i = 0; i < (selectedTasks.length); i++) {\r\n        canBeMilestone &= !(taskHierarchy.hasNestedTasks(selectedTasks[i]));\r\n        canBeProjectTask &= canBeProjectTask(selectedTasks[i], taskHierarchy);\r\n    }\r\n    assert false == (canBeProjectTask && canBeMilestone);\r\n    final JCheckBox result;\r\n    if (canBeProjectTask) {\r\n        result = new JCheckBox(language.getText(\"projectTask\"));\r\n        projectTaskCheckBox1 = result;\r\n    } else\r\n        if (canBeMilestone) {\r\n            mileStoneCheckBox1 = new JCheckBox(new AbstractAction(language.getText(\"meetingPoint\")) {\r\n                public void actionPerformed(ActionEvent arg0) {\r\n                    enableMilestoneFriendlyControls((!(isBilan())));\r\n                }\r\n            });\r\n            result = mileStoneCheckBox1;\r\n        } else {\r\n            result = null;\r\n        }\r\n\r\n    return result;\r\n}"},
 {"id":2665, "name":"constructCustomColumnPanel(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.constructCustomColumnPanel(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"private void constructCustomColumnPanel(IGanttProject project) {\r\n    myCustomColumnPanel = new CustomColumnsPanel(project.getTaskCustomColumnManager(), project.getCustomColumnsStorage(), myUIfacade);\r\n}"},
 {"id":2666, "name":"constructGeneralPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.constructGeneralPanel()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Construct the general panel\r\n */\r\nprivate void constructGeneralPanel() {\r\n    generalPanel = new JPanel(new GridBagLayout());\r\n    // first row\r\n    nameLabel1 = new JLabel(((language.getText(\"name\")) + \":\"));\r\n    nameField1 = new JTextField(20);\r\n    nameField1.setName(\"name_of_task\");\r\n    if (!(onlyOneTask)) {\r\n        nameLabel1.setVisible(false);\r\n        nameField1.setVisible(false);\r\n    }\r\n    durationLabel1 = new JLabel(((language.getText(\"length\")) + \":\"));\r\n    durationField1 = new JTextField(8);\r\n    durationField1.setName(\"length\");\r\n    firstRowPanel1 = new JPanel(flowL);\r\n    setFirstRow(firstRowPanel1, gbc, nameLabel1, nameField1, durationLabel1, durationField1);\r\n    // second row\r\n    percentCompleteLabel1 = new JLabel(language.getText(\"advancement\"));// Progress\r\n\r\n    SpinnerNumberModel spinnerModel = new SpinnerNumberModel(0, 0, 100, 1);\r\n    percentCompleteSlider = new JSpinner(spinnerModel);\r\n    secondRowPanel1 = new JPanel(flowL);\r\n    secondRowPanel1.add(percentCompleteLabel1);\r\n    // secondRowPanel1.add(percentCompleteField1);\r\n    secondRowPanel1.add(percentCompleteSlider);\r\n    priorityLabel1 = new JLabel(language.getText(\"priority\"));\r\n    secondRowPanel1.add(priorityLabel1);\r\n    priorityComboBox = new JComboBox();\r\n    priorityComboBox.addItem(language.getText(\"low\"));\r\n    priorityComboBox.addItem(language.getText(\"normal\"));\r\n    priorityComboBox.addItem(language.getText(\"hight\"));\r\n    priorityComboBox.setEditable(false);\r\n    secondRowPanel1.add(priorityComboBox);\r\n    // third row\r\n    startDateLabel1 = new JLabel(((language.getText(\"dateOfBegining\")) + \":\"));\r\n    startDateField1 = new JTextField(12);\r\n    startDateField1.setEditable(false);\r\n    finishDateLabel1 = new JLabel(((language.getText(\"dateOfEnd\")) + \":\"));\r\n    finishDateField1 = new JTextField(12);\r\n    finishDateField1.setEditable(false);\r\n    thirdDateComboBox = new JComboBox();\r\n    thirdDateComboBox.addItem(\"\");\r\n    thirdDateComboBox.addItem(language.getText(\"earliestBegin\"));\r\n    thirdDateComboBox.setName(\"third\");\r\n    thirdDateComboBox.setSelectedIndex(selectedTasks[0].getThirdDateConstraint());\r\n    thirdDateField1 = new JTextField(12);\r\n    thirdDateField1.setEditable(false);\r\n    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/calendar_16.gif\"));\r\n    startDateButton1 = new TestGanttRolloverButton(icon);\r\n    startDateButton1.setName(\"start\");\r\n    startDateButton1.setToolTipText(GanttProject.getToolTip(language.getText(\"chooseDate\")));\r\n    finishDateButton1 = new TestGanttRolloverButton(icon);\r\n    finishDateButton1.setName(\"finish\");\r\n    finishDateButton1.setToolTipText(GanttProject.getToolTip(language.getText(\"chooseDate\")));\r\n    thirdDateButton1 = new TestGanttRolloverButton(icon);\r\n    thirdDateButton1.setName(\"third\");\r\n    thirdDateButton1.setToolTipText(GanttProject.getToolTip(language.getText(\"chooseDate\")));\r\n    if ((selectedTasks[0].getThirdDateConstraint()) == 0)\r\n        thirdDateButton1.setEnabled(false);\r\n\r\n    thirdRowPanel1 = new JPanel(flowL);\r\n    thirdRowPanel1.setBorder(new TitledBorder(new EtchedBorder(), language.getText(\"date\")));\r\n    JPanel startDatePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));\r\n    startDatePanel.add(startDateLabel1);\r\n    myStartDatePicker = createDatePicker(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            setStart(new GanttCalendar(((org.jdesktop.swing.JXDatePicker) (e.getSource())).getDate()), false);\r\n        }\r\n    });\r\n    startDatePanel.add(myStartDatePicker);\r\n    // startDatePanel.add(startDateButton1);\r\n    JPanel finishDatePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));\r\n    finishDatePanel.add(finishDateLabel1);\r\n    myEndDatePicker = createDatePicker(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            setEnd(new GanttCalendar(((org.jdesktop.swing.JXDatePicker) (e.getSource())).getDate()), false);\r\n        }\r\n    });\r\n    finishDatePanel.add(myEndDatePicker);\r\n    // finishDatePanel.add(finishDateButton1);\r\n    JPanel thirdDatePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));\r\n    thirdDatePanel.add(thirdDateComboBox);\r\n    myThirdDatePicker = createDatePicker(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            setThird(new GanttCalendar(((org.jdesktop.swing.JXDatePicker) (e.getSource())).getDate()), false);\r\n        }\r\n    });\r\n    thirdDatePanel.add(myThirdDatePicker);\r\n    // thirdDatePanel.add(thirdDateButton1);\r\n    // thirdRowPanel1.add(startDatePanel);\r\n    // thirdRowPanel1.add(finishDatePanel);\r\n    // thirdRowPanel1.add(thirdDatePanel);\r\n    addUsingGBL(thirdRowPanel1, startDatePanel, gbc, 0, 0, 1, 1);\r\n    addUsingGBL(thirdRowPanel1, finishDatePanel, gbc, 0, 1, 1, 1);\r\n    addUsingGBL(thirdRowPanel1, thirdDatePanel, gbc, 0, 2, 1, 1);\r\n    // fourth row\r\n    JCheckBox checkBox = constructCheckBox();\r\n    lastRowPanel1 = new JPanel(flowL);\r\n    if (checkBox != null)\r\n        lastRowPanel1.add(checkBox);\r\n\r\n    JPanel shapePanel = new JPanel();\r\n    shapePanel.setLayout(new BorderLayout());\r\n    JLabel lshape = new JLabel(((\"  \" + (language.getText(\"shape\"))) + \" \"));\r\n    shapeComboBox = new JPaintCombo(ShapeConstants.PATTERN_LIST);\r\n    shapePanel.add(lshape, BorderLayout.WEST);\r\n    shapePanel.add(shapeComboBox, BorderLayout.CENTER);\r\n    colorButton = new JButton(language.getText(\"colorButton\"));\r\n    colorButton.setBackground(selectedTasks[0].getColor());\r\n    final String colorChooserTitle = language.getText(\"selectColor\");\r\n    colorButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JDialog dialog;\r\n            dialog = JColorChooser.createDialog(GanttTaskPropertiesBean.this, colorChooserTitle, true, GanttDialogProperties.colorChooser, new ActionListener() {\r\n                public void actionPerformed(ActionEvent e) {\r\n                    colorButton.setBackground(GanttDialogProperties.colorChooser.getColor());\r\n                    isColorChanged = true;\r\n                }\r\n            }, new ActionListener() {\r\n                public void actionPerformed(ActionEvent e) {\r\n                    // nothing to do for \"Cancel\"\r\n                }\r\n            });\r\n            /* AbstractColorChooserPanel[] panels =\n            GanttDialogProperties.colorChooser.getChooserPanels();\n            GanttDialogProperties.colorChooser.removeChooserPanel(panels[0]);\n            GanttDialogProperties.colorChooser.addChooserPanel(panels[0]);\n             */\r\n            GanttDialogProperties.colorChooser.setColor(colorButton.getBackground());\r\n            dialog.show();\r\n        }\r\n    });\r\n    colorSpace = new JButton(language.getText(\"defaultColor\"));\r\n    colorSpace.setBackground(GanttGraphicArea.taskDefaultColor);\r\n    colorSpace.setToolTipText(GanttProject.getToolTip(language.getText(\"resetColor\")));\r\n    colorSpace.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            colorButton.setBackground(GanttGraphicArea.taskDefaultColor);\r\n            isColorChanged = true;\r\n        }\r\n    });\r\n    colorPanel = new JPanel();\r\n    colorPanel.setLayout(new BorderLayout());\r\n    colorPanel.add(colorButton, \"West\");\r\n    colorPanel.add(colorSpace, \"Center\");\r\n    colorPanel.add(shapePanel, BorderLayout.EAST);\r\n    lastRowPanel1.add(colorPanel);\r\n    // ---Set GridBagConstraints constant\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    addUsingGBL(generalPanel, firstRowPanel1, gbc, 0, 0, 1, 1);\r\n    addUsingGBL(generalPanel, secondRowPanel1, gbc, 0, 1, 1, 1);\r\n    addUsingGBL(generalPanel, thirdRowPanel1, gbc, 0, 2, 1, 1);\r\n    gbc.gridx = 0;\r\n    gbc.gridy = 3;\r\n    gbc.gridwidth = 1;\r\n    gbc.gridheight = GridBagConstraints.RELATIVE;\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.weighty = 1;\r\n    generalPanel.add(lastRowPanel1, gbc);\r\n    // The panel for the web link\r\n    webLinkPanel = new JPanel(flowL);\r\n    lblWebLink = new JLabel(language.getText(\"webLink\"));\r\n    webLinkPanel.add(lblWebLink);\r\n    tfWebLink = new JTextField(30);\r\n    webLinkPanel.add(tfWebLink);\r\n    bWebLink = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/web_16.gif\")));\r\n    bWebLink.setToolTipText(GanttProject.getToolTip(language.getText(\"openWebLink\")));\r\n    webLinkPanel.add(bWebLink);\r\n    bWebLink.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            // link to open the web link\r\n            try {\r\n                if (!(BrowserControl.displayURL(tfWebLink.getText()))) {\r\n                    GanttDialogInfo gdi = new GanttDialogInfo(null, GanttDialogInfo.ERROR, GanttDialogInfo.YES_OPTION, language.getText(\"msg4\"), language.getText(\"error\"));\r\n                    gdi.show();\r\n                }\r\n            } catch (Exception ex) {\r\n            }\r\n        }\r\n    });\r\n    gbc.gridy = 4;\r\n    generalPanel.add(webLinkPanel, gbc);\r\n}"},
 {"id":2667, "name":"constructNotesPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.constructNotesPanel()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * construct the notes pannel\r\n */\r\nprivate void constructNotesPanel() {\r\n    notesPanel = new JPanel(new GridBagLayout());\r\n    // first row\r\n    nameLabelNotes = new JLabel(((language.getText(\"name\")) + \":\"));\r\n    nameFieldNotes = new JTextField(20);\r\n    if (!(onlyOneTask)) {\r\n        nameLabelNotes.setVisible(false);\r\n        nameFieldNotes.setVisible(false);\r\n    }\r\n    durationLabelNotes = new JLabel(((language.getText(\"length\")) + \":\"));\r\n    durationFieldNotes = new JTextField(8);\r\n    nameFieldNotes.setEditable(false);\r\n    durationFieldNotes.setEditable(false);\r\n    firstRowPanelNotes = new JPanel();\r\n    setFirstRow(firstRowPanelNotes, gbc, nameLabelNotes, nameFieldNotes, durationLabelNotes, durationFieldNotes);\r\n    secondRowPanelNotes = new JPanel();\r\n    secondRowPanelNotes.setBorder(new TitledBorder(new EtchedBorder(), ((language.getText(\"notesTask\")) + \":\")));\r\n    noteAreaNotes = new JTextArea(8, 40);\r\n    noteAreaNotes.setLineWrap(true);\r\n    noteAreaNotes.setWrapStyleWord(true);\r\n    noteAreaNotes.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    scrollPaneNotes = new JScrollPane(noteAreaNotes);\r\n    secondRowPanelNotes.add(scrollPaneNotes);\r\n    JButton bdate = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/clock_16.gif\")));\r\n    bdate.setToolTipText(GanttProject.getToolTip(language.getText(\"putDate\")));\r\n    bdate.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            noteAreaNotes.append(((\"\n\" + (GanttCalendar.getDateAndTime())) + \"\n\"));\r\n        }\r\n    });\r\n    secondRowPanelNotes.add(bdate);\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    gbc.weighty = 0;\r\n    addUsingGBL(notesPanel, firstRowPanelNotes, gbc, 0, 0, 1, 1);\r\n    gbc.weighty = 1;\r\n    gbc.gridx = 0;\r\n    gbc.gridy = 1;\r\n    gbc.gridwidth = 1;\r\n    gbc.gridheight = 1;\r\n    notesPanel.add(secondRowPanelNotes, gbc);\r\n}"},
 {"id":2668, "name":"constructPredecessorsPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.constructPredecessorsPanel()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Construct the predecessors tabbed pane\r\n */\r\nprivate void constructPredecessorsPanel() {\r\n    myDependenciesPanel = new TaskDependenciesPanel(selectedTasks[0]);\r\n    predecessorsPanel = myDependenciesPanel.getComponent();\r\n}"},
 {"id":2669, "name":"constructResourcesPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.constructResourcesPanel()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Construct the resources panel\r\n */\r\nprivate void constructResourcesPanel() {\r\n    myAllocationsPanel = new TaskAllocationsPanel[selectedTasks.length];\r\n    for (int i = 0; i < (myAllocationsPanel.length); i++) {\r\n        myAllocationsPanel[i] = new TaskAllocationsPanel(selectedTasks[i], myHumanResourceManager, myRoleManager, onlyOneTask);\r\n        if (i != 0)\r\n            myAllocationsPanel[i].getComponent();\r\n\r\n    }\r\n    resourcesPanel = myAllocationsPanel[0].getComponent();\r\n}"},
 {"id":2670, "name":"copyValues(net.sourceforge.ganttproject.gui.ResourcesTableModel,net.sourceforge.ganttproject.gui.ResourcesTableModel)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.copyValues(net.sourceforge.ganttproject.gui.ResourcesTableModel,net.sourceforge.ganttproject.gui.ResourcesTableModel)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"private void copyValues(ResourcesTableModel original, ResourcesTableModel clone) {\r\n    for (int i = 0; i < (clone.getRowCount()); i++)\r\n        clone.setValueAt(null, i, 1);\r\n\r\n    for (int j = 0; j < (original.getRowCount()); j++)\r\n        for (int k = 0; k < (original.getColumnCount()); k++)\r\n            clone.setValueAt(original.getValueAt(j, k), j, k);\r\n\r\n\r\n}"},
 {"id":2671, "name":"createDatePicker(java.awt.event.ActionListener)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.createDatePicker(java.awt.event.ActionListener)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"private JXDatePicker createDatePicker(ActionListener listener) {\r\n    ImageIcon calendarImage = new ImageIcon(getClass().getResource(\"/icons/calendar_16.gif\"));\r\n    Icon nextMonth = new ImageIcon(getClass().getResource(\"/icons/nextmonth.gif\"));\r\n    Icon prevMonth = new ImageIcon(getClass().getResource(\"/icons/prevmonth.gif\"));\r\n    UIManager.put(\"JXDatePicker.arrowDown.image\", calendarImage);\r\n    UIManager.put(\"JXMonthView.monthUp.image\", prevMonth);\r\n    UIManager.put(\"JXMonthView.monthDown.image\", nextMonth);\r\n    UIManager.put(\"JXMonthView.monthCurrent.image\", calendarImage);\r\n    JXDatePicker result = new JXDatePicker();\r\n    result.addActionListener(listener);\r\n    return result;\r\n}"},
 {"id":2672, "name":"enableMilestoneFriendlyControls(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.enableMilestoneFriendlyControls(boolean)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"void enableMilestoneFriendlyControls(boolean enable) {\r\n    finishDateField1.setEnabled(enable);\r\n    myEndDatePicker.setEnabled(enable);\r\n    durationField1.setEnabled(enable);\r\n}"},
 {"id":2673, "name":"fireDurationChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.fireDurationChanged()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"public void fireDurationChanged() {\r\n    String value = durationField1.getText();\r\n    try {\r\n        int duration = Integer.parseInt(value);\r\n        changeLength(duration);\r\n    } catch (NumberFormatException e) {\r\n    }\r\n}"},
 {"id":2674, "name":"getFinish()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getFinish()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"public GanttCalendar getFinish() {\r\n    // end.setFixed(isFinishFixed);\r\n    return end;\r\n}"},
 {"id":2675, "name":"getLength()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getLength()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * as the name indicated\r\n */\r\npublic int getLength() {\r\n    try {\r\n        length = Integer.parseInt(durationField1.getText().trim());\r\n    } catch (NumberFormatException e) {\r\n    }\r\n    return length;\r\n}"},
 {"id":2676, "name":"getNotes()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getNotes()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * as the name indicated\r\n */\r\npublic String getNotes() {\r\n    notes = noteAreaNotes.getText();\r\n    return notes;\r\n}"},
 {"id":2677, "name":"getPercentComplete()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getPercentComplete()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * as the name indicated\r\n */\r\npublic int getPercentComplete() {\r\n    percentComplete = ((Integer) (percentCompleteSlider.getValue())).hashCode();\r\n    return percentComplete;\r\n}"},
 {"id":2678, "name":"getPriority()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getPriority()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Return the priority level of the task\r\n */\r\npublic int getPriority() {\r\n    priority = priorityComboBox.getSelectedIndex();\r\n    return priority;\r\n}"},
 {"id":2679, "name":"getReturnTask()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getReturnTask()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"// Input methods\r\n/**\r\n * as the name indicated, it will not replace the original GanttTask in the\r\n * Tree.\r\n */\r\npublic Task[] getReturnTask() {\r\n    GanttTask[] returnTask = new GanttTask[selectedTasks.length];\r\n    for (int i = 0; i < (selectedTasks.length); i++) {\r\n        if (myAllocationsPanel[0].getTableModel().isChanged()) {\r\n            if (i != 0)\r\n                copyValues(myAllocationsPanel[0].getTableModel(), myAllocationsPanel[i].getTableModel());\r\n\r\n        }\r\n        myAllocationsPanel[i].getTableModel().commit();\r\n        returnTask[i] = selectedTasks[i];\r\n        // returnTask.setTaskID(selectedTask.getTaskID());\r\n        TaskMutator mutator = returnTask[i].createMutator();\r\n        if (onlyOneTask) {\r\n            mutator.setName(getTaskName());// getName()\r\n\r\n            mutator.setProjectTask(false);\r\n        }\r\n        if (((this.taskWebLink) != null) && (!(this.taskWebLink.equals(getWebLink()))))\r\n            returnTask[i].setWebLink(getWebLink());\r\n        // getName()\r\n\r\n        if ((mileStoneCheckBox1) != null) {\r\n            if ((this.taskIsMilestone) != (isBilan()))\r\n                mutator.setMilestone(isBilan());\r\n\r\n        } else\r\n            if ((projectTaskCheckBox1) != null) {\r\n                if ((this.taskIsProjectTask) != (isProjectTask()))\r\n                    mutator.setProjectTask(isProjectTask());\r\n\r\n            }\r\n\r\n        if (!(this.taskStartDate.equals(getStart())))\r\n            mutator.setStart(getStart());\r\n\r\n        if (((((this.taskThirdDate) == null) && ((getThird()) != null)) || (((this.taskThirdDate) != null) && ((getThird()) == null))) || (((this.taskThirdDate) != null) && (!(this.taskThirdDate.equals(getThird())))))\r\n            mutator.setThird(getThird(), getThirdDateConstraint());\r\n\r\n        if ((getLength()) > 0) {\r\n            mutator.setDuration(returnTask[i].getManager().createLength(getLength()));\r\n        }\r\n        if (!(this.taskNotes.equals(getNotes())))\r\n            returnTask[i].setNotes(getNotes());\r\n\r\n        if ((this.taskCompletionPercentage) != (getPercentComplete()))\r\n            mutator.setCompletionPercentage(getPercentComplete());\r\n\r\n        if ((this.taskPriority) != (getPriority()))\r\n            returnTask[i].setPriority(getPriority());\r\n\r\n        // if (this.taskIsStartFixed != isStartFixed)\r\n        // returnTask[i].setStartFixed(isStartFixed);\r\n        // if (this.taskIsFinishFixed != isFinishFixed)\r\n        // returnTask[i].setFinishFixed(isFinishFixed);\r\n        if (isColorChanged)\r\n            returnTask[i].setColor(colorButton.getBackground());\r\n\r\n        if ((((this.taskShape) == null) && ((shapeComboBox.getSelectedIndex()) != 0)) || (((this.taskShape) != null) && (!(this.taskShape.equals(((ShapePaint) (shapeComboBox.getSelectedPaint())))))))\r\n            returnTask[i].setShape(new ShapePaint(((ShapePaint) (shapeComboBox.getSelectedPaint())), Color.white, returnTask[i].getColor()));\r\n\r\n        if ((returnTask[i].getShape()) != null)\r\n            returnTask[i].setShape(new ShapePaint(returnTask[i].getShape(), Color.white, returnTask[i].getColor()));\r\n\r\n        mutator.commit();\r\n        if (onlyOneTask) {\r\n            myDependenciesPanel.getTableModel().commit();\r\n        }\r\n        returnTask[i].applyThirdDateConstraint();\r\n    }\r\n    return returnTask;\r\n}"},
 {"id":2680, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getStart()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"// public void setStartFixed(boolean startFixed) {\r\n// isStartFixed = startFixed;\r\n// startDateField1.setForeground(isStartFixed ? Color.BLACK : Color.GRAY);\r\n// }\r\n// public void setFinishFixed(boolean startFixed) {\r\n// isFinishFixed = startFixed;\r\n// finishDateField1\r\n// .setForeground(isFinishFixed ? Color.BLACK : Color.GRAY);\r\n// }\r\n/**\r\n * Return the start date of the task\r\n */\r\npublic GanttCalendar getStart() {\r\n    // start.setFixed(isStartFixed);\r\n    return start;\r\n}"},
 {"id":2681, "name":"getTaskName()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getTaskName()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Return the name of the task\r\n */\r\npublic String getTaskName() {\r\n    String text = nameField1.getText();\r\n    return text == null ? \"\" : text.trim();\r\n}"},
 {"id":2682, "name":"getThird()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getThird()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * as the name indicated\r\n */\r\n// public GanttCalendar getEnd() {\r\n// \r\n// return end;\r\n// \r\n// }\r\n/**\r\n * as the name indicated\r\n */\r\npublic GanttCalendar getThird() {\r\n    return third;\r\n}"},
 {"id":2683, "name":"getThirdDateConstraint()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getThirdDateConstraint()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"public int getThirdDateConstraint() {\r\n    return thirdDateComboBox.getSelectedIndex();\r\n}"},
 {"id":2684, "name":"getWebLink()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.getWebLink()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n *\r\n *\r\n * @return the web link of the task.\r\n */\r\npublic String getWebLink() {\r\n    String text = tfWebLink.getText();\r\n    return text == null ? \"\" : text.trim();\r\n}"},
 {"id":2685, "name":"init()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.init()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Init the widgets\r\n */\r\npublic void init() {\r\n    tabbedPane = new JTabbedPane();\r\n    tabbedPane.getModel().addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent e) {\r\n            changeNameOfTask();\r\n            fireDurationChanged();\r\n        }\r\n    });\r\n    constructGeneralPanel();\r\n    tabbedPane.addTab(language.getText(\"general\"), new ImageIcon(getClass().getResource(\"/icons/properties_16.gif\")), generalPanel);\r\n    if (onlyOneTask) {\r\n        constructPredecessorsPanel();\r\n        tabbedPane.addTab(language.getText(\"predecessors\"), new ImageIcon(getClass().getResource(\"/icons/relashion.gif\")), predecessorsPanel);\r\n    }\r\n    constructResourcesPanel();\r\n    tabbedPane.addTab(GanttProject.correctLabel(language.getText(\"human\")), new ImageIcon(getClass().getResource(\"/icons/res_16.gif\")), resourcesPanel);\r\n    constructNotesPanel();\r\n    tabbedPane.addTab(language.getText(\"notesTask\"), new ImageIcon(getClass().getResource(\"/icons/note_16.gif\")), notesPanel);\r\n    setLayout(new BorderLayout());\r\n    add(tabbedPane, BorderLayout.CENTER);\r\n    constructCustomColumnPanel(myProject);\r\n    tabbedPane.addTab(language.getText(\"customColumns\"), new ImageIcon(getClass().getResource(\"/icons/custom.gif\")), myCustomColumnPanel);\r\n    tabbedPane.addFocusListener(new FocusAdapter() {\r\n        private boolean isFirstFocusGain = true;\r\n\r\n        public void focusGained(FocusEvent e) {\r\n            super.focusGained(e);\r\n            if (isFirstFocusGain) {\r\n                nameField1.requestFocus();\r\n                isFirstFocusGain = false;\r\n            }\r\n        }\r\n    });\r\n    tabbedPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 5, 0));\r\n}"},
 {"id":2686, "name":"isBilan()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.isBilan()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"// Output methods\r\n/**\r\n * as the name indicated\r\n */\r\npublic boolean isBilan() {\r\n    bilan = mileStoneCheckBox1.isSelected();\r\n    return bilan;\r\n}"},
 {"id":2687, "name":"isProjectTask()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.isProjectTask()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"public boolean isProjectTask() {\r\n    isProjectTask = projectTaskCheckBox1.isSelected();\r\n    return isProjectTask;\r\n}"},
 {"id":2688, "name":"isProjectTaskOrContainsProjectTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.isProjectTaskOrContainsProjectTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"private boolean isProjectTaskOrContainsProjectTask(Task task) {\r\n    if (task.isProjectTask()) {\r\n        return true;\r\n    }\r\n    boolean result = false;\r\n    Task[] nestedTasks = task.getNestedTasks();\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        if (isProjectTaskOrContainsProjectTask(nestedTasks[i])) {\r\n            result = true;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":2689, "name":"setEnd(net.sourceforge.ganttproject.GanttCalendar,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setEnd(net.sourceforge.ganttproject.GanttCalendar,boolean)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Change the end date of the task\r\n */\r\npublic void setEnd(GanttCalendar dend, boolean test) {\r\n    myEndDatePicker.setDate(dend.getTime());\r\n    this.end = dend;\r\n    if (test == true) {\r\n        return;\r\n    }\r\n    // this.setFinishFixed(dend.isFixed());\r\n    if ((this.start.compareTo(this.end)) < 0) {\r\n        adjustLength();\r\n    } else {\r\n        GanttCalendar _start = this.end.newAdd((-(length)));\r\n        this.start = _start;\r\n        startDateField1.setText(_start.toString());\r\n    }\r\n}"},
 {"id":2690, "name":"setFirstRow(java.awt.Container,java.awt.GridBagConstraints,javax.swing.JLabel,javax.swing.JTextField,javax.swing.JLabel,javax.swing.JTextField)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setFirstRow(java.awt.Container,java.awt.GridBagConstraints,javax.swing.JLabel,javax.swing.JTextField,javax.swing.JLabel,javax.swing.JTextField)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * set the first row in all the tabbed pane. thus give them a common look\r\n */\r\nprivate void setFirstRow(Container container, GridBagConstraints gbc, JLabel nameLabel, JTextField nameField, JLabel durationLabel, JTextField durationField) {\r\n    container.setLayout(new GridBagLayout());\r\n    gbc.weightx = 0;\r\n    gbc.weighty = 0;\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    addUsingGBL(container, nameLabel, gbc, 0, 0, 1, 1);\r\n    addUsingGBL(container, nameField, gbc, 1, 0, 1, 1);\r\n    addUsingGBL(container, durationLabel, gbc, 2, 0, 1, 1);\r\n    gbc.weightx = 1;\r\n    addUsingGBL(container, durationField, gbc, 3, 0, 1, 1);\r\n}"},
 {"id":2691, "name":"setInitialValues(net.sourceforge.ganttproject.GanttTask)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setInitialValues(net.sourceforge.ganttproject.GanttTask)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"private void setInitialValues(GanttTask task) {\r\n    this.taskWebLink = task.getWebLink();\r\n    this.taskIsMilestone = task.isMilestone();\r\n    this.taskStartDate = task.getStart();\r\n    this.taskLength = task.getLength();\r\n    this.taskNotes = task.getNotes();\r\n    this.taskCompletionPercentage = task.getCompletionPercentage();\r\n    this.taskPriority = task.getPriority();\r\n    // this.taskIsStartFixed = task.isStartFixed();\r\n    // this.taskIsFinishFixed = task.isFinishFixed();\r\n    this.taskShape = task.getShape();\r\n    this.taskThirdDate = task.getThird();\r\n    this.taskThirdDateConstraint = task.getThirdDateConstraint();\r\n    this.taskIsProjectTask = task.isProjectTask();\r\n}"},
 {"id":2692, "name":"setSelectedTask()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setSelectedTask()", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * as the name indicated\r\n */\r\npublic void setSelectedTask() {\r\n    // this.selectedTask = selectedTask;\r\n    nameField1.setText(selectedTasks[0].getName());\r\n    // nameField2.setText(selectedTask.toString());\r\n    nameFieldNotes.setText(selectedTasks[0].toString());\r\n    setName(selectedTasks[0].toString());\r\n    durationField1.setText(((selectedTasks[0].getLength()) + \"\"));\r\n    // durationField2.setText(selectedTask.getLength() + \"\");\r\n    durationFieldNotes.setText(((selectedTasks[0].getLength()) + \"\"));\r\n    percentCompleteSlider.setValue(new Integer(selectedTasks[0].getCompletionPercentage()));\r\n    percentCompleteLabel1.setText(language.getText(\"advancement\"));\r\n    priorityComboBox.setSelectedIndex(selectedTasks[0].getPriority());\r\n    startDateField1.setText(selectedTasks[0].getStart().toString());\r\n    finishDateField1.setText(selectedTasks[0].getEnd().toString());\r\n    if (selectedTasks[0].isMilestone()) {\r\n        enableMilestoneFriendlyControls(false);\r\n    }\r\n    if ((selectedTasks[0].getThird()) != null) {\r\n        thirdDateField1.setText(selectedTasks[0].getThird().toString());\r\n        setThird(selectedTasks[0].getThird().Clone(), true);\r\n    }\r\n    setStart(selectedTasks[0].getStart().Clone(), true);\r\n    setEnd(selectedTasks[0].getEnd().Clone(), true);\r\n    bilan = selectedTasks[0].isMilestone();\r\n    isProjectTask = selectedTasks[0].isProjectTask();\r\n    if ((mileStoneCheckBox1) != null)\r\n        mileStoneCheckBox1.setSelected(bilan);\r\n    else\r\n        if ((projectTaskCheckBox1) != null)\r\n            projectTaskCheckBox1.setSelected(isProjectTask);\r\n\r\n\r\n    tfWebLink.setText(selectedTasks[0].getWebLink());\r\n    if (selectedTasks[0].shapeDefined()) {\r\n        for (int j = 0; j < (ShapeConstants.PATTERN_LIST.length); j++) {\r\n            if (selectedTasks[0].getShape().equals(ShapeConstants.PATTERN_LIST[j])) {\r\n                shapeComboBox.setSelectedIndex(j);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    noteAreaNotes.setText(selectedTasks[0].getNotes());\r\n    // setStartFixed(selectedTasks[0].isStartFixed());\r\n    // setFinishFixed(selectedTasks[0].isFinishFixed());\r\n    myUnpluggedClone = selectedTasks[0].unpluggedClone();\r\n}"},
 {"id":2693, "name":"setStart(net.sourceforge.ganttproject.GanttCalendar,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setStart(net.sourceforge.ganttproject.GanttCalendar,boolean)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Change the start date of the task\r\n */\r\npublic void setStart(GanttCalendar dstart, boolean test) {\r\n    myStartDatePicker.setDate(dstart.getTime());\r\n    this.start = dstart;\r\n    if (test == true) {\r\n        return;\r\n    }\r\n    // this.setStartFixed(dstart.isFixed());\r\n    if ((this.start.compareTo(this.end)) < 0) {\r\n        adjustLength();\r\n    } else {\r\n        GanttCalendar _end = start.newAdd(this.taskLength);\r\n        this.end = _end;\r\n        // finishDateField1.setText(_end.toString());\r\n        this.myEndDatePicker.setDate(this.end.getTime());\r\n    }\r\n}"},
 {"id":2694, "name":"setThird(net.sourceforge.ganttproject.GanttCalendar,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setThird(net.sourceforge.ganttproject.GanttCalendar,boolean)", "ownerclassid":"312", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "sourcecode":"/**\r\n * Change the third date of the task\r\n */\r\npublic void setThird(GanttCalendar dthird, boolean test) {\r\n    myThirdDatePicker.setDate(dthird.getTime());\r\n    this.third = dthird;\r\n    if (test) {\r\n        return;\r\n    }\r\n    switch (thirdDateComboBox.getSelectedIndex()) {\r\n        case TaskImpl.EARLIESTBEGIN :\r\n            thirdDateButton1.setEnabled(true);\r\n            break;\r\n        case TaskImpl.NONE :\r\n            thirdDateButton1.setEnabled(false);\r\n            break;\r\n    }\r\n}"},
 {"id":2695, "name":"-init-(java.awt.Frame,boolean,java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.GanttURLChooser.-init-(java.awt.Frame,boolean,java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"313", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttURLChooser", "sourcecode":"/**\r\n * The constructor\r\n */\r\npublic GanttURLChooser(Frame parent, boolean opening, String currentURL, String currentUser, String currentPass) {\r\n    super(parent, (opening ? GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"openFromServer\")) : GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"saveToServer\"))), true);\r\n    JPanel inputPanel = new JPanel(new BorderLayout());\r\n    Box serverBox = Box.createVerticalBox();\r\n    serverBox.add(new JLabel(language.getText(\"fileFromServer\")));\r\n    String sDefaultURL = \"http://ganttproject.sourceforge.net/tmp/testGantt.xml\";\r\n    urlField = new JTextField((null != currentURL ? currentURL : sDefaultURL));\r\n    serverBox.add(urlField);\r\n    inputPanel.add(serverBox, BorderLayout.NORTH);\r\n    Box hb = Box.createHorizontalBox();// horizontal box\r\n\r\n    Box ivbw = Box.createVerticalBox();// inner vertical box west\r\n\r\n    Box ivbe = Box.createVerticalBox();// inner vertical box east\r\n\r\n    ivbw.add(new JLabel(language.getText(\"userName\")));\r\n    userNameField = new JTextField(currentUser);\r\n    ivbw.add(userNameField);\r\n    ivbe.add(new JLabel(language.getText(\"password\")));\r\n    passwordField = new JPasswordField(currentPass);\r\n    ivbe.add(passwordField);\r\n    hb.add(ivbw);\r\n    hb.add(ivbe);\r\n    inputPanel.add(hb, BorderLayout.SOUTH);\r\n    JPanel centerPanel = new JPanel(new FlowLayout());\r\n    centerPanel.add(inputPanel, BorderLayout.CENTER);\r\n    getContentPane().add(centerPanel, BorderLayout.CENTER);\r\n    JPanel southPanel = new JPanel();\r\n    JButton ok = new JButton(language.getText(\"ok\"));\r\n    getRootPane().setDefaultButton(ok);\r\n    southPanel.add(ok);\r\n    // Listener sur le bouton ok\r\n    ok.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n            dispose();\r\n            fileurl = urlField.getText();\r\n            userName = userNameField.getText();\r\n            password = new String(passwordField.getPassword());\r\n            change = true;\r\n        }\r\n    });\r\n    // bouton cancel\r\n    JButton cancel = new JButton(language.getText(\"cancel\"));\r\n    southPanel.add(cancel);\r\n    cancel.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n            dispose();\r\n        }\r\n    });\r\n    getContentPane().add(southPanel, BorderLayout.SOUTH);\r\n    pack();\r\n    setResizable(true);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2696, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GanttURLChooser.-init-()", "ownerclassid":"313", "ownerclassname":"net.sourceforge.ganttproject.gui.GanttURLChooser", "sourcecode":"1() {\r\n}"},
 {"id":2697, "name":"-init-(net.sourceforge.ganttproject.GanttProject,java.lang.String,boolean,net.sourceforge.ganttproject.gui.options.GeneralOptionPanel)", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog.-init-(net.sourceforge.ganttproject.GanttProject,java.lang.String,boolean,net.sourceforge.ganttproject.gui.options.GeneralOptionPanel)", "ownerclassid":"315", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GeneralDialog(GanttProject parent, String title, boolean modal, GeneralOptionPanel firstPanel) {\r\n    super(parent, GanttProject.correctLabel(title), modal);\r\n    appli = parent;\r\n    // tree section.\r\n    rootNode = new DefaultMutableTreeNode(\"Options\");\r\n    treeModel = new DefaultTreeModel(rootNode);\r\n    treeSections = new JTree(treeModel);\r\n    treeSections.setEditable(false);\r\n    treeSections.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    treeSections.setShowsRootHandles(true);\r\n    treeSections.setRowHeight(20);\r\n    treeSections.setRootVisible(false);\r\n    treeSections.setCellRenderer(new GeneralDialog.SettinsDefaultTreeCellRenderer());\r\n    treeSections.addTreeSelectionListener(this);\r\n    JScrollPane scrollpane = new JScrollPane(treeSections);\r\n    JPanel treePanel = new JPanel();\r\n    treePanel.add(scrollpane);\r\n    JPanel mainPanel = new JPanel(new BorderLayout());\r\n    if ((language.getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT))\r\n        mainPanel.add(treePanel, BorderLayout.WEST);\r\n    else\r\n        mainPanel.add(scrollpane, BorderLayout.EAST);\r\n\r\n    scrollpane.setPreferredSize(new Dimension(150, 450));\r\n    // construct the south panel\r\n    southPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 50, 10));\r\n    okButton = new JButton(language.getText(\"ok\"));\r\n    okButton.addActionListener(this);\r\n    southPanel.add(okButton);\r\n    applyButton = new JButton(language.getText(\"apply\"));\r\n    applyButton.addActionListener(this);\r\n    // southPanel.add(applyButton); //dont use the apply button\r\n    cancelButton = new JButton(language.getText(\"cancel\"));\r\n    cancelButton.addActionListener(this);\r\n    southPanel.add(cancelButton);\r\n    southPanel.setPreferredSize(new Dimension(600, 50));\r\n    Box southBox = Box.createVerticalBox();\r\n    southBox.add(new JSeparator());\r\n    southBox.add(southPanel);\r\n    mainPanel.add(southBox, BorderLayout.SOUTH);\r\n    // set the ok button as default action for enter\r\n    if ((getRootPane()) != null)\r\n        getRootPane().setDefaultButton(okButton);\r\n\r\n    // add the main panel into the dialog\r\n    JPanel tmpPanel = new JPanel(new BorderLayout());\r\n    tmpPanel.add(mainPanel, BorderLayout.CENTER);\r\n    getContentPane().add(tmpPanel);\r\n    // construct the sections\r\n    constructSections();\r\n    settingPanel = firstPanel;\r\n    Box vb = Box.createVerticalBox();\r\n    vb.add(new TopPanel((\"  \" + (settingPanel.getTitle())), settingPanel.getComment()));\r\n    vb.add(settingPanel);\r\n    settingPanel.initialize();\r\n    // - add the settingPanel into the main Panel\r\n    mainPanel2.add(vb, 0);\r\n    mainPanel.add(mainPanel2);\r\n    // position the window\r\n    this.pack();\r\n    // setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2698, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog.-init-()", "ownerclassid":"315", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog", "sourcecode":"public SettinsDefaultTreeCellRenderer() {\r\n    setOpaque(true);\r\n}"},
 {"id":2699, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"315", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog", "sourcecode":"/**\r\n * action performed for listeners.\r\n */\r\npublic void actionPerformed(ActionEvent event) {\r\n    // click the okButton\r\n    if ((event.getSource()) == (okButton)) {\r\n        settingPanel.applyChanges(false);// ask if the panel has\r\n\r\n        // modifications\r\n        this.setVisible(false);\r\n        dispose();\r\n    } else// click the cancel button\r\n\r\n        if ((event.getSource()) == (cancelButton)) {\r\n            settingPanel.rollback();\r\n            this.setVisible(false);\r\n            dispose();\r\n        }\r\n\r\n    // click the okButton\r\n    if ((event.getSource()) == (applyButton)) {\r\n        settingPanel.applyChanges(false);// ask if the panel has\r\n\r\n        // modifications\r\n    }\r\n}"},
 {"id":2700, "name":"addObject(java.lang.Object,javax.swing.tree.DefaultMutableTreeNode)", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog.addObject(java.lang.Object,javax.swing.tree.DefaultMutableTreeNode)", "ownerclassid":"315", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog", "sourcecode":"/**\r\n * Add a sub section.\r\n */\r\npublic DefaultMutableTreeNode addObject(Object child, DefaultMutableTreeNode parent) {\r\n    DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);\r\n    if (parent == null)\r\n        parent = rootNode;\r\n\r\n    treeModel.insertNodeInto(childNode, parent, parent.getChildCount());\r\n    treeSections.scrollPathToVisible(new TreePath(childNode.getPath()));\r\n    return childNode;\r\n}"},
 {"id":2701, "name":"constructSections()", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog.constructSections()", "ownerclassid":"315", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog", "sourcecode":"/**\r\n * Coonstruct the menu settings.\r\n */\r\npublic abstract void constructSections();"},
 {"id":2702, "name":"getProject()", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog.getProject()", "ownerclassid":"315", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog", "sourcecode":"protected IGanttProject getProject() {\r\n    return appli;\r\n}"},
 {"id":2703, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog.getUIFacade()", "ownerclassid":"315", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog", "sourcecode":"protected UIFacade getUIFacade() {\r\n    return appli.getUIFacade();\r\n}"},
 {"id":2704, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog$SettinsDefaultTreeCellRenderer.-init-()", "ownerclassid":"314", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog$SettinsDefaultTreeCellRenderer", "sourcecode":"public SettinsDefaultTreeCellRenderer() {\r\n    setOpaque(true);\r\n}"},
 {"id":2705, "name":"getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.GeneralDialog$SettinsDefaultTreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)", "ownerclassid":"314", "ownerclassname":"net.sourceforge.ganttproject.gui.GeneralDialog$SettinsDefaultTreeCellRenderer", "sourcecode":"public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {\r\n    String text = String.valueOf(((DefaultMutableTreeNode) (value)).getUserObject());\r\n    setFont(Fonts.GENERAL_DIALOG_FONT);\r\n    setIcon(new ImageIcon(getClass().getResource(\"/icons/blank.gif\")));\r\n    setText(text);\r\n    setBackground((selected ? new Color(((float) (0.29)), ((float) (0.349)), ((float) (0.643))) : Color.white));\r\n    setForeground((selected ? Color.white : Color.black));\r\n    return this;\r\n}"},
 {"id":2706, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.OpenFileDialog.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"316", "ownerclassname":"net.sourceforge.ganttproject.gui.OpenFileDialog", "sourcecode":"/**\r\n * Construtor\r\n */\r\npublic OpenFileDialog(GanttProject project) {\r\n    myStartDirectory = new File(System.getProperty(\"user.home\"));\r\n    myproject = project;\r\n}"},
 {"id":2707, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.OpenFileDialog.-init-(java.lang.String)", "ownerclassid":"316", "ownerclassname":"net.sourceforge.ganttproject.gui.OpenFileDialog", "sourcecode":"/**\r\n * Open the file chooser\r\n */\r\npublic OpenFileDialog(String startDirectory) {\r\n    myStartDirectory = new File(startDirectory);\r\n    if (!(myStartDirectory.isDirectory())) {\r\n        myStartDirectory = myStartDirectory.getParentFile();\r\n    }\r\n}"},
 {"id":2708, "name":"show()", "fullmethod":"net.sourceforge.ganttproject.gui.OpenFileDialog.show()", "ownerclassid":"316", "ownerclassname":"net.sourceforge.ganttproject.gui.OpenFileDialog", "sourcecode":"/**\r\n * Show the dialog box\r\n */\r\npublic File show() {\r\n    File result = null;\r\n    JFileChooser fc = new JFileChooser(myStartDirectory);\r\n    fc.addChoosableFileFilter(new GanttXMLFileFilter());\r\n    int returnVal = fc.showOpenDialog(null);\r\n    if (returnVal == (JFileChooser.APPROVE_OPTION)) {\r\n        result = fc.getSelectedFile();\r\n    }\r\n    return result;\r\n}"},
 {"id":2709, "name":"createProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacade.createProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"317", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "sourcecode":"void createProject(IGanttProject project);"},
 {"id":2710, "name":"getOptionGroup()", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacade.getOptionGroup()", "ownerclassid":"317", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "sourcecode":"GPOptionGroup getOptionGroup();"},
 {"id":2711, "name":"openProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacade.openProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"317", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "sourcecode":"void openProject(IGanttProject project) throws IOException;"},
 {"id":2712, "name":"openProject(net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacade.openProject(net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"317", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "sourcecode":"void openProject(Document document, IGanttProject project) throws IOException;"},
 {"id":2713, "name":"openRemoteProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacade.openRemoteProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"317", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "sourcecode":"void openRemoteProject(IGanttProject project) throws IOException;"},
 {"id":2714, "name":"saveProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacade.saveProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"317", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "sourcecode":"void saveProject(IGanttProject project);"},
 {"id":2715, "name":"saveProjectAs(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacade.saveProjectAs(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"317", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "sourcecode":"void saveProjectAs(IGanttProject project);"},
 {"id":2716, "name":"saveProjectRemotely(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacade.saveProjectRemotely(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"317", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "sourcecode":"public void saveProjectRemotely(IGanttProject project);"},
 {"id":2717, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.document.DocumentManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.document.DocumentManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public ProjectUIFacadeImpl(UIFacade workbenchFacade, DocumentManager documentManager, GPUndoManager undoManager) {\r\n    myWorkbenchFacade = workbenchFacade;\r\n    myDocumentManager = documentManager;\r\n    myUndoManager = undoManager;\r\n}"},
 {"id":2718, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.-init-()", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"1() {\r\n}"},
 {"id":2719, "name":"afterSaveProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.afterSaveProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"private void afterSaveProject(IGanttProject project) {\r\n    Document document = project.getDocument();\r\n    myDocumentManager.addToRecentDocuments(document);\r\n    String title = (((i18n.getText(\"appliTitle\")) + \" [\") + (document.getDescription())) + \"]\";\r\n    myWorkbenchFacade.setWorkbenchTitle(title);\r\n    if (document.isLocal()) {\r\n        URI url = document.getURI();\r\n        if (url != null) {\r\n            File file = new File(url);\r\n            if (file != null) {\r\n                myDocumentManager.changeWorkingDirectory(file.getParentFile());\r\n            }\r\n        }\r\n    }\r\n    project.setModified(false);\r\n}"},
 {"id":2720, "name":"beforeClose()", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.beforeClose()", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"private void beforeClose() {\r\n    myWorkbenchFacade.setWorkbenchTitle(i18n.getText(\"appliTitle\"));\r\n    getUndoManager().die();\r\n}"},
 {"id":2721, "name":"createProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.createProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public void createProject(final IGanttProject project) {\r\n    if (false == (ensureProjectSaved(project))) {\r\n        return;\r\n    }\r\n    getUndoManager().undoableEdit(\"Init new Project\", new Runnable() {\r\n        public void run() {\r\n            beforeClose();\r\n            project.close();\r\n            myWorkbenchFacade.setStatusText(i18n.getText(\"newProject2\"));\r\n            showNewProjectWizard(project);\r\n        }\r\n    });\r\n}"},
 {"id":2722, "name":"ensureProjectSaved(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.ensureProjectSaved(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"private boolean ensureProjectSaved(IGanttProject project) {\r\n    if (project.isModified()) {\r\n        UIFacade.Choice saveChoice = myWorkbenchFacade.showConfirmationDialog(i18n.getText(\"msg1\"), i18n.getText(\"warning\"));\r\n        if ((UIFacade.Choice.CANCEL) == saveChoice) {\r\n            return false;\r\n        }\r\n        if ((UIFacade.Choice.YES) == saveChoice) {\r\n            try {\r\n                saveProject(project);\r\n            } catch (Exception e) {\r\n                System.err.println(e);\r\n                myWorkbenchFacade.showErrorDialog(e);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"},
 {"id":2723, "name":"getDocumentManager()", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.getDocumentManager()", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"private DocumentManager getDocumentManager() {\r\n    return myDocumentManager;\r\n}"},
 {"id":2724, "name":"getOptionGroup()", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.getOptionGroup()", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public GPOptionGroup getOptionGroup() {\r\n    return myDocumentManager.getOptionGroup();\r\n}"},
 {"id":2725, "name":"getUndoManager()", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.getUndoManager()", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"private GPUndoManager getUndoManager() {\r\n    return myUndoManager;\r\n}"},
 {"id":2726, "name":"openProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.openProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public void openProject(final IGanttProject project) throws IOException {\r\n    if (false == (ensureProjectSaved(project))) {\r\n        return;\r\n    }\r\n    JFileChooser fc = new JFileChooser(myDocumentManager.getWorkingDirectory());\r\n    FileFilter ganttFilter = new GanttXMLFileFilter();\r\n    // Remove the possibility to use a file filter for all files\r\n    FileFilter[] filefilters = fc.getChoosableFileFilters();\r\n    for (int i = 0; i < (filefilters.length); i++) {\r\n        fc.removeChoosableFileFilter(filefilters[i]);\r\n    }\r\n    fc.addChoosableFileFilter(ganttFilter);\r\n    int returnVal = fc.showOpenDialog(myWorkbenchFacade.getMainFrame());\r\n    if (returnVal == (JFileChooser.APPROVE_OPTION)) {\r\n        final JFileChooser jfc = fc;\r\n        Document document = getDocumentManager().getDocument(jfc.getSelectedFile().getAbsolutePath());\r\n        openProject(document, project);\r\n    }\r\n}"},
 {"id":2727, "name":"openProject(net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.openProject(net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public void openProject(final Document document, final IGanttProject project) throws IOException {\r\n    beforeClose();\r\n    project.close();\r\n    project.open(document);\r\n}"},
 {"id":2728, "name":"openRemoteProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.openRemoteProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public void openRemoteProject(final IGanttProject project) throws IOException {\r\n    final Document document = showURLDialog(project);\r\n    if (document != null) {\r\n        openProject(document, project);\r\n    }\r\n}"},
 {"id":2729, "name":"saveProject(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.saveProject(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public void saveProject(IGanttProject project) {\r\n    if ((project.getDocument()) == null) {\r\n        saveProjectAs(project);\r\n        return;\r\n    }\r\n    Document document = project.getDocument();\r\n    if (!(document.canWrite())) {\r\n        myWorkbenchFacade.showErrorDialog(i18n.getText(\"msg10\"));\r\n        saveProjectAs(project);\r\n        return;\r\n    }\r\n    if (!(document.acquireLock())) {\r\n        myWorkbenchFacade.showErrorDialog(i18n.getText(\"msg14\"));\r\n        saveProjectAs(project);\r\n        return;\r\n    }\r\n    try {\r\n        saveProject(project.getDocument());\r\n        afterSaveProject(project);\r\n    } catch (Throwable e) {\r\n        myWorkbenchFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":2730, "name":"saveProject(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.saveProject(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"private void saveProject(Document document) throws IOException {\r\n    // assert document!=null;\r\n    myWorkbenchFacade.setStatusText((((GanttLanguage.getInstance().getText(\"saving\")) + \" \") + (document.getPath())));\r\n    document.write();\r\n}"},
 {"id":2731, "name":"saveProjectAs(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.saveProjectAs(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public void saveProjectAs(IGanttProject project) {\r\n    /* if (project.getDocument() instanceof AbstractURLDocument) {\n    saveProjectRemotely(project);\n    return;\n    }\n     */\r\n    JFileChooser fc = new JFileChooser(myDocumentManager.getWorkingDirectory());\r\n    FileFilter ganttFilter = new GanttXMLFileFilter();\r\n    fc.addChoosableFileFilter(ganttFilter);\r\n    // Remove the possibility to use a file filter for all files\r\n    FileFilter[] filefilters = fc.getChoosableFileFilters();\r\n    for (int i = 0; i < (filefilters.length); i++) {\r\n        if ((filefilters[i]) != ganttFilter) {\r\n            fc.removeChoosableFileFilter(filefilters[i]);\r\n        }\r\n    }\r\n    try {\r\n        for (; ;) {\r\n            int userChoice = fc.showSaveDialog(myWorkbenchFacade.getMainFrame());\r\n            if (userChoice != (JFileChooser.APPROVE_OPTION)) {\r\n                break;\r\n            }\r\n            File projectfile = fc.getSelectedFile();\r\n            String extension = FileUtil.getExtension(projectfile).toLowerCase();\r\n            if ((!(\"gan\".equals(extension))) && (!(\"xml\".equals(extension)))) {\r\n                projectfile = FileUtil.replaceExtension(projectfile, \"gan\");\r\n            }\r\n            if (projectfile.exists()) {\r\n                UIFacade.Choice overwritingChoice = myWorkbenchFacade.showConfirmationDialog(((projectfile + \"\n\") + (i18n.getText(\"msg18\"))), i18n.getText(\"warning\"));\r\n                if (overwritingChoice != (UIFacade.Choice.YES)) {\r\n                    continue;\r\n                }\r\n            }\r\n            Document document = myDocumentManager.getDocument(projectfile.getAbsolutePath());\r\n            saveProject(document);\r\n            project.setDocument(document);\r\n            afterSaveProject(project);\r\n            break;\r\n        }\r\n    } catch (Throwable e) {\r\n        myWorkbenchFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":2732, "name":"saveProjectRemotely(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.saveProjectRemotely(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"public void saveProjectRemotely(IGanttProject project) {\r\n    Document document = showURLDialog(project);\r\n    if (document != null) {\r\n        project.setDocument(document);\r\n        saveProject(project);\r\n    }\r\n}"},
 {"id":2733, "name":"showNewProjectWizard(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.showNewProjectWizard(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"private void showNewProjectWizard(IGanttProject project) {\r\n    NewProjectWizard wizard = new NewProjectWizard();\r\n    wizard.createNewProject(project, myWorkbenchFacade);\r\n}"},
 {"id":2734, "name":"showURLDialog(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.showURLDialog(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"318", "ownerclassname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "sourcecode":"private Document showURLDialog(IGanttProject project) {\r\n    Document document = project.getDocument();\r\n    GanttURLChooser uc = new GanttURLChooser(myWorkbenchFacade.getMainFrame(), false, (null != document ? document.getURLPath() : myDocumentManager.getLastWebDAVDocumentOption().getValue()), (null != document ? document.getUsername() : null), (null != document ? document.getPassword() : null));\r\n    uc.show();\r\n    if (uc.change) {\r\n        document = myDocumentManager.getDocument(uc.fileurl, uc.userName, uc.password);\r\n        myDocumentManager.getLastWebDAVDocumentOption().lock();\r\n        myDocumentManager.getLastWebDAVDocumentOption().setValue(uc.fileurl);\r\n        myDocumentManager.getLastWebDAVDocumentOption().commit();\r\n    } else {\r\n        document = null;\r\n    }\r\n    return document;\r\n}"},
 {"id":2735, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.-init-(java.lang.String)", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":2736, "name":"-init-(java.lang.String,java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.-init-(java.lang.String,java.lang.String[])", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"3( $anonymous0,  $anonymous1) {\r\n}"},
 {"id":2737, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.resource.ResourceColumn)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.resource.ResourceColumn)", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"public ResourceDialogCustomColumn(UIFacade uiFacade, ResourceColumn col) {\r\n    myUIFacade = uiFacade;\r\n    resourceColumn = col;\r\n    myOptionGroup.lock();\r\n    myDate.lock();\r\n    myOptionGroup.setTitled(false);\r\n}"},
 {"id":2738, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.-init-()", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"4() {\r\n}"},
 {"id":2739, "name":"getColumn()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.getColumn()", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"public ResourceColumn getColumn() {\r\n    return this.resourceColumn;\r\n}"},
 {"id":2740, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.getComponent()", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"private Component getComponent() {\r\n    JPanel result = new JPanel();\r\n    GridBagConstraints constraints = new GridBagConstraints();\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    labelDefaultValue = new JLabel(((ResourceDialogCustomColumn.language.getText(\"defaultValue\")) + \": \"));\r\n    {\r\n        // Text\r\n        textArea = new JTextArea();\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setLineWrap(true);\r\n        textArea.setColumns(25);\r\n        textArea.setRows(5);\r\n        JScrollPane jsp = new JScrollPane(textArea);\r\n        panelText = new JPanel(new BorderLayout());\r\n        panelText.add(jsp, BorderLayout.CENTER);\r\n    }\r\n    {\r\n        // Boolean\r\n        radioTrue = new JRadioButton(ResourceDialogCustomColumn.language.getText(\"yes\"));\r\n        radioFalse = new JRadioButton(ResourceDialogCustomColumn.language.getText(\"no\"));\r\n        ButtonGroup group = new ButtonGroup();\r\n        group.add(radioFalse);\r\n        group.add(radioTrue);\r\n        radioTrue.setSelected(true);\r\n        panelBoolean = new JPanel(new GridBagLayout());\r\n        constraints.gridx = 0;\r\n        constraints.gridy = 0;\r\n        panelBoolean.add(radioTrue, constraints);\r\n        constraints.gridx = 0;\r\n        constraints.gridy = 1;\r\n        panelBoolean.add(radioFalse, constraints);\r\n    }\r\n    {\r\n        // Integer\r\n        fieldInteger = new GTextField();\r\n        fieldInteger.setPattern(GTextField.PATTERN_INTEGER);\r\n        fieldInteger.setColumns(10);\r\n        panelInteger = new JPanel(new GridBagLayout());\r\n        constraints = new GridBagConstraints();\r\n        constraints.gridx = 0;\r\n        constraints.gridy = 0;\r\n        panelInteger.add(fieldInteger, constraints);\r\n    }\r\n    {\r\n        // Double\r\n        fieldDouble = new GTextField();\r\n        fieldDouble.setPattern(GTextField.PATTERN_DOUBLE);\r\n        fieldDouble.setColumns(10);\r\n        panelDouble = new JPanel(new GridBagLayout());\r\n        constraints = new GridBagConstraints();\r\n        constraints.gridx = 0;\r\n        constraints.gridy = 0;\r\n        panelDouble.add(fieldDouble, constraints);\r\n    }\r\n    {\r\n        panelDate = builder.createStandaloneOptionPanel(myDate);\r\n        cardLayoutDefaultValue = new CardLayout();\r\n        panelDefaultValue = new JPanel(cardLayoutDefaultValue);\r\n        panelDefaultValue.add(ResourceDialogCustomColumn.cardText, panelText);\r\n        panelDefaultValue.add(ResourceDialogCustomColumn.cardBoolean, panelBoolean);\r\n        panelDefaultValue.add(ResourceDialogCustomColumn.cardInteger, panelInteger);\r\n        panelDefaultValue.add(ResourceDialogCustomColumn.cardDouble, panelDouble);\r\n        panelDefaultValue.add(ResourceDialogCustomColumn.cardDate, panelDate);\r\n    }\r\n    Component optionsComponent = builder.buildPlanePage(new GPOptionGroup[]{ myOptionGroup });\r\n    result.setLayout(new BorderLayout());\r\n    result.add(optionsComponent, BorderLayout.CENTER);\r\n    result.add(panelDefaultValue, BorderLayout.SOUTH);\r\n    return result;\r\n}// TODO change the default value for custom columns.\r\n"},
 {"id":2741, "name":"getSelectedType(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.getSelectedType(java.lang.String)", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"private int getSelectedType(String typeName) {\r\n    for (int i = 0; i < (ResourceDialogCustomColumn.availableTypes.length); i++) {\r\n        if (ResourceDialogCustomColumn.availableTypes[i].equals(typeName)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"},
 {"id":2742, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.getUIFacade()", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"private UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":2743, "name":"isOk()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.isOk()", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"public boolean isOk() {\r\n    return isOk;\r\n}"},
 {"id":2744, "name":"ok()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.ok()", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"private void ok() {\r\n    Mediator.getGanttProjectSingleton().setAskForSave(true);\r\n    // String colName = fieldName.getText().trim();\r\n    String colName = myName.getValue();\r\n    Object defValue = null;\r\n    if ((colName.length()) != 0) {\r\n        Class colClass;\r\n        int colType = getSelectedType(myType.getValue());\r\n        switch (colType) {\r\n            case 0 :\r\n                colClass = String.class;\r\n                defValue = textArea.getText();\r\n                break;\r\n            case 1 :\r\n                colClass = Integer.class;\r\n                String ti = fieldInteger.getText();\r\n                if ((ti.trim().length()) == 0)\r\n                    ti = \"0\";\r\n\r\n                defValue = new Integer(Integer.parseInt(ti));\r\n                break;\r\n            case 2 :\r\n                colClass = Double.class;\r\n                String td = fieldDouble.getText();\r\n                if ((td.trim().length()) == 0)\r\n                    td = \"0.0\";\r\n\r\n                defValue = new Double(Double.parseDouble(td));\r\n                break;\r\n            case 3 :\r\n                colClass = GregorianCalendar.class;\r\n                if ((myDate.getValue()) == null)\r\n                    defValue = new GanttCalendar();\r\n                else\r\n                    defValue = new GanttCalendar(myDate.getValue());\r\n\r\n                break;\r\n            case 4 :\r\n                colClass = Boolean.class;\r\n                defValue = new Boolean(radioTrue.isSelected());\r\n                break;\r\n            default :\r\n                // normally never reached.\r\n                colClass = String.class;\r\n                defValue = \"default\";\r\n        }\r\n        if ((resourceColumn) != null) {\r\n            resourceColumn.setTitle(colName);\r\n            resourceColumn.setType(colClass);\r\n            resourceColumn.setDefaultVal(defValue);\r\n        }\r\n        isOk = true;\r\n    }/* else\n    {\n    fieldName.requestFocus();\n    // nothing (the dialog stays opened)\n    }\n     */\r\n\r\n}"},
 {"id":2745, "name":"setVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.setVisible(boolean)", "ownerclassid":"319", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "sourcecode":"public void setVisible(boolean visible) {\r\n    Component rootComponent = getComponent();\r\n    getUIFacade().showDialog(rootComponent, new Action[]{ new OkAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            myOptionGroup.commit();\r\n            myDate.commit();\r\n            ResourceDialogCustomColumn.this.ok();\r\n        }\r\n    }, new CancelAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            myOptionGroup.rollback();\r\n            myDate.rollback();\r\n        }\r\n    } });\r\n}"},
 {"id":2746, "name":"getMoveDownAction()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade.getMoveDownAction()", "ownerclassid":"320", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade", "sourcecode":"Action getMoveDownAction();"},
 {"id":2747, "name":"getMoveUpAction()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade.getMoveUpAction()", "ownerclassid":"320", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade", "sourcecode":"Action getMoveUpAction();"},
 {"id":2748, "name":"getUIComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade.getUIComponent()", "ownerclassid":"320", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade", "sourcecode":"Component getUIComponent();"},
 {"id":2749, "name":"getVisibleFields()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade.getVisibleFields()", "ownerclassid":"320", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade", "sourcecode":"TableHeaderUIFacade getVisibleFields();"},
 {"id":2750, "name":"-init-(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.-init-(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"public ResourcesTableModel(ResourceAssignmentCollection assignmentCollection) {\r\n    myAssignmentCollection = assignmentCollection;\r\n    myAssignments = new ArrayList(Arrays.asList(assignmentCollection.getAssignments()));\r\n    myMutator = assignmentCollection.createMutator();\r\n}"},
 {"id":2751, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.commit()", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"void commit() {\r\n    myMutator.commit();\r\n}"},
 {"id":2752, "name":"createAssignment(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.createAssignment(java.lang.Object)", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"private void createAssignment(Object value) {\r\n    if (value instanceof ProjectResource) {\r\n        ResourceAssignment newAssignment = myMutator.addAssignment(((ProjectResource) (value)));\r\n        newAssignment.setLoad(100);\r\n        boolean coord = false;\r\n        if (myAssignments.isEmpty())\r\n            coord = true;\r\n\r\n        newAssignment.setCoordinator(coord);\r\n        if ((newAssignment.getResource()) instanceof HumanResource)\r\n            newAssignment.setRoleForAssignment(((HumanResource) (newAssignment.getResource())).getRole());\r\n\r\n        myAssignments.add(newAssignment);\r\n        fireTableRowsInserted(myAssignments.size(), myAssignments.size());\r\n    }\r\n}"},
 {"id":2753, "name":"getColumnClass(int)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.getColumnClass(int)", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"/* JTable uses this method to determine the default renderer/ editor for\neach cell. If we didnt implement this method, then the last column would\ncontain text (\"true\"/\"false\"), rather than a check box.\n */\r\npublic Class getColumnClass(int c) {\r\n    // if (c == 0 || c == 2) {\r\n    // return String.class;\r\n    // } else {\r\n    // return HumanResource.class;\r\n    // }\r\n    switch (c) {\r\n        case 0 :\r\n        case 2 :\r\n            return String.class;\r\n        case 1 :\r\n            return HumanResource.class;\r\n        case 3 :\r\n            return Boolean.class;\r\n        case 4 :\r\n            return Role.class;\r\n        default :\r\n            return String.class;\r\n    }\r\n}"},
 {"id":2754, "name":"getColumnCount()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.getColumnCount()", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"/**\r\n * Return the number of colums\r\n */\r\npublic int getColumnCount() {\r\n    return columnNames.length;\r\n}"},
 {"id":2755, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.getColumnName(int)", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"/**\r\n * Return the name of the column at col index\r\n */\r\npublic String getColumnName(int col) {\r\n    return columnNames[col];\r\n}"},
 {"id":2756, "name":"getResourcesAssignments()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.getResourcesAssignments()", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"public List getResourcesAssignments() {\r\n    return myAssignments;\r\n}"},
 {"id":2757, "name":"getRowCount()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.getRowCount()", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"/**\r\n * Return the number of rows\r\n */\r\npublic int getRowCount() {\r\n    return (myAssignments.size()) + 1;\r\n}"},
 {"id":2758, "name":"getValueAt(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.getValueAt(int,int)", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"/**\r\n * Return the object a specify cell\r\n */\r\npublic Object getValueAt(int row, int col) {\r\n    Object result;\r\n    if (row >= 0) {\r\n        if (row < (myAssignments.size())) {\r\n            ResourceAssignment assignment = ((ResourceAssignment) (myAssignments.get(row)));\r\n            switch (col) {\r\n                case 0 :\r\n                    result = String.valueOf(assignment.getResource().getId());\r\n                    break;\r\n                case 1 :\r\n                    result = assignment.getResource();\r\n                    break;\r\n                case 2 :\r\n                    result = String.valueOf(assignment.getLoad());\r\n                    break;\r\n                case 3 :\r\n                    result = new Boolean(assignment.isCoordinator());\r\n                    break;\r\n                case 4 :\r\n                    result = assignment.getRoleForAssignment();\r\n                    break;\r\n                default :\r\n                    result = \"\";\r\n            }\r\n        } else {\r\n            result = \"\";\r\n        }\r\n    } else {\r\n        throw new IllegalArgumentException((\"I cant return data in row=\" + row));\r\n    }\r\n    return result;\r\n}"},
 {"id":2759, "name":"isCellEditable(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.isCellEditable(int,int)", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"public boolean isCellEditable(int row, int col) {\r\n    boolean result = col > 0;\r\n    if (result) {\r\n        result = ((col == 2 ? row < (myAssignments.size()) : row <= (myAssignments.size())) || (col == 3)) || (col == 4);\r\n    }\r\n    return result;\r\n}"},
 {"id":2760, "name":"isChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.isChanged()", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"public boolean isChanged() {\r\n    return isChanged;\r\n}"},
 {"id":2761, "name":"setValueAt(java.lang.Object,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.setValueAt(java.lang.Object,int,int)", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"/* Dont need to implement this method unless your tables data can change. */\r\npublic void setValueAt(Object value, int row, int col) {\r\n    if (row >= 0) {\r\n        if (row >= (myAssignments.size())) {\r\n            createAssignment(value);\r\n        } else {\r\n            updateAssignment(value, row, col);\r\n        }\r\n    } else {\r\n        throw new IllegalArgumentException((\"I cant set data in row=\" + row));\r\n    }\r\n    isChanged = true;\r\n    // fireTableCellUpdated(row, col);\r\n}"},
 {"id":2762, "name":"updateAssignment(java.lang.Object,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.ResourcesTableModel.updateAssignment(java.lang.Object,int,int)", "ownerclassid":"321", "ownerclassname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "sourcecode":"private void updateAssignment(Object value, int row, int col) {\r\n    ResourceAssignment updateTarget = ((ResourceAssignment) (myAssignments.get(row)));\r\n    switch (col) {\r\n        case 4 :\r\n            {\r\n                updateTarget.setRoleForAssignment(((Role) (value)));\r\n                break;\r\n            }\r\n        case 3 :\r\n            {\r\n                updateTarget.setCoordinator(((Boolean) (value)).booleanValue());\r\n                break;\r\n            }\r\n        case 2 :\r\n            {\r\n                float loadAsFloat = Float.parseFloat(String.valueOf(value));\r\n                updateTarget.setLoad(loadAsFloat);\r\n                break;\r\n            }\r\n        case 1 :\r\n            {\r\n                if (value == null) {\r\n                    updateTarget.delete();\r\n                    myAssignments.remove(row);\r\n                    fireTableRowsDeleted(row, row);\r\n                } else\r\n                    if (value instanceof ProjectResource) {\r\n                        float load = updateTarget.getLoad();\r\n                        boolean coord = updateTarget.isCoordinator();\r\n                        updateTarget.delete();\r\n                        ResourceAssignment newAssignment = myMutator.addAssignment(((ProjectResource) (value)));\r\n                        newAssignment.setLoad(load);\r\n                        newAssignment.setCoordinator(coord);\r\n                        myAssignments.set(row, newAssignment);\r\n                    }\r\n\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n}"},
 {"id":2763, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.-init-()", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic RolesTableModel() {\r\n    myRoleManager = RoleManager.Access.getInstance();\r\n    Role[] roles = getRoleManager().getProjectLevelRoles();\r\n    int i;\r\n    for (i = 0; i < (roles.length); i++)\r\n        data[i] = new Object[]{ String.valueOf(i), roles[i].getName() };\r\n\r\n    for (int j = i; j < (data.length); j++) {\r\n        data[j] = new Object[2];// {\"\", \"\"};\r\n\r\n    }\r\n}"},
 {"id":2764, "name":"applyChanges()", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.applyChanges()", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"public void applyChanges() {\r\n    getRoleManager().getProjectRoleSet().clear();\r\n    for (int i = 0; i < (getRowCount()); i++) {\r\n        String nextRoleName = ((String) (getValueAt(i, 1)));\r\n        if (nextRoleName != null) {\r\n            getRoleManager().add(i, nextRoleName);\r\n        }\r\n    }\r\n}"},
 {"id":2765, "name":"getColumnCount()", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.getColumnCount()", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"/**\r\n * Return the number of colums\r\n */\r\npublic int getColumnCount() {\r\n    return columnNames.length;\r\n}"},
 {"id":2766, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.getColumnName(int)", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"/**\r\n * Return the name of the column at col index\r\n */\r\npublic String getColumnName(int col) {\r\n    return columnNames[col];\r\n}"},
 {"id":2767, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.getRoleManager()", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"public RoleManager getRoleManager() {\r\n    return myRoleManager;\r\n}"},
 {"id":2768, "name":"getRowCount()", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.getRowCount()", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"/**\r\n * Return the number of rows\r\n */\r\npublic int getRowCount() {\r\n    return data.length;\r\n}"},
 {"id":2769, "name":"getValueAt(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.getValueAt(int,int)", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"/**\r\n * Return the object a specify cell\r\n */\r\npublic Object getValueAt(int row, int col) {\r\n    return data[row][col];\r\n}"},
 {"id":2770, "name":"hasChanges()", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.hasChanges()", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"public boolean hasChanges() {\r\n    Role[] roles = getRoleManager().getProjectLevelRoles();\r\n    for (int i = 0; i < (getRowCount()); i++) {\r\n        String nextRoleName = ((String) (getValueAt(i, 1)));\r\n        if (nextRoleName != null) {\r\n            if (i >= (roles.length))\r\n                return true;\r\n\r\n            if (!(nextRoleName.equals(roles[i].getName())))\r\n                return true;\r\n\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":2771, "name":"isCellEditable(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.isCellEditable(int,int)", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"/* JTable uses this method to determine the default renderer/ editor for\neach cell. If we didnt implement this method, then the last column would\ncontain text (\"true\"/\"false\"), rather than a check box.\n */\r\n/* public Class getColumnClass(int c) { if (c == 0 || c == 2) { return new\nString().getClass(); } else { return new HumanResource().getClass(); } //\nreturn getValueAt(0, c).getClass(); }\n */\r\npublic boolean isCellEditable(int row, int col) {\r\n    return col == 1;\r\n}"},
 {"id":2772, "name":"setValueAt(java.lang.Object,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.RolesTableModel.setValueAt(java.lang.Object,int,int)", "ownerclassid":"322", "ownerclassname":"net.sourceforge.ganttproject.gui.RolesTableModel", "sourcecode":"/* Dont need to implement this method unless your tables data can change. */\r\npublic void setValueAt(Object value, int row, int col) {\r\n    data[row][col] = value;\r\n    fireTableCellUpdated(row, col);\r\n}"},
 {"id":2773, "name":"add(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade.add(java.lang.String,int,int)", "ownerclassid":"324", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "sourcecode":"void add(String name, int order, int width);"},
 {"id":2774, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade.clear()", "ownerclassid":"324", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "sourcecode":"void clear();"},
 {"id":2775, "name":"getField(int)", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade.getField(int)", "ownerclassid":"324", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "sourcecode":"TableHeaderUIFacade.Column getField(int index);"},
 {"id":2776, "name":"getSize()", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade.getSize()", "ownerclassid":"324", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "sourcecode":"int getSize();"},
 {"id":2777, "name":"importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "ownerclassid":"324", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "sourcecode":"void importData(TableHeaderUIFacade source);"},
 {"id":2778, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column.getID()", "ownerclassid":"323", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column", "sourcecode":"String getID();"},
 {"id":2779, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column.getName()", "ownerclassid":"323", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column", "sourcecode":"String getName();"},
 {"id":2780, "name":"getOrder()", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column.getOrder()", "ownerclassid":"323", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column", "sourcecode":"int getOrder();"},
 {"id":2781, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column.getWidth()", "ownerclassid":"323", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column", "sourcecode":"int getWidth();"},
 {"id":2782, "name":"isVisible()", "fullmethod":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column.isVisible()", "ownerclassid":"323", "ownerclassname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade$Column", "sourcecode":"boolean isVisible();"},
 {"id":2783, "name":"getSelectedTasks()", "fullmethod":"net.sourceforge.ganttproject.gui.TaskSelectionContext.getSelectedTasks()", "ownerclassid":"325", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskSelectionContext", "sourcecode":"List getSelectedTasks();"},
 {"id":2784, "name":"getIndentAction()", "fullmethod":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade.getIndentAction()", "ownerclassid":"326", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "sourcecode":"Action getIndentAction();"},
 {"id":2785, "name":"getMoveDownAction()", "fullmethod":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade.getMoveDownAction()", "ownerclassid":"326", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "sourcecode":"Action getMoveDownAction();"},
 {"id":2786, "name":"getMoveUpAction()", "fullmethod":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade.getMoveUpAction()", "ownerclassid":"326", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "sourcecode":"Action getMoveUpAction();"},
 {"id":2787, "name":"getTreeComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade.getTreeComponent()", "ownerclassid":"326", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "sourcecode":"Component getTreeComponent();"},
 {"id":2788, "name":"getUnindentAction()", "fullmethod":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade.getUnindentAction()", "ownerclassid":"326", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "sourcecode":"Action getUnindentAction();"},
 {"id":2789, "name":"getVisibleFields()", "fullmethod":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade.getVisibleFields()", "ownerclassid":"326", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "sourcecode":"TableHeaderUIFacade getVisibleFields();"},
 {"id":2790, "name":"setLinkTasksAction(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade.setLinkTasksAction(javax.swing.Action)", "ownerclassid":"326", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "sourcecode":"void setLinkTasksAction(Action action);"},
 {"id":2791, "name":"setUnlinkTasksAction(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade.setUnlinkTasksAction(javax.swing.Action)", "ownerclassid":"326", "ownerclassname":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "sourcecode":"void setUnlinkTasksAction(Action unlinkAction);"},
 {"id":2792, "name":"-init-(javax.swing.Action)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.-init-(javax.swing.Action)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public TestGanttRolloverButton(Action action) {\r\n    this();\r\n    setAction(action);\r\n    Icon smallIcon = ((Icon) (action.getValue(Action.SMALL_ICON)));\r\n    if (smallIcon != null) {\r\n        setIcon(smallIcon);\r\n        _iconOff = smallIcon;\r\n        myIcon = smallIcon;\r\n    }\r\n    if (action instanceof RolloverAction) {\r\n        _iconOn = ((RolloverAction) (action)).getIconOnMouseOver();\r\n    }\r\n}"},
 {"id":2793, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.-init-()", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"/**\r\n * Setup the border (invisible initially)\r\n */\r\npublic TestGanttRolloverButton() {\r\n    setBorder(new EtchedBorder());\r\n    setBorderPainted(false);\r\n    setMargin(new Insets(0, 0, 0, 0));\r\n    setRequestFocusEnabled(false);\r\n    addMouseListener(new TestGanttRolloverButton.MouseOverHandler());\r\n    addMouseListener(new TestGanttRolloverButton.AutoRepeatHandler());\r\n    setHorizontalTextPosition(SwingConstants.CENTER);\r\n    setVerticalTextPosition(SwingConstants.BOTTOM);\r\n}"},
 {"id":2794, "name":"-init-(javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.-init-(javax.swing.Icon)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"/**\r\n * Setup the border (invisible initially)\r\n */\r\npublic TestGanttRolloverButton(Icon icon) {\r\n    this();\r\n    setIcon(icon);\r\n    _iconOn = icon;\r\n    myIcon = icon;\r\n}"},
 {"id":2795, "name":"-init-(javax.swing.Icon,javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.-init-(javax.swing.Icon,javax.swing.Icon)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"/**\r\n * Setup the border (invisible initially)\r\n */\r\nprivate TestGanttRolloverButton(Icon iconOn, Icon iconOff) {\r\n    this();\r\n    setIcon(iconOff);\r\n    _iconOn = iconOn;\r\n    _iconOff = iconOff;\r\n}"},
 {"id":2796, "name":"-init-(javax.swing.Icon,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.-init-(javax.swing.Icon,java.lang.String)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"/**\r\n * Setup the border (invisible initially)\r\n */\r\npublic TestGanttRolloverButton(Icon icon, String text) {\r\n    this();\r\n    setIcon(icon);\r\n    _iconOn = icon;\r\n    setText(text);\r\n}"},
 {"id":2797, "name":"-init-(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.-init-(java.awt.event.MouseEvent)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"Worker(MouseEvent e) {\r\n    myEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, getActionCommand(), EventQueue.getMostRecentEventTime(), e.getModifiers());\r\n}"},
 {"id":2798, "name":"isOpaque()", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.isOpaque()", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public boolean isOpaque() {\r\n    return false;\r\n}"},
 {"id":2799, "name":"paint(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.paint(java.awt.Graphics)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public void paint(Graphics g) {\r\n    if (isEnabled()) {\r\n        super.paint(g);\r\n    } else {\r\n        Graphics2D g2 = ((Graphics2D) (g));\r\n        g2.setComposite(TestGanttRolloverButton.c);\r\n        super.paint(g2);\r\n    }\r\n}"},
 {"id":2800, "name":"setAutoRepeatMousePressedEvent(int)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.setAutoRepeatMousePressedEvent(int)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public void setAutoRepeatMousePressedEvent(int milliseconds) {\r\n    myAutoRepeatMilliseconds = milliseconds;\r\n}"},
 {"id":2801, "name":"setDefaultIcon(javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.setDefaultIcon(javax.swing.Icon)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public void setDefaultIcon(Icon iconOn) {\r\n    setIcon(iconOn);\r\n    _iconOn = iconOn;\r\n}"},
 {"id":2802, "name":"setEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.setEnabled(boolean)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public void setEnabled(boolean b) {\r\n    super.setEnabled(b);\r\n    setBorderPainted(false);\r\n    repaint();\r\n}"},
 {"id":2803, "name":"setIcon(javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.setIcon(javax.swing.Icon)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public void setIcon(Icon icon) {\r\n    Action a = getAction();\r\n    if (a != null) {\r\n        // a.putValue(Action.SMALL_ICON,icon);\r\n        _iconOn = icon;\r\n    }\r\n    super.setIcon(icon);\r\n}"},
 {"id":2804, "name":"setIcon(javax.swing.Icon,javax.swing.Icon)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.setIcon(javax.swing.Icon,javax.swing.Icon)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public void setIcon(Icon iconOn, Icon iconOff) {\r\n    setIcon(iconOff);\r\n    _iconOn = iconOn;\r\n    _iconOff = iconOff;\r\n}"},
 {"id":2805, "name":"setIconHidden(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.setIconHidden(boolean)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public void setIconHidden(boolean isHidden) {\r\n    if (isHidden) {\r\n        setDefaultIcon(null);\r\n    } else {\r\n        setDefaultIcon(myIcon);\r\n    }\r\n}"},
 {"id":2806, "name":"setTextHidden(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton.setTextHidden(boolean)", "ownerclassid":"330", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton", "sourcecode":"public void setTextHidden(boolean isHidden) {\r\n    if (isHidden) {\r\n        setText(\"\");\r\n    } else {\r\n        Action action = getAction();\r\n        if (action != null) {\r\n            setText(String.valueOf(action.getValue(Action.NAME)));\r\n        }\r\n    }\r\n}"},
 {"id":2807, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$AutoRepeatHandler.-init-()", "ownerclassid":"327", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$AutoRepeatHandler", "sourcecode":"AutoRepeatHandler() {\r\n}"},
 {"id":2808, "name":"mousePressed(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$AutoRepeatHandler.mousePressed(java.awt.event.MouseEvent)", "ownerclassid":"327", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$AutoRepeatHandler", "sourcecode":"public void mousePressed(MouseEvent e) {\r\n    if ((myAutoRepeatMilliseconds) > 0) {\r\n        myWorker = new TestGanttRolloverButton.Worker(e);\r\n        myWorker.start();\r\n    }\r\n}"},
 {"id":2809, "name":"mouseReleased(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$AutoRepeatHandler.mouseReleased(java.awt.event.MouseEvent)", "ownerclassid":"327", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$AutoRepeatHandler", "sourcecode":"public void mouseReleased(MouseEvent e) {\r\n    if ((myWorker) != null) {\r\n        myWorker.interrupt();\r\n        myWorker = null;\r\n    }\r\n}"},
 {"id":2810, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$MouseOverHandler.-init-()", "ownerclassid":"328", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$MouseOverHandler", "sourcecode":"MouseOverHandler() {\r\n}"},
 {"id":2811, "name":"mouseEntered(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$MouseOverHandler.mouseEntered(java.awt.event.MouseEvent)", "ownerclassid":"328", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$MouseOverHandler", "sourcecode":"public void mouseEntered(MouseEvent e) {\r\n    if (isEnabled()) {\r\n        setBorderPainted(true);\r\n        setIcon(_iconOn);\r\n    }\r\n}"},
 {"id":2812, "name":"mouseExited(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$MouseOverHandler.mouseExited(java.awt.event.MouseEvent)", "ownerclassid":"328", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$MouseOverHandler", "sourcecode":"public void mouseExited(MouseEvent e) {\r\n    setBorderPainted(false);\r\n    if ((getAction()) instanceof RolloverAction)\r\n        setIcon(((RolloverAction) (getAction())).getIconOnMouseOver());\r\n    else\r\n        if ((_iconOff) != null)\r\n            setIcon(_iconOff);\r\n\r\n\r\n}"},
 {"id":2813, "name":"-init-(java.awt.event.MouseEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$Worker.-init-(java.awt.event.MouseEvent)", "ownerclassid":"329", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$Worker", "sourcecode":"Worker(MouseEvent e) {\r\n    myEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, getActionCommand(), EventQueue.getMostRecentEventTime(), e.getModifiers());\r\n}"},
 {"id":2814, "name":"run()", "fullmethod":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$Worker.run()", "ownerclassid":"329", "ownerclassname":"net.sourceforge.ganttproject.gui.TestGanttRolloverButton$Worker", "sourcecode":"public void run() {\r\n    while (true) {\r\n        try {\r\n            Thread.sleep(myAutoRepeatMilliseconds);\r\n        } catch (InterruptedException e) {\r\n            break;\r\n        }\r\n        if (isInterrupted()) {\r\n            break;\r\n        }\r\n        getAction().actionPerformed(myEvent);\r\n    } \r\n}"},
 {"id":2815, "name":"-init-(java.awt.Component,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.-init-(java.awt.Component,java.lang.String)", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"public TextFieldAndFileChooserComponent(final Component parentComponent, String dialogCaption) {\r\n    myDialogCaption = dialogCaption;\r\n    myParentComponent = parentComponent;\r\n    initComponents();\r\n}"},
 {"id":2816, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.-init-(java.lang.String,java.lang.String)", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"public TextFieldAndFileChooserComponent(String label, String dialogCaption) {\r\n    Box innerBox = Box.createHorizontalBox();\r\n    innerBox.add(new JLabel(label));\r\n    innerBox.add(Box.createHorizontalStrut(2));\r\n    myParentComponent = innerBox;\r\n    myDialogCaption = dialogCaption;\r\n    initComponents();\r\n    innerBox.add(myComponent);\r\n    myComponent = innerBox;\r\n}"},
 {"id":2817, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.-init-()", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"1() {\r\n}"},
 {"id":2818, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.getComponent()", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"public Component getComponent() {\r\n    return myComponent;\r\n}"},
 {"id":2819, "name":"getFile()", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.getFile()", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"public File getFile() {\r\n    return myFile;\r\n}"},
 {"id":2820, "name":"initComponents()", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.initComponents()", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"private void initComponents() {\r\n    myChooserButton = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/open_16.gif\")));\r\n    myTextField = new JTextField();\r\n    myTextField.setColumns(40);\r\n    myTextField.setEditable(false);\r\n    Box box = Box.createHorizontalBox();\r\n    box.add(myTextField);\r\n    box.add(myChooserButton);\r\n    myComponent = box;\r\n    myChooserButton.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            showFileChooser();\r\n        }\r\n    });\r\n}"},
 {"id":2821, "name":"onFileChosen(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.onFileChosen(java.io.File)", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"protected void onFileChosen(File file) {\r\n    myFile = file;\r\n    myTextField.setText(myFile.getAbsolutePath());\r\n}"},
 {"id":2822, "name":"setFile(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.setFile(java.io.File)", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"public void setFile(File file) {\r\n    myFile = file;\r\n    myTextField.setText((file == null ? \"\" : file.getAbsolutePath()));\r\n}"},
 {"id":2823, "name":"setFileFilter(javax.swing.filechooser.FileFilter)", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.setFileFilter(javax.swing.filechooser.FileFilter)", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"public void setFileFilter(FileFilter filter) {\r\n    myFileFilter = filter;\r\n}"},
 {"id":2824, "name":"setFileSelectionMode(int)", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.setFileSelectionMode(int)", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"public void setFileSelectionMode(int mode) {\r\n    myFileSelectionMode = mode;\r\n}"},
 {"id":2825, "name":"showFileChooser()", "fullmethod":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent.showFileChooser()", "ownerclassid":"331", "ownerclassname":"net.sourceforge.ganttproject.gui.TextFieldAndFileChooserComponent", "sourcecode":"public void showFileChooser() {\r\n    System.out.println(myTextField.getText());\r\n    JFileChooser fc = new JFileChooser(new File(myTextField.getText()));\r\n    fc.setDialogTitle(myDialogCaption);\r\n    fc.setApproveButtonToolTipText(myDialogCaption);\r\n    fc.setFileSelectionMode(myFileSelectionMode);\r\n    // Remove the possibility to use a file filter for all files\r\n    FileFilter[] filefilters = fc.getChoosableFileFilters();\r\n    for (int i = 0; i < (filefilters.length); i++) {\r\n        fc.removeChoosableFileFilter(filefilters[i]);\r\n    }\r\n    fc.addChoosableFileFilter(myFileFilter);\r\n    int returnVal = fc.showDialog(myParentComponent, GanttLanguage.getInstance().getText(\"ok\"));\r\n    if (returnVal == (JFileChooser.APPROVE_OPTION)) {\r\n        onFileChosen(fc.getSelectedFile());\r\n    }\r\n}"},
 {"id":2826, "name":"-init-(javax.swing.JFrame,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.TipsDialog.-init-(javax.swing.JFrame,boolean)", "ownerclassid":"332", "ownerclassname":"net.sourceforge.ganttproject.gui.TipsDialog", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic TipsDialog(JFrame parent, boolean tips) {\r\n    super(parent, GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"tipsOfTheDay\")), false);\r\n    appli = ((GanttProject) (parent));\r\n    GanttLanguage lang = GanttLanguage.getInstance();\r\n    Vector vTips = new Vector();\r\n    String prefix = \"tips\";\r\n    int ind = 1;\r\n    boolean moreTips = !(lang.getText((prefix + ind)).startsWith(GanttLanguage.MISSING_RESOURCE));\r\n    while (moreTips) {\r\n        vTips.add(lang.getText((prefix + (ind++))));\r\n        moreTips = !(lang.getText((prefix + ind)).startsWith(GanttLanguage.MISSING_RESOURCE));\r\n    } \r\n    tipsText = new String[vTips.size()];\r\n    vTips.toArray(tipsText);\r\n    // tipsText = new String []{\r\n    // lang.getText(\"tips1\"), lang.getText(\"tips2\"), lang.getText(\"tips3\"),\r\n    // lang.getText(\"tips4\"),\r\n    // lang.getText(\"tips5\"), lang.getText(\"tips6\"), lang.getText(\"tips7\"),\r\n    // lang.getText(\"tips8\"),\r\n    // lang.getText(\"tips9\"), lang.getText(\"tips10\"),\r\n    // lang.getText(\"tips11\"),lang.getText(\"tips12\") ,\r\n    // lang.getText(\"tips13\"),lang.getText(\"tips14\"),\r\n    // lang.getText(\"tips15\"), lang.getText(\"tips16\")\r\n    // };\r\n    index = ((int) ((Math.random()) * (tipsText.length)));\r\n    pnPanel0 = new JPanel();\r\n    GridBagLayout gbPanel0 = new GridBagLayout();\r\n    GridBagConstraints gbcPanel0 = new GridBagConstraints();\r\n    pnPanel0.setLayout(gbPanel0);\r\n    // Light image\r\n    lbImg = new JLabel(new ImageIcon(getClass().getResource(\"/icons/info.png\")));\r\n    gbcPanel0.gridx = 0;\r\n    gbcPanel0.gridy = 0;\r\n    gbcPanel0.gridwidth = 1;\r\n    gbcPanel0.gridheight = 18;\r\n    gbcPanel0.fill = GridBagConstraints.VERTICAL;\r\n    gbcPanel0.weightx = 0;\r\n    gbcPanel0.weighty = 1;\r\n    gbcPanel0.anchor = GridBagConstraints.NORTH;\r\n    gbPanel0.setConstraints(lbImg, gbcPanel0);\r\n    pnPanel0.add(lbImg);\r\n    // The panel\r\n    taArea0 = new JTextPane();\r\n    taArea0.setPreferredSize(new Dimension(200, 150));\r\n    taArea0.setEditable(false);\r\n    // Set a random text !!\r\n    changeText(tipsText[index]);\r\n    gbcPanel0.gridx = 1;\r\n    gbcPanel0.gridy = 0;\r\n    gbcPanel0.gridwidth = 19;\r\n    gbcPanel0.gridheight = 18;\r\n    gbcPanel0.fill = GridBagConstraints.BOTH;\r\n    gbcPanel0.weightx = 1;\r\n    gbcPanel0.weighty = 1;\r\n    gbcPanel0.anchor = GridBagConstraints.NORTH;\r\n    JScrollPane scrollPane = new JScrollPane(taArea0);\r\n    gbPanel0.setConstraints(scrollPane, gbcPanel0);\r\n    pnPanel0.add(scrollPane);\r\n    // Close button,\r\n    btBut0 = new JButton(lang.getText(\"close\"));\r\n    gbcPanel0.gridx = 15;\r\n    gbcPanel0.gridy = 18;\r\n    gbcPanel0.gridwidth = 5;\r\n    gbcPanel0.gridheight = 2;\r\n    gbcPanel0.fill = GridBagConstraints.HORIZONTAL;\r\n    gbcPanel0.weightx = 1;\r\n    gbcPanel0.weighty = 0;\r\n    gbcPanel0.anchor = GridBagConstraints.NORTH;\r\n    gbPanel0.setConstraints(btBut0, gbcPanel0);\r\n    pnPanel0.add(btBut0);\r\n    // Next button\r\n    btBut1 = new JButton(lang.getText(\"next\"));\r\n    gbcPanel0.gridx = 10;\r\n    gbcPanel0.gridy = 18;\r\n    gbcPanel0.gridwidth = 5;\r\n    gbcPanel0.gridheight = 2;\r\n    gbcPanel0.fill = GridBagConstraints.HORIZONTAL;\r\n    gbcPanel0.weightx = 1;\r\n    gbcPanel0.weighty = 0;\r\n    gbcPanel0.anchor = GridBagConstraints.NORTH;\r\n    gbPanel0.setConstraints(btBut1, gbcPanel0);\r\n    pnPanel0.add(btBut1);\r\n    // Back button\r\n    btBut2 = new JButton(lang.getText(\"back\"));\r\n    gbcPanel0.gridx = 5;\r\n    gbcPanel0.gridy = 18;\r\n    gbcPanel0.gridwidth = 5;\r\n    gbcPanel0.gridheight = 2;\r\n    gbcPanel0.fill = GridBagConstraints.HORIZONTAL;\r\n    gbcPanel0.weightx = 1;\r\n    gbcPanel0.weighty = 0;\r\n    gbcPanel0.anchor = GridBagConstraints.NORTH;\r\n    gbPanel0.setConstraints(btBut2, gbcPanel0);\r\n    pnPanel0.add(btBut2);\r\n    // Checkbox for open in the futur on startup ??\r\n    cbBox0 = new JCheckBox(lang.getText(\"showTipsOnStartup\"), tips);\r\n    gbcPanel0.gridx = 0;\r\n    gbcPanel0.gridy = 18;\r\n    gbcPanel0.gridwidth = 5;\r\n    gbcPanel0.gridheight = 1;\r\n    gbcPanel0.fill = GridBagConstraints.HORIZONTAL;\r\n    gbcPanel0.weightx = 1;\r\n    gbcPanel0.weighty = 0;\r\n    gbcPanel0.anchor = GridBagConstraints.NORTH;\r\n    gbPanel0.setConstraints(cbBox0, gbcPanel0);\r\n    pnPanel0.add(cbBox0);\r\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n    JPanel mainPanel = new JPanel(new FlowLayout());\r\n    mainPanel.add(pnPanel0);\r\n    setContentPane(mainPanel);\r\n    // Listener for close event\r\n    btBut0.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            setVisible(false);\r\n            dispose();\r\n            appli.getOptions().setOpenTips(cbBox0.isSelected());\r\n        }\r\n    });\r\n    btBut1.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            index = ((index) + 1) % (tipsText.length);\r\n            changeText(tipsText[index]);\r\n        }\r\n    });\r\n    btBut2.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            (index)--;\r\n            if ((index) == (-1))\r\n                index = (tipsText.length) - 1;\r\n\r\n            changeText(tipsText[index]);\r\n        }\r\n    });\r\n    this.pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n}"},
 {"id":2827, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.TipsDialog.-init-()", "ownerclassid":"332", "ownerclassname":"net.sourceforge.ganttproject.gui.TipsDialog", "sourcecode":"1() {\r\n}"},
 {"id":2828, "name":"changeText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.TipsDialog.changeText(java.lang.String)", "ownerclassid":"332", "ownerclassname":"net.sourceforge.ganttproject.gui.TipsDialog", "sourcecode":"/**\r\n * Change the text on the Editor Pane\r\n */\r\npublic void changeText(String text) {\r\n    Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);\r\n    // Default style for text\r\n    Style regular = taArea0.addStyle(\"regular\", def);\r\n    StyleConstants.setFontSize(regular, 14);\r\n    StyleConstants.setFontFamily(def, \"SansSerif\");\r\n    // Bold style for \"Did you know ???\"\r\n    Style s = taArea0.addStyle(\"bold\", regular);\r\n    StyleConstants.setFontSize(s, 18);\r\n    StyleConstants.setItalic(s, true);\r\n    String[] initString = new String[]{ (GanttLanguage.getInstance().getText(\"didYouKnow\")) + \"\n\n\"// bold\r\n    , // \"Did\r\n    // you\r\n    // know??\"\r\n    text// regular \"the tips text\"\r\n     };\r\n    String[] initStyles = new String[]{ \"bold\", \"regular\" };\r\n    Document doc = new DefaultStyledDocument();\r\n    taArea0.cut();\r\n    // Insert text on the panel\r\n    try {\r\n        for (int i = 0; i < (initString.length); i++) {\r\n            doc.insertString(doc.getLength(), initString[i], taArea0.getStyle(initStyles[i]));\r\n        }\r\n        taArea0.setDocument(doc);\r\n    } catch (BadLocationException ble) {\r\n        System.err.println(\"Couldnt insert initial text.\");\r\n    }\r\n}"},
 {"id":2829, "name":"-init-(java.awt.Font,java.awt.Font,java.awt.Color,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.-init-(java.awt.Font,java.awt.Font,java.awt.Color,boolean)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public UIConfiguration(Font menuFont, Font chartMainFont, Color taskColor, boolean isRedlineOn) {\r\n    myMenuFont = (menuFont == null) ? Fonts.DEFAULT_MENU_FONT : menuFont;\r\n    myChartMainFont = (chartMainFont == null) ? Fonts.DEFAULT_CHART_FONT : chartMainFont;\r\n    this.isRedlineOn = isRedlineOn;\r\n    setTaskColor(taskColor);\r\n    myResColor = new Color(140, 182, 206);\r\n    myResOverColor = new Color(229, 50, 50);\r\n    myResUnderColor = new Color(50, 229, 50);\r\n    myEarlierPreviousTaskColor = new Color(50, 229, 50);\r\n    myLaterPreviousTaskColor = new Color(229, 50, 50);\r\n    myPreviousTaskColor = Color.LIGHT_GRAY;\r\n    myWeekEndColor = Color.GRAY;\r\n    myDayOffColor = new Color(0.9F, 1.0F, 0.17F);\r\n    myWeekendAlphaRenderingOption = new UIConfiguration.AlphaRenderingOption(this);\r\n}"},
 {"id":2830, "name":"-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"AlphaRenderingOption(UIConfiguration config) {\r\n    super(\"chart.weekend_alpha_rendering\", UIConfiguration.AlphaRenderingOption.VALUES);\r\n    // for (int i=0; i<VALUES.length; i++) {\r\n    // if (FLOATS[i]==config.getWeekendAlphaValue()) {\r\n    // myIndex = i;\r\n    // break;\r\n    // }\r\n    // }\r\n}"},
 {"id":2831, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.-init-()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"RedlineOption() {\r\n    super(\"showTodayLine\");\r\n}"},
 {"id":2832, "name":"getChartMainFont()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getChartMainFont()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Font getChartMainFont() {\r\n    return myChartMainFont;\r\n}"},
 {"id":2833, "name":"getDayOffColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getDayOffColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getDayOffColor() {\r\n    return myDayOffColor;\r\n}"},
 {"id":2834, "name":"getEarlierPreviousTaskColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getEarlierPreviousTaskColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getEarlierPreviousTaskColor() {\r\n    return myEarlierPreviousTaskColor;\r\n}"},
 {"id":2835, "name":"getLaterPreviousTaskColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getLaterPreviousTaskColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getLaterPreviousTaskColor() {\r\n    return myLaterPreviousTaskColor;\r\n}"},
 {"id":2836, "name":"getMenuFont()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getMenuFont()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Font getMenuFont() {\r\n    return myMenuFont;\r\n}"},
 {"id":2837, "name":"getPreviousTaskColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getPreviousTaskColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getPreviousTaskColor() {\r\n    return myPreviousTaskColor;\r\n}"},
 {"id":2838, "name":"getProjectBoundariesOption()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getProjectBoundariesOption()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public BooleanOption getProjectBoundariesOption() {\r\n    return myProjectDatesOption;\r\n}"},
 {"id":2839, "name":"getRedlineOption()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getRedlineOption()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public BooleanOption getRedlineOption() {\r\n    return myRedlineOption;\r\n}"},
 {"id":2840, "name":"getResourceColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getResourceColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getResourceColor() {\r\n    return myResColor;\r\n}"},
 {"id":2841, "name":"getResourceOverloadColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getResourceOverloadColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getResourceOverloadColor() {\r\n    return myResOverColor;\r\n}"},
 {"id":2842, "name":"getResourceUnderloadColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getResourceUnderloadColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getResourceUnderloadColor() {\r\n    return myResUnderColor;\r\n}"},
 {"id":2843, "name":"getTaskColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getTaskColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getTaskColor() {\r\n    return (myProjectLevelTaskColor) == null ? myTaskColor : myProjectLevelTaskColor;\r\n}"},
 {"id":2844, "name":"getWeekEndColor()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getWeekEndColor()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public Color getWeekEndColor() {\r\n    return myWeekEndColor;\r\n}"},
 {"id":2845, "name":"getWeekendAlphaRenderingOption()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.getWeekendAlphaRenderingOption()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public UIConfiguration.AlphaRenderingOption getWeekendAlphaRenderingOption() {\r\n    return myWeekendAlphaRenderingOption;\r\n}"},
 {"id":2846, "name":"isCriticalPathOn()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.isCriticalPathOn()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public boolean isCriticalPathOn() {\r\n    return isCriticalPathOn;\r\n}"},
 {"id":2847, "name":"isRedlineOn()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.isRedlineOn()", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public boolean isRedlineOn() {\r\n    return isRedlineOn;\r\n}"},
 {"id":2848, "name":"setCriticalPathOn(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setCriticalPathOn(boolean)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setCriticalPathOn(boolean isOn) {\r\n    this.isCriticalPathOn = isOn;\r\n}"},
 {"id":2849, "name":"setDayOffColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setDayOffColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setDayOffColor(Color dayOffColor) {\r\n    this.myDayOffColor = dayOffColor;\r\n}"},
 {"id":2850, "name":"setEarlierPreviousTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setEarlierPreviousTaskColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setEarlierPreviousTaskColor(Color earlierTaskColor) {\r\n    this.myEarlierPreviousTaskColor = earlierTaskColor;\r\n}"},
 {"id":2851, "name":"setLaterPreviousTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setLaterPreviousTaskColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setLaterPreviousTaskColor(Color laterTaskColor) {\r\n    this.myLaterPreviousTaskColor = laterTaskColor;\r\n}"},
 {"id":2852, "name":"setPreviousTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setPreviousTaskColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setPreviousTaskColor(Color previousTaskColor) {\r\n    this.myPreviousTaskColor = previousTaskColor;\r\n}"},
 {"id":2853, "name":"setProjectLevelTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setProjectLevelTaskColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setProjectLevelTaskColor(Color color) {\r\n    myProjectLevelTaskColor = color;\r\n}"},
 {"id":2854, "name":"setRedlineOn(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setRedlineOn(boolean)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setRedlineOn(boolean redlineOn) {\r\n    isRedlineOn = redlineOn;\r\n}"},
 {"id":2855, "name":"setResourceColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setResourceColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setResourceColor(Color myResColor) {\r\n    this.myResColor = myResColor;\r\n}"},
 {"id":2856, "name":"setResourceOverloadColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setResourceOverloadColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setResourceOverloadColor(Color myResOverColor) {\r\n    this.myResOverColor = myResOverColor;\r\n}"},
 {"id":2857, "name":"setResourceUnderloadColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setResourceUnderloadColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setResourceUnderloadColor(Color myResUnderColor) {\r\n    this.myResUnderColor = myResUnderColor;\r\n}"},
 {"id":2858, "name":"setTaskColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setTaskColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setTaskColor(Color myTaskColor) {\r\n    this.myTaskColor = myTaskColor;\r\n}"},
 {"id":2859, "name":"setWeekEndColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration.setWeekEndColor(java.awt.Color)", "ownerclassid":"335", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration", "sourcecode":"public void setWeekEndColor(Color myWeekEndColor) {\r\n    this.myWeekEndColor = myWeekEndColor;\r\n}"},
 {"id":2860, "name":"-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration$AlphaRenderingOption.-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "ownerclassid":"333", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration$AlphaRenderingOption", "sourcecode":"AlphaRenderingOption(UIConfiguration config) {\r\n    super(\"chart.weekend_alpha_rendering\", UIConfiguration.AlphaRenderingOption.VALUES);\r\n    // for (int i=0; i<VALUES.length; i++) {\r\n    // if (FLOATS[i]==config.getWeekendAlphaValue()) {\r\n    // myIndex = i;\r\n    // break;\r\n    // }\r\n    // }\r\n}"},
 {"id":2861, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration$AlphaRenderingOption.commit()", "ownerclassid":"333", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration$AlphaRenderingOption", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    String value = getValue();\r\n    for (int i = 0; i < (UIConfiguration.AlphaRenderingOption.VALUES.length); i++) {\r\n        if (UIConfiguration.AlphaRenderingOption.VALUES[i].equals(value)) {\r\n            myIndex = i;\r\n            break;\r\n        }\r\n    }\r\n}"},
 {"id":2862, "name":"getValueAsFloat()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration$AlphaRenderingOption.getValueAsFloat()", "ownerclassid":"333", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration$AlphaRenderingOption", "sourcecode":"public float getValueAsFloat() {\r\n    return FLOATS[myIndex];\r\n}"},
 {"id":2863, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption.-init-()", "ownerclassid":"334", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption", "sourcecode":"RedlineOption() {\r\n    super(\"showTodayLine\");\r\n}"},
 {"id":2864, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption.commit()", "ownerclassid":"334", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    setRedlineOn(isChecked());\r\n}"},
 {"id":2865, "name":"getAttributeName()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption.getAttributeName()", "ownerclassid":"334", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption", "sourcecode":"public String getAttributeName() {\r\n    return \"value\";\r\n}"},
 {"id":2866, "name":"getTagName()", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption.getTagName()", "ownerclassid":"334", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption", "sourcecode":"public String getTagName() {\r\n    return \"redline\";\r\n}"},
 {"id":2867, "name":"loadValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption.loadValue(java.lang.String)", "ownerclassid":"334", "ownerclassname":"net.sourceforge.ganttproject.gui.UIConfiguration$RedlineOption", "sourcecode":"public void loadValue(String legacyValue) {\r\n    lock();\r\n    loadPersistentValue(legacyValue);\r\n    commit();\r\n}"},
 {"id":2868, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.-init-()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"Choice() {\r\n}"},
 {"id":2869, "name":"getActiveChart()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getActiveChart()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"Chart getActiveChart();"},
 {"id":2870, "name":"getGanttChart()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getGanttChart()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"GanttChart getGanttChart();"},
 {"id":2871, "name":"getGanttDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getGanttDividerLocation()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"int getGanttDividerLocation();"},
 {"id":2872, "name":"getMainFrame()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getMainFrame()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"Frame getMainFrame();"},
 {"id":2873, "name":"getResourceChart()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getResourceChart()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"Chart getResourceChart();"},
 {"id":2874, "name":"getResourceDividerLocation()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getResourceDividerLocation()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"int getResourceDividerLocation();"},
 {"id":2875, "name":"getResourceTree()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getResourceTree()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"ResourceTreeUIFacade getResourceTree();"},
 {"id":2876, "name":"getScrollingManager()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getScrollingManager()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"ScrollingManager getScrollingManager();"},
 {"id":2877, "name":"getTaskSelectionContext()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getTaskSelectionContext()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"// void changeWorkingDirectory(File parentFile);\r\nTaskSelectionContext getTaskSelectionContext();"},
 {"id":2878, "name":"getTaskTree()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getTaskTree()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"TaskTreeUIFacade getTaskTree();"},
 {"id":2879, "name":"getUndoManager()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getUndoManager()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"GPUndoManager getUndoManager();"},
 {"id":2880, "name":"getViewIndex()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getViewIndex()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"/**\r\n * Returns the index of the displayed tab.\r\n *\r\n * @return the index of the displayed tab.\r\n */\r\nint getViewIndex();"},
 {"id":2881, "name":"getZoomManager()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.getZoomManager()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"// ChartViewState getGanttChartViewState();\r\nZoomManager getZoomManager();"},
 {"id":2882, "name":"logErrorMessage(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.logErrorMessage(java.lang.Throwable)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void logErrorMessage(Throwable e);"},
 {"id":2883, "name":"refresh()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.refresh()", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void refresh();"},
 {"id":2884, "name":"setGanttDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.setGanttDividerLocation(int)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void setGanttDividerLocation(int location);"},
 {"id":2885, "name":"setResourceDividerLocation(int)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.setResourceDividerLocation(int)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void setResourceDividerLocation(int location);"},
 {"id":2886, "name":"setStatusText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.setStatusText(java.lang.String)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void setStatusText(String text);"},
 {"id":2887, "name":"setViewIndex(int)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.setViewIndex(int)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void setViewIndex(int viewIndex);"},
 {"id":2888, "name":"setWorkbenchTitle(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.setWorkbenchTitle(java.lang.String)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void setWorkbenchTitle(String title);"},
 {"id":2889, "name":"showConfirmationDialog(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.showConfirmationDialog(java.lang.String,java.lang.String)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"UIFacade.Choice showConfirmationDialog(String message, String title);"},
 {"id":2890, "name":"showDialog(java.awt.Component,javax.swing.Action[])", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.showDialog(java.awt.Component,javax.swing.Action[])", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void showDialog(Component content, Action[] buttonActions);"},
 {"id":2891, "name":"showDialog(java.awt.Component,javax.swing.Action[],java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.showDialog(java.awt.Component,javax.swing.Action[],java.lang.String)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void showDialog(Component content, Action[] buttonActions, String title);"},
 {"id":2892, "name":"showErrorDialog(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.showErrorDialog(java.lang.String)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void showErrorDialog(String errorMessage);"},
 {"id":2893, "name":"showErrorDialog(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.showErrorDialog(java.lang.Throwable)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void showErrorDialog(Throwable e);"},
 {"id":2894, "name":"showPopupMenu(java.awt.Component,javax.swing.Action[],int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade.showPopupMenu(java.awt.Component,javax.swing.Action[],int,int)", "ownerclassid":"337", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade", "sourcecode":"void showPopupMenu(Component invoker, Action[] actions, int x, int y);"},
 {"id":2895, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.UIFacade$Choice.-init-()", "ownerclassid":"336", "ownerclassname":"net.sourceforge.ganttproject.gui.UIFacade$Choice", "sourcecode":"Choice() {\r\n}"},
 {"id":2896, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.UIUtil.-init-()", "ownerclassid":"338", "ownerclassname":"net.sourceforge.ganttproject.gui.UIUtil", "sourcecode":"UIUtil() {\r\n}"},
 {"id":2897, "name":"setEnabledTree(javax.swing.JComponent,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.UIUtil.setEnabledTree(javax.swing.JComponent,boolean)", "ownerclassid":"338", "ownerclassname":"net.sourceforge.ganttproject.gui.UIUtil", "sourcecode":"public static void setEnabledTree(JComponent root, boolean isEnabled) {\r\n    root.setEnabled(isEnabled);\r\n    Component[] components = root.getComponents();\r\n    for (int i = 0; i < (components.length); i++) {\r\n        if ((components[i]) instanceof JComponent) {\r\n            UIUtil.setEnabledTree(((JComponent) (components[i])), isEnabled);\r\n        }\r\n    }\r\n}"},
 {"id":2898, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"341", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutAuthorPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"authors\"), GanttLanguage.getInstance().getText(\"settingsAuthors\"), parent);\r\n    JTable jTableAuthors = new JTable();\r\n    AboutAuthorPanel.AuthorsFieldTableModel modelauthors = new AboutAuthorPanel.AuthorsFieldTableModel();\r\n    jTableAuthors.setModel(modelauthors);\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"THOMAS Alexandre\", \"alexthomas@ganttproject.org\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BARASHEV Dmitry\", \"dbarashev@ganttproject.org\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"AZURE Joe\", \"jazure@fishalaska.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BARANNE Benoit\", \"bbaranne@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BOHN Nicolas\", \"nicolasbohn@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LIBS Jean-Marc\", \"jyhem@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"\", \"\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BARMEIER Matthias\", \"matthias.barmeier@sourcepark.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"MURAS Joanna\", \"zabucha@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LU Cui\", \"cuix1@yahoo.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"SCHULZ Maik\", \"post@maikschulz.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"HAEUSLER Michael\", \"michael@akatose.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"ANDRESEN Roger\", \"Roger@Andresen.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"\", \"\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LIPINSKI Pawel\", \"pawel.lipinski@javart.com.pl\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"AUDRU C\ufffddric\", \"cedricaudru@yahoo.fr\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"A S Hodel\", \"hodelas@ieee.org\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BALAZS Major\", \"BMajor@Graphisoft.hu\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BARZILAI Igor\", \"igor.barzilai@free.fr\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BREZINA Marek\", \"marek.brezina@seznam.cz\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BROKER Rick\", \"rick_broker@yahoo.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"CASTILHO Danilo\", \"dncastilho@yahoo.com.br\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"CHRISTENSEN Carsten\", \"coc-kultur@aalborg.dk\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"CROUNSE Brian\", \"brian@crounse.name\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"FERRAZ Nelson\", \"nferraz@phperl.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"GLOEGL Michael\", \"gloegl@fmi.uni-passau.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"GIANTSIDIS Nikos\", \"nickgiant@yahoo.com\"));// greek translation\r\n\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"HERRMANN G.\", \"herr@nike.eonet.ne.jp\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"HURSEY John\", \"joshh@cs.earlham.edu\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"ILES Jon\", \"jon.iles@tapsterrock.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"Jiwon Kim\", \"yesdi@users.sourceforge.net\"));// Korean language\r\n\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"KARLGREN Jussi\", \"jussi@sics.se\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"KITSIK Ahti\", \"ahti.kitsik@gmail.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LIN Kirin\", \"kirinlin@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LKENFACK Etienne\", \"etiennelk@hotmail.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"MADSEN Jan\", \"JM-kultur@aalborg.dk\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"MARCH Stephen\", \"steve@enerds.ca\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"MIYATA Yasuhiro\", \"yasuhiro.miyata@ulsystems.co.jp\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"NATHANAEL Uwe\", \"Uwe.Nathanael@t-online.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"OGNESS John\", \"john@ogness.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"PAOLETTI Tomaso\", \"tom@ipaoletti.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"PLUSCHKE Andreas\", \"homepage.plueschke@gmx.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"RACINOWSKI Przemyslaw\", \"p.racinowski@wp.pl\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"REY Juan\", \"juanrey@inicia.es\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"SAHIN Cengiz\", \"cengiz@sahinc.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"SENIGAGLIESI Paolo\", \"senigagliesi_inf@hotmail.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"SHABTAI Yoav\", \"yoavs@pmp-medical.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"STAVRIDES Paul\", \"pstav@adelie.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"VAN DER WIEL Andre\", \"a.vd.wiel@chello.nl\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"VOCI Elio\", \"elio.voci@gawab.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"ZAVOLZHSKY Alexandr\", \"zavolzhsky@mail.ru\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"Zheko Zhekov\", \"zhekov@electrostart.com\"));// bulgarian language\r\n\r\n    JPanel authorsPanel = new JPanel(new BorderLayout());\r\n    authorsPanel.add(new JScrollPane(jTableAuthors), BorderLayout.CENTER);\r\n    authorsPanel.setPreferredSize(new Dimension(400, 350));\r\n    vb.add(authorsPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2899, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel.-init-(java.lang.String,java.lang.String)", "ownerclassid":"341", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel", "sourcecode":"public AuthorsInfo(String name, String mail) {\r\n    this.name = name;\r\n    this.mail = mail;\r\n}"},
 {"id":2900, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel.-init-()", "ownerclassid":"341", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel", "sourcecode":"AuthorsFieldTableModel() {\r\n}"},
 {"id":2901, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel.applyChanges(boolean)", "ownerclassid":"341", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#applyChanges(boolean)\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    return false;\r\n}"},
 {"id":2902, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel.initialize()", "ownerclassid":"341", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#initialize()\n */\r\npublic void initialize() {\r\n    // nothing to change\r\n}"},
 {"id":2903, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.-init-()", "ownerclassid":"339", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "sourcecode":"AuthorsFieldTableModel() {\r\n}"},
 {"id":2904, "name":"addField(net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.addField(net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo)", "ownerclassid":"339", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "sourcecode":"public void addField(AboutAuthorPanel.AuthorsInfo w) {\r\n    data.addElement(w);\r\n    fireTableRowsInserted(((data.size()) - 1), ((data.size()) - 1));\r\n}"},
 {"id":2905, "name":"getColumnClass(int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.getColumnClass(int)", "ownerclassid":"339", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "sourcecode":"public Class getColumnClass(int c) {\r\n    return columnClasses[c];\r\n}"},
 {"id":2906, "name":"getColumnCount()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.getColumnCount()", "ownerclassid":"339", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "sourcecode":"public int getColumnCount() {\r\n    return columnNames.length;\r\n}"},
 {"id":2907, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.getColumnName(int)", "ownerclassid":"339", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "sourcecode":"public String getColumnName(int col) {\r\n    return columnNames[col];\r\n}"},
 {"id":2908, "name":"getRowCount()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.getRowCount()", "ownerclassid":"339", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "sourcecode":"public int getRowCount() {\r\n    return data.size();\r\n}"},
 {"id":2909, "name":"getValueAt(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.getValueAt(int,int)", "ownerclassid":"339", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "sourcecode":"public Object getValueAt(int row, int col) {\r\n    AboutAuthorPanel.AuthorsInfo info = ((AboutAuthorPanel.AuthorsInfo) (data.elementAt(row)));\r\n    if (col == 0)\r\n        return info.getName();\r\n    else\r\n        if (col == 1)\r\n            return info.getMail();\r\n        else\r\n            return null;\r\n\r\n\r\n}"},
 {"id":2910, "name":"isCellEditable(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.isCellEditable(int,int)", "ownerclassid":"339", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "sourcecode":"public boolean isCellEditable(int row, int col) {\r\n    return col == 1;\r\n}"},
 {"id":2911, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo.-init-(java.lang.String,java.lang.String)", "ownerclassid":"340", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo", "sourcecode":"public AuthorsInfo(String name, String mail) {\r\n    this.name = name;\r\n    this.mail = mail;\r\n}"},
 {"id":2912, "name":"getMail()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo.getMail()", "ownerclassid":"340", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo", "sourcecode":"public String getMail() {\r\n    return mail;\r\n}"},
 {"id":2913, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo.getName()", "ownerclassid":"340", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo", "sourcecode":"public String getName() {\r\n    return name;\r\n}"},
 {"id":2914, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutDialog.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"342", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutDialog", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutDialog(GanttProject parent) {\r\n    super(parent, ((GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"about\"))) + \" - Ganttproject\"), true, new AboutPanel(parent));\r\n    // hide the cancel button\r\n    cancelButton.hide();\r\n}"},
 {"id":2915, "name":"constructSections()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutDialog.constructSections()", "ownerclassid":"342", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutDialog", "sourcecode":"/**\r\n * Coonstruct the menu settings.\r\n */\r\npublic void constructSections() {\r\n    DefaultMutableTreeNode aboutNode = addObject(GanttProject.correctLabel(language.getText(\"about\")), null);\r\n    DefaultMutableTreeNode authorsNode = addObject(language.getText(\"authors\"), null);\r\n    DefaultMutableTreeNode jinfosNode = addObject(language.getText(\"jinfos\"), null);\r\n    DefaultMutableTreeNode licenseNode = addObject(language.getText(\"license\"), null);\r\n    DefaultMutableTreeNode libraryNode = addObject(language.getText(\"library\"), null);\r\n}"},
 {"id":2916, "name":"valueChanged(javax.swing.event.TreeSelectionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutDialog.valueChanged(javax.swing.event.TreeSelectionEvent)", "ownerclassid":"342", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutDialog", "sourcecode":"/**\r\n * Callback for the tree selection event.\r\n */\r\npublic void valueChanged(TreeSelectionEvent e) {\r\n    DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (e.getPath().getLastPathComponent()));\r\n    String sNode = ((String) (node.getUserObject()));\r\n    // - ask the settingPanel if parameters are changed\r\n    // boolean bHasChange = settingPanel.applyChanges(true); //no change to\r\n    // do on this panel\r\n    // - remove the settingPanel\r\n    mainPanel2.remove(0);\r\n    // - Create the new panel\r\n    if (sNode.equals(GanttProject.correctLabel(language.getText(\"about\"))))\r\n        settingPanel = new AboutPanel(appli);\r\n    else\r\n        if (sNode.equals(language.getText(\"authors\")))\r\n            settingPanel = new AboutAuthorPanel(appli);\r\n        else\r\n            if (sNode.equals(language.getText(\"jinfos\")))\r\n                settingPanel = new AboutJavaInfosPanel(appli);\r\n            else\r\n                if (sNode.equals(language.getText(\"license\")))\r\n                    settingPanel = new AboutLicensePanel(appli);\r\n                else\r\n                    if (sNode.equals(language.getText(\"library\")))\r\n                        settingPanel = new AboutLibraryPanel(appli);\r\n\r\n\r\n\r\n\r\n\r\n    Box vb = Box.createVerticalBox();\r\n    vb.add(new TopPanel((\"  \" + (settingPanel.getTitle())), settingPanel.getComment()));\r\n    vb.add(settingPanel);\r\n    settingPanel.initialize();\r\n    // - add the settingPanel into the main Panel\r\n    mainPanel2.add(vb, 0);\r\n    mainPanel2.repaint();\r\n    mainPanel2.validate();// valide the changes\r\n\r\n}"},
 {"id":2917, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"345", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutJavaInfosPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"jinfos\"), GanttLanguage.getInstance().getText(\"settingsJavaInfos\"), parent);\r\n    JTable jTableProperties = new JTable();\r\n    AboutJavaInfosPanel.AboutFieldTableModel modelproperties = new AboutJavaInfosPanel.AboutFieldTableModel();\r\n    jTableProperties.setModel(modelproperties);\r\n    try {\r\n        Enumeration props = System.getProperties().propertyNames();\r\n        SortedSet s = new TreeSet();\r\n        while (props.hasMoreElements()) {\r\n            s.add(((String) (props.nextElement())));\r\n        } \r\n        Iterator i = s.iterator();\r\n        while (i.hasNext()) {\r\n            String prop = ((String) (i.next()));\r\n            modelproperties.addField(new AboutJavaInfosPanel.SystemInfo(prop, System.getProperty(prop)));\r\n        } \r\n    } catch (AccessControlException e) {\r\n        // This can happen when running in a sandbox (Java WebStart)\r\n        System.err.println(((e + \": \") + (e.getMessage())));\r\n    }\r\n    JPanel infosPanel = new JPanel(new BorderLayout());\r\n    infosPanel.add(new JScrollPane(jTableProperties), BorderLayout.CENTER);\r\n    infosPanel.setPreferredSize(new Dimension(400, 350));\r\n    vb.add(infosPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2918, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel.-init-(java.lang.String,java.lang.String)", "ownerclassid":"345", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel", "sourcecode":"public SystemInfo(String name, String value) {\r\n    this.name = name;\r\n    this.value = value;\r\n}"},
 {"id":2919, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel.-init-()", "ownerclassid":"345", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel", "sourcecode":"AboutFieldTableModel() {\r\n}"},
 {"id":2920, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel.applyChanges(boolean)", "ownerclassid":"345", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#applyChanges(boolean)\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    return false;\r\n}"},
 {"id":2921, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel.initialize()", "ownerclassid":"345", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#initialize()\n */\r\npublic void initialize() {\r\n}"},
 {"id":2922, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.-init-()", "ownerclassid":"343", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "sourcecode":"AboutFieldTableModel() {\r\n}"},
 {"id":2923, "name":"addField(net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.addField(net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo)", "ownerclassid":"343", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "sourcecode":"public void addField(AboutJavaInfosPanel.SystemInfo w) {\r\n    data.addElement(w);\r\n    fireTableRowsInserted(((data.size()) - 1), ((data.size()) - 1));\r\n}"},
 {"id":2924, "name":"getColumnClass(int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.getColumnClass(int)", "ownerclassid":"343", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "sourcecode":"public Class getColumnClass(int c) {\r\n    return columnClasses[c];\r\n}"},
 {"id":2925, "name":"getColumnCount()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.getColumnCount()", "ownerclassid":"343", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "sourcecode":"public int getColumnCount() {\r\n    return columnNames.length;\r\n}"},
 {"id":2926, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.getColumnName(int)", "ownerclassid":"343", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "sourcecode":"public String getColumnName(int col) {\r\n    return columnNames[col];\r\n}"},
 {"id":2927, "name":"getRowCount()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.getRowCount()", "ownerclassid":"343", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "sourcecode":"public int getRowCount() {\r\n    return data.size();\r\n}"},
 {"id":2928, "name":"getValueAt(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.getValueAt(int,int)", "ownerclassid":"343", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "sourcecode":"public Object getValueAt(int row, int col) {\r\n    AboutJavaInfosPanel.SystemInfo info = ((AboutJavaInfosPanel.SystemInfo) (data.elementAt(row)));\r\n    if (col == 0)\r\n        return info.getName();\r\n    else\r\n        if (col == 1)\r\n            return info.getValue();\r\n        else\r\n            return null;\r\n\r\n\r\n}"},
 {"id":2929, "name":"isCellEditable(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.isCellEditable(int,int)", "ownerclassid":"343", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "sourcecode":"public boolean isCellEditable(int row, int col) {\r\n    return false;\r\n}"},
 {"id":2930, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo.-init-(java.lang.String,java.lang.String)", "ownerclassid":"344", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo", "sourcecode":"public SystemInfo(String name, String value) {\r\n    this.name = name;\r\n    this.value = value;\r\n}"},
 {"id":2931, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo.getName()", "ownerclassid":"344", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo", "sourcecode":"public String getName() {\r\n    return name;\r\n}"},
 {"id":2932, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo.getValue()", "ownerclassid":"344", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo", "sourcecode":"public String getValue() {\r\n    return value;\r\n}"},
 {"id":2933, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"348", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutLibraryPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"library\"), GanttLanguage.getInstance().getText(\"settingsLibrary\"), parent);\r\n    JTable jTableLib = new JTable();\r\n    AboutLibraryPanel.LibraryFieldTableModel modellib = new AboutLibraryPanel.LibraryFieldTableModel();\r\n    jTableLib.setModel(modellib);\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(((\"ganttproject-\" + (GanttProject.version)) + \".jar\"), \"ganttproject.biz\", \"Project Manager.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"commons-httpclient.jar\", \"jakarta.apache.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"commons-logging.jar\", \"jakarta.apache.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"jdom-20040226-.jar\", \"jdom.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"webdavlib.jar\", \"jakarta.apache.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"jakarta-slide-webdavlib-2.1b1.jar\", \"webdav.apache.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"helpgui-1.1.jar\", \"helpgui.sf.net\", \"Help viewer in html.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"jgoodies-looks-1.2.2.jar\", \"www.jgoodies.com\", \"Nice LooknFeel.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"avalon.jar\", \"avalon.apache.org\", \"Graphic Export (used for pdf)\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"batik.jar\", \"xml.apache.org\", \"Graphic Export (used for pdf)\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"fop.jar\", \"xml.apache.org\", \"Pdf export library.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"fop-font-metrics.jar\", \"xml.apache.org\", \"Special font use.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"junit-3.8.1.jar\", \"junit.org\", \"Unit tests.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"jdnc-modifBen.jar\", \"https://jdnc.dev.java.net/\", \"Swing components\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"mpxj_0.0.25_CVS.jar\", \"http://mpxj.sourceforge.net/\", \"Microsoft Project compatibility\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"icons\", \"eclipse.org\", \"Icons from the Eclipse project (IBM).\"));\r\n    JPanel libraryPanel = new JPanel(new BorderLayout());\r\n    libraryPanel.add(new JScrollPane(jTableLib), BorderLayout.CENTER);\r\n    libraryPanel.setPreferredSize(new Dimension(400, 350));\r\n    vb.add(libraryPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2934, "name":"-init-(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel.-init-(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"348", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel", "sourcecode":"public LibraryInfo(String libName, String libCompany, String libComment) {\r\n    this.libName = libName;\r\n    this.libWeb = libCompany;\r\n    this.libComment = libComment;\r\n}"},
 {"id":2935, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel.-init-()", "ownerclassid":"348", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel", "sourcecode":"LibraryFieldTableModel() {\r\n}"},
 {"id":2936, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel.applyChanges(boolean)", "ownerclassid":"348", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#applyChanges(boolean)\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    return false;\r\n}"},
 {"id":2937, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel.initialize()", "ownerclassid":"348", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#initialize()\n */\r\npublic void initialize() {\r\n}"},
 {"id":2938, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.-init-()", "ownerclassid":"346", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "sourcecode":"LibraryFieldTableModel() {\r\n}"},
 {"id":2939, "name":"addField(net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.addField(net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo)", "ownerclassid":"346", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "sourcecode":"public void addField(AboutLibraryPanel.LibraryInfo w) {\r\n    data.addElement(w);\r\n    fireTableRowsInserted(((data.size()) - 1), ((data.size()) - 1));\r\n}"},
 {"id":2940, "name":"getColumnClass(int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.getColumnClass(int)", "ownerclassid":"346", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "sourcecode":"public Class getColumnClass(int c) {\r\n    return columnClasses[c];\r\n}"},
 {"id":2941, "name":"getColumnCount()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.getColumnCount()", "ownerclassid":"346", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "sourcecode":"public int getColumnCount() {\r\n    return columnNames.length;\r\n}"},
 {"id":2942, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.getColumnName(int)", "ownerclassid":"346", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "sourcecode":"public String getColumnName(int col) {\r\n    return columnNames[col];\r\n}"},
 {"id":2943, "name":"getRowCount()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.getRowCount()", "ownerclassid":"346", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "sourcecode":"public int getRowCount() {\r\n    return data.size();\r\n}"},
 {"id":2944, "name":"getValueAt(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.getValueAt(int,int)", "ownerclassid":"346", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "sourcecode":"public Object getValueAt(int row, int col) {\r\n    AboutLibraryPanel.LibraryInfo info = ((AboutLibraryPanel.LibraryInfo) (data.elementAt(row)));\r\n    if (col == 0)\r\n        return info.getName();\r\n    else\r\n        if (col == 1)\r\n            return info.getWeb();\r\n        else\r\n            if (col == 2)\r\n                return info.getComment();\r\n            else\r\n                return null;\r\n\r\n\r\n\r\n}"},
 {"id":2945, "name":"isCellEditable(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.isCellEditable(int,int)", "ownerclassid":"346", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "sourcecode":"public boolean isCellEditable(int row, int col) {\r\n    return col == 1;\r\n}"},
 {"id":2946, "name":"-init-(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo.-init-(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"347", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo", "sourcecode":"public LibraryInfo(String libName, String libCompany, String libComment) {\r\n    this.libName = libName;\r\n    this.libWeb = libCompany;\r\n    this.libComment = libComment;\r\n}"},
 {"id":2947, "name":"getComment()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo.getComment()", "ownerclassid":"347", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo", "sourcecode":"public String getComment() {\r\n    return libComment;\r\n}"},
 {"id":2948, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo.getName()", "ownerclassid":"347", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo", "sourcecode":"public String getName() {\r\n    return libName;\r\n}"},
 {"id":2949, "name":"getWeb()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo.getWeb()", "ownerclassid":"347", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo", "sourcecode":"public String getWeb() {\r\n    return libWeb;\r\n}"},
 {"id":2950, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLicensePanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"349", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLicensePanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutLicensePanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"license\"), GanttLanguage.getInstance().getText(\"settingsLicense\"), parent);\r\n    JTextArea taLicense = new JTextArea();\r\n    StringBuffer text = new StringBuffer();\r\n    text.append(\"This program is free software; you can redistribute it and/or modify it under the terms of the GNU General \");\r\n    text.append(\"Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\n\");\r\n    text.append(\"This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied \");\r\n    text.append(\"warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n\");\r\n    text.append(\"You should have received a copy of the GNU General Public License along with this program; if not, write to the Free \");\r\n    text.append(\"Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n\n\");\r\n    text.append(\"Browse the entire GPL license at http://www.gnu.org/copyleft/gpl.html\n\");\r\n    taLicense.setText(text.toString());\r\n    taLicense.setEditable(false);\r\n    taLicense.setLineWrap(true);\r\n    taLicense.setWrapStyleWord(true);\r\n    JPanel licensePanel = new JPanel(new BorderLayout());\r\n    licensePanel.add(new JScrollPane(taLicense), BorderLayout.CENTER);\r\n    licensePanel.setPreferredSize(new Dimension(400, 350));\r\n    vb.add(licensePanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2951, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLicensePanel.applyChanges(boolean)", "ownerclassid":"349", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLicensePanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#applyChanges(boolean)\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    return false;\r\n}"},
 {"id":2952, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutLicensePanel.initialize()", "ownerclassid":"349", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutLicensePanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#initialize()\n */\r\npublic void initialize() {\r\n}"},
 {"id":2953, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"350", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"about\")), (((GanttLanguage.getInstance().getText(\"settingsAbout\")) + \" \") + (GanttProject.version)), parent);\r\n    GanttSplash splash = new GanttSplash();\r\n    JLabel jLabelImage = splash.getSplashComponent();\r\n    // JPanel imagePanel = new JPanel(new BorderLayout());\r\n    // imagePanel.add(jLabelImage, BorderLayout.CENTER);\r\n    vb.add(new JPanel());\r\n    vb.add(jLabelImage);\r\n    vb.add(new JPanel());\r\n    JButton bHomePage = new JButton(GanttProject.correctLabel(language.getText(\"webPage\")), new ImageIcon(getClass().getResource(\"/icons/home_16.gif\")));\r\n    bHomePage.setToolTipText(GanttProject.getToolTip((((language.getText(\"goTo\")) + \" \") + \"http://ganttproject.biz\")));// add a simple tool tip\r\n\r\n    // text :)\r\n    bHomePage.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            BrowserControl.displayURL(\"http://ganttproject.biz/\");\r\n        }\r\n    });\r\n    vb.add(bHomePage);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2954, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutPanel.-init-()", "ownerclassid":"350", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutPanel", "sourcecode":"1() {\r\n}"},
 {"id":2955, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutPanel.applyChanges(boolean)", "ownerclassid":"350", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutPanel", "sourcecode":"/**\r\n * This method check if the value has changed, and assk for commit changes.\r\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    // nothing to do :)\r\n    return bHasChange = false;\r\n}"},
 {"id":2956, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.about.AboutPanel.initialize()", "ownerclassid":"350", "ownerclassname":"net.sourceforge.ganttproject.gui.about.AboutPanel", "sourcecode":"/**\r\n * Initialize the component.\r\n */\r\npublic void initialize() {\r\n    // nothing to do :)\r\n}"},
 {"id":2957, "name":"-init-(net.sourceforge.ganttproject.gui.options.model.BooleanOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.BooleanOptionAction.-init-(net.sourceforge.ganttproject.gui.options.model.BooleanOption)", "ownerclassid":"351", "ownerclassname":"net.sourceforge.ganttproject.gui.options.BooleanOptionAction", "sourcecode":"BooleanOptionAction(BooleanOption option) {\r\n    super(\"\");\r\n    myOption = option;\r\n}"},
 {"id":2958, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.BooleanOptionAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"351", "ownerclassname":"net.sourceforge.ganttproject.gui.options.BooleanOptionAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    myOption.toggle();\r\n}"},
 {"id":2959, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic CSVSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"csvexport\")), GanttLanguage.getInstance().getText(\"settingsCVSExport\"), parent);\r\n    appli = parent;\r\n    vb.add(new JSeparator());\r\n    JPanel genePanel = new JPanel(new BorderLayout());\r\n    JLabel lblSeparatedField = new JLabel(language.getText(\"separatedFields\"));\r\n    lblSeparatedField.setFont(new Font(lblSeparatedField.getFont().getFontName(), Font.BOLD, lblSeparatedField.getFont().getSize()));\r\n    genePanel.add(lblSeparatedField, BorderLayout.WEST);\r\n    vb.add(genePanel);\r\n    JPanel fixedPanel = new JPanel(new BorderLayout());\r\n    fixedPanel.add((bFixedSize = new JRadioButton()), BorderLayout.WEST);\r\n    // bFixedSize.setEnabled(false);\r\n    bFixedSize.addActionListener(this);\r\n    fixedPanel.add(new JLabel(language.getText(\"fixedWidth\")), BorderLayout.CENTER);\r\n    vb.add(fixedPanel);\r\n    JPanel separatedPanel = new JPanel(new BorderLayout());\r\n    separatedPanel.add((bSeparatedText = new JRadioButton()), BorderLayout.WEST);\r\n    bSeparatedText.addActionListener(this);\r\n    separatedPanel.add(new JLabel(language.getText(\"separated\")), BorderLayout.CENTER);\r\n    vb.add(separatedPanel);\r\n    JPanel separatorFieldPanel = new JPanel(new GridBagLayout());\r\n    vb.add(separatorFieldPanel);\r\n    GridBagConstraints gbc = new GridBagConstraints();\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    addUsingGBL(separatorFieldPanel, (bDoubleDot = new JRadioButton()), gbc, 0, 0, 1, 1);\r\n    bDoubleDot.addActionListener(this);\r\n    addUsingGBL(separatorFieldPanel, new JLabel(language.getText(\"doubledot\")), gbc, 1, 0, 1, 1);\r\n    addUsingGBL(separatorFieldPanel, (bDotComa = new JRadioButton()), gbc, 3, 0, 1, 1);\r\n    bDotComa.addActionListener(this);\r\n    addUsingGBL(separatorFieldPanel, new JLabel(language.getText(\"dotComa\")), gbc, 4, 0, 1, 1);\r\n    addUsingGBL(separatorFieldPanel, (bComa = new JRadioButton()), gbc, 6, 0, 1, 1);\r\n    bComa.addActionListener(this);\r\n    addUsingGBL(separatorFieldPanel, new JLabel(language.getText(\"coma\")), gbc, 7, 0, 1, 1);\r\n    bSpace = new JRadioButton();\r\n    // addUsingGBL(separatorFieldPanel, bSpace , gbc, 0, 1, 1, 1);\r\n    bSpace.addActionListener(this);\r\n    // addUsingGBL(separatorFieldPanel, new\r\n    // JLabel(language.getText(\"space\")), gbc, 1, 1, 1, 1);\r\n    addUsingGBL(separatorFieldPanel, (bOther = new JRadioButton()), gbc, 6, 1, 1, 1);\r\n    bOther.addActionListener(this);\r\n    addUsingGBL(separatorFieldPanel, new JLabel(language.getText(\"other\")), gbc, 7, 1, 1, 1);\r\n    addUsingGBL(separatorFieldPanel, (tfOther = new JTextField(5)), gbc, 8, 1, 1, 1);\r\n    JPanel textSeparatorFieldPanel = new JPanel(new FlowLayout());\r\n    vb.add(textSeparatorFieldPanel);\r\n    textSeparatorFieldPanel.add(new JLabel(language.getText(\"textSeparator\")));\r\n    cbTextSeparator = new JComboBox(appli.getOptions().getCSVOptions().getSeparatedTextChars());\r\n    textSeparatorFieldPanel.add(new JLabel(\"  \"));\r\n    textSeparatorFieldPanel.add(cbTextSeparator);\r\n    vb.add(new JPanel());\r\n    // /////////////////////////////////////////////////\r\n    vb.add(new JSeparator());\r\n    JPanel taskPanel = new JPanel(new BorderLayout());\r\n    JLabel lblTaskField = new JLabel(language.getText(\"taskFields\"));\r\n    lblTaskField.setFont(new Font(lblTaskField.getFont().getFontName(), Font.BOLD, lblTaskField.getFont().getSize()));\r\n    taskPanel.add(lblTaskField, BorderLayout.WEST);\r\n    vb.add(taskPanel);\r\n    JPanel taskFieldPanel = new JPanel(new GridBagLayout());\r\n    vb.add(taskFieldPanel);\r\n    addUsingGBL(taskFieldPanel, (cbTaskID = new JCheckBox()), gbc, 0, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"id\")), gbc, 1, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskName = new JCheckBox()), gbc, 3, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"name\")), gbc, 4, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskDuration = new JCheckBox()), gbc, 6, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"length\")), gbc, 7, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbStartDate = new JCheckBox()), gbc, 0, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"dateOfBegining\")), gbc, 1, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbEndDate = new JCheckBox()), gbc, 3, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"dateOfEnd\")), gbc, 4, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskPercent = new JCheckBox()), gbc, 6, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"advancement\")), gbc, 7, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskWebLink = new JCheckBox()), gbc, 0, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"webLink\")), gbc, 1, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskResources = new JCheckBox()), gbc, 3, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"resources\")), gbc, 4, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskNotes = new JCheckBox()), gbc, 6, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"notes\")), gbc, 7, 2, 1, 1);\r\n    vb.add(new JPanel());\r\n    // /////////////////////////////////////////////////\r\n    vb.add(new JSeparator());\r\n    JPanel resPanel = new JPanel(new BorderLayout());\r\n    JLabel lblResField = new JLabel(language.getText(\"resFields\"));\r\n    lblResField.setFont(new Font(lblResField.getFont().getFontName(), Font.BOLD, lblResField.getFont().getSize()));\r\n    resPanel.add(lblResField, BorderLayout.WEST);\r\n    vb.add(resPanel);\r\n    JPanel resFieldPanel = new JPanel(new GridBagLayout());\r\n    vb.add(resFieldPanel);\r\n    addUsingGBL(resFieldPanel, (cbResID = new JCheckBox()), gbc, 0, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"id\")), gbc, 1, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, (cbResName = new JCheckBox()), gbc, 3, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"colName\")), gbc, 4, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, (cbResMail = new JCheckBox()), gbc, 6, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"colMail\")), gbc, 7, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, (cbResPhone = new JCheckBox()), gbc, 0, 1, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"colPhone\")), gbc, 1, 1, 1, 1);\r\n    addUsingGBL(resFieldPanel, (cbResRole = new JCheckBox()), gbc, 3, 1, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"colRole\")), gbc, 4, 1, 1, 1);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":2960, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"/**\r\n * Action performed.\r\n */\r\npublic void actionPerformed(ActionEvent e) {\r\n    if ((e.getSource()) instanceof JRadioButton) {\r\n        JRadioButton selectedButton = ((JRadioButton) (e.getSource()));\r\n        if (!(selectedButton.isSelected()))\r\n            selectedButton.setSelected(true);\r\n\r\n    }\r\n    if (((e.getSource()) == (bFixedSize)) && (bFixedSize.isSelected())) {\r\n        bSeparatedText.setSelected(false);\r\n        enableSeparatedButton(false);\r\n    } else\r\n        if (((e.getSource()) == (bSeparatedText)) && (bSeparatedText.isSelected())) {\r\n            bFixedSize.setSelected(false);\r\n            enableSeparatedButton(true);\r\n        } else\r\n            if (((e.getSource()) == (bDoubleDot)) && (bDoubleDot.isSelected())) {\r\n                unselectOther(bDoubleDot);\r\n            } else\r\n                if (((e.getSource()) == (bDotComa)) && (bDotComa.isSelected())) {\r\n                    unselectOther(bDotComa);\r\n                } else\r\n                    if (((e.getSource()) == (bComa)) && (bComa.isSelected())) {\r\n                        unselectOther(bComa);\r\n                    } else\r\n                        if (((e.getSource()) == (bSpace)) && (bSpace.isSelected())) {\r\n                            unselectOther(bSpace);\r\n                        } else\r\n                            if (((e.getSource()) == (bOther)) && (bOther.isSelected())) {\r\n                                unselectOther(bOther);\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}"},
 {"id":2961, "name":"addUsingGBL(java.awt.Container,java.awt.Component,java.awt.GridBagConstraints,int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.addUsingGBL(java.awt.Container,java.awt.Component,java.awt.GridBagConstraints,int,int,int,int)", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"/**\r\n * add a component to container by using GridBagConstraints.\r\n */\r\nprivate void addUsingGBL(Container container, Component component, GridBagConstraints gbc, int x, int y, int w, int h) {\r\n    gbc.gridx = x;\r\n    gbc.gridy = y;\r\n    gbc.gridwidth = w;\r\n    gbc.gridheight = h;\r\n    gbc.weighty = 0;\r\n    container.add(component, gbc);\r\n}"},
 {"id":2962, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.applyChanges(boolean)", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#applyChanges(boolean)\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    CSVOptions csvOptions = appli.getOptions().getCSVOptions();\r\n    if ((((((((((((((((((getFixed()) == (csvOptions.bFixedSize)) && ((getTaskID()) == (csvOptions.bExportTaskID))) && ((getTaskName()) == (csvOptions.bExportTaskName))) && ((getTaskSD()) == (csvOptions.bExportTaskStartDate))) && ((getTaskED()) == (csvOptions.bExportTaskEndDate))) && ((getTaskDuration()) == (csvOptions.bExportTaskDuration))) && ((getTaskPercent()) == (csvOptions.bExportTaskPercent))) && ((getTaskWebLink()) == (csvOptions.bExportTaskWebLink))) && ((getTaskResources()) == (csvOptions.bExportTaskResources))) && ((getTaskNotes()) == (csvOptions.bExportTaskNotes))) && ((getResourceID()) == (csvOptions.bExportResourceID))) && ((getResourceName()) == (csvOptions.bExportResourceName))) && ((getResourceMail()) == (csvOptions.bExportResourceMail))) && ((getResourcePhone()) == (csvOptions.bExportResourcePhone))) && ((getResourceRole()) == (csvOptions.bExportResourceRole))) && (!(separatCharHasChange()))) && (getTextSeparat().equals(csvOptions.sSeparatedTextChar))) {\r\n        bHasChange = false;\r\n    } else {\r\n        if ((!askForApply) || (askForApply && (askForApplyChanges()))) {\r\n            csvOptions.sSeparatedTextChar = getTextSeparat();\r\n            csvOptions.sSeparatedChar = getSeparat();\r\n            csvOptions.bFixedSize = getFixed();\r\n            csvOptions.bExportTaskID = getTaskID();\r\n            csvOptions.bExportTaskName = getTaskName();\r\n            csvOptions.bExportTaskStartDate = getTaskSD();\r\n            csvOptions.bExportTaskEndDate = getTaskED();\r\n            csvOptions.bExportTaskDuration = getTaskDuration();\r\n            csvOptions.bExportTaskPercent = getTaskPercent();\r\n            csvOptions.bExportTaskWebLink = getTaskWebLink();\r\n            csvOptions.bExportTaskResources = getTaskResources();\r\n            csvOptions.bExportTaskNotes = getTaskNotes();\r\n            csvOptions.bExportResourceID = getResourceID();\r\n            csvOptions.bExportResourceName = getResourceName();\r\n            csvOptions.bExportResourceMail = getResourceMail();\r\n            csvOptions.bExportResourcePhone = getResourcePhone();\r\n            csvOptions.bExportResourceRole = getResourceRole();\r\n        }\r\n        bHasChange = true;\r\n    }\r\n    return bHasChange;\r\n}"},
 {"id":2963, "name":"enableSeparatedButton(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.enableSeparatedButton(boolean)", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public void enableSeparatedButton(boolean enabled) {\r\n    bDoubleDot.setEnabled(enabled);\r\n    bDotComa.setEnabled(enabled);\r\n    bComa.setEnabled(enabled);\r\n    bSpace.setEnabled(enabled);\r\n    bOther.setEnabled(enabled);\r\n    tfOther.setEnabled((enabled && (bOther.isSelected())));\r\n}"},
 {"id":2964, "name":"getFixed()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getFixed()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getFixed() {\r\n    return bFixedSize.isSelected();\r\n}"},
 {"id":2965, "name":"getResourceID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getResourceID()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getResourceID() {\r\n    return cbResID.isSelected();\r\n}"},
 {"id":2966, "name":"getResourceMail()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getResourceMail()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getResourceMail() {\r\n    return cbResMail.isSelected();\r\n}"},
 {"id":2967, "name":"getResourceName()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getResourceName()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getResourceName() {\r\n    return cbResName.isSelected();\r\n}"},
 {"id":2968, "name":"getResourcePhone()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getResourcePhone()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getResourcePhone() {\r\n    return cbResPhone.isSelected();\r\n}"},
 {"id":2969, "name":"getResourceRole()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getResourceRole()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getResourceRole() {\r\n    return cbResRole.isSelected();\r\n}"},
 {"id":2970, "name":"getSeparat()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getSeparat()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public String getSeparat() {\r\n    if (bDoubleDot.isSelected())\r\n        return \":\";\r\n\r\n    if (bComa.isSelected())\r\n        return \",\";\r\n\r\n    if (bDotComa.isSelected())\r\n        return \";\";\r\n\r\n    if (bSpace.isSelected())\r\n        return \" \";\r\n\r\n    return tfOther.getText();\r\n}"},
 {"id":2971, "name":"getTaskDuration()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskDuration()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskDuration() {\r\n    return cbTaskDuration.isSelected();\r\n}"},
 {"id":2972, "name":"getTaskED()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskED()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskED() {\r\n    return cbEndDate.isSelected();\r\n}"},
 {"id":2973, "name":"getTaskID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskID()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskID() {\r\n    return cbTaskID.isSelected();\r\n}"},
 {"id":2974, "name":"getTaskName()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskName()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskName() {\r\n    return cbTaskName.isSelected();\r\n}"},
 {"id":2975, "name":"getTaskNotes()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskNotes()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskNotes() {\r\n    return cbTaskNotes.isSelected();\r\n}"},
 {"id":2976, "name":"getTaskPercent()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskPercent()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskPercent() {\r\n    return cbTaskPercent.isSelected();\r\n}"},
 {"id":2977, "name":"getTaskResources()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskResources()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskResources() {\r\n    return cbTaskResources.isSelected();\r\n}"},
 {"id":2978, "name":"getTaskSD()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskSD()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskSD() {\r\n    return cbStartDate.isSelected();\r\n}"},
 {"id":2979, "name":"getTaskWebLink()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTaskWebLink()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean getTaskWebLink() {\r\n    return cbTaskWebLink.isSelected();\r\n}"},
 {"id":2980, "name":"getTextSeparat()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.getTextSeparat()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public String getTextSeparat() {\r\n    if ((cbTextSeparator.getSelectedIndex()) == 0)\r\n        return \"\";\r\n\r\n    return \"\"\";\r\n}"},
 {"id":2981, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.initialize()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#initialize()\n */\r\npublic void initialize() {\r\n    cbTaskID.setSelected(appli.getOptions().getCSVOptions().bExportTaskID);\r\n    cbTaskName.setSelected(appli.getOptions().getCSVOptions().bExportTaskName);\r\n    cbStartDate.setSelected(appli.getOptions().getCSVOptions().bExportTaskStartDate);\r\n    cbEndDate.setSelected(appli.getOptions().getCSVOptions().bExportTaskEndDate);\r\n    cbTaskPercent.setSelected(appli.getOptions().getCSVOptions().bExportTaskPercent);\r\n    cbTaskDuration.setSelected(appli.getOptions().getCSVOptions().bExportTaskDuration);\r\n    cbTaskWebLink.setSelected(appli.getOptions().getCSVOptions().bExportTaskWebLink);\r\n    cbTaskResources.setSelected(appli.getOptions().getCSVOptions().bExportTaskResources);\r\n    cbTaskNotes.setSelected(appli.getOptions().getCSVOptions().bExportTaskNotes);\r\n    cbResID.setSelected(appli.getOptions().getCSVOptions().bExportResourceID);\r\n    cbResName.setSelected(appli.getOptions().getCSVOptions().bExportResourceName);\r\n    cbResMail.setSelected(appli.getOptions().getCSVOptions().bExportResourceMail);\r\n    cbResPhone.setSelected(appli.getOptions().getCSVOptions().bExportResourcePhone);\r\n    cbResRole.setSelected(appli.getOptions().getCSVOptions().bExportResourceRole);\r\n    boolean bfixed = appli.getOptions().getCSVOptions().bFixedSize;\r\n    if (bfixed) {\r\n        bFixedSize.setSelected(true);\r\n        enableSeparatedButton(false);\r\n    } else {\r\n        bSeparatedText.setSelected(true);\r\n        enableSeparatedButton(true);\r\n    }\r\n    String sSeparatedChar = appli.getOptions().getCSVOptions().sSeparatedChar;\r\n    if (\",\".equals(sSeparatedChar))\r\n        unselectOther(bComa);\r\n    else\r\n        if (\";\".equals(sSeparatedChar))\r\n            unselectOther(bDotComa);\r\n        else\r\n            if (\":\".equals(sSeparatedChar))\r\n                unselectOther(bDoubleDot);\r\n            else\r\n                if (\" \".equals(sSeparatedChar))\r\n                    unselectOther(bSpace);\r\n                else {\r\n                    unselectOther(bOther);\r\n                    tfOther.setText(sSeparatedChar);\r\n                }\r\n\r\n\r\n\r\n    if (\"\"\".equals(appli.getOptions().getCSVOptions().sSeparatedTextChar))\r\n        cbTextSeparator.setSelectedIndex(1);\r\n\r\n}"},
 {"id":2982, "name":"separatCharHasChange()", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.separatCharHasChange()", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public boolean separatCharHasChange() {\r\n    CSVOptions csvOptions = appli.getOptions().getCSVOptions();\r\n    if ((bDoubleDot.isSelected()) && (csvOptions.sSeparatedChar.equals(\":\")))\r\n        return false;\r\n\r\n    if ((bComa.isSelected()) && (csvOptions.sSeparatedChar.equals(\",\")))\r\n        return false;\r\n\r\n    if ((bDotComa.isSelected()) && (csvOptions.sSeparatedChar.equals(\";\")))\r\n        return false;\r\n\r\n    if ((bSpace.isSelected()) && (csvOptions.sSeparatedChar.equals(\" \")))\r\n        return false;\r\n\r\n    if ((bOther.isSelected()) && (csvOptions.sSeparatedChar.equals(tfOther.getText())))\r\n        return false;\r\n\r\n    return true;\r\n}"},
 {"id":2983, "name":"unselectOther(javax.swing.JRadioButton)", "fullmethod":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.unselectOther(javax.swing.JRadioButton)", "ownerclassid":"352", "ownerclassname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "sourcecode":"public void unselectOther(JRadioButton selectedButton) {\r\n    bDoubleDot.setSelected((selectedButton == (bDoubleDot)));\r\n    bDotComa.setSelected((selectedButton == (bDotComa)));\r\n    bComa.setSelected((selectedButton == (bComa)));\r\n    bSpace.setSelected((selectedButton == (bSpace)));\r\n    bOther.setSelected((selectedButton == (bOther)));\r\n    tfOther.setEnabled((selectedButton == (bOther)));\r\n}"},
 {"id":2984, "name":"-init-(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.-init-(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "ownerclassid":"354", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "sourcecode":"public EnumerationOptionComboBoxModel(EnumerationOption option) {\r\n    myOption = option;\r\n    String currentValue = option.getValue();\r\n    EnumerationOptionComboBoxModel.Item currentItem = null;\r\n    String[] ids = option.getAvailableValues();\r\n    String[] i18nedValues = geti18nedValues(option);\r\n    myValues = new ArrayList(ids.length);\r\n    for (int i = 0; i < (ids.length); i++) {\r\n        EnumerationOptionComboBoxModel.Item nextItem = new EnumerationOptionComboBoxModel.Item(ids[i], i18nedValues[i]);\r\n        myValues.add(nextItem);\r\n        if (ids[i].equals(currentValue)) {\r\n            currentItem = nextItem;\r\n        }\r\n    }\r\n    if (currentItem != null) {\r\n        setSelectedItem(currentItem);\r\n    }\r\n}"},
 {"id":2985, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.-init-(java.lang.String,java.lang.String)", "ownerclassid":"354", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "sourcecode":"public Item(String id, String displayValue) {\r\n    myID = id;\r\n    myDisplayValue = displayValue;\r\n}"},
 {"id":2986, "name":"getElementAt(int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.getElementAt(int)", "ownerclassid":"354", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "sourcecode":"public Object getElementAt(int index) {\r\n    return myValues.get(index);\r\n}"},
 {"id":2987, "name":"getSelectedItem()", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.getSelectedItem()", "ownerclassid":"354", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "sourcecode":"public Object getSelectedItem() {\r\n    return mySelectedItem;\r\n}"},
 {"id":2988, "name":"getSize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.getSize()", "ownerclassid":"354", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "sourcecode":"public int getSize() {\r\n    return myValues.size();\r\n}"},
 {"id":2989, "name":"geti18nedValues(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.geti18nedValues(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "ownerclassid":"354", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "sourcecode":"String[] geti18nedValues(EnumerationOption option) {\r\n    String[] ids = option.getAvailableValues();\r\n    String[] result = new String[ids.length];\r\n    for (int i = 0; i < (ids.length); i++) {\r\n        result[i] = GanttLanguage.getInstance().getText(((\"optionValue.\" + (ids[i])) + \".label\"));\r\n        if (result[i].startsWith(GanttLanguage.MISSING_RESOURCE)) {\r\n            // System.err.println(result[i]);\r\n            result[i] = ids[i];\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":2990, "name":"setSelectedItem(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.setSelectedItem(java.lang.Object)", "ownerclassid":"354", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "sourcecode":"public void setSelectedItem(Object item) {\r\n    mySelectedItem = ((EnumerationOptionComboBoxModel.Item) (item));\r\n    myOption.setValue(mySelectedItem.myID);\r\n}"},
 {"id":2991, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel$Item.-init-(java.lang.String,java.lang.String)", "ownerclassid":"353", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel$Item", "sourcecode":"public Item(String id, String displayValue) {\r\n    myID = id;\r\n    myDisplayValue = displayValue;\r\n}"},
 {"id":2992, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel$Item.toString()", "ownerclassid":"353", "ownerclassname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel$Item", "sourcecode":"public String toString() {\r\n    return myDisplayValue;\r\n}"},
 {"id":2993, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"355", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic ExportSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"export\")), GanttLanguage.getInstance().getText(\"settingsExport\"), parent);\r\n    appli = parent;\r\n    // export the name of the task\r\n    JPanel namePanel = new JPanel(new BorderLayout());\r\n    namePanel.add((cbName = new JCheckBox()), BorderLayout.WEST);\r\n    namePanel.add(new JLabel(language.getText(\"name\")), BorderLayout.CENTER);\r\n    vb.add(namePanel);\r\n    vb.add(new JPanel());\r\n    // export the complete percent of the task\r\n    JPanel completePanel = new JPanel(new BorderLayout());\r\n    completePanel.add((cbComplete = new JCheckBox()), BorderLayout.WEST);\r\n    completePanel.add(new JLabel(language.getText(\"advancement\")), BorderLayout.CENTER);\r\n    vb.add(completePanel);\r\n    vb.add(new JPanel());\r\n    // export the relationst of the task\r\n    JPanel relationsPanel = new JPanel(new BorderLayout());\r\n    relationsPanel.add((cbRelations = new JCheckBox()), BorderLayout.WEST);\r\n    relationsPanel.add(new JLabel(language.getText(\"depends\")), BorderLayout.CENTER);\r\n    vb.add(relationsPanel);\r\n    vb.add(new JPanel());\r\n    // export the 3D border of the task\r\n    // JPanel bordersPanel = new JPanel(new BorderLayout());\r\n    // bordersPanel.add(cb3dBorder = new JCheckBox(), BorderLayout.WEST);\r\n    // bordersPanel.add(new JLabel(language.getText(\"border3D\")),\r\n    // BorderLayout.CENTER);\r\n    // vb.add(bordersPanel);\r\n    vb.add(new JPanel());\r\n}"},
 {"id":2994, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel.applyChanges(boolean)", "ownerclassid":"355", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#applyChanges(boolean)\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    if ((((getExportName()) == (appli.getOptions().getExportName())) && ((getExportComplete()) == (appli.getOptions().getExportComplete()))) && ((getExportRelations()) == (appli.getOptions().getExportRelations()))) {\r\n        bHasChange = false;\r\n    } else {\r\n        bHasChange = true;\r\n        if ((!askForApply) || (askForApply && (askForApplyChanges()))) {\r\n            appli.getOptions().setExportName(getExportName());\r\n            appli.getOptions().setExportComplete(getExportComplete());\r\n            appli.getOptions().setExportRelations(getExportRelations());\r\n        }\r\n    }\r\n    return bHasChange;\r\n}"},
 {"id":2995, "name":"getExportComplete()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel.getExportComplete()", "ownerclassid":"355", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel", "sourcecode":"boolean getExportComplete() {\r\n    return cbComplete.isSelected();\r\n}"},
 {"id":2996, "name":"getExportName()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel.getExportName()", "ownerclassid":"355", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel", "sourcecode":"boolean getExportName() {\r\n    return cbName.isSelected();\r\n}"},
 {"id":2997, "name":"getExportRelations()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel.getExportRelations()", "ownerclassid":"355", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel", "sourcecode":"boolean getExportRelations() {\r\n    return cbRelations.isSelected();\r\n}"},
 {"id":2998, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel.initialize()", "ownerclassid":"355", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#initialize()\n */\r\npublic void initialize() {\r\n    cbName.setSelected(appli.getOptions().getExportName());\r\n    cbComplete.setSelected(appli.getOptions().getExportComplete());\r\n    cbRelations.setSelected(appli.getOptions().getExportRelations());\r\n    // cb3dBorder.setSelected(appli.getOptions().getExport3dBorders());\r\n}"},
 {"id":2999, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel.-init-()", "ownerclassid":"356", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel", "sourcecode":"GPOptionChoicePanel() {\r\n}"},
 {"id":3000, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel.-init-(java.lang.String)", "ownerclassid":"356", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":3001, "name":"getComponent(javax.swing.Action[],javax.swing.JComponent[],int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel.getComponent(javax.swing.Action[],javax.swing.JComponent[],int)", "ownerclassid":"356", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel", "sourcecode":"public JComponent getComponent(Action[] choiceChangeActions, JComponent[] choiceComponents, int selectedGroupIndex) {\r\n    myButtons = new AbstractButton[choiceChangeActions.length];\r\n    myOptionComponents = new JComponent[choiceChangeActions.length];\r\n    Box result = Box.createVerticalBox();\r\n    myExporterToggles = new ButtonGroup();\r\n    for (int i = 0; i < (choiceChangeActions.length); i++) {\r\n        final int selectedIndex = i;\r\n        final Action nextRealAction = choiceChangeActions[i];\r\n        Action nextWrapperAction = new AbstractAction(String.valueOf(nextRealAction.getValue(Action.NAME))) {\r\n            public void actionPerformed(ActionEvent e) {\r\n                nextRealAction.actionPerformed(e);\r\n                updateSelectionUI(selectedIndex);\r\n            }\r\n        };\r\n        JRadioButton nextButton = new JRadioButton(nextWrapperAction);\r\n        nextButton.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));\r\n        JPanel nextExporterPanel = new JPanel(new BorderLayout());\r\n        nextExporterPanel.add(nextButton, BorderLayout.NORTH);\r\n        myButtons[i] = nextButton;\r\n        myExporterToggles.add(nextButton);\r\n        JComponent nextOptionComponent = choiceComponents[i];\r\n        myOptionComponents[i] = nextOptionComponent;\r\n        nextOptionComponent.setBorder(BorderFactory.createEmptyBorder(0, 30, 20, 0));\r\n        nextExporterPanel.add(nextOptionComponent, BorderLayout.CENTER);\r\n        setEnabledTree(nextOptionComponent, false);\r\n        result.add(nextExporterPanel);\r\n        // if (i == 0) {\r\n        // nextButton.setSelected(true);\r\n        // }\r\n    }\r\n    setSelected(selectedGroupIndex);\r\n    return result;\r\n}"},
 {"id":3002, "name":"getComponent(javax.swing.Action[],net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel.getComponent(javax.swing.Action[],net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],int)", "ownerclassid":"356", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel", "sourcecode":"public Component getComponent(Action[] choiceChangeActions, GPOptionGroup[] choiceOptions, int selectedGroupIndex) {\r\n    JComponent[] choiceComponents = new JComponent[choiceOptions.length];\r\n    for (int i = 0; i < (choiceChangeActions.length); i++) {\r\n        GPOptionGroup nextOptions = choiceOptions[i];\r\n        JComponent nextOptionComponent = (nextOptions == null) ? new JPanel() : myOptionPageBuilder.buildPlanePage(new GPOptionGroup[]{ nextOptions });\r\n        choiceComponents[i] = nextOptionComponent;\r\n    }\r\n    return getComponent(choiceChangeActions, choiceComponents, selectedGroupIndex);\r\n}"},
 {"id":3003, "name":"setEnabledTree(javax.swing.JComponent,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel.setEnabledTree(javax.swing.JComponent,boolean)", "ownerclassid":"356", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel", "sourcecode":"private void setEnabledTree(JComponent root, boolean isEnabled) {\r\n    UIUtil.setEnabledTree(root, isEnabled);\r\n}"},
 {"id":3004, "name":"setSelected(int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel.setSelected(int)", "ownerclassid":"356", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel", "sourcecode":"private void setSelected(int selectedIndex) {\r\n    AbstractButton newSelected = myButtons[selectedIndex];\r\n    mySavedSelectedText = newSelected.getText();\r\n    newSelected.setText(((\"<html><body><b><u>\" + (mySavedSelectedText)) + \"</u></b></body></html>\"));\r\n    mySelectedIndex = selectedIndex;\r\n    newSelected.setSelected(true);\r\n    setEnabledTree(myOptionComponents[mySelectedIndex], true);\r\n}"},
 {"id":3005, "name":"updateSelectionUI(int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel.updateSelectionUI(int)", "ownerclassid":"356", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GPOptionChoicePanel", "sourcecode":"private void updateSelectionUI(int selectedIndex) {\r\n    AbstractButton prevSelected = myButtons[mySelectedIndex];\r\n    prevSelected.setText(mySavedSelectedText);\r\n    setEnabledTree(myOptionComponents[mySelectedIndex], false);\r\n    setSelected(selectedIndex);\r\n}"},
 {"id":3006, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.-init-()", "ownerclassid":"357", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "sourcecode":"GanttChartOptionPageProvider() {\r\n}"},
 {"id":3007, "name":"buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"357", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "sourcecode":"public Component buildPageComponent(IGanttProject project, UIFacade uiFacade) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":3008, "name":"getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"357", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return uiFacade.getGanttChart().getOptionGroups();\r\n}"},
 {"id":3009, "name":"getPageID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.getPageID()", "ownerclassid":"357", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "sourcecode":"public String getPageID() {\r\n    return \"ganttChart\";\r\n}"},
 {"id":3010, "name":"hasCustomComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.hasCustomComponent()", "ownerclassid":"357", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "sourcecode":"public boolean hasCustomComponent() {\r\n    return false;\r\n}"},
 {"id":3011, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.toString()", "ownerclassid":"357", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "sourcecode":"public String toString() {\r\n    return GanttLanguage.getInstance().getText(\"ganttChart\");\r\n}"},
 {"id":3012, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.-init-(java.lang.String,java.lang.String)", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"// -- METHODS --\r\npublic GeneralOptionPanel(String title, String comment) {\r\n    this(title, comment, null);\r\n}"},
 {"id":3013, "name":"-init-(java.lang.String,java.lang.String,java.awt.Frame)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.-init-(java.lang.String,java.lang.String,java.awt.Frame)", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"public GeneralOptionPanel(String title, String comment, Frame parent) {\r\n    super();\r\n    appli = parent;\r\n    setLayout(new BorderLayout());\r\n    add(vb, BorderLayout.CENTER);\r\n    myTitle = title;\r\n    myComment = comment;\r\n}"},
 {"id":3014, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.applyChanges(boolean)", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"/**\r\n * This method check if the value has changed, and assk for commit changes.\r\n */\r\npublic abstract boolean applyChanges(boolean askForApply);"},
 {"id":3015, "name":"askForApplyChanges()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.askForApplyChanges()", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"/**\r\n * This method ask for saving the changes.\r\n */\r\npublic boolean askForApplyChanges() {\r\n    return (UIFacade.Choice.YES) == (getUIFacade().showConfirmationDialog(language.getText(\"msg20\"), language.getText(\"question\")));\r\n}"},
 {"id":3016, "name":"getComment()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.getComment()", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getComment() {\r\n    return myComment;\r\n}"},
 {"id":3017, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.getComponent()", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"public Component getComponent() {\r\n    return this;\r\n}"},
 {"id":3018, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.getTitle()", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getTitle() {\r\n    return myTitle;\r\n}"},
 {"id":3019, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.getUIFacade()", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"private UIFacade getUIFacade() {\r\n    return Mediator.getGanttProjectSingleton().getUIFacade();\r\n}"},
 {"id":3020, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.initialize()", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"/**\r\n * Initialize the component.\r\n */\r\npublic abstract void initialize();"},
 {"id":3021, "name":"rollback()", "fullmethod":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel.rollback()", "ownerclassid":"358", "ownerclassname":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "sourcecode":"public void rollback() {\r\n    initialize();\r\n}"},
 {"id":3022, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"359", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic LanguageSettingsPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"languages\"), GanttLanguage.getInstance().getText(\"settingsLanguages\"), parent);\r\n    appli = parent;\r\n    // create the combo box with all languages\r\n    cbLanguage = new JComboBox();\r\n    cbLanguage.addItem(\"Traditional Chinese\");\r\n    cbLanguage.addItem(\"Simplified Chinese\");\r\n    cbLanguage.addItem(\"u0411u044au043bu0433u0430u0440u0441u043au0438\");\r\n    cbLanguage.addItem(\"u010cesky\");\r\n    cbLanguage.addItem(\"Dansk\");\r\n    cbLanguage.addItem(\"Deutsch\");\r\n    cbLanguage.addItem(\"English\");\r\n    cbLanguage.addItem(\"English (United Kingdom)\");\r\n    cbLanguage.addItem(\"Espau00f1ol\");\r\n    cbLanguage.addItem(\"Estonian\");\r\n    cbLanguage.addItem(\"Finnish\");\r\n    cbLanguage.addItem(\"Franu00e7ais\");\r\n    cbLanguage.addItem(\"Greek\");\r\n    cbLanguage.addItem(\"Hrvatski\");\r\n    cbLanguage.addItem(\"Hungarian\");\r\n    cbLanguage.addItem(\"Korean\");\r\n    cbLanguage.addItem(\"u05e2u05d1u05e8u05d9u05ea\");\r\n    cbLanguage.addItem(\"Italiano\");\r\n    cbLanguage.addItem(\"Japanese\");\r\n    cbLanguage.addItem(\"Nederlands\");\r\n    cbLanguage.addItem(\"Norsk\");\r\n    cbLanguage.addItem(\"Polski\");\r\n    cbLanguage.addItem(\"Portuguu00eas\");\r\n    cbLanguage.addItem(\"Portuguu00eas do Brasil\");\r\n    cbLanguage.addItem(\"u0420u0443u0441u0441u043au0438u0439\");\r\n    cbLanguage.addItem(\"Romanian\");\r\n    cbLanguage.addItem(\"Slovenu0161u010dina\");\r\n    cbLanguage.addItem(\"Slovensky\");\r\n    cbLanguage.addItem(\"Svenska\");\r\n    cbLanguage.addItem(\"Tu00fcrku00e7e\");\r\n    cbLanguage.addItem(\"Tiu1ebfng anh\");\r\n    cbLanguage.addItemListener(this);\r\n    JPanel languagePanel = new JPanel(new BorderLayout());\r\n    languagePanel.add(cbLanguage, BorderLayout.NORTH);\r\n    vb.add(languagePanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":3023, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel.applyChanges(boolean)", "ownerclassid":"359", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel", "sourcecode":"/**\r\n * This method check if the value has changed, and assk for commit changes.\r\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    // if there is changes\r\n    if (bHasChange) {\r\n        if ((!askForApply) || (askForApply && (askForApplyChanges())))\r\n            changeLanguage();\r\n\r\n    }\r\n    return bHasChange;\r\n}"},
 {"id":3024, "name":"changeLanguage()", "fullmethod":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel.changeLanguage()", "ownerclassid":"359", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel", "sourcecode":"/**\r\n * Appli the new language\r\n */\r\npublic void changeLanguage() {\r\n    String lang = ((String) (cbLanguage.getSelectedItem()));\r\n    if (lang.equals(\"Traditional Chinese\"))\r\n        language.setLocale(Locale.TAIWAN);\r\n    else\r\n        if (lang.equals(\"Simplified Chinese\"))\r\n            language.setLocale(Locale.CHINA);\r\n        else\r\n            if (lang.equals(\"u0411u044au043bu0433u0430u0440u0441u043au0438\"))\r\n                language.setLocale(new Locale(\"bg\", \"BG\"));\r\n            else\r\n                if (lang.equals(\"u010cesky\"))\r\n                    language.setLocale(new Locale(\"cs\", \"CZ\"));\r\n                else\r\n                    if (lang.equals(\"Dansk\"))\r\n                        language.setLocale(new Locale(\"da\", \"DK\"));\r\n                    else\r\n                        if (lang.equals(\"Deutsch\"))\r\n                            language.setLocale(Locale.GERMANY);\r\n                        else\r\n                            if (lang.equals(\"English\"))\r\n                                language.setLocale(Locale.US);\r\n                            else\r\n                                if (lang.equals(\"English (United Kingdom)\"))\r\n                                    language.setLocale(Locale.UK);\r\n                                else\r\n                                    if (lang.equals(\"Espau00f1ol\"))\r\n                                        language.setLocale(new Locale(\"es\", \"ES\"));\r\n                                    else\r\n                                        if (lang.equals(\"Estonian\"))\r\n                                            language.setLocale(new Locale(\"et\", \"ET\"));\r\n                                        else\r\n                                            if (lang.equals(\"Greek\"))\r\n                                                language.setLocale(new Locale(\"el\", \"GR\"));\r\n                                            else\r\n                                                if (lang.equals(\"Finnish\"))\r\n                                                    language.setLocale(new Locale(\"fi\", \"FI\"));\r\n                                                else\r\n                                                    if (lang.equals(\"Franu00e7ais\"))\r\n                                                        language.setLocale(Locale.FRANCE);\r\n                                                    else\r\n                                                        if (lang.equals(\"Hrvatski\")) {\r\n                                                            language.setLocale(new Locale(\"hr\", \"HR\"));\r\n                                                        } else\r\n                                                            if (lang.equals(\"Hungarian\"))\r\n                                                                language.setLocale(new Locale(\"hu\", \"HU\"));\r\n                                                            else\r\n                                                                if (lang.equals(\"Korean\"))\r\n                                                                    language.setLocale(new Locale(\"ko\", \"KR\"));\r\n                                                                else\r\n                                                                    if (lang.equals(\"u05e2u05d1u05e8u05d9u05ea\"))\r\n                                                                        language.setLocale(new Locale(\"iw\", \"iW\"));\r\n                                                                    else\r\n                                                                        if (lang.equals(\"Italiano\"))\r\n                                                                            language.setLocale(Locale.ITALY);\r\n                                                                        else\r\n                                                                            if (lang.equals(\"Japanese\"))\r\n                                                                                language.setLocale(new Locale(\"ja\", \"JP\"));\r\n                                                                            else\r\n                                                                                if (lang.equals(\"Nederlands\"))\r\n                                                                                    language.setLocale(new Locale(\"nl\", \"NL\"));\r\n                                                                                else\r\n                                                                                    if (lang.equals(\"Norsk\"))\r\n                                                                                        language.setLocale(new Locale(\"no\", \"NO\"));\r\n                                                                                    else\r\n                                                                                        if (lang.equals(\"Polski\"))\r\n                                                                                            language.setLocale(new Locale(\"pl\", \"PL\"));\r\n                                                                                        else\r\n                                                                                            if (lang.equals(\"Portuguu00eas\"))\r\n                                                                                                language.setLocale(new Locale(\"pt\", \"PT\"));\r\n                                                                                            else\r\n                                                                                                if (lang.equals(\"Portuguu00eas do Brasil\"))\r\n                                                                                                    language.setLocale(new Locale(\"pt\", \"BR\"));\r\n                                                                                                else\r\n                                                                                                    if (lang.equals(\"Romanian\"))\r\n                                                                                                        language.setLocale(new Locale(\"ro\", \"RO\"));\r\n                                                                                                    else\r\n                                                                                                        if (lang.equals(\"Slovenu0161u010dina\"))\r\n                                                                                                            language.setLocale(new Locale(\"sl\", \"SL\"));\r\n                                                                                                        else\r\n                                                                                                            if (lang.equals(\"Slovensky\"))\r\n                                                                                                                language.setLocale(new Locale(\"sk\", \"SK\"));\r\n                                                                                                            else\r\n                                                                                                                if (lang.equals(\"Svenska\"))\r\n                                                                                                                    language.setLocale(new Locale(\"sv\", \"SV\"));\r\n                                                                                                                else\r\n                                                                                                                    if (lang.equals(\"Tu00fcrku00e7e\"))\r\n                                                                                                                        language.setLocale(new Locale(\"tr\", \"TR\"));\r\n                                                                                                                    else\r\n                                                                                                                        if (lang.equals(\"u0420u0443u0441u0441u043au0438u0439\"))\r\n                                                                                                                            language.setLocale(new Locale(\"ru\", \"RU\"));\r\n                                                                                                                        else\r\n                                                                                                                            if (lang.equals(\"Tiu1ebfng anh\"))\r\n                                                                                                                                language.setLocale(new Locale(\"vi\", \"VN\"));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    appli.changeLanguage();\r\n}"},
 {"id":3025, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel.initialize()", "ownerclassid":"359", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel", "sourcecode":"/**\r\n * Initialize the component.\r\n */\r\npublic void initialize() {\r\n    cbLanguage.setSelectedItem(language.getText(\"longLanguage\").trim());\r\n    bHasChange = false;\r\n}"},
 {"id":3026, "name":"itemStateChanged(java.awt.event.ItemEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel.itemStateChanged(java.awt.event.ItemEvent)", "ownerclassid":"359", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel", "sourcecode":"/**\r\n * The language has changed.\r\n */\r\npublic void itemStateChanged(ItemEvent e) {\r\n    if ((e.getStateChange()) == (ItemEvent.SELECTED))\r\n        this.bHasChange = true;\r\n\r\n}"},
 {"id":3027, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic LnFSettingsPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"looknfeel\"), GanttLanguage.getInstance().getText(\"settingsLooknFeel\"), parent);\r\n    appli = parent;\r\n    // create the combo box with all languages\r\n    cbLnf = new JComboBox();\r\n    cbLnf.setName(\"comboLnf\");\r\n    // cbLnf.addActionListener(this);\r\n    GanttLookAndFeelInfo[] lookAndFeels = GanttLookAndFeels.getGanttLookAndFeels().getInstalledLookAndFeels();\r\n    for (int i = 0; i < (lookAndFeels.length); i++) {\r\n        cbLnf.addItem(lookAndFeels[i]);\r\n    }\r\n    cbLnf.addItemListener(this);\r\n    JPanel languagePanel = new JPanel(new BorderLayout());\r\n    languagePanel.add(cbLnf, BorderLayout.NORTH);\r\n    vb.add(languagePanel);\r\n    vb.add(new JPanel());\r\n    // use small icons\r\n    JPanel iconTextPanel = new JPanel(new FlowLayout());\r\n    iconTextPanel.add(new JLabel(language.getText(\"show\")));\r\n    iconTextPanel.add((cbButtonType = new JComboBox()));\r\n    cbButtonType.addItem(language.getText(\"buttonIcon\"));\r\n    cbButtonType.addItem(language.getText(\"buttonIconText\"));\r\n    cbButtonType.addItem(language.getText(\"buttonText\"));\r\n    iconTextPanel.add(new JLabel(\"  \"));\r\n    iconTextPanel.add((cbSmallIcon = new JCheckBox()));\r\n    iconTextPanel.add(new JLabel(language.getText(\"useSmalIcons\")));\r\n    JPanel iconTextPanel2 = new JPanel(new BorderLayout());\r\n    iconTextPanel2.add(iconTextPanel, BorderLayout.WEST);\r\n    vb.add(iconTextPanel2);\r\n    vb.add(new JPanel());\r\n    // // status bar setting\r\n    // JPanel statusPanel = new JPanel(new BorderLayout());\r\n    // statusPanel.add(cbShowStatus = new JCheckBox(), BorderLayout.WEST);\r\n    // statusPanel.add(new JLabel(language.getText(\"showStatusBar\")),\r\n    // BorderLayout.CENTER);\r\n    // vb.add(statusPanel);\r\n    // vb.add(new JPanel());\r\n    JPanel positionPanel = new JPanel(new FlowLayout());\r\n    JPanel currentPanel = new JPanel(new BorderLayout());\r\n    JPanel deletedPanel = new JPanel(new BorderLayout());\r\n    currentPanel.add(new JLabel(language.getText(\"currentToolBar\")), BorderLayout.NORTH);\r\n    deletedPanel.add(new JLabel(language.getText(\"availableToolBar\")), BorderLayout.NORTH);\r\n    /* iconList = new DefaultListModel (); buttonList = new DefaultListModel\n    (); for (int i = 0 ; i < appli.getButtonList().size() ; i++)\n    buttonList.addElement(appli.getButtonList().getElementAt(i)); for\n    (int i = 0 ; i < buttonList.size() ; i++) { if\n    (buttonList.elementAt(i).equals(language.getText(\"separator\").toUpperCase()))\n    iconList.addElement (buttonList.getElementAt(i)); else { if\n    (((TestGanttRolloverButton)buttonList.getElementAt(i)).getIcon() ==\n    null) iconList.addElement\n    (((TestGanttRolloverButton)buttonList.getElementAt(i)).getText());\n    else iconList.addElement\n    (((TestGanttRolloverButton)buttonList.getElementAt(i)).getIcon()); } }\n     */\r\n    list = new JList();\r\n    listDeleted = new JList();\r\n    listDeleted.setName(\"listDeleted\");\r\n    scrollPane = new JScrollPane(listDeleted);\r\n    scrollPane.setPreferredSize(new Dimension(110, 200));\r\n    deletedPanel.add(scrollPane, BorderLayout.EAST);\r\n    // list = new JList(iconList);\r\n    list.setName(\"list\");\r\n    scrollPane = new JScrollPane(list);\r\n    scrollPane.setPreferredSize(new Dimension(110, 200));\r\n    currentPanel.add(scrollPane, BorderLayout.EAST);\r\n    Box currentButtonBox = Box.createVerticalBox();\r\n    Box deletedButtonBox = Box.createVerticalBox();\r\n    JButton bUp = new JButton();\r\n    bUp.setIcon(new ImageIcon(getClass().getResource(\"/icons/up_16.gif\")));\r\n    bUp.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"upTask\"))));\r\n    bUp.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            upButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    JButton bDown = new JButton();\r\n    bDown.setIcon(new ImageIcon(getClass().getResource(\"/icons/down_16.gif\")));\r\n    bDown.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"downTask\"))));\r\n    bDown.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            downButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    JButton bSeparator = new JButton();\r\n    bSeparator.setIcon(new ImageIcon(getClass().getResource(\"/icons/separator_16.gif\")));\r\n    bSeparator.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"separator\"))));\r\n    bSeparator.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            separatorButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    JButton bDelete = new JButton();\r\n    bDelete.setIcon(new ImageIcon(getClass().getResource(\"/icons/indent_16.gif\")));\r\n    bDelete.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"delete\"))));\r\n    bDelete.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            deleteButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    JButton bAdd = new JButton();\r\n    bAdd.setIcon(new ImageIcon(getClass().getResource(\"/icons/unindent_16.gif\")));\r\n    bAdd.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"add\"))));\r\n    bAdd.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            addButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    currentButtonBox.add(new JPanel());\r\n    currentButtonBox.add(new JPanel());\r\n    currentButtonBox.add(bUp);\r\n    currentButtonBox.add(new JPanel());\r\n    currentButtonBox.add(bDown);\r\n    currentButtonBox.add(new JPanel());\r\n    currentButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(bAdd);\r\n    deletedButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(bDelete);\r\n    deletedButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(new JPanel());\r\n    positionPanel.add(currentButtonBox);\r\n    positionPanel.add(currentPanel);\r\n    positionPanel.add(new JPanel());\r\n    positionPanel.add(deletedButtonBox);\r\n    positionPanel.add(new JPanel());\r\n    positionPanel.add(deletedPanel);\r\n    positionPanel.add(new JPanel());\r\n    vb.add(positionPanel);\r\n    vb.add(new JPanel());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":3028, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.-init-()", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"1() {\r\n}"},
 {"id":3029, "name":"addButtonActionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.addButtonActionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * Add available button to the list.\r\n */\r\nprivate void addButtonActionPerformed(ActionEvent evt) {\r\n    int index = list.getSelectedIndex();\r\n    if (index == (-1))\r\n        index = 0;\r\n\r\n    int[] indexesDeleted = listDeleted.getSelectedIndices();\r\n    if ((indexesDeleted.length) != 0) {\r\n        int j = 0;\r\n        for (int i = 0; i < (indexesDeleted.length); i++) {\r\n            if ((indexesDeleted[i]) == 0) {\r\n                j = 1;\r\n                indexesDeleted[i] = indexesDeleted[i];\r\n            } else\r\n                indexesDeleted[i] = ((indexesDeleted[i]) - i) + j;\r\n\r\n            Object icon = GPToolBar.SEPARATOR_OBJECT;\r\n            Object button = GPToolBar.SEPARATOR_OBJECT;\r\n            if ((deletedIconList.getElementAt(indexesDeleted[i]).getClass()) != (String.class)) {\r\n                icon = deletedIconList.remove(indexesDeleted[i]);\r\n                button = deletedButtonList.remove(indexesDeleted[i]);\r\n            }\r\n            // System.out.println (index + \" + \" + i + \" = \" + index + i);\r\n            if ((iconList.getSize()) != (index + i)) {\r\n                iconList.add(((index + i) + 1), icon);\r\n                buttonList.add(((index + i) + 1), button);\r\n            } else {\r\n                iconList.add((index + i), icon);\r\n                buttonList.add((index + i), button);\r\n            }\r\n        }\r\n        if ((iconList.getSize()) != (index + 1))\r\n            list.setSelectedIndex((index + 1));\r\n        else\r\n            list.setSelectedIndex(index);\r\n\r\n        if ((deletedIconList.getSize()) <= (indexesDeleted[0]))\r\n            listDeleted.setSelectedIndex(0);\r\n        else\r\n            listDeleted.setSelectedIndex(indexesDeleted[0]);\r\n\r\n        bHasChange = true;\r\n    }\r\n}"},
 {"id":3030, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.applyChanges(boolean)", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * This method check if the value has changed, and assk for commit changes.\r\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    if ((cbSmallIcon.isSelected()) != (appli.getOptions().getIconSize().equals(\"16\")))\r\n        bHasChange = true;\r\n\r\n    if ((cbButtonType.getSelectedIndex()) != (appli.getOptions().getButtonShow()))\r\n        bHasChange = true;\r\n\r\n    // if (getShowStatusBar() != appli.getOptions().getShowStatusBar())\r\n    // bHasChange = true;\r\n    if (bIconMoved)\r\n        bHasChange = true;\r\n\r\n    // if there is changes\r\n    if (bHasChange) {\r\n        if ((!askForApply) || (askForApply && (askForApplyChanges()))) {\r\n            appli.changeLookAndFeel(getLookAndFeel());\r\n            appli.changeOrder(buttonList, deletedButtonList);\r\n            appli.getOptions().setIconSize((cbSmallIcon.isSelected() ? \"16\" : \"24\"));\r\n            appli.getOptions().setButtonShow(cbButtonType.getSelectedIndex());\r\n            // appli.getOptions().setShowStatusBar(cbShowStatus.isSelected());\r\n            // appli.getStatusBar().setVisible(getShowStatusBar());\r\n            appli.applyButtonOptions();\r\n        }\r\n    }\r\n    return bHasChange;\r\n}"},
 {"id":3031, "name":"deleteButtonActionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.deleteButtonActionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * Remove the selected button on the list.\r\n */\r\nprivate void deleteButtonActionPerformed(ActionEvent evt) {\r\n    int[] indexes = list.getSelectedIndices();\r\n    int[] indexesDeleted = new int[indexes.length];\r\n    if ((indexes.length) != 0) {\r\n        for (int i = 0; i < (indexes.length); i++) {\r\n            indexes[i] = (indexes[i]) - i;\r\n            Object icon = iconList.remove(indexes[i]);\r\n            Object button = buttonList.remove(indexes[i]);\r\n            if ((icon.getClass()) != (String.class)) {\r\n                deletedIconList.addElement(icon);\r\n                deletedButtonList.addElement(button);\r\n            }\r\n        }\r\n        listDeleted.setSelectedIndex(((deletedIconList.getSize()) - 1));\r\n        if ((iconList.getSize()) > 0)\r\n            list.setSelectedIndex(indexes[0]);\r\n\r\n        bHasChange = true;\r\n    }\r\n}"},
 {"id":3032, "name":"downButtonActionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.downButtonActionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * Action on click the down button.\r\n */\r\nprivate void downButtonActionPerformed(ActionEvent evt) {\r\n    Object[] objects = list.getSelectedValues();\r\n    int[] selection = list.getSelectedIndices();\r\n    if ((objects.length) > 0) {\r\n        if ((selection[((selection.length) - 1)]) != ((iconList.size()) - 1)) {\r\n            list.ensureIndexIsVisible(selection[((selection.length) - 1)]);\r\n            for (int i = (objects.length) - 1; i > (-1); i--) {\r\n                int index = selection[i];\r\n                iconList.setElementAt(iconList.getElementAt((index + 1)), index);\r\n                iconList.setElementAt(objects[i], (index + 1));\r\n                Object object = buttonList.getElementAt(index);\r\n                buttonList.setElementAt(buttonList.getElementAt((index + 1)), index);\r\n                buttonList.setElementAt(object, (index + 1));\r\n                selection[i] = index + 1;\r\n            }\r\n            list.setSelectedIndices(selection);\r\n        }\r\n        bIconMoved = true;\r\n    }\r\n}"},
 {"id":3033, "name":"getLookAndFeel()", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.getLookAndFeel()", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * Return the class of the style\r\n */\r\npublic GanttLookAndFeelInfo getLookAndFeel() {\r\n    return ((GanttLookAndFeelInfo) (cbLnf.getSelectedItem()));\r\n}"},
 {"id":3034, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.initialize()", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"// boolean getShowStatusBar() {\r\n// return cbShowStatus.isSelected();\r\n// }\r\n/**\r\n * Initialize the component.\r\n */\r\npublic void initialize() {\r\n    cbLnf.setSelectedItem(appli.lookAndFeel);\r\n    cbSmallIcon.setSelected(appli.getOptions().getIconSize().equals(\"16\"));\r\n    cbButtonType.setSelectedIndex(appli.getOptions().getButtonShow());\r\n    // cbShowStatus.setSelected(appli.getOptions().getShowStatusBar());\r\n    deletedIconList = new DefaultListModel();\r\n    deletedIconList.addElement(GPToolBar.SEPARATOR_OBJECT);\r\n    deletedButtonList = new DefaultListModel();\r\n    deletedButtonList.addElement(GPToolBar.SEPARATOR_OBJECT);\r\n    for (int i = 0; i < (appli.getDeletedButtonList().size()); i++) {\r\n        if ((GPToolBar.SEPARATOR_OBJECT) != (appli.getDeletedButtonList().getElementAt(i))) {\r\n            deletedButtonList.addElement(appli.getDeletedButtonList().getElementAt(i));\r\n        }\r\n    }\r\n    for (int i = 1; i < (deletedButtonList.size()); i++) {\r\n        if ((((TestGanttRolloverButton) (deletedButtonList.getElementAt(i))).getIcon()) == null)\r\n            deletedIconList.addElement(((TestGanttRolloverButton) (deletedButtonList.getElementAt(i))).getText());\r\n        else\r\n            deletedIconList.addElement(((TestGanttRolloverButton) (deletedButtonList.getElementAt(i))).getIcon());\r\n\r\n    }\r\n    iconList = new DefaultListModel();\r\n    buttonList = new DefaultListModel();\r\n    for (int i = 0; i < (appli.getButtonList().size()); i++)\r\n        buttonList.addElement(appli.getButtonList().getElementAt(i));\r\n\r\n    for (int i = 0; i < (buttonList.size()); i++) {\r\n        if (buttonList.elementAt(i).equals(GPToolBar.SEPARATOR_OBJECT))\r\n            iconList.addElement(buttonList.getElementAt(i));\r\n        else {\r\n            if ((((TestGanttRolloverButton) (buttonList.getElementAt(i))).getIcon()) == null)\r\n                iconList.addElement(((TestGanttRolloverButton) (buttonList.getElementAt(i))).getText());\r\n            else\r\n                iconList.addElement(((TestGanttRolloverButton) (buttonList.getElementAt(i))).getIcon());\r\n\r\n        }\r\n    }\r\n    list.setModel(iconList);\r\n    listDeleted.setModel(deletedIconList);\r\n    bHasChange = false;\r\n}"},
 {"id":3035, "name":"itemStateChanged(java.awt.event.ItemEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.itemStateChanged(java.awt.event.ItemEvent)", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * The looknfeel has changed.\r\n */\r\npublic void itemStateChanged(ItemEvent e) {\r\n    if ((e.getStateChange()) == (ItemEvent.SELECTED)) {\r\n        this.bHasChange = true;\r\n    }\r\n}"},
 {"id":3036, "name":"separatorButtonActionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.separatorButtonActionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * Add a new separator.\r\n */\r\nprivate void separatorButtonActionPerformed(ActionEvent evt) {\r\n    int index = 0;\r\n    if ((list.getSelectedIndex()) != (-1))\r\n        index = list.getSelectedIndex();\r\n\r\n    iconList.add(index, GPToolBar.SEPARATOR_OBJECT);\r\n    buttonList.add(index, GPToolBar.SEPARATOR_OBJECT);\r\n    list.setSelectedIndex(index);\r\n    bIconMoved = true;\r\n}"},
 {"id":3037, "name":"upButtonActionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.upButtonActionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"360", "ownerclassname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "sourcecode":"/**\r\n * Action on click the up button.\r\n */\r\nprivate void upButtonActionPerformed(ActionEvent evt) {\r\n    Object[] objects = list.getSelectedValues();\r\n    int[] selection = list.getSelectedIndices();\r\n    if ((objects.length) > 0) {\r\n        if ((selection[0]) != 0) {\r\n            list.ensureIndexIsVisible(selection[0]);\r\n            for (int i = 0; i < (objects.length); i++) {\r\n                int index = selection[i];\r\n                iconList.setElementAt(iconList.getElementAt((index - 1)), index);\r\n                iconList.setElementAt(objects[i], (index - 1));\r\n                Object object = buttonList.getElementAt(index);\r\n                buttonList.setElementAt(buttonList.getElementAt((index - 1)), index);\r\n                buttonList.setElementAt(object, (index - 1));\r\n                selection[i] = index - 1;\r\n            }\r\n            list.setSelectedIndices(selection);\r\n        }\r\n        bIconMoved = true;\r\n    }\r\n}"},
 {"id":3038, "name":"-init-(net.sourceforge.ganttproject.gui.options.model.OptionPageProvider,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel.-init-(net.sourceforge.ganttproject.gui.options.model.OptionPageProvider,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"361", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel", "sourcecode":"public OptionPageProviderPanel(OptionPageProvider provider, IGanttProject project, UIFacade uiFacade) {\r\n    super(\"\", \"\", uiFacade.getMainFrame());\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myProvider = provider;\r\n    myGroups = myProvider.getOptionGroups(project, uiFacade);\r\n}"},
 {"id":3039, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel.applyChanges(boolean)", "ownerclassid":"361", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel", "sourcecode":"public boolean applyChanges(boolean askForApply) {\r\n    for (int i = 0; i < (myGroups.length); i++) {\r\n        myGroups[i].commit();\r\n    }\r\n    return true;\r\n}"},
 {"id":3040, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel.getComponent()", "ownerclassid":"361", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel", "sourcecode":"public Component getComponent() {\r\n    if (myProvider.hasCustomComponent()) {\r\n        return myProvider.buildPageComponent(myProject, myUIFacade);\r\n    }\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    return builder.buildPage(myGroups, myProvider.getPageID());\r\n}"},
 {"id":3041, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel.initialize()", "ownerclassid":"361", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel", "sourcecode":"public void initialize() {\r\n    for (int i = 0; i < (myGroups.length); i++) {\r\n        myGroups[i].lock();\r\n    }\r\n}"},
 {"id":3042, "name":"rollback()", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel.rollback()", "ownerclassid":"361", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel", "sourcecode":"public void rollback() {\r\n    for (int i = 0; i < (myGroups.length); i++) {\r\n        myGroups[i].rollback();\r\n    }\r\n}"},
 {"id":3043, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.-init-()", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"public OptionsPageBuilder() {\r\n    this(null);\r\n}"},
 {"id":3044, "name":"-init-(java.awt.Component)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.-init-(java.awt.Component)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"public OptionsPageBuilder(Component parentComponent) {\r\n    myParentComponent = parentComponent;\r\n}"},
 {"id":3045, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.-init-(java.lang.String)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"4( $anonymous0) {\r\n}"},
 {"id":3046, "name":"buildPage(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.buildPage(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],java.lang.String)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"public JComponent buildPage(GPOptionGroup[] optionGroups, String pageID) {\r\n    JPanel result = new JPanel(new BorderLayout());\r\n    result.setBorder(new EmptyBorder(0, 5, 0, 5));\r\n    TopPanel topPanel = new TopPanel(myi18n.getPageTitle(pageID), myi18n.getPageDescription(pageID));\r\n    topPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n    result.add(topPanel, BorderLayout.NORTH);\r\n    JComponent planePage = buildPlanePage(optionGroups);\r\n    result.add(planePage, BorderLayout.CENTER);\r\n    return result;\r\n}"},
 {"id":3047, "name":"buildPlanePage(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[])", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.buildPlanePage(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[])", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"public JComponent buildPlanePage(GPOptionGroup[] optionGroups) {\r\n    final JComponent optionsPanel = new JPanel(new SpringLayout());\r\n    for (int i = 0; i < (optionGroups.length); i++) {\r\n        optionsPanel.add(createGroupComponent(optionGroups[i]));\r\n    }\r\n    SpringUtilities.makeCompactGrid(optionsPanel, optionGroups.length, 1, 0, 0, 5, 5);\r\n    JPanel resultPanel = new JPanel(new BorderLayout());\r\n    resultPanel.add(optionsPanel, BorderLayout.NORTH);\r\n    resultPanel.addFocusListener(new FocusAdapter() {\r\n        public void focusGained(FocusEvent e) {\r\n            optionsPanel.getComponent(0).requestFocus();\r\n        }\r\n    });\r\n    return resultPanel;\r\n}"},
 {"id":3048, "name":"createBooleanComponent(net.sourceforge.ganttproject.gui.options.model.BooleanOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createBooleanComponent(net.sourceforge.ganttproject.gui.options.model.BooleanOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private Component createBooleanComponent(BooleanOption option) {\r\n    JCheckBox result = new JCheckBox(new BooleanOptionAction(option));\r\n    result.setText(myi18n.getOptionLabel(option));\r\n    result.setHorizontalAlignment(JCheckBox.LEFT);\r\n    result.setHorizontalTextPosition(SwingConstants.TRAILING);\r\n    result.setSelected(option.isChecked());\r\n    ComponentOrientation componentOrientation = GanttLanguage.getInstance().getComponentOrientation();\r\n    result.setComponentOrientation(componentOrientation);\r\n    return result;\r\n}"},
 {"id":3049, "name":"createButtonComponent(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createButtonComponent(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private Component createButtonComponent(GPOptionGroup optionGroup) {\r\n    Action action = new AbstractAction(myi18n.getAdvancedActionTitle()) {\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.err.println(\"[OptionsPageBuilder] createButtonComponent: \");\r\n        }\r\n    };\r\n    JButton result = new JButton(action);\r\n    return result;\r\n}"},
 {"id":3050, "name":"createColorComponent(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createColorComponent(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private Component createColorComponent(final ColorOption option) {\r\n    final JButton colorButton = new JButton();\r\n    Action action = new AbstractAction(myi18n.getColorButtonText(option)) {\r\n        public void actionPerformed(ActionEvent e) {\r\n            ActionListener onOkPressing = new ActionListener() {\r\n                public void actionPerformed(ActionEvent e) {\r\n                    Color color = OptionsPageBuilder.ourColorChooser.getColor();\r\n                    colorButton.setBackground(color);\r\n                    option.setValue(color);\r\n                }\r\n            };\r\n            ActionListener onCancelPressing = new ActionListener() {\r\n                public void actionPerformed(ActionEvent e) {\r\n                    // nothing to do for \"Cancel\"\r\n                }\r\n            };\r\n            JDialog dialog = JColorChooser.createDialog(myParentComponent, myi18n.getColorChooserTitle(option), true, OptionsPageBuilder.ourColorChooser, onOkPressing, onCancelPressing);\r\n            OptionsPageBuilder.ourColorChooser.setColor(colorButton.getBackground());\r\n            dialog.setVisible(true);\r\n        }\r\n    };\r\n    colorButton.setAction(action);\r\n    colorButton.setBackground(option.getValue());\r\n    return colorButton;\r\n}"},
 {"id":3051, "name":"createDateComponent(net.sourceforge.ganttproject.gui.options.model.DateOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createDateComponent(net.sourceforge.ganttproject.gui.options.model.DateOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private Component createDateComponent(final DateOption option) {\r\n    final JXDatePicker result = new JXDatePicker();\r\n    result.setDate(option.getValue());\r\n    result.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            option.setValue(((JXDatePicker) (e.getSource())).getDate());\r\n        }\r\n    });\r\n    if (option instanceof ChangeValueDispatcher) {\r\n        ((ChangeValueDispatcher) (option)).addChangeValueListener(new ChangeValueListener() {\r\n            public void changeValue(ChangeValueEvent event) {\r\n                assert (event.getNewValue()) instanceof Date;\r\n                result.setDate(((Date) (event.getNewValue())));\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n}"},
 {"id":3052, "name":"createEnumerationComponent(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createEnumerationComponent(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private JComboBox createEnumerationComponent(EnumerationOption option) {\r\n    ComboBoxModel model = new EnumerationOptionComboBoxModel(option);\r\n    JComboBox result = new JComboBox(model);\r\n    return result;\r\n}"},
 {"id":3053, "name":"createGroupComponent(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createGroupComponent(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"public JComponent createGroupComponent(GPOptionGroup group) {\r\n    JPanel optionsPanel = new JPanel(new SpringLayout());\r\n    if (group.isTitled()) {\r\n        Border lineBorder = BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK);\r\n        optionsPanel.setBorder(BorderFactory.createTitledBorder(lineBorder, myi18n.getOptionGroupLabel(group)));\r\n    }\r\n    GPOption[] options = group.getOptions();\r\n    for (int i = 0; i < (options.length); i++) {\r\n        GPOption nextOption = options[i];\r\n        final Component nextComponent = createOptionComponent(nextOption);\r\n        if (needsLabel(nextOption)) {\r\n            Component nextLabel = createOptionLabel(options[i]);\r\n            optionsPanel.add(nextLabel);\r\n            optionsPanel.add(nextComponent);\r\n        } else {\r\n            optionsPanel.add(nextComponent);\r\n            optionsPanel.add(new JPanel());\r\n        }\r\n        if (i == 0) {\r\n            optionsPanel.addFocusListener(new FocusAdapter() {\r\n                public void focusGained(FocusEvent e) {\r\n                    super.focusGained(e);\r\n                    nextComponent.requestFocus();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if ((options.length) > 0) {\r\n        SpringUtilities.makeCompactGrid(optionsPanel, options.length, 2, 0, 0, 3, 3);\r\n    }\r\n    return optionsPanel;\r\n}"},
 {"id":3054, "name":"createOptionComponent(net.sourceforge.ganttproject.gui.options.model.GPOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createOptionComponent(net.sourceforge.ganttproject.gui.options.model.GPOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private Component createOptionComponent(GPOption option) {\r\n    Component result = null;\r\n    if (option instanceof EnumerationOption) {\r\n        result = createEnumerationComponent(((EnumerationOption) (option)));\r\n    } else\r\n        if (option instanceof BooleanOption) {\r\n            result = createBooleanComponent(((BooleanOption) (option)));\r\n        } else\r\n            if (option instanceof ColorOption) {\r\n                result = createColorComponent(((ColorOption) (option)));\r\n            } else\r\n                if (option instanceof DateOption) {\r\n                    result = createDateComponent(((DateOption) (option)));\r\n                } else\r\n                    if (option instanceof GPOptionGroup) {\r\n                        result = createButtonComponent(((GPOptionGroup) (option)));\r\n                    } else\r\n                        if (option instanceof StringOption) {\r\n                            result = createStringComponent(((StringOption) (option)));\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    if (result == null) {\r\n        result = new JLabel((\"Unknown option class=\" + (option.getClass())));\r\n    }\r\n    return result;\r\n}"},
 {"id":3055, "name":"createOptionLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createOptionLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private Component createOptionLabel(GPOption option) {\r\n    JLabel nextLabel = new JLabel(myi18n.getOptionLabel(option));\r\n    nextLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 3));\r\n    return nextLabel;\r\n}"},
 {"id":3056, "name":"createStandaloneOptionPanel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createStandaloneOptionPanel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"public Component createStandaloneOptionPanel(GPOption option) {\r\n    JPanel optionPanel = new JPanel(new BorderLayout());\r\n    Component optionComponent = createOptionComponent(option);\r\n    if (needsLabel(option)) {\r\n        optionPanel.add(createOptionLabel(option), BorderLayout.WEST);\r\n        optionPanel.add(optionComponent, BorderLayout.CENTER);\r\n    } else {\r\n        optionPanel.add(optionComponent, BorderLayout.WEST);\r\n    }\r\n    JPanel result = new JPanel(new BorderLayout());\r\n    result.add(optionPanel, BorderLayout.NORTH);\r\n    return result;\r\n}"},
 {"id":3057, "name":"createStringComponent(net.sourceforge.ganttproject.gui.options.model.StringOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createStringComponent(net.sourceforge.ganttproject.gui.options.model.StringOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private Component createStringComponent(final StringOption option) {\r\n    final JTextField result = new JTextField(option.getValue());\r\n    result.getDocument().addDocumentListener(new DocumentListener() {\r\n        public void insertUpdate(DocumentEvent e) {\r\n            option.setValue(result.getText());\r\n        }\r\n\r\n        public void removeUpdate(DocumentEvent e) {\r\n            option.setValue(result.getText());\r\n        }\r\n\r\n        public void changedUpdate(DocumentEvent e) {\r\n            option.setValue(result.getText());\r\n        }\r\n    });\r\n    return result;\r\n}"},
 {"id":3058, "name":"needsLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.needsLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"private boolean needsLabel(GPOption nextOption) {\r\n    return false == (nextOption instanceof BooleanOption);\r\n}"},
 {"id":3059, "name":"setI18N(net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.setI18N(net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"public void setI18N(OptionsPageBuilder.I18N i18n) {\r\n    myi18n = i18n;\r\n}"},
 {"id":3060, "name":"setOptionKeyPrefix(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.setOptionKeyPrefix(java.lang.String)", "ownerclassid":"363", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "sourcecode":"public void setOptionKeyPrefix(String optionKeyPrefix) {\r\n    myi18n.myOptionKeyPrefix = optionKeyPrefix;\r\n}"},
 {"id":3061, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.-init-()", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"public I18N() {\r\n}"},
 {"id":3062, "name":"getAdvancedActionTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getAdvancedActionTitle()", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"String getAdvancedActionTitle() {\r\n    return GanttLanguage.getInstance().getText(\"optionAdvanced.label\");\r\n}"},
 {"id":3063, "name":"getColorButtonText(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getColorButtonText(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"String getColorButtonText(ColorOption colorOption) {\r\n    return GanttLanguage.getInstance().getText(\"colorButton\");\r\n}"},
 {"id":3064, "name":"getColorChooserTitle(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getColorChooserTitle(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"String getColorChooserTitle(ColorOption colorOption) {\r\n    return GanttLanguage.getInstance().getText(\"selectColor\");\r\n}"},
 {"id":3065, "name":"getOptionGroupLabel(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getOptionGroupLabel(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"public String getOptionGroupLabel(GPOptionGroup group) {\r\n    return GanttLanguage.getInstance().getText((((myOptionGroupKeyPrefix) + (group.getID())) + \".label\"));\r\n}"},
 {"id":3066, "name":"getOptionLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getOptionLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"public String getOptionLabel(GPOption option) {\r\n    return GanttLanguage.getInstance().getText((((myOptionKeyPrefix) + (option.getID())) + \".label\"));\r\n}"},
 {"id":3067, "name":"getPageDescription(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getPageDescription(java.lang.String)", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"public String getPageDescription(String pageID) {\r\n    return GanttLanguage.getInstance().getText((((myOptionPageKeyPrefix) + pageID) + \".description\"));\r\n}"},
 {"id":3068, "name":"getPageTitle(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getPageTitle(java.lang.String)", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"public String getPageTitle(String pageID) {\r\n    return GanttLanguage.getInstance().getText((((myOptionPageKeyPrefix) + pageID) + \".title\"));\r\n}"},
 {"id":3069, "name":"getValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getValue(java.lang.String)", "ownerclassid":"362", "ownerclassname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "sourcecode":"protected String getValue(String key) {\r\n    return GanttLanguage.getInstance().getText(key);\r\n}"},
 {"id":3070, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"364", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic ParametersSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"parameters\")), GanttLanguage.getInstance().getText(\"settingsParameters\"), parent);\r\n    appli = parent;\r\n    // automatic launch of task properties\r\n    JPanel autoPanel = new JPanel(new BorderLayout());\r\n    autoPanel.add((cbAutomatic = new JCheckBox()), BorderLayout.WEST);\r\n    autoPanel.add(new JLabel(language.getText(\"automaticLaunch\")), BorderLayout.CENTER);\r\n    vb.add(autoPanel);\r\n    vb.add(new JPanel());\r\n    // move on the graphic area with mouse option\r\n    // JPanel movePanel = new JPanel(new BorderLayout());\r\n    // movePanel.add(cbDrag = new JCheckBox(), BorderLayout.WEST);\r\n    // movePanel.add(new JLabel(language.getText(\"dragTime\")),\r\n    // BorderLayout.CENTER);\r\n    // vb.add(movePanel);\r\n    // vb.add(new JPanel());\r\n    // webdav time block\r\n    JPanel webDavPanel = new JPanel(new BorderLayout());\r\n    webDavPanel.add((spLockDAV = new JSpinner(new SpinnerNumberModel(240, 1, 1440, 1))), BorderLayout.WEST);\r\n    webDavPanel.add(new JLabel(language.getText(\"lockDAV\")), BorderLayout.CENTER);\r\n    vb.add(webDavPanel);\r\n    vb.add(new JPanel());\r\n    // task name prefix\r\n    JPanel taskPrefixPanel = new JPanel(new BorderLayout());\r\n    taskPrefixPanel.add(new JLabel(language.getText(\"taskNamePrefix\")), BorderLayout.WEST);\r\n    taskPrefixPanel.add((tfTaskPrefix = new JTextField()), BorderLayout.CENTER);\r\n    vb.add(taskPrefixPanel);\r\n    vb.add(new JPanel());\r\n    // number of undoes\r\n    // JPanel undoNumberPanel = new JPanel(new BorderLayout());\r\n    // undoNumberPanel.add(spUndoNumber = new JSpinner(new\r\n    // SpinnerNumberModel(50, 1, 200, 1)), BorderLayout.WEST);\r\n    // undoNumberPanel.add (new JLabel(language.getText(\"undoNumber\")),\r\n    // BorderLayout.CENTER);\r\n    // vb.add(undoNumberPanel);\r\n    // vb.add(new JPanel());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":3071, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel.applyChanges(boolean)", "ownerclassid":"364", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel", "sourcecode":"/**\r\n * This method check if the value has changed, and assk for commit changes.\r\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    if ((((getAutomatic()) == (appli.getOptions().getAutomatic())) && // getDragTime() == appli.getOptions().getDragTime() &&\r\n    ((getLockDAVMinutes()) == (appli.getOptions().getLockDAVMinutes()))) && // getUndoNumber() == appli.getOptions().getUndoNumber() &&\r\n    (((getTaskNamePrefix()) == null) || (getTaskNamePrefix().equals(appli.getOptions().getTrueTaskNamePrefix())))) {\r\n        bHasChange = false;\r\n    } else {\r\n        bHasChange = true;\r\n        if ((!askForApply) || (askForApply && (askForApplyChanges()))) {\r\n            appli.getOptions().setAutomatic(getAutomatic());\r\n            // appli.getOptions().setDragTime(getDragTime());\r\n            appli.getOptions().setTaskNamePrefix(getTaskNamePrefix());\r\n            // WebDAV Locking\r\n            appli.getOptions().setLockDAVMinutes(getLockDAVMinutes());\r\n            // changeUndoNumber ();\r\n            HttpDocument.setLockDAVMinutes(getLockDAVMinutes());\r\n        }\r\n    }\r\n    return bHasChange;\r\n}"},
 {"id":3072, "name":"getAutomatic()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel.getAutomatic()", "ownerclassid":"364", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel", "sourcecode":"/**\r\n *\r\n *\r\n * @return the automatic launch value.\r\n */\r\npublic boolean getAutomatic() {\r\n    return cbAutomatic.isSelected();\r\n}"},
 {"id":3073, "name":"getLockDAVMinutes()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel.getLockDAVMinutes()", "ownerclassid":"364", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel", "sourcecode":"/**\r\n *\r\n *\r\n * @return the web dav locking value.\r\n */\r\npublic int getLockDAVMinutes() {\r\n    return ((Integer) (spLockDAV.getValue())).intValue();\r\n}"},
 {"id":3074, "name":"getTaskNamePrefix()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel.getTaskNamePrefix()", "ownerclassid":"364", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel", "sourcecode":"/**\r\n *\r\n *\r\n * @return the undo number value.\r\n */\r\n// public int getUndoNumber () {\r\n// return ((Integer) spUndoNumber.getValue()).intValue();\r\n// }\r\n// public void changeUndoNumber () {\r\n// appli.getOptions().setUndoNumber(getUndoNumber());\r\n// appli.changeUndoNumber ();\r\n// }\r\n/**\r\n *\r\n *\r\n * @return the prefix task name.\r\n */\r\npublic String getTaskNamePrefix() {\r\n    String res = tfTaskPrefix.getText();\r\n    if (res.equals(language.getText(\"newTask\")))\r\n        return null;\r\n\r\n    return res;\r\n}"},
 {"id":3075, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel.initialize()", "ownerclassid":"364", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel", "sourcecode":"/**\r\n * Initialize the component.\r\n */\r\npublic void initialize() {\r\n    cbAutomatic.setSelected(appli.getOptions().getAutomatic());\r\n    // cbDrag.setSelected(appli.getOptions().getDragTime());\r\n    tfTaskPrefix.setText(appli.getOptions().getTaskNamePrefix());\r\n    spLockDAV.setValue(new Integer(appli.getOptions().getLockDAVMinutes()));\r\n    // spUndoNumber.setValue(new\r\n    // Integer(appli.getOptions().getUndoNumber()));\r\n}"},
 {"id":3076, "name":"-init-(java.awt.Frame,net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.-init-(java.awt.Frame,net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"365", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "sourcecode":"/**\r\n * Default constructor.\r\n */\r\npublic ProjectSettingsPanel(Frame owner, IGanttProject project) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"project\")), GanttLanguage.getInstance().getText(\"settingsProject\"), owner);\r\n    myProject = project;\r\n    Box vbproject = Box.createVerticalBox();\r\n    /* JPanel filePanel = new JPanel(new BorderLayout()); filePanel.add(new\n    JLabel(language.getText(\"file\")), BorderLayout.WEST);\n    vbproject.add(filePanel); vbproject.add(tfFile = new JTextField());\n    tfFile.setEditable(false); vbproject.add(new JPanel());\n     */\r\n    JPanel namePanel = new JPanel(new BorderLayout());\r\n    namePanel.add(new JLabel(language.getText(\"name\")), BorderLayout.WEST);\r\n    vbproject.add(namePanel);\r\n    vbproject.add((tfName = new JTextField()));\r\n    vbproject.add(new JPanel());\r\n    JPanel orgaPanel = new JPanel(new BorderLayout());\r\n    orgaPanel.add(new JLabel(language.getText(\"organization\")), BorderLayout.WEST);\r\n    vbproject.add(orgaPanel);\r\n    vbproject.add((tfOrganization = new JTextField()));\r\n    vbproject.add(new JPanel());\r\n    tfWebLink = new JTextField();\r\n    JButton bWeb = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/web_16.gif\")));\r\n    bWeb.setToolTipText(GanttProject.getToolTip(language.getText(\"openWebLink\")));\r\n    bWeb.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            // link to open the web link\r\n            if (!(BrowserControl.displayURL(tfWebLink.getText()))) {\r\n                GanttDialogInfo gdi = new GanttDialogInfo(null, GanttDialogInfo.ERROR, GanttDialogInfo.YES_OPTION, language.getText(\"msg4\"), language.getText(\"error\"));\r\n                gdi.show();\r\n            }\r\n        }\r\n    });\r\n    JPanel webPanel = new JPanel(new BorderLayout());\r\n    webPanel.add(new JLabel(language.getText(\"webLink\")), BorderLayout.WEST);\r\n    webPanel.add(bWeb, BorderLayout.EAST);\r\n    vbproject.add(webPanel);\r\n    vbproject.add(tfWebLink);\r\n    vbproject.add(new JPanel());\r\n    JPanel descrPanel = new JPanel(new BorderLayout());\r\n    descrPanel.add(new JLabel(language.getText(\"shortDescription\")), BorderLayout.WEST);\r\n    vbproject.add(descrPanel);\r\n    taDescr = new JTextArea(12, 25);\r\n    taDescr.setLineWrap(true);\r\n    taDescr.setWrapStyleWord(true);\r\n    JScrollPane scpArea = new JScrollPane(taDescr);\r\n    vbproject.add(scpArea);\r\n    JPanel projectPanel = new JPanel(new BorderLayout());\r\n    projectPanel.add(vbproject, BorderLayout.NORTH);\r\n    vb.add(projectPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":3077, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.-init-()", "ownerclassid":"365", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "sourcecode":"1() {\r\n}"},
 {"id":3078, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.applyChanges(boolean)", "ownerclassid":"365", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "sourcecode":"/**\r\n * This method check if the value has changed, and assk for commit changes.\r\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    if ((((myProject.getProjectName().equals(tfName.getText())) && (myProject.getOrganization().equals(tfOrganization.getText()))) && (myProject.getWebLink().equals(tfWebLink.getText()))) && (myProject.getDescription().equals(taDescr.getText()))) {\r\n        bHasChange = false;\r\n        // no changes\r\n    } else {\r\n        bHasChange = true;\r\n        // apply changes\r\n        if ((!askForApply) || (askForApply && (askForApplyChanges()))) {\r\n            myProject.setProjectName(getProjectName());\r\n            myProject.setDescription(getProjectDescription());\r\n            myProject.setOrganization(getProjectOrganization());\r\n            myProject.setWebLink(getWebLink());\r\n        }\r\n    }\r\n    return bHasChange;\r\n}"},
 {"id":3079, "name":"getProjectDescription()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.getProjectDescription()", "ownerclassid":"365", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "sourcecode":"/**\r\n * Return the project description\r\n */\r\npublic String getProjectDescription() {\r\n    return taDescr.getText();\r\n}"},
 {"id":3080, "name":"getProjectName()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.getProjectName()", "ownerclassid":"365", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "sourcecode":"/**\r\n * Return the selected project name\r\n */\r\npublic String getProjectName() {\r\n    return tfName.getText();\r\n}"},
 {"id":3081, "name":"getProjectOrganization()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.getProjectOrganization()", "ownerclassid":"365", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "sourcecode":"/**\r\n * Return the ogranisation\r\n */\r\npublic String getProjectOrganization() {\r\n    return tfOrganization.getText();\r\n}"},
 {"id":3082, "name":"getWebLink()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.getWebLink()", "ownerclassid":"365", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "sourcecode":"/**\r\n * Return the web link\r\n */\r\npublic String getWebLink() {\r\n    return tfWebLink.getText();\r\n}"},
 {"id":3083, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.initialize()", "ownerclassid":"365", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "sourcecode":"/**\r\n * Initialize the component.\r\n */\r\npublic void initialize() {\r\n    /* if(appli.projectDocument!=null) { String filename =\n    appli.projectDocument.getFilePath(); if(appli.askForSave)\n    filename+=\"*\"; tfFile.setText(filename); }\n     */\r\n    // tfFile.setText(\"see ProjectSettingsPanel line 149 ??\");\r\n    tfName.setText(myProject.getProjectName());\r\n    tfOrganization.setText(myProject.getOrganization());\r\n    tfWebLink.setText(myProject.getWebLink());\r\n    taDescr.setText(myProject.getDescription());\r\n}"},
 {"id":3084, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.-init-()", "ownerclassid":"366", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "sourcecode":"ResourceChartOptionPageProvider() {\r\n}"},
 {"id":3085, "name":"buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"366", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "sourcecode":"public Component buildPageComponent(IGanttProject project, UIFacade uiFacade) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":3086, "name":"getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"366", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return uiFacade.getResourceChart().getOptionGroups();\r\n}"},
 {"id":3087, "name":"getPageID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.getPageID()", "ownerclassid":"366", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "sourcecode":"public String getPageID() {\r\n    return \"resourceChart\";\r\n}"},
 {"id":3088, "name":"hasCustomComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.hasCustomComponent()", "ownerclassid":"366", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "sourcecode":"public boolean hasCustomComponent() {\r\n    return false;\r\n}"},
 {"id":3089, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.toString()", "ownerclassid":"366", "ownerclassname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "sourcecode":"public String toString() {\r\n    return GanttLanguage.getInstance().getText(\"resourcesChart\");\r\n}"},
 {"id":3090, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.RolesSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"367", "ownerclassname":"net.sourceforge.ganttproject.gui.options.RolesSettingsPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic RolesSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"resourceRole\")), GanttLanguage.getInstance().getText(\"settingsRoles\"), parent);\r\n    appli = parent;\r\n    myRolesModel = new RolesTableModel();\r\n    rolesTable = new JTable(myRolesModel);\r\n    rolesTable.setPreferredScrollableViewportSize(new Dimension(400, 350));\r\n    rolesTable.setRowHeight(23);\r\n    rolesTable.getColumnModel().getColumn(0).setPreferredWidth(30);\r\n    rolesTable.getColumnModel().getColumn(1).setPreferredWidth(370);\r\n    vb.add(new JScrollPane(rolesTable));\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":3091, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.RolesSettingsPanel.applyChanges(boolean)", "ownerclassid":"367", "ownerclassname":"net.sourceforge.ganttproject.gui.options.RolesSettingsPanel", "sourcecode":"/**\r\n * This method check if the value has changed, and assk for commit changes.\r\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    System.err.println(\"[RolesSettingsPanel] applyChanges(): \");\r\n    RoleManager roleManager = myRolesModel.getRoleManager();\r\n    bHasChange = myRolesModel.hasChanges();\r\n    if (!(bHasChange)) {\r\n        System.err.println(\"[RolesSettingsPanel] applyChanges(): no changes\");\r\n        return bHasChange;\r\n    }\r\n    myRolesModel.applyChanges();\r\n    appli.setAskForSave(true);\r\n    return bHasChange;\r\n}"},
 {"id":3092, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.RolesSettingsPanel.initialize()", "ownerclassid":"367", "ownerclassname":"net.sourceforge.ganttproject.gui.options.RolesSettingsPanel", "sourcecode":"/**\r\n * Initialize the component.\r\n */\r\npublic void initialize() {\r\n    // automatic initialize with the role model\r\n}"},
 {"id":3093, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.SettingsDialog.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"368", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SettingsDialog", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic SettingsDialog(GanttProject parent) {\r\n    super(parent, GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"settings\")), true, new WelcomeSettingsPanel(parent));\r\n    restoreButton = new JButton(language.getText(\"restoreDefaults\"));\r\n    restoreButton.setName(\"restore\");\r\n    restoreButton.addActionListener(this);\r\n    if ((southPanel) != null) {\r\n        southPanel.add(restoreButton);\r\n    }\r\n    addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(WindowEvent e) {\r\n            super.windowClosing(e);\r\n            if ((settingPanel) != null) {\r\n                settingPanel.rollback();\r\n            }\r\n        }\r\n    });\r\n}"},
 {"id":3094, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.SettingsDialog.-init-()", "ownerclassid":"368", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SettingsDialog", "sourcecode":"1() {\r\n}"},
 {"id":3095, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.SettingsDialog.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"368", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SettingsDialog", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    super.actionPerformed(e);\r\n    if ((e.getSource()) == (restoreButton)) {\r\n        appli.restoreOptions();\r\n        // refresh the current panel\r\n        settingPanel.rollback();\r\n    }\r\n}"},
 {"id":3096, "name":"addPagesFromProviders()", "fullmethod":"net.sourceforge.ganttproject.gui.options.SettingsDialog.addPagesFromProviders()", "ownerclassid":"368", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SettingsDialog", "sourcecode":"private void addPagesFromProviders() {\r\n    Object[] extensions = Mediator.getPluginManager().getExtensions(\"net.sourceforge.ganttproject.OptionPageProvider\", OptionPageProvider.class);\r\n    for (int i = 0; i < (extensions.length); i++) {\r\n        OptionPageProvider nextProvider = ((OptionPageProvider) (extensions[i]));\r\n        addObject(nextProvider, null);\r\n    }\r\n}"},
 {"id":3097, "name":"constructSections()", "fullmethod":"net.sourceforge.ganttproject.gui.options.SettingsDialog.constructSections()", "ownerclassid":"368", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SettingsDialog", "sourcecode":"/**\r\n * Construct the menu settings.\r\n */\r\npublic void constructSections() {\r\n    addPagesFromProviders();\r\n    DefaultMutableTreeNode projectNode = addObject(GanttProject.correctLabel(language.getText(\"project\")), null);\r\n    DefaultMutableTreeNode generalNode = addObject(language.getText(\"general\"), null);\r\n    DefaultMutableTreeNode exportNode = addObject(GanttProject.correctLabel(language.getText(\"export\")), null);\r\n    DefaultMutableTreeNode roleNode = addObject(language.getText(\"resourceRole\"), null);\r\n    // general section\r\n    addObject(language.getText(\"parameters\"), generalNode);\r\n    addObject(language.getText(\"looknfeel\"), generalNode);\r\n    addObject(language.getText(\"languages\"), generalNode);\r\n    // addObject(language.getText(\"colors\"), generalNode);\r\n    // Export section\r\n    // addObject (\"html\", exportNode);\r\n    addObject(\"csv\", exportNode);\r\n    // Just to see the first level of the tree\r\n    treeSections.scrollPathToVisible(new TreePath(projectNode.getPath()));\r\n}"},
 {"id":3098, "name":"valueChanged(javax.swing.event.TreeSelectionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.SettingsDialog.valueChanged(javax.swing.event.TreeSelectionEvent)", "ownerclassid":"368", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SettingsDialog", "sourcecode":"/**\r\n * Callback for the tree selection event.\r\n */\r\npublic void valueChanged(TreeSelectionEvent e) {\r\n    if (reinit)\r\n        return;\r\n\r\n    DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (e.getPath().getLastPathComponent()));\r\n    boolean bHasChange = settingPanel.applyChanges(true);\r\n    // construct the sections\r\n    if (((settingPanel) instanceof LanguageSettingsPanel) && bHasChange) {\r\n        reinit = true;\r\n        rootNode.removeAllChildren();\r\n        treeModel.setRoot(rootNode);\r\n        treeModel.reload();\r\n        constructSections();\r\n        reinit = false;\r\n    }\r\n    // - remove the settingPanel\r\n    mainPanel2.remove(0);\r\n    Box vb = Box.createVerticalBox();\r\n    Object userObject = node.getUserObject();\r\n    if (userObject instanceof OptionPageProvider) {\r\n        settingPanel = new OptionPageProviderPanel(((OptionPageProvider) (userObject)), getProject(), getUIFacade());\r\n    } else {\r\n        // - ask the settingPanel if parameters are changed\r\n        // - Create the new panel\r\n        String sNode = ((String) (node.getUserObject()));\r\n        if (sNode.equals(language.getText(\"languages\")))\r\n            settingPanel = new LanguageSettingsPanel(appli);\r\n        else\r\n            if (sNode.equals(GanttProject.correctLabel(language.getText(\"project\"))))\r\n                settingPanel = new ProjectSettingsPanel(((Frame) (getOwner())), getProject());\r\n            else\r\n                if (sNode.equals(GanttProject.correctLabel(language.getText(\"parameters\"))))\r\n                    settingPanel = new ParametersSettingsPanel(appli);\r\n                else\r\n                    if (sNode.equals(GanttProject.correctLabel(language.getText(\"resourceRole\"))))\r\n                        settingPanel = new RolesSettingsPanel(appli);\r\n                    else\r\n                        if (sNode.equals(language.getText(\"looknfeel\")))\r\n                            settingPanel = new LnFSettingsPanel(appli);\r\n                        else\r\n                            if (sNode.equals(GanttProject.correctLabel(language.getText(\"export\"))))\r\n                                settingPanel = new ExportSettingsPanel(appli);\r\n                            else\r\n                                if (sNode.equals(\"csv\"))\r\n                                    settingPanel = new CSVSettingsPanel(appli);\r\n                                else\r\n                                    settingPanel = new WelcomeSettingsPanel(appli);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        vb.add(new TopPanel((\"  \" + (settingPanel.getTitle())), settingPanel.getComment()));\r\n    }\r\n    // - initialize the panel\r\n    settingPanel.initialize();\r\n    vb.add(settingPanel.getComponent());\r\n    // - add the settingPanel into the main Panel\r\n    mainPanel2.add(vb, 0);\r\n    mainPanel2.repaint();\r\n    mainPanel2.validate();// valide the changes\r\n\r\n}"},
 {"id":3099, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.SpringUtilities.-init-()", "ownerclassid":"369", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SpringUtilities", "sourcecode":"SpringUtilities() {\r\n}"},
 {"id":3100, "name":"getConstraintsForCell(int,int,java.awt.Container,int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.SpringUtilities.getConstraintsForCell(int,int,java.awt.Container,int)", "ownerclassid":"369", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SpringUtilities", "sourcecode":"/* Used by makeCompactGrid. */\r\nprivate static SpringLayout.Constraints getConstraintsForCell(int row, int col, Container parent, int cols) {\r\n    SpringLayout layout = ((SpringLayout) (parent.getLayout()));\r\n    Component c = parent.getComponent(((row * cols) + col));\r\n    return layout.getConstraints(c);\r\n}"},
 {"id":3101, "name":"makeCompactGrid(java.awt.Container,int,int,int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.SpringUtilities.makeCompactGrid(java.awt.Container,int,int,int,int,int,int)", "ownerclassid":"369", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SpringUtilities", "sourcecode":"/**\r\n * Aligns the first <code>rows</code> * <code>cols</code> components of\r\n * <code>parent</code> in a grid. Each component in a column is as wide as\r\n * the maximum preferred width of the components in that column; height is\r\n * similarly determined for each row. The parent is made just big enough to\r\n * fit them all.\r\n *\r\n * @param rows\r\n * \t\tnumber of rows\r\n * @param cols\r\n * \t\tnumber of columns\r\n * @param initialX\r\n * \t\tx location to start the grid at\r\n * @param initialY\r\n * \t\ty location to start the grid at\r\n * @param xPad\r\n * \t\tx padding between cells\r\n * @param yPad\r\n * \t\ty padding between cells\r\n */\r\npublic static void makeCompactGrid(Container parent, int rows, int cols, int initialX, int initialY, int xPad, int yPad) {\r\n    SpringLayout layout;\r\n    try {\r\n        layout = ((SpringLayout) (parent.getLayout()));\r\n    } catch (ClassCastException exc) {\r\n        System.err.println(\"The first argument to makeCompactGrid must use SpringLayout.\");\r\n        return;\r\n    }\r\n    // Align all cells in each column and make them the same width.\r\n    Spring x = Spring.constant(initialX);\r\n    for (int c = 0; c < cols; c++) {\r\n        Spring width = Spring.constant(0);\r\n        for (int r = 0; r < rows; r++) {\r\n            width = Spring.max(width, SpringUtilities.getConstraintsForCell(r, c, parent, cols).getWidth());\r\n        }\r\n        for (int r = 0; r < rows; r++) {\r\n            SpringLayout.Constraints constraints = SpringUtilities.getConstraintsForCell(r, c, parent, cols);\r\n            constraints.setX(x);\r\n            constraints.setWidth(width);\r\n        }\r\n        x = Spring.sum(x, Spring.sum(width, Spring.constant(xPad)));\r\n    }\r\n    // Align all cells in each row and make them the same height.\r\n    Spring y = Spring.constant(initialY);\r\n    for (int r = 0; r < rows; r++) {\r\n        Spring height = Spring.constant(0);\r\n        for (int c = 0; c < cols; c++) {\r\n            height = Spring.max(height, SpringUtilities.getConstraintsForCell(r, c, parent, cols).getHeight());\r\n        }\r\n        for (int c = 0; c < cols; c++) {\r\n            SpringLayout.Constraints constraints = SpringUtilities.getConstraintsForCell(r, c, parent, cols);\r\n            constraints.setY(y);\r\n            constraints.setHeight(height);\r\n        }\r\n        y = Spring.sum(y, Spring.sum(height, Spring.constant(yPad)));\r\n    }\r\n    // Set the parents size.\r\n    SpringLayout.Constraints pCons = layout.getConstraints(parent);\r\n    pCons.setConstraint(SpringLayout.SOUTH, y);\r\n    pCons.setConstraint(SpringLayout.EAST, x);\r\n}"},
 {"id":3102, "name":"makeGrid(java.awt.Container,int,int,int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.options.SpringUtilities.makeGrid(java.awt.Container,int,int,int,int,int,int)", "ownerclassid":"369", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SpringUtilities", "sourcecode":"/**\r\n * Aligns the first <code>rows</code> * <code>cols</code> components of\r\n * <code>parent</code> in a grid. Each component is as big as the maximum\r\n * preferred width and height of the components. The parent is made just big\r\n * enough to fit them all.\r\n *\r\n * @param rows\r\n * \t\tnumber of rows\r\n * @param cols\r\n * \t\tnumber of columns\r\n * @param initialX\r\n * \t\tx location to start the grid at\r\n * @param initialY\r\n * \t\ty location to start the grid at\r\n * @param xPad\r\n * \t\tx padding between cells\r\n * @param yPad\r\n * \t\ty padding between cells\r\n */\r\npublic static void makeGrid(Container parent, int rows, int cols, int initialX, int initialY, int xPad, int yPad) {\r\n    SpringLayout layout;\r\n    try {\r\n        layout = ((SpringLayout) (parent.getLayout()));\r\n    } catch (ClassCastException exc) {\r\n        System.err.println(\"The first argument to makeGrid must use SpringLayout.\");\r\n        return;\r\n    }\r\n    Spring xPadSpring = Spring.constant(xPad);\r\n    Spring yPadSpring = Spring.constant(yPad);\r\n    Spring initialXSpring = Spring.constant(initialX);\r\n    Spring initialYSpring = Spring.constant(initialY);\r\n    int max = rows * cols;\r\n    // Calculate Springs that are the max of the width/height so that all\r\n    // cells have the same size.\r\n    Spring maxWidthSpring = layout.getConstraints(parent.getComponent(0)).getWidth();\r\n    Spring maxHeightSpring = layout.getConstraints(parent.getComponent(0)).getWidth();\r\n    for (int i = 1; i < max; i++) {\r\n        SpringLayout.Constraints cons = layout.getConstraints(parent.getComponent(i));\r\n        maxWidthSpring = Spring.max(maxWidthSpring, cons.getWidth());\r\n        maxHeightSpring = Spring.max(maxHeightSpring, cons.getHeight());\r\n    }\r\n    // Apply the new width/height Spring. This forces all the\r\n    // components to have the same size.\r\n    for (int i = 0; i < max; i++) {\r\n        SpringLayout.Constraints cons = layout.getConstraints(parent.getComponent(i));\r\n        cons.setWidth(maxWidthSpring);\r\n        cons.setHeight(maxHeightSpring);\r\n    }\r\n    // Then adjust the x/y constraints of all the cells so that they\r\n    // are aligned in a grid.\r\n    SpringLayout.Constraints lastCons = null;\r\n    SpringLayout.Constraints lastRowCons = null;\r\n    for (int i = 0; i < max; i++) {\r\n        SpringLayout.Constraints cons = layout.getConstraints(parent.getComponent(i));\r\n        if ((i % cols) == 0) {\r\n            // start of new row\r\n            lastRowCons = lastCons;\r\n            cons.setX(initialXSpring);\r\n        } else {\r\n            // x position depends on previous component\r\n            cons.setX(Spring.sum(lastCons.getConstraint(SpringLayout.EAST), xPadSpring));\r\n        }\r\n        if ((i / cols) == 0) {\r\n            // first row\r\n            cons.setY(initialYSpring);\r\n        } else {\r\n            // y position depends on previous row\r\n            cons.setY(Spring.sum(lastRowCons.getConstraint(SpringLayout.SOUTH), yPadSpring));\r\n        }\r\n        lastCons = cons;\r\n    }\r\n    // Set the parents size.\r\n    SpringLayout.Constraints pCons = layout.getConstraints(parent);\r\n    pCons.setConstraint(SpringLayout.SOUTH, Spring.sum(Spring.constant(yPad), lastCons.getConstraint(SpringLayout.SOUTH)));\r\n    pCons.setConstraint(SpringLayout.EAST, Spring.sum(Spring.constant(xPad), lastCons.getConstraint(SpringLayout.EAST)));\r\n}"},
 {"id":3103, "name":"printSizes(java.awt.Component)", "fullmethod":"net.sourceforge.ganttproject.gui.options.SpringUtilities.printSizes(java.awt.Component)", "ownerclassid":"369", "ownerclassname":"net.sourceforge.ganttproject.gui.options.SpringUtilities", "sourcecode":"/**\r\n * A debugging utility that prints to stdout the components minimum,\r\n * preferred, and maximum sizes.\r\n */\r\npublic static void printSizes(Component c) {\r\n    System.out.println((\"minimumSize = \" + (c.getMinimumSize())));\r\n    System.out.println((\"preferredSize = \" + (c.getPreferredSize())));\r\n    System.out.println((\"maximumSize = \" + (c.getMaximumSize())));\r\n}"},
 {"id":3104, "name":"-init-(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.TopPanel.-init-(java.lang.String,java.lang.String)", "ownerclassid":"371", "ownerclassname":"net.sourceforge.ganttproject.gui.options.TopPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic TopPanel(String title, String comment) {\r\n    setLayout(new BorderLayout());\r\n    Box vb = Box.createVerticalBox();\r\n    add(vb, BorderLayout.CENTER);\r\n    final int iWidth = 420;\r\n    // Paint a gray border around the panel\r\n    JPanel topPanel = new JPanel(new BorderLayout()) {\r\n        public void paint(Graphics g) {\r\n            super.paint(g);\r\n            g.setColor(new Color(0.67F, 0.66F, 0.6F));\r\n            g.drawRect(0, 0, ((getWidth()) - 1), 24);\r\n        }\r\n    };\r\n    topPanel.setBackground(Color.white);\r\n    JLabel labelTitle = new JLabel((\" \" + title));\r\n    labelTitle.setFont(new Font(this.getFont().getFontName(), Font.BOLD, this.getFont().getSize()));\r\n    topPanel.add(labelTitle, BorderLayout.WEST);\r\n    topPanel.add(new TopPanel.myIconPanel(), BorderLayout.EAST);\r\n    topPanel.setPreferredSize(new Dimension(iWidth, 26));\r\n    vb.add(topPanel);\r\n    JTextArea textArea = new JTextArea(comment);\r\n    textArea.setEditable(false);\r\n    textArea.setDragEnabled(false);\r\n    textArea.setLineWrap(true);\r\n    textArea.setWrapStyleWord(true);\r\n    textArea.setMargin(new Insets(3, 5, 3, 5));\r\n    textArea.setBackground(getBackground());\r\n    vb.add(textArea);\r\n    // vb.setBorder(LineBorder.createBlackLineBorder());\r\n    applyComponentOrientation(GanttLanguage.getInstance().getComponentOrientation());\r\n}"},
 {"id":3105, "name":"-init-(java.awt.LayoutManager)", "fullmethod":"net.sourceforge.ganttproject.gui.options.TopPanel.-init-(java.awt.LayoutManager)", "ownerclassid":"371", "ownerclassname":"net.sourceforge.ganttproject.gui.options.TopPanel", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":3106, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.TopPanel.-init-()", "ownerclassid":"371", "ownerclassname":"net.sourceforge.ganttproject.gui.options.TopPanel", "sourcecode":"public myIconPanel() {\r\n    icon = new ImageIcon(getClass().getResource(\"/icons/top.gif\"));\r\n    applyComponentOrientation(GanttLanguage.getInstance().getComponentOrientation());\r\n}"},
 {"id":3107, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.options.TopPanel$myIconPanel.-init-()", "ownerclassid":"370", "ownerclassname":"net.sourceforge.ganttproject.gui.options.TopPanel$myIconPanel", "sourcecode":"public myIconPanel() {\r\n    icon = new ImageIcon(getClass().getResource(\"/icons/top.gif\"));\r\n    applyComponentOrientation(GanttLanguage.getInstance().getComponentOrientation());\r\n}"},
 {"id":3108, "name":"getPreferredSize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.TopPanel$myIconPanel.getPreferredSize()", "ownerclassid":"370", "ownerclassname":"net.sourceforge.ganttproject.gui.options.TopPanel$myIconPanel", "sourcecode":"/**\r\n * The prefered size of this panel\r\n */\r\npublic Dimension getPreferredSize() {\r\n    return new Dimension(140, 20);\r\n}"},
 {"id":3109, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.gui.options.TopPanel$myIconPanel.paintComponent(java.awt.Graphics)", "ownerclassid":"370", "ownerclassname":"net.sourceforge.ganttproject.gui.options.TopPanel$myIconPanel", "sourcecode":"public void paintComponent(Graphics g) {\r\n    icon.paintIcon(this, g, 0, 3);\r\n}"},
 {"id":3110, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.options.WelcomeSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"372", "ownerclassname":"net.sourceforge.ganttproject.gui.options.WelcomeSettingsPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic WelcomeSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"settings\")), GanttLanguage.getInstance().getText(\"settingsWelcome\"), parent);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":3111, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.WelcomeSettingsPanel.applyChanges(boolean)", "ownerclassid":"372", "ownerclassname":"net.sourceforge.ganttproject.gui.options.WelcomeSettingsPanel", "sourcecode":"/**\r\n * This method check if the value has changed, and assk for commit changes.\r\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    // nothing to do :)\r\n    return false;\r\n}"},
 {"id":3112, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.options.WelcomeSettingsPanel.initialize()", "ownerclassid":"372", "ownerclassname":"net.sourceforge.ganttproject.gui.options.WelcomeSettingsPanel", "sourcecode":"/**\r\n * Initialize the component.\r\n */\r\npublic void initialize() {\r\n    // nothing to do :)\r\n}"},
 {"id":3113, "name":"isChecked()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.BooleanOption.isChecked()", "ownerclassid":"373", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.BooleanOption", "sourcecode":"boolean isChecked();"},
 {"id":3114, "name":"toggle()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.BooleanOption.toggle()", "ownerclassid":"373", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.BooleanOption", "sourcecode":"void toggle();"},
 {"id":3115, "name":"addChangeValueListener(net.sourceforge.ganttproject.gui.options.model.ChangeValueListener)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ChangeValueDispatcher.addChangeValueListener(net.sourceforge.ganttproject.gui.options.model.ChangeValueListener)", "ownerclassid":"374", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueDispatcher", "sourcecode":"public void addChangeValueListener(ChangeValueListener listener);"},
 {"id":3116, "name":"-init-(java.lang.Object,java.lang.Object,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent.-init-(java.lang.Object,java.lang.Object,java.lang.Object)", "ownerclassid":"375", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent", "sourcecode":"public ChangeValueEvent(Object id, Object oldValue, Object newValue) {\r\n    myID = id;\r\n    myOldValue = oldValue;\r\n    myNewValue = newValue;\r\n}"},
 {"id":3117, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent.getID()", "ownerclassid":"375", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent", "sourcecode":"public Object getID() {\r\n    return myID;\r\n}"},
 {"id":3118, "name":"getNewValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent.getNewValue()", "ownerclassid":"375", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent", "sourcecode":"public Object getNewValue() {\r\n    return myNewValue;\r\n}"},
 {"id":3119, "name":"getOldValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent.getOldValue()", "ownerclassid":"375", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent", "sourcecode":"public Object getOldValue() {\r\n    return myOldValue;\r\n}"},
 {"id":3120, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent.toString()", "ownerclassid":"375", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent", "sourcecode":"public String toString() {\r\n    return (((((\"[id:\" + (myID)) + \", old:\") + (myOldValue)) + \", new: \") + (myNewValue)) + \"]\";\r\n}"},
 {"id":3121, "name":"changeValue(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ChangeValueListener.changeValue(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "ownerclassid":"376", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueListener", "sourcecode":"public void changeValue(ChangeValueEvent event);"},
 {"id":3122, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ColorOption.getValue()", "ownerclassid":"377", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ColorOption", "sourcecode":"public Color getValue();"},
 {"id":3123, "name":"setValue(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.ColorOption.setValue(java.awt.Color)", "ownerclassid":"377", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.ColorOption", "sourcecode":"public void setValue(Color value);"},
 {"id":3124, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DateOption.getValue()", "ownerclassid":"378", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DateOption", "sourcecode":"Date getValue();"},
 {"id":3125, "name":"setValue(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DateOption.setValue(java.util.Date)", "ownerclassid":"378", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DateOption", "sourcecode":"void setValue(Date value);"},
 {"id":3126, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption.-init-(java.lang.String)", "ownerclassid":"379", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption", "sourcecode":"public DefaultBooleanOption(String id) {\r\n    super(id);\r\n}"},
 {"id":3127, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption.commit()", "ownerclassid":"379", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    myValue = myLockedValue;\r\n}"},
 {"id":3128, "name":"getPersistentValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption.getPersistentValue()", "ownerclassid":"379", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption", "sourcecode":"public String getPersistentValue() {\r\n    return Boolean.toString(isChecked());\r\n}"},
 {"id":3129, "name":"isChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption.isChanged()", "ownerclassid":"379", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption", "sourcecode":"public boolean isChanged() {\r\n    if (isLocked()) {\r\n        return (myValue) != (myLockedValue);\r\n    }\r\n    return false;\r\n}"},
 {"id":3130, "name":"isChecked()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption.isChecked()", "ownerclassid":"379", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption", "sourcecode":"public boolean isChecked() {\r\n    return myValue;\r\n}"},
 {"id":3131, "name":"loadPersistentValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption.loadPersistentValue(java.lang.String)", "ownerclassid":"379", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption", "sourcecode":"public void loadPersistentValue(String value) {\r\n    myLockedValue = Boolean.valueOf(value).booleanValue();\r\n}"},
 {"id":3132, "name":"lock()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption.lock()", "ownerclassid":"379", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption", "sourcecode":"public void lock() {\r\n    super.lock();\r\n    myLockedValue = myValue;\r\n}"},
 {"id":3133, "name":"toggle()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption.toggle()", "ownerclassid":"379", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultBooleanOption", "sourcecode":"public void toggle() {\r\n    myLockedValue = !(myLockedValue);\r\n}"},
 {"id":3134, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption.-init-(java.lang.String)", "ownerclassid":"380", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption", "sourcecode":"public DefaultColorOption(String id) {\r\n    super(id);\r\n}"},
 {"id":3135, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption.commit()", "ownerclassid":"380", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    myValue = myLockedValue;\r\n}"},
 {"id":3136, "name":"getPersistentValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption.getPersistentValue()", "ownerclassid":"380", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption", "sourcecode":"public String getPersistentValue() {\r\n    return (getValue()) == null ? null : ColorConvertion.getColor(getValue());\r\n}"},
 {"id":3137, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption.getValue()", "ownerclassid":"380", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption", "sourcecode":"public Color getValue() {\r\n    return myValue;\r\n}"},
 {"id":3138, "name":"isChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption.isChanged()", "ownerclassid":"380", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption", "sourcecode":"public boolean isChanged() {\r\n    if (isLocked()) {\r\n        if ((myValue) != null) {\r\n            return false == (myValue.equals(myLockedValue));\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":3139, "name":"loadPersistentValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption.loadPersistentValue(java.lang.String)", "ownerclassid":"380", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption", "sourcecode":"public void loadPersistentValue(String value) {\r\n    myLockedValue = ColorConvertion.determineColor(value);\r\n}"},
 {"id":3140, "name":"setValue(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption.setValue(java.awt.Color)", "ownerclassid":"380", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultColorOption", "sourcecode":"public void setValue(Color value) {\r\n    if (!(isLocked())) {\r\n        throw new IllegalStateException(\"Lock option before setting value\");\r\n    }\r\n    myLockedValue = value;\r\n}"},
 {"id":3141, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption.-init-(java.lang.String)", "ownerclassid":"381", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption", "sourcecode":"public DefaultDateOption(String id) {\r\n    super(id);\r\n}"},
 {"id":3142, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption.commit()", "ownerclassid":"381", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    myValue = myLockedValue;\r\n}"},
 {"id":3143, "name":"getPersistentValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption.getPersistentValue()", "ownerclassid":"381", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption", "sourcecode":"public String getPersistentValue() {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":3144, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption.getValue()", "ownerclassid":"381", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption", "sourcecode":"public Date getValue() {\r\n    return myValue;\r\n}"},
 {"id":3145, "name":"isChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption.isChanged()", "ownerclassid":"381", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption", "sourcecode":"public boolean isChanged() {\r\n    if (isLocked()) {\r\n        if ((myValue) != null) {\r\n            return false == (myValue.equals(myLockedValue));\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":3146, "name":"loadPersistentValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption.loadPersistentValue(java.lang.String)", "ownerclassid":"381", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption", "sourcecode":"public void loadPersistentValue(String value) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3147, "name":"setValue(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption.setValue(java.util.Date)", "ownerclassid":"381", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultDateOption", "sourcecode":"public void setValue(Date value) {\r\n    if (!(isLocked())) {\r\n        throw new IllegalStateException(\"Lock option before setting value\");\r\n    }\r\n    fireChangeValueEvent(new ChangeValueEvent(getID(), myLockedValue, value));\r\n    myLockedValue = value;\r\n}"},
 {"id":3148, "name":"-init-(java.lang.String,java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.-init-(java.lang.String,java.lang.String[])", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public DefaultEnumerationOption(String id, String[] values) {\r\n    super(id);\r\n    myValues = values;\r\n}"},
 {"id":3149, "name":"-init-(java.lang.String,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.-init-(java.lang.String,java.util.List)", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public DefaultEnumerationOption(String id, List values) {\r\n    super(id);\r\n    myValues = ((String[]) (values.toArray(new String[0])));\r\n}"},
 {"id":3150, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.commit()", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    myValue = myLockedValue;\r\n}"},
 {"id":3151, "name":"getAvailableValues()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.getAvailableValues()", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public String[] getAvailableValues() {\r\n    return myValues;\r\n}"},
 {"id":3152, "name":"getPersistentValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.getPersistentValue()", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public String getPersistentValue() {\r\n    return getValue();\r\n}"},
 {"id":3153, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.getValue()", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public String getValue() {\r\n    return myValue;\r\n}"},
 {"id":3154, "name":"isChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.isChanged()", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public boolean isChanged() {\r\n    if (isLocked()) {\r\n        if ((myValue) != null) {\r\n            return false == (myValue.equals(myLockedValue));\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":3155, "name":"loadPersistentValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.loadPersistentValue(java.lang.String)", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public void loadPersistentValue(String value) {\r\n    setValue(value);\r\n}"},
 {"id":3156, "name":"setValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption.setValue(java.lang.String)", "ownerclassid":"382", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultEnumerationOption", "sourcecode":"public void setValue(String value) {\r\n    if (!(isLocked())) {\r\n        throw new IllegalStateException(\"Lock option before setting value\");\r\n    }\r\n    ChangeValueEvent event = new ChangeValueEvent(getID(), myLockedValue, value);\r\n    myLockedValue = value;\r\n    fireChangeValueEvent(event);\r\n}"},
 {"id":3157, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption.-init-(java.lang.String)", "ownerclassid":"383", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption", "sourcecode":"public DefaultStringOption(String id) {\r\n    super(id);\r\n}"},
 {"id":3158, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption.commit()", "ownerclassid":"383", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption", "sourcecode":"public void commit() {\r\n    super.commit();\r\n    myValue = myLockedValue;\r\n}"},
 {"id":3159, "name":"getPersistentValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption.getPersistentValue()", "ownerclassid":"383", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption", "sourcecode":"public String getPersistentValue() {\r\n    return getValue();\r\n}"},
 {"id":3160, "name":"getUncommitedValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption.getUncommitedValue()", "ownerclassid":"383", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption", "sourcecode":"public String getUncommitedValue() {\r\n    return myLockedValue;\r\n}"},
 {"id":3161, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption.getValue()", "ownerclassid":"383", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption", "sourcecode":"public String getValue() {\r\n    return myValue;\r\n}"},
 {"id":3162, "name":"isChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption.isChanged()", "ownerclassid":"383", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption", "sourcecode":"public boolean isChanged() {\r\n    if (isLocked()) {\r\n        if ((myValue) != null) {\r\n            return false == (myValue.equals(myLockedValue));\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":3163, "name":"loadPersistentValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption.loadPersistentValue(java.lang.String)", "ownerclassid":"383", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption", "sourcecode":"public void loadPersistentValue(String value) {\r\n    setValue(value);\r\n}"},
 {"id":3164, "name":"setValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption.setValue(java.lang.String)", "ownerclassid":"383", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.DefaultStringOption", "sourcecode":"public void setValue(String value) {\r\n    if (!(isLocked())) {\r\n        throw new IllegalStateException(\"Lock option before setting value\");\r\n    }\r\n    ChangeValueEvent event = new ChangeValueEvent(getID(), myLockedValue, value);\r\n    myLockedValue = value;\r\n    fireChangeValueEvent(event);\r\n}"},
 {"id":3165, "name":"getAvailableValues()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption.getAvailableValues()", "ownerclassid":"384", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption", "sourcecode":"String[] getAvailableValues();"},
 {"id":3166, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption.getValue()", "ownerclassid":"384", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption", "sourcecode":"String getValue();"},
 {"id":3167, "name":"setValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption.setValue(java.lang.String)", "ownerclassid":"384", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption", "sourcecode":"void setValue(String value);"},
 {"id":3168, "name":"getAttributeName()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GP1XOptionConverter.getAttributeName()", "ownerclassid":"385", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GP1XOptionConverter", "sourcecode":"String getAttributeName();"},
 {"id":3169, "name":"getTagName()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GP1XOptionConverter.getTagName()", "ownerclassid":"385", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GP1XOptionConverter", "sourcecode":"String getTagName();"},
 {"id":3170, "name":"loadValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GP1XOptionConverter.loadValue(java.lang.String)", "ownerclassid":"385", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GP1XOptionConverter", "sourcecode":"void loadValue(String legacyValue);"},
 {"id":3171, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.-init-(java.lang.String)", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"protected GPAbstractOption(String id) {\r\n    myID = id;\r\n}"},
 {"id":3172, "name":"addChangeValueListener(net.sourceforge.ganttproject.gui.options.model.ChangeValueListener)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.addChangeValueListener(net.sourceforge.ganttproject.gui.options.model.ChangeValueListener)", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"public void addChangeValueListener(ChangeValueListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":3173, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.commit()", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"public void commit() {\r\n    if (!(isLocked())) {\r\n        throw new IllegalStateException(\"Cant commit not locked option\");\r\n    }\r\n    setLocked(false);\r\n}"},
 {"id":3174, "name":"fireChangeValueEvent(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.fireChangeValueEvent(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"protected void fireChangeValueEvent(ChangeValueEvent event) {\r\n    Iterator it = myListeners.iterator();\r\n    while (it.hasNext()) {\r\n        ((ChangeValueListener) (it.next())).changeValue(event);\r\n    } \r\n}"},
 {"id":3175, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.getID()", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"public String getID() {\r\n    return myID;\r\n}"},
 {"id":3176, "name":"isLocked()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.isLocked()", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"protected boolean isLocked() {\r\n    return isLocked;\r\n}"},
 {"id":3177, "name":"lock()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.lock()", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"public void lock() {\r\n    if (isLocked) {\r\n        throw new IllegalStateException(\"Already locked\");\r\n    }\r\n    isLocked = true;\r\n}"},
 {"id":3178, "name":"rollback()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.rollback()", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"public void rollback() {\r\n    if (!(isLocked())) {\r\n        throw new IllegalStateException(\"Cant rollback not locked option\");\r\n    }\r\n    setLocked(false);\r\n}"},
 {"id":3179, "name":"setLocked(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.setLocked(boolean)", "ownerclassid":"386", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "sourcecode":"protected void setLocked(boolean isLocked) {\r\n    this.isLocked = isLocked;\r\n}"},
 {"id":3180, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOption.commit()", "ownerclassid":"387", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOption", "sourcecode":"void commit();"},
 {"id":3181, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOption.getID()", "ownerclassid":"387", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOption", "sourcecode":"String getID();"},
 {"id":3182, "name":"getPersistentValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOption.getPersistentValue()", "ownerclassid":"387", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOption", "sourcecode":"String getPersistentValue();"},
 {"id":3183, "name":"isChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOption.isChanged()", "ownerclassid":"387", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOption", "sourcecode":"boolean isChanged();"},
 {"id":3184, "name":"loadPersistentValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOption.loadPersistentValue(java.lang.String)", "ownerclassid":"387", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOption", "sourcecode":"void loadPersistentValue(String value);"},
 {"id":3185, "name":"lock()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOption.lock()", "ownerclassid":"387", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOption", "sourcecode":"void lock();"},
 {"id":3186, "name":"rollback()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOption.rollback()", "ownerclassid":"387", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOption", "sourcecode":"void rollback();"},
 {"id":3187, "name":"optionsChanged()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionChangeListener.optionsChanged()", "ownerclassid":"388", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionChangeListener", "sourcecode":"public void optionsChanged();"},
 {"id":3188, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[])", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[])", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public GPOptionGroup(String id, GPOption[] options) {\r\n    myID = id;\r\n    myOptions = options;\r\n}"},
 {"id":3189, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.commit()", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public void commit() {\r\n    for (int i = 0; i < (myOptions.length); i++) {\r\n        myOptions[i].commit();\r\n    }\r\n}"},
 {"id":3190, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.getID()", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public String getID() {\r\n    return myID;\r\n}"},
 {"id":3191, "name":"getOption(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.getOption(java.lang.String)", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public GPOption getOption(String optionID) {\r\n    assert optionID != null;\r\n    for (int i = 0; i < (myOptions.length); i++) {\r\n        if (myOptions[i].getID().equals(optionID)) {\r\n            return myOptions[i];\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":3192, "name":"getOptions()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.getOptions()", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public GPOption[] getOptions() {\r\n    return myOptions;\r\n}"},
 {"id":3193, "name":"isTitled()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.isTitled()", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public boolean isTitled() {\r\n    return isTitled;\r\n}"},
 {"id":3194, "name":"lock()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.lock()", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public void lock() {\r\n    for (int i = 0; i < (myOptions.length); i++) {\r\n        myOptions[i].lock();\r\n    }\r\n}"},
 {"id":3195, "name":"rollback()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.rollback()", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public void rollback() {\r\n    for (int i = 0; i < (myOptions.length); i++) {\r\n        myOptions[i].rollback();\r\n    }\r\n}"},
 {"id":3196, "name":"setTitled(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup.setTitled(boolean)", "ownerclassid":"389", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "sourcecode":"public void setTitled(boolean isTitled) {\r\n    this.isTitled = isTitled;\r\n}"},
 {"id":3197, "name":"buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"390", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "sourcecode":"Component buildPageComponent(IGanttProject project, UIFacade uiFacade);"},
 {"id":3198, "name":"getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"390", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "sourcecode":"GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade);"},
 {"id":3199, "name":"getPageID()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider.getPageID()", "ownerclassid":"390", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "sourcecode":"String getPageID();"},
 {"id":3200, "name":"hasCustomComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider.hasCustomComponent()", "ownerclassid":"390", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "sourcecode":"boolean hasCustomComponent();"},
 {"id":3201, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.StringOption.getValue()", "ownerclassid":"391", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.StringOption", "sourcecode":"public String getValue();"},
 {"id":3202, "name":"setValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.options.model.StringOption.setValue(java.lang.String)", "ownerclassid":"391", "ownerclassname":"net.sourceforge.ganttproject.gui.options.model.StringOption", "sourcecode":"public void setValue(String value);"},
 {"id":3203, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"392", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "sourcecode":"public GanttCompareToPreviousStateBean(GanttProject project) {\r\n    myPreviousStates = project.getPreviouStates();\r\n    init();\r\n}"},
 {"id":3204, "name":"addActionListener(java.awt.event.ActionListener)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.addActionListener(java.awt.event.ActionListener)", "ownerclassid":"392", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "sourcecode":"public void addActionListener(ActionListener l) {\r\n    okButton.addActionListener(l);\r\n    cancelButton.addActionListener(l);\r\n    removeButton.addActionListener(l);\r\n    nameComboBox.addActionListener(l);\r\n}"},
 {"id":3205, "name":"constructGeneralPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.constructGeneralPanel()", "ownerclassid":"392", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "sourcecode":"private JPanel constructGeneralPanel() {\r\n    JPanel generalPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 40, 20));\r\n    nameComboBox = new JComboBox();\r\n    nameComboBox.setName(\"nameComboBox\");\r\n    nameComboBox.addItem(lang.getText(\"none\"));\r\n    for (int i = 0; i < (myPreviousStates.size()); i++)\r\n        nameComboBox.addItem(((GanttPreviousState) (myPreviousStates.get(i))).getName());\r\n\r\n    nameComboBox.setSelectedIndex(myPreviousStates.size());\r\n    nameComboBox.setName(\"nameComboBox\");\r\n    removeButton = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/delete_16.gif\")));\r\n    removeButton.setToolTipText(GanttProject.getToolTip(lang.getText(\"delete\")));\r\n    removeButton.setName(\"remove\");\r\n    generalPanel.add(nameComboBox);\r\n    generalPanel.add(removeButton);\r\n    generalPanel.setBorder(new TitledBorder(new EtchedBorder(), lang.getText(\"previousStates\")));\r\n    return generalPanel;\r\n}"},
 {"id":3206, "name":"constructSouthPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.constructSouthPanel()", "ownerclassid":"392", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "sourcecode":"private JPanel constructSouthPanel() {\r\n    okButton = new JButton(lang.getText(\"ok\"));\r\n    okButton.setName(\"ok\");\r\n    if ((getRootPane()) != null)\r\n        getRootPane().setDefaultButton(okButton);\r\n    // set ok the defuault\r\n\r\n    // button when press\r\n    // \"enter\" --> check\r\n    // because\r\n    // getRootPane()==null\r\n    // !!!\r\n    cancelButton = new JButton(lang.getText(\"cancel\"));\r\n    cancelButton.setName(\"cancel\");\r\n    southPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 10, 10));\r\n    southPanel.add(okButton);\r\n    southPanel.add(cancelButton);\r\n    return southPanel;\r\n}"},
 {"id":3207, "name":"getSelected()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.getSelected()", "ownerclassid":"392", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "sourcecode":"public int getSelected() {\r\n    return nameComboBox.getSelectedIndex();\r\n}"},
 {"id":3208, "name":"init()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.init()", "ownerclassid":"392", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "sourcecode":"public void init() {\r\n    setLayout(new BorderLayout());\r\n    add(constructGeneralPanel(), BorderLayout.NORTH);\r\n    add(constructSouthPanel(), BorderLayout.SOUTH);\r\n}"},
 {"id":3209, "name":"removeItem()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.removeItem()", "ownerclassid":"392", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "sourcecode":"public void removeItem() {\r\n    int index = nameComboBox.getSelectedIndex();\r\n    nameComboBox.removeItemAt(index);\r\n    ((GanttPreviousState) (myPreviousStates.get((index - 1)))).remove();\r\n    myPreviousStates.remove((index - 1));\r\n}"},
 {"id":3210, "name":"setEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.setEnabled(boolean)", "ownerclassid":"392", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "sourcecode":"public void setEnabled(boolean b) {\r\n    removeButton.setEnabled(b);\r\n}"},
 {"id":3211, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttDialogCompareToPreviousState.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"393", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogCompareToPreviousState", "sourcecode":"public GanttDialogCompareToPreviousState(GanttProject project) {\r\n    super(project, GanttLanguage.getInstance().getText(\"comparePrev\"), true);\r\n    myProject = project;\r\n    compareToPreviousBean = new GanttCompareToPreviousStateBean(project);\r\n    compareToPreviousBean.addActionListener(this);\r\n    Container cp = getContentPane();\r\n    cp.add(compareToPreviousBean, BorderLayout.CENTER);\r\n    this.pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n}"},
 {"id":3212, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttDialogCompareToPreviousState.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"393", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogCompareToPreviousState", "sourcecode":"public void actionPerformed(ActionEvent evt) {\r\n    if ((evt.getSource()) instanceof JButton) {\r\n        JButton button = ((JButton) (evt.getSource()));\r\n        if (button.getName().equals(\"ok\")) {\r\n            if ((compareToPreviousBean.getSelected()) != 0) {\r\n                try {\r\n                    ArrayList tasks = ((GanttPreviousState) (myProject.getPreviouStates().get(((compareToPreviousBean.getSelected()) - 1)))).load();\r\n                    myProject.getArea().setPreviousStateTasks(tasks);\r\n                    myProject.getArea().repaint();\r\n                } catch (Exception e) {\r\n                    myProject.getUIFacade().showErrorDialog(e);\r\n                }\r\n            } else\r\n                myProject.getArea().setPreviousStateTasks(null);\r\n\r\n            this.setVisible(false);\r\n            dispose();\r\n        } else\r\n            if (button.getName().equals(\"cancel\")) {\r\n                this.setVisible(false);\r\n                dispose();\r\n            } else\r\n                if (button.getName().equals(\"remove\")) {\r\n                    GanttDialogInfo gdi = new GanttDialogInfo(myProject, GanttDialogInfo.WARNING, GanttDialogInfo.YES_NO_OPTION, lang.getText(\"msg25\"), lang.getText(\"warning\"));\r\n                    gdi.show();\r\n                    if ((gdi.res) == (GanttDialogInfo.YES)) {\r\n                        compareToPreviousBean.removeItem();\r\n                        // this.setVisible(false);\r\n                        // dispose();\r\n                    }\r\n                }\r\n\r\n\r\n    } else\r\n        if ((evt.getSource()) instanceof JComboBox) {\r\n            JComboBox comboBox = ((JComboBox) (evt.getSource()));\r\n            if (comboBox.getName().equals(\"nameComboBox\")) {\r\n                if ((compareToPreviousBean.getSelected()) == 0)\r\n                    compareToPreviousBean.setEnabled(false);\r\n                else\r\n                    compareToPreviousBean.setEnabled(true);\r\n\r\n            }\r\n        }\r\n\r\n}"},
 {"id":3213, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"394", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState", "sourcecode":"public GanttDialogSaveAsPreviousState(GanttProject project) {\r\n    super(project, GanttLanguage.getInstance().getText(\"saveCurrent\"), true);\r\n    myProject = project;\r\n    previousStateBean = new GanttSaveAsPreviousStateBean(myProject);\r\n    previousStateBean.addActionListener(this);\r\n    Container cp = getContentPane();\r\n    cp.add(previousStateBean, BorderLayout.CENTER);\r\n    this.pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n}"},
 {"id":3214, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"394", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState", "sourcecode":"public void actionPerformed(ActionEvent evt) {\r\n    if ((evt.getSource()) instanceof JButton) {\r\n        JButton button = ((JButton) (evt.getSource()));\r\n        if (button.getName().equals(\"ok\")) {\r\n            boolean overWrite = true;\r\n            for (int i = 0; i < (myProject.getPreviouStates().size()); i++)\r\n                if (((GanttPreviousState) (myProject.getPreviouStates().get(i))).getName().equals(previousStateBean.getName())) {\r\n                    GanttDialogInfo gdi = new GanttDialogInfo(myProject, GanttDialogInfo.WARNING, GanttDialogInfo.YES_NO_OPTION, (((previousStateBean.getName()) + \"\n\") + (lang.getText(\"msg18\"))), lang.getText(\"warning\"));\r\n                    gdi.show();\r\n                    if ((gdi.res) == (GanttDialogInfo.YES))\r\n                        myProject.getPreviouStates().remove(i);\r\n                    else\r\n                        overWrite = false;\r\n\r\n                    break;\r\n                }\r\n\r\n            if (overWrite) {\r\n                try {\r\n                    myPreviousState = new GanttPreviousState(previousStateBean.getName(), myProject);\r\n                    isSaved = true;\r\n                    previousStateBean.setDefaultName();\r\n                } catch (IOException e) {\r\n                    myProject.getUIFacade().showErrorDialog(e);\r\n                }\r\n                this.setVisible(false);\r\n                dispose();\r\n            }\r\n        } else\r\n            if (button.getName().equals(\"cancel\")) {\r\n                this.setVisible(false);\r\n                dispose();\r\n            }\r\n\r\n    } else\r\n        if ((evt.getSource()) instanceof JComboBox) {\r\n            JComboBox comboBox = ((JComboBox) (evt.getSource()));\r\n            if (comboBox.getName().equals(\"nameComboBox\")) {\r\n                previousStateBean.getTextField().setText(((comboBox.getSelectedItem()) + \"\"));\r\n            }\r\n        }\r\n\r\n}"},
 {"id":3215, "name":"getPreviousState()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState.getPreviousState()", "ownerclassid":"394", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState", "sourcecode":"public GanttPreviousState getPreviousState() {\r\n    return myPreviousState;\r\n}"},
 {"id":3216, "name":"isSaved()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState.isSaved()", "ownerclassid":"394", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState", "sourcecode":"public boolean isSaved() {\r\n    return isSaved;\r\n}"},
 {"id":3217, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"395", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "sourcecode":"public GanttSaveAsPreviousStateBean(GanttProject project) {\r\n    myPreviousStates = project.getPreviouStates();\r\n    if ((myPreviousStates.size()) == 0) {\r\n        GanttSaveAsPreviousStateBean.defaultName = GanttLanguage.getInstance().getText(\"save\");\r\n        GanttSaveAsPreviousStateBean.count = 1;\r\n    }\r\n    init();\r\n}"},
 {"id":3218, "name":"addActionListener(java.awt.event.ActionListener)", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.addActionListener(java.awt.event.ActionListener)", "ownerclassid":"395", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "sourcecode":"public void addActionListener(ActionListener l) {\r\n    okButton.addActionListener(l);\r\n    cancelButton.addActionListener(l);\r\n    nameComboBox.addActionListener(l);\r\n}"},
 {"id":3219, "name":"constructNamePanel()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.constructNamePanel()", "ownerclassid":"395", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "sourcecode":"private Box constructNamePanel() {\r\n    Box box = Box.createVerticalBox();\r\n    JPanel previousStatePanel;\r\n    nameComboBox = new JComboBox();\r\n    if ((myPreviousStates.size()) != 0) {\r\n        previousStatePanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 30, 20));\r\n        previousStateLabel = new JLabel(lang.getText(\"previousStates\"));\r\n        for (int i = 0; i < (myPreviousStates.size()); i++)\r\n            nameComboBox.addItem(((GanttPreviousState) (myPreviousStates.get(i))).getName());\r\n\r\n        nameComboBox.setName(\"nameComboBox\");\r\n        nameComboBox.setSelectedIndex((-1));\r\n        previousStatePanel.add(previousStateLabel);\r\n        previousStatePanel.add(nameComboBox);\r\n        box.add(previousStatePanel);\r\n    }\r\n    nameTextField = new JTextField(20);\r\n    nameTextField.setText((((GanttSaveAsPreviousStateBean.defaultName) + \"_\") + (GanttSaveAsPreviousStateBean.count)));\r\n    nameTextField.selectAll();\r\n    JPanel namePanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 30, 20));\r\n    namePanel.add(nameTextField);\r\n    box.add(namePanel);\r\n    box.setBorder(new TitledBorder(new EtchedBorder(), lang.getText(\"name\")));\r\n    return box;\r\n}"},
 {"id":3220, "name":"constructSouthPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.constructSouthPanel()", "ownerclassid":"395", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "sourcecode":"/**\r\n * Construct the south panel\r\n */\r\nprivate JPanel constructSouthPanel() {\r\n    okButton = new JButton(lang.getText(\"ok\"));\r\n    okButton.setName(\"ok\");\r\n    if ((getRootPane()) != null)\r\n        getRootPane().setDefaultButton(okButton);\r\n    // set ok the defuault\r\n\r\n    // button when press\r\n    // \"enter\" --> check\r\n    // because\r\n    // getRootPane()==null\r\n    // !!!\r\n    cancelButton = new JButton(lang.getText(\"cancel\"));\r\n    cancelButton.setName(\"cancel\");\r\n    southPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 10, 10));\r\n    southPanel.add(okButton);\r\n    southPanel.add(cancelButton);\r\n    return southPanel;\r\n}"},
 {"id":3221, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.getName()", "ownerclassid":"395", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "sourcecode":"public String getName() {\r\n    return nameTextField.getText();\r\n}"},
 {"id":3222, "name":"getTextField()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.getTextField()", "ownerclassid":"395", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "sourcecode":"public JTextField getTextField() {\r\n    return nameTextField;\r\n}"},
 {"id":3223, "name":"init()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.init()", "ownerclassid":"395", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "sourcecode":"public void init() {\r\n    setLayout(new BorderLayout());\r\n    add(constructNamePanel(), BorderLayout.CENTER);\r\n    add(constructSouthPanel(), BorderLayout.SOUTH);\r\n    nameTextField.requestFocusInWindow();\r\n}"},
 {"id":3224, "name":"setDefaultName()", "fullmethod":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.setDefaultName()", "ownerclassid":"395", "ownerclassname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "sourcecode":"public void setDefaultName() {\r\n    if (!(nameTextField.getText().equals((((GanttSaveAsPreviousStateBean.defaultName) + \"_\") + (GanttSaveAsPreviousStateBean.count))))) {\r\n        GanttSaveAsPreviousStateBean.defaultName = nameTextField.getText();\r\n        GanttSaveAsPreviousStateBean.count = 0;\r\n    }\r\n    (GanttSaveAsPreviousStateBean.count)++;\r\n}"},
 {"id":3225, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.-init-()", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"public I18N() {\r\n    myDayNames = new String[7];\r\n    for (int i = 0; i < 7; i++) {\r\n        myDayNames[i] = GanttLanguage.getInstance().getDay(i);\r\n    }\r\n}"},
 {"id":3226, "name":"formatRoleForTooltip(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.formatRoleForTooltip(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"public String formatRoleForTooltip(Role role) {\r\n    return MessageFormat.format(\"<li>{0}</li>\", ((Object[]) (new String[]{ role.getName() })));\r\n}"},
 {"id":3227, "name":"getDayNames()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.getDayNames()", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"String[] getDayNames() {\r\n    return myDayNames;\r\n    // DateFormatSymbols symbols = new\r\n    // DateFormatSymbols(Locale.getDefault());\r\n    // return symbols.getWeekdays();\r\n}"},
 {"id":3228, "name":"getNewProjectWizardWindowTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.getNewProjectWizardWindowTitle()", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"public String getNewProjectWizardWindowTitle() {\r\n    return GanttLanguage.getInstance().getText(\"createNewProject\");\r\n}"},
 {"id":3229, "name":"getProjectDomainPageTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.getProjectDomainPageTitle()", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"public String getProjectDomainPageTitle() {\r\n    return GanttLanguage.getInstance().getText(\"selectProjectDomain\");\r\n}"},
 {"id":3230, "name":"getProjectWeekendPageTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.getProjectWeekendPageTitle()", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"public String getProjectWeekendPageTitle() {\r\n    return GanttLanguage.getInstance().getText(\"selectProjectWeekend\");\r\n}"},
 {"id":3231, "name":"getRoleSetDisplayName(net.sourceforge.ganttproject.roles.RoleSet)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.getRoleSetDisplayName(net.sourceforge.ganttproject.roles.RoleSet)", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"public String getRoleSetDisplayName(RoleSet roleSet) {\r\n    return GanttLanguage.getInstance().getText(((\"roleSet.\" + (roleSet.getName())) + \".displayName\"));\r\n}"},
 {"id":3232, "name":"getRolesetTooltipFooter()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.getRolesetTooltipFooter()", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"public String getRolesetTooltipFooter() {\r\n    return \"</ul></body></html>\";\r\n}"},
 {"id":3233, "name":"getRolesetTooltipHeader(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.I18N.getRolesetTooltipHeader(java.lang.String)", "ownerclassid":"396", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "sourcecode":"public String getRolesetTooltipHeader(String roleSetName) {\r\n    return MessageFormat.format(\"<html><body><h3>{0}</h3><ul>\", ((Object[]) (new String[]{ roleSetName })));\r\n}"},
 {"id":3234, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard.-init-()", "ownerclassid":"397", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard", "sourcecode":"NewProjectWizard() {\r\n}"},
 {"id":3235, "name":"createNewProject(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard.createNewProject(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"397", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard", "sourcecode":"public PrjInfos createNewProject(IGanttProject project, UIFacade uiFacade) {\r\n    RoleSet[] roleSets = project.getRoleManager().getRoleSets();\r\n    NewProjectWizardWindow newProjectWizard = new NewProjectWizardWindow(uiFacade, new I18N());\r\n    newProjectWizard.addProjectNamePage(project);\r\n    newProjectWizard.addRoleSetPage(roleSets);\r\n    newProjectWizard.addWeekendConfigurationPage(project.getActiveCalendar(), project);\r\n    newProjectWizard.show();\r\n    return new PrjInfos();\r\n}"},
 {"id":3236, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.projectwizard.I18N)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.projectwizard.I18N)", "ownerclassid":"398", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "sourcecode":"public NewProjectWizardWindow(UIFacade uiFacade, I18N i18n) {\r\n    super(uiFacade, i18n.getNewProjectWizardWindowTitle());\r\n    myI18n = i18n;\r\n}"},
 {"id":3237, "name":"addProjectNamePage(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.addProjectNamePage(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"398", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "sourcecode":"public void addProjectNamePage(IGanttProject project) {\r\n    WizardPage projectNamePage = new ProjectNamePage(null, project, myI18n);\r\n    addPage(projectNamePage);\r\n}"},
 {"id":3238, "name":"addRoleSetPage(net.sourceforge.ganttproject.roles.RoleSet[])", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.addRoleSetPage(net.sourceforge.ganttproject.roles.RoleSet[])", "ownerclassid":"398", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "sourcecode":"public void addRoleSetPage(RoleSet[] roleSets) {\r\n    WizardPage roleSetPage = new RoleSetPage(roleSets, myI18n);\r\n    addPage(roleSetPage);\r\n}"},
 {"id":3239, "name":"addWeekendConfigurationPage(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.addWeekendConfigurationPage(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"398", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "sourcecode":"public void addWeekendConfigurationPage(GPCalendar calendar, IGanttProject project) {\r\n    WizardPage weekendPage;\r\n    try {\r\n        weekendPage = new WeekendConfigurationPage(calendar, myI18n, project);\r\n        addPage(weekendPage);\r\n    } catch (Exception e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n}"},
 {"id":3240, "name":"-init-(java.awt.Frame,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.projectwizard.I18N)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage.-init-(java.awt.Frame,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.projectwizard.I18N)", "ownerclassid":"399", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage", "sourcecode":"public ProjectNamePage(Frame owner, IGanttProject project, I18N i18n) {\r\n    myProjectSettingsPanel = new ProjectSettingsPanel(owner, project);\r\n    myI18N = i18n;\r\n}"},
 {"id":3241, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage.getComponent()", "ownerclassid":"399", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage", "sourcecode":"public Component getComponent() {\r\n    return myProjectSettingsPanel;\r\n}"},
 {"id":3242, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage.getTitle()", "ownerclassid":"399", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage", "sourcecode":"public String getTitle() {\r\n    return myI18N.getNewProjectWizardWindowTitle();\r\n}"},
 {"id":3243, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage.setActive(boolean)", "ownerclassid":"399", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage", "sourcecode":"public void setActive(boolean active) {\r\n    if (!active) {\r\n        myProjectSettingsPanel.applyChanges(false);\r\n    }\r\n}"},
 {"id":3244, "name":"-init-(net.sourceforge.ganttproject.roles.RoleSet[],net.sourceforge.ganttproject.gui.projectwizard.I18N)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage.-init-(net.sourceforge.ganttproject.roles.RoleSet[],net.sourceforge.ganttproject.gui.projectwizard.I18N)", "ownerclassid":"401", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage", "sourcecode":"RoleSetPage(RoleSet[] roleSets, I18N i18n) {\r\n    myI18N = i18n;\r\n    myListModel = new RoleSetPage.RoleSetListModel(roleSets, i18n);\r\n}"},
 {"id":3245, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage.-init-()", "ownerclassid":"401", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage", "sourcecode":"1() {\r\n}"},
 {"id":3246, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage.getComponent()", "ownerclassid":"401", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage", "sourcecode":"public Component getComponent() {\r\n    Box domainBox = new Box(BoxLayout.PAGE_AXIS);\r\n    JLabel label = new JLabel(GanttLanguage.getInstance().getText(\"chooseRoleSets\"));\r\n    final JList roleSetsList = new JList(myListModel);\r\n    roleSetsList.setCellRenderer(myListModel.getCellRenderer());\r\n    roleSetsList.addMouseListener(new MouseAdapter() {\r\n        public void mouseClicked(MouseEvent e) {\r\n            int index = roleSetsList.locationToIndex(e.getPoint());\r\n            myListModel.toggle(index);\r\n        }\r\n    });\r\n    roleSetsList.setAlignmentX(0);\r\n    label.setLabelFor(roleSetsList);\r\n    label.setAlignmentX(0);\r\n    domainBox.add(label);\r\n    domainBox.add(Box.createVerticalStrut(5));\r\n    domainBox.add(roleSetsList);\r\n    // \r\n    JPanel result = new JPanel(new BorderLayout());\r\n    result.add(domainBox, BorderLayout.CENTER);\r\n    // result.setBorder(LineBorder.createBlackLineBorder());\r\n    return result;\r\n}"},
 {"id":3247, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage.getTitle()", "ownerclassid":"401", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage", "sourcecode":"public String getTitle() {\r\n    return myI18N.getProjectDomainPageTitle();\r\n}"},
 {"id":3248, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage.setActive(boolean)", "ownerclassid":"401", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage", "sourcecode":"public void setActive(boolean active) {\r\n}"},
 {"id":3249, "name":"-init-(net.sourceforge.ganttproject.roles.RoleSet[],net.sourceforge.ganttproject.gui.projectwizard.I18N)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.-init-(net.sourceforge.ganttproject.roles.RoleSet[],net.sourceforge.ganttproject.gui.projectwizard.I18N)", "ownerclassid":"400", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "sourcecode":"RoleSetListModel(RoleSet[] roleSets, I18N i18n) {\r\n    myRoleSets = roleSets;\r\n    myI18n = i18n;\r\n}"},
 {"id":3250, "name":"createTooltipText(net.sourceforge.ganttproject.roles.RoleSet)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.createTooltipText(net.sourceforge.ganttproject.roles.RoleSet)", "ownerclassid":"400", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "sourcecode":"private String createTooltipText(RoleSet roleSet) {\r\n    StringBuffer result = new StringBuffer();\r\n    result.append(myI18n.getRolesetTooltipHeader(roleSet.getName()));\r\n    Role[] roles = roleSet.getRoles();\r\n    for (int i = 0; i < (roles.length); i++) {\r\n        Role nextRole = roles[i];\r\n        result.append(myI18n.formatRoleForTooltip(nextRole));\r\n    }\r\n    result.append(myI18n.getRolesetTooltipFooter());\r\n    return result.toString();\r\n}"},
 {"id":3251, "name":"getCellRenderer()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.getCellRenderer()", "ownerclassid":"400", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "sourcecode":"ListCellRenderer getCellRenderer() {\r\n    return this;\r\n}"},
 {"id":3252, "name":"getElementAt(int)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.getElementAt(int)", "ownerclassid":"400", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "sourcecode":"public Object getElementAt(int index) {\r\n    return myRoleSets[index];\r\n}"},
 {"id":3253, "name":"getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)", "ownerclassid":"400", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "sourcecode":"public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\r\n    final RoleSet roleSet = ((RoleSet) (value));\r\n    final JCheckBox result = new JCheckBox(myI18n.getRoleSetDisplayName(roleSet), roleSet.isEnabled());\r\n    if (isTheOnlyEnabled(roleSet)) {\r\n        result.setEnabled(false);\r\n    }\r\n    result.setToolTipText(createTooltipText(roleSet));\r\n    return result;\r\n}"},
 {"id":3254, "name":"getSize()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.getSize()", "ownerclassid":"400", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "sourcecode":"public int getSize() {\r\n    return myRoleSets.length;\r\n}"},
 {"id":3255, "name":"isTheOnlyEnabled(net.sourceforge.ganttproject.roles.RoleSet)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.isTheOnlyEnabled(net.sourceforge.ganttproject.roles.RoleSet)", "ownerclassid":"400", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "sourcecode":"private boolean isTheOnlyEnabled(RoleSet roleSet) {\r\n    boolean result = true;\r\n    for (int i = 0; i < (myRoleSets.length); i++) {\r\n        if (((myRoleSets[i]) != roleSet) && (myRoleSets[i].isEnabled())) {\r\n            result = false;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":3256, "name":"toggle(int)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.toggle(int)", "ownerclassid":"400", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "sourcecode":"public void toggle(int index) {\r\n    if (!(isTheOnlyEnabled(myRoleSets[index]))) {\r\n        myRoleSets[index].setEnabled((!(myRoleSets[index].isEnabled())));\r\n        fireContentsChanged(this, index, index);\r\n    }\r\n}"},
 {"id":3257, "name":"-init-(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.gui.projectwizard.I18N,net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.-init-(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.gui.projectwizard.I18N,net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"403", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "sourcecode":"WeekendConfigurationPage(GPCalendar calendar, I18N i18n, IGanttProject project) throws Exception {\r\n    myCalendar = calendar;\r\n    myCalendar.getPublicHolidays().clear();\r\n    myProject = ((GanttProject) (project));\r\n    myI18N = i18n;\r\n    String[] dayNames = myI18N.getDayNames();\r\n    myPanel = new JPanel(new BorderLayout());\r\n    choosePublicHoliday = new JLabel(GanttLanguage.getInstance().getText(\"choosePublicHoliday\"));\r\n    chooseWeekend = new JLabel(GanttLanguage.getInstance().getText(\"chooseWeekend\"));\r\n    JCCalendar = new JComboBox();\r\n    JCCalendar.addItem(GanttLanguage.getInstance().getText(\"none\"));\r\n    XMLCalendarOpen open = new XMLCalendarOpen();\r\n    open.setCalendars();\r\n    String[] labels = open.getLabels();\r\n    calendars = open.getCalendarResources();\r\n    for (int i = 0; i < (labels.length); i++)\r\n        JCCalendar.addItem(labels[i]);\r\n\r\n    JCCalendar.addActionListener(this);\r\n    JPanel publicHolidayPanel = new JPanel(new BorderLayout());\r\n    publicHolidayPanel.add(choosePublicHoliday, BorderLayout.WEST);\r\n    publicHolidayPanel.add(JCCalendar);\r\n    myBox.add(publicHolidayPanel);\r\n    myBox.add(new JPanel());\r\n    Box cb = Box.createVerticalBox();\r\n    /* Table to keep all the JCheckBoxes with days of the week.\n    It is used to check if in project creation dialog all days are marked as weekend. If they are, day selected \n    last will be unmarked. See class CheckBoxAction.\n\n    If you know better solution, do not hesitate to replace this code.\n     */\r\n    JCheckBox[] allCheckBoxes = new JCheckBox[7];\r\n    cb.add(chooseWeekend);\r\n    int nextDay = Calendar.MONDAY;\r\n    for (int i = 0; i < 7; i++) {\r\n        JCheckBox nextCheckBox = new JCheckBox();\r\n        nextCheckBox.setSelected(((calendar.getWeekDayType(nextDay)) == (GPCalendar.DayType.WEEKEND)));\r\n        nextCheckBox.setAction(new WeekendConfigurationPage.CheckBoxAction(nextDay, dayNames[(nextDay - 1)], nextCheckBox.getModel(), allCheckBoxes));\r\n        cb.add(nextCheckBox);\r\n        allCheckBoxes[i] = nextCheckBox;\r\n        if ((++nextDay) >= 8) {\r\n            nextDay = 1;\r\n        }\r\n    }\r\n    JPanel weekendPanel = new JPanel(new BorderLayout());\r\n    weekendPanel.add(cb, BorderLayout.WEST);\r\n    myBox.add(weekendPanel);\r\n    myBox.add(new JPanel());\r\n    JPanel projectPanel = new JPanel(new BorderLayout());\r\n    projectPanel.add(myBox, BorderLayout.NORTH);\r\n    myPanel.add(projectPanel);\r\n    // addUsingGBL(myPanel, myBox, gbc, 0, 1, 4, 4);\r\n}"},
 {"id":3258, "name":"-init-(int,java.lang.String,javax.swing.ButtonModel,javax.swing.JCheckBox[])", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.-init-(int,java.lang.String,javax.swing.ButtonModel,javax.swing.JCheckBox[])", "ownerclassid":"403", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "sourcecode":"CheckBoxAction(int day, String dayName, ButtonModel model, JCheckBox[] allCheckBoxes) {\r\n    super(dayName);\r\n    myDay = day;\r\n    myModel = model;\r\n    myCheckBoxes = allCheckBoxes;\r\n}"},
 {"id":3259, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"403", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "sourcecode":"public void actionPerformed(ActionEvent evt) {\r\n    if ((evt.getSource()) instanceof JComboBox) {\r\n        if ((evt.getSource()) == (JCCalendar))\r\n            myCalendar.setPublicHolidays(getProjectCalendar(), myProject);\r\n\r\n    }\r\n}"},
 {"id":3260, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.getComponent()", "ownerclassid":"403", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "sourcecode":"public Component getComponent() {\r\n    return myPanel;\r\n}"},
 {"id":3261, "name":"getProjectCalendar()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.getProjectCalendar()", "ownerclassid":"403", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "sourcecode":"public URL getProjectCalendar() {\r\n    int index = JCCalendar.getSelectedIndex();\r\n    if (index == 0)\r\n        return null;\r\n    else\r\n        return calendars[(index - 1)];\r\n\r\n}"},
 {"id":3262, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.getTitle()", "ownerclassid":"403", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "sourcecode":"public String getTitle() {\r\n    return myI18N.getProjectWeekendPageTitle();\r\n}"},
 {"id":3263, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.setActive(boolean)", "ownerclassid":"403", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "sourcecode":"public void setActive(boolean b) {\r\n}"},
 {"id":3264, "name":"-init-(int,java.lang.String,javax.swing.ButtonModel,javax.swing.JCheckBox[])", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage$CheckBoxAction.-init-(int,java.lang.String,javax.swing.ButtonModel,javax.swing.JCheckBox[])", "ownerclassid":"402", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage$CheckBoxAction", "sourcecode":"CheckBoxAction(int day, String dayName, ButtonModel model, JCheckBox[] allCheckBoxes) {\r\n    super(dayName);\r\n    myDay = day;\r\n    myModel = model;\r\n    myCheckBoxes = allCheckBoxes;\r\n}"},
 {"id":3265, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage$CheckBoxAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"402", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage$CheckBoxAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    // Counting number of selected days of the week.\r\n    int count = 0;\r\n    for (int i = 0; i < (myCheckBoxes.length); i++) {\r\n        if (myCheckBoxes[i].isSelected()) {\r\n            count++;\r\n        }\r\n    }\r\n    if (count == (myCheckBoxes.length)) {\r\n        // If all days of the week are marked as weekend unmark selected the last.\r\n        myModel.setSelected(false);\r\n    } else {\r\n        this.myCalendar.setWeekDayType(myDay, (myModel.isSelected() ? GPCalendar.DayType.WEEKEND : GPCalendar.DayType.WORKING));\r\n    }\r\n}"},
 {"id":3266, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.-init-()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"NextAction() {\r\n    super(GanttLanguage.getInstance().getText(\"next\"));\r\n}"},
 {"id":3267, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,java.lang.String)", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"public WizardImpl(UIFacade uiFacade, String title) {\r\n    // super(frame, title, true);\r\n    myUIFacade = uiFacade;\r\n    myTitle = title;\r\n    myCardLayout = new CardLayout();\r\n    myPagesContainer = new JPanel(myCardLayout);\r\n    myNextAction = new WizardImpl.NextAction();\r\n    myBackAction = new WizardImpl.BackAction();\r\n}"},
 {"id":3268, "name":"addPage(net.sourceforge.ganttproject.gui.projectwizard.WizardPage)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.addPage(net.sourceforge.ganttproject.gui.projectwizard.WizardPage)", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"protected void addPage(WizardPage page) {\r\n    myPages.add(page);\r\n}"},
 {"id":3269, "name":"adjustButtonState()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.adjustButtonState()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"protected void adjustButtonState() {\r\n    myBackAction.setEnabled(true);\r\n    myNextAction.setEnabled(true);\r\n    if ((myCurrentPage) == 0) {\r\n        myBackAction.setEnabled(false);\r\n    }\r\n    if ((myCurrentPage) == ((myPages.size()) - 1)) {\r\n        myNextAction.setEnabled(false);\r\n    }\r\n    myOkAction.setEnabled(canFinish());\r\n}"},
 {"id":3270, "name":"backPage()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.backPage()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"public void backPage() {\r\n    if ((myCurrentPage) > 0) {\r\n        getCurrentPage().setActive(false);\r\n        (myCurrentPage)--;\r\n        getCurrentPage().setActive(true);\r\n        myCardLayout.previous(myPagesContainer);\r\n    }\r\n    adjustButtonState();\r\n}"},
 {"id":3271, "name":"canFinish()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.canFinish()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"protected boolean canFinish() {\r\n    return true;\r\n}"},
 {"id":3272, "name":"getCurrentPage()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.getCurrentPage()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"private WizardPage getCurrentPage() {\r\n    return ((WizardPage) (myPages.get(myCurrentPage)));\r\n}"},
 {"id":3273, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.getUIFacade()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"protected UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":3274, "name":"nextPage()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.nextPage()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"public void nextPage() {\r\n    if ((myCurrentPage) < ((myPages.size()) - 1)) {\r\n        getCurrentPage().setActive(false);\r\n        (myCurrentPage)++;\r\n        getCurrentPage().setActive(true);\r\n        myCardLayout.next(myPagesContainer);\r\n    }\r\n    adjustButtonState();\r\n}"},
 {"id":3275, "name":"onCancelPressed()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.onCancelPressed()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"private void onCancelPressed() {\r\n    getCurrentPage().setActive(false);\r\n}"},
 {"id":3276, "name":"onOkPressed()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.onOkPressed()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"protected void onOkPressed() {\r\n    getCurrentPage().setActive(false);\r\n}"},
 {"id":3277, "name":"show()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.show()", "ownerclassid":"406", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "sourcecode":"public void show() {\r\n    for (int i = 0; i < (myPages.size()); i++) {\r\n        WizardPage nextPage = ((WizardPage) (myPages.get(i)));\r\n        // \r\n        JPanel pagePanel = new JPanel(new BorderLayout());\r\n        TopPanel titlePanel = new TopPanel(((((((((((nextPage.getTitle()) + \"   (\") + (GanttLanguage.getInstance().getText(\"step\"))) + \" \") + (i + 1)) + \" \") + (GanttLanguage.getInstance().getText(\"of\"))) + \" \") + (myPages.size())) + \")\"), null);\r\n        pagePanel.add(titlePanel, BorderLayout.NORTH);\r\n        pagePanel.add(nextPage.getComponent());\r\n        // \r\n        myPagesContainer.add(pagePanel, nextPage.getTitle());\r\n    }\r\n    myCardLayout.first(myPagesContainer);\r\n    myPagesContainer.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n    myOkAction = new OkAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            onOkPressed();\r\n        }\r\n    };\r\n    myCancelAction = new CancelAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            onCancelPressed();\r\n        }\r\n    };\r\n    adjustButtonState();\r\n    myUIFacade.showDialog(myPagesContainer, new Action[]{ myBackAction, myNextAction, myOkAction, myCancelAction }, myTitle);\r\n    /* Box buttonBox = Box.createHorizontalBox(); JButton backButton =\n    createBackButton(); buttonBox.add(backButton);\n    buttonBox.add(Box.createHorizontalGlue()); JButton nextButton =\n    createNextButton(); buttonBox.add(nextButton);\n    buttonBox.add(Box.createHorizontalGlue()); JButton okButton =\n    createOkButton(); buttonBox.add(okButton);\n    getContentPane().setLayout(new BorderLayout());\n    getContentPane().add(myPagesContainer, BorderLayout.CENTER); //\n    JPanel buttonPanel = new JPanel(new BorderLayout());\n    buttonPanel.add(buttonBox, BorderLayout.EAST);\n    getContentPane().add(buttonPanel, BorderLayout.SOUTH); pack();\n    //setSize(300, 300); adjustButtonState(); DialogAligner.center(this,\n    getParent()); super.show();\n     */\r\n}"},
 {"id":3278, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl$BackAction.-init-()", "ownerclassid":"404", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl$BackAction", "sourcecode":"BackAction() {\r\n    super(GanttLanguage.getInstance().getText(\"back\"));\r\n}"},
 {"id":3279, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl$BackAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"404", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl$BackAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    this.backPage();\r\n}"},
 {"id":3280, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl$NextAction.-init-()", "ownerclassid":"405", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl$NextAction", "sourcecode":"NextAction() {\r\n    super(GanttLanguage.getInstance().getText(\"next\"));\r\n}"},
 {"id":3281, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl$NextAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"405", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl$NextAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    this.nextPage();\r\n}"},
 {"id":3282, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardPage.getComponent()", "ownerclassid":"407", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardPage", "sourcecode":"Component getComponent();"},
 {"id":3283, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardPage.getTitle()", "ownerclassid":"407", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardPage", "sourcecode":"String getTitle();"},
 {"id":3284, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.projectwizard.WizardPage.setActive(boolean)", "ownerclassid":"407", "ownerclassname":"net.sourceforge.ganttproject.gui.projectwizard.WizardPage", "sourcecode":"void setActive(boolean b);"},
 {"id":3285, "name":"scrollLeft()", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener.scrollLeft()", "ownerclassid":"408", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener", "sourcecode":"void scrollLeft();"},
 {"id":3286, "name":"scrollLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener.scrollLeft(java.util.Date)", "ownerclassid":"408", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener", "sourcecode":"void scrollLeft(Date date);"},
 {"id":3287, "name":"scrollRight()", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener.scrollRight()", "ownerclassid":"408", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener", "sourcecode":"void scrollRight();"},
 {"id":3288, "name":"addScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager.addScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "ownerclassid":"409", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "sourcecode":"void addScrollingListener(ScrollingListener listener);"},
 {"id":3289, "name":"removeScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager.removeScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "ownerclassid":"409", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "sourcecode":"void removeScrollingListener(ScrollingListener listener);"},
 {"id":3290, "name":"scrollLeft()", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager.scrollLeft()", "ownerclassid":"409", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "sourcecode":"void scrollLeft();"},
 {"id":3291, "name":"scrollLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager.scrollLeft(java.util.Date)", "ownerclassid":"409", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "sourcecode":"void scrollLeft(Date date);"},
 {"id":3292, "name":"scrollRight()", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager.scrollRight()", "ownerclassid":"409", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "sourcecode":"void scrollRight();"},
 {"id":3293, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl.-init-()", "ownerclassid":"410", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl", "sourcecode":"public ScrollingManagerImpl() {\r\n}"},
 {"id":3294, "name":"addScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl.addScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "ownerclassid":"410", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl", "sourcecode":"public void addScrollingListener(ScrollingListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":3295, "name":"removeScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl.removeScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "ownerclassid":"410", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl", "sourcecode":"public void removeScrollingListener(ScrollingListener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":3296, "name":"scrollLeft()", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl.scrollLeft()", "ownerclassid":"410", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl", "sourcecode":"public void scrollLeft() {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        ScrollingListener nextListener = ((ScrollingListener) (myListeners.get(i)));\r\n        nextListener.scrollLeft();\r\n    }\r\n}"},
 {"id":3297, "name":"scrollLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl.scrollLeft(java.util.Date)", "ownerclassid":"410", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl", "sourcecode":"public void scrollLeft(Date date) {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        ScrollingListener nextListener = ((ScrollingListener) (myListeners.get(i)));\r\n        nextListener.scrollLeft(date);\r\n    }\r\n}"},
 {"id":3298, "name":"scrollRight()", "fullmethod":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl.scrollRight()", "ownerclassid":"410", "ownerclassname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl", "sourcecode":"public void scrollRight() {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        ScrollingListener nextListener = ((ScrollingListener) (myListeners.get(i)));\r\n        nextListener.scrollRight();\r\n    }\r\n}"},
 {"id":3299, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.server.ConnectionPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"411", "ownerclassname":"net.sourceforge.ganttproject.gui.server.ConnectionPanel", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic ConnectionPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"openFromServer\")), GanttLanguage.getInstance().getText(\"settingsConnection\"), parent);\r\n    Box vbServer = Box.createVerticalBox();\r\n    // url textfield\r\n    JPanel urlPanel = new JPanel(new BorderLayout());\r\n    urlPanel.add(new JLabel(language.getText(\"fileFromServer\")), BorderLayout.WEST);\r\n    // urlPanel.add(tfUrl = new JTextField(), BorderLayout.CENTER);\r\n    // vb.add(urlPanel);\r\n    // vb.add(new JPanel());\r\n    vbServer.add(urlPanel);\r\n    vbServer.add((tfUrl = new JTextField(\"http://\")));\r\n    vbServer.add(new JPanel());\r\n    // login textfield\r\n    JPanel loginPanel = new JPanel(new BorderLayout());\r\n    loginPanel.add(new JLabel(language.getText(\"userName\")), BorderLayout.WEST);\r\n    /* loginPanel.add(tfLogin = new JTextField(), BorderLayout.CENTER);\n    vb.add(loginPanel); vb.add(new JPanel());\n     */\r\n    vbServer.add(loginPanel);\r\n    vbServer.add((tfLogin = new JTextField()));\r\n    vbServer.add(new JPanel());\r\n    // password textfield\r\n    JPanel passwordPanel = new JPanel(new BorderLayout());\r\n    passwordPanel.add(new JLabel(language.getText(\"userName\")), BorderLayout.WEST);\r\n    /* passwordPanel.add(tfPassword = new JPasswordField(),\n    BorderLayout.CENTER); vb.add(passwordPanel); vb.add(new JPanel());\n     */\r\n    vbServer.add(passwordPanel);\r\n    vbServer.add((tfPassword = new JPasswordField()));\r\n    vbServer.add(new JPanel());\r\n    JPanel serverPanel = new JPanel(new BorderLayout());\r\n    serverPanel.add(vbServer, BorderLayout.NORTH);\r\n    vb.add(serverPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":3300, "name":"applyChanges(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.server.ConnectionPanel.applyChanges(boolean)", "ownerclassid":"411", "ownerclassname":"net.sourceforge.ganttproject.gui.server.ConnectionPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#applyChanges(boolean)\n */\r\npublic boolean applyChanges(boolean askForApply) {\r\n    return false;\r\n}"},
 {"id":3301, "name":"initialize()", "fullmethod":"net.sourceforge.ganttproject.gui.server.ConnectionPanel.initialize()", "ownerclassid":"411", "ownerclassname":"net.sourceforge.ganttproject.gui.server.ConnectionPanel", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.options.GeneralOptionPanel#initialize()\n */\r\npublic void initialize() {\r\n}"},
 {"id":3302, "name":"-init-(net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.gui.server.ServerDialog.-init-(net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"412", "ownerclassname":"net.sourceforge.ganttproject.gui.server.ServerDialog", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic ServerDialog(GanttProject parent) {\r\n    super(parent, GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"webServer\")), true, new ConnectionPanel(parent));\r\n}"},
 {"id":3303, "name":"constructSections()", "fullmethod":"net.sourceforge.ganttproject.gui.server.ServerDialog.constructSections()", "ownerclassid":"412", "ownerclassname":"net.sourceforge.ganttproject.gui.server.ServerDialog", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.gui.GeneralDialog#constructSections()\n */\r\npublic void constructSections() {\r\n    addObject(GanttProject.correctLabel(language.getText(\"openFromServer\")), null);\r\n}"},
 {"id":3304, "name":"valueChanged(javax.swing.event.TreeSelectionEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.server.ServerDialog.valueChanged(javax.swing.event.TreeSelectionEvent)", "ownerclassid":"412", "ownerclassname":"net.sourceforge.ganttproject.gui.server.ServerDialog", "sourcecode":"/* (non-Javadoc)\n\n@see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)\n */\r\npublic void valueChanged(TreeSelectionEvent e) {\r\n    DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (e.getPath().getLastPathComponent()));\r\n    String sNode = ((String) (node.getUserObject()));\r\n    // - ask the settingPanel if parameters are changed\r\n    // boolean bHasChange = settingPanel.applyChanges(true); //no change to\r\n    // do on this panel\r\n    // - remove the settingPanel\r\n    mainPanel2.remove(0);\r\n    // - Create the new panel\r\n    if (sNode.equals(GanttProject.correctLabel(language.getText(\"openFromServer\"))))\r\n        settingPanel = new ConnectionPanel(appli);\r\n\r\n    // - initialize the panel\r\n    settingPanel.initialize();\r\n    // - add the settingPanel into the main Panel\r\n    mainPanel2.add(settingPanel, 0);\r\n    mainPanel2.repaint();\r\n    mainPanel2.validate();// valide the changes\r\n\r\n}"},
 {"id":3305, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"413", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "sourcecode":"public CommonPanel(Task task) {\r\n    language = GanttLanguage.getInstance();\r\n    myTask = task;\r\n}"},
 {"id":3306, "name":"addUsingGBL(java.awt.Container,java.awt.Component,java.awt.GridBagConstraints,int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.addUsingGBL(java.awt.Container,java.awt.Component,java.awt.GridBagConstraints,int,int,int,int)", "ownerclassid":"413", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "sourcecode":"protected void addUsingGBL(Container container, Component component, GridBagConstraints gbc, int x, int y, int w, int h) {\r\n    gbc.gridx = x;\r\n    gbc.gridy = y;\r\n    gbc.gridwidth = w;\r\n    gbc.gridheight = h;\r\n    gbc.weighty = 0;\r\n    container.add(component, gbc);\r\n    container.applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\r\n}"},
 {"id":3307, "name":"durationChanged(int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.durationChanged(int)", "ownerclassid":"413", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "sourcecode":"public void durationChanged(int newDuration) {\r\n    durationField3.setText((\"\" + newDuration));\r\n}"},
 {"id":3308, "name":"getLanguage()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.getLanguage()", "ownerclassid":"413", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "sourcecode":"protected GanttLanguage getLanguage() {\r\n    return language;\r\n}"},
 {"id":3309, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.getTask()", "ownerclassid":"413", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "sourcecode":"protected Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":3310, "name":"nameChanged(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.nameChanged(java.lang.String)", "ownerclassid":"413", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "sourcecode":"public void nameChanged(String newName) {\r\n    nameField3.setText(newName);\r\n}"},
 {"id":3311, "name":"setFirstRow(java.awt.Container,java.awt.GridBagConstraints,javax.swing.JLabel,javax.swing.JTextField,javax.swing.JLabel,javax.swing.JTextField)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.setFirstRow(java.awt.Container,java.awt.GridBagConstraints,javax.swing.JLabel,javax.swing.JTextField,javax.swing.JLabel,javax.swing.JTextField)", "ownerclassid":"413", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "sourcecode":"/**\r\n * set the first row in all the tabbed pane. thus give them a common look\r\n */\r\nprotected void setFirstRow(Container container, GridBagConstraints gbc, JLabel nameLabel, JTextField nameField, JLabel durationLabel, JTextField durationField) {\r\n    container.setLayout(new GridBagLayout());\r\n    gbc.weightx = 0;\r\n    gbc.weighty = 0;\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    addUsingGBL(container, nameLabel, gbc, 0, 0, 1, 1);\r\n    addUsingGBL(container, nameField, gbc, 1, 0, 1, 1);\r\n    addUsingGBL(container, durationLabel, gbc, 2, 0, 1, 1);\r\n    gbc.weightx = 1;\r\n    addUsingGBL(container, durationField, gbc, 3, 0, 1, 1);\r\n}"},
 {"id":3312, "name":"setupCommonFields(boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.setupCommonFields(boolean)", "ownerclassid":"413", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "sourcecode":"protected JPanel setupCommonFields(boolean onlyOneTask) {\r\n    nameLabel3 = new JLabel(((getLanguage().getText(\"name\")) + \":\"));\r\n    nameField3 = new JTextField(20);\r\n    nameField3.setText(getTask().getName());\r\n    durationLabel3 = new JLabel(((getLanguage().getText(\"length\")) + \":\"));\r\n    durationField3 = new JTextField(8);\r\n    durationField3.setText((\"\" + (getTask().getDuration().getLength())));\r\n    nameField3.setEditable(false);\r\n    durationField3.setEditable(false);\r\n    firstRowPanel3 = new JPanel(flowL);\r\n    setFirstRow(firstRowPanel3, gbc, nameLabel3, nameField3, durationLabel3, durationField3);\r\n    if (!onlyOneTask) {\r\n        nameLabel3.setVisible(false);\r\n        nameField3.setVisible(false);\r\n    }\r\n    return firstRowPanel3;\r\n}"},
 {"id":3313, "name":"-init-(net.sourceforge.ganttproject.task.CustomColumnsManager,net.sourceforge.ganttproject.task.CustomColumnsStorage,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel.-init-(net.sourceforge.ganttproject.task.CustomColumnsManager,net.sourceforge.ganttproject.task.CustomColumnsStorage,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"415", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel", "sourcecode":"public CustomColumnsPanel(CustomColumnsManager manager, CustomColumnsStorage customColHandler, UIFacade uifacade) {\r\n    myColumnManager = manager;\r\n    customColumnStorage = customColHandler;\r\n    myUIfacade = uifacade;\r\n    this.initComponents();\r\n}"},
 {"id":3314, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel.-init-()", "ownerclassid":"415", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel", "sourcecode":"1() {\r\n}"},
 {"id":3315, "name":"-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"415", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel", "sourcecode":"public CustomColumnTableModel(CustomColumnsStorage ccHandler) {\r\n    customColumnsHandler = ccHandler;\r\n    this.columnIdentifiers = titles;\r\n    this.dataVector = new Vector();\r\n    Iterator it = customColumnsHandler.getCustomColums().iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumn cc = ((CustomColumn) (it.next()));\r\n        Object[] o = new Object[]{ cc.getName(), cc.getType(), cc.getDefaultValue() };\r\n        this.addRow(o);\r\n    } \r\n}"},
 {"id":3316, "name":"initComponents()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel.initComponents()", "ownerclassid":"415", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel", "sourcecode":"private void initComponents() {\r\n    this.titles = new Vector(3);\r\n    this.titles.add(CustomColumnsPanel.language.getText(\"name\"));\r\n    this.titles.add(CustomColumnsPanel.language.getText(\"typeClass\"));\r\n    this.titles.add(CustomColumnsPanel.language.getText(\"default\"));\r\n    final CustomColumnsPanel.CustomColumnTableModel model = new CustomColumnsPanel.CustomColumnTableModel(customColumnStorage);\r\n    table = new JNTable(model);\r\n    table.setPreferredVisibleRowCount(10);\r\n    this.add(table);\r\n    table.getColumn(((String) (titles.get(0)))).setPreferredWidth(150);\r\n    table.getColumn(((String) (titles.get(1)))).setPreferredWidth(150);\r\n    table.getColumn(((String) (titles.get(2)))).setPreferredWidth(200);\r\n    table.setHighlighters(new org.jdesktop.swing.decorator.HighlighterPipeline(new Highlighter[]{ AlternateRowHighlighter.floralWhite, AlternateRowHighlighter.quickSilver }));\r\n    table.getTable().setSortable(false);\r\n    buttonAdd = new JButton(CustomColumnsPanel.language.getText(\"add\"));\r\n    buttonAdd.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            myUIfacade.getUndoManager().undoableEdit(\"TaskPropertyNewColumn\", new Runnable() {\r\n                public void run() {\r\n                    CustomColumn customColumn = new CustomColumn();\r\n                    GanttDialogCustomColumn d = new GanttDialogCustomColumn(myUIfacade, customColumn);\r\n                    d.setVisible(true);\r\n                    if (d.isOk()) {\r\n                        myColumnManager.addNewCustomColumn(customColumn);\r\n                        model.refreshData(customColumnStorage);\r\n                        repaint();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    this.add(buttonAdd, BorderLayout.EAST);\r\n    buttonDel = new JButton(CustomColumnsPanel.language.getText(\"delete\"));\r\n    buttonDel.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            int[] selectedRowsIndexes = table.getTable().getSelectedRows();\r\n            for (int i = 0; i < (selectedRowsIndexes.length); i++) {\r\n                String nameToDel = ((String) (model.getValueAt(selectedRowsIndexes[i], 0)));\r\n                myColumnManager.deleteCustomColumn(nameToDel);\r\n            }\r\n            model.refreshData(customColumnStorage);\r\n            repaint();\r\n        }\r\n    });\r\n    this.add(buttonDel, BorderLayout.EAST);\r\n}"},
 {"id":3317, "name":"-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"414", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "sourcecode":"public CustomColumnTableModel(CustomColumnsStorage ccHandler) {\r\n    customColumnsHandler = ccHandler;\r\n    this.columnIdentifiers = titles;\r\n    this.dataVector = new Vector();\r\n    Iterator it = customColumnsHandler.getCustomColums().iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumn cc = ((CustomColumn) (it.next()));\r\n        Object[] o = new Object[]{ cc.getName(), cc.getType(), cc.getDefaultValue() };\r\n        this.addRow(o);\r\n    } \r\n}"},
 {"id":3318, "name":"getColumnClass(int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.getColumnClass(int)", "ownerclassid":"414", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "sourcecode":"public Class getColumnClass(int column) {\r\n    return String.class;\r\n}"},
 {"id":3319, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.getColumnName(int)", "ownerclassid":"414", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "sourcecode":"public String getColumnName(int column) {\r\n    return ((String) (columnIdentifiers.get(column)));\r\n}"},
 {"id":3320, "name":"getValueAt(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.getValueAt(int,int)", "ownerclassid":"414", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "sourcecode":"public Object getValueAt(int row, int col) {\r\n    String colName = ((String) (((Vector) (this.dataVector.get(row))).get(0)));\r\n    CustomColumn res = customColumnsHandler.getCustomColumn(colName);\r\n    if (res != null) {\r\n        switch (col) {\r\n            case 0 :\r\n                return res.getName();\r\n            case 1 :\r\n                {\r\n                    Class cl = res.getType();\r\n                    if (cl.equals(String.class))\r\n                        return CustomColumnsPanel.language.getText(\"text\");\r\n\r\n                    if (GregorianCalendar.class.isAssignableFrom(cl))\r\n                        return CustomColumnsPanel.language.getText(\"date\");\r\n\r\n                    if (cl.equals(Boolean.class))\r\n                        return CustomColumnsPanel.language.getText(\"boolean\");\r\n\r\n                    if (cl.equals(Integer.class))\r\n                        return CustomColumnsPanel.language.getText(\"integer\");\r\n\r\n                    if (cl.equals(Double.class))\r\n                        return CustomColumnsPanel.language.getText(\"double\");\r\n\r\n                }\r\n            case 2 :\r\n                return res.getDefaultValue();\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":3321, "name":"isCellEditable(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.isCellEditable(int,int)", "ownerclassid":"414", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "sourcecode":"public boolean isCellEditable(int row, int col) {\r\n    return col != 1;\r\n}"},
 {"id":3322, "name":"refreshData(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.refreshData(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"414", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "sourcecode":"public void refreshData(CustomColumnsStorage cch) {\r\n    customColumnsHandler = cch;\r\n    this.dataVector = new Vector();\r\n    Iterator it = customColumnsHandler.getCustomColums().iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumn cc = ((CustomColumn) (it.next()));\r\n        Object[] o = new Object[]{ cc.getName(), cc.getType(), cc.getDefaultValue() };\r\n        this.addRow(o);\r\n    } \r\n}"},
 {"id":3323, "name":"setValueAt(java.lang.Object,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.setValueAt(java.lang.Object,int,int)", "ownerclassid":"414", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "sourcecode":"public void setValueAt(Object o, int row, int col) {\r\n    String oldName;\r\n    Vector v = ((Vector) (dataVector.get(row)));\r\n    oldName = ((String) (v.get(0)));\r\n    if (col == 0) {\r\n        if (!(((String) (o)).equals(oldName))) {\r\n            if (!(customColumnStorage.exists(((String) (o))))) {\r\n                v.setElementAt(o, col);\r\n                myColumnManager.changeCustomColumnName(oldName, ((String) (o)));\r\n            }\r\n        }\r\n    }\r\n    if (col == 2) {\r\n        try {\r\n            myColumnManager.changeCustomColumnDefaultValue(oldName, o);\r\n            v.setElementAt(o, col);\r\n        } catch (CustomColumnsException e) {\r\n            myUIfacade.showErrorDialog(e);\r\n        }\r\n    }\r\n}"},
 {"id":3324, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"public DependencyTableModel(Task task) {\r\n    myDependencies = new ArrayList(Arrays.asList(task.getDependenciesAsDependant().toArray()));\r\n    myMutator = task.getManager().getDependencyCollection().createMutator();\r\n    myTask = task;\r\n}"},
 {"id":3325, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.commit()", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"public void commit() {\r\n    myMutator.commit();\r\n}"},
 {"id":3326, "name":"createDependency(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.createDependency(java.lang.Object)", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"private void createDependency(Object value) throws TaskDependencyException {\r\n    if (value instanceof DependencyTableModel.TaskComboItem) {\r\n        Task selectedTask = ((DependencyTableModel.TaskComboItem) (value)).myTask;\r\n        TaskDependency dep = myMutator.createDependency(myTask, selectedTask, new FinishStartConstraintImpl());\r\n        myDependencies.add(dep);\r\n        fireTableRowsInserted(myDependencies.size(), myDependencies.size());\r\n    }\r\n}"},
 {"id":3327, "name":"getColumnCount()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.getColumnCount()", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"/**\r\n * Return the number of colums\r\n */\r\npublic int getColumnCount() {\r\n    return columnNames.length;\r\n}"},
 {"id":3328, "name":"getColumnName(int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.getColumnName(int)", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"/**\r\n * Return the name of the colums col\r\n */\r\npublic String getColumnName(int col) {\r\n    return columnNames[col];\r\n}"},
 {"id":3329, "name":"getRowCount()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.getRowCount()", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"/**\r\n * Return the numbers of rows\r\n */\r\npublic int getRowCount() {\r\n    return (myDependencies.size()) + 1;\r\n}"},
 {"id":3330, "name":"getValueAt(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.getValueAt(int,int)", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"/**\r\n * Return the object at the specify row & colums\r\n */\r\npublic Object getValueAt(int row, int col) {\r\n    Object result;\r\n    if ((row >= 0) && (row < (getRowCount()))) {\r\n        if (row == (myDependencies.size())) {\r\n            result = \"\";\r\n        } else {\r\n            TaskDependency dep = ((TaskDependency) (myDependencies.get(row)));\r\n            switch (col) {\r\n                case 0 :\r\n                    {\r\n                        result = new Integer(dep.getDependee().getTaskID());\r\n                        break;\r\n                    }\r\n                case 1 :\r\n                    {\r\n                        result = dep.getDependee();\r\n                        break;\r\n                    }\r\n                case 2 :\r\n                    {\r\n                        result = dep.getConstraint().getName();\r\n                        break;\r\n                    }\r\n                case 3 :\r\n                    {\r\n                        result = new Integer(dep.getDifference());\r\n                        break;\r\n                    }\r\n                case 4 :\r\n                    {\r\n                        result = dep.getHardness();\r\n                        break;\r\n                    }\r\n                default :\r\n                    {\r\n                        throw new IllegalArgumentException((\"Illegal column number=\" + col));\r\n                    }\r\n            }\r\n        }\r\n    } else {\r\n        throw new IllegalArgumentException((\"Illegal row number=\" + row));\r\n    }\r\n    return result;\r\n}"},
 {"id":3331, "name":"isCellEditable(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.isCellEditable(int,int)", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"public boolean isCellEditable(int row, int col) {\r\n    boolean result = col > 0;\r\n    if (result) {\r\n        result = (col == 2) ? row < (myDependencies.size()) : row <= (myDependencies.size());\r\n    }\r\n    return result;\r\n}"},
 {"id":3332, "name":"setValueAt(java.lang.Object,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.setValueAt(java.lang.Object,int,int)", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"public void setValueAt(Object value, int row, int col) {\r\n    if (row >= 0) {\r\n        try {\r\n            if (row == (myDependencies.size())) {\r\n                createDependency(value);\r\n            } else {\r\n                updateDependency(value, row, col);\r\n            }\r\n        } catch (TaskDependencyException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    } else {\r\n        throw new IllegalArgumentException((\"I cant set data in row=\" + row));\r\n    }\r\n    fireTableCellUpdated(row, col);\r\n}"},
 {"id":3333, "name":"updateDependency(java.lang.Object,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.updateDependency(java.lang.Object,int,int)", "ownerclassid":"417", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "sourcecode":"private void updateDependency(Object value, int row, int col) throws TaskDependencyException {\r\n    TaskDependency dep = ((TaskDependency) (myDependencies.get(row)));\r\n    switch (col) {\r\n        case 4 :\r\n            dep.setHardness(((TaskDependency.Hardness) (value)));\r\n            break;\r\n        case 3 :\r\n            {\r\n                int loadAsInt = Integer.parseInt(String.valueOf(value));\r\n                dep.setDifference(loadAsInt);\r\n                break;\r\n            }\r\n        case 2 :\r\n            {\r\n                TaskDependencyConstraint clone;\r\n                try {\r\n                    clone = ((TaskDependencyConstraint) (((ConstraintImpl) (value)).clone()));\r\n                } catch (CloneNotSupportedException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n                dep.setConstraint(clone);\r\n                break;\r\n            }\r\n        case 1 :\r\n            {\r\n                dep.delete();\r\n                myDependencies.remove(row);\r\n                if (value == null) {\r\n                    fireTableRowsDeleted(row, row);\r\n                } else {\r\n                    Task selectedTask = ((DependencyTableModel.TaskComboItem) (value)).myTask;\r\n                    TaskDependency newDependency = myMutator.createDependency(myTask, selectedTask, new FinishStartConstraintImpl());\r\n                    myDependencies.add(newDependency);\r\n                }\r\n            }\r\n    }\r\n}"},
 {"id":3334, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel$TaskComboItem.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"416", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel$TaskComboItem", "sourcecode":"TaskComboItem(Task task) {\r\n    myTask = task;\r\n    myText = ((\"[#\" + (task.getTaskID())) + \"] \") + (task.getName());\r\n}"},
 {"id":3335, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel$TaskComboItem.toString()", "ownerclassid":"416", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel$TaskComboItem", "sourcecode":"public String toString() {\r\n    return myText;\r\n}"},
 {"id":3336, "name":"durationChanged(int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.InternalStateListener.durationChanged(int)", "ownerclassid":"418", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.InternalStateListener", "sourcecode":"void durationChanged(int newDuration);"},
 {"id":3337, "name":"nameChanged(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.InternalStateListener.nameChanged(java.lang.String)", "ownerclassid":"418", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.InternalStateListener", "sourcecode":"void nameChanged(String newName);"},
 {"id":3338, "name":"-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.roles.RoleManager,boolean)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.roles.RoleManager,boolean)", "ownerclassid":"420", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "sourcecode":"public TaskAllocationsPanel(Task task, HumanResourceManager hrManager, RoleManager roleMgr, boolean onlyOneTask) {\r\n    super(task);\r\n    myHRManager = hrManager;\r\n    myRoleManager = roleMgr;\r\n    this.onlyOneTask = onlyOneTask;\r\n}"},
 {"id":3339, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.-init-()", "ownerclassid":"420", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "sourcecode":"1() {\r\n}"},
 {"id":3340, "name":"constructResourcesPanel(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.constructResourcesPanel(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "ownerclassid":"420", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "sourcecode":"private void constructResourcesPanel(ResourceAssignmentCollection assignments) {\r\n    resourcesPanel = new JPanel(new GridBagLayout());\r\n    myResourcesTableModel = new ResourcesTableModel(assignments);\r\n    resourcesTable = new JXTable(myResourcesTableModel);\r\n    setUpResourcesComboColumn(resourcesTable);// set column editor\r\n\r\n    setUpCoordinatorBooleanColumn(resourcesTable);\r\n    setUpRolesComboColumn(resourcesTable);\r\n    resourcesTable.setRowHeight(23);\r\n    resourcesTable.getColumnModel().getColumn(0).setPreferredWidth(10);\r\n    resourcesTable.getColumnModel().getColumn(1).setPreferredWidth(240);\r\n    resourcesTable.getColumnModel().getColumn(2).setPreferredWidth(60);\r\n    resourcesTable.getColumnModel().getColumn(3).setPreferredWidth(60);\r\n    resourcesTable.getColumnModel().getColumn(4).setPreferredWidth(100);\r\n    resourcesTable.setHighlighters(new org.jdesktop.swing.decorator.HighlighterPipeline(new Highlighter[]{ new Highlighter(new Color(255, 255, 255), null) }));\r\n    resourcesScrollPane = new JScrollPane(resourcesTable);\r\n    resourcesScrollPane.setPreferredSize(new Dimension(500, 130));\r\n    JPanel secondResourcesScrollPane = new JPanel();\r\n    secondResourcesScrollPane.setBorder(new TitledBorder(new EtchedBorder(), GanttProject.correctLabel(getLanguage().getText(\"human\"))));\r\n    secondResourcesScrollPane.add(resourcesScrollPane);\r\n    JButton bremove = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/delete_16.gif\")));\r\n    bremove.setToolTipText(GanttProject.getToolTip(getLanguage().getText(\"removeResources\")));\r\n    bremove.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            int[] selectedRow = resourcesTable.getSelectedRows();\r\n            for (int i = 0; i < (selectedRow.length); ++i) {\r\n                resourcesTable.getModel().setValueAt(null, selectedRow[i], 1);\r\n            }\r\n        }\r\n    });\r\n    secondResourcesScrollPane.add(bremove);\r\n    GridBagConstraints gbc = new GridBagConstraints();\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    gbc.weighty = 0;\r\n    JPanel commonFields = setupCommonFields(onlyOneTask);\r\n    addUsingGBL(resourcesPanel, commonFields, gbc, 0, 0, 1, 1);\r\n    gbc.gridx = 0;\r\n    gbc.gridy = 1;\r\n    gbc.gridwidth = 8;\r\n    gbc.gridheight = 1;\r\n    gbc.weighty = 1;\r\n    resourcesPanel.add(secondResourcesScrollPane, gbc);\r\n}"},
 {"id":3341, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.getComponent()", "ownerclassid":"420", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "sourcecode":"public JPanel getComponent() {\r\n    if ((resourcesPanel) == null) {\r\n        constructResourcesPanel(getTask().getAssignmentCollection());\r\n    }\r\n    return resourcesPanel;\r\n}"},
 {"id":3342, "name":"getTableModel()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.getTableModel()", "ownerclassid":"420", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "sourcecode":"public ResourcesTableModel getTableModel() {\r\n    return myResourcesTableModel;\r\n}"},
 {"id":3343, "name":"setUpCoordinatorBooleanColumn(javax.swing.JTable)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.setUpCoordinatorBooleanColumn(javax.swing.JTable)", "ownerclassid":"420", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "sourcecode":"private void setUpCoordinatorBooleanColumn(final JTable resourceTable) {\r\n    TableColumn resourcesColumn = resourceTable.getColumnModel().getColumn(3);\r\n    resourcesColumn.setCellRenderer(new TaskAllocationsPanel.BooleanRenderer());\r\n}"},
 {"id":3344, "name":"setUpResourcesComboColumn(javax.swing.JTable)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.setUpResourcesComboColumn(javax.swing.JTable)", "ownerclassid":"420", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "sourcecode":"private void setUpResourcesComboColumn(final JTable resourceTable) {\r\n    List resources = myHRManager.getResources();\r\n    final JComboBox comboBox = new JComboBox();\r\n    for (int i = 0; i < (resources.size()); i++) {\r\n        comboBox.addItem(resources.get(i));\r\n    }\r\n    TableColumn resourcesColumn = resourceTable.getColumnModel().getColumn(1);\r\n    comboBox.setEditable(false);\r\n    resourcesColumn.setCellEditor(new DefaultCellEditor(comboBox));\r\n}"},
 {"id":3345, "name":"setUpRolesComboColumn(javax.swing.JTable)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.setUpRolesComboColumn(javax.swing.JTable)", "ownerclassid":"420", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "sourcecode":"private void setUpRolesComboColumn(final JTable resourceTable) {\r\n    final Role[] roles = myRoleManager.getEnabledRoles();\r\n    final JComboBox comboBox = new JComboBox();\r\n    for (int i = 0; i < (roles.length); i++) {\r\n        Role role = ((Role) (roles[i]));\r\n        comboBox.addItem(role);\r\n    }\r\n    TableColumn rolesColumn = resourceTable.getColumnModel().getColumn(4);\r\n    comboBox.setEditable(false);\r\n    rolesColumn.setCellEditor(new DefaultCellEditor(comboBox));\r\n    rolesColumn.setCellRenderer(new DefaultTableCellRenderer());\r\n}"},
 {"id":3346, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel$BooleanRenderer.-init-()", "ownerclassid":"419", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel$BooleanRenderer", "sourcecode":"public BooleanRenderer() {\r\n    super();\r\n    setHorizontalAlignment(JLabel.CENTER);\r\n}"},
 {"id":3347, "name":"getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel$BooleanRenderer.getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)", "ownerclassid":"419", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel$BooleanRenderer", "sourcecode":"public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\r\n    if (isSelected) {\r\n        setForeground(table.getSelectionForeground());\r\n        super.setBackground(table.getSelectionBackground());\r\n    } else {\r\n        setForeground(table.getForeground());\r\n        setBackground(table.getBackground());\r\n    }\r\n    if (!(value.getClass().equals(Boolean.class)))\r\n        setSelected(false);\r\n    else\r\n        setSelected(((value != null) && (((Boolean) (value)).booleanValue())));\r\n\r\n    return this;\r\n}"},
 {"id":3348, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"public TaskDependenciesPanel(Task task) {\r\n    super(task);\r\n    myTaskManager = task.getManager();\r\n}"},
 {"id":3349, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.-init-()", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"1() {\r\n}"},
 {"id":3350, "name":"constructPredecessorsPanel()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.constructPredecessorsPanel()", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"protected void constructPredecessorsPanel() {\r\n    predecessorsPanel = new JPanel(new GridBagLayout());\r\n    myTableModel = new DependencyTableModel(getTask());\r\n    predecessorsTable = new JTable(myTableModel);\r\n    predecessorsTable.setPreferredScrollableViewportSize(new Dimension(500, 130));\r\n    setUpPredecessorComboColumn(predecessorsTable.getColumnModel().getColumn(1), predecessorsTable);// set column editor\r\n\r\n    setUpTypeComboColumn(predecessorsTable.getColumnModel().getColumn(2));// set\r\n\r\n    // column\r\n    // editor\r\n    setUpHardnessColumnEditor(predecessorsTable.getColumnModel().getColumn(4));\r\n    predecessorsTable.setRowHeight(23);// set row height\r\n\r\n    predecessorsTable.getColumnModel().getColumn(0).setPreferredWidth(10);// set\r\n\r\n    // column\r\n    // size\r\n    predecessorsTable.getColumnModel().getColumn(1).setPreferredWidth(200);\r\n    predecessorsTable.getColumnModel().getColumn(2).setPreferredWidth(60);\r\n    predecessorsTable.getColumnModel().getColumn(3).setPreferredWidth(40);\r\n    predecessorsScrollPane = new JScrollPane(predecessorsTable);\r\n    JPanel secondPredecessorsPanel = new JPanel();\r\n    secondPredecessorsPanel.setBorder(new TitledBorder(new EtchedBorder(), language.getText(\"predecessors\")));\r\n    secondPredecessorsPanel.add(predecessorsScrollPane);\r\n    JButton bremove = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/delete_16.gif\")));\r\n    bremove.setToolTipText(GanttProject.getToolTip(language.getText(\"removeRelationShip\")));\r\n    bremove.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            int[] selectedRow = predecessorsTable.getSelectedRows();\r\n            for (int i = 0; i < (selectedRow.length); ++i) {\r\n                predecessorsTable.getModel().setValueAt(null, selectedRow[i], 1);\r\n            }\r\n        }\r\n    });\r\n    secondPredecessorsPanel.add(bremove);\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    gbc.weighty = 0;\r\n    addUsingGBL(predecessorsPanel, setupCommonFields(true), gbc, 0, 0, 1, 1);\r\n    gbc.gridx = 0;\r\n    gbc.gridy = 1;\r\n    gbc.gridwidth = 8;\r\n    gbc.gridheight = 1;\r\n    gbc.weighty = 1;\r\n    predecessorsPanel.add(secondPredecessorsPanel, gbc);\r\n}"},
 {"id":3351, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.getComponent()", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"public JPanel getComponent() {\r\n    if ((predecessorsPanel) == null) {\r\n        constructPredecessorsPanel();\r\n    }\r\n    return predecessorsPanel;\r\n}"},
 {"id":3352, "name":"getTable()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.getTable()", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"public JTable getTable() {\r\n    return predecessorsTable;\r\n}"},
 {"id":3353, "name":"getTableModel()", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.getTableModel()", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"public DependencyTableModel getTableModel() {\r\n    return myTableModel;\r\n}"},
 {"id":3354, "name":"setUpHardnessColumnEditor(javax.swing.table.TableColumn)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.setUpHardnessColumnEditor(javax.swing.table.TableColumn)", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"private void setUpHardnessColumnEditor(TableColumn hardnessColumn) {\r\n    DefaultComboBoxModel model = new DefaultComboBoxModel(TaskDependenciesPanel.HARDNESS);\r\n    JComboBox comboBox = new JComboBox(model);\r\n    comboBox.setSelectedIndex(0);\r\n    comboBox.setEditable(false);\r\n    hardnessColumn.setCellEditor(new DefaultCellEditor(comboBox));\r\n}"},
 {"id":3355, "name":"setUpPredecessorComboColumn(javax.swing.table.TableColumn,javax.swing.JTable)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.setUpPredecessorComboColumn(javax.swing.table.TableColumn,javax.swing.JTable)", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"protected void setUpPredecessorComboColumn(TableColumn predecessorColumn, final JTable predecessorTable) {\r\n    // Set up the editor for the sport cells.\r\n    final JComboBox comboBox = new JComboBox();\r\n    Task[] possiblePredecessors = myTaskManager.getAlgorithmCollection().getFindPossibleDependeesAlgorithm().run(getTask());\r\n    for (int i = 0; i < (possiblePredecessors.length); i++) {\r\n        Task next = possiblePredecessors[i];\r\n        comboBox.addItem(new DependencyTableModel.TaskComboItem(next));\r\n    }\r\n    comboBox.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if ((predecessorTable.getEditingRow()) != (-1)) {\r\n                DependencyTableModel.TaskComboItem selectedItem = ((DependencyTableModel.TaskComboItem) (comboBox.getSelectedItem()));\r\n                if (selectedItem != null) {\r\n                    predecessorTable.setValueAt(selectedItem, predecessorTable.getEditingRow(), 0);\r\n                    predecessorTable.setValueAt(TaskDependenciesPanel.CONSTRAINTS[0], predecessorTable.getEditingRow(), 2);\r\n                    // predecessorTable.setValueAt(0+\"\",\r\n                    // predecessorTable.getEditingRow(), 3);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    comboBox.setEditable(false);\r\n    predecessorColumn.setCellEditor(new DefaultCellEditor(comboBox));\r\n}"},
 {"id":3356, "name":"setUpTypeComboColumn(javax.swing.table.TableColumn)", "fullmethod":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.setUpTypeComboColumn(javax.swing.table.TableColumn)", "ownerclassid":"421", "ownerclassname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "sourcecode":"private void setUpTypeComboColumn(TableColumn typeColumn) {\r\n    // Set up the editor for the sport cells.\r\n    DefaultComboBoxModel model = new DefaultComboBoxModel(TaskDependenciesPanel.CONSTRAINTS);\r\n    JComboBox comboBox = new JComboBox(model);\r\n    comboBox.setSelectedIndex(0);\r\n    comboBox.setEditable(false);\r\n    typeColumn.setCellEditor(new DefaultCellEditor(comboBox));\r\n}"},
 {"id":3357, "name":"-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent.-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState)", "ownerclassid":"422", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "sourcecode":"ZoomEvent(ZoomManager manager, ZoomManager.ZoomState newZoomState) {\r\n    super(manager);\r\n    myNewZoomState = newZoomState;\r\n}"},
 {"id":3358, "name":"getNewZoomState()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent.getNewZoomState()", "ownerclassid":"422", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "sourcecode":"public ZoomManager.ZoomState getNewZoomState() {\r\n    return myNewZoomState;\r\n}"},
 {"id":3359, "name":"zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomListener.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "ownerclassid":"423", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomListener", "sourcecode":"void zoomChanged(ZoomEvent e);"},
 {"id":3360, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitPair,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.-init-(net.sourceforge.ganttproject.time.TimeUnitPair,int,int)", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"ZoomState(TimeUnitPair timeUnitPair, int bottomUnitWidth, int stateNumber) {\r\n    myTimeUnitPair = timeUnitPair;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myStateNumber = stateNumber;\r\n}"},
 {"id":3361, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public ZoomManager(TimeUnitStack timeUnitStack) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    TimeUnitPair[] unitPairs = myTimeUnitStack.getTimeUnitPairs();\r\n    myZoomStates = new ZoomManager.ZoomState[unitPairs.length];\r\n    int width1 = 60;\r\n    int width2 = 40;\r\n    for (int i = 0; i < (unitPairs.length); i++) {\r\n        myZoomStates[i] = new ZoomManager.ZoomState(unitPairs[i], width1, i);\r\n        // myZoomStates[i*2+1] = new ZoomState(unitPairs[i], width2);\r\n        float scale = 2 / 3;\r\n        if (i < ((unitPairs.length) - 1)) {\r\n            float defaults1 = unitPairs[i].getBottomTimeUnit().getAtomCount(myTimeUnitStack.getDefaultTimeUnit());\r\n            float defaults2 = unitPairs[(i + 1)].getBottomTimeUnit().getAtomCount(myTimeUnitStack.getDefaultTimeUnit());\r\n            scale = (2 * defaults2) / (3 * defaults1);\r\n        }\r\n        width1 = ((int) (width1 * scale));\r\n    }\r\n}"},
 {"id":3362, "name":"addZoomListener(net.sourceforge.ganttproject.gui.zoom.ZoomListener)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.addZoomListener(net.sourceforge.ganttproject.gui.zoom.ZoomListener)", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public void addZoomListener(ZoomListener listener) {\r\n    myListeners.add(listener);\r\n    listener.zoomChanged(new ZoomEvent(this, myZoomStates[myZooming]));\r\n}"},
 {"id":3363, "name":"canZoomIn()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.canZoomIn()", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public boolean canZoomIn() {\r\n    return (myZooming) > 0;\r\n}"},
 {"id":3364, "name":"canZoomOut()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.canZoomOut()", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public boolean canZoomOut() {\r\n    return (myZooming) < ((myZoomStates.length) - 1);\r\n}"},
 {"id":3365, "name":"fireZoomingChanged(int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.fireZoomingChanged(int,int)", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"private void fireZoomingChanged(int oldZoomValue, int newZoomValue) {\r\n    ZoomEvent e = new ZoomEvent(this, myZoomStates[newZoomValue]);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        ZoomListener nextListener = ((ZoomListener) (myListeners.get(i)));\r\n        nextListener.zoomChanged(e);\r\n    }\r\n}"},
 {"id":3366, "name":"getZoomState()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.getZoomState()", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public ZoomManager.ZoomState getZoomState() {\r\n    return myZoomStates[myZooming];\r\n}"},
 {"id":3367, "name":"removeZoomListener(net.sourceforge.ganttproject.gui.zoom.ZoomListener)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.removeZoomListener(net.sourceforge.ganttproject.gui.zoom.ZoomListener)", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public void removeZoomListener(ZoomListener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":3368, "name":"setZoomState(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.setZoomState(java.lang.String)", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public void setZoomState(String persistentName) {\r\n    for (int i = 0; i < (myZoomStates.length); i++) {\r\n        if (myZoomStates[i].getPersistentName().equals(persistentName)) {\r\n            myZooming = i;\r\n            fireZoomingChanged(0, myZooming);\r\n            break;\r\n        }\r\n    }\r\n}"},
 {"id":3369, "name":"zoomIn()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.zoomIn()", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public void zoomIn() {\r\n    int oldValue = (myZooming)--;\r\n    fireZoomingChanged(oldValue, myZooming);\r\n}"},
 {"id":3370, "name":"zoomOut()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.zoomOut()", "ownerclassid":"425", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "sourcecode":"public void zoomOut() {\r\n    int oldValue = (myZooming)++;\r\n    fireZoomingChanged(oldValue, myZooming);\r\n}"},
 {"id":3371, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitPair,int,int)", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState.-init-(net.sourceforge.ganttproject.time.TimeUnitPair,int,int)", "ownerclassid":"424", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState", "sourcecode":"ZoomState(TimeUnitPair timeUnitPair, int bottomUnitWidth, int stateNumber) {\r\n    myTimeUnitPair = timeUnitPair;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myStateNumber = stateNumber;\r\n}"},
 {"id":3372, "name":"getBottomUnitWidth()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState.getBottomUnitWidth()", "ownerclassid":"424", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState", "sourcecode":"public int getBottomUnitWidth() {\r\n    return myBottomUnitWidth;\r\n}"},
 {"id":3373, "name":"getPersistentName()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState.getPersistentName()", "ownerclassid":"424", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState", "sourcecode":"public String getPersistentName() {\r\n    return ((myTimeUnitPair.getTimeUnitStack().getName()) + \":\") + (myStateNumber);\r\n}"},
 {"id":3374, "name":"getTimeUnitPair()", "fullmethod":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState.getTimeUnitPair()", "ownerclassid":"424", "ownerclassname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState", "sourcecode":"public TimeUnitPair getTimeUnitPair() {\r\n    return myTimeUnitPair;\r\n}"},
 {"id":3375, "name":"-init-(net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State)", "fullmethod":"net.sourceforge.ganttproject.importer.FileChooserPage.-init-(net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State)", "ownerclassid":"426", "ownerclassname":"net.sourceforge.ganttproject.importer.FileChooserPage", "sourcecode":"public FileChooserPage(ImportFileWizardImpl.State state) {\r\n    myState = state;\r\n}"},
 {"id":3376, "name":"createFileFilter()", "fullmethod":"net.sourceforge.ganttproject.importer.FileChooserPage.createFileFilter()", "ownerclassid":"426", "ownerclassname":"net.sourceforge.ganttproject.importer.FileChooserPage", "sourcecode":"protected FileFilter createFileFilter() {\r\n    return new ExtensionBasedFileFilter(myState.myImporter.getFileNamePattern(), myState.myImporter.getFileTypeDescription());\r\n}"},
 {"id":3377, "name":"getFileChooserTitle()", "fullmethod":"net.sourceforge.ganttproject.importer.FileChooserPage.getFileChooserTitle()", "ownerclassid":"426", "ownerclassname":"net.sourceforge.ganttproject.importer.FileChooserPage", "sourcecode":"protected String getFileChooserTitle() {\r\n    return GanttLanguage.getInstance().getText(\"importerFileChooserPageTitle\");\r\n}"},
 {"id":3378, "name":"getOptionGroups()", "fullmethod":"net.sourceforge.ganttproject.importer.FileChooserPage.getOptionGroups()", "ownerclassid":"426", "ownerclassname":"net.sourceforge.ganttproject.importer.FileChooserPage", "sourcecode":"protected GPOptionGroup[] getOptionGroups() {\r\n    return (myState.myImporter) == null ? new GPOptionGroup[0] : myState.myImporter.getSecondaryOptions();\r\n}"},
 {"id":3379, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.importer.FileChooserPage.getTitle()", "ownerclassid":"426", "ownerclassname":"net.sourceforge.ganttproject.importer.FileChooserPage", "sourcecode":"public String getTitle() {\r\n    return GanttLanguage.getInstance().getText(\"importerFileChooserPageTitle\");\r\n}"},
 {"id":3380, "name":"onFileChosen(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.importer.FileChooserPage.onFileChosen(java.io.File)", "ownerclassid":"426", "ownerclassname":"net.sourceforge.ganttproject.importer.FileChooserPage", "sourcecode":"protected void onFileChosen(File file) {\r\n    myState.setFile(file);\r\n}"},
 {"id":3381, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.importer.FileChooserPage.setActive(boolean)", "ownerclassid":"426", "ownerclassname":"net.sourceforge.ganttproject.importer.FileChooserPage", "sourcecode":"public void setActive(boolean b) {\r\n    if (b == false) {\r\n        super.setActive(b);\r\n        myState.setFile(getSelectedFile());\r\n    } else {\r\n        if ((myState.getFile()) != null) {\r\n            setSelectedFile(myState.getFile());\r\n        }\r\n        super.setActive(b);\r\n    }\r\n}"},
 {"id":3382, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"427", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileAction", "sourcecode":"public ImportFileAction(UIFacade uiFacade, GanttProject project) {\r\n    super(null, \"16\");\r\n    /* putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_I,\n    MENU_MASK));\n     */\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n}"},
 {"id":3383, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileAction.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"427", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileAction", "sourcecode":"public void actionPerformed(ActionEvent e) {\r\n    ImportFileWizardImpl wizard = new ImportFileWizardImpl(myUIFacade, myProject);\r\n    wizard.show();\r\n}"},
 {"id":3384, "name":"getIconFilePrefix()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileAction.getIconFilePrefix()", "ownerclassid":"427", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileAction", "sourcecode":"protected String getIconFilePrefix() {\r\n    return \"import_\";\r\n}"},
 {"id":3385, "name":"getLocalizedName()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileAction.getLocalizedName()", "ownerclassid":"427", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileAction", "sourcecode":"protected String getLocalizedName() {\r\n    return GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"import\"));\r\n}"},
 {"id":3386, "name":"isIconVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileAction.isIconVisible(boolean)", "ownerclassid":"427", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileAction", "sourcecode":"public void isIconVisible(boolean isNull) {\r\n}"},
 {"id":3387, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttProject)", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttProject)", "ownerclassid":"429", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "sourcecode":"public ImportFileWizardImpl(UIFacade uiFacade, GanttProject project) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"importWizard.dialog.title\"));\r\n    myProject = project;\r\n    myState = new ImportFileWizardImpl.State();\r\n    Importer[] importers = getImporters();\r\n    addPage(new ImporterChooserPage(importers, myState));\r\n    addPage(new FileChooserPage(myState));\r\n}"},
 {"id":3388, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.-init-()", "ownerclassid":"429", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "sourcecode":"State() {\r\n}"},
 {"id":3389, "name":"canFinish()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.canFinish()", "ownerclassid":"429", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "sourcecode":"protected boolean canFinish() {\r\n    return ((myState.myImporter) != null) && ((myState.getFile()) != null);\r\n}"},
 {"id":3390, "name":"getImporters()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.getImporters()", "ownerclassid":"429", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "sourcecode":"private Importer[] getImporters() {\r\n    List result = new ArrayList();\r\n    Importer[] importers = ((Importer[]) (Mediator.getPluginManager().getExtensions(Importer.EXTENSION_POINT_ID, Importer.class)));\r\n    // String extensionPointID =\r\n    // IConfigurationElement[] configElements = Platform\r\n    // .getExtensionRegistry().getConfigurationElementsFor(\r\n    // extensionPointID);\r\n    return importers;\r\n}"},
 {"id":3391, "name":"i18n(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.i18n(java.lang.String)", "ownerclassid":"429", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "sourcecode":"private String i18n(String key) {\r\n    return GanttLanguage.getInstance().getText(key);\r\n}"},
 {"id":3392, "name":"mergeProjects()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.mergeProjects()", "ownerclassid":"429", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "sourcecode":"private boolean mergeProjects() {\r\n    if (((myProject.getDocument()) == null) && (!(myProject.isModified()))) {\r\n        return false;\r\n    }\r\n    String message = i18n(\"msg17\");\r\n    String title = i18n(\"question\");\r\n    UIFacade.Choice mergeChoice = getUIFacade().showConfirmationDialog(message, title);\r\n    if (mergeChoice == (UIFacade.Choice.YES)) {\r\n        return true;\r\n    }\r\n    if (myProject.checkCurrentProject()) {\r\n        myProject.close();\r\n    }\r\n    return false;\r\n}"},
 {"id":3393, "name":"onOkPressed()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.onOkPressed()", "ownerclassid":"429", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "sourcecode":"protected void onOkPressed() {\r\n    super.onOkPressed();\r\n    // myProject.getTree().addBlankLine(null, myProject.getTree().getRoot().getChildCount());\r\n    boolean merge = mergeProjects();\r\n    myState.myImporter.run(myProject, myProject.getUIFacade(), myState.getFile(), merge);\r\n}"},
 {"id":3394, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State.-init-()", "ownerclassid":"428", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State", "sourcecode":"State() {\r\n}"},
 {"id":3395, "name":"getFile()", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State.getFile()", "ownerclassid":"428", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State", "sourcecode":"File getFile() {\r\n    return myFile;\r\n}"},
 {"id":3396, "name":"setFile(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State.setFile(java.io.File)", "ownerclassid":"428", "ownerclassname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State", "sourcecode":"void setFile(File myFile) {\r\n    this.myFile = myFile;\r\n    this.adjustButtonState();\r\n}"},
 {"id":3397, "name":"getFileNamePattern()", "fullmethod":"net.sourceforge.ganttproject.importer.Importer.getFileNamePattern()", "ownerclassid":"430", "ownerclassname":"net.sourceforge.ganttproject.importer.Importer", "sourcecode":"String getFileNamePattern();"},
 {"id":3398, "name":"getFileTypeDescription()", "fullmethod":"net.sourceforge.ganttproject.importer.Importer.getFileTypeDescription()", "ownerclassid":"430", "ownerclassname":"net.sourceforge.ganttproject.importer.Importer", "sourcecode":"String getFileTypeDescription();"},
 {"id":3399, "name":"getSecondaryOptions()", "fullmethod":"net.sourceforge.ganttproject.importer.Importer.getSecondaryOptions()", "ownerclassid":"430", "ownerclassname":"net.sourceforge.ganttproject.importer.Importer", "sourcecode":"GPOptionGroup[] getSecondaryOptions();"},
 {"id":3400, "name":"run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "fullmethod":"net.sourceforge.ganttproject.importer.Importer.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "ownerclassid":"430", "ownerclassname":"net.sourceforge.ganttproject.importer.Importer", "sourcecode":"void run(GanttProject project, UIFacade facade, File selectedFile, boolean merge);"},
 {"id":3401, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterBase.-init-()", "ownerclassid":"431", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterBase", "sourcecode":"ImporterBase() {\r\n}"},
 {"id":3402, "name":"getFileNamePattern()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterBase.getFileNamePattern()", "ownerclassid":"431", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterBase", "sourcecode":"public String getFileNamePattern() {\r\n    return null;\r\n}"},
 {"id":3403, "name":"getFileTypeDescription()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterBase.getFileTypeDescription()", "ownerclassid":"431", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterBase", "sourcecode":"public String getFileTypeDescription() {\r\n    return null;\r\n}"},
 {"id":3404, "name":"getSecondaryOptions()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterBase.getSecondaryOptions()", "ownerclassid":"431", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterBase", "sourcecode":"public GPOptionGroup[] getSecondaryOptions() {\r\n    return new GPOptionGroup[0];\r\n}"},
 {"id":3405, "name":"-init-(net.sourceforge.ganttproject.importer.Importer[],net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterChooserPage.-init-(net.sourceforge.ganttproject.importer.Importer[],net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State)", "ownerclassid":"432", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterChooserPage", "sourcecode":"ImporterChooserPage(Importer[] importers, ImportFileWizardImpl.State state) {\r\n    myImporters = importers;\r\n    myState = state;\r\n}"},
 {"id":3406, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterChooserPage.-init-(java.lang.String)", "ownerclassid":"432", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterChooserPage", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":3407, "name":"getComponent()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterChooserPage.getComponent()", "ownerclassid":"432", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterChooserPage", "sourcecode":"public Component getComponent() {\r\n    Action[] choiceChangeActions = new Action[myImporters.length];\r\n    GPOptionGroup[] choiceOptions = new GPOptionGroup[myImporters.length];\r\n    for (int i = 0; i < (myImporters.length); i++) {\r\n        final Importer nextImporter = myImporters[i];\r\n        Action nextAction = new AbstractAction(nextImporter.getFileTypeDescription()) {\r\n            public void actionPerformed(ActionEvent e) {\r\n                ImporterChooserPage.this.myState.myImporter = nextImporter;\r\n            }\r\n        };\r\n        choiceChangeActions[i] = nextAction;\r\n        choiceOptions[i] = null;\r\n        if (i == 0) {\r\n            myState.myImporter = nextImporter;\r\n        }\r\n    }\r\n    GPOptionChoicePanel panel = new GPOptionChoicePanel();\r\n    return panel.getComponent(choiceChangeActions, choiceOptions, 0);\r\n}"},
 {"id":3408, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterChooserPage.getTitle()", "ownerclassid":"432", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterChooserPage", "sourcecode":"public String getTitle() {\r\n    return GanttLanguage.getInstance().getText(\"importerChooserPageTitle\");\r\n}"},
 {"id":3409, "name":"setActive(boolean)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterChooserPage.setActive(boolean)", "ownerclassid":"432", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterChooserPage", "sourcecode":"public void setActive(boolean b) {\r\n}"},
 {"id":3410, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFactory.-init-()", "ownerclassid":"433", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFactory", "sourcecode":"ImporterFactory() {\r\n}"},
 {"id":3411, "name":"createFileChooser(net.sourceforge.ganttproject.GanttOptions)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFactory.createFileChooser(net.sourceforge.ganttproject.GanttOptions)", "ownerclassid":"433", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFactory", "sourcecode":"public static JFileChooser createFileChooser(GanttOptions options) {\r\n    JFileChooser fc = new JFileChooser(options.getWorkingDir());\r\n    FileFilter[] filefilters = fc.getChoosableFileFilters();\r\n    for (int i = 0; i < (filefilters.length); i++) {\r\n        fc.removeChoosableFileFilter(filefilters[i]);\r\n    }\r\n    fc.addChoosableFileFilter(ImporterFactory.ganFilter);\r\n    fc.addChoosableFileFilter(ImporterFactory.mppFilter);\r\n    fc.addChoosableFileFilter(ImporterFactory.txtFilter);\r\n    // fc.addChoosableFileFilter(plannerFilter);\r\n    return fc;\r\n}"},
 {"id":3412, "name":"createImporter(javax.swing.filechooser.FileFilter)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFactory.createImporter(javax.swing.filechooser.FileFilter)", "ownerclassid":"433", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFactory", "sourcecode":"public static Importer createImporter(FileFilter fileFilter) {\r\n    if (fileFilter == (ImporterFactory.txtFilter)) {\r\n        return new ImporterFromTxtFile();\r\n    }\r\n    if (fileFilter == (ImporterFactory.ganFilter)) {\r\n        return new ImporterFromGanttFile();\r\n    }\r\n    // else if (fileFilter==plannerFilter) {\r\n    // return new ImporterFromPlannerFile();\r\n    // }\r\n    return null;\r\n}"},
 {"id":3413, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.-init-()", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"ImporterFromGanttFile() {\r\n}"},
 {"id":3414, "name":"-init-(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.-init-(java.lang.String,int,int)", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"TaskFieldImpl(String id, int order, int width) {\r\n    myID = id;\r\n    myOrder = order;\r\n    myWidth = width;\r\n}"},
 {"id":3415, "name":"-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"BufferProject(GanttProject targetProject, UIFacade uiFacade) {\r\n    myDocumentManager = new DocumentCreator(this, uiFacade, this) {\r\n        protected TableHeaderUIFacade getVisibleFields() {\r\n            return myVisibleFields;\r\n        }\r\n    };\r\n    myTaskManager = targetProject.getTaskManager().emptyClone();\r\n    myUIfacade = uiFacade;\r\n}"},
 {"id":3416, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"1( $anonymous0,  $anonymous1,  $anonymous2) {\r\n}"},
 {"id":3417, "name":"createBufferProject(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.createBufferProject(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"private ImporterFromGanttFile.BufferProject createBufferProject(final GanttProject targetProject, final UIFacade uiFacade) {\r\n    return new ImporterFromGanttFile.BufferProject(targetProject, uiFacade);\r\n}"},
 {"id":3418, "name":"getDocument(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.getDocument(java.io.File)", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"protected Document getDocument(File selectedFile) {\r\n    return new FileDocument(selectedFile);\r\n}"},
 {"id":3419, "name":"getFileNamePattern()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.getFileNamePattern()", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"public String getFileNamePattern() {\r\n    return \"xml|gan\";\r\n}"},
 {"id":3420, "name":"getFileTypeDescription()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.getFileTypeDescription()", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"public String getFileTypeDescription() {\r\n    return GanttLanguage.getInstance().getText(\"ganttprojectFiles\");\r\n}"},
 {"id":3421, "name":"openDocument(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.openDocument(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"protected void openDocument(GanttProject targetProject, IGanttProject bufferProject, UIFacade uiFacade, File selectedFile, boolean bMerge) {\r\n    try {\r\n        Document document = bufferProject.getDocumentManager().getDocument(selectedFile.getAbsolutePath());\r\n        document.read();\r\n        targetProject.getRoleManager().importData(bufferProject.getRoleManager());\r\n        {\r\n            CustomPropertyManager targetResCustomPropertyMgr = targetProject.getResourceCustomPropertyManager();\r\n            targetResCustomPropertyMgr.importData(bufferProject.getResourceCustomPropertyManager());\r\n        }\r\n        Map original2ImportedResource = targetProject.getHumanResourceManager().importData(bufferProject.getHumanResourceManager());\r\n        {\r\n            CustomColumnsStorage targetCustomColumnStorage = targetProject.getCustomColumnsStorage();\r\n            targetCustomColumnStorage.importData(bufferProject.getCustomColumnsStorage());\r\n        }\r\n        TaskManagerImpl origTaskManager = ((TaskManagerImpl) (targetProject.getTaskManager()));\r\n        try {\r\n            origTaskManager.setEventsEnabled(false);\r\n            Map original2ImportedTask = origTaskManager.importData(bufferProject.getTaskManager());\r\n            origTaskManager.importAssignments(bufferProject.getTaskManager(), targetProject.getHumanResourceManager(), original2ImportedTask, original2ImportedResource);\r\n        } finally {\r\n            origTaskManager.setEventsEnabled(true);\r\n        }\r\n        targetProject.getResourcePanel().getResourceTreeTableModel().updateResources();\r\n        /* TaskManager taskManager = bufferProject.getTaskManager().emptyClone();\n        // ResourceManager resourceManager =\n        // project.getHumanResourceManager();\n        ResourceManager resourceManager = new HumanResourceManager(bufferProject\n        .getRoleManager().getDefaultRole());\n        RoleManager roleManager = new RoleManagerImpl();\n        GanttXMLOpen opener = new GanttXMLOpen(bufferProject.prjInfos, bufferProject\n        .getArea(), taskManager, bufferProject.getUIFacade());\n        opener.addTagHandler(opener.getDefaultTagHandler());\n        TaskTagHandler taskHandler = new TaskTagHandler(taskManager, opener\n        .getContext());\n        opener.addTagHandler(taskHandler);\n        BlankLineTagHandler blankLineHandler = new BlankLineTagHandler(bufferProject.getUIFacade().getGanttChart());\n        opener.addTagHandler(blankLineHandler);\n        ResourceTagHandler resourceHandler = new ResourceTagHandler(\n        resourceManager, roleManager, bufferProject.getResourceCustomPropertyManager());\n        opener.addTagHandler(resourceHandler);\n        DependencyTagHandler dependencyHandler = new DependencyTagHandler(\n        opener.getContext(), taskManager, myUIFacade);\n        opener.addTagHandler(dependencyHandler);\n        RoleTagHandler roleHandler = new RoleTagHandler(roleManager);\n        opener.addTagHandler(roleHandler);\n        opener.addParsingListener(dependencyHandler);\n        opener.addParsingListener(resourceHandler);\n        AllocationTagHandler allocationHandler = new AllocationTagHandler(\n        resourceManager, taskManager, roleManager);\n        opener.addTagHandler(allocationHandler);\n        opener.addParsingListener(allocationHandler);\n        VacationTagHandler vacationHandler = new VacationTagHandler(\n        resourceManager);\n        opener.addTagHandler(vacationHandler);\n\n        //\n        if (bMerge == false) {\n        HolidayTagHandler holidayHandler = new HolidayTagHandler(\n        bufferProject);\n\n        opener.addTagHandler(holidayHandler);\n        opener.addParsingListener(holidayHandler);\n        } else {\n        opener.isMerging(true);\n        }\n        opener.load(document.getInputStream());\n\n        bufferProject.getRoleManager().importData(roleManager);\n        Map original2ImportedResource = bufferProject.getHumanResourceManager()\n        .importData(resourceManager);\n        TaskManagerImpl origTaskManager = (TaskManagerImpl) bufferProject.getTaskManager();\n        try {\n        origTaskManager.setEventsEnabled(false);\n        Map original2ImportedTask = origTaskManager.importData(taskManager);\n        origTaskManager.importAssignments(\n        taskManager,\n        bufferProject.getHumanResourceManager(), original2ImportedTask,\n        original2ImportedResource);\n        }\n        finally {\n        origTaskManager.setEventsEnabled(true);\n        }\n        bufferProject.getResourcePanel().getResourceTreeTableModel()\n        .updateResources();\n         */\r\n    } catch (IOException e) {\r\n        uiFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":3422, "name":"run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "ownerclassid":"437", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "sourcecode":"public void run(GanttProject project, final UIFacade uiFacade, final File selectedFile, final boolean bMerge) {\r\n    myUIFacade = project.getUIFacade();\r\n    final GanttProject targetProject = project;\r\n    final ImporterFromGanttFile.BufferProject bufferProject = createBufferProject(targetProject, uiFacade);\r\n    project.getUndoManager().undoableEdit(\"Import\", new Runnable() {\r\n        public void run() {\r\n            openDocument(targetProject, bufferProject, uiFacade, selectedFile, bMerge);\r\n            myUIFacade.getTaskTree().getVisibleFields().importData(bufferProject.getVisibleFields());\r\n        }\r\n    });\r\n}"},
 {"id":3423, "name":"-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"BufferProject(GanttProject targetProject, UIFacade uiFacade) {\r\n    myDocumentManager = new DocumentCreator(this, uiFacade, this) {\r\n        protected TableHeaderUIFacade getVisibleFields() {\r\n            return myVisibleFields;\r\n        }\r\n    };\r\n    myTaskManager = targetProject.getTaskManager().emptyClone();\r\n    myUIfacade = uiFacade;\r\n}"},
 {"id":3424, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"1( $anonymous0,  $anonymous1,  $anonymous2) {\r\n}"},
 {"id":3425, "name":"getCustomColumnsStorage()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.getCustomColumnsStorage()", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"public CustomColumnsStorage getCustomColumnsStorage() {\r\n    return myTaskManager.getCustomColumnStorage();\r\n}"},
 {"id":3426, "name":"getDocumentManager()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.getDocumentManager()", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"public DocumentManager getDocumentManager() {\r\n    return myDocumentManager;\r\n}"},
 {"id":3427, "name":"getTaskCustomColumnManager()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.getTaskCustomColumnManager()", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"public CustomColumnsManager getTaskCustomColumnManager() {\r\n    // TODO Auto-generated method stub\r\n    return super.getTaskCustomColumnManager();\r\n}"},
 {"id":3428, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.getTaskManager()", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"public TaskManager getTaskManager() {\r\n    return myTaskManager;\r\n}"},
 {"id":3429, "name":"getVisibleFields()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.getVisibleFields()", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"public TableHeaderUIFacade getVisibleFields() {\r\n    return myVisibleFields;\r\n}"},
 {"id":3430, "name":"newParser()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.newParser()", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"public GPParser newParser() {\r\n    return new GanttXMLOpen(myProjectInfo, getUIConfiguration(), getTaskManager(), myUIfacade);\r\n}"},
 {"id":3431, "name":"newSaver()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.newSaver()", "ownerclassid":"434", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "sourcecode":"public GPSaver newSaver() {\r\n    return null;\r\n}"},
 {"id":3432, "name":"-init-(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl.-init-(java.lang.String,int,int)", "ownerclassid":"435", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl", "sourcecode":"TaskFieldImpl(String id, int order, int width) {\r\n    myID = id;\r\n    myOrder = order;\r\n    myWidth = width;\r\n}"},
 {"id":3433, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl.getID()", "ownerclassid":"435", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl", "sourcecode":"public String getID() {\r\n    return myID;\r\n}"},
 {"id":3434, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl.getName()", "ownerclassid":"435", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl", "sourcecode":"public String getName() {\r\n    return null;\r\n}"},
 {"id":3435, "name":"getOrder()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl.getOrder()", "ownerclassid":"435", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl", "sourcecode":"public int getOrder() {\r\n    return myOrder;\r\n}"},
 {"id":3436, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl.getWidth()", "ownerclassid":"435", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl", "sourcecode":"public int getWidth() {\r\n    return myWidth;\r\n}"},
 {"id":3437, "name":"isVisible()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl.isVisible()", "ownerclassid":"435", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$TaskFieldImpl", "sourcecode":"public boolean isVisible() {\r\n    return true;\r\n}"},
 {"id":3438, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl.-init-()", "ownerclassid":"436", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl", "sourcecode":"VisibleFieldsImpl() {\r\n}"},
 {"id":3439, "name":"add(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl.add(java.lang.String,int,int)", "ownerclassid":"436", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl", "sourcecode":"public void add(String name, int order, int width) {\r\n    myFields.add(new ImporterFromGanttFile.TaskFieldImpl(name, order, width));\r\n}"},
 {"id":3440, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl.clear()", "ownerclassid":"436", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl", "sourcecode":"public void clear() {\r\n    myFields.clear();\r\n}"},
 {"id":3441, "name":"getField(int)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl.getField(int)", "ownerclassid":"436", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl", "sourcecode":"public TableHeaderUIFacade.Column getField(int index) {\r\n    return ((TableHeaderUIFacade.Column) (myFields.get(index)));\r\n}"},
 {"id":3442, "name":"getSize()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl.getSize()", "ownerclassid":"436", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl", "sourcecode":"public int getSize() {\r\n    return myFields.size();\r\n}"},
 {"id":3443, "name":"importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "ownerclassid":"436", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl", "sourcecode":"public void importData(TableHeaderUIFacade source) {\r\n    for (int i = 0; i < (source.getSize()); i++) {\r\n        TableHeaderUIFacade.Column nextField = source.getField(i);\r\n        myFields.add(nextField);\r\n    }\r\n}"},
 {"id":3444, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile.-init-()", "ownerclassid":"438", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile", "sourcecode":"ImporterFromTxtFile() {\r\n}"},
 {"id":3445, "name":"getFileNamePattern()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile.getFileNamePattern()", "ownerclassid":"438", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile", "sourcecode":"public String getFileNamePattern() {\r\n    return \"txt\";\r\n}"},
 {"id":3446, "name":"getFileTypeDescription()", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile.getFileTypeDescription()", "ownerclassid":"438", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile", "sourcecode":"public String getFileTypeDescription() {\r\n    return GanttLanguage.getInstance().getText(\"textFiles\");\r\n}"},
 {"id":3447, "name":"run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "fullmethod":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "ownerclassid":"438", "ownerclassname":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile", "sourcecode":"public void run(GanttProject project, UIFacade uiFacade, File selectedFile, boolean merge) {\r\n    GanttTXTOpen opener = new GanttTXTOpen(project.getTree(), project, project.getArea(), project.getTaskManager());\r\n    opener.load(selectedFile);\r\n    project.setModified();\r\n}"},
 {"id":3448, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.AssignmentSaver.-init-()", "ownerclassid":"439", "ownerclassname":"net.sourceforge.ganttproject.io.AssignmentSaver", "sourcecode":"AssignmentSaver() {\r\n}"},
 {"id":3449, "name":"save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.AssignmentSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"439", "ownerclassname":"net.sourceforge.ganttproject.io.AssignmentSaver", "sourcecode":"void save(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"allocations\", handler);\r\n    Task[] tasks = project.getTaskManager().getTasks();\r\n    for (int i = 0; i < (tasks.length); i++) {\r\n        Task task = tasks[i];\r\n        ResourceAssignment[] assignments = task.getAssignments();\r\n        for (int j = 0; j < (assignments.length); j++) {\r\n            int task_id = task.getTaskID();\r\n            ResourceAssignment next = assignments[j];\r\n            Role roleForAssignment = next.getRoleForAssignment();\r\n            if (roleForAssignment == null) {\r\n                if ((next.getResource()) instanceof HumanResource) {\r\n                    roleForAssignment = ((HumanResource) (next.getResource())).getRole();\r\n                }\r\n            }\r\n            addAttribute(\"task-id\", String.valueOf(task_id), attrs);\r\n            addAttribute(\"resource-id\", String.valueOf(next.getResource().getId()), attrs);\r\n            addAttribute(\"function\", roleForAssignment.getPersistentID(), attrs);\r\n            addAttribute(\"responsible\", String.valueOf(next.isCoordinator()), attrs);\r\n            addAttribute(\"load\", String.valueOf(next.getLoad()), attrs);\r\n            emptyElement(\"allocation\", attrs, handler);\r\n        }\r\n    }\r\n    endElement(\"allocations\", handler);\r\n}"},
 {"id":3450, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.CSVOptions.-init-()", "ownerclassid":"440", "ownerclassname":"net.sourceforge.ganttproject.io.CSVOptions", "sourcecode":"CSVOptions() {\r\n}"},
 {"id":3451, "name":"correct(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.CSVOptions.correct(java.lang.String)", "ownerclassid":"440", "ownerclassname":"net.sourceforge.ganttproject.io.CSVOptions", "sourcecode":"public String correct(String s) {\r\n    String res;\r\n    res = s.replaceAll(\"&\", \"&#38;\");\r\n    res = res.replaceAll(\"<\", \"&#60;\");\r\n    res = res.replaceAll(\">\", \"&#62;\");\r\n    res = res.replaceAll(\"/\", \"&#47;\");\r\n    res = res.replaceAll(\"\"\", \"&#34;\");\r\n    return res;\r\n}"},
 {"id":3452, "name":"getSeparatedTextChars()", "fullmethod":"net.sourceforge.ganttproject.io.CSVOptions.getSeparatedTextChars()", "ownerclassid":"440", "ownerclassname":"net.sourceforge.ganttproject.io.CSVOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return a list of the possible separated char.\r\n */\r\npublic String[] getSeparatedTextChars() {\r\n    String[] charText = new String[]{ \"      \", \"   \"   \" };\r\n    return charText;\r\n}"},
 {"id":3453, "name":"getXml()", "fullmethod":"net.sourceforge.ganttproject.io.CSVOptions.getXml()", "ownerclassid":"440", "ownerclassname":"net.sourceforge.ganttproject.io.CSVOptions", "sourcecode":"/**\r\n *\r\n *\r\n * @return the csv settings as an xml schema.\r\n */\r\npublic String getXml() {\r\n    String res = \"    <csv-export>\n\";\r\n    // general options\r\n    res += \"      <csv-general \n\";\r\n    res += (\"        fixed=\"\" + (bFixedSize)) + \"\"\n\";\r\n    res += (\"        separatedChar=\"\" + (correct(sSeparatedChar))) + \"\"\n\";\r\n    res += (\"        separatedTextChar=\"\" + (correct(sSeparatedTextChar))) + \"\"/>\n\";\r\n    // tasks export options\r\n    res += \"      <csv-tasks\n\";\r\n    res += (\"        id=\"\" + (bExportTaskID)) + \"\"\n\";\r\n    res += (\"        name=\"\" + (bExportTaskName)) + \"\"\n\";\r\n    res += (\"        start-date=\"\" + (bExportTaskStartDate)) + \"\"\n\";\r\n    res += (\"        end-date=\"\" + (bExportTaskEndDate)) + \"\"\n\";\r\n    res += (\"        percent=\"\" + (bExportTaskPercent)) + \"\"\n\";\r\n    res += (\"        duration=\"\" + (bExportTaskDuration)) + \"\"\n\";\r\n    res += (\"        webLink=\"\" + (bExportTaskWebLink)) + \"\"\n\";\r\n    res += (\"        resources=\"\" + (bExportTaskResources)) + \"\"\n\";\r\n    res += (\"        notes=\"\" + (bExportTaskNotes)) + \"\"/>\n\";\r\n    // resources export options\r\n    res += \"      <csv-resources\n\";\r\n    res += (\"        id=\"\" + (bExportResourceID)) + \"\"\n\";\r\n    res += (\"        name=\"\" + (bExportResourceName)) + \"\"\n\";\r\n    res += (\"        mail=\"\" + (bExportResourceMail)) + \"\"\n\";\r\n    res += (\"        phone=\"\" + (bExportResourcePhone)) + \"\"\n\";\r\n    res += (\"        role=\"\" + (bExportResourceRole)) + \"\"/>\n\";\r\n    return res += \"    </csv-export>\n\";\r\n}"},
 {"id":3454, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.CalendarSaver.-init-()", "ownerclassid":"441", "ownerclassname":"net.sourceforge.ganttproject.io.CalendarSaver", "sourcecode":"CalendarSaver() {\r\n}"},
 {"id":3455, "name":"getShortDayName(int)", "fullmethod":"net.sourceforge.ganttproject.io.CalendarSaver.getShortDayName(int)", "ownerclassid":"441", "ownerclassname":"net.sourceforge.ganttproject.io.CalendarSaver", "sourcecode":"private String getShortDayName(int i) {\r\n    myCalendar.set(Calendar.DAY_OF_WEEK, i);\r\n    return myShortFormat.format(myCalendar.getTime()).toLowerCase();\r\n}"},
 {"id":3456, "name":"save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.CalendarSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"441", "ownerclassname":"net.sourceforge.ganttproject.io.CalendarSaver", "sourcecode":"void save(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"calendars\", attrs, handler);\r\n    startElement(\"day-types\", attrs, handler);\r\n    // \r\n    addAttribute(\"id\", \"0\", attrs);\r\n    emptyElement(\"day-type\", attrs, handler);\r\n    addAttribute(\"id\", \"1\", attrs);\r\n    emptyElement(\"day-type\", attrs, handler);\r\n    // \r\n    addAttribute(\"id\", \"1\", attrs);\r\n    addAttribute(\"name\", \"default\", attrs);\r\n    startElement(\"calendar\", attrs, handler);\r\n    for (int i = 1; i <= 7; i++) {\r\n        boolean holiday = (project.getActiveCalendar().getWeekDayType(i)) == (GPCalendar.DayType.WEEKEND);\r\n        addAttribute(getShortDayName(i), (holiday ? \"1\" : \"0\"), attrs);\r\n    }\r\n    emptyElement(\"default-week\", attrs, handler);\r\n    emptyElement(\"overriden-day-types\", attrs, handler);\r\n    emptyElement(\"days\", attrs, handler);\r\n    endElement(\"calendar\", handler);\r\n    // \r\n    endElement(\"day-types\", handler);\r\n    Collection publicHoliday = project.getActiveCalendar().getPublicHolidays();\r\n    for (Iterator iter = publicHoliday.iterator(); iter.hasNext();) {\r\n        Date d = ((Date) (iter.next()));\r\n        if ((d.getYear()) == (1 - 1900))\r\n            addAttribute(\"year\", \"\", attrs);\r\n        else\r\n            addAttribute(\"year\", (((d.getYear()) + 1900) + \"\"), attrs);\r\n\r\n        addAttribute(\"month\", (((d.getMonth()) + 1) + \"\"), attrs);\r\n        addAttribute(\"date\", ((d.getDate()) + \"\"), attrs);\r\n        emptyElement(\"date\", attrs, handler);\r\n    }\r\n    endElement(\"calendars\", handler);\r\n}"},
 {"id":3457, "name":"save(java.io.OutputStream)", "fullmethod":"net.sourceforge.ganttproject.io.GPSaver.save(java.io.OutputStream)", "ownerclassid":"442", "ownerclassname":"net.sourceforge.ganttproject.io.GPSaver", "sourcecode":"void save(OutputStream output) throws IOException;"},
 {"id":3458, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.io.CSVOptions)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.io.CSVOptions)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttCSVExport(IGanttProject project, CSVOptions csvOptions) {\r\n    myProject = project;\r\n    myTasks = project.getTaskManager().getTasks();\r\n    myHrManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    this.csvOptions = csvOptions;\r\n}"},
 {"id":3459, "name":"beginToSave(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.beginToSave(java.io.OutputStreamWriter)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n * Start saving the csv document.\r\n */\r\npublic void beginToSave(OutputStreamWriter out) throws IOException {\r\n    resources = myHrManager.getResources();\r\n    bFixedSize = csvOptions.bFixedSize;\r\n    if (csvOptions.bFixedSize)\r\n        getMaxSize();\r\n\r\n    writeTasks(out);\r\n    out.write(\"\n\n\n\");\r\n    writeResources(out);\r\n    out.write(\"\n\");\r\n}"},
 {"id":3460, "name":"correctField(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.correctField(java.lang.String)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"private String correctField(String field) {\r\n    String res = \"\";\r\n    for (int i = 0; i < ((iMaxSize) - (field.length())); i++)\r\n        res += \" \";\r\n\r\n    res += field;\r\n    return res;\r\n}"},
 {"id":3461, "name":"getAssignments(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.getAssignments(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n *\r\n *\r\n * @return the list of the assignment for the resources.\r\n */\r\nprivate String getAssignments(Task task) {\r\n    String res = \"\";\r\n    ResourceAssignment[] assignment = task.getAssignments();\r\n    for (int i = 0; i < (assignment.length); i++)\r\n        res += (assignment[i].getResource()) + (i == ((assignment.length) - 1) ? \"\" : csvOptions.sSeparatedChar.equals(\";\") ? \",\" : \";\");\r\n\r\n    return res;\r\n}"},
 {"id":3462, "name":"getMaxSize()", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.getMaxSize()", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n * set the maximum size for all strings.\r\n */\r\nvoid getMaxSize() {\r\n    /* <String> */\r\n    List customFields = myProject.getCustomColumnsStorage().getCustomColumnsNames();\r\n    iMaxSize = 0;\r\n    for (int i = 0; i < (myTasks.length); i++) {\r\n        Task task = myTasks[i];\r\n        if (csvOptions.bExportTaskID) {\r\n            String s = \"\" + (task.getTaskID());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportTaskName) {\r\n            String s = \"\" + (getName(task));\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportTaskStartDate) {\r\n            String s = \"\" + (task.getStart());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportTaskEndDate) {\r\n            String s = \"\" + (task.getEnd());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportTaskDuration) {\r\n            String s = \"\" + (task.getDuration().getLength());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportTaskPercent) {\r\n            String s = \"\" + (task.getCompletionPercentage());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportTaskWebLink) {\r\n            String s = \"\" + (getWebLink(((GanttTask) (task))));\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportTaskResources) {\r\n            String s = \"\" + (getAssignments(task));\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportTaskNotes) {\r\n            String s = \"\" + (task.getNotes());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        CustomColumnsValues customValues = task.getCustomValues();\r\n        for (int j = 0; j < (customFields.size()); j++) {\r\n            Object nextCustomFieldValue = customValues.getValue(String.valueOf(customFields.get(j)));\r\n            String nextValueAsString = String.valueOf(nextCustomFieldValue);\r\n            if ((nextValueAsString.length()) > (iMaxSize)) {\r\n                iMaxSize = nextValueAsString.length();\r\n            }\r\n        }\r\n    }\r\n    // parse all resources\r\n    for (int i = 0; i < (resources.size()); i++) {\r\n        HumanResource p = ((HumanResource) (resources.get(i)));\r\n        if (csvOptions.bExportResourceID) {\r\n            String s = \"\" + (p.getId());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportResourceName) {\r\n            String s = \"\" + (p.getName());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportResourceMail) {\r\n            String s = \"\" + (p.getMail());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportResourcePhone) {\r\n            String s = \"\" + (p.getPhone());\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        if (csvOptions.bExportResourceRole) {\r\n            Role role = p.getRole();\r\n            String sRoleID = \"0\";\r\n            if (role != null)\r\n                sRoleID = role.getPersistentID();\r\n\r\n            String s = \"\" + sRoleID;\r\n            if ((s.length()) > (iMaxSize))\r\n                iMaxSize = s.length();\r\n\r\n        }\r\n        List customProps = p.getCustomProperties();\r\n        for (int j = 0; j < (customProps.size()); j++) {\r\n            CustomProperty nextProperty = ((CustomProperty) (customProps.get(j)));\r\n            if ((nextProperty.getValueAsString().length()) > (iMaxSize)) {\r\n                iMaxSize = nextProperty.getValueAsString().length();\r\n            }\r\n        }\r\n    }\r\n}// get maxIndentation end\r\n"},
 {"id":3463, "name":"getName(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.getName(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n *\r\n *\r\n * @return the name of task with the correct level.\r\n */\r\nprivate String getName(Task task) {\r\n    if (bFixedSize)\r\n        return task.getName();\r\n\r\n    String res = \"\";\r\n    int depth = task.getManager().getTaskHierarchy().getDepth(task);\r\n    for (int i = 0; i < depth; i++) {\r\n        res += \"  \";\r\n    }\r\n    return res + (task.getName());\r\n}"},
 {"id":3464, "name":"getWebLink(net.sourceforge.ganttproject.GanttTask)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.getWebLink(net.sourceforge.ganttproject.GanttTask)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n *\r\n *\r\n * @return the link of the task.\r\n */\r\nprivate String getWebLink(GanttTask task) {\r\n    return task.getWebLink().equals(\"http://\") ? \"\" : task.getWebLink();\r\n}"},
 {"id":3465, "name":"i18n(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.i18n(java.lang.String)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"private String i18n(String key) {\r\n    return GanttLanguage.getInstance().getText(key);\r\n}"},
 {"id":3466, "name":"save(java.io.OutputStream)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.save(java.io.OutputStream)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n * Save the project as CSV on a stream\r\n *\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void save(OutputStream stream) throws IOException {\r\n    OutputStreamWriter out = new OutputStreamWriter(stream);\r\n    beginToSave(out);\r\n    out.close();\r\n}"},
 {"id":3467, "name":"writeCell(java.io.OutputStreamWriter,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.writeCell(java.io.OutputStreamWriter,java.lang.String)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"private void writeCell(OutputStreamWriter out, String cellValue) throws IOException {\r\n    out.write(((correctField(cellValue)) + (bFixedSize ? \"\" : csvOptions.sSeparatedChar)));\r\n}"},
 {"id":3468, "name":"writeResourceHeaders(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.writeResourceHeaders(java.io.OutputStreamWriter)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"private void writeResourceHeaders(OutputStreamWriter out) throws IOException {\r\n    if (csvOptions.bExportResourceID) {\r\n        writeCell(out, i18n(\"tableColID\"));\r\n    }\r\n    if (csvOptions.bExportResourceName) {\r\n        writeCell(out, i18n(\"tableColResourceName\"));\r\n    }\r\n    if (csvOptions.bExportResourceMail) {\r\n        writeCell(out, i18n(\"tableColResourceEMail\"));\r\n    }\r\n    if (csvOptions.bExportResourcePhone) {\r\n        writeCell(out, i18n(\"tableColResourcePhone\"));\r\n    }\r\n    if (csvOptions.bExportResourceRole) {\r\n        writeCell(out, i18n(\"tableColResourceRole\"));\r\n    }\r\n    List customFieldDefs = myProject.getResourceCustomPropertyManager().getDefinitions();\r\n    for (int i = 0; i < (customFieldDefs.size()); i++) {\r\n        CustomPropertyDefinition nextDef = ((CustomPropertyDefinition) (customFieldDefs.get(i)));\r\n        writeCell(out, nextDef.getName());\r\n    }\r\n    out.write(\"\n\n\");\r\n}"},
 {"id":3469, "name":"writeResources(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.writeResources(java.io.OutputStreamWriter)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n * write the resources.\r\n */\r\nprivate void writeResources(OutputStreamWriter out) throws IOException {\r\n    writeResourceHeaders(out);\r\n    // parse all resources\r\n    for (int i = 0; i < (resources.size()); i++) {\r\n        HumanResource p = ((HumanResource) (resources.get(i)));\r\n        // ID\r\n        if (csvOptions.bExportResourceID) {\r\n            writeCell(out, (\"\" + (p.getId())));\r\n        }\r\n        // Name\r\n        if (csvOptions.bExportResourceName) {\r\n            writeTextCell(out, p.getName());\r\n        }\r\n        // Mail\r\n        if (csvOptions.bExportResourceMail) {\r\n            writeTextCell(out, p.getMail());\r\n        }\r\n        // Phone\r\n        if (csvOptions.bExportResourcePhone) {\r\n            writeTextCell(out, p.getPhone());\r\n        }\r\n        // Role\r\n        if (csvOptions.bExportResourceRole) {\r\n            Role role = p.getRole();\r\n            String sRoleID = (role == null) ? \"0\" : role.getPersistentID();\r\n            writeTextCell(out, sRoleID);\r\n        }\r\n        List customProps = p.getCustomProperties();\r\n        for (int j = 0; j < (customProps.size()); j++) {\r\n            CustomProperty nextProperty = ((CustomProperty) (customProps.get(j)));\r\n            writeTextCell(out, nextProperty.getValueAsString());\r\n        }\r\n        out.write(\"\n\");\r\n    }\r\n}// end of write resources\r\n"},
 {"id":3470, "name":"writeTaskHeaders(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.writeTaskHeaders(java.io.OutputStreamWriter)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"private void writeTaskHeaders(OutputStreamWriter out) throws IOException {\r\n    if (csvOptions.bExportTaskID) {\r\n        writeCell(out, i18n(\"tableColID\"));\r\n    }\r\n    if (csvOptions.bExportTaskName) {\r\n        writeCell(out, i18n(\"tableColName\"));\r\n    }\r\n    if (csvOptions.bExportTaskStartDate) {\r\n        writeCell(out, i18n(\"tableColBegDate\"));\r\n    }\r\n    if (csvOptions.bExportTaskEndDate) {\r\n        writeCell(out, i18n(\"tableColEndDate\"));\r\n    }\r\n    if (csvOptions.bExportTaskDuration) {\r\n        writeCell(out, i18n(\"tableColDuration\"));\r\n    }\r\n    if (csvOptions.bExportTaskPercent) {\r\n        writeCell(out, i18n(\"tableColCompletion\"));\r\n    }\r\n    if (csvOptions.bExportTaskWebLink) {\r\n        writeCell(out, i18n(\"webLink\"));\r\n    }\r\n    if (csvOptions.bExportTaskResources) {\r\n        writeCell(out, i18n(\"resources\"));\r\n    }\r\n    if (csvOptions.bExportTaskNotes) {\r\n        writeCell(out, i18n(\"notes\"));\r\n    }\r\n    /* <String> */\r\n    List customFields = myProject.getCustomColumnsStorage().getCustomColumnsNames();\r\n    for (int i = 0; i < (customFields.size()); i++) {\r\n        writeCell(out, String.valueOf(customFields.get(i)));\r\n    }\r\n    out.write(\"\n\n\");\r\n}"},
 {"id":3471, "name":"writeTasks(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.writeTasks(java.io.OutputStreamWriter)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"/**\r\n * Write all tasks.\r\n */\r\nprivate void writeTasks(OutputStreamWriter out) throws IOException {\r\n    writeTaskHeaders(out);\r\n    /* <String> */\r\n    List customFields = myProject.getCustomColumnsStorage().getCustomColumnsNames();\r\n    for (int i = 0; i < (myTasks.length); i++) {\r\n        Task task = myTasks[i];\r\n        // ID\r\n        if (csvOptions.bExportTaskID) {\r\n            writeCell(out, (\"\" + (task.getTaskID())));\r\n        }\r\n        // Name\r\n        if (csvOptions.bExportTaskName) {\r\n            writeTextCell(out, getName(task));\r\n        }\r\n        // Start Date\r\n        if (csvOptions.bExportTaskStartDate) {\r\n            writeCell(out, task.getStart().toString());\r\n        }\r\n        // End Date\r\n        if (csvOptions.bExportTaskEndDate) {\r\n            writeCell(out, task.getEnd().toString());\r\n        }\r\n        // Duration\r\n        if (csvOptions.bExportTaskDuration) {\r\n            writeCell(out, (\"\" + (task.getDuration().getLength())));\r\n        }\r\n        // Percent complete\r\n        if (csvOptions.bExportTaskPercent) {\r\n            writeCell(out, (\"\" + (task.getCompletionPercentage())));\r\n        }\r\n        // Web Link\r\n        if (csvOptions.bExportTaskWebLink) {\r\n            writeTextCell(out, getWebLink(((GanttTask) (task))));\r\n        }\r\n        // associated resources\r\n        if (csvOptions.bExportTaskResources) {\r\n            writeTextCell(out, getAssignments(task));\r\n        }\r\n        // Notes\r\n        if (csvOptions.bExportTaskNotes) {\r\n            writeTextCell(out, task.getNotes());\r\n        }\r\n        CustomColumnsValues customValues = task.getCustomValues();\r\n        for (int j = 0; j < (customFields.size()); j++) {\r\n            Object nextCustomFieldValue = customValues.getValue(String.valueOf(customFields.get(j)));\r\n            writeCell(out, String.valueOf(nextCustomFieldValue));\r\n        }\r\n        out.write(\"\n\");\r\n    }\r\n}// end of write tasks\r\n"},
 {"id":3472, "name":"writeTextCell(java.io.OutputStreamWriter,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttCSVExport.writeTextCell(java.io.OutputStreamWriter,java.lang.String)", "ownerclassid":"443", "ownerclassname":"net.sourceforge.ganttproject.io.GanttCSVExport", "sourcecode":"private void writeTextCell(OutputStreamWriter out, String cellValue) throws IOException {\r\n    out.write((((bFixedSize ? \"\" : csvOptions.sSeparatedTextChar) + (correctField(cellValue))) + (bFixedSize ? \"\" : (csvOptions.sSeparatedTextChar) + (csvOptions.sSeparatedChar))));\r\n}"},
 {"id":3473, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.GanttChartViewSaver.-init-()", "ownerclassid":"444", "ownerclassname":"net.sourceforge.ganttproject.io.GanttChartViewSaver", "sourcecode":"GanttChartViewSaver() {\r\n}"},
 {"id":3474, "name":"save(net.sourceforge.ganttproject.GanttTreeTable,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttChartViewSaver.save(net.sourceforge.ganttproject.GanttTreeTable,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"444", "ownerclassname":"net.sourceforge.ganttproject.io.GanttChartViewSaver", "sourcecode":"void save(GanttTreeTable treeTable, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"taskdisplaycolumns\", handler);\r\n    final List displayedColumns = treeTable.getDisplayColumns();\r\n    if (displayedColumns != null) {\r\n        for (int i = 0; i < (displayedColumns.size()); i++) {\r\n            GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (displayedColumns.get(i)));\r\n            if (dc.isDisplayed()) {\r\n                addAttribute(\"property-id\", dc.getID(), attrs);\r\n                addAttribute(\"order\", String.valueOf(dc.getOrder()), attrs);\r\n                addAttribute(\"width\", String.valueOf(dc.getWidth()), attrs);\r\n                emptyElement(\"displaycolumn\", attrs, handler);\r\n            }\r\n        }\r\n    }\r\n    endElement(\"taskdisplaycolumns\", handler);\r\n}"},
 {"id":3475, "name":"-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.io.GanttTXTOpen.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"445", "ownerclassname":"net.sourceforge.ganttproject.io.GanttTXTOpen", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttTXTOpen(GanttTree2 tree, GanttProject appli, GanttGraphicArea gra, TaskManager taskManager) {\r\n    // Affect fields of the class\r\n    this(taskManager);\r\n    this.treePanel = tree;\r\n    this.prj = appli;\r\n    this.area = gra;\r\n}"},
 {"id":3476, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.io.GanttTXTOpen.-init-(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"445", "ownerclassname":"net.sourceforge.ganttproject.io.GanttTXTOpen", "sourcecode":"/**\r\n * Constructor with a task manager.\r\n */\r\npublic GanttTXTOpen(TaskManager taskManager) {\r\n    myTaskManager = taskManager;\r\n}"},
 {"id":3477, "name":"load(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.io.GanttTXTOpen.load(java.io.File)", "ownerclassid":"445", "ownerclassname":"net.sourceforge.ganttproject.io.GanttTXTOpen", "sourcecode":"/**\r\n * Load tasks list from a text file.\r\n */\r\npublic boolean load(File f) {\r\n    try {\r\n        // Open a stream\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f)));\r\n        while (br.ready()) {\r\n            // Read each lines\r\n            String sTaskName = br.readLine();\r\n            // The test is used to skip the white line (with no text)\r\n            if (!(sTaskName.equals(\"\"))) {\r\n                // Create the task\r\n                GanttTask task = myTaskManager.createTask();\r\n                task.setColor(area.getTaskColor());\r\n                task.setName(sTaskName);\r\n                task.setLength(1);\r\n                myTaskManager.registerTask(task);\r\n                treePanel.addObject(task, null, (-1));\r\n            }\r\n        } \r\n    } catch (Exception e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":3478, "name":"-init-(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.-init-(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttXFIGSaver(IGanttProject project) {\r\n    // this.area = area;\r\n    // this.prjInfos = prjInfos;\r\n    myTaskManager = project.getTaskManager();\r\n}"},
 {"id":3479, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.-init-()", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"TextObject() {\r\n}"},
 {"id":3480, "name":"beginToSave(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.beginToSave(java.io.OutputStreamWriter)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * Start saving the xfig image.\r\n */\r\npublic void beginToSave(OutputStreamWriter fout) throws IOException {\r\n    if (debug)\r\n        System.out.println(\"beginToSave begin\");\r\n\r\n    float depthval = 50;// depth level - 999 is the lowest level.\r\n\r\n    // targetWidthPoints is in pixels, 1200 pixels per inch,\r\n    // or about 472 pixels/cm\r\n    float targetWidthPoints = 1200;\r\n    // get the list of tasks on an array list\r\n    // lot = tree.getAllTasks();\r\n    lot = Arrays.asList(myTaskManager.getTasks());\r\n    fTtextwidth = getProjectTextWidth();\r\n    if (debug)\r\n        System.out.println((\"Text Size : \" + (fTtextwidth)));\r\n\r\n    // write the xfig header\r\n    xfigheader(fout);\r\n    // Search for the user colors\r\n    searchUserColor();\r\n    // Need to give user control of date range created in plot\r\n    setProjectPlotTimes(targetWidthPoints, 50);\r\n    // Write the list of tasks\r\n    drawTasks(fout);\r\n    // Write the axes\r\n    labelAxes(fout);\r\n    if (debug)\r\n        System.out.println(\"beginToSave end\");\r\n\r\n}"},
 {"id":3481, "name":"drawTasks(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.drawTasks(java.io.OutputStreamWriter)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * Draw the list of tasks.\r\n */\r\npublic void drawTasks(OutputStreamWriter fout) throws IOException {\r\n    try {\r\n        if (debug)\r\n            System.out.println(\"drawTasks begin\");\r\n\r\n        // loop on tasks\r\n        int i = 0;\r\n        for (Iterator it = lot.iterator(); it.hasNext();) {\r\n            DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (it.next()));\r\n            // get the task\r\n            if (!(node.isRoot())) {\r\n                GanttTask task = ((GanttTask) (node.getUserObject()));\r\n                GanttXFIGSaver.TextObject txtObj = ((GanttXFIGSaver.TextObject) (atl.get(i)));\r\n                GanttXFIGSaver.BoxObject boxObject = ((GanttXFIGSaver.BoxObject) (abl.get(i)));\r\n                // print the text of the task\r\n                drawtext(fout, txtObj);\r\n                // print the box of the task\r\n                drawbox(fout, boxObject);\r\n                // print the percent complete\r\n                // print relations\r\n                // update index\r\n                i++;\r\n            }\r\n        }\r\n        if (debug)\r\n            System.out.println(\"drawTasks end\");\r\n\r\n    } catch (Exception e) {\r\n        System.out.println(e);\r\n    }\r\n}"},
 {"id":3482, "name":"drawbox(java.io.OutputStreamWriter,net.sourceforge.ganttproject.io.GanttXFIGSaver$BoxObject)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.drawbox(java.io.OutputStreamWriter,net.sourceforge.ganttproject.io.GanttXFIGSaver$BoxObject)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * draw the box of the task.\r\n */\r\npublic void drawbox(OutputStreamWriter fout, GanttXFIGSaver.BoxObject boxObject) throws IOException {\r\n    if (debug)\r\n        System.out.println(\"drawbox begin\");\r\n\r\n    // draw an xfig box object;\r\n    fout.write(\"2 \");\r\n    fout.write(((boxObject.sub_type) + \" \"));\r\n    fout.write(((boxObject.line_style) + \" \"));\r\n    fout.write(((boxObject.thickness) + \" \"));\r\n    fout.write(((boxObject.pen_color) + \" \"));\r\n    fout.write(((boxObject.fill_color) + \" \"));\r\n    fout.write(((boxObject.depth) + \" \"));\r\n    fout.write(((boxObject.pen_style) + \" \"));\r\n    fout.write(((boxObject.area_fill) + \" \"));\r\n    fout.write(((\" \" + (boxObject.style_val)) + \"  \"));\r\n    fout.write(((boxObject.join_style) + \" \"));\r\n    fout.write(((boxObject.cap_style) + \" \"));\r\n    fout.write(((boxObject.radius) + \" \"));\r\n    fout.write(((boxObject.forward_arrow) + \" \"));\r\n    fout.write(((boxObject.backward_arrow) + \" \"));\r\n    fout.write(((boxObject.npoints) + \"\n\t\"));\r\n    int arrow_type = 1;\r\n    int arrow_style = 1;\r\n    float arrow_thickness = 1.0F;\r\n    float arrow_width = 60.0F;\r\n    float arrow_height = 60.0F;\r\n    if ((boxObject.sub_type) == 3) {\r\n        if ((boxObject.forward_arrow) != 0) {\r\n            System.out.println(\"forward\");\r\n            fout.write((((((((((\"      \" + ((int) (arrow_type))) + \" \") + ((int) (arrow_style))) + \" \") + ((int) (arrow_thickness))) + ((int) (arrow_width))) + \" \") + ((int) (arrow_height))) + \"\n\"));\r\n        }\r\n        if ((boxObject.backward_arrow) != 0) {\r\n            fout.write((((((((((\"      \" + ((int) (arrow_type))) + \" \") + ((int) (arrow_style))) + \" \") + ((int) (arrow_thickness))) + ((int) (arrow_width))) + \" \") + ((int) (arrow_height))) + \"\n\"));\r\n            System.out.println(\"back\");\r\n        }\r\n    }\r\n    for (int i = 0; i < (boxObject.points.length); i++)\r\n        fout.write((((int) (boxObject.points[i])) + \" \"));\r\n\r\n    fout.write(\"\n\");\r\n    if (debug)\r\n        System.out.println(\"drawbox end\");\r\n\r\n}"},
 {"id":3483, "name":"drawtext(java.io.OutputStreamWriter,net.sourceforge.ganttproject.io.GanttXFIGSaver$TextObject)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.drawtext(java.io.OutputStreamWriter,net.sourceforge.ganttproject.io.GanttXFIGSaver$TextObject)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * Draw text for the taskObject.\r\n */\r\npublic void drawtext(OutputStreamWriter fout, GanttXFIGSaver.TextObject txtObj) throws IOException {\r\n    if (debug)\r\n        System.out.println(\"drawtext begin\");\r\n\r\n    fout.write(\"4 \");\r\n    fout.write(((txtObj.sub_type) + \" \"));\r\n    fout.write(((txtObj.color) + \" \"));\r\n    fout.write(((txtObj.depth) + \" \"));\r\n    fout.write(((txtObj.pen_style) + \" \"));\r\n    fout.write(((txtObj.font) + \" \"));\r\n    fout.write(((txtObj.font_size) + \" \"));\r\n    fout.write(((txtObj.angle) + \" \"));\r\n    fout.write(((txtObj.font_flags) + \" \"));\r\n    fout.write(((((txtObj.height) + \" \") + (txtObj.length)) + \" \"));\r\n    fout.write(((((txtObj.x) + \" \") + (txtObj.y)) + \" \"));\r\n    fout.write(((txtObj.str) + \"\\001\n\"));\r\n    if (debug)\r\n        System.out.println(\"drawtext end\");\r\n\r\n}"},
 {"id":3484, "name":"getHexaColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.getHexaColor(java.awt.Color)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n *\r\n *\r\n * @return a color as a string like #00FF00 for green color.\r\n */\r\nprivate String getHexaColor(Color color) {\r\n    if (debug)\r\n        System.out.println(\"getHexaColor begin\");\r\n\r\n    String sColor = \"#\";// result string\r\n\r\n    if ((color.getRed()) <= 15)\r\n        sColor += \"0\";\r\n\r\n    sColor += Integer.toHexString(color.getRed());\r\n    if ((color.getGreen()) <= 15)\r\n        sColor += \"0\";\r\n\r\n    sColor += Integer.toHexString(color.getGreen());\r\n    if ((color.getBlue()) <= 15)\r\n        sColor += \"0\";\r\n\r\n    sColor += Integer.toHexString(color.getBlue());\r\n    if (debug)\r\n        System.out.println(\"getHexaColor end\");\r\n\r\n    return sColor;\r\n}"},
 {"id":3485, "name":"getProjectTextWidth()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.getProjectTextWidth()", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n *\r\n *\r\n * @return the with of the text. Determine width of text labels (task names)\r\nin this project assume fixed width, 14 letters to the inch, 1200\r\nppi each level is indented 1/4 inch (300 points @ 1200ppi)\r\n */\r\npublic float getProjectTextWidth() {\r\n    if (debug)\r\n        System.out.println(\"getProjectTextWidth begin\");\r\n\r\n    float res = 0.0F;\r\n    for (Iterator it = lot.iterator(); it.hasNext();) {\r\n        // get the name of the task\r\n        Task task = ((Task) (it.next()));\r\n        float taskTextWidth = getTaskTextWidth(task);\r\n        if (taskTextWidth > res) {\r\n            res = taskTextWidth;\r\n        }\r\n    }\r\n    if (debug)\r\n        System.out.println(\"getProjectTextWidth end\");\r\n\r\n    return res;\r\n}"},
 {"id":3486, "name":"getTaskTextWidth(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.getTaskTextWidth(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n *\r\n *\r\n * @return the textwith of this task for and its children tasks. Determine\r\nwidth of text labels (task names) in this task assume fixed\r\nwidth, 14 letters to the inch, 1200 ppi each level is indented\r\n1/4 inch (300 points @ 1200ppi)\r\n */\r\nprivate float getTaskTextWidth(Task task) {\r\n    if (debug)\r\n        System.out.println(\"getTaskTextWidth begin\");\r\n\r\n    Task t = task;\r\n    float res = (((float) (t.getName().length())) * (1.0F / 14.0F)) * 1200.0F;\r\n    Task[] children = task.getManager().getTaskHierarchy().getNestedTasks(task);\r\n    for (int i = 0; i < (children.length); i++) {\r\n        float subTaskTextWidth = 0.25F + (getTaskTextWidth(children[i]));\r\n        if (subTaskTextWidth > res)\r\n            res = subTaskTextWidth;\r\n\r\n    }\r\n    if (debug)\r\n        System.out.println(\"getTaskTextWidth end\");\r\n\r\n    return res;\r\n}"},
 {"id":3487, "name":"labelAxes(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.labelAxes(java.io.OutputStreamWriter)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * Draw the axes.\r\n */\r\npublic void labelAxes(OutputStreamWriter fout) {\r\n    // TODO write this method\r\n    if (debug)\r\n        System.out.println(\"labelAxes begin\");\r\n\r\n    if (debug)\r\n        System.out.println(\"labelAxes end\");\r\n\r\n}"},
 {"id":3488, "name":"save(java.io.OutputStream)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.save(java.io.OutputStream)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * Save the project as XFIG on a stream\r\n */\r\npublic void save(OutputStream stream) {\r\n    try {\r\n        OutputStreamWriter fout = new OutputStreamWriter(stream);\r\n        beginToSave(fout);\r\n        fout.close();// close the stream\r\n\r\n    } catch (IOException e) {\r\n        System.out.println(e);\r\n        System.out.println(\"Error in saving the xfig file\");\r\n    }\r\n}"},
 {"id":3489, "name":"searchUserColor()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.searchUserColor()", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * Search for the corresponding colors.\r\n */\r\n// TODO continue to write this method\r\npublic void searchUserColor() {\r\n    if (debug)\r\n        System.out.println(\"searchUserColor begin\");\r\n\r\n    loc.clear();// clear the list\r\n\r\n    for (Iterator it = lot.iterator(); it.hasNext();) {\r\n        DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (it.next()));\r\n        if (!(node.isRoot())) {\r\n            GanttTask task = ((GanttTask) (node.getUserObject()));\r\n            Color color = task.getColor();\r\n            String hexaColor = getHexaColor(color);\r\n        }\r\n    }\r\n    if (debug)\r\n        System.out.println(\"searchUserColor end\");\r\n\r\n}"},
 {"id":3490, "name":"setProjectPlotTimes(float,float)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.setProjectPlotTimes(float,float)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * get project time range, compute box scaling values and shifts so that the\r\n * total chart fits in targetWidthPoints units: targetWidthPoints is in\r\n * pixels, 1200 pixels per inch, or about 472 pixels/cm this also adds box\r\n * and text objects to the project tasks for plotting later\r\n */\r\npublic void setProjectPlotTimes(float targetWidthPoints, float depthval) {\r\n    if (debug)\r\n        System.out.println(\"setProjectPlotTimes begin\");\r\n\r\n    float targetwidth = targetWidthPoints - (fTtextwidth);\r\n    GanttCalendar startDate = null;\r\n    GanttCalendar endDate = null;\r\n    // Get project start, end times\r\n    for (Iterator it = lot.iterator(); it.hasNext();) {\r\n        // get the task\r\n        Task task = ((Task) (((DefaultMutableTreeNode) (it.next())).getUserObject()));\r\n        if ((startDate == null) && (endDate == null)) {\r\n            startDate = task.getStart();\r\n            endDate = task.getEnd();\r\n        } else {\r\n            // before\r\n            if ((task.getStart().compareTo(startDate)) == (-1))\r\n                startDate = task.getStart();\r\n\r\n            // after\r\n            if ((task.getEnd().compareTo(startDate)) == 1)\r\n                endDate = task.getEnd();\r\n\r\n        }\r\n    }\r\n    // shift all dates by this amount to plot\r\n    dateShift = startDate;\r\n    scale = targetwidth / (Math.max(1.0F, ((float) (endDate.diff(startDate)))));\r\n    chwidth = (scale) * ((float) (endDate.diff(startDate)));\r\n    System.out.println(((((\"Chart width =\" + (chwidth)) + \" points = \") + ((chwidth) / 1200)) + \" inches\n\"));\r\n    int index = 0;\r\n    // now add text and box objects to the tasks\r\n    for (Iterator it = lot.iterator(); it.hasNext();) {\r\n        DefaultMutableTreeNode node = ((DefaultMutableTreeNode) (it.next()));\r\n        if (!(node.isRoot())) {\r\n            // get the task\r\n            GanttTask task = ((GanttTask) (node.getUserObject()));\r\n            // get the text infos of the task\r\n            GanttXFIGSaver.TextObject textLabel = task2text(task, index, node.getLevel(), ((int) (depthval)));\r\n            if (debug)\r\n                System.out.println(\"    add TEXT\");\r\n\r\n            atl.add(textLabel);\r\n            // get the box object of the task\r\n            GanttXFIGSaver.BoxObject boxObject = task2box(task, ((int) (depthval)), index, node.isLeaf());\r\n            if (debug)\r\n                System.out.println(\"    add BOX\");\r\n\r\n            abl.add(boxObject);\r\n            index++;\r\n        }\r\n    }\r\n    if (debug)\r\n        System.out.println((\"setProjectPlotTimes end + index=\" + index));\r\n\r\n}"},
 {"id":3491, "name":"task2box(net.sourceforge.ganttproject.GanttTask,int,int,boolean)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.task2box(net.sourceforge.ganttproject.GanttTask,int,int,boolean)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * get the task box.\r\n */\r\npublic GanttXFIGSaver.BoxObject task2box(GanttTask task, int depthval, int number, boolean isLeaf) {\r\n    // boxObject: total box\r\n    // boxObjectPct: black line in center of box object\r\n    // min box width: 1.\r\n    // object to return\r\n    GanttXFIGSaver.BoxObject boxObject = new GanttXFIGSaver.BoxObject();\r\n    if (isLeaf) {\r\n        boxObject.sub_type = 2;// box\r\n\r\n        boxObject.npoints = 5;\r\n    } else {\r\n        boxObject.sub_type = 3;// polygon\r\n\r\n        boxObject.npoints = 7;\r\n    }\r\n    boxObject.depth = depthval;\r\n    if (!isLeaf)\r\n        boxObject.depth -= 2;\r\n    // ?????\r\n\r\n    // See BoxObject class for other default values\r\n    // Construct box corners\r\n    float boxLen = Math.max(1.0F, ((task.getLength()) * (scale)));\r\n    float boxLenPct = Math.max(1.0F, ((boxLen * (task.getCompletionPercentage())) / 100.0F));\r\n    float boxHeight = 1200.0F / 8.0F;\r\n    float pLo = boxHeight * 0.25F;\r\n    float pHi = boxHeight * 0.75F;\r\n    float[] pointsPct = new float[]{ 0, pLo, boxLenPct, pLo, boxLenPct, pHi, 0, pHi, 0, pLo };\r\n    if ((boxObject.sub_type) == 2) {\r\n        boxObject.points = new float[10];\r\n        boxObject.points[0] = 0;\r\n        boxObject.points[1] = 0;\r\n        boxObject.points[2] = boxLen;\r\n        boxObject.points[3] = 0;\r\n        boxObject.points[4] = boxLen;\r\n        boxObject.points[5] = boxHeight;\r\n        boxObject.points[6] = 0;\r\n        boxObject.points[7] = boxHeight;\r\n        boxObject.points[8] = 0;\r\n        boxObject.points[9] = 0;\r\n    } else {\r\n        float boxLo = boxHeight / 4;\r\n        boxObject.points = new float[14];\r\n        boxObject.points[0] = 0;\r\n        boxObject.points[1] = boxHeight;\r\n        boxObject.points[2] = 0;\r\n        boxObject.points[3] = 0;\r\n        boxObject.points[4] = boxLen;\r\n        boxObject.points[5] = 0;\r\n        boxObject.points[6] = boxLen;\r\n        boxObject.points[7] = boxHeight;// top bow\r\n\r\n        boxObject.points[8] = boxLen;\r\n        boxObject.points[9] = boxLo;\r\n        boxObject.points[10] = 0;\r\n        boxObject.points[11] = boxLo;\r\n        boxObject.points[10] = 0;\r\n        boxObject.points[13] = boxHeight;\r\n    }\r\n    int blen = boxObject.points.length;\r\n    // shift to this row\r\n    float xShift = 0;\r\n    float yShift = ((1200.0F * 0.25F) * (((float) (number)) + 4)) + (1200.0F / 16.0F);\r\n    /* boxObject.points(2:2:blen) += yShift; boxObject.points(1:2:blen) +=\n    xShift;\n     */\r\n    for (int i = 1; i < blen; i += 2)\r\n        boxObject.points[i] += yShift;\r\n\r\n    for (int i = 0; i < blen; i += 2)\r\n        boxObject.points[i] += xShift;\r\n\r\n    // pointsPct(2:2:10) += yShift;\r\n    // pointsPct(1:2:9) += xShift;\r\n    // boxObjectPct = boxObject; // percent completed\r\n    // boxObjectPct.points = pointsPct;\r\n    // boxObjectPct.npoints = 5;\r\n    // boxObjectPct.area_fill = 20;\r\n    // boxObjectPct.fill_color = 0;\r\n    // shift boxes by start date\r\n    /* boxObject.points(1:2:blen) += task.start*boxScale; */\r\n    for (int i = 0; i < blen; i += 2)\r\n        boxObject.points[i] += (task.getStart().diff(dateShift)) * (scale);\r\n\r\n    // boxObjectPct.points(1:2:9) += task.start*boxScale;\r\n    // now shift again by text width (must be calculated and set in\r\n    // task.boxindent)\r\n    /* boxObject.points(1:2:blen) += task.boxindent; */\r\n    for (int i = 0; i < blen; i += 2)\r\n        boxObject.points[i] += (fTtextwidth) + 120;\r\n\r\n    // boxObjectPct.points(1:2:9) += task.boxindent;\r\n    // boxObjectPct.depth--;\r\n    // fix angle brackets in polygon object\r\n    /* if(boxObject.sub_type == 3) { angwid = min(60,boxLen/2);\n    boxObject.points([9,11]) += [-angwid,angwid]; }\n     */\r\n    if ((boxObject.sub_type) == 3) {\r\n        float angwid = Math.min(60, (boxLen / 2));\r\n        boxObject.points[9] += -angwid;\r\n        boxObject.points[11] += angwid;\r\n    }\r\n    return boxObject;\r\n}"},
 {"id":3492, "name":"task2text(net.sourceforge.ganttproject.GanttTask,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.task2text(net.sourceforge.ganttproject.GanttTask,int,int,int)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * convert task structureto an xfig text data structure\r\n */\r\npublic GanttXFIGSaver.TextObject task2text(GanttTask task, int number, int level, int depthval) {\r\n    if (debug)\r\n        System.out.println(\"task2text begin\");\r\n\r\n    /* System.out.println(\"task : \"+task+ \" number : \"+number+ \" level :\n    \"+level+ \" depthval : \"+depthval);\n     */\r\n    GanttXFIGSaver.TextObject taskText = new GanttXFIGSaver.TextObject();\r\n    taskText.sub_type = 0;// left justified\r\n\r\n    taskText.color = 0;// black\r\n\r\n    taskText.depth = depthval;\r\n    taskText.pen_style = 0;// unused\r\n\r\n    taskText.font = 0;// Times Roman\r\n\r\n    taskText.font_size = 10;// fonts size in points\r\n\r\n    taskText.angle = 0;// text angle in radians\r\n\r\n    taskText.font_flags = 4;// not rigid, not special, postscript, not\r\n\r\n    // hidden.\r\n    taskText.height = 0.25F * 1200.0F;\r\n    taskText.length = (0.125F * ((float) (task.getName().length()))) * 1200.0F;\r\n    taskText.y = ((int) ((((1200.0F * 0.25F) * ((float) (number))) + 5.0F) - (1200.0F / 16.0F)));\r\n    taskText.x = ((int) ((1200.0F * 0.25F) * (((float) (level)) + 1.0F)));\r\n    taskText.str = task.getName();\r\n    if (debug)\r\n        System.out.println(\"task2text end\");\r\n\r\n    return taskText;\r\n}"},
 {"id":3493, "name":"xfigheader(java.io.OutputStreamWriter)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver.xfigheader(java.io.OutputStreamWriter)", "ownerclassid":"448", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "sourcecode":"/**\r\n * Write the header of the XFIG FILE Based on the xfig file specification.\r\n */\r\npublic void xfigheader(OutputStreamWriter fout) throws IOException {\r\n    if (debug)\r\n        System.out.println(\"xfigheader begin\");\r\n\r\n    fout.write(\"#FIG 3.2\n\");// version\r\n\r\n    fout.write(\"Landscape\n\");// orientation\r\n\r\n    fout.write(\"Center\n\");// justification\r\n\r\n    fout.write(\"Inches\n\");// units\r\n\r\n    fout.write(\"Letter\n\");// papersize\r\n\r\n    fout.write(\"100.0\n\");// magnification\r\n\r\n    fout.write(\"Single\n\");// multiplePage\r\n\r\n    fout.write(\"-2\n\");// transparentColor\r\n\r\n    fout.write(\"1200 2\n\");// resolutionPpi origin\r\n\r\n    if (debug)\r\n        System.out.println(\"xfigheader end\");\r\n\r\n}"},
 {"id":3494, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver$BoxObject.-init-()", "ownerclassid":"446", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver$BoxObject", "sourcecode":"BoxObject() {\r\n}"},
 {"id":3495, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXFIGSaver$TextObject.-init-()", "ownerclassid":"447", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXFIGSaver$TextObject", "sourcecode":"TextObject() {\r\n}"},
 {"id":3496, "name":"-init-(net.sourceforge.ganttproject.PrjInfos,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.-init-(net.sourceforge.ganttproject.PrjInfos,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param uiFacade\r\n * \t\tTODO\r\n */\r\npublic GanttXMLOpen(PrjInfos info, UIConfiguration uiConfig, TaskManager taskManager, UIFacade uiFacade) {\r\n    this(taskManager);\r\n    // this.treePanel = tree;\r\n    myProjectInfo = info;\r\n    myUIConfig = uiConfig;\r\n    // this.peop = resources;\r\n    // this.area = gra;\r\n    // this.bImport = bImport;\r\n    this.viewIndex = 0;\r\n    this.ganttDividerLocation = 300;// todo does this arbitrary value is\r\n\r\n    // right ?\r\n    this.resourceDividerLocation = 300;\r\n    // if(bImport)\r\n    // maxID = ((TaskManagerImpl)taskManager).getMaxID();\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":3497, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.-init-(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public GanttXMLOpen(TaskManager taskManager) {\r\n    myContext = new ParsingContext();\r\n    myTaskManager = taskManager;\r\n}"},
 {"id":3498, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.-init-()", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"DefaultTagHandler() {\r\n}"},
 {"id":3499, "name":"addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public void addParsingListener(ParsingListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":3500, "name":"addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public void addTagHandler(TagHandler handler) {\r\n    myTagHandlers.add(handler);\r\n}"},
 {"id":3501, "name":"getContext()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.getContext()", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public ParsingContext getContext() {\r\n    return myContext;\r\n}"},
 {"id":3502, "name":"getCorrectString(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.getCorrectString(java.lang.String)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"private String getCorrectString(String s) {\r\n    // return s.replaceAll(\"\n\" + indent, \"\n\");\r\n    s = s.replaceAll((\"\n\" + (indent)), \"\n\");\r\n    s = s.replaceAll(marge, \"\");\r\n    while (s.startsWith(\"\n\")) {\r\n        s = s.substring(1, s.length());\r\n    } \r\n    while (s.endsWith(\"\n\")) {\r\n        s = s.substring(0, ((s.length()) - 1));\r\n    } \r\n    s = s.replaceAll(\"&#38;\", \"&\");\r\n    s = s.replaceAll(\"&#60;\", \"<\");\r\n    s = s.replaceAll(\"&#62;\", \">\");\r\n    s = s.replaceAll(\"&#47;\", \"/\");\r\n    s = s.replaceAll(\"&#34;\", \"\"\");\r\n    return s;\r\n}"},
 {"id":3503, "name":"getDefaultTagHandler()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.getDefaultTagHandler()", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public TagHandler getDefaultTagHandler() {\r\n    return new GanttXMLOpen.DefaultTagHandler();\r\n}"},
 {"id":3504, "name":"isMerging(boolean)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.isMerging(boolean)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public void isMerging(boolean b) {\r\n    bMerge = b;\r\n}"},
 {"id":3505, "name":"load(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.load(java.io.File)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public boolean load(File file) {\r\n    // Use an instance of ourselves as the SAX event handler\r\n    DefaultHandler handler = new GanttXMLOpen.GanttXMLParser();\r\n    // Use the default (non-validating) parser\r\n    SAXParserFactory factory = SAXParserFactory.newInstance();\r\n    try {\r\n        // Parse the input\r\n        SAXParser saxParser = factory.newSAXParser();\r\n        saxParser.parse(file, handler);\r\n    } catch (Exception e) {\r\n        myUIFacade.showErrorDialog(e);\r\n        /* GanttDialogInfo gdi = new GanttDialogInfo((JFrame) myUIFacade,\n        GanttDialogInfo.ERROR, GanttDialogInfo.YES_OPTION, language\n        .getText(\"msg2\")\n        + file.getAbsolutePath(), language.getText(\"error\"));\n        gdi.show();\n         */\r\n        return false;\r\n    }\r\n    // if(treePanel!=null) {\r\n    // treePanel.forwardScheduling();//refreshAllId(treePanel.getRoot());\r\n    // }\r\n    return true;\r\n}"},
 {"id":3506, "name":"load(java.io.InputStream)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.load(java.io.InputStream)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public boolean load(InputStream inStream) throws IOException {\r\n    // Use an instance of ourselves as the SAX event handler\r\n    myTaskManager.getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().setEnabled(false);\r\n    myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().setEnabled(false);\r\n    DefaultHandler handler = new GanttXMLOpen.GanttXMLParser();\r\n    // Use the default (non-validating) parser\r\n    SAXParserFactory factory = SAXParserFactory.newInstance();\r\n    try {\r\n        // Parse the input\r\n        SAXParser saxParser;\r\n        saxParser = factory.newSAXParser();\r\n        saxParser.parse(inStream, handler);\r\n    } catch (ParserConfigurationException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        throw new IOException(e.getMessage());\r\n    } catch (SAXException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        throw new IOException(e.getMessage());\r\n    }\r\n    myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().setEnabled(true);\r\n    myTaskManager.getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().setEnabled(true);\r\n    // treePanel.refreshAllId(treePanel.getRoot());\r\n    // treePanel.forwardScheduling();\r\n    if (!(bMerge)) {\r\n        myUIFacade.setViewIndex(viewIndex);\r\n        myUIFacade.setGanttDividerLocation(ganttDividerLocation);\r\n        if ((resourceDividerLocation) != 0)\r\n            myUIFacade.setResourceDividerLocation(resourceDividerLocation);\r\n\r\n    }\r\n    return true;\r\n}"},
 {"id":3507, "name":"load(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen.load(java.lang.String)", "ownerclassid":"451", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "sourcecode":"public boolean load(String filename) {\r\n    boolean temp = load(new File(filename));\r\n    // constructRelationship();\r\n    return temp;\r\n}"},
 {"id":3508, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$DefaultTagHandler.-init-()", "ownerclassid":"449", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$DefaultTagHandler", "sourcecode":"DefaultTagHandler() {\r\n}"},
 {"id":3509, "name":"determineColor(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$DefaultTagHandler.determineColor(java.lang.String)", "ownerclassid":"449", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$DefaultTagHandler", "sourcecode":"private final Color determineColor(String hexString) {\r\n    if (!(Pattern.matches(\"#[0-9abcdefABCDEF]{6}+\", hexString))) {\r\n        return GanttGraphicArea.taskDefaultColor;\r\n    }\r\n    int r;\r\n    int g;\r\n    int b;\r\n    r = Integer.valueOf(hexString.substring(1, 3), 16).intValue();\r\n    g = Integer.valueOf(hexString.substring(3, 5), 16).intValue();\r\n    b = Integer.valueOf(hexString.substring(5, 7), 16).intValue();\r\n    return new Color(r, g, b);\r\n}"},
 {"id":3510, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$DefaultTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"449", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$DefaultTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n    indent = indent.substring(0, ((indent.length()) - 4));\r\n    if (\"description\".equals(qName)) {\r\n        myProjectInfo._sDescription = getCorrectString(myCharacterBuffer.toString());\r\n    } else\r\n        if (\"notes\".equals(qName)) {\r\n            Task currentTask = myTaskManager.getTask(getContext().getTaskID());\r\n            currentTask.setNotes(getCorrectString(myCharacterBuffer.toString()));\r\n        }\r\n\r\n}"},
 {"id":3511, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$DefaultTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"449", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$DefaultTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    indent += \"    \";\r\n    String eName = sName;// element name\r\n\r\n    if (\"\".equals(eName)) {\r\n        eName = qName;// not namespaceAware\r\n\r\n    }\r\n    if (eName.equals(\"description\")) {\r\n        myCharacterBuffer = new StringBuffer();\r\n        typeChar = 0;\r\n    }\r\n    if (eName.equals(\"notes\")) {\r\n        myCharacterBuffer = new StringBuffer();\r\n        typeChar = 1;\r\n        // barmeier: we know that this tag has only attibutes no nested\r\n        // tags\r\n        // we can do we need here.\r\n    }\r\n    /* if (eName.equals(\"allocation\")) { String aName; int taskId = 0;\n    int resourceId = 0; int load = 0; for (int i = 0; i <\n    attrs.getLength(); i++) { aName = attrs.getQName(i); if\n    (aName.equals(\"task-id\")) { taskId = new\n    Integer(attrs.getValue(i)).intValue(); } else if\n    (aName.equals(\"resource-id\")) { resourceId = new\n    Integer(attrs.getValue(i)).intValue(); } else if\n    (aName.equals(\"load\")) { load = new\n    Integer(attrs.getValue(i)).intValue(); } } // if no load is\n    specified I assume 100% load // this should only be the case if\n    old files // were loaded. if (load == 0) { load = 100; }\n    GanttTask the_task = treePanel.getTask(taskId); HumanResource\n    user = peop.getUserByNumber(resourceId - 1); //\n    user.setLoad(load+user.getMaximumUnitsPerDay());\n    the_task.taskUser(peop.getUserByNumber(resourceId - 1), load); }\n     */\r\n    // int task_id = 0;\r\n    // GanttTask task = new GanttTask(new String(), new GanttCalendar(),\r\n    // 1);\r\n    // GanttTask task = myTaskManager.createTask();\r\n    // task.setLength(1);\r\n    if (attrs != null) {\r\n        for (int i = 0; i < (attrs.getLength()); i++) {\r\n            String aName = attrs.getLocalName(i);// Attr name\r\n\r\n            if (\"\".equals(aName)) {\r\n                aName = attrs.getQName(i);\r\n                // The project part\r\n            }\r\n            if ((eName.equals(\"project\")) && ((myTagStack.size()) == 1)) {\r\n                if (aName.equals(\"name\")) {\r\n                    myProjectInfo._sProjectName = attrs.getValue(i);\r\n                } else\r\n                    if (aName.equals(\"company\")) {\r\n                        myProjectInfo._sOrganization = attrs.getValue(i);\r\n                    } else\r\n                        if (aName.equals(\"webLink\")) {\r\n                            myProjectInfo._sWebLink = attrs.getValue(i);\r\n                        } else// TODO: 1.12 repair scrolling to the saved date\r\n\r\n                            if (aName.equals(\"view-date\")) {\r\n                                myUIFacade.getScrollingManager().scrollLeft(GanttCalendar.parseXMLDate(attrs.getValue(i)).getTime());\r\n                            } else\r\n                                if (aName.equals(\"view-index\")) {\r\n                                    viewIndex = new Integer(attrs.getValue(i)).hashCode();\r\n                                } else\r\n                                    if (aName.equals(\"gantt-divider-location\")) {\r\n                                        ganttDividerLocation = new Integer(attrs.getValue(i)).intValue();\r\n                                    } else\r\n                                        if (aName.equals(\"resource-divider-location\")) {\r\n                                            resourceDividerLocation = new Integer(attrs.getValue(i)).intValue();\r\n                                        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n            } else\r\n                if (eName.equals(\"tasks\")) {\r\n                    if (aName.equals(\"color\")) {\r\n                        myUIConfig.setProjectLevelTaskColor(determineColor(attrs.getValue(i)));\r\n                    }\r\n                }\r\n\r\n        }\r\n    }\r\n}"},
 {"id":3512, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser.-init-()", "ownerclassid":"450", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser", "sourcecode":"GanttXMLParser() {\r\n}"},
 {"id":3513, "name":"characters(char[],int,int)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser.characters(char[],int,int)", "ownerclassid":"450", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser", "sourcecode":"public void characters(char[] buf, int offset, int len) throws SAXException {\r\n    // len=0;\r\n    // for(int i=0;i+offset<buf.length && buf[i+offset]!=<;i++,len++);\r\n    String s = new String(buf, offset, len);\r\n    if ((typeChar) >= 0) {\r\n        if (GanttXMLOpen.IGNORABLE_WHITESPACE.matcher(s).matches()) {\r\n            return;\r\n        }\r\n        s = s.replaceAll(\"^\\n\\x20*\", \"\n\");\r\n        myCharacterBuffer.append(s);\r\n    }\r\n}"},
 {"id":3514, "name":"endDocument()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser.endDocument()", "ownerclassid":"450", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser", "sourcecode":"public void endDocument() throws SAXException {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        ParsingListener l = ((ParsingListener) (myListeners.get(i)));\r\n        l.parsingFinished();\r\n    }\r\n}"},
 {"id":3515, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"450", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) throws SAXException {\r\n    for (Iterator handlers = myTagHandlers.iterator(); handlers.hasNext();) {\r\n        TagHandler next = ((TagHandler) (handlers.next()));\r\n        next.endElement(namespaceURI, sName, qName);\r\n    }\r\n    myTagStack.pop();\r\n}"},
 {"id":3516, "name":"startDocument()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser.startDocument()", "ownerclassid":"450", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser", "sourcecode":"// ===========================================================\r\n// SAX DocumentHandler methods\r\n// ===========================================================\r\npublic void startDocument() throws SAXException {\r\n    super.startDocument();\r\n    myTagStack.clear();\r\n}"},
 {"id":3517, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"450", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLOpen$GanttXMLParser", "sourcecode":"public void startElement(String namespaceURI, String sName, // simple\r\n// name\r\nString qName, // qualified name\r\nAttributes attrs) throws SAXException {\r\n    myTagStack.push(qName);\r\n    for (Iterator handlers = myTagHandlers.iterator(); handlers.hasNext();) {\r\n        TagHandler next = ((TagHandler) (handlers.next()));\r\n        try {\r\n            next.startElement(namespaceURI, sName, qName, attrs);\r\n        } catch (FileFormatException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n}"},
 {"id":3518, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttResourcePanel,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttResourcePanel,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"/**\r\n * The constructor\r\n */\r\npublic GanttXMLSaver(IGanttProject project, GanttTree2 tree, GanttResourcePanel peop, GanttGraphicArea area, UIFacade uiFacade) {\r\n    this.tree = tree;\r\n    this.area = area;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":3519, "name":"getProject()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.getProject()", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"IGanttProject getProject() {\r\n    return myProject;\r\n}"},
 {"id":3520, "name":"getUIFacade()", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.getUIFacade()", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"UIFacade getUIFacade() {\r\n    return myUIFacade;\r\n}"},
 {"id":3521, "name":"save(java.io.OutputStream)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.save(java.io.OutputStream)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"public void save(OutputStream stream) throws IOException {\r\n    try {\r\n        AttributesImpl attrs = new AttributesImpl();\r\n        StreamResult result = new StreamResult(stream);\r\n        SAXTransformerFactory factory = ((SAXTransformerFactory) (SAXTransformerFactory.newInstance()));\r\n        TransformerHandler handler = factory.newTransformerHandler();\r\n        Transformer serializer = handler.getTransformer();\r\n        serializer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\r\n        serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\r\n        serializer.setOutputProperty(OutputKeys.METHOD, \"xml\");\r\n        serializer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\r\n        handler.setResult(result);\r\n        handler.startDocument();\r\n        addAttribute(\"name\", getProject().getProjectName(), attrs);\r\n        addAttribute(\"company\", getProject().getOrganization(), attrs);\r\n        addAttribute(\"webLink\", getProject().getWebLink(), attrs);\r\n        addAttribute(\"view-date\", new GanttCalendar(area.getViewState().getStartDate()).toXMLString(), attrs);\r\n        addAttribute(\"view-index\", (\"\" + (myUIFacade.getViewIndex())), attrs);\r\n        // TODO for GP 2.0: move view configurations into <view> tag (see ViewSaver)\r\n        addAttribute(\"gantt-divider-location\", (\"\" + (myUIFacade.getGanttDividerLocation())), attrs);\r\n        addAttribute(\"resource-divider-location\", (\"\" + (myUIFacade.getResourceDividerLocation())), attrs);\r\n        addAttribute(\"version\", GanttXMLSaver.VERSION, attrs);\r\n        startElement(\"project\", attrs, handler);\r\n        // \r\n        cdataElement(\"description\", getProject().getDescription(), attrs, handler);\r\n        saveViews(handler);\r\n        emptyComment(handler);\r\n        saveCalendar(handler);\r\n        saveTasks(handler);\r\n        saveResources(handler);\r\n        saveAssignments(handler);\r\n        saveVacations(handler);\r\n        saveGanttChartView(handler);\r\n        saveHistory(handler);\r\n        saveRoles(handler);\r\n        endElement(\"project\", handler);\r\n        handler.endDocument();\r\n        stream.close();\r\n    } catch (Throwable e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        IOException propagatedException = new IOException(\"Failed to save the project file\");\r\n        propagatedException.initCause(e);\r\n        throw propagatedException;\r\n    }\r\n}"},
 {"id":3522, "name":"saveAssignments(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveAssignments(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveAssignments(TransformerHandler handler) throws SAXException {\r\n    new AssignmentSaver().save(getProject(), handler);\r\n}"},
 {"id":3523, "name":"saveCalendar(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveCalendar(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveCalendar(TransformerHandler handler) throws SAXException {\r\n    new CalendarSaver().save(getProject(), handler);\r\n}"},
 {"id":3524, "name":"saveGanttChartView(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveGanttChartView(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveGanttChartView(TransformerHandler handler) throws SAXException {\r\n    new GanttChartViewSaver().save(tree.getTreeTable(), handler);\r\n}"},
 {"id":3525, "name":"saveHistory(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveHistory(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveHistory(TransformerHandler handler) throws IOException, ParserConfigurationException, SAXException {\r\n    List history = ((GanttProject) (myProject)).getPreviouStates();\r\n    new HistorySaver().save(history, handler);\r\n}"},
 {"id":3526, "name":"saveResources(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveResources(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveResources(TransformerHandler handler) throws SAXException {\r\n    new ResourceSaver().save(getProject(), handler);\r\n}"},
 {"id":3527, "name":"saveRoles(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveRoles(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveRoles(TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    RoleManager roleManager = getProject().getRoleManager();\r\n    RoleSet[] roleSets = roleManager.getRoleSets();\r\n    for (int i = 0; i < (roleSets.length); i++) {\r\n        RoleSet next = roleSets[i];\r\n        if (next.isEnabled()) {\r\n            addAttribute(\"roleset-name\", next.getName(), attrs);\r\n            emptyElement(\"roles\", attrs, handler);\r\n        }\r\n    }\r\n    // \r\n    RoleSet projectRoleSet = roleManager.getProjectRoleSet();\r\n    if (!(projectRoleSet.isEmpty())) {\r\n        startElement(\"roles\", attrs, handler);\r\n        Role[] projectRoles = projectRoleSet.getRoles();\r\n        for (int i = 0; i < (projectRoles.length); i++) {\r\n            Role next = projectRoles[i];\r\n            addAttribute(\"id\", next.getPersistentID(), attrs);\r\n            addAttribute(\"name\", next.getName(), attrs);\r\n            emptyElement(\"role\", attrs, handler);\r\n        }\r\n        endElement(\"roles\", handler);\r\n    }\r\n}"},
 {"id":3528, "name":"saveTasks(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveTasks(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveTasks(TransformerHandler handler) throws IOException, SAXException {\r\n    new TaskSaver().save(getProject(), handler, area.getTaskColor());\r\n}"},
 {"id":3529, "name":"saveVacations(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveVacations(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveVacations(TransformerHandler handler) throws SAXException {\r\n    new VacationSaver().save(getProject(), handler);\r\n}"},
 {"id":3530, "name":"saveViews(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.GanttXMLSaver.saveViews(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"452", "ownerclassname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "sourcecode":"private void saveViews(TransformerHandler handler) throws SAXException {\r\n    new ViewSaver().save(getUIFacade(), handler);\r\n}"},
 {"id":3531, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.HistorySaver.-init-()", "ownerclassid":"453", "ownerclassname":"net.sourceforge.ganttproject.io.HistorySaver", "sourcecode":"HistorySaver() {\r\n}"},
 {"id":3532, "name":"save(java.util.List,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.HistorySaver.save(java.util.List,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"453", "ownerclassname":"net.sourceforge.ganttproject.io.HistorySaver", "sourcecode":"void save(List history, /* <GanttPreviousState */\r\nTransformerHandler handler) throws IOException, ParserConfigurationException, SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"previous\", handler);\r\n    for (int i = 0; i < (history.size()); i++) {\r\n        final GanttPreviousState nextState = ((GanttPreviousState) (history.get(i)));\r\n        /* <GanttPreviousStateTask> */\r\n        final List stateTasks = nextState.load();\r\n        addAttribute(\"name\", nextState.getName(), attrs);\r\n        startElement(\"previous-tasks\", attrs, handler);\r\n        // ArrayList list =\r\n        // ((GanttPreviousState)previous.get(i)).getTasks();\r\n        for (int j = 0; j < (stateTasks.size()); j++) {\r\n            GanttPreviousStateTask task = ((GanttPreviousStateTask) (stateTasks.get(j)));\r\n            addAttribute(\"id\", String.valueOf(task.getId()), attrs);\r\n            addAttribute(\"start\", task.getStart().toXMLString(), attrs);\r\n            addAttribute(\"duration\", String.valueOf(task.getDuration()), attrs);\r\n            addAttribute(\"meeting\", String.valueOf(task.isMilestone()), attrs);\r\n            addAttribute(\"super\", String.valueOf(task.hasNested()), attrs);\r\n            emptyElement(\"previous-task\", attrs, handler);\r\n        }\r\n        endElement(\"previous-tasks\", handler);\r\n    }\r\n    endElement(\"previous\", handler);\r\n}"},
 {"id":3533, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.ResourceSaver.-init-()", "ownerclassid":"454", "ownerclassname":"net.sourceforge.ganttproject.io.ResourceSaver", "sourcecode":"ResourceSaver() {\r\n}"},
 {"id":3534, "name":"save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.ResourceSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"454", "ownerclassname":"net.sourceforge.ganttproject.io.ResourceSaver", "sourcecode":"void save(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    final AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"resources\", handler);\r\n    saveCustomColumnDefinitions(project, handler);\r\n    ProjectResource[] resources = project.getHumanResourceManager().getResourcesArray();\r\n    for (int i = 0; i < (resources.length); i++) {\r\n        HumanResource p = ((HumanResource) (resources[i]));\r\n        addAttribute(\"id\", String.valueOf(p.getId()), attrs);\r\n        addAttribute(\"name\", p.getName(), attrs);\r\n        addAttribute(\"function\", p.getRole().getPersistentID(), attrs);\r\n        addAttribute(\"contacts\", p.getMail(), attrs);\r\n        addAttribute(\"phone\", p.getPhone(), attrs);\r\n        startElement(\"resource\", attrs, handler);\r\n        {\r\n            saveCustomProperties(project, p, handler);\r\n        }\r\n        endElement(\"resource\", handler);\r\n    }\r\n    endElement(\"resources\", handler);\r\n}"},
 {"id":3535, "name":"saveCustomColumnDefinitions(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.ResourceSaver.saveCustomColumnDefinitions(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"454", "ownerclassname":"net.sourceforge.ganttproject.io.ResourceSaver", "sourcecode":"private void saveCustomColumnDefinitions(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    CustomPropertyManager customPropsManager = project.getHumanResourceManager().getCustomPropertyManager();\r\n    /* <CustomPropertyDefinition> */\r\n    List definitions = customPropsManager.getDefinitions();\r\n    // HumanResourceManager hrManager = (HumanResourceManager) project.getHumanResourceManager();\r\n    // Map customFields = hrManager.getCustomFields();\r\n    // if (customFields.size()==0) {\r\n    // return;\r\n    // }\r\n    final AttributesImpl attrs = new AttributesImpl();\r\n    // startElement(\"custom-properties-definition\", handler);\r\n    for (int i = 0; i < (definitions.size()); i++) {\r\n        // ResourceColumn nextField = (ResourceColumn) fields.next();\r\n        CustomPropertyDefinition nextDefinition = ((CustomPropertyDefinition) (definitions.get(i)));\r\n        addAttribute(\"id\", nextDefinition.getID(), attrs);\r\n        addAttribute(\"name\", nextDefinition.getName(), attrs);\r\n        addAttribute(\"type\", nextDefinition.getTypeAsString(), attrs);\r\n        addAttribute(\"default-value\", nextDefinition.getDefaultValueAsString(), attrs);\r\n        emptyElement(\"custom-property-definition\", attrs, handler);\r\n    }\r\n    // endElement(\"custom-properties-definition\", handler);\r\n}"},
 {"id":3536, "name":"saveCustomProperties(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.HumanResource,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.ResourceSaver.saveCustomProperties(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.HumanResource,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"454", "ownerclassname":"net.sourceforge.ganttproject.io.ResourceSaver", "sourcecode":"private void saveCustomProperties(IGanttProject project, HumanResource resource, TransformerHandler handler) throws SAXException {\r\n    // CustomPropertyManager customPropsManager = project.getHumanResourceManager().getCustomPropertyManager();\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    List properties = resource.getCustomProperties();\r\n    for (int i = 0; i < (properties.size()); i++) {\r\n        CustomProperty nextProperty = ((CustomProperty) (properties.get(i)));\r\n        CustomPropertyDefinition nextDefinition = nextProperty.getDefinition();\r\n        if (((nextProperty.getValue()) != null) && (!(nextProperty.getValue().equals(nextDefinition.getDefaultValue())))) {\r\n            addAttribute(\"definition-id\", nextDefinition.getID(), attrs);\r\n            addAttribute(\"value\", nextProperty.getValueAsString(), attrs);\r\n            emptyElement(\"custom-property\", attrs, handler);\r\n        }\r\n    }\r\n}"},
 {"id":3537, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.-init-()", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"SaverBase() {\r\n}"},
 {"id":3538, "name":"addAttribute(java.lang.String,int,org.xml.sax.helpers.AttributesImpl)", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.addAttribute(java.lang.String,int,org.xml.sax.helpers.AttributesImpl)", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"protected void addAttribute(String name, int value, AttributesImpl attrs) {\r\n    addAttribute(name, String.valueOf(value), attrs);\r\n}"},
 {"id":3539, "name":"addAttribute(java.lang.String,java.lang.String,org.xml.sax.helpers.AttributesImpl)", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.addAttribute(java.lang.String,java.lang.String,org.xml.sax.helpers.AttributesImpl)", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"protected void addAttribute(String name, String value, AttributesImpl attrs) {\r\n    if (value != null) {\r\n        attrs.addAttribute(\"\", name, name, \"CDATA\", value);\r\n    }\r\n}"},
 {"id":3540, "name":"cdataElement(java.lang.String,java.lang.String,org.xml.sax.helpers.AttributesImpl,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.cdataElement(java.lang.String,java.lang.String,org.xml.sax.helpers.AttributesImpl,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"protected void cdataElement(String name, String cdata, AttributesImpl attrs, TransformerHandler handler) throws SAXException {\r\n    startElement(name, handler);\r\n    handler.startCDATA();\r\n    handler.characters(cdata.toCharArray(), 0, cdata.length());\r\n    handler.endCDATA();\r\n    endElement(name, handler);\r\n}"},
 {"id":3541, "name":"emptyComment(javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.emptyComment(javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"protected void emptyComment(TransformerHandler handler) throws SAXException {\r\n    handler.comment(new char[]{   }, 0, 1);\r\n}"},
 {"id":3542, "name":"emptyElement(java.lang.String,org.xml.sax.helpers.AttributesImpl,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.emptyElement(java.lang.String,org.xml.sax.helpers.AttributesImpl,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"protected void emptyElement(String name, AttributesImpl attrs, TransformerHandler handler) throws SAXException {\r\n    startElement(name, attrs, handler);\r\n    endElement(name, handler);\r\n    attrs.clear();\r\n}"},
 {"id":3543, "name":"endElement(java.lang.String,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.endElement(java.lang.String,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"protected void endElement(String name, TransformerHandler handler) throws SAXException {\r\n    handler.endElement(\"\", name, name);\r\n}"},
 {"id":3544, "name":"startElement(java.lang.String,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.startElement(java.lang.String,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"protected void startElement(String name, TransformerHandler handler) throws SAXException {\r\n    startElement(name, SaverBase.ourEmptyAttributes, handler);\r\n}"},
 {"id":3545, "name":"startElement(java.lang.String,org.xml.sax.helpers.AttributesImpl,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.SaverBase.startElement(java.lang.String,org.xml.sax.helpers.AttributesImpl,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"455", "ownerclassname":"net.sourceforge.ganttproject.io.SaverBase", "sourcecode":"protected void startElement(String name, AttributesImpl attrs, TransformerHandler handler) throws SAXException {\r\n    handler.startElement(\"\", name, name, attrs);\r\n    attrs.clear();\r\n}"},
 {"id":3546, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.TaskSaver.-init-()", "ownerclassid":"456", "ownerclassname":"net.sourceforge.ganttproject.io.TaskSaver", "sourcecode":"TaskSaver() {\r\n}"},
 {"id":3547, "name":"encodeFieldType(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.io.TaskSaver.encodeFieldType(java.lang.Class)", "ownerclassid":"456", "ownerclassname":"net.sourceforge.ganttproject.io.TaskSaver", "sourcecode":"static String encodeFieldType(Class fieldType) {\r\n    return CustomPropertyManager.PropertyTypeEncoder.encodeFieldType(fieldType);\r\n}"},
 {"id":3548, "name":"save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler,java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.io.TaskSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler,java.awt.Color)", "ownerclassid":"456", "ownerclassname":"net.sourceforge.ganttproject.io.TaskSaver", "sourcecode":"void save(IGanttProject project, TransformerHandler handler, Color defaultColor) throws IOException, SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    if (defaultColor != null) {\r\n        addAttribute(\"color\", ColorConvertion.getColor(defaultColor), attrs);\r\n    }\r\n    startElement(\"tasks\", attrs, handler);\r\n    startElement(\"taskproperties\", handler);\r\n    writeTaskProperties(handler, project.getCustomColumnsStorage());\r\n    endElement(\"taskproperties\", handler);\r\n    Task rootTask = project.getTaskManager().getTaskHierarchy().getRootTask();\r\n    Task[] tasks = project.getTaskManager().getTaskHierarchy().getNestedTasks(rootTask);\r\n    for (int i = 0; i < (tasks.length); i++) {\r\n        writeTask(handler, ((GanttTask) (tasks[i])), project.getCustomColumnsStorage());\r\n    }\r\n    endElement(\"tasks\", handler);\r\n}"},
 {"id":3549, "name":"writeTask(javax.xml.transform.sax.TransformerHandler,net.sourceforge.ganttproject.GanttTask,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.io.TaskSaver.writeTask(javax.xml.transform.sax.TransformerHandler,net.sourceforge.ganttproject.GanttTask,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"456", "ownerclassname":"net.sourceforge.ganttproject.io.TaskSaver", "sourcecode":"private void writeTask(TransformerHandler handler, GanttTask task, CustomColumnsStorage customColumns) throws IOException, SAXException {\r\n    if ((task.getTaskID()) == (-1)) {\r\n        throw new IllegalArgumentException((\"Is it a fake root task? Task=\" + task));\r\n    }\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    addAttribute(\"id\", String.valueOf(task.getTaskID()), attrs);\r\n    addAttribute(\"name\", task.getName(), attrs);\r\n    if (task.colorDefined()) {\r\n        addAttribute(\"color\", ColorConvertion.getColor(task.getColor()), attrs);\r\n    }\r\n    if (task.shapeDefined()) {\r\n        addAttribute(\"shape\", task.getShape().getArray(), attrs);\r\n    }\r\n    addAttribute(\"meeting\", Boolean.valueOf(task.isMilestone()).toString(), attrs);\r\n    if (task.isProjectTask()) {\r\n        addAttribute(\"project\", Boolean.TRUE.toString(), attrs);\r\n    }\r\n    addAttribute(\"start\", task.getStart().toXMLString(), attrs);\r\n    addAttribute(\"duration\", String.valueOf(task.getLength()), attrs);\r\n    addAttribute(\"complete\", String.valueOf(task.getCompletionPercentage()), attrs);\r\n    if ((task.getThird()) != null) {\r\n        addAttribute(\"thirdDate\", task.getThird().toXMLString(), attrs);\r\n        addAttribute(\"thirdDate-constraint\", String.valueOf(task.getThirdDateConstraint()), attrs);\r\n    }\r\n    addAttribute(\"priority\", String.valueOf(task.getPriority()), attrs);\r\n    final String sWebLink = task.getWebLink();\r\n    if (((sWebLink != null) && (!(sWebLink.equals(\"\")))) && (!(sWebLink.equals(\"http://\")))) {\r\n        addAttribute(\"webLink\", URLEncoder.encode(sWebLink, \"ISO-8859-1\"), attrs);\r\n    }\r\n    addAttribute(\"expand\", String.valueOf(task.getExpand()), attrs);\r\n    startElement(\"task\", attrs, handler);\r\n    if (((task.getNotes()) != null) && ((task.getNotes().length()) > 0)) {\r\n        cdataElement(\"notes\", task.getNotes(), attrs, handler);\r\n        // fout.write(space2 + \"<notes>\");\r\n        // fout.write(\"\n\"\r\n        // + space2\r\n        // + s\r\n        // + correct(replaceAll(task.getNotes(), \"\n\", \"\n\"\r\n        // + space2 + s)));\r\n        // fout.write(\"\n\" + space2 + \"</notes>\n\");\r\n    }\r\n    // use successors to write depends information\r\n    final TaskDependency[] depsAsDependee = task.getDependenciesAsDependee().toArray();\r\n    for (int i = 0; i < (depsAsDependee.length); i++) {\r\n        TaskDependency next = depsAsDependee[i];\r\n        addAttribute(\"id\", String.valueOf(next.getDependant().getTaskID()), attrs);\r\n        addAttribute(\"type\", String.valueOf(next.getConstraint().getID()), attrs);\r\n        addAttribute(\"difference\", String.valueOf(next.getDifference()), attrs);\r\n        addAttribute(\"hardness\", next.getHardness().getIdentifier(), attrs);\r\n        emptyElement(\"depend\", attrs, handler);\r\n    }\r\n    CustomColumnsValues ccv = task.getCustomValues();\r\n    for (/* <CustomColumn> */\r\n    Iterator it = customColumns.getCustomColums().iterator(); it.hasNext();) {\r\n        CustomColumn nextColumn = ((CustomColumn) (it.next()));\r\n        final String name = nextColumn.getName();\r\n        final String idc = nextColumn.getId();\r\n        Object value = ccv.getValue(name);\r\n        if ((GregorianCalendar.class.isAssignableFrom(nextColumn.getType())) && (value != null)) {\r\n            value = DateParser.getIsoDate(((GanttCalendar) (value)).getTime());\r\n        }\r\n        addAttribute(\"taskproperty-id\", idc, attrs);\r\n        addAttribute(\"value\", (value == null ? null : String.valueOf(value)), attrs);\r\n        emptyElement(\"customproperty\", attrs, handler);\r\n    }\r\n    // Write the child of the task\r\n    if (task.getManager().getTaskHierarchy().hasNestedTasks(task)) {\r\n        Task[] nestedTasks = task.getManager().getTaskHierarchy().getNestedTasks(task);\r\n        for (int i = 0; i < (nestedTasks.length); i++) {\r\n            writeTask(handler, ((GanttTask) (nestedTasks[i])), customColumns);\r\n        }\r\n    }\r\n    // end of task section\r\n    endElement(\"task\", handler);\r\n}"},
 {"id":3550, "name":"writeTaskProperties(javax.xml.transform.sax.TransformerHandler,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.io.TaskSaver.writeTaskProperties(javax.xml.transform.sax.TransformerHandler,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"456", "ownerclassname":"net.sourceforge.ganttproject.io.TaskSaver", "sourcecode":"private void writeTaskProperties(TransformerHandler handler, CustomColumnsStorage customCol) throws SAXException {\r\n    writeTaskProperty(handler, \"tpd0\", \"type\", \"default\", \"icon\");\r\n    writeTaskProperty(handler, \"tpd1\", \"priority\", \"default\", \"icon\");\r\n    writeTaskProperty(handler, \"tpd2\", \"info\", \"default\", \"icon\");\r\n    writeTaskProperty(handler, \"tpd3\", \"name\", \"default\", \"text\");\r\n    writeTaskProperty(handler, \"tpd4\", \"begindate\", \"default\", \"date\");\r\n    writeTaskProperty(handler, \"tpd5\", \"enddate\", \"default\", \"date\");\r\n    writeTaskProperty(handler, \"tpd6\", \"duration\", \"default\", \"int\");\r\n    writeTaskProperty(handler, \"tpd7\", \"completion\", \"default\", \"int\");\r\n    writeTaskProperty(handler, \"tpd8\", \"coordinator\", \"default\", \"text\");\r\n    writeTaskProperty(handler, \"tpd9\", \"predecessorsr\", \"default\", \"text\");\r\n    /* <CustomColumn> */\r\n    Iterator it = customCol.getCustomColums().iterator();\r\n    while (it.hasNext()) {\r\n        final CustomColumn cc = ((CustomColumn) (it.next()));\r\n        Object defVal = cc.getDefaultValue();\r\n        final Class cla = cc.getType();\r\n        final String valueType = TaskSaver.encodeFieldType(cla);\r\n        if (valueType == null) {\r\n            continue;\r\n        }\r\n        if ((\"date\".equals(valueType)) && (defVal != null)) {\r\n            assert defVal instanceof GanttCalendar;\r\n            defVal = DateParser.getIsoDate(((GanttCalendar) (defVal)).getTime());\r\n        }\r\n        String idcStr = cc.getId();\r\n        writeTaskProperty(handler, idcStr, cc.getName(), \"custom\", valueType, (defVal == null ? null : String.valueOf(defVal)));\r\n    } \r\n}"},
 {"id":3551, "name":"writeTaskProperty(javax.xml.transform.sax.TransformerHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.TaskSaver.writeTaskProperty(javax.xml.transform.sax.TransformerHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"456", "ownerclassname":"net.sourceforge.ganttproject.io.TaskSaver", "sourcecode":"private void writeTaskProperty(TransformerHandler handler, String id, String name, String type, String valueType) throws SAXException {\r\n    writeTaskProperty(handler, id, name, type, valueType, null);\r\n}"},
 {"id":3552, "name":"writeTaskProperty(javax.xml.transform.sax.TransformerHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.io.TaskSaver.writeTaskProperty(javax.xml.transform.sax.TransformerHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"456", "ownerclassname":"net.sourceforge.ganttproject.io.TaskSaver", "sourcecode":"private void writeTaskProperty(TransformerHandler handler, String id, String name, String type, String valueType, String defaultValue) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    addAttribute(\"id\", id, attrs);\r\n    addAttribute(\"name\", name, attrs);\r\n    addAttribute(\"type\", type, attrs);\r\n    addAttribute(\"valuetype\", valueType, attrs);\r\n    if (defaultValue != null) {\r\n        addAttribute(\"defaultvalue\", defaultValue, attrs);\r\n    }\r\n    emptyElement(\"taskproperty\", attrs, handler);\r\n}"},
 {"id":3553, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.VacationSaver.-init-()", "ownerclassid":"457", "ownerclassname":"net.sourceforge.ganttproject.io.VacationSaver", "sourcecode":"VacationSaver() {\r\n}"},
 {"id":3554, "name":"save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.VacationSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"457", "ownerclassname":"net.sourceforge.ganttproject.io.VacationSaver", "sourcecode":"void save(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"vacations\", handler);\r\n    ProjectResource[] resources = project.getHumanResourceManager().getResourcesArray();\r\n    for (int i = 0; i < (resources.length); i++) {\r\n        HumanResource p = ((HumanResource) (resources[i]));\r\n        if ((p.getDaysOff()) != null)\r\n            for (int j = 0; j < (p.getDaysOff().size()); j++) {\r\n                GanttDaysOff gdo = ((GanttDaysOff) (p.getDaysOff().getElementAt(j)));\r\n                addAttribute(\"start\", gdo.getStart().toXMLString(), attrs);\r\n                addAttribute(\"end\", gdo.getFinish().toXMLString(), attrs);\r\n                addAttribute(\"resourceid\", String.valueOf(p.getId()), attrs);\r\n                emptyElement(\"vacation\", attrs, handler);\r\n            }\r\n\r\n    }\r\n    endElement(\"vacations\", handler);\r\n}"},
 {"id":3555, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.io.ViewSaver.-init-()", "ownerclassid":"458", "ownerclassname":"net.sourceforge.ganttproject.io.ViewSaver", "sourcecode":"ViewSaver() {\r\n}"},
 {"id":3556, "name":"save(net.sourceforge.ganttproject.gui.UIFacade,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.ViewSaver.save(net.sourceforge.ganttproject.gui.UIFacade,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"458", "ownerclassname":"net.sourceforge.ganttproject.io.ViewSaver", "sourcecode":"public void save(UIFacade facade, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    addAttribute(\"zooming-state\", facade.getZoomManager().getZoomState().getPersistentName(), attrs);\r\n    addAttribute(\"id\", \"gantt-chart\", attrs);\r\n    emptyElement(\"view\", attrs, handler);\r\n    addAttribute(\"id\", \"resource-table\", attrs);\r\n    startElement(\"view\", attrs, handler);\r\n    writeColumns(facade.getResourceTree().getVisibleFields(), handler);\r\n    endElement(\"view\", handler);\r\n}"},
 {"id":3557, "name":"writeColumns(net.sourceforge.ganttproject.gui.TableHeaderUIFacade,javax.xml.transform.sax.TransformerHandler)", "fullmethod":"net.sourceforge.ganttproject.io.ViewSaver.writeColumns(net.sourceforge.ganttproject.gui.TableHeaderUIFacade,javax.xml.transform.sax.TransformerHandler)", "ownerclassid":"458", "ownerclassname":"net.sourceforge.ganttproject.io.ViewSaver", "sourcecode":"protected void writeColumns(TableHeaderUIFacade visibleFields, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    int totalWidth = 0;\r\n    for (int i = 0; i < (visibleFields.getSize()); i++) {\r\n        if (visibleFields.getField(i).isVisible()) {\r\n            totalWidth += visibleFields.getField(i).getWidth();\r\n        }\r\n    }\r\n    for (int i = 0; i < (visibleFields.getSize()); i++) {\r\n        TableHeaderUIFacade.Column field = visibleFields.getField(i);\r\n        if (field.isVisible()) {\r\n            addAttribute(\"id\", field.getID(), attrs);\r\n            addAttribute(\"name\", field.getName(), attrs);\r\n            addAttribute(\"width\", (((field.getWidth()) * 100) / totalWidth), attrs);\r\n            addAttribute(\"order\", field.getOrder(), attrs);\r\n            emptyElement(\"field\", attrs, handler);\r\n        }\r\n    }\r\n}"},
 {"id":3558, "name":"-init-(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.-init-(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public Event(GanttLanguage language) {\r\n    super(language);\r\n}"},
 {"id":3559, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.-init-()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"private GanttLanguage() {\r\n    setLocale(Locale.getDefault());\r\n}"},
 {"id":3560, "name":"addListener(net.sourceforge.ganttproject.language.GanttLanguage$Listener)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.addListener(net.sourceforge.ganttproject.language.GanttLanguage$Listener)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public void addListener(GanttLanguage.Listener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":3561, "name":"correctLabel(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.correctLabel(java.lang.String)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public String correctLabel(String label) {\r\n    int index = label.indexOf($);\r\n    if ((index != (-1)) && (((label.length()) - index) > 1)) {\r\n        label = label.substring(0, index).concat(label.substring((++index)));\r\n    }\r\n    return label;\r\n}"},
 {"id":3562, "name":"createDateFormat(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.createDateFormat(java.lang.String)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public SimpleDateFormat createDateFormat(String string) {\r\n    return new SimpleDateFormat(string, currentLocale);\r\n}"},
 {"id":3563, "name":"fireLanguageChanged()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.fireLanguageChanged()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"private void fireLanguageChanged() {\r\n    GanttLanguage.Event event = new GanttLanguage.Event(this);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        GanttLanguage.Listener next = ((GanttLanguage.Listener) (myListeners.get(i)));\r\n        next.languageChanged(event);\r\n    }\r\n}"},
 {"id":3564, "name":"formatDate(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.formatDate(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public String formatDate(GanttCalendar date) {\r\n    return currentDateFormat.format(date.getTime());\r\n}"},
 {"id":3565, "name":"formatShortDate(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.formatShortDate(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public String formatShortDate(GanttCalendar date) {\r\n    return shortCurrentDateFormat.format(date.getTime());\r\n}"},
 {"id":3566, "name":"formatTime(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.formatTime(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public String formatTime(GanttCalendar date) {\r\n    return currentTimeFormat.format(date.getTime());\r\n}"},
 {"id":3567, "name":"getComponentOrientation()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getComponentOrientation()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public ComponentOrientation getComponentOrientation() {\r\n    return ComponentOrientation.getOrientation(currentLocale);\r\n}"},
 {"id":3568, "name":"getDateFormat()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getDateFormat()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"/**\r\n * Return the current DateFormat.\r\n *\r\n * @return The current DateFormat.\r\n */\r\npublic DateFormat getDateFormat() {\r\n    return currentDateFormat;\r\n}"},
 {"id":3569, "name":"getDay(int)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getDay(int)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public String getDay(int d) {\r\n    GregorianCalendar day = new GregorianCalendar(2000, 1, 1);\r\n    while ((day.get(Calendar.DAY_OF_WEEK)) != (Calendar.SUNDAY)) {\r\n        day.add(Calendar.DATE, 1);\r\n    } \r\n    day.add(Calendar.DATE, d);\r\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE\", this.currentLocale);\r\n    StringBuffer result = new StringBuffer();\r\n    result = dateFormat.format(day.getTime(), result, new FieldPosition(DateFormat.DAY_OF_WEEK_FIELD));\r\n    return result.toString();\r\n}"},
 {"id":3570, "name":"getInstance()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getInstance()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public static GanttLanguage getInstance() {\r\n    if ((GanttLanguage.ganttLanguage) == null) {\r\n        GanttLanguage.ganttLanguage = new GanttLanguage();\r\n    }\r\n    return GanttLanguage.ganttLanguage;\r\n}"},
 {"id":3571, "name":"getLocale()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getLocale()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"/**\r\n * Return the current Locale.\r\n *\r\n * @return The current Locale.\r\n */\r\npublic Locale getLocale() {\r\n    return currentLocale;\r\n}"},
 {"id":3572, "name":"getLongDateFormat()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getLongDateFormat()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public DateFormat getLongDateFormat() {\r\n    return myLongFormat;\r\n}"},
 {"id":3573, "name":"getMediumDateFormat()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getMediumDateFormat()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public DateFormat getMediumDateFormat() {\r\n    return currentDateFormat;\r\n}"},
 {"id":3574, "name":"getMonth(int)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getMonth(int)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public String getMonth(int m) {\r\n    GregorianCalendar month = new GregorianCalendar(2000, m, 1);\r\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"MMMM\", this.currentLocale);\r\n    StringBuffer result = new StringBuffer();\r\n    result = dateFormat.format(month.getTime(), result, new FieldPosition(DateFormat.MONTH_FIELD));\r\n    return result.toString();\r\n}"},
 {"id":3575, "name":"getShortDateFormat()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getShortDateFormat()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public DateFormat getShortDateFormat() {\r\n    return shortCurrentDateFormat;\r\n}"},
 {"id":3576, "name":"getText(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.getText(java.lang.String)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public String getText(String key) {\r\n    try {\r\n        return i18n.getString(key);\r\n    } catch (MissingResourceException e) {\r\n        return (((GanttLanguage.MISSING_RESOURCE) + \" \") + key) + \"\";\r\n    }\r\n}"},
 {"id":3577, "name":"newCalendar()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.newCalendar()", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public Calendar newCalendar() {\r\n    return ((Calendar) (Calendar.getInstance(currentLocale).clone()));\r\n}"},
 {"id":3578, "name":"parseDate(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.parseDate(java.lang.String)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public GanttCalendar parseDate(String date) throws ParseException {\r\n    Calendar tmp = Calendar.getInstance(currentLocale);\r\n    tmp.setTime(currentDateFormat.parse(date));\r\n    return new GanttCalendar(tmp.get(Calendar.YEAR), tmp.get(Calendar.MONTH), tmp.get(Calendar.DATE));\r\n}"},
 {"id":3579, "name":"removeListener(net.sourceforge.ganttproject.language.GanttLanguage$Listener)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.removeListener(net.sourceforge.ganttproject.language.GanttLanguage$Listener)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public void removeListener(GanttLanguage.Listener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":3580, "name":"setLocale(java.util.Locale)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage.setLocale(java.util.Locale)", "ownerclassid":"461", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage", "sourcecode":"public void setLocale(Locale locale) {\r\n    currentLocale = locale;\r\n    Locale.setDefault(locale);\r\n    int defaultTimezoneOffset = (TimeZone.getDefault().getRawOffset()) + (TimeZone.getDefault().getDSTSavings());\r\n    TimeZone utc = TimeZone.getTimeZone(\"UTC\");\r\n    utc.setRawOffset(defaultTimezoneOffset);\r\n    TimeZone.setDefault(utc);\r\n    currentDateFormat = ((SimpleDateFormat) (DateFormat.getDateInstance(DateFormat.MEDIUM, currentLocale)));\r\n    shortCurrentDateFormat = ((SimpleDateFormat) (DateFormat.getDateInstance(DateFormat.SHORT, currentLocale)));\r\n    currentTimeFormat = DateFormat.getTimeInstance(DateFormat.MEDIUM, currentLocale);\r\n    myLongFormat = ((SimpleDateFormat) (DateFormat.getDateInstance(DateFormat.LONG, locale)));\r\n    UIManager.put(\"JXDatePicker.longFormat\", myLongFormat.toPattern());\r\n    UIManager.put(\"JXDatePicker.mediumFormat\", currentDateFormat.toPattern());\r\n    UIManager.put(\"JXDatePicker.shortFormat\", shortCurrentDateFormat.toPattern());\r\n    UIManager.put(\"JXDatePicker.numColumns\", new Integer(10));\r\n    String[] dayShortNames = new String[7];\r\n    for (int i = 0; i < 7; i++) {\r\n        dayShortNames[i] = getDay(i).substring(0, 1);\r\n    }\r\n    UIManager.put(\"JXMonthView.daysOfTheWeek\", dayShortNames);\r\n    String resourceBase = System.getProperty(\"org.ganttproject.resourcebase\", \"language/i18n\");\r\n    i18n = ResourceBundle.getBundle(resourceBase, currentLocale);\r\n    fireLanguageChanged();\r\n}"},
 {"id":3581, "name":"-init-(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage$Event.-init-(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"459", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "sourcecode":"public Event(GanttLanguage language) {\r\n    super(language);\r\n}"},
 {"id":3582, "name":"getLanguage()", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage$Event.getLanguage()", "ownerclassid":"459", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "sourcecode":"public GanttLanguage getLanguage() {\r\n    return ((GanttLanguage) (getSource()));\r\n}"},
 {"id":3583, "name":"languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "fullmethod":"net.sourceforge.ganttproject.language.GanttLanguage$Listener.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "ownerclassid":"460", "ownerclassname":"net.sourceforge.ganttproject.language.GanttLanguage$Listener", "sourcecode":"public void languageChanged(GanttLanguage.Event event);"},
 {"id":3584, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager)", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager)", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"public AllocationTagHandler(ResourceManager resourceMgr, TaskManager taskMgr, RoleManager roleMgr) {\r\n    myResourceManager = resourceMgr;\r\n    myTaskManager = taskMgr;\r\n    myRoleManager = roleMgr;\r\n}"},
 {"id":3585, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.parser.TagHandler#endElement(java.lang.String,\n     java.lang.String, java.lang.String)\n */\r\npublic void endElement(String namespaceURI, String sName, String qName) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3586, "name":"findRole(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.findRole(java.lang.String)", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"private Role findRole(String persistentIDasString) {\r\n    // \r\n    RolePersistentID persistentID = new RolePersistentID(persistentIDasString);\r\n    String rolesetName = persistentID.getRoleSetID();\r\n    int roleID = persistentID.getRoleID();\r\n    RoleSet roleSet;\r\n    if (rolesetName == null) {\r\n        roleSet = myRoleManager.getProjectRoleSet();\r\n        if ((roleSet.findRole(roleID)) == null) {\r\n            if ((roleID <= 10) && (roleID > 2)) {\r\n                roleSet = myRoleManager.getRoleSet(RoleSet.SOFTWARE_DEVELOPMENT);\r\n                roleSet.setEnabled(true);\r\n            } else\r\n                if (roleID <= 2) {\r\n                    roleSet = myRoleManager.getRoleSet(RoleSet.DEFAULT);\r\n                }\r\n\r\n        }\r\n    } else {\r\n        roleSet = myRoleManager.getRoleSet(rolesetName);\r\n    }\r\n    Role result = roleSet.findRole(roleID);\r\n    return result;\r\n}"},
 {"id":3587, "name":"getResourceManager()", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.getResourceManager()", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"private ResourceManager getResourceManager() {\r\n    return myResourceManager;\r\n}"},
 {"id":3588, "name":"getTaskManager()", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.getTaskManager()", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"private TaskManager getTaskManager() {\r\n    return myTaskManager;\r\n}"},
 {"id":3589, "name":"loadAllocation(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.loadAllocation(org.xml.sax.Attributes)", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"private void loadAllocation(Attributes attrs) throws FileFormatException {\r\n    String aName;\r\n    int taskId = 0;\r\n    int resourceId = 0;\r\n    float load = 0;\r\n    boolean coordinator = false;\r\n    String taskIdAsString = attrs.getValue(\"task-id\");\r\n    String resourceIdAsString = attrs.getValue(\"resource-id\");\r\n    String loadAsString = attrs.getValue(\"load\");\r\n    String coordinatorAsString = attrs.getValue(\"responsible\");\r\n    String rolePersistendIDString = attrs.getValue(\"function\");\r\n    if ((taskIdAsString == null) || (resourceIdAsString == null)) {\r\n        throw new FileFormatException(\"Failed to load <allocation> tag: task or resource identifier is missing\");\r\n    }\r\n    try {\r\n        taskId = Integer.parseInt(taskIdAsString);\r\n        resourceId = Integer.parseInt(resourceIdAsString);\r\n        if (loadAsString != null) {\r\n            load = Float.parseFloat(loadAsString);\r\n        }\r\n        if (coordinatorAsString != null) {\r\n            coordinator = Boolean.valueOf(coordinatorAsString).booleanValue();\r\n        }\r\n    } catch (NumberFormatException e) {\r\n        throw new FileFormatException(\"Failed to load <allocation> tag: one of attribute values is invalid\", e);\r\n    }\r\n    // if no load is specified I assume 100% load\r\n    // this should only be the case if old files\r\n    // were loaded.\r\n    if (load == 0) {\r\n        load = 100;\r\n    }\r\n    HumanResource human = ((HumanResource) (getResourceManager().getById(resourceId)));\r\n    if (human == null) {\r\n        throw new FileFormatException(((\"Human resource with id=\" + resourceId) + \" not found\"));\r\n    }\r\n    Task task = getTaskManager().getTask(taskId);\r\n    if (task == null) {\r\n        throw new FileFormatException(((\"Task with id=\" + taskId) + \" not found\"));\r\n    }\r\n    // TaskMutator mutator = task.createMutator();\r\n    // ResourceAssignment assignment = mutator.addResource(human);\r\n    // assignment.setLoad(load);\r\n    // mutator.commit();\r\n    ResourceAssignment assignment = task.getAssignmentCollection().addAssignment(human);\r\n    try {\r\n        if (rolePersistendIDString != null)\r\n            myLateAssigmnent2roleBinding.put(assignment, rolePersistendIDString);\r\n\r\n    } catch (NumberFormatException e) {\r\n        System.out.println((\"ERROR in parsing XML File function id is not numeric: \" + (e.toString())));\r\n    }\r\n    assignment.setLoad(load);\r\n    assignment.setCoordinator(coordinator);\r\n}"},
 {"id":3590, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.parsingFinished()", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"public void parsingFinished() {\r\n    for (Iterator lateBindingEntries = myLateAssigmnent2roleBinding.entrySet().iterator(); lateBindingEntries.hasNext();) {\r\n        Map.Entry nextEntry = ((Map.Entry) (lateBindingEntries.next()));\r\n        String persistentID = ((String) (nextEntry.getValue()));\r\n        Role nextRole = findRole(persistentID);\r\n        if (nextRole != null) {\r\n            lateBindingEntries.remove();\r\n            ((ResourceAssignment) (nextEntry.getKey())).setRoleForAssignment(nextRole);\r\n        }\r\n    }\r\n    if (!(myLateAssigmnent2roleBinding.isEmpty())) {\r\n        System.err.println((\"[ResourceTagHandler] parsingFinished(): not found roles:\n\" + (myLateAssigmnent2roleBinding)));\r\n    }\r\n}"},
 {"id":3591, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.parsingStarted()", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"public void parsingStarted() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3592, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.AllocationTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"462", "ownerclassname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.parser.TagHandler#startElement(java.lang.String,\n     java.lang.String, java.lang.String, org.xml.sax.Attributes)\n */\r\npublic void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    if (qName.equals(\"allocation\")) {\r\n        loadAllocation(attrs);\r\n    }\r\n}"},
 {"id":3593, "name":"-init-(net.sourceforge.ganttproject.chart.GanttChart)", "fullmethod":"net.sourceforge.ganttproject.parser.BlankLineTagHandler.-init-(net.sourceforge.ganttproject.chart.GanttChart)", "ownerclassid":"463", "ownerclassname":"net.sourceforge.ganttproject.parser.BlankLineTagHandler", "sourcecode":"public BlankLineTagHandler(GanttChart chart) {\r\n    myGanttChart = chart;\r\n}"},
 {"id":3594, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.BlankLineTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"463", "ownerclassname":"net.sourceforge.ganttproject.parser.BlankLineTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3595, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.BlankLineTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"463", "ownerclassname":"net.sourceforge.ganttproject.parser.BlankLineTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    if (qName.equals(\"blankline\")) {\r\n        // myGanttChart.appendBlankRow();\r\n    }\r\n}"},
 {"id":3596, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.ColorValueParser.-init-()", "ownerclassid":"464", "ownerclassname":"net.sourceforge.ganttproject.parser.ColorValueParser", "sourcecode":"ColorValueParser() {\r\n}"},
 {"id":3597, "name":"parseString(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.ColorValueParser.parseString(java.lang.String)", "ownerclassid":"464", "ownerclassname":"net.sourceforge.ganttproject.parser.ColorValueParser", "sourcecode":"public static Color parseString(String value) {\r\n    if (!(Pattern.matches(\"#[0-9abcdefABCDEF]{6}+\", value))) {\r\n        return GanttGraphicArea.taskDefaultColor;\r\n    }\r\n    int r;\r\n    int g;\r\n    int b;\r\n    r = Integer.valueOf(value.substring(1, 3), 16).intValue();\r\n    g = Integer.valueOf(value.substring(3, 5), 16).intValue();\r\n    b = Integer.valueOf(value.substring(5, 7), 16).intValue();\r\n    return new Color(r, g, b);\r\n}"},
 {"id":3598, "name":"-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"466", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "sourcecode":"public CustomPropertiesTagHandler(ParsingContext context, TaskManager taskManager, CustomColumnsStorage columnStorage) {\r\n    this.taskManager = taskManager;\r\n    this.parsingContext = context;\r\n    this.listStructure = new ArrayList();\r\n    myColumnStorage = columnStorage;\r\n}"},
 {"id":3599, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.-init-()", "ownerclassid":"466", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "sourcecode":"public CustomPropertiesStructure() {\r\n}"},
 {"id":3600, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"466", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#endElement(java.lang.String,\r\njava.lang.String, java.lang.String)\r\n */\r\npublic void endElement(String namespaceURI, String sName, String qName) {\r\n    // nothing to do.\r\n}"},
 {"id":3601, "name":"loadProperty(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.loadProperty(org.xml.sax.Attributes)", "ownerclassid":"466", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "sourcecode":"private void loadProperty(Attributes attrs) {\r\n    if (attrs != null) {\r\n        // System.out.println(parsingContext.getTaskID());\r\n        CustomPropertiesTagHandler.CustomPropertiesStructure cps = new CustomPropertiesTagHandler.CustomPropertiesStructure();\r\n        cps.setTaskID(this.parsingContext.getTaskID());\r\n        cps.setTaskPropertyID(attrs.getValue(\"taskproperty-id\"));\r\n        cps.setValue(attrs.getValue(\"value\"));\r\n        this.listStructure.add(cps);\r\n    }\r\n}"},
 {"id":3602, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.parsingFinished()", "ownerclassid":"466", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.ParsingListener#parsingFinished()\r\n */\r\npublic void parsingFinished() {\r\n    Iterator it = this.listStructure.iterator();\r\n    while (it.hasNext()) {\r\n        CustomPropertiesTagHandler.CustomPropertiesStructure cps = ((CustomPropertiesTagHandler.CustomPropertiesStructure) (it.next()));\r\n        Task task = taskManager.getTask(cps.taskID);\r\n        CustomColumn cc = myColumnStorage.getCustomColumnByID(cps.taskPropertyID);\r\n        String valueStr = cps.value;\r\n        Object value = null;\r\n        Class cla = cc.getType();\r\n        if (valueStr != null) {\r\n            if (cla.equals(String.class))\r\n                value = valueStr.toString();\r\n            else\r\n                if (cla.equals(Boolean.class))\r\n                    value = Boolean.valueOf(valueStr);\r\n                else\r\n                    if (cla.equals(Integer.class))\r\n                        value = Integer.valueOf(valueStr);\r\n                    else\r\n                        if (cla.equals(Double.class))\r\n                            value = Double.valueOf(valueStr);\r\n                        else\r\n                            if (GregorianCalendar.class.isAssignableFrom(cla))\r\n                                try {\r\n                                    value = new GanttCalendar(DateParser.parse(valueStr));\r\n                                } catch (InvalidDateException e) {\r\n                                    if (!(GPLogger.log(e))) {\r\n                                        e.printStackTrace(System.err);\r\n                                    }\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n        try {\r\n            // System.out.println(task.getName());\r\n            task.getCustomValues().setValue(cc.getName(), value);\r\n        } catch (CustomColumnsException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    } \r\n}"},
 {"id":3603, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.parsingStarted()", "ownerclassid":"466", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.ParsingListener#parsingStarted()\r\n */\r\npublic void parsingStarted() {\r\n    // nothing to do.\r\n}"},
 {"id":3604, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"466", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.parser.TagHandler#startElement(java.lang.String,\n     java.lang.String, java.lang.String, org.xml.sax.Attributes)\n */\r\npublic void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    if (qName.equals(\"customproperty\"))\r\n        loadProperty(attrs);\r\n\r\n}"},
 {"id":3605, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler$CustomPropertiesStructure.-init-()", "ownerclassid":"465", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler$CustomPropertiesStructure", "sourcecode":"public CustomPropertiesStructure() {\r\n}"},
 {"id":3606, "name":"setTaskID(int)", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler$CustomPropertiesStructure.setTaskID(int)", "ownerclassid":"465", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler$CustomPropertiesStructure", "sourcecode":"public void setTaskID(int taskID) {\r\n    this.taskID = taskID;\r\n}"},
 {"id":3607, "name":"setTaskPropertyID(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler$CustomPropertiesStructure.setTaskPropertyID(java.lang.String)", "ownerclassid":"465", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler$CustomPropertiesStructure", "sourcecode":"public void setTaskPropertyID(String propertyID) {\r\n    this.taskPropertyID = propertyID;\r\n}"},
 {"id":3608, "name":"setValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler$CustomPropertiesStructure.setValue(java.lang.String)", "ownerclassid":"465", "ownerclassname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler$CustomPropertiesStructure", "sourcecode":"public void setValue(String val) {\r\n    this.value = val;\r\n}"},
 {"id":3609, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.DayTypeTagHandler.-init-()", "ownerclassid":"467", "ownerclassname":"net.sourceforge.ganttproject.parser.DayTypeTagHandler", "sourcecode":"DayTypeTagHandler() {\r\n}"},
 {"id":3610, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.DayTypeTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"467", "ownerclassname":"net.sourceforge.ganttproject.parser.DayTypeTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3611, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.DayTypeTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"467", "ownerclassname":"net.sourceforge.ganttproject.parser.DayTypeTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3612, "name":"-init-(net.sourceforge.ganttproject.calendar.GPCalendar)", "fullmethod":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler.-init-(net.sourceforge.ganttproject.calendar.GPCalendar)", "ownerclassid":"468", "ownerclassname":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler", "sourcecode":"public DefaultWeekTagHandler(GPCalendar calendar) {\r\n    myGPCalendar = calendar;\r\n    for (int i = 1; i <= 7; i++) {\r\n        myGPCalendar.setWeekDayType(i, GPCalendar.DayType.WORKING);\r\n    }\r\n}"},
 {"id":3613, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"468", "ownerclassname":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n}"},
 {"id":3614, "name":"getShortDayName(int)", "fullmethod":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler.getShortDayName(int)", "ownerclassid":"468", "ownerclassname":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler", "sourcecode":"private String getShortDayName(int i) {\r\n    myCalendar.set(Calendar.DAY_OF_WEEK, i);\r\n    return myShortFormat.format(myCalendar.getTime()).toLowerCase();\r\n}"},
 {"id":3615, "name":"loadCalendar(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler.loadCalendar(org.xml.sax.Attributes)", "ownerclassid":"468", "ownerclassname":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler", "sourcecode":"private void loadCalendar(Attributes attrs) {\r\n    for (int i = 1; i <= 7; i++) {\r\n        String nextDayName = getShortDayName(i);\r\n        String nextEncodedType = attrs.getValue(nextDayName);\r\n        if (\"1\".equals(nextEncodedType)) {\r\n            myGPCalendar.setWeekDayType(i, GPCalendar.DayType.WEEKEND);\r\n        }\r\n    }\r\n}"},
 {"id":3616, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"468", "ownerclassname":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    if (\"default-week\".equals(qName)) {\r\n        loadCalendar(attrs);\r\n    }\r\n}"},
 {"id":3617, "name":"-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"public DependencyTagHandler(ParsingContext context, TaskManager taskManager, UIFacade uiFacade) {\r\n    myContext = context;\r\n    myTaskManager = taskManager;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":3618, "name":"-init-(int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.-init-(int,int)", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"public GanttDependStructure(int a, int b) {\r\n    taskID = a;\r\n    successorTaskID = b;\r\n}"},
 {"id":3619, "name":"-init-(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.-init-(int,int,int)", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"public GanttDependStructure(int taskID, int successorID, int relationType) {\r\n    this.taskID = taskID;\r\n    this.successorTaskID = successorID;\r\n    this.dependType = relationType;\r\n}"},
 {"id":3620, "name":"-init-(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.-init-(int,int,int,int)", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"public GanttDependStructure(int taskID, int successorID, int relationType, int difference) {\r\n    this.taskID = taskID;\r\n    this.successorTaskID = successorID;\r\n    this.dependType = relationType;\r\n    this.difference = difference;\r\n}"},
 {"id":3621, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.-init-()", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"public GanttDependStructure() {\r\n}"},
 {"id":3622, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#endElement(String,\r\nString, String)\r\n */\r\npublic void endElement(String namespaceURI, String sName, String qName) {\r\n    /* if (\"dependencies\".equals (qName)) { myDependenciesSectionStarted =\n    false; }\n     */\r\n}"},
 {"id":3623, "name":"getContext()", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.getContext()", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"private ParsingContext getContext() {\r\n    return myContext;\r\n}"},
 {"id":3624, "name":"getDependencies()", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.getDependencies()", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"private List getDependencies() {\r\n    return myDependencies;\r\n}"},
 {"id":3625, "name":"getDependencyAddressee()", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.getDependencyAddressee()", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"protected int getDependencyAddressee() {\r\n    return getContext().getTaskID();\r\n}"},
 {"id":3626, "name":"getDependencyAddresser(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.getDependencyAddresser(org.xml.sax.Attributes)", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"protected int getDependencyAddresser(Attributes attrs) {\r\n    try {\r\n        return Integer.parseInt(attrs.getValue(\"id\"));\r\n    } catch (NumberFormatException e) {\r\n        throw new RuntimeException((\"Failed to parse depend tag. Attribute id seems to be invalid: \" + (attrs.getValue(\"id\"))), e);\r\n    }\r\n}"},
 {"id":3627, "name":"loadDependency(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.loadDependency(org.xml.sax.Attributes)", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"protected void loadDependency(Attributes attrs) {\r\n    if (attrs != null) {\r\n        DependencyTagHandler.GanttDependStructure gds = new DependencyTagHandler.GanttDependStructure();\r\n        gds.setTaskID(getDependencyAddressee());\r\n        gds.setDependTaskID(getDependencyAddresser(attrs));\r\n        String dependencyTypeAsString = attrs.getValue(\"type\");\r\n        String differenceAsString = attrs.getValue(\"difference\");\r\n        String hardnessAsString = attrs.getValue(\"hardness\");\r\n        if (dependencyTypeAsString != null) {\r\n            try {\r\n                int dependencyType = Integer.parseInt(dependencyTypeAsString);\r\n                gds.setDependType(dependencyType);\r\n            } catch (NumberFormatException e) {\r\n            }\r\n        }\r\n        if (differenceAsString != null) {\r\n            try {\r\n                int difference = Integer.parseInt(differenceAsString);\r\n                gds.setDifference(difference);\r\n            } catch (NumberFormatException e) {\r\n            }\r\n        }\r\n        if (hardnessAsString != null) {\r\n            TaskDependency.Hardness hardness = TaskDependency.Hardness.parse(hardnessAsString);\r\n            gds.setHardness(hardness);\r\n        }\r\n        getDependencies().add(gds);\r\n    }\r\n}"},
 {"id":3628, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.parsingFinished()", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"public void parsingFinished() {\r\n    for (int i = 0; i < (getDependencies().size()); i++) {\r\n        DependencyTagHandler.GanttDependStructure ds = ((DependencyTagHandler.GanttDependStructure) (getDependencies().get(i)));\r\n        Task dependee = myTaskManager.getTask(ds.taskID);// By CL\r\n\r\n        Task dependant = myTaskManager.getTask(ds.successorTaskID);\r\n        if ((dependee == null) || (dependant == null)) {\r\n            continue;\r\n        }\r\n        try {\r\n            TaskDependency dep = myTaskManager.getDependencyCollection().createDependency(dependant, dependee, new FinishStartConstraintImpl());\r\n            dep.setConstraint(myTaskManager.createConstraint(ds.dependType));\r\n            dep.setDifference(ds.difference);\r\n            if (myContext.getTasksWithLegacyFixedStart().contains(dependant)) {\r\n                dep.setHardness(TaskDependency.Hardness.RUBBER);\r\n            } else {\r\n                dep.setHardness(ds.myHardness);\r\n            }\r\n        } catch (TaskDependencyException e) {\r\n            myUIFacade.logErrorMessage(e);\r\n        }\r\n    }\r\n}"},
 {"id":3629, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.parsingStarted()", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"public void parsingStarted() {\r\n}"},
 {"id":3630, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"470", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#startElement(String,\r\nString, String, Attributes)\r\n */\r\npublic void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    /* if (\"dependencies\".equals (qName)) { myDependenciesSectionStarted =\n    true; }\n     */\r\n    if (\"depend\".equals(qName)) {\r\n        /* if (!myDependenciesSectionStarted) { throw new\n        RuntimeException(\"Invalid file format. Found dependency tag\n        without prior dependencies tag\"); } else {\n         */\r\n        loadDependency(attrs);\r\n    }\r\n}"},
 {"id":3631, "name":"-init-(int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.-init-(int,int)", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public GanttDependStructure(int a, int b) {\r\n    taskID = a;\r\n    successorTaskID = b;\r\n}"},
 {"id":3632, "name":"-init-(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.-init-(int,int,int)", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public GanttDependStructure(int taskID, int successorID, int relationType) {\r\n    this.taskID = taskID;\r\n    this.successorTaskID = successorID;\r\n    this.dependType = relationType;\r\n}"},
 {"id":3633, "name":"-init-(int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.-init-(int,int,int,int)", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public GanttDependStructure(int taskID, int successorID, int relationType, int difference) {\r\n    this.taskID = taskID;\r\n    this.successorTaskID = successorID;\r\n    this.dependType = relationType;\r\n    this.difference = difference;\r\n}"},
 {"id":3634, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.-init-()", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public GanttDependStructure() {\r\n}"},
 {"id":3635, "name":"setDependTaskID(int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.setDependTaskID(int)", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public void setDependTaskID(int successorTaskID) {\r\n    this.successorTaskID = successorTaskID;\r\n}"},
 {"id":3636, "name":"setDependType(int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.setDependType(int)", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public void setDependType(int dependType) {\r\n    this.dependType = dependType;\r\n}"},
 {"id":3637, "name":"setDifference(int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.setDifference(int)", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public void setDifference(int difference) {\r\n    this.difference = difference;\r\n}"},
 {"id":3638, "name":"setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public void setHardness(TaskDependency.Hardness hardness) {\r\n    myHardness = hardness;\r\n}"},
 {"id":3639, "name":"setTaskID(int)", "fullmethod":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.setTaskID(int)", "ownerclassid":"469", "ownerclassname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "sourcecode":"public void setTaskID(int taskID) {\r\n    this.taskID = taskID;\r\n}"},
 {"id":3640, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.FileFormatException.-init-()", "ownerclassid":"471", "ownerclassname":"net.sourceforge.ganttproject.parser.FileFormatException", "sourcecode":"public FileFormatException() {\r\n}"},
 {"id":3641, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.FileFormatException.-init-(java.lang.String)", "ownerclassid":"471", "ownerclassname":"net.sourceforge.ganttproject.parser.FileFormatException", "sourcecode":"public FileFormatException(String message) {\r\n    super(message);\r\n}"},
 {"id":3642, "name":"-init-(java.lang.String,java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.parser.FileFormatException.-init-(java.lang.String,java.lang.Throwable)", "ownerclassid":"471", "ownerclassname":"net.sourceforge.ganttproject.parser.FileFormatException", "sourcecode":"public FileFormatException(String message, Throwable cause) {\r\n    super(message, cause);\r\n}"},
 {"id":3643, "name":"-init-(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.parser.FileFormatException.-init-(java.lang.Throwable)", "ownerclassid":"471", "ownerclassname":"net.sourceforge.ganttproject.parser.FileFormatException", "sourcecode":"public FileFormatException(Throwable cause) {\r\n    super(cause);\r\n}"},
 {"id":3644, "name":"addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "fullmethod":"net.sourceforge.ganttproject.parser.GPParser.addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "ownerclassid":"472", "ownerclassname":"net.sourceforge.ganttproject.parser.GPParser", "sourcecode":"void addParsingListener(ParsingListener listener);"},
 {"id":3645, "name":"addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "fullmethod":"net.sourceforge.ganttproject.parser.GPParser.addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "ownerclassid":"472", "ownerclassname":"net.sourceforge.ganttproject.parser.GPParser", "sourcecode":"void addTagHandler(TagHandler handler);"},
 {"id":3646, "name":"getContext()", "fullmethod":"net.sourceforge.ganttproject.parser.GPParser.getContext()", "ownerclassid":"472", "ownerclassname":"net.sourceforge.ganttproject.parser.GPParser", "sourcecode":"ParsingContext getContext();"},
 {"id":3647, "name":"getDefaultTagHandler()", "fullmethod":"net.sourceforge.ganttproject.parser.GPParser.getDefaultTagHandler()", "ownerclassid":"472", "ownerclassname":"net.sourceforge.ganttproject.parser.GPParser", "sourcecode":"TagHandler getDefaultTagHandler();"},
 {"id":3648, "name":"load(java.io.InputStream)", "fullmethod":"net.sourceforge.ganttproject.parser.GPParser.load(java.io.InputStream)", "ownerclassid":"472", "ownerclassname":"net.sourceforge.ganttproject.parser.GPParser", "sourcecode":"boolean load(InputStream inStream) throws IOException;"},
 {"id":3649, "name":"-init-(net.sourceforge.ganttproject.IGanttProject)", "fullmethod":"net.sourceforge.ganttproject.parser.HolidayTagHandler.-init-(net.sourceforge.ganttproject.IGanttProject)", "ownerclassid":"473", "ownerclassname":"net.sourceforge.ganttproject.parser.HolidayTagHandler", "sourcecode":"public HolidayTagHandler(IGanttProject project) {\r\n    this.project = project;\r\n    project.getActiveCalendar().getPublicHolidays().clear();\r\n}"},
 {"id":3650, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.HolidayTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"473", "ownerclassname":"net.sourceforge.ganttproject.parser.HolidayTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#endElement(String,\r\nString, String)\r\n */\r\npublic void endElement(String namespaceURI, String sName, String qName) {\r\n}"},
 {"id":3651, "name":"loadHoliday(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.HolidayTagHandler.loadHoliday(org.xml.sax.Attributes)", "ownerclassid":"473", "ownerclassname":"net.sourceforge.ganttproject.parser.HolidayTagHandler", "sourcecode":"private void loadHoliday(Attributes atts) {\r\n    // HumanResource hr;\r\n    try {\r\n        String yearAsString = atts.getValue(\"year\");\r\n        if (yearAsString == null)\r\n            System.out.println(\"yearAsString==null\");\r\n\r\n        String monthAsString = atts.getValue(\"month\");\r\n        String dateAsString = atts.getValue(\"date\");\r\n        int month = Integer.parseInt(monthAsString);\r\n        int date = Integer.parseInt(dateAsString);\r\n        if (yearAsString.equals(\"\")) {\r\n            project.getActiveCalendar().setPublicHoliDayType(month, date);\r\n        } else {\r\n            int year = Integer.parseInt(yearAsString);\r\n            project.getActiveCalendar().setPublicHoliDayType(new GanttCalendar(year, (month - 1), date).getTime());\r\n        }\r\n    } catch (NumberFormatException e) {\r\n        System.out.println((\"ERROR in parsing XML File year is not numeric: \" + (e.toString())));\r\n        return;\r\n    }\r\n}"},
 {"id":3652, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.HolidayTagHandler.parsingFinished()", "ownerclassid":"473", "ownerclassname":"net.sourceforge.ganttproject.parser.HolidayTagHandler", "sourcecode":"public void parsingFinished() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3653, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.HolidayTagHandler.parsingStarted()", "ownerclassid":"473", "ownerclassname":"net.sourceforge.ganttproject.parser.HolidayTagHandler", "sourcecode":"public void parsingStarted() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3654, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.HolidayTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"473", "ownerclassname":"net.sourceforge.ganttproject.parser.HolidayTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#startElement(String,\r\nString, String, Attributes)\r\n */\r\npublic void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    if (qName.equals(\"date\")) {\r\n        loadHoliday(attrs);\r\n    }\r\n}"},
 {"id":3655, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.-init-()", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"public IconPositionTagHandler() {\r\n}"},
 {"id":3656, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n}"},
 {"id":3657, "name":"getDeletedList()", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.getDeletedList()", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"public int[] getDeletedList() {\r\n    return myDeletedList;\r\n}"},
 {"id":3658, "name":"getDeletedPositions()", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.getDeletedPositions()", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"public String getDeletedPositions() {\r\n    return myDeletedPositions;\r\n}"},
 {"id":3659, "name":"getList()", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.getList()", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"public int[] getList() {\r\n    return myList;\r\n}"},
 {"id":3660, "name":"getPositions()", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.getPositions()", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"public String getPositions() {\r\n    return myPositions;\r\n}"},
 {"id":3661, "name":"loadDeletedIcon(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.loadDeletedIcon(org.xml.sax.Attributes)", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"private void loadDeletedIcon(Attributes atts) {\r\n    myDeletedPositions = atts.getValue(\"deletedIcons-list\");\r\n    if (((myDeletedPositions) != null) && (!(myDeletedPositions.equals(\"\")))) {\r\n        String[] positions = myDeletedPositions.split(\",\");\r\n        myDeletedList = new int[positions.length];\r\n        for (int i = 0; i < (positions.length); i++)\r\n            myDeletedList[i] = new Integer(positions[i]).intValue();\r\n\r\n    }\r\n}"},
 {"id":3662, "name":"loadIcon(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.loadIcon(org.xml.sax.Attributes)", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"private void loadIcon(Attributes atts) {\r\n    myPositions = atts.getValue(\"icons-list\");\r\n    if (!(myPositions.equals(\"\"))) {\r\n        String[] positions = myPositions.split(\",\");\r\n        myList = new int[positions.length];\r\n        for (int i = 0; i < (positions.length); i++)\r\n            myList[i] = new Integer(positions[i]).intValue();\r\n\r\n    }\r\n}"},
 {"id":3663, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.IconPositionTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"474", "ownerclassname":"net.sourceforge.ganttproject.parser.IconPositionTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    if (qName.equals(\"positions\")) {\r\n        loadIcon(attrs);\r\n        loadDeletedIcon(attrs);\r\n    }\r\n}"},
 {"id":3664, "name":"newParser()", "fullmethod":"net.sourceforge.ganttproject.parser.ParserFactory.newParser()", "ownerclassid":"475", "ownerclassname":"net.sourceforge.ganttproject.parser.ParserFactory", "sourcecode":"GPParser newParser();"},
 {"id":3665, "name":"newSaver()", "fullmethod":"net.sourceforge.ganttproject.parser.ParserFactory.newSaver()", "ownerclassid":"475", "ownerclassname":"net.sourceforge.ganttproject.parser.ParserFactory", "sourcecode":"GPSaver newSaver();"},
 {"id":3666, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.ParsingContext.-init-()", "ownerclassid":"476", "ownerclassname":"net.sourceforge.ganttproject.parser.ParsingContext", "sourcecode":"ParsingContext() {\r\n}"},
 {"id":3667, "name":"addTaskWithLegacyFixedStart(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.parser.ParsingContext.addTaskWithLegacyFixedStart(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"476", "ownerclassname":"net.sourceforge.ganttproject.parser.ParsingContext", "sourcecode":"void addTaskWithLegacyFixedStart(Task task) {\r\n    myFixedStartTasks.add(task);\r\n}"},
 {"id":3668, "name":"getTaskID()", "fullmethod":"net.sourceforge.ganttproject.parser.ParsingContext.getTaskID()", "ownerclassid":"476", "ownerclassname":"net.sourceforge.ganttproject.parser.ParsingContext", "sourcecode":"public int getTaskID() {\r\n    return myTaskID;\r\n}"},
 {"id":3669, "name":"getTasksWithLegacyFixedStart()", "fullmethod":"net.sourceforge.ganttproject.parser.ParsingContext.getTasksWithLegacyFixedStart()", "ownerclassid":"476", "ownerclassname":"net.sourceforge.ganttproject.parser.ParsingContext", "sourcecode":"Set getTasksWithLegacyFixedStart() {\r\n    return myFixedStartTasks;\r\n}"},
 {"id":3670, "name":"setTaskID(int)", "fullmethod":"net.sourceforge.ganttproject.parser.ParsingContext.setTaskID(int)", "ownerclassid":"476", "ownerclassname":"net.sourceforge.ganttproject.parser.ParsingContext", "sourcecode":"public void setTaskID(int id) {\r\n    myTaskID = id;\r\n}"},
 {"id":3671, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.ParsingListener.parsingFinished()", "ownerclassid":"477", "ownerclassname":"net.sourceforge.ganttproject.parser.ParsingListener", "sourcecode":"public void parsingFinished();"},
 {"id":3672, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.ParsingListener.parsingStarted()", "ownerclassid":"477", "ownerclassname":"net.sourceforge.ganttproject.parser.ParsingListener", "sourcecode":"public void parsingStarted();"},
 {"id":3673, "name":"-init-(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler.-init-(java.util.List)", "ownerclassid":"478", "ownerclassname":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler", "sourcecode":"public PreviousStateTasksTagHandler(List previousStates) {\r\n    myPreviousStates = previousStates;\r\n}"},
 {"id":3674, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"478", "ownerclassname":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n    if ((qName.equals(\"previous-tasks\")) && ((myPreviousStates) != null)) {\r\n        previousState.saveFilesFromLoaded(tasks);\r\n    }\r\n}"},
 {"id":3675, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler.getName()", "ownerclassid":"478", "ownerclassname":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler", "sourcecode":"public String getName() {\r\n    return myName;\r\n}"},
 {"id":3676, "name":"getTasks()", "fullmethod":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler.getTasks()", "ownerclassid":"478", "ownerclassname":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler", "sourcecode":"public ArrayList getTasks() {\r\n    return tasks;\r\n}"},
 {"id":3677, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler.setName(java.lang.String)", "ownerclassid":"478", "ownerclassname":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler", "sourcecode":"private void setName(String name) {\r\n    myName = name;\r\n}"},
 {"id":3678, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"478", "ownerclassname":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    if (qName.equals(\"previous-tasks\")) {\r\n        setName(attrs.getValue(\"name\"));\r\n        tasks = new ArrayList();\r\n        if ((myPreviousStates) != null) {\r\n            try {\r\n                previousState = new GanttPreviousState(myName);\r\n                myPreviousStates.add(previousState);\r\n            } catch (IOException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            }\r\n        }\r\n    } else\r\n        if (qName.equals(\"previous-task\")) {\r\n            // && (myPreviousStates\r\n            // != null)) {\r\n            writePreviousTask(attrs);\r\n        }\r\n\r\n}"},
 {"id":3679, "name":"writePreviousTask(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler.writePreviousTask(org.xml.sax.Attributes)", "ownerclassid":"478", "ownerclassname":"net.sourceforge.ganttproject.parser.PreviousStateTasksTagHandler", "sourcecode":"private void writePreviousTask(Attributes attrs) {\r\n    String id = attrs.getValue(\"id\");\r\n    String meetingAsString = attrs.getValue(\"meeting\");\r\n    boolean meeting = false;\r\n    if (meetingAsString.equals(\"true\"))\r\n        meeting = true;\r\n\r\n    String start = attrs.getValue(\"start\");\r\n    String duration = attrs.getValue(\"duration\");\r\n    String nestedAsString = attrs.getValue(\"super\");\r\n    boolean nested = false;\r\n    if (nestedAsString.equals(\"true\"))\r\n        nested = true;\r\n\r\n    GanttPreviousStateTask task = new GanttPreviousStateTask(new Integer(id).intValue(), GanttCalendar.parseXMLDate(start), new Integer(duration).intValue(), meeting, nested);\r\n    tasks.add(task);\r\n}"},
 {"id":3680, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.CustomPropertyManager)", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.CustomPropertyManager)", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"public ResourceTagHandler(ResourceManager resourceManager, RoleManager roleManager, CustomPropertyManager resourceCustomPropertyManager) {\r\n    myResourceManager = ((HumanResourceManager) (resourceManager));\r\n    myCustomPropertyManager = resourceCustomPropertyManager;\r\n    // myResourceManager.clear(); //CleanUP the old stuff\r\n    myRoleManager = roleManager;\r\n}"},
 {"id":3681, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#endElement(String,\r\nString, String)\r\n */\r\npublic void endElement(String namespaceURI, String sName, String qName) {\r\n}"},
 {"id":3682, "name":"findRole(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.findRole(java.lang.String)", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"// private GanttPeoplePanel myPeople;\r\nprivate Role findRole(String persistentIDasString) {\r\n    // \r\n    RolePersistentID persistentID = new RolePersistentID(persistentIDasString);\r\n    String rolesetName = persistentID.getRoleSetID();\r\n    int roleID = persistentID.getRoleID();\r\n    RoleSet roleSet;\r\n    if (rolesetName == null) {\r\n        roleSet = myRoleManager.getProjectRoleSet();\r\n        if ((roleSet.findRole(roleID)) == null) {\r\n            if ((roleID <= 10) && (roleID > 2)) {\r\n                roleSet = myRoleManager.getRoleSet(RoleSet.SOFTWARE_DEVELOPMENT);\r\n                roleSet.setEnabled(true);\r\n            } else\r\n                if (roleID <= 2) {\r\n                    roleSet = myRoleManager.getRoleSet(RoleSet.DEFAULT);\r\n                }\r\n\r\n        }\r\n    } else {\r\n        roleSet = myRoleManager.getRoleSet(rolesetName);\r\n    }\r\n    Role result = roleSet.findRole(roleID);\r\n    return result;\r\n}"},
 {"id":3683, "name":"getResourceManager()", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.getResourceManager()", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"private HumanResourceManager getResourceManager() {\r\n    return myResourceManager;\r\n}"},
 {"id":3684, "name":"loadCustomProperty(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.loadCustomProperty(org.xml.sax.Attributes)", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"private void loadCustomProperty(Attributes attrs) {\r\n    String id = attrs.getValue(\"definition-id\");\r\n    String value = attrs.getValue(\"value\");\r\n    List definitions = myCustomPropertyManager.getDefinitions();\r\n    for (int i = 0; i < (definitions.size()); i++) {\r\n        CustomPropertyDefinition nextDefinition = ((CustomPropertyDefinition) (definitions.get(i)));\r\n        if (id.equals(nextDefinition.getID())) {\r\n            myCurrentResource.addCustomProperty(nextDefinition, value);\r\n            break;\r\n        }\r\n    }\r\n}"},
 {"id":3685, "name":"loadCustomPropertyDefinition(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.loadCustomPropertyDefinition(org.xml.sax.Attributes)", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"private void loadCustomPropertyDefinition(Attributes attrs) {\r\n    String id = attrs.getValue(\"id\");\r\n    String name = attrs.getValue(\"name\");\r\n    String type = attrs.getValue(\"type\");\r\n    String defaultValue = attrs.getValue(\"default-value\");\r\n    myCustomPropertyManager.createDefinition(id, type, name, defaultValue);\r\n}"},
 {"id":3686, "name":"loadResource(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.loadResource(org.xml.sax.Attributes)", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"/**\r\n * Las a resources\r\n */\r\nprivate void loadResource(Attributes atts) {\r\n    final HumanResource hr;\r\n    try {\r\n        String id = atts.getValue(\"id\");\r\n        if (id == null) {\r\n            hr = getResourceManager().newHumanResource();\r\n            hr.setName(atts.getValue(\"name\"));\r\n            getResourceManager().add(hr);\r\n        } else {\r\n            hr = ((HumanResource) (getResourceManager().create(atts.getValue(\"name\"), Integer.parseInt(id))));\r\n        }\r\n        myCurrentResource = hr;\r\n    } catch (NumberFormatException e) {\r\n        System.out.println((\"ERROR in parsing XML File id is not numeric: \" + (e.toString())));\r\n        return;\r\n    }\r\n    hr.setMail(atts.getValue(\"contacts\"));\r\n    hr.setPhone(atts.getValue(\"phone\"));\r\n    try {\r\n        String roleID = atts.getValue(\"function\");\r\n        myLateResource2roleBinding.put(hr, roleID);\r\n        // hr.setFunction(Integer.parseInt());\r\n    } catch (NumberFormatException e) {\r\n        System.out.println((\"ERROR in parsing XML File function id is not numeric: \" + (e.toString())));\r\n    }\r\n}"},
 {"id":3687, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.parsingFinished()", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"public void parsingFinished() {\r\n    // System.err.println(\"[ResourceTagHandler] parsingFinished():\");\r\n    for (Iterator lateBindingEntries = myLateResource2roleBinding.entrySet().iterator(); lateBindingEntries.hasNext();) {\r\n        Map.Entry nextEntry = ((Map.Entry) (lateBindingEntries.next()));\r\n        String persistentID = ((String) (nextEntry.getValue()));\r\n        Role nextRole = findRole(persistentID);\r\n        if (nextRole != null) {\r\n            lateBindingEntries.remove();\r\n            ((HumanResource) (nextEntry.getKey())).setRole(nextRole);\r\n        }\r\n    }\r\n    if (!(myLateResource2roleBinding.isEmpty())) {\r\n        System.err.println((\"[ResourceTagHandler] parsingFinished(): not found roles:\n\" + (myLateResource2roleBinding)));\r\n    }\r\n}"},
 {"id":3688, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.parsingStarted()", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"public void parsingStarted() {\r\n}"},
 {"id":3689, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.ResourceTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"479", "ownerclassname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#startElement(String,\r\nString, String, Attributes)\r\n */\r\npublic void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    if (qName.equals(\"resource\")) {\r\n        loadResource(attrs);\r\n    }\r\n    if (\"custom-property\".equals(qName)) {\r\n        assert (myCurrentResource) != null;\r\n        loadCustomProperty(attrs);\r\n    }\r\n    if (\"custom-property-definition\".equals(qName)) {\r\n        loadCustomPropertyDefinition(attrs);\r\n    }\r\n}"},
 {"id":3690, "name":"-init-(net.sourceforge.ganttproject.roles.RoleManager)", "fullmethod":"net.sourceforge.ganttproject.parser.RoleTagHandler.-init-(net.sourceforge.ganttproject.roles.RoleManager)", "ownerclassid":"480", "ownerclassname":"net.sourceforge.ganttproject.parser.RoleTagHandler", "sourcecode":"public RoleTagHandler(RoleManager roleManager) {\r\n    myRoleManager = roleManager;\r\n    myRoleManager.clear();// CleanUP the old stuff\r\n\r\n}"},
 {"id":3691, "name":"clearRoleSet()", "fullmethod":"net.sourceforge.ganttproject.parser.RoleTagHandler.clearRoleSet()", "ownerclassid":"480", "ownerclassname":"net.sourceforge.ganttproject.parser.RoleTagHandler", "sourcecode":"private void clearRoleSet() {\r\n    myRoleSet = null;\r\n}"},
 {"id":3692, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.RoleTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"480", "ownerclassname":"net.sourceforge.ganttproject.parser.RoleTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#endElement(String,\r\nString, String)\r\n */\r\npublic void endElement(String namespaceURI, String sName, String qName) {\r\n    if (qName.equals(\"roles\")) {\r\n        clearRoleSet();\r\n    }\r\n}"},
 {"id":3693, "name":"findRoleSet(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.RoleTagHandler.findRoleSet(java.lang.String)", "ownerclassid":"480", "ownerclassname":"net.sourceforge.ganttproject.parser.RoleTagHandler", "sourcecode":"private void findRoleSet(String roleSetName) {\r\n    if (roleSetName == null) {\r\n        myRoleSet = myRoleManager.getProjectRoleSet();\r\n    } else {\r\n        myRoleSet = myRoleManager.getRoleSet(roleSetName);\r\n        if ((myRoleSet) == null) {\r\n            myRoleSet = myRoleManager.createRoleSet(roleSetName);\r\n        }\r\n        myRoleSet.setEnabled(true);\r\n    }\r\n}"},
 {"id":3694, "name":"getRoleManager()", "fullmethod":"net.sourceforge.ganttproject.parser.RoleTagHandler.getRoleManager()", "ownerclassid":"480", "ownerclassname":"net.sourceforge.ganttproject.parser.RoleTagHandler", "sourcecode":"private RoleManager getRoleManager() {\r\n    return myRoleManager;\r\n}"},
 {"id":3695, "name":"loadRoles(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.RoleTagHandler.loadRoles(org.xml.sax.Attributes)", "ownerclassid":"480", "ownerclassname":"net.sourceforge.ganttproject.parser.RoleTagHandler", "sourcecode":"/**\r\n * Las a role\r\n */\r\nprivate void loadRoles(Attributes atts) {\r\n    String roleName = atts.getValue(\"name\");\r\n    RolePersistentID persistentID = new RolePersistentID(atts.getValue(\"id\"));\r\n    Role existingRole = myRoleSet.findRole(persistentID.getRoleID());\r\n    if (existingRole == null) {\r\n        myRoleSet.createRole(roleName, persistentID.getRoleID());\r\n    }\r\n}"},
 {"id":3696, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.RoleTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"480", "ownerclassname":"net.sourceforge.ganttproject.parser.RoleTagHandler", "sourcecode":"/**\r\n *\r\n *\r\n * @see net.sourceforge.ganttproject.parser.TagHandler#startElement(String,\r\nString, String, Attributes)\r\n */\r\npublic void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    if (qName.equals(\"roles\")) {\r\n        findRoleSet(attrs.getValue(\"roleset-name\"));\r\n    } else\r\n        if (qName.equals(\"role\")) {\r\n            loadRoles(attrs);\r\n        }\r\n\r\n}"},
 {"id":3697, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.TagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"481", "ownerclassname":"net.sourceforge.ganttproject.parser.TagHandler", "sourcecode":"/**\r\n * Method when finish to parse an attibute\r\n */\r\npublic void endElement(String namespaceURI, String sName, String qName);"},
 {"id":3698, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.TagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"481", "ownerclassname":"net.sourceforge.ganttproject.parser.TagHandler", "sourcecode":"/**\r\n * Method when start to parse an attibute\r\n */\r\npublic void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException;"},
 {"id":3699, "name":"-init-(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.-init-(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"public TaskDisplayColumnsTagHandler(TableHeaderUIFacade visibleFields) {\r\n    this(visibleFields, \"displaycolumn\", \"property-id\", \"order\", \"width\");\r\n}"},
 {"id":3700, "name":"-init-(net.sourceforge.ganttproject.gui.TableHeaderUIFacade,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.-init-(net.sourceforge.ganttproject.gui.TableHeaderUIFacade,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"public TaskDisplayColumnsTagHandler(TableHeaderUIFacade visibleFields, String tagName, String idPropertyName, String orderPropertyName, String widthPropertyName) {\r\n    myVisibleFields = visibleFields;\r\n    myTagName = tagName;\r\n    myIDPropertyName = idPropertyName;\r\n    myOrderPropertyName = orderPropertyName;\r\n    myWidthPropertyName = widthPropertyName;\r\n}"},
 {"id":3701, "name":"-init-(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.-init-(java.lang.String,int,int)", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"TaskFieldImpl(String id, int order, int width) {\r\n    myID = id;\r\n    myOrder = order;\r\n    myWidth = width;\r\n}"},
 {"id":3702, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.-init-()", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"VisibleFieldsImpl() {\r\n}"},
 {"id":3703, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3704, "name":"loadTaskDisplay(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.loadTaskDisplay(org.xml.sax.Attributes)", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"private void loadTaskDisplay(Attributes atts) {\r\n    String id = atts.getValue(myIDPropertyName);\r\n    String orderStr = atts.getValue(myOrderPropertyName);\r\n    if (orderStr == null) {\r\n        orderStr = String.valueOf(myBuffer.getSize());\r\n    }\r\n    String widthStr = atts.getValue(myWidthPropertyName);\r\n    int order = Integer.parseInt(orderStr);\r\n    int width = (widthStr == null) ? -1 : Integer.parseInt(widthStr);\r\n    myBuffer.add(id, order, width);\r\n}"},
 {"id":3705, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.parsingFinished()", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"public void parsingFinished() {\r\n    myVisibleFields.importData(myBuffer);\r\n}"},
 {"id":3706, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.parsingStarted()", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"public void parsingStarted() {\r\n    myVisibleFields.clear();\r\n}"},
 {"id":3707, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"484", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    if (qName.equals(myTagName))\r\n        loadTaskDisplay(attrs);\r\n\r\n}"},
 {"id":3708, "name":"-init-(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl.-init-(java.lang.String,int,int)", "ownerclassid":"482", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl", "sourcecode":"TaskFieldImpl(String id, int order, int width) {\r\n    myID = id;\r\n    myOrder = order;\r\n    myWidth = width;\r\n}"},
 {"id":3709, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl.getID()", "ownerclassid":"482", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl", "sourcecode":"public String getID() {\r\n    return myID;\r\n}"},
 {"id":3710, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl.getName()", "ownerclassid":"482", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl", "sourcecode":"public String getName() {\r\n    return null;\r\n}"},
 {"id":3711, "name":"getOrder()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl.getOrder()", "ownerclassid":"482", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl", "sourcecode":"public int getOrder() {\r\n    return myOrder;\r\n}"},
 {"id":3712, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl.getWidth()", "ownerclassid":"482", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl", "sourcecode":"public int getWidth() {\r\n    return myWidth;\r\n}"},
 {"id":3713, "name":"isVisible()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl.isVisible()", "ownerclassid":"482", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$TaskFieldImpl", "sourcecode":"public boolean isVisible() {\r\n    return true;\r\n}"},
 {"id":3714, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl.-init-()", "ownerclassid":"483", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl", "sourcecode":"VisibleFieldsImpl() {\r\n}"},
 {"id":3715, "name":"add(java.lang.String,int,int)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl.add(java.lang.String,int,int)", "ownerclassid":"483", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl", "sourcecode":"public void add(String name, int order, int width) {\r\n    myFields.add(new TaskDisplayColumnsTagHandler.TaskFieldImpl(name, order, width));\r\n}"},
 {"id":3716, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl.clear()", "ownerclassid":"483", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl", "sourcecode":"public void clear() {\r\n    myFields.clear();\r\n}"},
 {"id":3717, "name":"getField(int)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl.getField(int)", "ownerclassid":"483", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl", "sourcecode":"public TableHeaderUIFacade.Column getField(int index) {\r\n    return ((TableHeaderUIFacade.Column) (myFields.get(index)));\r\n}"},
 {"id":3718, "name":"getSize()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl.getSize()", "ownerclassid":"483", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl", "sourcecode":"public int getSize() {\r\n    return myFields.size();\r\n}"},
 {"id":3719, "name":"importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "ownerclassid":"483", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl", "sourcecode":"public void importData(TableHeaderUIFacade source) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":3720, "name":"-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"485", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler", "sourcecode":"public TaskPropertiesTagHandler(CustomColumnsStorage columnStorage) {\r\n    myColumnStorage = columnStorage;\r\n}"},
 {"id":3721, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"485", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n}"},
 {"id":3722, "name":"loadTaskProperty(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler.loadTaskProperty(org.xml.sax.Attributes)", "ownerclassid":"485", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler", "sourcecode":"private void loadTaskProperty(Attributes atts) {\r\n    String name = atts.getValue(\"name\");\r\n    String id = atts.getValue(\"id\");\r\n    String type = atts.getValue(\"valuetype\");\r\n    if (atts.getValue(\"type\").equals(\"custom\")) {\r\n        CustomColumn cc;\r\n        String valueStr = atts.getValue(\"defaultvalue\");\r\n        CustomPropertyDefinition stubDefinition = net.sourceforge.ganttproject.CustomPropertyManager.PropertyTypeEncoder.decodeTypeAndDefaultValue(type, valueStr);\r\n        cc = new CustomColumn(name, stubDefinition.getType(), stubDefinition.getDefaultValue());\r\n        cc.setId(id);\r\n        myColumnStorage.addCustomColumn(cc);\r\n    }\r\n}"},
 {"id":3723, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler.parsingFinished()", "ownerclassid":"485", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler", "sourcecode":"public void parsingFinished() {\r\n}"},
 {"id":3724, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler.parsingStarted()", "ownerclassid":"485", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler", "sourcecode":"public void parsingStarted() {\r\n}"},
 {"id":3725, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"485", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    if (qName.equals(\"taskproperty\"))\r\n        loadTaskProperty(attrs);\r\n\r\n}"},
 {"id":3726, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.parser.ParsingContext)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskTagHandler.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.parser.ParsingContext)", "ownerclassid":"486", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskTagHandler", "sourcecode":"public TaskTagHandler(TaskManager mgr, ParsingContext context) {\r\n    myManager = mgr;\r\n    myContext = context;\r\n}"},
 {"id":3727, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"486", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskTagHandler", "sourcecode":"/**\r\n * Method when finish to parse an attibute\r\n */\r\npublic void endElement(String namespaceURI, String sName, String qName) {\r\n    if (qName.equals(\"task\")) {\r\n        myStack.pop();\r\n    }\r\n}"},
 {"id":3728, "name":"getManager()", "fullmethod":"net.sourceforge.ganttproject.parser.TaskTagHandler.getManager()", "ownerclassid":"486", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskTagHandler", "sourcecode":"private TaskManager getManager() {\r\n    return myManager;\r\n}"},
 {"id":3729, "name":"loadTask(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskTagHandler.loadTask(org.xml.sax.Attributes)", "ownerclassid":"486", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskTagHandler", "sourcecode":"private void loadTask(Attributes attrs) {\r\n    String taskIdAsString = attrs.getValue(\"id\");\r\n    GanttTask task = null;\r\n    if (taskIdAsString == null) {\r\n        task = getManager().createTask();\r\n    } else {\r\n        int taskId;\r\n        try {\r\n            taskId = Integer.parseInt(taskIdAsString);\r\n        } catch (NumberFormatException e) {\r\n            throw new RuntimeException(((\"Failed to parse the value \" + taskIdAsString) + \" of attribute id of tag <task>\"), e);\r\n        }\r\n        task = getManager().createTask(taskId);\r\n    }\r\n    // \r\n    String taskName = attrs.getValue(\"name\");\r\n    if (taskName != null) {\r\n        task.setName(taskName);\r\n    }\r\n    String meeting = attrs.getValue(\"meeting\");\r\n    if (meeting != null) {\r\n        task.setMilestone(meeting.equals(\"true\"));\r\n    }\r\n    String project = attrs.getValue(\"project\");\r\n    if (project != null)\r\n        task.setProjectTask(true);\r\n\r\n    String start = attrs.getValue(\"start\");\r\n    if (start != null) {\r\n        task.setStart(GanttCalendar.parseXMLDate(start));\r\n    }\r\n    String duration = attrs.getValue(\"duration\");\r\n    if (duration != null) {\r\n        try {\r\n            int length = Integer.parseInt(duration);\r\n            if (length == 0) {\r\n                length = 1;\r\n            }\r\n            task.setLength(length);\r\n        } catch (NumberFormatException e) {\r\n            throw new RuntimeException(((\"Failed to parse the value \" + duration) + \" of attribute duration of tag <task>\"), e);\r\n        }\r\n    }\r\n    String complete = attrs.getValue(\"complete\");\r\n    if (complete != null) {\r\n        try {\r\n            task.setCompletionPercentage(Integer.parseInt(complete));\r\n        } catch (NumberFormatException e) {\r\n            throw new RuntimeException(((\"Failed to parse the value \" + complete) + \" of attribute complete of tag <task>\"), e);\r\n        }\r\n    }\r\n    String priority = attrs.getValue(\"priority\");\r\n    if (priority != null) {\r\n        try {\r\n            task.setPriority(Integer.parseInt(priority));\r\n        } catch (NumberFormatException e) {\r\n            throw new RuntimeException(((\"Failed to parse the value \" + priority) + \" of attribute priority of tag <task>\"), e);\r\n        }\r\n    }\r\n    String color = attrs.getValue(\"color\");\r\n    if (color != null) {\r\n        task.setColor(ColorValueParser.parseString(color));\r\n    }\r\n    String fixedStart = attrs.getValue(\"fixed-start\");\r\n    if (\"true\".equals(fixedStart)) {\r\n        myContext.addTaskWithLegacyFixedStart(task);\r\n    }\r\n    // String fixedFinish = attrs.getValue(\"fixed-finish\");\r\n    // if (\"true\".equals(fixedFinish)) {\r\n    // task.setFinishFixed(true);\r\n    // }\r\n    String third = attrs.getValue(\"thirdDate\");\r\n    if (third != null) {\r\n        task.setThirdDate(GanttCalendar.parseXMLDate(third));\r\n    }\r\n    String thirdConstraint = attrs.getValue(\"thirdDate-constraint\");\r\n    if (thirdConstraint != null) {\r\n        try {\r\n            task.setThirdDateConstraint(Integer.parseInt(thirdConstraint));\r\n        } catch (NumberFormatException e) {\r\n            throw new RuntimeException(((\"Failed to parse the value \" + thirdConstraint) + \" of attribute thirdDate-constraint of tag <task>\"), e);\r\n        }\r\n    }\r\n    String webLink_enc = attrs.getValue(\"webLink\");\r\n    String webLink = webLink_enc;\r\n    if (webLink_enc != null)\r\n        try {\r\n            webLink = URLDecoder.decode(webLink_enc, \"ISO-8859-1\");\r\n        } catch (UnsupportedEncodingException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n\r\n    if (webLink != null) {\r\n        task.setWebLink(webLink);\r\n    }\r\n    String expand = attrs.getValue(\"expand\");\r\n    if (expand != null) {\r\n        task.setExpand(\"true\".equals(expand));\r\n    }\r\n    String shape = attrs.getValue(\"shape\");\r\n    if (shape != null) {\r\n        StringTokenizer st1 = new StringTokenizer(shape, \",\");\r\n        int[] array = new int[]{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\r\n        String token = \"\";\r\n        int count = 0;\r\n        while (st1.hasMoreTokens()) {\r\n            token = st1.nextToken();\r\n            array[count] = new Integer(token).intValue();\r\n            count++;\r\n        } \r\n        task.setShape(new ShapePaint(4, 4, array, Color.white, task.getColor()));\r\n    }\r\n    getManager().registerTask(task);\r\n    TaskContainmentHierarchyFacade taskHierarchy = getManager().getTaskHierarchy();\r\n    myContext.setTaskID(task.getTaskID());\r\n    Task lastTask = (myStack.isEmpty()) ? taskHierarchy.getRootTask() : ((Task) (myStack.peek()));\r\n    taskHierarchy.move(task, lastTask);\r\n    myStack.push(task);\r\n}"},
 {"id":3730, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.TaskTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"486", "ownerclassname":"net.sourceforge.ganttproject.parser.TaskTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    if (qName.equals(\"task\")) {\r\n        loadTask(attrs);\r\n    }\r\n}"},
 {"id":3731, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager)", "fullmethod":"net.sourceforge.ganttproject.parser.VacationTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager)", "ownerclassid":"487", "ownerclassname":"net.sourceforge.ganttproject.parser.VacationTagHandler", "sourcecode":"public VacationTagHandler(ResourceManager resourceManager) {\r\n    myResourceManager = ((HumanResourceManager) (resourceManager));\r\n}"},
 {"id":3732, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.VacationTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"487", "ownerclassname":"net.sourceforge.ganttproject.parser.VacationTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3733, "name":"loadResource(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.VacationTagHandler.loadResource(org.xml.sax.Attributes)", "ownerclassid":"487", "ownerclassname":"net.sourceforge.ganttproject.parser.VacationTagHandler", "sourcecode":"private void loadResource(Attributes atts) {\r\n    try {\r\n        // <vacation start=\"2005-04-14\" end=\"2005-04-14\" resourceid=\"0\"/>\r\n        // GanttCalendar.parseXMLDate(attrs.getValue(i)).getTime()\r\n        String startAsString = atts.getValue(\"start\");\r\n        String endAsString = atts.getValue(\"end\");\r\n        String resourceIdAsString = atts.getValue(\"resourceid\");\r\n        HumanResource hr;\r\n        hr = ((HumanResource) (myResourceManager.getById(Integer.parseInt(resourceIdAsString))));\r\n        hr.addDaysOff(new GanttDaysOff(GanttCalendar.parseXMLDate(startAsString), GanttCalendar.parseXMLDate(endAsString)));\r\n    } catch (NumberFormatException e) {\r\n        System.out.println((\"ERROR in parsing XML File year is not numeric: \" + (e.toString())));\r\n        return;\r\n    }\r\n}"},
 {"id":3734, "name":"parsingFinished()", "fullmethod":"net.sourceforge.ganttproject.parser.VacationTagHandler.parsingFinished()", "ownerclassid":"487", "ownerclassname":"net.sourceforge.ganttproject.parser.VacationTagHandler", "sourcecode":"public void parsingFinished() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3735, "name":"parsingStarted()", "fullmethod":"net.sourceforge.ganttproject.parser.VacationTagHandler.parsingStarted()", "ownerclassid":"487", "ownerclassname":"net.sourceforge.ganttproject.parser.VacationTagHandler", "sourcecode":"public void parsingStarted() {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3736, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.VacationTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"487", "ownerclassname":"net.sourceforge.ganttproject.parser.VacationTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) {\r\n    if (qName.equals(\"vacation\")) {\r\n        loadResource(attrs);\r\n    }\r\n}"},
 {"id":3737, "name":"-init-(net.sourceforge.ganttproject.gui.UIFacade)", "fullmethod":"net.sourceforge.ganttproject.parser.ViewTagHandler.-init-(net.sourceforge.ganttproject.gui.UIFacade)", "ownerclassid":"488", "ownerclassname":"net.sourceforge.ganttproject.parser.ViewTagHandler", "sourcecode":"public ViewTagHandler(UIFacade uiFacade) {\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":3738, "name":"endElement(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.parser.ViewTagHandler.endElement(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"488", "ownerclassname":"net.sourceforge.ganttproject.parser.ViewTagHandler", "sourcecode":"public void endElement(String namespaceURI, String sName, String qName) {\r\n}"},
 {"id":3739, "name":"loadViewState(org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.ViewTagHandler.loadViewState(org.xml.sax.Attributes)", "ownerclassid":"488", "ownerclassname":"net.sourceforge.ganttproject.parser.ViewTagHandler", "sourcecode":"private void loadViewState(Attributes attrs) {\r\n    myUIFacade.getZoomManager().setZoomState(attrs.getValue(\"zooming-state\"));\r\n}"},
 {"id":3740, "name":"startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "fullmethod":"net.sourceforge.ganttproject.parser.ViewTagHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)", "ownerclassid":"488", "ownerclassname":"net.sourceforge.ganttproject.parser.ViewTagHandler", "sourcecode":"public void startElement(String namespaceURI, String sName, String qName, Attributes attrs) throws FileFormatException {\r\n    if (\"view\".equals(qName)) {\r\n        loadViewState(attrs);\r\n    }\r\n}"},
 {"id":3741, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.plugins.PluginManager.-init-()", "ownerclassid":"489", "ownerclassname":"net.sourceforge.ganttproject.plugins.PluginManager", "sourcecode":"PluginManager() {\r\n}"},
 {"id":3742, "name":"getCharts()", "fullmethod":"net.sourceforge.ganttproject.plugins.PluginManager.getCharts()", "ownerclassid":"489", "ownerclassname":"net.sourceforge.ganttproject.plugins.PluginManager", "sourcecode":"public Chart[] getCharts() {\r\n    if ((myCharts) == null) {\r\n        myCharts = ((Chart[]) (getExtensions(PluginManager.EXTENSION_POINT_ID_CHART, Chart.class)));\r\n    }\r\n    return myCharts;\r\n}"},
 {"id":3743, "name":"getExporters()", "fullmethod":"net.sourceforge.ganttproject.plugins.PluginManager.getExporters()", "ownerclassid":"489", "ownerclassname":"net.sourceforge.ganttproject.plugins.PluginManager", "sourcecode":"public Exporter[] getExporters() {\r\n    if ((myExporters) == null) {\r\n        myExporters = ((Exporter[]) (getExtensions(PluginManager.EXTENSION_POINT_ID_EXPORTER, Exporter.class)));\r\n    }\r\n    return myExporters;\r\n}"},
 {"id":3744, "name":"getExtensions(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.plugins.PluginManager.getExtensions(java.lang.Class)", "ownerclassid":"489", "ownerclassname":"net.sourceforge.ganttproject.plugins.PluginManager", "sourcecode":"public Object[] getExtensions(Class extensionPointInterface) {\r\n    String extensionPointID = extensionPointInterface.getName();\r\n    return getExtensions(extensionPointID, extensionPointInterface);\r\n}"},
 {"id":3745, "name":"getExtensions(java.lang.String,java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.plugins.PluginManager.getExtensions(java.lang.String,java.lang.Class)", "ownerclassid":"489", "ownerclassname":"net.sourceforge.ganttproject.plugins.PluginManager", "sourcecode":"public Object[] getExtensions(String extensionPointID, Class extensionPointInterface) {\r\n    IExtensionRegistry extensionRegistry = Platform.getExtensionRegistry();\r\n    IConfigurationElement[] configElements = extensionRegistry.getConfigurationElementsFor(extensionPointID);\r\n    ArrayList extensions = new ArrayList();\r\n    for (int i = 0; i < (configElements.length); i++) {\r\n        try {\r\n            Object nextExtension = configElements[i].createExecutableExtension(\"class\");\r\n            assert (nextExtension != null) && (extensionPointInterface.isAssignableFrom(nextExtension.getClass()));\r\n            extensions.add(nextExtension);\r\n        } catch (CoreException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    }\r\n    return extensions.toArray(((Object[]) (Array.newInstance(extensionPointInterface, 0))));\r\n}"},
 {"id":3746, "name":"-init-(java.awt.image.BufferedImage,double)", "fullmethod":"net.sourceforge.ganttproject.print.GanttPrintable.-init-(java.awt.image.BufferedImage,double)", "ownerclassid":"490", "ownerclassname":"net.sourceforge.ganttproject.print.GanttPrintable", "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param reduceFactor\r\n * \t\tTODO\r\n */\r\npublic GanttPrintable(BufferedImage image, double reduceFactor) {\r\n    super();\r\n    this.image = image;\r\n    this.x = this.y = 0;\r\n    this.reduceFactor = (reduceFactor < 1.0) ? GanttPrintable.REDUCE_FACTOR_DEFAULT : reduceFactor;\r\n}"},
 {"id":3747, "name":"print(java.awt.Graphics,java.awt.print.PageFormat,int)", "fullmethod":"net.sourceforge.ganttproject.print.GanttPrintable.print(java.awt.Graphics,java.awt.print.PageFormat,int)", "ownerclassid":"490", "ownerclassname":"net.sourceforge.ganttproject.print.GanttPrintable", "sourcecode":"/**\r\n * Print the page\r\n */\r\npublic int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\r\n    System.out.println(this.reduceFactor);\r\n    // search for the best possition of the x, y coordinates\r\n    // int i,j=0;\r\n    // int cpt=0;\r\n    // while(j<image.getHeight()) {\r\n    // i=0;\r\n    // while(i<image.getWidth()) {\r\n    // \r\n    // if(cpt==pageIndex) {\r\n    // x=i;\r\n    // y=j;\r\n    // }\r\n    // i+=(int) pageFormat.getImageableWidth();\r\n    // cpt++;\r\n    // }\r\n    // j+=(int) pageFormat.getImageableHeight();\r\n    // }\r\n    // \r\n    // if(cpt<=pageIndex) return Printable.NO_SUCH_PAGE;\r\n    // \r\n    // if(x>image.getWidth())x=0;\r\n    // if(y>image.getHeight())return Printable.NO_SUCH_PAGE;\r\n    // \r\n    // \r\n    System.err.println((((\"[GanttPrintable] print(): image: w=\" + (image.getWidth())) + \" h=\") + (image.getHeight())));\r\n    System.err.println((\"[GanttPrintable] print(): page=\" + pageIndex));\r\n    int pagesPerRow = ((int) ((((image.getWidth()) / (reduceFactor)) / (pageFormat.getImageableWidth())) + 1));\r\n    int numRows = ((int) ((((image.getHeight()) / (reduceFactor)) / (pageFormat.getImageableHeight())) + 1));\r\n    System.err.println((((\"[GanttPrintable] print(): numrows=\" + numRows) + \" pagesPerRow=\") + pagesPerRow));\r\n    int totalPages = pagesPerRow * numRows;\r\n    if (pageIndex >= totalPages) {\r\n        return Printable.NO_SUCH_PAGE;\r\n    }\r\n    // \r\n    int currentRow = pageIndex / pagesPerRow;\r\n    int currentColumn = pageIndex - (currentRow * pagesPerRow);\r\n    System.err.println((((\"[GanttPrintable] print(): curentpage=\" + currentColumn) + \" current row=\") + currentRow));\r\n    // \r\n    int leftx = ((int) ((currentColumn * (pageFormat.getImageableWidth())) * (reduceFactor)));\r\n    int topy = ((int) ((currentRow * (pageFormat.getImageableHeight())) * (reduceFactor)));\r\n    System.err.println((((\"[GanttPrintable] print(): leftx=\" + leftx) + \" topy=\") + topy));\r\n    // \r\n    int height = ((int) (((currentRow + 1) < numRows) ? (pageFormat.getImageableHeight()) * (reduceFactor) : (image.getHeight()) - (((pageFormat.getImageableHeight()) * (reduceFactor)) * (numRows - 1))));\r\n    int width = ((int) (((currentColumn + 1) < pagesPerRow) ? (pageFormat.getImageableWidth()) * (reduceFactor) : (image.getWidth()) - (((pageFormat.getImageableWidth()) * (reduceFactor)) * (pagesPerRow - 1))));\r\n    // \r\n    System.err.println((((\"[GanttPrintable] print(): height=\" + height) + \" width=\") + width));\r\n    Graphics2D g2d = ((Graphics2D) (graphics));\r\n    g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\r\n    BufferedImage subimage = image.getSubimage(leftx, topy, width, height);\r\n    int h = ((int) ((subimage.getHeight()) / (reduceFactor)));\r\n    int w = ((int) ((subimage.getWidth()) / (reduceFactor)));\r\n    g2d.drawImage(subimage, 0, 0, w, h, null);\r\n    // int imgw = (int)pageFormat.getImageableWidth();\r\n    // int imgh = (int)pageFormat.getImageableHeight();\r\n    // \r\n    // int width=imgw+x<image.getWidth()?imgw:image.getWidth()-x;\r\n    // int height=imgh+y<image.getHeight()?imgh:image.getHeight()-y;\r\n    // \r\n    // g2d.drawImage(image.getSubimage(x,y,width,height),0,0,null);\r\n    // \r\n    // \r\n    // \r\n    return Printable.PAGE_EXISTS;\r\n}"},
 {"id":3748, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.print.PrintManager.-init-()", "ownerclassid":"491", "ownerclassname":"net.sourceforge.ganttproject.print.PrintManager", "sourcecode":"PrintManager() {\r\n}"},
 {"id":3749, "name":"printChart(net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings)", "fullmethod":"net.sourceforge.ganttproject.print.PrintManager.printChart(net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings)", "ownerclassid":"491", "ownerclassname":"net.sourceforge.ganttproject.print.PrintManager", "sourcecode":"public static void printChart(Chart chart, GanttExportSettings settings) {\r\n    BufferedImage image = chart.getChart(settings);\r\n    PrinterJob printJob = PrinterJob.getPrinterJob();\r\n    printJob.setPrintable(new GanttPrintable(image, GanttPrintable.REDUCE_FACTOR_DEFAULT));\r\n    PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\r\n    attr.add(MediaSizeName.ISO_A4);\r\n    attr.add(OrientationRequested.LANDSCAPE);\r\n    if (printJob.printDialog(attr)) {\r\n        try {\r\n            printJob.print(attr);\r\n        } catch (Exception e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":3750, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.-init-(java.lang.String)", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":3751, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.chart.Chart,java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.chart.Chart,java.util.Date,java.util.Date)", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"public PrintPreview(IGanttProject project, UIFacade uifacade, Chart chart, Date start, Date end) {\r\n    super(uifacade.getMainFrame(), GanttLanguage.getInstance().getText(\"preview\"), false);\r\n    myProject = project;\r\n    myUIfacade = uifacade;\r\n    Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();\r\n    setSize(((int) ((screenDim.width) * 0.75)), ((int) ((screenDim.height) * 0.75)));\r\n    setLocationRelativeTo(null);\r\n    myChart = chart;\r\n    if (start == null) {\r\n        start = myChart.getStartDate();\r\n    }\r\n    if (end == null) {\r\n        end = myChart.getEndDate();\r\n    }\r\n    // myStartDate = start;\r\n    // myEndDate = end;\r\n    myExportSettings = new GanttExportSettings();\r\n    // myExportSettings.setOnlySelectedItem(!Mediator\r\n    // .getTaskSelectionManager().getSelectedTasks().isEmpty());\r\n    // myExportSettings.setStartDate(myStartDate);\r\n    // myExportSettings.setEndDate(myEndDate);\r\n    myPrintable = new GanttPrintable(myChart.getChart(myExportSettings), GanttPrintable.REDUCE_FACTOR_DEFAULT);\r\n    JToolBar tb = new JToolBar();\r\n    JToolBar tb2 = new JToolBar();\r\n    JButton bPrint = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/print_16.gif\")));\r\n    bPrint.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            print();\r\n        }\r\n    });\r\n    JButton bClose = bClose = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/exit_16.gif\")));\r\n    bClose.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            setVisible(false);\r\n            dispose();\r\n        }\r\n    });\r\n    final JButton bPortrait = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/portrait_16.gif\")));\r\n    final JButton bLandscape = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/landscape_16.gif\")));\r\n    bPortrait.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changePageOrientation(PageFormat.PORTRAIT);\r\n                    bLandscape.setEnabled(true);\r\n                    bPortrait.setEnabled(false);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    bLandscape.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changePageOrientation(PageFormat.LANDSCAPE);\r\n                    bLandscape.setEnabled(false);\r\n                    bPortrait.setEnabled(true);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    bLandscape.setEnabled(false);\r\n    String[] scales = new String[]{ \"10 %\", \"25 %\", \"50 %\", \"100 %\" };\r\n    myComboScale = new JComboBox(scales);\r\n    myComboScale.setSelectedIndex(2);\r\n    myComboScale.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changeScale();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    myComboScale.addItemListener(new ItemListener() {\r\n        public void itemStateChanged(ItemEvent arg0) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changeScale();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    Dimension dim = myComboScale.getPreferredSize();\r\n    dim.setSize(((dim.getWidth()) + 20), dim.getHeight());\r\n    myComboScale.setMaximumSize(dim);\r\n    myComboScale.setPreferredSize(dim);\r\n    myComboScale.setEditable(true);\r\n    boolean isDate = (start != null) && (end != null);\r\n    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/calendar_16.gif\"));\r\n    myStart.lock();\r\n    myFinish.lock();\r\n    if (isDate) {\r\n        /* myStartDateButton = new JButton(new GanttCalendar(myStartDate)\n        .toString(), icon);\n        myStartDateButton.setHorizontalTextPosition(SwingConstants.RIGHT);\n        myStartDateButton.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n        myStartDialogDate = new GanttDialogDate(new JDialog(),\n        new GanttCalendar(myStartDate), false);\n        myStartDialogDate.setVisible(true);\n        if (myStartDialogDate.getValue() == GanttDialogDate.OK) {\n        myStartDate = myStartDialogDate.getDate().getTime();\n        myStartDateButton\n        .setText(new GanttCalendar(myStartDate)\n        .toString());\n        myExportSettings.setStartDate(myStartDate);\n        updateSourceImage(myChart.getChart(myExportSettings));\n        }\n        }\n        });\n\n        myEndDateButton = new JButton(new GanttCalendar(myEndDate)\n        .toString(), icon);\n        myEndDateButton.setHorizontalTextPosition(SwingConstants.RIGHT);\n        myEndDateButton.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n        myEndDialogDate = new GanttDialogDate(new JDialog(),\n        new GanttCalendar(myEndDate), false);\n        myEndDialogDate.setVisible(true);\n        if (myEndDialogDate.getValue() == GanttDialogDate.OK) {\n        myEndDate = myEndDialogDate.getDate().getTime();\n        myEndDateButton.setText(new GanttCalendar(myEndDate)\n        .toString());\n        myExportSettings.setEndDate(myEndDate);\n        updateSourceImage(myChart.getChart(myExportSettings));\n        }\n        }\n        });\n         */\r\n        myWholeProjectButton = new JButton(PrintPreview.language.getText(\"wholeProject\"));\r\n        myWholeProjectButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                myStart.setValue(myChart.getStartDate());\r\n                myFinish.setValue(myChart.getEndDate());\r\n                /* myStartDate = myChart.getStartDate();\n                myEndDate = myChart.getEndDate();\n                myExportSettings.setStartDate(myStartDate);\n                myExportSettings.setEndDate(myEndDate);\n\n                myEndDateButton.setText(new GanttCalendar(myExportSettings\n                .getEndDate()).toString());\n                myStartDateButton.setText(new GanttCalendar(\n                myExportSettings.getStartDate()).toString());\n                myEndDialogDate = new GanttDialogDate(new JDialog(),\n                new GanttCalendar(myEndDate), false);\n                myStartDialogDate = new GanttDialogDate(new JDialog(),\n                new GanttCalendar(myStartDate), false);\n                updateSourceImage(myChart.getChart(myExportSettings));\n                 */\r\n            }\r\n        });\r\n    }\r\n    Vector vMedia = new Vector();\r\n    // try {\r\n    // vMedia = getAllMediaSizeNameAvailable();\r\n    vMedia.add(MediaSizeName.ISO_A0);\r\n    vMedia.add(MediaSizeName.ISO_A1);\r\n    vMedia.add(MediaSizeName.ISO_A2);\r\n    vMedia.add(MediaSizeName.ISO_A3);\r\n    vMedia.add(MediaSizeName.ISO_A4);\r\n    vMedia.add(MediaSizeName.ISO_A5);\r\n    vMedia.add(MediaSizeName.ISO_A6);\r\n    // } catch (ClassNotFoundException e1) {\r\n    // // TODO Auto-generated catch block\r\n    // e1.printStackTrace();\r\n    // }\r\n    if (vMedia != null) {\r\n        myComboMediaSize = new JComboBox(vMedia);\r\n        dim = myComboMediaSize.getPreferredSize();\r\n        dim.setSize(((dim.getWidth()) + 20), dim.getHeight());\r\n        myComboMediaSize.setMaximumSize(dim);\r\n        myComboMediaSize.setPreferredSize(dim);\r\n        myComboMediaSize.addItemListener(new ItemListener() {\r\n            public void itemStateChanged(ItemEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        Object selectedItem = myComboMediaSize.getSelectedItem();\r\n                        if (selectedItem != null) {\r\n                            myMediaSizeName = ((MediaSizeName) (selectedItem));\r\n                            MediaSize ms = MediaSize.getMediaSizeForName(myMediaSizeName);\r\n                            Paper p = new Paper();\r\n                            float[] size = ms.getSize(MediaSize.INCH);\r\n                            p.setSize(((size[0]) * 72), ((size[1]) * 72));\r\n                            p.setImageableArea(72, 72, ((p.getWidth()) - (72 * 2)), ((p.getHeight()) - (72 * 2)));\r\n                            myPageFormat.setPaper(p);\r\n                            changePageOrientation(myOrientation);\r\n                            statusBar.setText1((((ms.getX(MediaSize.MM)) + \" x \") + (ms.getY(MediaSize.MM))));\r\n                            myPreviewContainer.repaint();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    bPrint.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"printProject\"))));\r\n    bPortrait.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"portrait\"))));\r\n    bLandscape.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"landscape\"))));\r\n    bClose.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"close\"))));\r\n    final JButton bZoomOut;\r\n    final JButton bZoomIn;\r\n    if (isDate) {\r\n        myWholeProjectButton.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"displayWholeProject\"))));\r\n        /* myStartDateButton.setToolTipText(GanttProject\n        .getToolTip(GanttProject.correctLabel(language\n        .getText(\"setStartDate\"))));\n        myEndDateButton.setToolTipText(GanttProject.getToolTip(GanttProject\n        .correctLabel(language.getText(\"setEndDate\"))));\n         */\r\n        // GanttProject gp = Mediator.getGanttProjectSingleton();\r\n        final ZoomManager zoomManager = myUIfacade.getZoomManager();\r\n        final Action zoomOut = new ZoomOutAction(zoomManager, \"16\");\r\n        final Action zoomIn = new ZoomInAction(zoomManager, \"16\");\r\n        bZoomOut = new JButton(((Icon) (zoomOut.getValue(Action.SMALL_ICON))));\r\n        bZoomIn = new JButton(((Icon) (zoomIn.getValue(Action.SMALL_ICON))));\r\n        bZoomOut.setHorizontalTextPosition(SwingConstants.RIGHT);\r\n        bZoomOut.setText(PrintPreview.language.getText(\"narrowChart\"));\r\n        bZoomOut.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        zoomOut.actionPerformed(null);\r\n                        updateSourceImage();\r\n                        bZoomOut.setEnabled(zoomManager.canZoomOut());\r\n                        bZoomIn.setEnabled(zoomManager.canZoomIn());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        bZoomIn.setHorizontalTextPosition(SwingConstants.RIGHT);\r\n        bZoomIn.setText(PrintPreview.language.getText(\"widenChart\"));\r\n        bZoomIn.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        zoomIn.actionPerformed(null);\r\n                        updateSourceImage();\r\n                        bZoomOut.setEnabled(zoomManager.canZoomOut());\r\n                        bZoomIn.setEnabled(zoomManager.canZoomIn());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        bZoomOut = null;\r\n        bZoomIn = null;\r\n    }\r\n    tb2.setFloatable(false);\r\n    tb.setFloatable(false);\r\n    tb.add(bClose);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(bPrint);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(bPortrait);\r\n    tb.add(bLandscape);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(new JLabel(((PrintPreview.language.getText(\"zoom\")) + \" \")));\r\n    tb.add(myComboScale);\r\n    if ((vMedia != null) && (!(vMedia.isEmpty()))) {\r\n        tb.addSeparator(new Dimension(16, 16));\r\n        tb.add(new JLabel(((PrintPreview.language.getText(\"choosePaperFormat\")) + \" \")));\r\n        tb.addSeparator(new Dimension(0, 10));\r\n        tb.add(myComboMediaSize);\r\n    }\r\n    if (isDate) {\r\n        tb2.add(bZoomOut);\r\n        tb2.addSeparator(new Dimension(5, 0));\r\n        tb2.add(bZoomIn);\r\n        tb2.addSeparator(new Dimension(20, 0));\r\n        tb2.add(myWholeProjectButton);\r\n        tb2.addSeparator(new Dimension(16, 16));\r\n        OptionsPageBuilder builder = new OptionsPageBuilder();\r\n        builder.setOptionKeyPrefix(\"\");\r\n        tb2.add(builder.createStandaloneOptionPanel(myStart));\r\n        URL iconArrow = this.getClass().getClassLoader().getResource(\"icons/fromto.gif\");\r\n        tb2.add(new JLabel(new ImageIcon(iconArrow)));\r\n        tb2.add(builder.createStandaloneOptionPanel(myFinish));\r\n    }\r\n    JPanel topPanel = new JPanel(new BorderLayout());\r\n    tb.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\r\n    tb2.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\r\n    topPanel.add(tb, BorderLayout.NORTH);\r\n    topPanel.add(tb2, BorderLayout.SOUTH);\r\n    getContentPane().add(topPanel, BorderLayout.NORTH);\r\n    statusBar = new PrintPreview.StatusBar();\r\n    statusBar.setLabel0(PrintPreview.language.getText(\"pageNumber\"));\r\n    statusBar.setLabel1(PrintPreview.language.getText(\"paperSize\"));\r\n    getContentPane().add(statusBar, BorderLayout.SOUTH);\r\n    myPreviewContainer = new PrintPreview.PreviewContainer();\r\n    PrinterJob prnJob = PrinterJob.getPrinterJob();\r\n    // --\r\n    myPageFormat = new PageFormat();\r\n    myPageFormat.setOrientation(myOrientation);\r\n    myMediaSizeName = PrintPreview.DEFAULT_MEDIA_SIZE_NAME;\r\n    MediaSize ms = MediaSize.getMediaSizeForName(myMediaSizeName);\r\n    Paper p = new Paper();\r\n    float[] size = ms.getSize(MediaSize.INCH);\r\n    p.setSize(((size[0]) * 72), ((size[1]) * 72));\r\n    p.setImageableArea(72, 72, ((p.getWidth()) - (72 * 2)), ((p.getHeight()) - (72 * 2)));\r\n    myPageFormat.setPaper(p);\r\n    // --\r\n    statusBar.setText1((((ms.getX(MediaSize.MM)) + \" x \") + (ms.getY(MediaSize.MM))));\r\n    if (((myPageFormat.getHeight()) == 0) || ((myPageFormat.getWidth()) == 0)) {\r\n        myUIfacade.showErrorDialog(\"Unable to determine default page size\");\r\n        return;\r\n    }\r\n    myPageWidth = ((int) (myPageFormat.getWidth()));\r\n    myPageHeight = ((int) (myPageFormat.getHeight()));\r\n    myScale = 50;\r\n    final int w = ((int) (((myPageWidth) * (myScale)) / 100));\r\n    final int h = ((int) (((myPageHeight) * (myScale)) / 100));\r\n    createPages();\r\n    JScrollPane ps = new JScrollPane(myPreviewContainer);\r\n    getContentPane().add(ps, BorderLayout.CENTER);\r\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n    setVisible(true);\r\n    myComboMediaSize.setSelectedItem(myMediaSizeName);\r\n    myStart.setValue(start);\r\n    myFinish.setValue(end);\r\n}"},
 {"id":3752, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.-init-()", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"3() {\r\n}"},
 {"id":3753, "name":"-init-(int,java.awt.print.PageFormat,java.awt.print.Printable,int)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.-init-(int,java.awt.print.PageFormat,java.awt.print.Printable,int)", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"public PagePreview(int pageIndex, PageFormat pageFormat, Printable chart, int scalePercents) {\r\n    myScalePercents = scalePercents;\r\n    myPageIndex = pageIndex;\r\n    myPageFormat = pageFormat;\r\n    myChart = chart;\r\n    setBackground(Color.white);\r\n    setBorder(new MatteBorder(1, 1, 2, 2, Color.black));\r\n}"},
 {"id":3754, "name":"changePageOrientation(int)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.changePageOrientation(int)", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"private void changePageOrientation(int newOrientation) {\r\n    myOrientation = newOrientation;\r\n    myPageFormat.setOrientation(myOrientation);\r\n    myPageWidth = ((int) (myPageFormat.getWidth()));\r\n    myPageHeight = ((int) (myPageFormat.getHeight()));\r\n    myPreviewContainer.removeAll();\r\n    myPreviewContainer.repaint();\r\n    createPages();\r\n    myPreviewContainer.doLayout();\r\n    myPreviewContainer.getParent().getParent().validate();\r\n    myPreviewContainer.validate();\r\n}"},
 {"id":3755, "name":"changeScale()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.changeScale()", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"private void changeScale() {\r\n    String str = myComboScale.getSelectedItem().toString();\r\n    if (str.endsWith(\"%\"))\r\n        str = str.substring(0, ((str.length()) - 1));\r\n\r\n    str = str.trim();\r\n    myScale = 0;\r\n    try {\r\n        myScale = Integer.parseInt(str);\r\n    } catch (NumberFormatException ex) {\r\n        return;\r\n    }\r\n    Component[] comps = myPreviewContainer.getComponents();\r\n    for (int k = 0; k < (comps.length); k++) {\r\n        if (!((comps[k]) instanceof PrintPreview.PagePreview))\r\n            continue;\r\n\r\n        PrintPreview.PagePreview pp = ((PrintPreview.PagePreview) (comps[k]));\r\n        pp.setScale(myScale);\r\n    }\r\n    myPreviewContainer.doLayout();\r\n    myPreviewContainer.getParent().getParent().validate();\r\n}"},
 {"id":3756, "name":"createPages()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.createPages()", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"private void createPages() {\r\n    int pageIndex = 0;\r\n    try {\r\n        while (true) {\r\n            BufferedImage img = new BufferedImage(myPageWidth, myPageHeight, BufferedImage.TYPE_INT_RGB);\r\n            Graphics g = img.getGraphics();\r\n            g.setColor(Color.white);\r\n            g.fillRect(0, 0, myPageWidth, myPageHeight);\r\n            if ((myPrintable.print(g, myPageFormat, pageIndex)) != (Printable.PAGE_EXISTS))\r\n                break;\r\n\r\n            PrintPreview.PagePreview pp = new PrintPreview.PagePreview(pageIndex, myPageFormat, myPrintable, myScale);\r\n            myPreviewContainer.add(pp);\r\n            pageIndex++;\r\n        } \r\n        statusBar.setText0((\"\" + pageIndex));\r\n    } catch (PrinterException e) {\r\n        myUIfacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":3757, "name":"onChangingDates()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.onChangingDates()", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"private void onChangingDates() {\r\n    myExportSettings.setStartDate(myStart.getValue());\r\n    myExportSettings.setEndDate(myFinish.getValue());\r\n    updateSourceImage();\r\n}"},
 {"id":3758, "name":"print()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.print()", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"private void print() {\r\n    PrinterJob prnJob = PrinterJob.getPrinterJob();\r\n    prnJob.setPrintable(myPrintable);\r\n    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\r\n    attr.add(myMediaSizeName);\r\n    attr.add(((myOrientation) == (PageFormat.LANDSCAPE) ? OrientationRequested.LANDSCAPE : OrientationRequested.PORTRAIT));\r\n    Document doc = myProject.getDocument();\r\n    if (doc != null)\r\n        attr.add(new JobName(doc.getDescription(), PrintPreview.language.getLocale()));\r\n\r\n    if (prnJob.printDialog(attr)) {\r\n        try {\r\n            prnJob.print(attr);\r\n            setVisible(false);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            myUIfacade.showErrorDialog(e);\r\n        }\r\n        dispose();\r\n    }\r\n    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\r\n}"},
 {"id":3759, "name":"run(java.lang.Runnable)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.run(java.lang.Runnable)", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"private void run(Runnable runnable) {\r\n    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    runnable.run();\r\n    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\r\n}"},
 {"id":3760, "name":"updateSourceImage()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview.updateSourceImage()", "ownerclassid":"495", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview", "sourcecode":"private void updateSourceImage() {\r\n    try {\r\n        BufferedImage image = myChart.getChart(myExportSettings);\r\n        myPrintable = new GanttPrintable(image, GanttPrintable.REDUCE_FACTOR_DEFAULT);\r\n        changePageOrientation(myOrientation);\r\n    } catch (OutOfMemoryError e) {\r\n        myUIfacade.showErrorDialog(GanttLanguage.getInstance().getText(\"printing.out_of_memory\"));\r\n    }\r\n}"},
 {"id":3761, "name":"-init-(int,java.awt.print.PageFormat,java.awt.print.Printable,int)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview.-init-(int,java.awt.print.PageFormat,java.awt.print.Printable,int)", "ownerclassid":"492", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview", "sourcecode":"public PagePreview(int pageIndex, PageFormat pageFormat, Printable chart, int scalePercents) {\r\n    myScalePercents = scalePercents;\r\n    myPageIndex = pageIndex;\r\n    myPageFormat = pageFormat;\r\n    myChart = chart;\r\n    setBackground(Color.white);\r\n    setBorder(new MatteBorder(1, 1, 2, 2, Color.black));\r\n}"},
 {"id":3762, "name":"getMaximumSize()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview.getMaximumSize()", "ownerclassid":"492", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview", "sourcecode":"public Dimension getMaximumSize() {\r\n    return getPreferredSize();\r\n}"},
 {"id":3763, "name":"getMinimumSize()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview.getMinimumSize()", "ownerclassid":"492", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview", "sourcecode":"public Dimension getMinimumSize() {\r\n    return getPreferredSize();\r\n}"},
 {"id":3764, "name":"getPreferredSize()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview.getPreferredSize()", "ownerclassid":"492", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview", "sourcecode":"public Dimension getPreferredSize() {\r\n    Insets ins = getInsets();\r\n    return new Dimension((((getScaledWidth()) + (ins.left)) + (ins.right)), (((getScaledHeight()) + (ins.top)) + (ins.bottom)));\r\n}"},
 {"id":3765, "name":"getScaledHeight()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview.getScaledHeight()", "ownerclassid":"492", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview", "sourcecode":"private int getScaledHeight() {\r\n    return ((int) (((myPageFormat.getHeight()) * (myScalePercents)) / 100));\r\n}"},
 {"id":3766, "name":"getScaledWidth()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview.getScaledWidth()", "ownerclassid":"492", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview", "sourcecode":"private int getScaledWidth() {\r\n    return ((int) (((myPageFormat.getWidth()) * (myScalePercents)) / 100));\r\n}"},
 {"id":3767, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview.paintComponent(java.awt.Graphics)", "ownerclassid":"492", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview", "sourcecode":"protected void paintComponent(Graphics g) {\r\n    super.paintComponent(g);\r\n    BufferedImage bufferImage = ((BufferedImage) (PrintPreview.PagePreview.ourImageCache.get(new Integer(myPageIndex))));\r\n    if (bufferImage == null) {\r\n        bufferImage = new BufferedImage(((int) (myPageFormat.getWidth())), ((int) (myPageFormat.getHeight())), BufferedImage.TYPE_INT_RGB);\r\n        if ((PrintPreview.PagePreview.ourImageCache.size()) >= 4) {\r\n            PrintPreview.PagePreview.ourImageCache.remove(PrintPreview.PagePreview.ourImageCache.firstKey());\r\n        }\r\n        PrintPreview.PagePreview.ourImageCache.put(new Integer(myPageIndex), bufferImage);\r\n    }\r\n    Graphics bufferGraphics = bufferImage.getGraphics();\r\n    {\r\n        bufferGraphics.setColor(Color.white);\r\n        bufferGraphics.fillRect(0, 0, bufferImage.getWidth(), bufferImage.getHeight());\r\n        try {\r\n            myChart.print(bufferGraphics, myPageFormat, myPageIndex);\r\n        } catch (PrinterException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    }\r\n    Image scaledImage = bufferImage.getScaledInstance(getScaledWidth(), getScaledHeight(), Image.SCALE_SMOOTH);\r\n    g.setColor(getBackground());\r\n    g.fillRect(0, 0, getWidth(), getHeight());\r\n    g.drawImage(scaledImage, 0, 0, null);\r\n}"},
 {"id":3768, "name":"setScale(int)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview.setScale(int)", "ownerclassid":"492", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PagePreview", "sourcecode":"void setScale(int scale) {\r\n    myScalePercents = scale;\r\n    repaint();\r\n}"},
 {"id":3769, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer.-init-()", "ownerclassid":"493", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer", "sourcecode":"PreviewContainer() {\r\n}"},
 {"id":3770, "name":"doLayout()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer.doLayout()", "ownerclassid":"493", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer", "sourcecode":"public void doLayout() {\r\n    Insets ins = getInsets();\r\n    int x = (ins.left) + (H_GAP);\r\n    int y = (ins.top) + (V_GAP);\r\n    int n = getComponentCount();\r\n    if (n == 0)\r\n        return;\r\n\r\n    Component comp = getComponent(0);\r\n    Dimension dc = comp.getPreferredSize();\r\n    int w = dc.width;\r\n    int h = dc.height;\r\n    Dimension dp = getParent().getSize();\r\n    int nCol = Math.max((((dp.width) - (H_GAP)) / (w + (H_GAP))), 1);\r\n    int nRow = n / nCol;\r\n    if ((nRow * nCol) < n)\r\n        nRow++;\r\n\r\n    int index = 0;\r\n    for (int k = 0; k < nRow; k++) {\r\n        for (int m = 0; m < nCol; m++) {\r\n            if (index >= n)\r\n                return;\r\n\r\n            comp = getComponent((index++));\r\n            comp.setBounds(x, y, w, h);\r\n            x += w + (H_GAP);\r\n        }\r\n        y += h + (V_GAP);\r\n        x = (ins.left) + (H_GAP);\r\n    }\r\n}"},
 {"id":3771, "name":"getMaximumSize()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer.getMaximumSize()", "ownerclassid":"493", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer", "sourcecode":"public Dimension getMaximumSize() {\r\n    return getPreferredSize();\r\n}"},
 {"id":3772, "name":"getMinimumSize()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer.getMinimumSize()", "ownerclassid":"493", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer", "sourcecode":"public Dimension getMinimumSize() {\r\n    return getPreferredSize();\r\n}"},
 {"id":3773, "name":"getPreferredSize()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer.getPreferredSize()", "ownerclassid":"493", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$PreviewContainer", "sourcecode":"public Dimension getPreferredSize() {\r\n    int n = getComponentCount();\r\n    if (n == 0)\r\n        return new Dimension(H_GAP, V_GAP);\r\n\r\n    Component comp = getComponent(0);\r\n    Dimension dc = comp.getPreferredSize();\r\n    int w = dc.width;\r\n    int h = dc.height;\r\n    Dimension dp = getParent().getSize();\r\n    int nCol = Math.max((((dp.width) - (H_GAP)) / (w + (H_GAP))), 1);\r\n    int nRow = n / nCol;\r\n    if ((nRow * nCol) < n)\r\n        nRow++;\r\n\r\n    int ww = (nCol * (w + (H_GAP))) + (H_GAP);\r\n    int hh = (nRow * (h + (V_GAP))) + (V_GAP);\r\n    Insets ins = getInsets();\r\n    return new Dimension(((ww + (ins.left)) + (ins.right)), ((hh + (ins.top)) + (ins.bottom)));\r\n}"},
 {"id":3774, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar.-init-()", "ownerclassid":"494", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar", "sourcecode":"public StatusBar() {\r\n    super(new BorderLayout());\r\n    label0 = new JLabel();\r\n    message0 = new JLabel();\r\n    JPanel panel0 = new JPanel();\r\n    panel0.add(label0);\r\n    panel0.add(message0);\r\n    add(panel0, BorderLayout.WEST);\r\n    label1 = new JLabel();\r\n    message1 = new JLabel();\r\n    JPanel panel1 = new JPanel();\r\n    panel1.add(label1);\r\n    panel1.add(message1);\r\n    add(panel1, BorderLayout.EAST);\r\n}"},
 {"id":3775, "name":"setLabel0(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar.setLabel0(java.lang.String)", "ownerclassid":"494", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar", "sourcecode":"public void setLabel0(String label) {\r\n    label0.setText(label);\r\n}"},
 {"id":3776, "name":"setLabel1(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar.setLabel1(java.lang.String)", "ownerclassid":"494", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar", "sourcecode":"public void setLabel1(String label) {\r\n    label1.setText(label);\r\n}"},
 {"id":3777, "name":"setText0(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar.setText0(java.lang.String)", "ownerclassid":"494", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar", "sourcecode":"public void setText0(String text) {\r\n    message0.setText(text);\r\n}"},
 {"id":3778, "name":"setText1(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar.setText1(java.lang.String)", "ownerclassid":"494", "ownerclassname":"net.sourceforge.ganttproject.print.PrintPreview$StatusBar", "sourcecode":"public void setText1(String text) {\r\n    message1.setText(text);\r\n}"},
 {"id":3779, "name":"getResourceAssignments()", "fullmethod":"net.sourceforge.ganttproject.resource.AssignmentContext.getResourceAssignments()", "ownerclassid":"496", "ownerclassname":"net.sourceforge.ganttproject.resource.AssignmentContext", "sourcecode":"public ResourceAssignment[] getResourceAssignments();"},
 {"id":3780, "name":"-init-(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.resource.AssignmentNode.-init-(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"497", "ownerclassname":"net.sourceforge.ganttproject.resource.AssignmentNode", "sourcecode":"public AssignmentNode(ResourceAssignment res) {\r\n    super(res);\r\n    resourceAssignment = res;\r\n}"},
 {"id":3781, "name":"getRoleForAssigment()", "fullmethod":"net.sourceforge.ganttproject.resource.AssignmentNode.getRoleForAssigment()", "ownerclassid":"497", "ownerclassname":"net.sourceforge.ganttproject.resource.AssignmentNode", "sourcecode":"public Role getRoleForAssigment() {\r\n    return resourceAssignment.getRoleForAssignment();\r\n}"},
 {"id":3782, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.resource.AssignmentNode.getTask()", "ownerclassid":"497", "ownerclassname":"net.sourceforge.ganttproject.resource.AssignmentNode", "sourcecode":"public Task getTask() {\r\n    return resourceAssignment.getTask();\r\n}"},
 {"id":3783, "name":"setRoleForAssigment(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.resource.AssignmentNode.setRoleForAssigment(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"497", "ownerclassname":"net.sourceforge.ganttproject.resource.AssignmentNode", "sourcecode":"public void setRoleForAssigment(Role role) {\r\n    resourceAssignment.setRoleForAssignment(role);\r\n}"},
 {"id":3784, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.resource.AssignmentNode.toString()", "ownerclassid":"497", "ownerclassname":"net.sourceforge.ganttproject.resource.AssignmentNode", "sourcecode":"public String toString() {\r\n    return resourceAssignment.getTask().getName();\r\n}"},
 {"id":3785, "name":"-init-(net.sourceforge.ganttproject.resource.HumanResourceManager)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.-init-(net.sourceforge.ganttproject.resource.HumanResourceManager)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"HumanResource(HumanResourceManager manager) {\r\n    this.name = \"\";\r\n    customFields = new HashMap();\r\n    myManager = manager;\r\n    // added\r\n}"},
 {"id":3786, "name":"-init-(java.lang.String,int,net.sourceforge.ganttproject.resource.HumanResourceManager)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.-init-(java.lang.String,int,net.sourceforge.ganttproject.resource.HumanResourceManager)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"/**\r\n * Creates a new instance of HumanResource\r\n */\r\nHumanResource(String name, int id, HumanResourceManager manager) {\r\n    super(id);\r\n    this.name = name;\r\n    customFields = new HashMap();\r\n    myManager = manager;\r\n}"},
 {"id":3787, "name":"-init-(net.sourceforge.ganttproject.resource.HumanResource)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.-init-(net.sourceforge.ganttproject.resource.HumanResource)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"private HumanResource(HumanResource copy) {\r\n    areEventsEnabled = false;\r\n    setId((-1));\r\n    setName((((GanttLanguage.getInstance().getText(\"copy2\")) + \"_\") + (copy.getName())));\r\n    setCostsPerUnit(copy.getCostsPerUnit());\r\n    setDescription(copy.getDescription());\r\n    setMaximumUnitsPerDay(copy.getMaximumUnitsPerDay());\r\n    setUnitMeasure(copy.getUnitMeasure());\r\n    setMail(copy.getMail());\r\n    setPhone(copy.getPhone());\r\n    setRole(copy.getRole());\r\n    myManager = copy.myManager;\r\n    DefaultListModel copyDaysOff = copy.getDaysOff();\r\n    for (int i = 0; i < (copyDaysOff.getSize()); i++) {\r\n        myDaysOffList.addElement(copyDaysOff.get(i));\r\n    }\r\n    customFields = new HashMap(copy.customFields);\r\n    areEventsEnabled = true;\r\n}"},
 {"id":3788, "name":"-init-(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.-init-(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.Object)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public CustomPropertyImpl(CustomPropertyDefinition definition, Object value) {\r\n    myDefinition = definition;\r\n    myValue = value;\r\n}"},
 {"id":3789, "name":"addCustomField(java.lang.String,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.addCustomField(java.lang.String,java.lang.Object)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public void addCustomField(String title, Object value) {\r\n    this.customFields.put(title, value);\r\n}"},
 {"id":3790, "name":"addCustomProperty(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.addCustomProperty(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.String)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public CustomProperty addCustomProperty(CustomPropertyDefinition definition, String valueAsString) {\r\n    final CustomPropertyDefinition stubDefinition = net.sourceforge.ganttproject.CustomPropertyManager.PropertyTypeEncoder.decodeTypeAndDefaultValue(definition.getTypeAsString(), valueAsString);\r\n    addCustomField(definition.getName(), stubDefinition.getDefaultValue());\r\n    return new HumanResource.CustomPropertyImpl(definition, stubDefinition.getDefaultValue());\r\n}"},
 {"id":3791, "name":"addDaysOff(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.addDaysOff(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public void addDaysOff(GanttDaysOff gdo) {\r\n    myDaysOffList.addElement(gdo);\r\n    fireResourceChanged();\r\n}"},
 {"id":3792, "name":"createAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.createAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public ResourceAssignment createAssignment(ResourceAssignment assignmentToTask) {\r\n    ResourceAssignment result = super.createAssignment(assignmentToTask);\r\n    fireAssignmentsChanged();\r\n    return result;\r\n}"},
 {"id":3793, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.delete()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public void delete() {\r\n    super.delete();\r\n    myManager.remove(this);\r\n}"},
 {"id":3794, "name":"fireAssignmentsChanged()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.fireAssignmentsChanged()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"protected void fireAssignmentsChanged() {\r\n    if (areEventsEnabled) {\r\n        myManager.fireAssignmentsChanged(this);\r\n    }\r\n}"},
 {"id":3795, "name":"fireResourceChanged()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.fireResourceChanged()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"private void fireResourceChanged() {\r\n    if (areEventsEnabled) {\r\n        myManager.fireResourceChanged(this);\r\n    }\r\n}"},
 {"id":3796, "name":"getCustomFieldVal(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.getCustomFieldVal(java.lang.String)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public Object getCustomFieldVal(String title) {\r\n    return customFields.get(title);\r\n}"},
 {"id":3797, "name":"getCustomProperties()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.getCustomProperties()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"/* <CustomProperty> */\r\npublic List getCustomProperties() {\r\n    List result = new ArrayList(customFields.size());\r\n    for (Iterator entries = customFields.entrySet().iterator(); entries.hasNext();) {\r\n        Map.Entry nextEntry = ((Map.Entry) (entries.next()));\r\n        String nextName = ((String) (nextEntry.getKey()));\r\n        Object nextValue = nextEntry.getValue();\r\n        CustomPropertyDefinition nextDefinition = myManager.getCustomPropertyDefinition(nextName);\r\n        result.add(new HumanResource.CustomPropertyImpl(nextDefinition, nextValue));\r\n    }\r\n    return result;\r\n}"},
 {"id":3798, "name":"getDaysOff()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.getDaysOff()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public DefaultListModel getDaysOff() {\r\n    return myDaysOffList;\r\n}"},
 {"id":3799, "name":"getMail()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.getMail()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public String getMail() {\r\n    return email;\r\n}"},
 {"id":3800, "name":"getPhone()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.getPhone()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public String getPhone() {\r\n    return phone;\r\n}"},
 {"id":3801, "name":"getRole()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.getRole()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public Role getRole() {\r\n    if ((myRole) == null) {\r\n        System.err.println((\"[HumanResource] getRole(): I have no role :( name=\" + (getName())));\r\n    }\r\n    return myRole;\r\n}"},
 {"id":3802, "name":"initCustomProperties()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.initCustomProperties()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"void initCustomProperties() {\r\n    /* <CustomPropertyDefinition> */\r\n    List defs = myManager.getCustomPropertyManager().getDefinitions();\r\n    for (int i = 0; i < (defs.size()); i++) {\r\n        CustomPropertyDefinition nextDefinition = ((CustomPropertyDefinition) (defs.get(i)));\r\n        customFields.put(nextDefinition.getName(), nextDefinition.getDefaultValue());\r\n    }\r\n}"},
 {"id":3803, "name":"removeCustomField(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.removeCustomField(java.lang.String)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public void removeCustomField(String title) {\r\n    this.customFields.remove(title);\r\n}"},
 {"id":3804, "name":"setCustomFieldVal(java.lang.String,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.setCustomFieldVal(java.lang.String,java.lang.Object)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public void setCustomFieldVal(String title, Object val) {\r\n    this.customFields.put(title, val);\r\n}"},
 {"id":3805, "name":"setMail(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.setMail(java.lang.String)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public void setMail(String email) {\r\n    if (email == null) {\r\n        return;\r\n    }\r\n    this.email = email;\r\n    fireResourceChanged();\r\n}"},
 {"id":3806, "name":"setPhone(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.setPhone(java.lang.String)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public void setPhone(String phone) {\r\n    if (phone == null) {\r\n        return;\r\n    }\r\n    this.phone = phone;\r\n    fireResourceChanged();\r\n}"},
 {"id":3807, "name":"setRole(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.setRole(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"// public void setFunction (int function) {\r\n// this.function=function;\r\n// }\r\n// public int getFunction () {\r\n// return myRole==null ? 0 : myRole.getID();\r\n// }\r\npublic void setRole(Role role) {\r\n    myRole = role;\r\n    fireResourceChanged();\r\n}"},
 {"id":3808, "name":"unpluggedClone()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource.unpluggedClone()", "ownerclassid":"499", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource", "sourcecode":"public ProjectResource unpluggedClone() {\r\n    return new HumanResource(this);\r\n}"},
 {"id":3809, "name":"-init-(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl.-init-(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.Object)", "ownerclassid":"498", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl", "sourcecode":"public CustomPropertyImpl(CustomPropertyDefinition definition, Object value) {\r\n    myDefinition = definition;\r\n    myValue = value;\r\n}"},
 {"id":3810, "name":"getDefinition()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl.getDefinition()", "ownerclassid":"498", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl", "sourcecode":"public CustomPropertyDefinition getDefinition() {\r\n    return myDefinition;\r\n}"},
 {"id":3811, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl.getValue()", "ownerclassid":"498", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl", "sourcecode":"public Object getValue() {\r\n    return myValue;\r\n}"},
 {"id":3812, "name":"getValueAsString()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl.getValueAsString()", "ownerclassid":"498", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl", "sourcecode":"public String getValueAsString() {\r\n    return HumanResourceManager.getValueAsString(myValue);\r\n}"},
 {"id":3813, "name":"-init-(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.-init-(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public HumanResourceManager(Role defaultRole) {\r\n    myDefaultRole = defaultRole;\r\n}"},
 {"id":3814, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.-init-()", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"1() {\r\n}"},
 {"id":3815, "name":"-init-(java.lang.String,java.lang.String,net.sourceforge.ganttproject.CustomPropertyDefinition)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.-init-(java.lang.String,java.lang.String,net.sourceforge.ganttproject.CustomPropertyDefinition)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"CustomPropertyDefinitionImpl(String name, String id, CustomPropertyDefinition stub) {\r\n    myName = name;\r\n    myID = id;\r\n    myDefaultValue = stub.getDefaultValue();\r\n    myDefaultValueAsString = stub.getDefaultValueAsString();\r\n    myType = stub.getType();\r\n    myTypeAsString = stub.getTypeAsString();\r\n}"},
 {"id":3816, "name":"add(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.add(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void add(ProjectResource resource) {\r\n    if ((resource.getId()) == (-1)) {\r\n        resource.setId(nextFreeId);\r\n    }\r\n    if ((resource.getId()) >= (nextFreeId)) {\r\n        nextFreeId = (resource.getId()) + 1;\r\n    }\r\n    resources.add(resource);\r\n    fireResourceAdded(resource);\r\n}"},
 {"id":3817, "name":"addCustomField(net.sourceforge.ganttproject.CustomPropertyDefinition)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.addCustomField(net.sourceforge.ganttproject.CustomPropertyDefinition)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void addCustomField(CustomPropertyDefinition definition) {\r\n    customFields.put(definition.getName(), definition);\r\n    /* all the existant resources are added the new property field */\r\n    Iterator it = resources.iterator();\r\n    while (it.hasNext()) {\r\n        ((HumanResource) (it.next())).addCustomField(definition.getName(), definition.getDefaultValue());\r\n    } \r\n}"},
 {"id":3818, "name":"addView(net.sourceforge.ganttproject.resource.ResourceView)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.addView(net.sourceforge.ganttproject.resource.ResourceView)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void addView(ResourceView view) {\r\n    myViews.add(view);\r\n}"},
 {"id":3819, "name":"checkCustomField(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.checkCustomField(java.lang.String)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public boolean checkCustomField(String title) {\r\n    return customFields.containsKey(title);\r\n}"},
 {"id":3820, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.clear()", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void clear() {\r\n    fireCleanup();\r\n    resources.clear();\r\n}"},
 {"id":3821, "name":"create(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.create(java.lang.String,int)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public ProjectResource create(String name, int i) {\r\n    HumanResource hr = new HumanResource(name, i, this);\r\n    hr.setRole(myDefaultRole);\r\n    add(hr);\r\n    return hr;\r\n}"},
 {"id":3822, "name":"createDefinition(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.createDefinition(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public CustomPropertyDefinition createDefinition(String id, String typeAsString, String name, String defaultValueAsString) {\r\n    final CustomPropertyDefinition stubDefinition = net.sourceforge.ganttproject.CustomPropertyManager.PropertyTypeEncoder.decodeTypeAndDefaultValue(typeAsString, defaultValueAsString);\r\n    CustomPropertyDefinition result = new HumanResourceManager.CustomPropertyDefinitionImpl(name, id, stubDefinition);\r\n    addCustomField(result);\r\n    return result;\r\n}"},
 {"id":3823, "name":"down(net.sourceforge.ganttproject.resource.HumanResource)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.down(net.sourceforge.ganttproject.resource.HumanResource)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"/**\r\n * Move down the resource number index\r\n */\r\npublic void down(HumanResource hr) {\r\n    int index = resources.indexOf(hr);\r\n    assert index >= 0;\r\n    resources.remove(index);\r\n    resources.add((index + 1), hr);\r\n    fireResourceChanged(hr);\r\n}"},
 {"id":3824, "name":"fireAssignmentsChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.fireAssignmentsChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void fireAssignmentsChanged(ProjectResource resource) {\r\n    ResourceEvent e = new ResourceEvent(this, resource);\r\n    for (Iterator i = myViews.iterator(); i.hasNext();) {\r\n        ResourceView nextView = ((ResourceView) (i.next()));\r\n        nextView.resourceAssignmentsChanged(e);\r\n    }\r\n}"},
 {"id":3825, "name":"fireCleanup()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.fireCleanup()", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"private void fireCleanup() {\r\n    fireResourcesRemoved(((ProjectResource[]) (resources.toArray(new ProjectResource[resources.size()]))));\r\n}"},
 {"id":3826, "name":"fireResourceAdded(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.fireResourceAdded(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"private void fireResourceAdded(ProjectResource resource) {\r\n    ResourceEvent e = new ResourceEvent(this, resource);\r\n    for (Iterator i = myViews.iterator(); i.hasNext();) {\r\n        ResourceView nextView = ((ResourceView) (i.next()));\r\n        nextView.resourceAdded(e);\r\n    }\r\n}"},
 {"id":3827, "name":"fireResourceChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.fireResourceChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"void fireResourceChanged(ProjectResource resource) {\r\n    ResourceEvent e = new ResourceEvent(this, resource);\r\n    for (Iterator i = myViews.iterator(); i.hasNext();) {\r\n        ResourceView nextView = ((ResourceView) (i.next()));\r\n        nextView.resourceChanged(e);\r\n    }\r\n}"},
 {"id":3828, "name":"fireResourcesRemoved(net.sourceforge.ganttproject.resource.ProjectResource[])", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.fireResourcesRemoved(net.sourceforge.ganttproject.resource.ProjectResource[])", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"private void fireResourcesRemoved(ProjectResource[] resources) {\r\n    ResourceEvent e = new ResourceEvent(this, resources);\r\n    for (int i = 0; i < (myViews.size()); i++) {\r\n        ResourceView nextView = ((ResourceView) (myViews.get(i)));\r\n        nextView.resourcesRemoved(e);\r\n    }\r\n}"},
 {"id":3829, "name":"getById(int)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.getById(int)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public ProjectResource getById(int id) {\r\n    // Linear search is not really efficent, but we dont have so many\r\n    // resources !?\r\n    ProjectResource pr = null;\r\n    for (int i = 0; i < (resources.size()); i++)\r\n        if ((((ProjectResource) (resources.get(i))).getId()) == id) {\r\n            pr = ((ProjectResource) (resources.get(i)));\r\n            break;\r\n        }\r\n\r\n    return pr;\r\n}"},
 {"id":3830, "name":"getCustomPropertyDefinition(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.getCustomPropertyDefinition(java.lang.String)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"CustomPropertyDefinition getCustomPropertyDefinition(String nextName) {\r\n    return ((CustomPropertyDefinition) (customFields.get(nextName)));\r\n}"},
 {"id":3831, "name":"getCustomPropertyManager()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.getCustomPropertyManager()", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public CustomPropertyManager getCustomPropertyManager() {\r\n    return this;\r\n}"},
 {"id":3832, "name":"getDefinitions()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.getDefinitions()", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public List getDefinitions() {\r\n    List result = new ArrayList(customFields.values());\r\n    return result;\r\n}"},
 {"id":3833, "name":"getResources()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.getResources()", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public List getResources() {\r\n    return resources;\r\n}"},
 {"id":3834, "name":"getResourcesArray()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.getResourcesArray()", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public ProjectResource[] getResourcesArray() {\r\n    return ((ProjectResource[]) (resources.toArray(new ProjectResource[resources.size()])));\r\n}"},
 {"id":3835, "name":"getValueAsString(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.getValueAsString(java.lang.Object)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"static String getValueAsString(Object value) {\r\n    final String result;\r\n    if (value != null) {\r\n        if (value instanceof GanttCalendar) {\r\n            result = ((GanttCalendar) (value)).toXMLString();\r\n        } else {\r\n            result = String.valueOf(value);\r\n        }\r\n    } else {\r\n        result = null;\r\n    }\r\n    return result;\r\n}"},
 {"id":3836, "name":"importData(net.sourceforge.ganttproject.CustomPropertyManager)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.importData(net.sourceforge.ganttproject.CustomPropertyManager)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void importData(CustomPropertyManager source) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":3837, "name":"importData(net.sourceforge.ganttproject.resource.HumanResource,java.util.Map)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.importData(net.sourceforge.ganttproject.resource.HumanResource,java.util.Map)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"private void importData(HumanResource next, Map original2imported) {\r\n    HumanResource imported = ((HumanResource) (create(next.getName(), nextFreeId)));\r\n    if ((next.getDaysOff()) != null)\r\n        for (int i = 0; i < (next.getDaysOff().size()); i++)\r\n            imported.addDaysOff(((GanttDaysOff) (((GanttDaysOff) (next.getDaysOff().get(i))).clone())));\r\n\r\n\r\n    imported.setName(next.getName());\r\n    imported.setDescription(next.getDescription());\r\n    imported.setMail(next.getMail());\r\n    imported.setPhone(next.getPhone());\r\n    imported.setRole(next.getRole());\r\n    /* <CustomProperty> */\r\n    List customProperties = next.getCustomProperties();\r\n    for (int i = 0; i < (customProperties.size()); i++) {\r\n        CustomProperty nextProperty = ((CustomProperty) (customProperties.get(i)));\r\n        imported.addCustomProperty(nextProperty.getDefinition(), nextProperty.getValueAsString());\r\n    }\r\n    original2imported.put(next, imported);\r\n}"},
 {"id":3838, "name":"importData(net.sourceforge.ganttproject.resource.ResourceManager)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.importData(net.sourceforge.ganttproject.resource.ResourceManager)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public Map importData(ResourceManager resourceManager) {\r\n    Map original2imported = new HashMap();\r\n    if ((resourceManager instanceof HumanResourceManager) == false) {\r\n        throw new IllegalArgumentException(\"I expect resource manager to be HumanResourceManager\");\r\n    }\r\n    HumanResourceManager hrManager = ((HumanResourceManager) (resourceManager));\r\n    List resources = hrManager.getResources();\r\n    for (int i = 0; i < (resources.size()); i++) {\r\n        HumanResource next = ((HumanResource) (resources.get(i)));\r\n        importData(next, original2imported);\r\n    }\r\n    return original2imported;\r\n}"},
 {"id":3839, "name":"newHumanResource()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.newHumanResource()", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public HumanResource newHumanResource() {\r\n    HumanResource result = new HumanResource(this);\r\n    result.setRole(myDefaultRole);\r\n    return result;\r\n}"},
 {"id":3840, "name":"remove(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void remove(ProjectResource resource) {\r\n    fireResourcesRemoved(new ProjectResource[]{ resource });\r\n    resources.remove(resource);\r\n}"},
 {"id":3841, "name":"remove(net.sourceforge.ganttproject.resource.ProjectResource,net.sourceforge.ganttproject.undo.GPUndoManager)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource,net.sourceforge.ganttproject.undo.GPUndoManager)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void remove(ProjectResource resource, GPUndoManager myUndoManager) {\r\n    final ProjectResource res = resource;\r\n    myUndoManager.undoableEdit(\"Delete Human OK\", new Runnable() {\r\n        public void run() {\r\n            fireResourcesRemoved(new ProjectResource[]{ res });\r\n            resources.remove(res);\r\n        }\r\n    });\r\n}"},
 {"id":3842, "name":"removeCustomField(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.removeCustomField(java.lang.String)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void removeCustomField(String title) {\r\n    customFields.remove(title);\r\n    /* the property field is removed from all the existant resources */\r\n    Iterator it = resources.iterator();\r\n    while (it.hasNext()) {\r\n        ((HumanResource) (it.next())).removeCustomField(title);\r\n    } \r\n}"},
 {"id":3843, "name":"save(java.io.OutputStream)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.save(java.io.OutputStream)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"public void save(OutputStream target) {\r\n}"},
 {"id":3844, "name":"up(net.sourceforge.ganttproject.resource.HumanResource)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager.up(net.sourceforge.ganttproject.resource.HumanResource)", "ownerclassid":"501", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "sourcecode":"/**\r\n * Move up the resource number index\r\n */\r\npublic void up(HumanResource hr) {\r\n    int index = resources.indexOf(hr);\r\n    assert index >= 0;\r\n    resources.remove(index);\r\n    resources.add((index - 1), hr);\r\n    fireResourceChanged(hr);\r\n}"},
 {"id":3845, "name":"-init-(java.lang.String,java.lang.String,net.sourceforge.ganttproject.CustomPropertyDefinition)", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl.-init-(java.lang.String,java.lang.String,net.sourceforge.ganttproject.CustomPropertyDefinition)", "ownerclassid":"500", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl", "sourcecode":"CustomPropertyDefinitionImpl(String name, String id, CustomPropertyDefinition stub) {\r\n    myName = name;\r\n    myID = id;\r\n    myDefaultValue = stub.getDefaultValue();\r\n    myDefaultValueAsString = stub.getDefaultValueAsString();\r\n    myType = stub.getType();\r\n    myTypeAsString = stub.getTypeAsString();\r\n}"},
 {"id":3846, "name":"getDefaultValue()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl.getDefaultValue()", "ownerclassid":"500", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl", "sourcecode":"public Object getDefaultValue() {\r\n    return myDefaultValue;\r\n}"},
 {"id":3847, "name":"getDefaultValueAsString()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl.getDefaultValueAsString()", "ownerclassid":"500", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl", "sourcecode":"public String getDefaultValueAsString() {\r\n    return myDefaultValueAsString;\r\n}"},
 {"id":3848, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl.getID()", "ownerclassid":"500", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl", "sourcecode":"public String getID() {\r\n    return myID;\r\n}"},
 {"id":3849, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl.getName()", "ownerclassid":"500", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl", "sourcecode":"public String getName() {\r\n    return myName;\r\n}"},
 {"id":3850, "name":"getType()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl.getType()", "ownerclassid":"500", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl", "sourcecode":"public Class getType() {\r\n    return myType;\r\n}"},
 {"id":3851, "name":"getTypeAsString()", "fullmethod":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl.getTypeAsString()", "ownerclassid":"500", "ownerclassname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl", "sourcecode":"public String getTypeAsString() {\r\n    return myTypeAsString;\r\n}"},
 {"id":3852, "name":"-init-(java.util.Date,java.util.Date,float,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.-init-(java.util.Date,java.util.Date,float,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"Load(Date startDate, Date endDate, float load, Task ref) {\r\n    this.load = load;\r\n    this.refTask = ref;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}"},
 {"id":3853, "name":"-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"public LoadDistribution(ProjectResource resource) {\r\n    myLoads.add(new LoadDistribution.Load(null, null, 0, null));\r\n    myDaysOff.add(new LoadDistribution.Load(null, null, 0, null));\r\n    myResource = resource;\r\n    ResourceAssignment[] assignments = myResource.getAssignments();\r\n    for (int j = 0; j < (assignments.length); j++) {\r\n        processAssignment(assignments[j]);\r\n    }\r\n    processDaysOff(myResource);\r\n}"},
 {"id":3854, "name":"addLoad(java.util.Date,java.util.Date,float,java.util.List,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.addLoad(java.util.Date,java.util.Date,float,java.util.List,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"private void addLoad(Date startDate, Date endDate, float load, List loads, /* <Load> */\r\nTask t) {\r\n    LoadDistribution.Load taskLoad = new LoadDistribution.Load(startDate, endDate, load, t);\r\n    myTasksLoads.add(taskLoad);\r\n    int idxStart = -1;\r\n    float currentLoad = 0;\r\n    if (startDate == null) {\r\n        idxStart = 0;\r\n    } else {\r\n        for (int i = 1; i < (loads.size()); i++) {\r\n            LoadDistribution.Load nextLoad = ((LoadDistribution.Load) (loads.get(i)));\r\n            if ((startDate.compareTo(nextLoad.startDate)) >= 0) {\r\n                currentLoad = ((LoadDistribution.Load) (loads.get(i))).load;\r\n            }\r\n            if ((startDate.compareTo(nextLoad.startDate)) > 0) {\r\n                continue;\r\n            }\r\n            idxStart = i;\r\n            if ((startDate.compareTo(nextLoad.startDate)) < 0) {\r\n                loads.add(i, new LoadDistribution.Load(startDate, null, currentLoad, null));\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    if (idxStart == (-1)) {\r\n        idxStart = loads.size();\r\n        loads.add(new LoadDistribution.Load(startDate, null, 0, t));\r\n    }\r\n    int idxEnd = -1;\r\n    if (endDate == null) {\r\n        idxEnd = (loads.size()) - 1;\r\n    } else {\r\n        for (int i = idxStart; i < (loads.size()); i++) {\r\n            LoadDistribution.Load nextLoad = ((LoadDistribution.Load) (loads.get(i)));\r\n            if ((endDate.compareTo(nextLoad.startDate)) > 0) {\r\n                nextLoad.load += load;\r\n                continue;\r\n            }\r\n            idxEnd = i;\r\n            if ((endDate.compareTo(nextLoad.startDate)) < 0) {\r\n                LoadDistribution.Load prevLoad = ((LoadDistribution.Load) (loads.get((i - 1))));\r\n                loads.add(i, new LoadDistribution.Load(endDate, null, ((prevLoad.load) - load), null));\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    if (idxEnd == (-1)) {\r\n        idxEnd = loads.size();\r\n        loads.add(new LoadDistribution.Load(endDate, null, 0, t));\r\n    }\r\n}"},
 {"id":3855, "name":"getDaysOff()", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.getDaysOff()", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"/* <Load> */\r\npublic List getDaysOff() {\r\n    return myDaysOff;\r\n}"},
 {"id":3856, "name":"getLoads()", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.getLoads()", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"/* <Load> */\r\npublic List getLoads() {\r\n    return myLoads;\r\n}"},
 {"id":3857, "name":"getResource()", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.getResource()", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"public ProjectResource getResource() {\r\n    return myResource;\r\n}"},
 {"id":3858, "name":"getSeparatedTaskLoads()", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.getSeparatedTaskLoads()", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"/* <Task, List<Load>> */\r\npublic Map getSeparatedTaskLoads() {\r\n    /* <Task,List<Load>> */\r\n    HashMap result = /* <Task, List<Load>> */\r\n    new HashMap();\r\n    List taskLoads = getTasksLoads();\r\n    for (int i = 0; i < (taskLoads.size()); i++) {\r\n        LoadDistribution.Load nextLoad = ((LoadDistribution.Load) (taskLoads.get(i)));\r\n        Task nextTask = nextLoad.refTask;\r\n        /* <Load> */\r\n        List partition = ((List) (result.get(nextTask)));\r\n        if (partition == null) {\r\n            partition = /* <Load> */\r\n            new ArrayList();\r\n            result.put(nextTask, partition);\r\n        }\r\n        partition.add(nextLoad);\r\n    }\r\n    return result;\r\n}"},
 {"id":3859, "name":"getTasksLoads()", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.getTasksLoads()", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"/**\r\n * Returns a list of lists of <code>Load</code> instances. Each list\r\n * contains a set of <code>Load</code>\r\n *\r\n * @return a list of lists of <code>Load</code> instances.\r\n */\r\n/* <Load> */\r\npublic List getTasksLoads() {\r\n    return myTasksLoads;\r\n}"},
 {"id":3860, "name":"processActivity(net.sourceforge.ganttproject.task.TaskActivity,float)", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.processActivity(net.sourceforge.ganttproject.task.TaskActivity,float)", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"private void processActivity(TaskActivity activity, float load) {\r\n    if ((activity.getIntensity()) == 0) {\r\n        return;\r\n    }\r\n    addLoad(activity.getStart(), activity.getEnd(), load, myLoads, activity.getTask());\r\n}"},
 {"id":3861, "name":"processAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.processAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"private void processAssignment(ResourceAssignment assignment) {\r\n    Task task = assignment.getTask();\r\n    TaskActivity[] activities = task.getActivities();\r\n    for (int i = 0; i < (activities.length); i++) {\r\n        processActivity(activities[i], assignment.getLoad());\r\n    }\r\n}"},
 {"id":3862, "name":"processDayOff(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.processDayOff(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"private void processDayOff(GanttDaysOff dayOff) {\r\n    Date dayOffEnd = dayOff.getFinish().getTime();\r\n    addLoad(dayOff.getStart().getTime(), dayOffEnd, (-1), myDaysOff, null);\r\n}"},
 {"id":3863, "name":"processDaysOff(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution.processDaysOff(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"503", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution", "sourcecode":"private void processDaysOff(ProjectResource resource) {\r\n    HumanResource hr = ((HumanResource) (resource));\r\n    DefaultListModel daysOff = hr.getDaysOff();\r\n    if (daysOff != null) {\r\n        for (int l = 0; l < (daysOff.size()); l++) {\r\n            processDayOff(((GanttDaysOff) (daysOff.get(l))));\r\n        }\r\n    }\r\n}"},
 {"id":3864, "name":"-init-(java.util.Date,java.util.Date,float,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution$Load.-init-(java.util.Date,java.util.Date,float,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"502", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution$Load", "sourcecode":"Load(Date startDate, Date endDate, float load, Task ref) {\r\n    this.load = load;\r\n    this.refTask = ref;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}"},
 {"id":3865, "name":"isResourceUnavailable()", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution$Load.isResourceUnavailable()", "ownerclassid":"502", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution$Load", "sourcecode":"public boolean isResourceUnavailable() {\r\n    return (load) == (-1);\r\n}"},
 {"id":3866, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.resource.LoadDistribution$Load.toString()", "ownerclassid":"502", "ownerclassname":"net.sourceforge.ganttproject.resource.LoadDistribution$Load", "sourcecode":"public String toString() {\r\n    return ((((\"start=\" + (this.startDate)) + \" load=\") + (this.load)) + \" refTask = \") + (this.refTask);\r\n}"},
 {"id":3867, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.-init-()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"protected ProjectResource() {\r\n    this((-1));\r\n}"},
 {"id":3868, "name":"-init-(int)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.-init-(int)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"protected ProjectResource(int id) {\r\n    this.id = id;\r\n}"},
 {"id":3869, "name":"-init-(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.-init-(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"private ResourceAssignmentImpl(ResourceAssignment assignmentToTask) {\r\n    myAssignmentToTask = assignmentToTask;\r\n}"},
 {"id":3870, "name":"createAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.createAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public ResourceAssignment createAssignment(ResourceAssignment assignmentToTask) {\r\n    for (int i = 0; i < (myAssignments.size()); i++) {\r\n        if (((ResourceAssignment) (myAssignments.get(i))).getTask().equals(assignmentToTask.getTask())) {\r\n            // throw new IllegalStateException(\"An attemp to assign resource\r\n            // to the same task twice\");\r\n        }\r\n    }\r\n    ResourceAssignment result = new ProjectResource.ResourceAssignmentImpl(assignmentToTask);\r\n    myAssignments.add(result);\r\n    resetLoads();\r\n    return result;\r\n}"},
 {"id":3871, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.delete()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public void delete() {\r\n    removeAllAssignments();\r\n}"},
 {"id":3872, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.equals(java.lang.Object)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public boolean equals(Object obj) {\r\n    boolean res = false;\r\n    if (obj instanceof ProjectResource) {\r\n        ProjectResource pr = ((ProjectResource) (obj));\r\n        res = (pr.id) == (id);\r\n    }\r\n    return res;\r\n}"},
 {"id":3873, "name":"fireAssignmentChanged(net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.fireAssignmentChanged(net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"private void fireAssignmentChanged(ProjectResource.ResourceAssignmentImpl resourceAssignmentImpl) {\r\n    resetLoads();\r\n    fireAssignmentsChanged();\r\n}"},
 {"id":3874, "name":"fireAssignmentsChanged()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.fireAssignmentsChanged()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"protected abstract void fireAssignmentsChanged();"},
 {"id":3875, "name":"getAssignments()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.getAssignments()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public ResourceAssignment[] getAssignments() {\r\n    return ((ResourceAssignment[]) (myAssignments.toArray(new ResourceAssignment[0])));\r\n}"},
 {"id":3876, "name":"getCostsPerUnit()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.getCostsPerUnit()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public double getCostsPerUnit() {\r\n    return costsPerUnit;\r\n}"},
 {"id":3877, "name":"getDescription()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.getDescription()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public String getDescription() {\r\n    return description;\r\n}"},
 {"id":3878, "name":"getId()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.getId()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public int getId() {\r\n    return id;\r\n}"},
 {"id":3879, "name":"getLoadDistribution()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.getLoadDistribution()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public LoadDistribution getLoadDistribution() {\r\n    if ((myLoadDistribution) == null) {\r\n        myLoadDistribution = new LoadDistribution(this);\r\n    }\r\n    return myLoadDistribution;\r\n}"},
 {"id":3880, "name":"getMaximumUnitsPerDay()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.getMaximumUnitsPerDay()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public int getMaximumUnitsPerDay() {\r\n    return maximumUnitsPerDay;\r\n}"},
 {"id":3881, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.getName()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public String getName() {\r\n    return name;\r\n}"},
 {"id":3882, "name":"getUnitMeasure()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.getUnitMeasure()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public String getUnitMeasure() {\r\n    return unitMeasure;\r\n}"},
 {"id":3883, "name":"removeAllAssignments()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.removeAllAssignments()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"/**\r\n * Removes the assignment objects associated to this ProjectResource\r\n *  and those associated to its Tasks\r\n */\r\nprivate void removeAllAssignments() {\r\n    List copy = new ArrayList(myAssignments);\r\n    for (int i = 0; i < (copy.size()); i++) {\r\n        ProjectResource.ResourceAssignmentImpl next = ((ProjectResource.ResourceAssignmentImpl) (copy.get(i)));\r\n        next.myAssignmentToTask.delete();\r\n    }\r\n    resetLoads();\r\n}"},
 {"id":3884, "name":"resetLoads()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.resetLoads()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public void resetLoads() {\r\n    myLoadDistribution = null;\r\n}"},
 {"id":3885, "name":"setCostsPerUnit(double)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.setCostsPerUnit(double)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public void setCostsPerUnit(double costsPerUnit) {\r\n    this.costsPerUnit = costsPerUnit;\r\n}"},
 {"id":3886, "name":"setDescription(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.setDescription(java.lang.String)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public void setDescription(String description) {\r\n    this.description = description;\r\n}"},
 {"id":3887, "name":"setId(int)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.setId(int)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public void setId(int id) {\r\n    // setting the id is only allowed when id is not\r\n    // assigned\r\n    if ((this.id) == (-1))\r\n        this.id = id;\r\n\r\n}"},
 {"id":3888, "name":"setMaximumUnitsPerDay(int)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.setMaximumUnitsPerDay(int)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public void setMaximumUnitsPerDay(int maximumUnitsPerDay) {\r\n    this.maximumUnitsPerDay = maximumUnitsPerDay;\r\n}"},
 {"id":3889, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.setName(java.lang.String)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public void setName(String name) {\r\n    this.name = name;\r\n}"},
 {"id":3890, "name":"setUnitMeasure(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.setUnitMeasure(java.lang.String)", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public void setUnitMeasure(String unitMeasure) {\r\n    this.unitMeasure = unitMeasure;\r\n}"},
 {"id":3891, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.toString()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public String toString() {\r\n    return name;\r\n}"},
 {"id":3892, "name":"unpluggedClone()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource.unpluggedClone()", "ownerclassid":"505", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource", "sourcecode":"public abstract ProjectResource unpluggedClone();"},
 {"id":3893, "name":"-init-(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.-init-(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"private ResourceAssignmentImpl(ResourceAssignment assignmentToTask) {\r\n    myAssignmentToTask = assignmentToTask;\r\n}"},
 {"id":3894, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.delete()", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"/**\r\n * Removes all related assignments\r\n */\r\npublic void delete() {\r\n    this.myAssignments.remove(this);\r\n    this.fireAssignmentChanged(this);\r\n}"},
 {"id":3895, "name":"getLoad()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.getLoad()", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public float getLoad() {\r\n    return myLoad;\r\n}"},
 {"id":3896, "name":"getResource()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.getResource()", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public ProjectResource getResource() {\r\n    return this;\r\n}"},
 {"id":3897, "name":"getRoleForAssignment()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.getRoleForAssignment()", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public Role getRoleForAssignment() {\r\n    return myRoleForAssignment;\r\n}"},
 {"id":3898, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.getTask()", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public Task getTask() {\r\n    return myAssignmentToTask.getTask();\r\n}"},
 {"id":3899, "name":"isCoordinator()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.isCoordinator()", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public boolean isCoordinator() {\r\n    return myCoordinator;\r\n}"},
 {"id":3900, "name":"setCoordinator(boolean)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.setCoordinator(boolean)", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public void setCoordinator(boolean responsible) {\r\n    myCoordinator = responsible;\r\n}"},
 {"id":3901, "name":"setLoad(float)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.setLoad(float)", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public void setLoad(float load) {\r\n    myLoad = load;\r\n    this.fireAssignmentChanged(this);\r\n}"},
 {"id":3902, "name":"setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public void setRoleForAssignment(Role role) {\r\n    myRoleForAssignment = role;\r\n}"},
 {"id":3903, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.toString()", "ownerclassid":"504", "ownerclassname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "sourcecode":"public String toString() {\r\n    return ((this.getResource().getName()) + \" -> \") + (this.getTask().getName());\r\n}"},
 {"id":3904, "name":"-init-(org.jdesktop.swing.table.TableColumnExt,int)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.-init-(org.jdesktop.swing.table.TableColumnExt,int)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"// public ResourceColumn(String name, int index, Class type) {\r\n// column = new TableColumnExt(index);\r\n// this.type = type;\r\n// this.setTitle(name);\r\n// defaultIndex = index;\r\n// }\r\n// \r\npublic ResourceColumn(TableColumnExt col, int index) {\r\n    this(col, index, String.class);\r\n}"},
 {"id":3905, "name":"-init-(org.jdesktop.swing.table.TableColumnExt,int,java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.-init-(org.jdesktop.swing.table.TableColumnExt,int,java.lang.Class)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public ResourceColumn(TableColumnExt col, int index, Class type) {\r\n    column = col;\r\n    this.type = type;\r\n    defaultIndex = index;\r\n    visible = true;\r\n}"},
 {"id":3906, "name":"getColumn()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getColumn()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"// public void setIndex(int defaultIndex)  {\r\n// this.defaultIndex = defaultIndex;\r\n// }\r\n// \r\npublic TableColumnExt getColumn() {\r\n    return column;\r\n}"},
 {"id":3907, "name":"getDefaultVal()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getDefaultVal()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public Object getDefaultVal() {\r\n    return defaultVal;\r\n}"},
 {"id":3908, "name":"getDefaultValue()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getDefaultValue()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public Object getDefaultValue() {\r\n    return defaultVal;\r\n}"},
 {"id":3909, "name":"getDefaultValueAsString()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getDefaultValueAsString()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public String getDefaultValueAsString() {\r\n    return HumanResourceManager.getValueAsString(defaultVal);\r\n}"},
 {"id":3910, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getID()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public String getID() {\r\n    return String.valueOf(defaultIndex);\r\n}"},
 {"id":3911, "name":"getIndex()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getIndex()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public int getIndex() {\r\n    return defaultIndex;\r\n}"},
 {"id":3912, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getName()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public String getName() {\r\n    return getTitle();\r\n}"},
 {"id":3913, "name":"getOrder()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getOrder()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public int getOrder() {\r\n    return myOrder;\r\n}"},
 {"id":3914, "name":"getTitle()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getTitle()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public String getTitle() {\r\n    return column.getTitle();\r\n}"},
 {"id":3915, "name":"getType()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getType()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public Class getType() {\r\n    return type;\r\n}"},
 {"id":3916, "name":"getTypeAsString()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getTypeAsString()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public String getTypeAsString() {\r\n    return net.sourceforge.ganttproject.CustomPropertyManager.PropertyTypeEncoder.encodeFieldType(type);\r\n}"},
 {"id":3917, "name":"getWidth()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.getWidth()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public int getWidth() {\r\n    return column.getWidth();\r\n}"},
 {"id":3918, "name":"isVisible()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.isVisible()", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public boolean isVisible() {\r\n    return visible;\r\n}"},
 {"id":3919, "name":"nameCmp(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.nameCmp(java.lang.String)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"// public ResourceColumn(TableColumnExt col, int index, Class type, Object def) {\r\n// column = col;\r\n// defaultIndex = index;\r\n// visible = true;\r\n// this.type = type;\r\n// defaultVal = def;\r\n// }\r\npublic boolean nameCmp(String name) {\r\n    System.out.println(((((\"comparing: \" + name) + \" - \") + (column.getTitle())) + \" \"));\r\n    return column.getTitle().equals(name);\r\n}"},
 {"id":3920, "name":"setDefaultVal(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.setDefaultVal(java.lang.Object)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public void setDefaultVal(Object defaultVal) {\r\n    this.defaultVal = defaultVal;\r\n}"},
 {"id":3921, "name":"setOrder(int)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.setOrder(int)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public void setOrder(int order) {\r\n    myOrder = order;\r\n}"},
 {"id":3922, "name":"setTitle(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.setTitle(java.lang.String)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public void setTitle(String title) {\r\n    column.setTitle(title);\r\n}"},
 {"id":3923, "name":"setType(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.setType(java.lang.Class)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public void setType(Class type) {\r\n    this.type = type;\r\n}"},
 {"id":3924, "name":"setVisible(boolean)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.setVisible(boolean)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public void setVisible(boolean vis) {\r\n    visible = vis;\r\n}"},
 {"id":3925, "name":"setWidth(int)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceColumn.setWidth(int)", "ownerclassid":"506", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceColumn", "sourcecode":"public void setWidth(int width) {\r\n    column.setWidth(width);\r\n}"},
 {"id":3926, "name":"getResources()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceContext.getResources()", "ownerclassid":"507", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceContext", "sourcecode":"/**\r\n *\r\n *\r\n * @return Resources selected at the moment\r\n */\r\npublic ProjectResource[] getResources();"},
 {"id":3927, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceEvent.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"508", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceEvent", "sourcecode":"/**\r\n *\r\n *\r\n * @param source\r\n * \t\t\r\n */\r\npublic ResourceEvent(ResourceManager mgr, ProjectResource resource) {\r\n    super(mgr);\r\n    myManager = mgr;\r\n    myResource = resource;\r\n    myResources = new ProjectResource[]{ myResource };\r\n}"},
 {"id":3928, "name":"-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ProjectResource[])", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceEvent.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ProjectResource[])", "ownerclassid":"508", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceEvent", "sourcecode":"public ResourceEvent(ResourceManager mgr, ProjectResource[] resources) {\r\n    super(mgr);\r\n    myManager = mgr;\r\n    myResources = resources;\r\n    myResource = ((resources.length) > 0) ? resources[0] : null;\r\n}"},
 {"id":3929, "name":"getManager()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceEvent.getManager()", "ownerclassid":"508", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceEvent", "sourcecode":"public ResourceManager getManager() {\r\n    return myManager;\r\n}"},
 {"id":3930, "name":"getResource()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceEvent.getResource()", "ownerclassid":"508", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceEvent", "sourcecode":"public ProjectResource getResource() {\r\n    return myResource;\r\n}"},
 {"id":3931, "name":"getResources()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceEvent.getResources()", "ownerclassid":"508", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceEvent", "sourcecode":"public ProjectResource[] getResources() {\r\n    return myResources;\r\n}"},
 {"id":3932, "name":"add(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.add(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"/**\r\n * Adds the resource to the internal list of available resources.\r\n *\r\n * @param resource\r\n * \t\tThe resource that should be added to the list.\r\n */\r\npublic void add(ProjectResource resource);"},
 {"id":3933, "name":"addView(net.sourceforge.ganttproject.resource.ResourceView)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.addView(net.sourceforge.ganttproject.resource.ResourceView)", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"/**\r\n * Adds a new view of this manager\r\n *\r\n * @param view\r\n * \t\t\r\n */\r\npublic void addView(ResourceView view);"},
 {"id":3934, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.clear()", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"/**\r\n * Removes all resources from the manager.\r\n */\r\npublic void clear();"},
 {"id":3935, "name":"create(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.create(java.lang.String,int)", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"public ProjectResource create(String name, int i);"},
 {"id":3936, "name":"getById(int)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.getById(int)", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"/**\r\n * Retrieves an ancestor of ProjectResource identified by an identity value.\r\n *\r\n * @param id\r\n * \t\tThe id is an integer value that is unique for every resource.\r\n * @return Ancestor of ProjectResource containing the requested resource.\r\n * @see ProjectResource\r\n */\r\npublic ProjectResource getById(int id);"},
 {"id":3937, "name":"getCustomPropertyManager()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.getCustomPropertyManager()", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"public CustomPropertyManager getCustomPropertyManager();"},
 {"id":3938, "name":"getResources()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.getResources()", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"// public void removeById(int Id);\r\n/**\r\n * Retrieves a list of all resources available.\r\n *\r\n * @return ArrayList filled with ProjectResource ancestors.\r\n * @see ProjectResource\r\n */\r\npublic List getResources();"},
 {"id":3939, "name":"getResourcesArray()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.getResourcesArray()", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"public ProjectResource[] getResourcesArray();"},
 {"id":3940, "name":"importData(net.sourceforge.ganttproject.resource.ResourceManager)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.importData(net.sourceforge.ganttproject.resource.ResourceManager)", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"public Map importData(ResourceManager resourceManager);"},
 {"id":3941, "name":"remove(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"/**\r\n * Removes the resource.\r\n *\r\n * @param resource\r\n * \t\tThe resource to remove.\r\n */\r\npublic void remove(ProjectResource resource);"},
 {"id":3942, "name":"remove(net.sourceforge.ganttproject.resource.ProjectResource,net.sourceforge.ganttproject.undo.GPUndoManager)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource,net.sourceforge.ganttproject.undo.GPUndoManager)", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"/**\r\n * Removes the resource by its id.\r\n *\r\n * @param Id\r\n * \t\tId of the resource to remove.\r\n */\r\npublic void remove(ProjectResource resource, GPUndoManager myUndoManager);"},
 {"id":3943, "name":"save(java.io.OutputStream)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceManager.save(java.io.OutputStream)", "ownerclassid":"509", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceManager", "sourcecode":"/**\r\n * Loads resources from the InputStreamReader. All resources already stored\r\n * in the Resourcemanager are lost and will be replace with the resources\r\n * loaded from the stream.\r\n *\r\n * @return The ArrayLisr returned contains all ProjectResource ancestor that\r\nwere read from the InputStreamReader.\r\n * @param source\r\n * \t\tThe InputStreamReader from which the data will be read. The\r\n * \t\tformat and kind of data read is subject of the class\r\n * \t\timplementing this interface.\r\n */\r\n// public ArrayList load (InputStream source);\r\n/**\r\n * Writes all resources stored in the OutputStreamWriter. The format and\r\n * kind of data written in the stream are subject of the class that\r\n * implements this interface.\r\n *\r\n * @param target\r\n * \t\tStream to write the data to.\r\n */\r\npublic void save(OutputStream target);"},
 {"id":3944, "name":"-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public ResourceNode(ProjectResource res) {\r\n    super(res);\r\n    resource = res;\r\n}"},
 {"id":3945, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.equals(java.lang.Object)", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public boolean equals(Object obj) {\r\n    boolean res = false;\r\n    if ((this) == obj)\r\n        return true;\r\n\r\n    if (obj instanceof ResourceNode) {\r\n        ResourceNode rn = ((ResourceNode) (obj));\r\n        res = ((rn.getUserObject()) != null) && (rn.getUserObject().equals(this.getUserObject()));\r\n    }\r\n    return res;\r\n}"},
 {"id":3946, "name":"getCustomField(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.getCustomField(java.lang.String)", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"/* gets the value of a custom field referenced by its title */\r\npublic Object getCustomField(String title) {\r\n    if ((resource) instanceof HumanResource)\r\n        return ((HumanResource) (resource)).getCustomFieldVal(title);\r\n\r\n    return null;\r\n}"},
 {"id":3947, "name":"getDefaultRole()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.getDefaultRole()", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public Role getDefaultRole() {\r\n    if ((resource) instanceof HumanResource)\r\n        return ((HumanResource) (resource)).getRole();\r\n\r\n    return null;\r\n}"},
 {"id":3948, "name":"getEMail()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.getEMail()", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public String getEMail() {\r\n    if ((resource) instanceof HumanResource)\r\n        return ((HumanResource) (resource)).getMail();\r\n\r\n    return null;\r\n}"},
 {"id":3949, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.getName()", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public String getName() {\r\n    return resource.getName();\r\n}"},
 {"id":3950, "name":"getPhone()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.getPhone()", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public String getPhone() {\r\n    if ((resource) instanceof HumanResource)\r\n        return ((HumanResource) (resource)).getPhone();\r\n\r\n    return null;\r\n}"},
 {"id":3951, "name":"getResource()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.getResource()", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public ProjectResource getResource() {\r\n    return resource;\r\n}"},
 {"id":3952, "name":"setCustomField(java.lang.String,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.setCustomField(java.lang.String,java.lang.Object)", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"/* gets the new value to the custom field referenced by its title */\r\npublic void setCustomField(String title, Object val) {\r\n    if ((resource) instanceof HumanResource)\r\n        ((HumanResource) (resource)).setCustomFieldVal(title, val);\r\n\r\n}"},
 {"id":3953, "name":"setDefaultRole(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.setDefaultRole(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public void setDefaultRole(Role defRole) {\r\n    if ((resource) instanceof HumanResource)\r\n        ((HumanResource) (resource)).setRole(defRole);\r\n\r\n}"},
 {"id":3954, "name":"setEMail(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.setEMail(java.lang.String)", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public void setEMail(String email) {\r\n    if ((resource) instanceof HumanResource)\r\n        ((HumanResource) (resource)).setMail(email);\r\n\r\n}"},
 {"id":3955, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.setName(java.lang.String)", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public void setName(String name) {\r\n    resource.setName(name);\r\n}"},
 {"id":3956, "name":"setPhone(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.setPhone(java.lang.String)", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"public void setPhone(String phoneNumber) {\r\n    if ((resource) instanceof HumanResource)\r\n        ((HumanResource) (resource)).setPhone(phoneNumber);\r\n\r\n}"},
 {"id":3957, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceNode.toString()", "ownerclassid":"510", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceNode", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic String toString() {\r\n    if ((resource) != null)\r\n        return resource.getName();\r\n\r\n    return \"-\";\r\n}"},
 {"id":3958, "name":"resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceView.resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"511", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceView", "sourcecode":"/**\r\n * This method is called whenever new resource appears in the resource\r\n * manager\r\n *\r\n * @param event\r\n * \t\tResource event object\r\n */\r\npublic void resourceAdded(ResourceEvent event);"},
 {"id":3959, "name":"resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceView.resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"511", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceView", "sourcecode":"public void resourceAssignmentsChanged(ResourceEvent e);"},
 {"id":3960, "name":"resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceView.resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"511", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceView", "sourcecode":"public void resourceChanged(ResourceEvent e);"},
 {"id":3961, "name":"resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "fullmethod":"net.sourceforge.ganttproject.resource.ResourceView.resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "ownerclassid":"511", "ownerclassname":"net.sourceforge.ganttproject.resource.ResourceView", "sourcecode":"public void resourcesRemoved(ResourceEvent event);"},
 {"id":3962, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.roles.Role.getID()", "ownerclassid":"512", "ownerclassname":"net.sourceforge.ganttproject.roles.Role", "sourcecode":"int getID();"},
 {"id":3963, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.roles.Role.getName()", "ownerclassid":"512", "ownerclassname":"net.sourceforge.ganttproject.roles.Role", "sourcecode":"String getName();"},
 {"id":3964, "name":"getPersistentID()", "fullmethod":"net.sourceforge.ganttproject.roles.Role.getPersistentID()", "ownerclassid":"512", "ownerclassname":"net.sourceforge.ganttproject.roles.Role", "sourcecode":"String getPersistentID();"},
 {"id":3965, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.Role.setName(java.lang.String)", "ownerclassid":"512", "ownerclassname":"net.sourceforge.ganttproject.roles.Role", "sourcecode":"void setName(String name);"},
 {"id":3966, "name":"-init-(int,java.lang.String,net.sourceforge.ganttproject.roles.RoleSet)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleImpl.-init-(int,java.lang.String,net.sourceforge.ganttproject.roles.RoleSet)", "ownerclassid":"513", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleImpl", "sourcecode":"public RoleImpl(int id, String name, RoleSet roleSet) {\r\n    myID = id;\r\n    myName = name;\r\n    myRoleSet = roleSet;\r\n    GanttLanguage.getInstance().addListener(new GanttLanguage.Listener() {\r\n        public void languageChanged(GanttLanguage.Event event) {\r\n            Role role = myRoleSet.findRole(myID);\r\n            if (role != null) {\r\n                myName = role.getName();\r\n            }\r\n        }\r\n    });\r\n}"},
 {"id":3967, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleImpl.-init-()", "ownerclassid":"513", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleImpl", "sourcecode":"1() {\r\n}"},
 {"id":3968, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleImpl.getID()", "ownerclassid":"513", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleImpl", "sourcecode":"public int getID() {\r\n    return myID;\r\n}"},
 {"id":3969, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleImpl.getName()", "ownerclassid":"513", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleImpl", "sourcecode":"public String getName() {\r\n    return myName;\r\n}"},
 {"id":3970, "name":"getPersistentID()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleImpl.getPersistentID()", "ownerclassid":"513", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleImpl", "sourcecode":"public String getPersistentID() {\r\n    return ((myRoleSet.getName()) == null ? \"\" : (myRoleSet.getName()) + \":\") + (getID());\r\n}"},
 {"id":3971, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleImpl.setName(java.lang.String)", "ownerclassid":"513", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleImpl", "sourcecode":"public void setName(String name) {\r\n    myName = name;\r\n}"},
 {"id":3972, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleImpl.toString()", "ownerclassid":"513", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleImpl", "sourcecode":"public String toString() {\r\n    return getName();\r\n}"},
 {"id":3973, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.-init-()", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"Access() {\r\n}"},
 {"id":3974, "name":"-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.roles.RoleSet)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.roles.RoleSet)", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public RoleEvent(RoleManager source, RoleSet changedRoleSet) {\r\n    super(source);\r\n    myChangedRoleSet = changedRoleSet;\r\n}"},
 {"id":3975, "name":"add(int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.add(int,java.lang.String)", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"/**\r\n * Load roles from the file\r\n */\r\n/**\r\n * Add a role on the list\r\n */\r\npublic void add(int ID, String role);"},
 {"id":3976, "name":"addRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.addRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public void addRoleListener(RoleManager.Listener listener);"},
 {"id":3977, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.clear()", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"/**\r\n * Clear the role list\r\n */\r\npublic void clear();"},
 {"id":3978, "name":"createRoleSet(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.createRoleSet(java.lang.String)", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public RoleSet createRoleSet(String name);"},
 {"id":3979, "name":"getDefaultRole()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.getDefaultRole()", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public Role getDefaultRole();"},
 {"id":3980, "name":"getEnabledRoles()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.getEnabledRoles()", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public Role[] getEnabledRoles();"},
 {"id":3981, "name":"getProjectLevelRoles()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.getProjectLevelRoles()", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"/**\r\n * Return all roles exept the default roles\r\n */\r\n// public String [] getRolesShort();\r\npublic Role[] getProjectLevelRoles();"},
 {"id":3982, "name":"getProjectRoleSet()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.getProjectRoleSet()", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public RoleSet getProjectRoleSet();"},
 {"id":3983, "name":"getRoleSet(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.getRoleSet(java.lang.String)", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public RoleSet getRoleSet(String rolesetName);"},
 {"id":3984, "name":"getRoleSets()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.getRoleSets()", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public RoleSet[] getRoleSets();"},
 {"id":3985, "name":"importData(net.sourceforge.ganttproject.roles.RoleManager)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.importData(net.sourceforge.ganttproject.roles.RoleManager)", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public void importData(RoleManager roleManager);"},
 {"id":3986, "name":"removeRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager.removeRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "ownerclassid":"517", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager", "sourcecode":"public void removeRoleListener(RoleManager.Listener listener);"},
 {"id":3987, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager$Access.-init-()", "ownerclassid":"514", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager$Access", "sourcecode":"Access() {\r\n}"},
 {"id":3988, "name":"getInstance()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager$Access.getInstance()", "ownerclassid":"514", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager$Access", "sourcecode":"public static RoleManager getInstance() {\r\n    return RoleManager.Access.ourInstance;\r\n}"},
 {"id":3989, "name":"rolesChanged(net.sourceforge.ganttproject.roles.RoleManager$RoleEvent)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager$Listener.rolesChanged(net.sourceforge.ganttproject.roles.RoleManager$RoleEvent)", "ownerclassid":"515", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager$Listener", "sourcecode":"public void rolesChanged(RoleManager.RoleEvent e);"},
 {"id":3990, "name":"-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.roles.RoleSet)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent.-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.roles.RoleSet)", "ownerclassid":"516", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent", "sourcecode":"public RoleEvent(RoleManager source, RoleSet changedRoleSet) {\r\n    super(source);\r\n    myChangedRoleSet = changedRoleSet;\r\n}"},
 {"id":3991, "name":"getChangedRoleSet()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent.getChangedRoleSet()", "ownerclassid":"516", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent", "sourcecode":"public RoleSet getChangedRoleSet() {\r\n    return myChangedRoleSet;\r\n}"},
 {"id":3992, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.-init-()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public RoleManagerImpl() {\r\n    DEFAULT_ROLE_SET = new RoleSetImpl(RoleSet.DEFAULT, this);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET = new RoleSetImpl(RoleSet.SOFTWARE_DEVELOPMENT, this);\r\n    createRoleSet();\r\n    clear();\r\n    myRoleSets.add(DEFAULT_ROLE_SET);\r\n    myRoleSets.add(SOFTWARE_DEVELOPMENT_ROLE_SET);\r\n    myProjectRoleSet.setEnabled(true);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.setEnabled(false);\r\n    GanttLanguage.getInstance().addListener(new GanttLanguage.Listener() {\r\n        public void languageChanged(GanttLanguage.Event event) {\r\n            changeRoleSet();\r\n        }\r\n    });\r\n}"},
 {"id":3993, "name":"add(int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.add(int,java.lang.String)", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"/**\r\n * Add a role on the list\r\n */\r\npublic void add(int ID, String roleName) {\r\n    // myProjectLevelRoles.add(newRole(ID, role));\r\n    myProjectRoleSet.createRole(roleName, ID);\r\n}"},
 {"id":3994, "name":"addRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.addRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public void addRoleListener(RoleManager.Listener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":3995, "name":"changeRoleSet()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.changeRoleSet()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"private void changeRoleSet() {\r\n    GanttLanguage language = GanttLanguage.getInstance();\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resDeveloper\"), 2);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resDocWriter\"), 3);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resTester\"), 4);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resGraphicDesigner\"), 5);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resDocTranslator\"), 6);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resPackager\"), 7);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resAnalysis\"), 8);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resWebDesigner\"), 9);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.changeRole(language.getText(\"resNoSpecificRole\"), 10);\r\n    DEFAULT_ROLE_SET.changeRole(language.getText(\"resUndefined\"), 0);\r\n    DEFAULT_ROLE_SET.changeRole(language.getText(\"resProjectManager\"), 1);\r\n}"},
 {"id":3996, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.clear()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public void clear() {\r\n    myProjectRoleSet = new RoleSetImpl(null, this);\r\n    for (int i = 0; i < (myRoleSets.size()); i++) {\r\n        RoleSet next = ((RoleSet) (myRoleSets.get(i)));\r\n        next.setEnabled(false);\r\n    }\r\n    myProjectRoleSet.setEnabled(true);\r\n    DEFAULT_ROLE_SET.setEnabled(true);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.setEnabled(false);\r\n}"},
 {"id":3997, "name":"createRoleSet()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.createRoleSet()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"private void createRoleSet() {\r\n    GanttLanguage language = GanttLanguage.getInstance();\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.clear();\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resDeveloper\"), 2);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resDocWriter\"), 3);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resTester\"), 4);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resGraphicDesigner\"), 5);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resDocTranslator\"), 6);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resPackager\"), 7);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resAnalysis\"), 8);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resWebDesigner\"), 9);\r\n    SOFTWARE_DEVELOPMENT_ROLE_SET.createRole(language.getText(\"resNoSpecificRole\"), 10);\r\n    DEFAULT_ROLE_SET.clear();\r\n    DEFAULT_ROLE_SET.createRole(language.getText(\"resUndefined\"), 0);\r\n    DEFAULT_ROLE_SET.createRole(language.getText(\"resProjectManager\"), 1);\r\n    DEFAULT_ROLE_SET.setEnabled(true);\r\n}"},
 {"id":3998, "name":"createRoleSet(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.createRoleSet(java.lang.String)", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public RoleSet createRoleSet(String name) {\r\n    RoleSet result = new RoleSetImpl(name, this);\r\n    myRoleSets.add(result);\r\n    // System.err.println(\"[RoleManagerImpl] createRoleSet():\r\n    // created:\"+name);\r\n    return result;\r\n}"},
 {"id":3999, "name":"fireRolesChanged(net.sourceforge.ganttproject.roles.RoleSet)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.fireRolesChanged(net.sourceforge.ganttproject.roles.RoleSet)", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"void fireRolesChanged(RoleSet changedRoleSet) {\r\n    RoleManager.RoleEvent event = new RoleManager.RoleEvent(this, changedRoleSet);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        RoleManager.Listener next = ((RoleManager.Listener) (myListeners.get(i)));\r\n        next.rolesChanged(event);\r\n    }\r\n}"},
 {"id":4000, "name":"getDefaultRole()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.getDefaultRole()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public Role getDefaultRole() {\r\n    return DEFAULT_ROLE_SET.findRole(0);\r\n}"},
 {"id":4001, "name":"getEnabledRoles()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.getEnabledRoles()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public Role[] getEnabledRoles() {\r\n    ArrayList result = new ArrayList();\r\n    RoleSet[] roleSets = getRoleSets();\r\n    for (int i = 0; i < (roleSets.length); i++) {\r\n        if (roleSets[i].isEnabled()) {\r\n            result.addAll(Arrays.asList(roleSets[i].getRoles()));\r\n        }\r\n    }\r\n    result.addAll(Arrays.asList(getProjectRoleSet().getRoles()));\r\n    return ((Role[]) (result.toArray(new Role[0])));\r\n}"},
 {"id":4002, "name":"getProjectLevelRoles()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.getProjectLevelRoles()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public Role[] getProjectLevelRoles() {\r\n    return myProjectRoleSet.getRoles();\r\n}"},
 {"id":4003, "name":"getProjectRoleSet()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.getProjectRoleSet()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public RoleSet getProjectRoleSet() {\r\n    return myProjectRoleSet;\r\n}"},
 {"id":4004, "name":"getRoleSet(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.getRoleSet(java.lang.String)", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public RoleSet getRoleSet(String rolesetName) {\r\n    RoleSet result = null;\r\n    RoleSet[] roleSets = getRoleSets();\r\n    for (int i = 0; i < (roleSets.length); i++) {\r\n        if (roleSets[i].getName().equals(rolesetName)) {\r\n            result = roleSets[i];\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":4005, "name":"getRoleSets()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.getRoleSets()", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public RoleSet[] getRoleSets() {\r\n    return ((RoleSet[]) (myRoleSets.toArray(new RoleSet[0])));\r\n}"},
 {"id":4006, "name":"importData(net.sourceforge.ganttproject.roles.RoleManager)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.importData(net.sourceforge.ganttproject.roles.RoleManager)", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public void importData(RoleManager original) {\r\n    myProjectRoleSet.importData(original.getProjectRoleSet());\r\n    RoleSet[] originalRoleSets = original.getRoleSets();\r\n    HashSet thisNames = new HashSet();\r\n    for (int i = 0; i < (myRoleSets.size()); i++) {\r\n        RoleSet next = ((RoleSet) (myRoleSets.get(i)));\r\n        thisNames.add(next.getName());\r\n    }\r\n    for (int i = 0; i < (originalRoleSets.length); i++) {\r\n        RoleSet next = originalRoleSets[i];\r\n        if (!(thisNames.contains(next.getName()))) {\r\n            myRoleSets.add(next);\r\n        }\r\n    }\r\n    // myRoleSets.addAll(Arrays.asList(originalRoleSets));\r\n}"},
 {"id":4007, "name":"removeRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleManagerImpl.removeRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "ownerclassid":"518", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "sourcecode":"public void removeRoleListener(RoleManager.Listener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":4008, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.roles.RolePersistentID.-init-(java.lang.String)", "ownerclassid":"519", "ownerclassname":"net.sourceforge.ganttproject.roles.RolePersistentID", "sourcecode":"public RolePersistentID(String persistentID) {\r\n    int posDelimiter = persistentID.lastIndexOf(RolePersistentID.ROLESET_DELIMITER);\r\n    String rolesetName = (posDelimiter == (-1)) ? null : persistentID.substring(0, posDelimiter);\r\n    String roleIDasString = (posDelimiter == (-1)) ? persistentID : persistentID.substring((posDelimiter + 1));\r\n    int roleID;\r\n    try {\r\n        roleID = Integer.parseInt(roleIDasString);\r\n    } catch (NumberFormatException e) {\r\n        roleID = 0;\r\n    }\r\n    myRoleID = roleID;\r\n    myRoleSetID = rolesetName;\r\n}"},
 {"id":4009, "name":"asString()", "fullmethod":"net.sourceforge.ganttproject.roles.RolePersistentID.asString()", "ownerclassid":"519", "ownerclassname":"net.sourceforge.ganttproject.roles.RolePersistentID", "sourcecode":"public String asString() {\r\n    return ((myRoleSetID) + (RolePersistentID.ROLESET_DELIMITER)) + (myRoleID);\r\n}"},
 {"id":4010, "name":"getRoleID()", "fullmethod":"net.sourceforge.ganttproject.roles.RolePersistentID.getRoleID()", "ownerclassid":"519", "ownerclassname":"net.sourceforge.ganttproject.roles.RolePersistentID", "sourcecode":"public int getRoleID() {\r\n    return myRoleID;\r\n}"},
 {"id":4011, "name":"getRoleSetID()", "fullmethod":"net.sourceforge.ganttproject.roles.RolePersistentID.getRoleSetID()", "ownerclassid":"519", "ownerclassname":"net.sourceforge.ganttproject.roles.RolePersistentID", "sourcecode":"public String getRoleSetID() {\r\n    return myRoleSetID;\r\n}"},
 {"id":4012, "name":"changeRole(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.changeRole(java.lang.String,int)", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"void changeRole(String name, int roleID);"},
 {"id":4013, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.clear()", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"void clear();"},
 {"id":4014, "name":"createRole(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.createRole(java.lang.String,int)", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"Role createRole(String name, int persistentID);"},
 {"id":4015, "name":"deleteRole(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.deleteRole(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"void deleteRole(Role role);"},
 {"id":4016, "name":"findRole(int)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.findRole(int)", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"Role findRole(int roleID);"},
 {"id":4017, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.getName()", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"String getName();"},
 {"id":4018, "name":"getRoles()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.getRoles()", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"Role[] getRoles();"},
 {"id":4019, "name":"isEmpty()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.isEmpty()", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"boolean isEmpty();"},
 {"id":4020, "name":"isEnabled()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.isEnabled()", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"boolean isEnabled();"},
 {"id":4021, "name":"setEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSet.setEnabled(boolean)", "ownerclassid":"520", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSet", "sourcecode":"void setEnabled(boolean isEnabled);"},
 {"id":4022, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.roles.RoleManagerImpl)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.-init-(java.lang.String,net.sourceforge.ganttproject.roles.RoleManagerImpl)", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"RoleSetImpl(String name, RoleManagerImpl roleManager) {\r\n    myName = name;\r\n    myRoleManager = roleManager;\r\n}"},
 {"id":4023, "name":"changeRole(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.changeRole(java.lang.String,int)", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public void changeRole(String name, int roleID) {\r\n    Role role = findRole(roleID);\r\n    if (role != null) {\r\n        role.setName(name);\r\n    }\r\n}"},
 {"id":4024, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.clear()", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public void clear() {\r\n    myRoles.clear();\r\n}"},
 {"id":4025, "name":"createRole(java.lang.String,int)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.createRole(java.lang.String,int)", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public Role createRole(String name, int persistentID) {\r\n    RoleImpl result = new RoleImpl(persistentID, name, this);\r\n    myRoles.add(result);\r\n    myRoleManager.fireRolesChanged(this);\r\n    return result;\r\n}"},
 {"id":4026, "name":"deleteRole(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.deleteRole(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public void deleteRole(Role role) {\r\n    myRoles.remove(role);\r\n    myRoleManager.fireRolesChanged(this);\r\n}"},
 {"id":4027, "name":"findRole(int)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.findRole(int)", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public Role findRole(int roleID) {\r\n    Role result = null;\r\n    for (int i = 0; i < (myRoles.size()); i++) {\r\n        Role next = ((Role) (myRoles.get(i)));\r\n        if ((next.getID()) == roleID) {\r\n            result = next;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":4028, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.getName()", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public String getName() {\r\n    return myName;\r\n}"},
 {"id":4029, "name":"getRoles()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.getRoles()", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public Role[] getRoles() {\r\n    return ((Role[]) (myRoles.toArray(new Role[0])));\r\n}"},
 {"id":4030, "name":"importData(net.sourceforge.ganttproject.roles.RoleSet)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.importData(net.sourceforge.ganttproject.roles.RoleSet)", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"void importData(RoleSet original) {\r\n    Role[] originalRoles = original.getRoles();\r\n    for (int i = 0; i < (originalRoles.length); i++) {\r\n        Role nextRole = originalRoles[i];\r\n        createRole(nextRole.getName(), nextRole.getID());\r\n    }\r\n}"},
 {"id":4031, "name":"isEmpty()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.isEmpty()", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public boolean isEmpty() {\r\n    return myRoles.isEmpty();\r\n}"},
 {"id":4032, "name":"isEnabled()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.isEnabled()", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public boolean isEnabled() {\r\n    return isEnabled;\r\n}"},
 {"id":4033, "name":"setEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.setEnabled(boolean)", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public void setEnabled(boolean isEnabled) {\r\n    this.isEnabled = isEnabled;\r\n    myRoleManager.fireRolesChanged(this);\r\n}"},
 {"id":4034, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.roles.RoleSetImpl.toString()", "ownerclassid":"521", "ownerclassname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "sourcecode":"public String toString() {\r\n    return getName();\r\n}"},
 {"id":4035, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.shape.ColorConstants.-init-()", "ownerclassid":"522", "ownerclassname":"net.sourceforge.ganttproject.shape.ColorConstants", "sourcecode":"ColorConstants() {\r\n}"},
 {"id":4036, "name":"-init-(java.awt.Paint[])", "fullmethod":"net.sourceforge.ganttproject.shape.JPaintCombo.-init-(java.awt.Paint[])", "ownerclassid":"523", "ownerclassname":"net.sourceforge.ganttproject.shape.JPaintCombo", "sourcecode":"public JPaintCombo(Paint[] list) {\r\n    super(list);\r\n    myList = list;\r\n    setRenderer(new PaintCellRenderer());\r\n}"},
 {"id":4037, "name":"getSelectedPaint()", "fullmethod":"net.sourceforge.ganttproject.shape.JPaintCombo.getSelectedPaint()", "ownerclassid":"523", "ownerclassname":"net.sourceforge.ganttproject.shape.JPaintCombo", "sourcecode":"public Paint getSelectedPaint() {\r\n    return ((Paint) (getSelectedItem()));\r\n}"},
 {"id":4038, "name":"-init-(java.awt.Paint[])", "fullmethod":"net.sourceforge.ganttproject.shape.JPaintList.-init-(java.awt.Paint[])", "ownerclassid":"524", "ownerclassname":"net.sourceforge.ganttproject.shape.JPaintList", "sourcecode":"public JPaintList(Paint[] list) {\r\n    super(list);\r\n    setCellRenderer(new PaintCellRenderer());\r\n    setSelectedIndex(0);\r\n}"},
 {"id":4039, "name":"getSelectedPaint()", "fullmethod":"net.sourceforge.ganttproject.shape.JPaintList.getSelectedPaint()", "ownerclassid":"524", "ownerclassname":"net.sourceforge.ganttproject.shape.JPaintList", "sourcecode":"public Paint getSelectedPaint() {\r\n    return ((Paint) (getSelectedValue()));\r\n}"},
 {"id":4040, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.shape.PaintCellRenderer.-init-()", "ownerclassid":"525", "ownerclassname":"net.sourceforge.ganttproject.shape.PaintCellRenderer", "sourcecode":"public PaintCellRenderer() {\r\n    setPreferredSize(new Dimension(70, 16));\r\n}"},
 {"id":4041, "name":"getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)", "fullmethod":"net.sourceforge.ganttproject.shape.PaintCellRenderer.getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)", "ownerclassid":"525", "ownerclassname":"net.sourceforge.ganttproject.shape.PaintCellRenderer", "sourcecode":"public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean hasFocus) {\r\n    Border border = (isSelected) ? selectBorder : normalBorder;\r\n    setBorder((hasFocus ? focusBorder : border));\r\n    if (value instanceof Paint) {\r\n        paint = ((Paint) (value));\r\n    }\r\n    return this;\r\n}"},
 {"id":4042, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.shape.PaintCellRenderer.paintComponent(java.awt.Graphics)", "ownerclassid":"525", "ownerclassname":"net.sourceforge.ganttproject.shape.PaintCellRenderer", "sourcecode":"public void paintComponent(Graphics gc) {\r\n    Graphics2D g = ((Graphics2D) (gc));\r\n    int w = getSize().width;\r\n    int h = getSize().height;\r\n    Insets insets = getInsets();\r\n    Rectangle rect = new Rectangle(insets.left, insets.top, (w - ((insets.left) + (insets.right))), (h - ((insets.top) + (insets.bottom))));\r\n    g.setPaint(paint);\r\n    g.fill(rect);\r\n}"},
 {"id":4043, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.shape.PreviewPanel.-init-()", "ownerclassid":"526", "ownerclassname":"net.sourceforge.ganttproject.shape.PreviewPanel", "sourcecode":"public PreviewPanel() {\r\n    setOpaque(true);\r\n    setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder(\"Preview\"), BorderFactory.createEmptyBorder(0, 4, 8, 4)));\r\n    setPreferredSize(new Dimension(70, 70));\r\n}"},
 {"id":4044, "name":"getPattern()", "fullmethod":"net.sourceforge.ganttproject.shape.PreviewPanel.getPattern()", "ownerclassid":"526", "ownerclassname":"net.sourceforge.ganttproject.shape.PreviewPanel", "sourcecode":"public ShapePaint getPattern() {\r\n    return new ShapePaint(pattern, getForeground(), getBackground());\r\n}"},
 {"id":4045, "name":"paintComponent(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.shape.PreviewPanel.paintComponent(java.awt.Graphics)", "ownerclassid":"526", "ownerclassname":"net.sourceforge.ganttproject.shape.PreviewPanel", "sourcecode":"public void paintComponent(Graphics gc) {\r\n    Graphics2D g = ((Graphics2D) (gc));\r\n    int w = getSize().width;\r\n    int h = getSize().height;\r\n    g.setColor(getParent().getBackground());\r\n    g.fillRect(0, 0, w, h);\r\n    if ((pattern) == null)\r\n        return;\r\n\r\n    Insets insets = getInsets();\r\n    Rectangle rect = new Rectangle(insets.left, insets.top, (w - ((insets.left) + (insets.right))), (h - ((insets.top) + (insets.bottom))));\r\n    g.setPaint(new ShapePaint(pattern, getForeground(), getBackground()));\r\n    g.fill(rect);\r\n}"},
 {"id":4046, "name":"setPattern(net.sourceforge.ganttproject.shape.ShapePaint)", "fullmethod":"net.sourceforge.ganttproject.shape.PreviewPanel.setPattern(net.sourceforge.ganttproject.shape.ShapePaint)", "ownerclassid":"526", "ownerclassname":"net.sourceforge.ganttproject.shape.PreviewPanel", "sourcecode":"public void setPattern(ShapePaint pattern) {\r\n    this.pattern = pattern;\r\n}"},
 {"id":4047, "name":"-init-(boolean)", "fullmethod":"net.sourceforge.ganttproject.shape.Shape.-init-(boolean)", "ownerclassid":"527", "ownerclassname":"net.sourceforge.ganttproject.shape.Shape", "sourcecode":"public Shape(boolean compactDisplay) {\r\n    this.compactDisplay = compactDisplay;\r\n    JPanel choicePanel = new JPanel(new BorderLayout(4, 4));\r\n    preview = new PreviewPanel();\r\n    if (compactDisplay) {\r\n        JPanel prompts = new JPanel(new GridLayout(3, 1, 4, 4));\r\n        prompts.add(new JLabel(\"Pattern:\", JLabel.RIGHT));\r\n        prompts.add(new JLabel(\"Foreground:\", JLabel.RIGHT));\r\n        prompts.add(new JLabel(\"Background:\", JLabel.RIGHT));\r\n        JPanel menus = new JPanel(new GridLayout(3, 1, 4, 4));\r\n        menus.add((patternCombo = new JPaintCombo(ShapeConstants.PATTERN_LIST)));\r\n        menus.add((foregroundCombo = new JPaintCombo(ColorConstants.SHORT_LIST)));\r\n        menus.add((backgroundCombo = new JPaintCombo(ColorConstants.SHORT_LIST)));\r\n        patternCombo.addActionListener(this);\r\n        foregroundCombo.addActionListener(this);\r\n        backgroundCombo.addActionListener(this);\r\n        choicePanel.add(BorderLayout.WEST, prompts);\r\n        choicePanel.add(BorderLayout.CENTER, menus);\r\n        preview.setPattern(((ShapePaint) (patternCombo.getSelectedPaint())));\r\n    } else {\r\n        JPanel labels = new JPanel(new GridLayout(1, 3, 4, 4));\r\n        labels.add(new JLabel(\"Pattern:\"));\r\n        labels.add(new JLabel(\"Foreground:\"));\r\n        labels.add(new JLabel(\"Background:\"));\r\n        patternList = new JPaintList(ShapeConstants.PATTERN_LIST);\r\n        foregroundList = new JPaintList(ColorConstants.SHORT_LIST);\r\n        backgroundList = new JPaintList(ColorConstants.SHORT_LIST);\r\n        JPanel lists = new JPanel(new GridLayout(1, 3, 4, 4));\r\n        lists.add(new JScrollPane(patternList, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));\r\n        lists.add(new JScrollPane(foregroundList, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));\r\n        lists.add(new JScrollPane(backgroundList, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));\r\n        patternList.addListSelectionListener(this);\r\n        foregroundList.addListSelectionListener(this);\r\n        backgroundList.addListSelectionListener(this);\r\n        choicePanel.add(BorderLayout.NORTH, labels);\r\n        choicePanel.add(BorderLayout.CENTER, lists);\r\n        preview.setPattern(((ShapePaint) (patternList.getSelectedPaint())));\r\n    }\r\n    setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));\r\n    setLayout(new BorderLayout(8, 8));\r\n    add(BorderLayout.NORTH, choicePanel);\r\n    add(BorderLayout.CENTER, preview);\r\n}"},
 {"id":4048, "name":"actionPerformed(java.awt.event.ActionEvent)", "fullmethod":"net.sourceforge.ganttproject.shape.Shape.actionPerformed(java.awt.event.ActionEvent)", "ownerclassid":"527", "ownerclassname":"net.sourceforge.ganttproject.shape.Shape", "sourcecode":"public void actionPerformed(ActionEvent event) {\r\n    Object source = event.getSource();\r\n    if (source == (patternCombo)) {\r\n        preview.setPattern(((ShapePaint) (patternCombo.getSelectedPaint())));\r\n    }\r\n    if (source == (foregroundCombo)) {\r\n        preview.setForeground(((Color) (foregroundCombo.getSelectedPaint())));\r\n    }\r\n    if (source == (backgroundCombo)) {\r\n        preview.setBackground(((Color) (backgroundCombo.getSelectedPaint())));\r\n    }\r\n    fireActionEvent();\r\n    preview.repaint();\r\n}"},
 {"id":4049, "name":"addActionListener(java.awt.event.ActionListener)", "fullmethod":"net.sourceforge.ganttproject.shape.Shape.addActionListener(java.awt.event.ActionListener)", "ownerclassid":"527", "ownerclassname":"net.sourceforge.ganttproject.shape.Shape", "sourcecode":"public void addActionListener(ActionListener listener) {\r\n    listeners.add(listener);\r\n}"},
 {"id":4050, "name":"fireActionEvent()", "fullmethod":"net.sourceforge.ganttproject.shape.Shape.fireActionEvent()", "ownerclassid":"527", "ownerclassname":"net.sourceforge.ganttproject.shape.Shape", "sourcecode":"public void fireActionEvent() {\r\n    ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, \"Pattern\");\r\n    ArrayList list = ((ArrayList) (listeners.clone()));\r\n    ActionListener listener;\r\n    for (int i = 0; i < (list.size()); i++) {\r\n        listener = ((ActionListener) (list.get(i)));\r\n        listener.actionPerformed(event);\r\n    }\r\n}"},
 {"id":4051, "name":"getPattern()", "fullmethod":"net.sourceforge.ganttproject.shape.Shape.getPattern()", "ownerclassid":"527", "ownerclassname":"net.sourceforge.ganttproject.shape.Shape", "sourcecode":"public ShapePaint getPattern() {\r\n    return preview.getPattern();\r\n}"},
 {"id":4052, "name":"removeActionListener(java.awt.event.ActionListener)", "fullmethod":"net.sourceforge.ganttproject.shape.Shape.removeActionListener(java.awt.event.ActionListener)", "ownerclassid":"527", "ownerclassname":"net.sourceforge.ganttproject.shape.Shape", "sourcecode":"public void removeActionListener(ActionListener listener) {\r\n    listeners.remove(listener);\r\n}"},
 {"id":4053, "name":"setPattern(net.sourceforge.ganttproject.shape.ShapePaint)", "fullmethod":"net.sourceforge.ganttproject.shape.Shape.setPattern(net.sourceforge.ganttproject.shape.ShapePaint)", "ownerclassid":"527", "ownerclassname":"net.sourceforge.ganttproject.shape.Shape", "sourcecode":"public void setPattern(ShapePaint pattern) {\r\n    preview.setPattern(pattern);\r\n    if (compactDisplay) {\r\n        patternCombo.setSelectedItem(new ShapePaint(pattern, Color.black, Color.white));\r\n        foregroundCombo.setSelectedItem(pattern.foreground);\r\n        backgroundCombo.setSelectedItem(pattern.background);\r\n    } else {\r\n        patternList.setSelectedValue(new ShapePaint(pattern, Color.black, Color.white), true);\r\n        foregroundList.setSelectedValue(pattern.foreground, true);\r\n        backgroundList.setSelectedValue(pattern.background, true);\r\n    }\r\n    fireActionEvent();\r\n}"},
 {"id":4054, "name":"valueChanged(javax.swing.event.ListSelectionEvent)", "fullmethod":"net.sourceforge.ganttproject.shape.Shape.valueChanged(javax.swing.event.ListSelectionEvent)", "ownerclassid":"527", "ownerclassname":"net.sourceforge.ganttproject.shape.Shape", "sourcecode":"public void valueChanged(ListSelectionEvent event) {\r\n    if (event.getValueIsAdjusting())\r\n        return;\r\n\r\n    Object source = event.getSource();\r\n    if (source == (patternList)) {\r\n        preview.setPattern(((ShapePaint) (patternList.getSelectedPaint())));\r\n    }\r\n    if (source == (foregroundList)) {\r\n        preview.setForeground(((Color) (foregroundList.getSelectedPaint())));\r\n    }\r\n    if (source == (backgroundList)) {\r\n        preview.setBackground(((Color) (backgroundList.getSelectedPaint())));\r\n    }\r\n    fireActionEvent();\r\n    preview.repaint();\r\n}"},
 {"id":4055, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.shape.ShapeConstants.-init-()", "ownerclassid":"528", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapeConstants", "sourcecode":"ShapeConstants() {\r\n}"},
 {"id":4056, "name":"-init-(net.sourceforge.ganttproject.shape.ShapePaint)", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.-init-(net.sourceforge.ganttproject.shape.ShapePaint)", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ShapePaint(ShapePaint pattern) {\r\n    this(pattern.width, pattern.height, pattern.array, pattern.foreground, pattern.background);\r\n}"},
 {"id":4057, "name":"-init-(net.sourceforge.ganttproject.shape.ShapePaint,java.awt.Color,java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.-init-(net.sourceforge.ganttproject.shape.ShapePaint,java.awt.Color,java.awt.Color)", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ShapePaint(ShapePaint pattern, Color foreground, Color background) {\r\n    this(pattern.width, pattern.height, pattern.array, foreground, background);\r\n}"},
 {"id":4058, "name":"-init-(int,int,int[])", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.-init-(int,int,int[])", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ShapePaint(int width, int height, int[] array) {\r\n    this(width, height, array, Color.black, Color.white);\r\n}"},
 {"id":4059, "name":"-init-(int,int,int[],java.awt.Color,java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.-init-(int,int,int[],java.awt.Color,java.awt.Color)", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ShapePaint(int width, int height, int[] array, Color foreground, Color background) {\r\n    super(ShapePaint.createTexture(width, height, array, foreground, background), new Rectangle(0, 0, width, height));\r\n    this.width = width;\r\n    this.height = height;\r\n    this.array = array;\r\n    this.foreground = foreground;\r\n    this.background = background;\r\n}"},
 {"id":4060, "name":"createTexture(int,int,int[],java.awt.Color,java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.createTexture(int,int,int[],java.awt.Color,java.awt.Color)", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"private static BufferedImage createTexture(int width, int height, int[] array, Color foreground, Color background) {\r\n    BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\r\n    for (int x = 0; x < width; x++) {\r\n        for (int y = 0; y < height; y++) {\r\n            image.setRGB(x, y, ((array[(x + (y * width))]) > 0 ? foreground.getRGB() : background.getRGB()));\r\n        }\r\n    }\r\n    return image;\r\n}"},
 {"id":4061, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.equals(java.lang.Object)", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Return true if the two shape are the same\r\n */\r\npublic boolean equals(Object obj) {\r\n    if (obj instanceof ShapePaint) {\r\n        ShapePaint paint = ((ShapePaint) (obj));\r\n        if ((array.length) != (paint.array.length))\r\n            return false;\r\n\r\n        for (int i = 0; i < (array.length); i++)\r\n            if ((array[i]) != (paint.array[i]))\r\n                return false;\r\n\r\n\r\n        // paint.array.equals(array) &&\r\n        return ((paint.width) == (width)) && ((paint.height) == (height));\r\n    }\r\n    return false;\r\n}"},
 {"id":4062, "name":"getArray()", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.getArray()", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Return the array of the shape on a string\r\n */\r\npublic String getArray() {\r\n    String result = \"\";\r\n    if ((array) != null)\r\n        for (int i = 0; i < (array.length); i++) {\r\n            result += (array[i]) + \",\";\r\n        }\r\n\r\n    return (result.length()) != 0 ? result.trim().substring(0, ((result.trim().length()) - 1)) : \"\";\r\n}"},
 {"id":4063, "name":"getarray()", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.getarray()", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Return the array of the shape\r\n */\r\npublic int[] getarray() {\r\n    return array;\r\n}"},
 {"id":4064, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.toString()", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Return a string for the shape\r\n */\r\npublic String toString() {\r\n    StringBuffer buffer = new StringBuffer();\r\n    buffer.append(\"PatternPaint[\");\r\n    buffer.append((\"[width=\" + (width)));\r\n    buffer.append((\",height=\" + (height)));\r\n    buffer.append(\",array={\");\r\n    for (int i = 0; i < (array.length); i++) {\r\n        if (i > 0)\r\n            buffer.append(\",\");\r\n\r\n        buffer.append((\"\" + (array[i])));\r\n    }\r\n    buffer.append((\"},foreground=\" + (foreground)));\r\n    buffer.append(((\",background=\" + (background)) + \"]\"));\r\n    return buffer.toString();\r\n}"},
 {"id":4065, "name":"toString2()", "fullmethod":"net.sourceforge.ganttproject.shape.ShapePaint.toString2()", "ownerclassid":"529", "ownerclassname":"net.sourceforge.ganttproject.shape.ShapePaint", "sourcecode":"/**\r\n * Just for debug\r\n */\r\npublic String toString2() {\r\n    StringBuffer buffer = new StringBuffer();\r\n    buffer.append((\"[\" + (width)));\r\n    buffer.append((\",\" + (height)));\r\n    buffer.append(\"] {\");\r\n    for (int i = 0; i < (array.length); i++) {\r\n        if (i > 0)\r\n            buffer.append(\",\");\r\n\r\n        buffer.append((\"\" + (array[i])));\r\n    }\r\n    buffer.append(\"}\");\r\n    return buffer.toString();\r\n}"},
 {"id":4066, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.BlankLineNode.-init-()", "ownerclassid":"530", "ownerclassname":"net.sourceforge.ganttproject.task.BlankLineNode", "sourcecode":"public BlankLineNode() {\r\n    super(BlankLineNode.BLANK_LINE);\r\n}"},
 {"id":4067, "name":"-init-(int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumEvent.-init-(int,java.lang.String)", "ownerclassid":"531", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumEvent", "sourcecode":"public CustomColumEvent(int type, String colName) {\r\n    myType = type;\r\n    myColName = colName;\r\n    myColumn = null;\r\n    myOldName = colName;\r\n}"},
 {"id":4068, "name":"-init-(int,net.sourceforge.ganttproject.task.CustomColumn)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumEvent.-init-(int,net.sourceforge.ganttproject.task.CustomColumn)", "ownerclassid":"531", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumEvent", "sourcecode":"public CustomColumEvent(int type, CustomColumn column) {\r\n    myType = type;\r\n    myColumn = column;\r\n    myColName = column.getName();\r\n    myOldName = myColName;\r\n}"},
 {"id":4069, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.task.CustomColumn)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumEvent.-init-(java.lang.String,net.sourceforge.ganttproject.task.CustomColumn)", "ownerclassid":"531", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumEvent", "sourcecode":"CustomColumEvent(String oldName, CustomColumn column) {\r\n    myOldName = oldName;\r\n    myType = CustomColumEvent.EVENT_RENAME;\r\n    myColName = column.getName();\r\n    myColumn = column;\r\n}"},
 {"id":4070, "name":"getColName()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumEvent.getColName()", "ownerclassid":"531", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumEvent", "sourcecode":"public String getColName() {\r\n    return myColName;\r\n}"},
 {"id":4071, "name":"getColumn()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumEvent.getColumn()", "ownerclassid":"531", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumEvent", "sourcecode":"public CustomColumn getColumn() {\r\n    return myColumn;\r\n}"},
 {"id":4072, "name":"getOldName()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumEvent.getOldName()", "ownerclassid":"531", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumEvent", "sourcecode":"public String getOldName() {\r\n    return myOldName;\r\n}"},
 {"id":4073, "name":"getType()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumEvent.getType()", "ownerclassid":"531", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumEvent", "sourcecode":"public int getType() {\r\n    return myType;\r\n}"},
 {"id":4074, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.-init-()", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Creates an instance of CustomColmn.\r\n */\r\npublic CustomColumn() {\r\n}"},
 {"id":4075, "name":"-init-(java.lang.String,java.lang.Class,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.-init-(java.lang.String,java.lang.Class,java.lang.Object)", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Creates an instance of CustomColmn with a name, a type (class) and a\r\n * default value.\r\n *\r\n * @param colName\r\n * \t\tThe column name.\r\n * @param colType\r\n * \t\tThe colmun type.\r\n * @param colDefaultValue\r\n * \t\tThe default value.\r\n */\r\npublic CustomColumn(String colName, Class colType, Object colDefaultValue) {\r\n    name = colName;\r\n    type = colType;\r\n    defaultValue = colDefaultValue;\r\n}"},
 {"id":4076, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.-init-(java.lang.String)", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Creates an instance of CustomColmn. The type is String and the default\r\n * value is en empty String.\r\n *\r\n * @param colName\r\n * \t\tThe column name.\r\n */\r\npublic CustomColumn(String colName) {\r\n    name = colName;\r\n    type = String.class;\r\n    defaultValue = \"\";\r\n}"},
 {"id":4077, "name":"getDefaultValue()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.getDefaultValue()", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Returns the default value.\r\n *\r\n * @return The defautl value.\r\n */\r\npublic Object getDefaultValue() {\r\n    return defaultValue;\r\n}"},
 {"id":4078, "name":"getId()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.getId()", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"public String getId() {\r\n    return id;\r\n}"},
 {"id":4079, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.getName()", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Returns the column name.\r\n *\r\n * @return The column name.\r\n */\r\npublic String getName() {\r\n    return name;\r\n}"},
 {"id":4080, "name":"getType()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.getType()", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Returns the column type.\r\n *\r\n * @return The column type.\r\n */\r\npublic Class getType() {\r\n    return type;\r\n}"},
 {"id":4081, "name":"setDefaultValue(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.setDefaultValue(java.lang.Object)", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Sets the default value.\r\n *\r\n * @param defaultValue\r\n * \t\tThe default value to be set.\r\n */\r\npublic void setDefaultValue(Object defaultValue) {\r\n    this.defaultValue = defaultValue;\r\n}"},
 {"id":4082, "name":"setId(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.setId(java.lang.String)", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"public void setId(String newId) {\r\n    id = newId;\r\n}"},
 {"id":4083, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.setName(java.lang.String)", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Sets the column name.\r\n *\r\n * @param name\r\n * \t\tThe column name to be set.\r\n */\r\npublic void setName(String name) {\r\n    this.name = name;\r\n}"},
 {"id":4084, "name":"setType(java.lang.Class)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.setType(java.lang.Class)", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Sets the column type.\r\n *\r\n * @param type\r\n * \t\tThe column type to be set.\r\n */\r\npublic void setType(Class type) {\r\n    this.type = type;\r\n}"},
 {"id":4085, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumn.toString()", "ownerclassid":"532", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumn", "sourcecode":"/**\r\n * Returns a string representation of the CustomColumn.\r\n *\r\n * @return A string representation of the CustomColumn.\r\n */\r\npublic String toString() {\r\n    return (((((this.name) + \" [\") + (this.type)) + \"] <\") + (this.defaultValue)) + \">\";\r\n}"},
 {"id":4086, "name":"-init-(int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsException.-init-(int,java.lang.String)", "ownerclassid":"533", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsException", "sourcecode":"public CustomColumnsException(int type, String message) {\r\n    super(message);\r\n    this.type = type;\r\n}"},
 {"id":4087, "name":"-init-(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsException.-init-(java.lang.Throwable)", "ownerclassid":"533", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsException", "sourcecode":"public CustomColumnsException(Throwable cause) {\r\n    super(cause);\r\n}"},
 {"id":4088, "name":"getType()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsException.getType()", "ownerclassid":"533", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsException", "sourcecode":"public int getType() {\r\n    return type;\r\n}"},
 {"id":4089, "name":"-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsManager.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"534", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "sourcecode":"/**\r\n * Creates an instance of CustomColumnsManager for the given treetable.\r\n *\r\n * @param treetable\r\n * \t\t\r\n */\r\npublic CustomColumnsManager(CustomColumnsStorage storage) {\r\n    myListeners = new ArrayList();\r\n    myStorage = storage;\r\n}"},
 {"id":4090, "name":"addCustomColumnsListener(net.sourceforge.ganttproject.task.CustomColumsListener)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsManager.addCustomColumnsListener(net.sourceforge.ganttproject.task.CustomColumsListener)", "ownerclassid":"534", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "sourcecode":"public void addCustomColumnsListener(CustomColumsListener listener) {\r\n    myStorage.addCustomColumnsListener(listener);\r\n}"},
 {"id":4091, "name":"addNewCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsManager.addNewCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "ownerclassid":"534", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "sourcecode":"/**\r\n * Add a new custom column to the treetable.\r\n */\r\npublic void addNewCustomColumn(CustomColumn customColumn) {\r\n    assert customColumn != null;\r\n    myStorage.addCustomColumn(customColumn);\r\n}"},
 {"id":4092, "name":"changeCustomColumnDefaultValue(java.lang.String,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsManager.changeCustomColumnDefaultValue(java.lang.String,java.lang.Object)", "ownerclassid":"534", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "sourcecode":"public void changeCustomColumnDefaultValue(String colName, Object newDefaultValue) throws CustomColumnsException {\r\n    // ganttTreeTable.changeDefaultValue(colName, newDefaultValue);\r\n    myStorage.changeDefaultValue(colName, newDefaultValue);\r\n}"},
 {"id":4093, "name":"changeCustomColumnName(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsManager.changeCustomColumnName(java.lang.String,java.lang.String)", "ownerclassid":"534", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "sourcecode":"public void changeCustomColumnName(String oldName, String newName) {\r\n    // ganttTreeTable.renameCustomcolumn(oldName, newName);\r\n    myStorage.renameCustomColumn(oldName, newName);\r\n}"},
 {"id":4094, "name":"deleteCustomColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsManager.deleteCustomColumn(java.lang.String)", "ownerclassid":"534", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "sourcecode":"/**\r\n * Delete the custom column whose name is given in parameter from the\r\n * treetable.\r\n *\r\n * @param name\r\n * \t\tName of the column to delete.\r\n */\r\npublic void deleteCustomColumn(String name) {\r\n    myStorage.removeCustomColumn(name);\r\n}"},
 {"id":4095, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.-init-()", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Creates an instance of CustomColumnsStorage.\r\n */\r\npublic CustomColumnsStorage() {\r\n}"},
 {"id":4096, "name":"addCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.addCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Add a custom column.\r\n *\r\n * @param col\r\n * \t\tCustomColumn to be added.\r\n * @throws CustomColumnsException\r\n * \t\tA CustomColumnsException of type\r\n * \t\tCustomColumnsException.ALREADY_EXIST could be thrown if the\r\n * \t\tCustomColumn that should be added has a name that already\r\n * \t\texists.\r\n */\r\npublic void addCustomColumn(CustomColumn col) {\r\n    if (getCustomColumnsNames().contains(col.getName())) {\r\n        return;\r\n    }\r\n    String id = col.getId();\r\n    while (id == null) {\r\n        id = (CustomColumnsStorage.ID_PREFIX) + ((CustomColumnsStorage.nextId)++);\r\n        if (existsForID(id))\r\n            id = null;\r\n\r\n    } \r\n    mapIdCustomColum.put(id, col);\r\n    col.setId(id);\r\n    CustomColumEvent event = new CustomColumEvent(CustomColumEvent.EVENT_ADD, col);\r\n    fireCustomColumnsChange(event);\r\n}"},
 {"id":4097, "name":"addCustomColumnsListener(net.sourceforge.ganttproject.task.CustomColumsListener)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.addCustomColumnsListener(net.sourceforge.ganttproject.task.CustomColumsListener)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"void addCustomColumnsListener(CustomColumsListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":4098, "name":"changeDefaultValue(java.lang.String,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.changeDefaultValue(java.lang.String,java.lang.Object)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public void changeDefaultValue(String colName, Object newDefaultValue) throws CustomColumnsException {\r\n    // if (customColumns.containsKey(colName))\r\n    // {\r\n    // CustomColumn cc = (CustomColumn) customColumns.get(colName);\r\n    // cc.setDefaultValue(newDefaultValue);\r\n    // ((CustomColumn)\r\n    // mapIdCustomColum.get(cc.getId())).setDefaultValue(newDefaultValue);\r\n    // }\r\n    String id = getIdFromName(colName);\r\n    if (id != null) {\r\n        CustomColumn cc = ((CustomColumn) (mapIdCustomColum.get(id)));\r\n        if (newDefaultValue.getClass().isAssignableFrom(cc.getType()))\r\n            cc.setDefaultValue(newDefaultValue);\r\n        else {\r\n            try {\r\n                if (cc.getType().equals(Boolean.class))\r\n                    cc.setDefaultValue(Boolean.valueOf(newDefaultValue.toString()));\r\n                else\r\n                    if (cc.getType().equals(Integer.class)) {\r\n                        try {\r\n                            cc.setDefaultValue(Integer.valueOf(newDefaultValue.toString()));\r\n                        } catch (NumberFormatException e) {\r\n                            cc.setDefaultValue(null);\r\n                        }\r\n                    } else\r\n                        if (cc.getType().equals(Double.class)) {\r\n                            try {\r\n                                cc.setDefaultValue(Double.valueOf(newDefaultValue.toString()));\r\n                            } catch (NumberFormatException e) {\r\n                                cc.setDefaultValue(null);\r\n                            }\r\n                        } else\r\n                            if (GregorianCalendar.class.isAssignableFrom(cc.getType())) {\r\n                                try {\r\n                                    Date dateValue = DateUtils.parseDate(newDefaultValue.toString());\r\n                                    cc.setDefaultValue(new GanttCalendar(dateValue));\r\n                                } catch (ParseException e) {\r\n                                    cc.setDefaultValue(null);\r\n                                }\r\n                            }\r\n\r\n\r\n\r\n            } catch (Exception ee) {\r\n                throw new CustomColumnsException(ee);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":4099, "name":"changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Changes the language of the available types.\r\n *\r\n * @param lang\r\n * \t\tNew language.\r\n */\r\npublic static void changeLanguage(GanttLanguage lang) {\r\n    CustomColumnsStorage.language = lang;\r\n    CustomColumnsStorage.initTypes();\r\n}"},
 {"id":4100, "name":"exists(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.exists(java.lang.String)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Returns true if a custom column has the same name that the one given in\r\n * parameter, false otherwise.\r\n *\r\n * @param colName\r\n * \t\tThe name of the column to check the existence.\r\n * @return True if a custom column has the same name that the one given in\r\nparameter, false otherwise.\r\n */\r\npublic boolean exists(String colName) {\r\n    return (getIdFromName(colName)) != null;\r\n}"},
 {"id":4101, "name":"existsForID(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.existsForID(java.lang.String)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public boolean existsForID(String id) {\r\n    return this.mapIdCustomColum.keySet().contains(id);\r\n}"},
 {"id":4102, "name":"fireCustomColumnsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.fireCustomColumnsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"private void fireCustomColumnsChange(CustomColumEvent event) {\r\n    Iterator it = myListeners.iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumsListener listener = ((CustomColumsListener) (it.next()));\r\n        listener.customColumsChange(event);\r\n    } \r\n}"},
 {"id":4103, "name":"getCustomColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.getCustomColumn(java.lang.String)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n * @return \r\n * @throws CustomColumnsException\r\n * \t\t\r\n */\r\npublic CustomColumn getCustomColumn(String name) {\r\n    // if (!exists(name))\r\n    // throw new CustomColumnsException(CustomColumnsException.DO_NOT_EXIST,\r\n    // name);\r\n    // return (CustomColumn) customColumns.get(name);\r\n    String id = getIdFromName(name);\r\n    if (id == null) {\r\n        return null;\r\n    }\r\n    return ((CustomColumn) (mapIdCustomColum.get(id)));\r\n}"},
 {"id":4104, "name":"getCustomColumnByID(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.getCustomColumnByID(java.lang.String)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public CustomColumn getCustomColumnByID(String id) {\r\n    return ((CustomColumn) (mapIdCustomColum.get(id)));\r\n}"},
 {"id":4105, "name":"getCustomColumnCount()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.getCustomColumnCount()", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Returns the number of custom columns.\r\n *\r\n * @return The number of custom columns.\r\n */\r\npublic int getCustomColumnCount() {\r\n    // return customColumns.size();\r\n    return mapIdCustomColum.size();\r\n}"},
 {"id":4106, "name":"getCustomColumnsNames()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.getCustomColumnsNames()", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Returns a collection containing the names of all the stored custom\r\n * columns.\r\n *\r\n * @return A collection containing the names of all the stored custom\r\ncolumns.\r\n */\r\npublic List getCustomColumnsNames() {\r\n    // return customColumns.keySet();\r\n    // -----\r\n    List c = new ArrayList();\r\n    Iterator it = mapIdCustomColum.keySet().iterator();\r\n    while (it.hasNext()) {\r\n        String id = ((String) (it.next()));\r\n        c.add(((CustomColumn) (mapIdCustomColum.get(id))).getName());\r\n    } \r\n    return c;\r\n}"},
 {"id":4107, "name":"getCustomColums()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.getCustomColums()", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Returns a collection with all the stored custom columns.\r\n *\r\n * @return A collection with all the stored custom columns.\r\n */\r\npublic Collection getCustomColums() {\r\n    // return customColumns.values();\r\n    return mapIdCustomColum.values();\r\n}"},
 {"id":4108, "name":"getIdFromName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.getIdFromName(java.lang.String)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public String getIdFromName(String name) {\r\n    String id = null;\r\n    Iterator it = mapIdCustomColum.values().iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumn cc = ((CustomColumn) (it.next()));\r\n        if (cc.getName().equals(name)) {\r\n            id = cc.getId();\r\n            break;\r\n        }\r\n    } \r\n    return id;\r\n}"},
 {"id":4109, "name":"getNameFromId(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.getNameFromId(java.lang.String)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public String getNameFromId(String id) {\r\n    return ((CustomColumn) (mapIdCustomColum.get(id))).getName();\r\n}"},
 {"id":4110, "name":"importData(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.importData(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public void importData(CustomColumnsStorage source) {\r\n    for (Iterator columns = source.getCustomColums().iterator(); columns.hasNext();) {\r\n        CustomColumn nextColumn = ((CustomColumn) (columns.next()));\r\n        if (!(exists(nextColumn.getName()))) {\r\n            addCustomColumn(nextColumn);\r\n        }\r\n    }\r\n}"},
 {"id":4111, "name":"initTypes()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.initTypes()", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"// public CustomColumnsStorage(Map customCols)\r\n// {\r\n// customColumns = customCols;\r\n// }\r\n/**\r\n * Initialize the available types (text, integer, ...)\r\n */\r\nprivate static void initTypes() {\r\n    CustomColumnsStorage.availableTypes = new Vector(6);\r\n    CustomColumnsStorage.availableTypes.add(CustomColumnsStorage.language.getText(\"text\"));\r\n    CustomColumnsStorage.availableTypes.add(CustomColumnsStorage.language.getText(\"integer\"));\r\n    CustomColumnsStorage.availableTypes.add(CustomColumnsStorage.language.getText(\"double\"));\r\n    CustomColumnsStorage.availableTypes.add(CustomColumnsStorage.language.getText(\"date\"));\r\n    CustomColumnsStorage.availableTypes.add(CustomColumnsStorage.language.getText(\"boolean\"));\r\n}"},
 {"id":4112, "name":"processNewTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.processNewTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Add all stored custom column to the given task. All custom column will\r\n * have the default value.\r\n *\r\n * @param task\r\n * \t\tThe task to process.\r\n */\r\npublic void processNewTask(Task task) {\r\n    Iterator it = mapIdCustomColum.values().iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumn cc = ((CustomColumn) (it.next()));\r\n        try {\r\n            task.getCustomValues().setValue(cc.getName(), cc.getDefaultValue());\r\n        } catch (CustomColumnsException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    } \r\n}"},
 {"id":4113, "name":"removeCustomColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.removeCustomColumn(java.lang.String)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"void removeCustomColumn(String name) {\r\n    CustomColumn column = getCustomColumn(name);\r\n    if (column != null) {\r\n        removeCustomColumn(column);\r\n    }\r\n}"},
 {"id":4114, "name":"removeCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.removeCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"/**\r\n * Removes the CustomColumn whose name is given in parameter. If the column\r\n * name does not exist, nothing is done.\r\n *\r\n * @param name\r\n * \t\tName of the column to remove.\r\n */\r\npublic void removeCustomColumn(CustomColumn column) {\r\n    CustomColumEvent event = new CustomColumEvent(CustomColumEvent.EVENT_REMOVE, column);\r\n    fireCustomColumnsChange(event);\r\n    mapIdCustomColum.remove(column.getId());\r\n}"},
 {"id":4115, "name":"renameCustomColumn(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.renameCustomColumn(java.lang.String,java.lang.String)", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public void renameCustomColumn(String name, String newName) {\r\n    // if (customColumns.containsKey(name))\r\n    // {\r\n    // CustomColumn cc = (CustomColumn) customColumns.get(name);\r\n    // cc.setName(newName);\r\n    // customColumns.put(newName, cc);\r\n    // customColumns.remove(name);\r\n    // ((CustomColumn) mapIdCustomColum.get(cc.getId())).setName(newName);\r\n    // }\r\n    String id = getIdFromName(name);\r\n    if (id != null) {\r\n        CustomColumn cc = ((CustomColumn) (mapIdCustomColum.get(id)));\r\n        cc.setName(newName);\r\n        CustomColumEvent event = new CustomColumEvent(name, cc);\r\n        fireCustomColumnsChange(event);\r\n    }\r\n}"},
 {"id":4116, "name":"reset()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.reset()", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public void reset() {\r\n    CustomColumnsStorage.initTypes();\r\n    mapIdCustomColum.clear();\r\n    CustomColumnsStorage.nextId = 0;\r\n}"},
 {"id":4117, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsStorage.toString()", "ownerclassid":"535", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "sourcecode":"public String toString() {\r\n    return mapIdCustomColum.toString();\r\n}"},
 {"id":4118, "name":"-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsValues.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"536", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsValues", "sourcecode":"/**\r\n * Creates an instance of CustomColumnsValues.\r\n */\r\npublic CustomColumnsValues(CustomColumnsStorage columnStorage) {\r\n    myColumnStorage = columnStorage;\r\n}"},
 {"id":4119, "name":"clone()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsValues.clone()", "ownerclassid":"536", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsValues", "sourcecode":"public Object clone() {\r\n    CustomColumnsValues res = new CustomColumnsValues(myColumnStorage);\r\n    Iterator it = mapCustomColumnValue.keySet().iterator();\r\n    while (it.hasNext()) {\r\n        Object k = it.next();\r\n        res.mapCustomColumnValue.put(k, mapCustomColumnValue.get(k));\r\n    } \r\n    return res;\r\n}"},
 {"id":4120, "name":"getValue(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsValues.getValue(java.lang.String)", "ownerclassid":"536", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsValues", "sourcecode":"/**\r\n * Returns the value for the given customColName.\r\n *\r\n * @param customColName\r\n * \t\tThe name of the custom column we want to get the value.\r\n * @return The value for the given customColName.\r\n */\r\npublic Object getValue(String customColName) {\r\n    return mapCustomColumnValue.get(customColName);\r\n}"},
 {"id":4121, "name":"removeCustomColumn(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsValues.removeCustomColumn(java.lang.String)", "ownerclassid":"536", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsValues", "sourcecode":"/**\r\n * Remove the custom column (and also its value) from this\r\n * CustomColumnValues.\r\n *\r\n * @param colName\r\n * \t\tName of the column to remove.\r\n */\r\npublic void removeCustomColumn(String colName) {\r\n    mapCustomColumnValue.remove(colName);\r\n}"},
 {"id":4122, "name":"renameCustomColumn(java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsValues.renameCustomColumn(java.lang.String,java.lang.String)", "ownerclassid":"536", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsValues", "sourcecode":"public void renameCustomColumn(String oldName, String newName) {\r\n    Object o = mapCustomColumnValue.get(oldName);\r\n    mapCustomColumnValue.put(newName, o);\r\n    mapCustomColumnValue.remove(oldName);\r\n}"},
 {"id":4123, "name":"setValue(java.lang.String,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsValues.setValue(java.lang.String,java.lang.Object)", "ownerclassid":"536", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsValues", "sourcecode":"/**\r\n * Set the value for the customColumn whose name is given.\r\n *\r\n * @param customColName\r\n * \t\tThe name of the CustomColumn.\r\n * @param value\r\n * \t\tThe associated value.\r\n * @throws CustomColumnsException\r\n * \t\tThrows if <code>customColName</code> does not exist or\r\n * \t\t<code>value</code> class does not match the CustomColum\r\n * \t\tclass.\r\n */\r\npublic void setValue(String customColName, Object value) throws CustomColumnsException {\r\n    if (!(myColumnStorage.exists(customColName)))\r\n        throw new CustomColumnsException(CustomColumnsException.DO_NOT_EXIST, customColName);\r\n\r\n    Class c1 = myColumnStorage.getCustomColumn(customColName).getType();\r\n    if (value == null) {\r\n        mapCustomColumnValue.remove(customColName);\r\n        return;\r\n    }\r\n    Class c2 = value.getClass();\r\n    // System.out.println(c1 +\" - \" + c2);\r\n    if ((value != null) && (!(c1.isAssignableFrom(c2))))\r\n        throw new CustomColumnsException(CustomColumnsException.CLASS_MISMATCH, null);\r\n    else\r\n        mapCustomColumnValue.put(customColName, value);\r\n\r\n}"},
 {"id":4124, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumnsValues.toString()", "ownerclassid":"536", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumnsValues", "sourcecode":"public String toString() {\r\n    return mapCustomColumnValue.toString();\r\n}"},
 {"id":4125, "name":"customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "fullmethod":"net.sourceforge.ganttproject.task.CustomColumsListener.customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "ownerclassid":"537", "ownerclassname":"net.sourceforge.ganttproject.task.CustomColumsListener", "sourcecode":"public void customColumsChange(CustomColumEvent event);"},
 {"id":4126, "name":"addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"538", "ownerclassname":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection", "sourcecode":"ResourceAssignment addAssignment(ProjectResource resource);"},
 {"id":4127, "name":"deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection.deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"538", "ownerclassname":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection", "sourcecode":"void deleteAssignment(ProjectResource resource);"},
 {"id":4128, "name":"addNotes(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.addNotes(java.lang.String)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void addNotes(String notes);"},
 {"id":4129, "name":"setColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setColor(java.awt.Color)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setColor(Color color);"},
 {"id":4130, "name":"setCompletionPercentage(int)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setCompletionPercentage(int)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setCompletionPercentage(int percentage);"},
 {"id":4131, "name":"setCritical(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setCritical(boolean)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"/**\r\n * Sets the task as critical or not. The method is used be TaskManager after\r\n * having run a CriticalPathAlgorithm to set the critical tasks. When\r\n * painted, the tasks are rendered as critical using Task.isCritical(). So,\r\n * a task is set as critical only if critical path is displayed.\r\n *\r\n * @param critical\r\n * \t\t<code>true</code> if this is critical, <code>false</code>\r\n * \t\totherwise.\r\n */\r\nvoid setCritical(boolean critical);"},
 {"id":4132, "name":"setDuration(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setDuration(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setDuration(TaskLength length);"},
 {"id":4133, "name":"setEnd(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setEnd(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setEnd(GanttCalendar end);"},
 {"id":4134, "name":"setExpand(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setExpand(boolean)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setExpand(boolean expand);"},
 {"id":4135, "name":"setMilestone(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setMilestone(boolean)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setMilestone(boolean isMilestone);"},
 {"id":4136, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setName(java.lang.String)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setName(String name);"},
 {"id":4137, "name":"setNotes(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setNotes(java.lang.String)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setNotes(String notes);"},
 {"id":4138, "name":"setPriority(int)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setPriority(int)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setPriority(int priority);"},
 {"id":4139, "name":"setProjectTask(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setProjectTask(boolean)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setProjectTask(boolean projectTask);"},
 {"id":4140, "name":"setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"// void setStartFixed(boolean isFixed);\r\n// void setFinishFixed(boolean isFixed);\r\nvoid setShape(ShapePaint shape);"},
 {"id":4141, "name":"setStart(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setStart(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setStart(GanttCalendar start);"},
 {"id":4142, "name":"setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void setTaskInfo(TaskInfo taskInfo);"},
 {"id":4143, "name":"shift(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.MutableTask.shift(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"539", "ownerclassname":"net.sourceforge.ganttproject.task.MutableTask", "sourcecode":"void shift(TaskLength shift);"},
 {"id":4144, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.delete()", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"/**\r\n * Deletes this assignment\r\n */\r\nvoid delete();"},
 {"id":4145, "name":"getLoad()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.getLoad()", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"float getLoad();"},
 {"id":4146, "name":"getResource()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.getResource()", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"ProjectResource getResource();"},
 {"id":4147, "name":"getRoleForAssignment()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.getRoleForAssignment()", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"Role getRoleForAssignment();"},
 {"id":4148, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.getTask()", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"Task getTask();"},
 {"id":4149, "name":"isCoordinator()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.isCoordinator()", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"boolean isCoordinator();"},
 {"id":4150, "name":"setCoordinator(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.setCoordinator(boolean)", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"void setCoordinator(boolean responsible);"},
 {"id":4151, "name":"setLoad(float)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.setLoad(float)", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"void setLoad(float load);"},
 {"id":4152, "name":"setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignment.setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"540", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignment", "sourcecode":"void setRoleForAssignment(Role role);"},
 {"id":4153, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection.clear()", "ownerclassid":"541", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "sourcecode":"void clear();"},
 {"id":4154, "name":"createMutator()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection.createMutator()", "ownerclassid":"541", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "sourcecode":"ResourceAssignmentMutator createMutator();"},
 {"id":4155, "name":"getAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection.getAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"541", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "sourcecode":"ResourceAssignment getAssignment(ProjectResource resource);"},
 {"id":4156, "name":"getAssignments()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection.getAssignments()", "ownerclassid":"541", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "sourcecode":"ResourceAssignment[] getAssignments();"},
 {"id":4157, "name":"getCoordinator()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection.getCoordinator()", "ownerclassid":"541", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "sourcecode":"ProjectResource getCoordinator();"},
 {"id":4158, "name":"-init-(net.sourceforge.ganttproject.task.TaskImpl,net.sourceforge.ganttproject.resource.ResourceManager)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,net.sourceforge.ganttproject.resource.ResourceManager)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public ResourceAssignmentCollectionImpl(TaskImpl task, ResourceManager resourceManager) {\r\n    myTask = task;\r\n    myResourceManager = resourceManager;\r\n}"},
 {"id":4159, "name":"-init-(net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-(net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"private ResourceAssignmentCollectionImpl(ResourceAssignmentCollectionImpl collection) {\r\n    myTask = collection.myTask;\r\n    ResourceAssignment[] assignments = collection.getAssignments();\r\n    for (int i = 0; i < (assignments.length); i++) {\r\n        ResourceAssignment next = assignments[i];\r\n        ResourceAssignment copy = new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(next.getResource());\r\n        copy.setLoad(next.getLoad());\r\n        copy.setCoordinator(next.isCoordinator());\r\n        copy.setRoleForAssignment(next.getRoleForAssignment());\r\n        addAssignment(copy);\r\n    }\r\n}"},
 {"id":4160, "name":"-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public ResourceAssignmentImpl(ProjectResource resource) {\r\n    myAssignmentToResource = resource.createAssignment(this);\r\n    // resource\r\n    // .setAssignmentCollection(ResourceAssignmentCollectionImpl.this);\r\n}"},
 {"id":4161, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-()", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"ResourceAssignmentMutatorImpl() {\r\n}"},
 {"id":4162, "name":"-init-(net.sourceforge.ganttproject.task.ResourceAssignment,int)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-(net.sourceforge.ganttproject.task.ResourceAssignment,int)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public MutationInfo(ResourceAssignment assignment, int operation) {\r\n    myAssignment = assignment;\r\n    myOrder = (ResourceAssignmentCollectionImpl.MutationInfo.ourOrder)++;\r\n    myOperation = operation;\r\n    myResource = assignment.getResource();\r\n}"},
 {"id":4163, "name":"-init-(net.sourceforge.ganttproject.resource.ProjectResource,int)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-(net.sourceforge.ganttproject.resource.ProjectResource,int)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public MutationInfo(ProjectResource resource, int operation) {\r\n    this.myAssignment = null;\r\n    this.myOrder = (ResourceAssignmentCollectionImpl.MutationInfo.ourOrder)++;\r\n    this.myOperation = operation;\r\n    this.myResource = resource;\r\n}"},
 {"id":4164, "name":"addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public ResourceAssignment addAssignment(ProjectResource resource) {\r\n    return auxAddAssignment(resource);\r\n}"},
 {"id":4165, "name":"addAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.addAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"private void addAssignment(ResourceAssignment assignment) {\r\n    myAssignments.put(assignment.getResource(), assignment);\r\n}"},
 {"id":4166, "name":"auxAddAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.auxAddAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"private ResourceAssignment auxAddAssignment(ProjectResource resource) {\r\n    final ResourceAssignment result = new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(resource);\r\n    addAssignment(result);\r\n    return result;\r\n}"},
 {"id":4167, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.clear()", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public void clear() {\r\n    ResourceAssignment[] assignments = getAssignments();\r\n    for (int i = 0; i < (assignments.length); i++) {\r\n        assignments[i].delete();\r\n    }\r\n}"},
 {"id":4168, "name":"copy()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.copy()", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"ResourceAssignmentCollectionImpl copy() {\r\n    return new ResourceAssignmentCollectionImpl(this);\r\n}"},
 {"id":4169, "name":"createMutator()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.createMutator()", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public ResourceAssignmentMutator createMutator() {\r\n    return new ResourceAssignmentCollectionImpl.ResourceAssignmentMutatorImpl();\r\n}"},
 {"id":4170, "name":"deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public void deleteAssignment(ProjectResource resource) {\r\n    myAssignments.remove(resource);\r\n}"},
 {"id":4171, "name":"getAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.getAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public ResourceAssignment getAssignment(ProjectResource resource) {\r\n    return ((ResourceAssignment) (myAssignments.get(resource)));\r\n}"},
 {"id":4172, "name":"getAssignments()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.getAssignments()", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public ResourceAssignment[] getAssignments() {\r\n    return ((ResourceAssignment[]) (myAssignments.values().toArray(new ResourceAssignment[myAssignments.size()])));\r\n}"},
 {"id":4173, "name":"getCoordinator()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.getCoordinator()", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public ProjectResource getCoordinator() {\r\n    for (Iterator assignments = myAssignments.values().iterator(); assignments.hasNext();) {\r\n        ResourceAssignment next = ((ResourceAssignment) (assignments.next()));\r\n        if (next.isCoordinator()) {\r\n            return next.getResource();\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":4174, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.getTask()", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"private Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":4175, "name":"importData(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.importData(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"public void importData(ResourceAssignmentCollection assignmentCollection) {\r\n    if (myTask.isUnplugged()) {\r\n        ResourceAssignment[] assignments = assignmentCollection.getAssignments();\r\n        for (int i = 0; i < (assignments.length); i++) {\r\n            ResourceAssignment next = assignments[i];\r\n            addAssignment(next);\r\n        }\r\n    } else {\r\n        ResourceAssignment[] assignments = assignmentCollection.getAssignments();\r\n        for (int i = 0; i < (assignments.length); i++) {\r\n            ResourceAssignment next = assignments[i];\r\n            ProjectResource nextResource = next.getResource();\r\n            ProjectResource nextImportedResource = myResourceManager.getById(nextResource.getId());\r\n            if (nextImportedResource != null) {\r\n                ResourceAssignment copy = new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(nextImportedResource);\r\n                copy.setLoad(next.getLoad());\r\n                copy.setCoordinator(next.isCoordinator());\r\n                copy.setRoleForAssignment(next.getRoleForAssignment());\r\n                addAssignment(copy);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":4176, "name":"removeAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.removeAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"546", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "sourcecode":"/**\r\n * Removes the assignments related to the given resource.\r\n *\r\n * @param resource\r\n * \t\tAssigned resource\r\n */\r\npublic void removeAssignment(ProjectResource resource) {\r\n    new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(resource).delete();\r\n}"},
 {"id":4177, "name":"-init-(net.sourceforge.ganttproject.task.ResourceAssignment,int)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo.-init-(net.sourceforge.ganttproject.task.ResourceAssignment,int)", "ownerclassid":"542", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo", "sourcecode":"public MutationInfo(ResourceAssignment assignment, int operation) {\r\n    myAssignment = assignment;\r\n    myOrder = (ResourceAssignmentCollectionImpl.MutationInfo.ourOrder)++;\r\n    myOperation = operation;\r\n    myResource = assignment.getResource();\r\n}"},
 {"id":4178, "name":"-init-(net.sourceforge.ganttproject.resource.ProjectResource,int)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo.-init-(net.sourceforge.ganttproject.resource.ProjectResource,int)", "ownerclassid":"542", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo", "sourcecode":"public MutationInfo(ProjectResource resource, int operation) {\r\n    this.myAssignment = null;\r\n    this.myOrder = (ResourceAssignmentCollectionImpl.MutationInfo.ourOrder)++;\r\n    this.myOperation = operation;\r\n    this.myResource = resource;\r\n}"},
 {"id":4179, "name":"compareTo(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo.compareTo(java.lang.Object)", "ownerclassid":"542", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo", "sourcecode":"public int compareTo(Object o) {\r\n    if (!(o instanceof ResourceAssignmentCollectionImpl.MutationInfo)) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n    return (myOrder) - (((ResourceAssignmentCollectionImpl.MutationInfo) (o)).myOrder);\r\n}"},
 {"id":4180, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo.equals(java.lang.Object)", "ownerclassid":"542", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo", "sourcecode":"public boolean equals(Object o) {\r\n    boolean result = o instanceof ResourceAssignmentCollectionImpl.MutationInfo;\r\n    if (result) {\r\n        result = myAssignment.getResource().equals(((ResourceAssignmentCollectionImpl.MutationInfo) (o)).myAssignment.getResource());\r\n    }\r\n    return result;\r\n}"},
 {"id":4181, "name":"-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public ResourceAssignmentImpl(ProjectResource resource) {\r\n    myAssignmentToResource = resource.createAssignment(this);\r\n    // resource\r\n    // .setAssignmentCollection(ResourceAssignmentCollectionImpl.this);\r\n}"},
 {"id":4182, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.delete()", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"/**\r\n * Deletes all the assignments and all the related assignments\r\n */\r\npublic void delete() {\r\n    this.deleteAssignment(getResource());\r\n    myAssignmentToResource.delete();\r\n}"},
 {"id":4183, "name":"getLoad()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.getLoad()", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public float getLoad() {\r\n    return myAssignmentToResource.getLoad();\r\n}"},
 {"id":4184, "name":"getResource()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.getResource()", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public ProjectResource getResource() {\r\n    return myAssignmentToResource.getResource();\r\n}"},
 {"id":4185, "name":"getRoleForAssignment()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.getRoleForAssignment()", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public Role getRoleForAssignment() {\r\n    return myAssignmentToResource.getRoleForAssignment();\r\n}"},
 {"id":4186, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.getTask()", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public Task getTask() {\r\n    return this.getTask();\r\n}"},
 {"id":4187, "name":"isCoordinator()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.isCoordinator()", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public boolean isCoordinator() {\r\n    return myAssignmentToResource.isCoordinator();\r\n}"},
 {"id":4188, "name":"setCoordinator(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.setCoordinator(boolean)", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public void setCoordinator(boolean responsible) {\r\n    myAssignmentToResource.setCoordinator(responsible);\r\n}"},
 {"id":4189, "name":"setLoad(float)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.setLoad(float)", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"// todo: transaction\r\npublic void setLoad(float load) {\r\n    myAssignmentToResource.setLoad(load);\r\n}"},
 {"id":4190, "name":"setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public void setRoleForAssignment(Role role) {\r\n    myAssignmentToResource.setRoleForAssignment(role);\r\n}"},
 {"id":4191, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.toString()", "ownerclassid":"543", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "sourcecode":"public String toString() {\r\n    return ((this.getResource().getName()) + \" -> \") + (this.getTask().getName());\r\n}"},
 {"id":4192, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl.-init-()", "ownerclassid":"544", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl", "sourcecode":"ResourceAssignmentMutatorImpl() {\r\n}"},
 {"id":4193, "name":"addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"544", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl", "sourcecode":"public ResourceAssignment addAssignment(ProjectResource resource) {\r\n    ResourceAssignment result = new ResourceAssignmentCollectionImpl.ResourceAssignmentStub(resource);\r\n    myQueue.put(resource, new ResourceAssignmentCollectionImpl.MutationInfo(result, ResourceAssignmentCollectionImpl.MutationInfo.ADD));\r\n    return result;\r\n}"},
 {"id":4194, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl.commit()", "ownerclassid":"544", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl", "sourcecode":"public void commit() {\r\n    List mutations = new ArrayList(myQueue.values());\r\n    Collections.sort(mutations);\r\n    for (int i = 0; i < (mutations.size()); i++) {\r\n        ResourceAssignmentCollectionImpl.MutationInfo next = ((ResourceAssignmentCollectionImpl.MutationInfo) (mutations.get(i)));\r\n        switch (next.myOperation) {\r\n            case ResourceAssignmentCollectionImpl.MutationInfo.DELETE :\r\n                {\r\n                    myAssignments.remove(next.myResource);\r\n                    break;\r\n                }\r\n            case ResourceAssignmentCollectionImpl.MutationInfo.ADD :\r\n                {\r\n                    ResourceAssignment result = auxAddAssignment(next.myResource);\r\n                    result.setLoad(next.myAssignment.getLoad());\r\n                    result.setCoordinator(next.myAssignment.isCoordinator());\r\n                    result.setRoleForAssignment(next.myAssignment.getRoleForAssignment());\r\n                }\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n}"},
 {"id":4195, "name":"deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl.deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"544", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl", "sourcecode":"public void deleteAssignment(ProjectResource resource) {\r\n    ResourceAssignmentCollectionImpl.MutationInfo info = ((ResourceAssignmentCollectionImpl.MutationInfo) (myQueue.get(resource)));\r\n    if (info == null) {\r\n        myQueue.put(resource, new ResourceAssignmentCollectionImpl.MutationInfo(resource, ResourceAssignmentCollectionImpl.MutationInfo.DELETE));\r\n    } else\r\n        if ((info.myOperation) == (ResourceAssignmentCollectionImpl.MutationInfo.ADD)) {\r\n            myQueue.remove(resource);\r\n        }\r\n\r\n}"},
 {"id":4196, "name":"-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public ResourceAssignmentStub(ProjectResource resource) {\r\n    myResource = resource;\r\n}"},
 {"id":4197, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.delete()", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public void delete() {\r\n}"},
 {"id":4198, "name":"deleteLocal()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.deleteLocal()", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public void deleteLocal() {\r\n}"},
 {"id":4199, "name":"getLoad()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.getLoad()", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public float getLoad() {\r\n    return myLoad;\r\n}"},
 {"id":4200, "name":"getResource()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.getResource()", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public ProjectResource getResource() {\r\n    return myResource;\r\n}"},
 {"id":4201, "name":"getRoleForAssignment()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.getRoleForAssignment()", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public Role getRoleForAssignment() {\r\n    return myRoleForAssignment;\r\n}"},
 {"id":4202, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.getTask()", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public Task getTask() {\r\n    return this.getTask();\r\n}"},
 {"id":4203, "name":"isCoordinator()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.isCoordinator()", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public boolean isCoordinator() {\r\n    return myCoordinator;\r\n}"},
 {"id":4204, "name":"setCoordinator(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.setCoordinator(boolean)", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public void setCoordinator(boolean responsible) {\r\n    myCoordinator = responsible;\r\n}"},
 {"id":4205, "name":"setLoad(float)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.setLoad(float)", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public void setLoad(float load) {\r\n    myLoad = load;\r\n}"},
 {"id":4206, "name":"setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public void setRoleForAssignment(Role role) {\r\n    myRoleForAssignment = role;\r\n}"},
 {"id":4207, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.toString()", "ownerclassid":"545", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "sourcecode":"public String toString() {\r\n    return ((this.getResource().getName()) + \" -> \") + (this.getTask().getName());\r\n}"},
 {"id":4208, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.task.ResourceAssignmentMutator.commit()", "ownerclassid":"547", "ownerclassname":"net.sourceforge.ganttproject.task.ResourceAssignmentMutator", "sourcecode":"void commit();"},
 {"id":4209, "name":"applyThirdDateConstraint()", "fullmethod":"net.sourceforge.ganttproject.task.Task.applyThirdDateConstraint()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"void applyThirdDateConstraint();"},
 {"id":4210, "name":"createMutator()", "fullmethod":"net.sourceforge.ganttproject.task.Task.createMutator()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskMutator createMutator();"},
 {"id":4211, "name":"createMutatorFixingDuration()", "fullmethod":"net.sourceforge.ganttproject.task.Task.createMutatorFixingDuration()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskMutator createMutatorFixingDuration();"},
 {"id":4212, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.task.Task.delete()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"void delete();"},
 {"id":4213, "name":"getActivities()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getActivities()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskActivity[] getActivities();"},
 {"id":4214, "name":"getAssignmentCollection()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getAssignmentCollection()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"ResourceAssignmentCollection getAssignmentCollection();"},
 {"id":4215, "name":"getAssignments()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getAssignments()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"// HumanResource[] getAssignedHumanResources();\r\nResourceAssignment[] getAssignments();"},
 {"id":4216, "name":"getAttachments()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getAttachments()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"/* <Document> */\r\nList getAttachments();"},
 {"id":4217, "name":"getColor()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getColor()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"Color getColor();"},
 {"id":4218, "name":"getCompletionPercentage()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getCompletionPercentage()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"int getCompletionPercentage();"},
 {"id":4219, "name":"getCustomValues()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getCustomValues()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"// Color DEFAULT_COLOR = new Color( 140, 182, 206); not used\r\nCustomColumnsValues getCustomValues();"},
 {"id":4220, "name":"getDependencies()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getDependencies()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskDependencySlice getDependencies();"},
 {"id":4221, "name":"getDependenciesAsDependant()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getDependenciesAsDependant()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskDependencySlice getDependenciesAsDependant();"},
 {"id":4222, "name":"getDependenciesAsDependee()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getDependenciesAsDependee()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskDependencySlice getDependenciesAsDependee();"},
 {"id":4223, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getDuration()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskLength getDuration();"},
 {"id":4224, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getEnd()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"GanttCalendar getEnd();"},
 {"id":4225, "name":"getExpand()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getExpand()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"boolean getExpand();"},
 {"id":4226, "name":"getManager()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getManager()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskManager getManager();"},
 {"id":4227, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getName()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"String getName();"},
 {"id":4228, "name":"getNestedTasks()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getNestedTasks()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"Task[] getNestedTasks();"},
 {"id":4229, "name":"getNotes()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getNotes()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"String getNotes();"},
 {"id":4230, "name":"getPredecessors()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getPredecessors()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"// \r\n// relationships with other entities\r\nGanttTaskRelationship[] getPredecessors();"},
 {"id":4231, "name":"getPriority()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getPriority()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"int getPriority();"},
 {"id":4232, "name":"getShape()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getShape()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"ShapePaint getShape();"},
 {"id":4233, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getStart()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"GanttCalendar getStart();"},
 {"id":4234, "name":"getSuccessors()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getSuccessors()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"GanttTaskRelationship[] getSuccessors();"},
 {"id":4235, "name":"getSupertask()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getSupertask()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"// \r\nTask getSupertask();"},
 {"id":4236, "name":"getTaskID()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getTaskID()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"// main properties\r\nint getTaskID();"},
 {"id":4237, "name":"getTaskInfo()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getTaskInfo()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskInfo getTaskInfo();"},
 {"id":4238, "name":"getThird()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getThird()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"GanttCalendar getThird();"},
 {"id":4239, "name":"getThirdDateConstraint()", "fullmethod":"net.sourceforge.ganttproject.task.Task.getThirdDateConstraint()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"int getThirdDateConstraint();"},
 {"id":4240, "name":"isCritical()", "fullmethod":"net.sourceforge.ganttproject.task.Task.isCritical()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"boolean isCritical();"},
 {"id":4241, "name":"isMilestone()", "fullmethod":"net.sourceforge.ganttproject.task.Task.isMilestone()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"boolean isMilestone();"},
 {"id":4242, "name":"isProjectTask()", "fullmethod":"net.sourceforge.ganttproject.task.Task.isProjectTask()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"boolean isProjectTask();"},
 {"id":4243, "name":"move(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.Task.move(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"void move(Task targetSupertask);"},
 {"id":4244, "name":"setThirdDate(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.Task.setThirdDate(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"void setThirdDate(GanttCalendar thirdDate);"},
 {"id":4245, "name":"setThirdDateConstraint(int)", "fullmethod":"net.sourceforge.ganttproject.task.Task.setThirdDateConstraint(int)", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"void setThirdDateConstraint(int dateConstraint);"},
 {"id":4246, "name":"translateDuration(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.Task.translateDuration(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"TaskLength translateDuration(TaskLength duration);"},
 {"id":4247, "name":"unpluggedClone()", "fullmethod":"net.sourceforge.ganttproject.task.Task.unpluggedClone()", "ownerclassid":"548", "ownerclassname":"net.sourceforge.ganttproject.task.Task", "sourcecode":"Task unpluggedClone();"},
 {"id":4248, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivity.getDuration()", "ownerclassid":"549", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivity", "sourcecode":"TaskLength getDuration();"},
 {"id":4249, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivity.getEnd()", "ownerclassid":"549", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivity", "sourcecode":"Date getEnd();"},
 {"id":4250, "name":"getIntensity()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivity.getIntensity()", "ownerclassid":"549", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivity", "sourcecode":"float getIntensity();"},
 {"id":4251, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivity.getStart()", "ownerclassid":"549", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivity", "sourcecode":"Date getStart();"},
 {"id":4252, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivity.getTask()", "ownerclassid":"549", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivity", "sourcecode":"Task getTask();"},
 {"id":4253, "name":"isFirst()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivity.isFirst()", "ownerclassid":"549", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivity", "sourcecode":"boolean isFirst();"},
 {"id":4254, "name":"isLast()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivity.isLast()", "ownerclassid":"549", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivity", "sourcecode":"boolean isLast();"},
 {"id":4255, "name":"-init-(net.sourceforge.ganttproject.task.TaskImpl,java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,java.util.Date,java.util.Date)", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"TaskActivityImpl(TaskImpl task, Date startDate, Date endDate) {\r\n    this(task, startDate, endDate, 1.0F);\r\n}"},
 {"id":4256, "name":"-init-(net.sourceforge.ganttproject.task.TaskImpl,java.util.Date,java.util.Date,float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,java.util.Date,java.util.Date,float)", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"TaskActivityImpl(TaskImpl task, Date startDate, Date endDate, float intensity) {\r\n    myStartDate = startDate;\r\n    myEndDate = endDate;\r\n    myDuration = task.getManager().createLength(task.getDuration().getTimeUnit(), startDate, endDate);\r\n    myIntensity = intensity;\r\n    myTask = task;\r\n}"},
 {"id":4257, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.getDuration()", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"public TaskLength getDuration() {\r\n    return myDuration;\r\n}"},
 {"id":4258, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.getEnd()", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"public Date getEnd() {\r\n    return myEndDate;\r\n}"},
 {"id":4259, "name":"getIntensity()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.getIntensity()", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"public float getIntensity() {\r\n    return myIntensity;\r\n}"},
 {"id":4260, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.getStart()", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"public Date getStart() {\r\n    return myStartDate;\r\n}"},
 {"id":4261, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.getTask()", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"public Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":4262, "name":"isFirst()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.isFirst()", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.task.TaskActivity#isFirst()\n */\r\npublic boolean isFirst() {\r\n    return (this) == (getTask().getActivities()[0]);\r\n}"},
 {"id":4263, "name":"isLast()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.isLast()", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.task.TaskActivity#isLast()\n */\r\npublic boolean isLast() {\r\n    TaskActivity[] all = getTask().getActivities();\r\n    return (this) == (all[((all.length) - 1)]);\r\n}"},
 {"id":4264, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.TaskActivityImpl.toString()", "ownerclassid":"550", "ownerclassname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "sourcecode":"public String toString() {\r\n    return (((((myTask.toString()) + \"[\") + (getStart())) + \", \") + (getEnd())) + \"]\";\r\n}"},
 {"id":4265, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.-init-()", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"1() {\r\n}"},
 {"id":4266, "name":"areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"boolean areUnrelated(Task dependant, Task dependee);"},
 {"id":4267, "name":"compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"int compareDocumentOrder(Task next, Task dependeeTask);"},
 {"id":4268, "name":"contains(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.contains(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"boolean contains(Task task);"},
 {"id":4269, "name":"getContainer(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.getContainer(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"Task getContainer(Task nestedTask);"},
 {"id":4270, "name":"getDepth(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.getDepth(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"int getDepth(Task task);"},
 {"id":4271, "name":"getNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.getNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"Task[] getNestedTasks(Task container);"},
 {"id":4272, "name":"getRootTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.getRootTask()", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"Task getRootTask();"},
 {"id":4273, "name":"hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"boolean hasNestedTasks(Task container);"},
 {"id":4274, "name":"move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"552", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "sourcecode":"void move(Task whatMove, Task whereMove);"},
 {"id":4275, "name":"createFacede()", "fullmethod":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory.createFacede()", "ownerclassid":"551", "ownerclassname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory", "sourcecode":"TaskContainmentHierarchyFacade createFacede();"},
 {"id":4276, "name":"-init-(net.sourceforge.ganttproject.task.TaskManagerImpl)", "fullmethod":"net.sourceforge.ganttproject.task.TaskDocumentOrderComparator.-init-(net.sourceforge.ganttproject.task.TaskManagerImpl)", "ownerclassid":"553", "ownerclassname":"net.sourceforge.ganttproject.task.TaskDocumentOrderComparator", "sourcecode":"TaskDocumentOrderComparator(TaskManagerImpl taskManager) {\r\n    myManager = taskManager;\r\n}"},
 {"id":4277, "name":"compare(java.lang.Object,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.TaskDocumentOrderComparator.compare(java.lang.Object,java.lang.Object)", "ownerclassid":"553", "ownerclassname":"net.sourceforge.ganttproject.task.TaskDocumentOrderComparator", "sourcecode":"public int compare(Object object1, Object object2) {\r\n    assert (object1 instanceof Task) && (object2 instanceof Task) : \"I compare only tasks\";\r\n    return myManager.getTaskHierarchy().compareDocumentOrder(((Task) (object1)), ((Task) (object2)));\r\n}"},
 {"id":4278, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager,int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.-init-(net.sourceforge.ganttproject.task.TaskManager,int)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"protected TaskImpl(TaskManager taskManager, int taskID) {\r\n    myManager = ((TaskManagerImpl) (taskManager));\r\n    if (taskID == (-1)) {\r\n        myID = myManager.getMaxID();\r\n        myManager.increaseMaxID();\r\n    } else {\r\n        if ((myManager.getTask(taskID)) != null) {\r\n            throw new IllegalArgumentException(((\"There is a task with ID=\" + taskID) + \" already\"));\r\n        }\r\n        myID = taskID;\r\n    }\r\n    myAssignments = new ResourceAssignmentCollectionImpl(this, myManager.getConfig().getResourceManager());\r\n    myDependencySlice = new TaskDependencySliceImpl(this, myManager.getDependencyCollection());\r\n    myDependencySliceAsDependant = new TaskDependencySliceAsDependant(this, myManager.getDependencyCollection());\r\n    myDependencySliceAsDependee = new TaskDependencySliceAsDependee(this, myManager.getDependencyCollection());\r\n    myPriority = 1;\r\n    myTaskHierarchyItem = myManager.getHierarchyManager().createItem(this);\r\n    myNotes = \"\";\r\n    bExpand = true;\r\n    myColor = null;\r\n    customValues = new CustomColumnsValues(myManager.getCustomColumnStorage());\r\n}"},
 {"id":4279, "name":"-init-(net.sourceforge.ganttproject.task.TaskImpl,boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,boolean)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"protected TaskImpl(TaskImpl copy, boolean isUnplugged) {\r\n    myManager = copy.myManager;\r\n    if (!isUnplugged) {\r\n        myTaskHierarchyItem = myManager.getHierarchyManager().createItem(this);\r\n    } else {\r\n        myTaskHierarchyItem = null;\r\n    }\r\n    myAssignments = new ResourceAssignmentCollectionImpl(this, myManager.getConfig().getResourceManager());\r\n    myAssignments.importData(copy.getAssignmentCollection());\r\n    myID = copy.myID;\r\n    myName = copy.myName;\r\n    myWebLink = copy.myWebLink;\r\n    isMilestone = copy.isMilestone;\r\n    isProjectTask = copy.isProjectTask;\r\n    myPriority = copy.myPriority;\r\n    myStart = copy.myStart;\r\n    myEnd = copy.myEnd;\r\n    myThird = copy.myThird;\r\n    myThirdDateConstraint = copy.myThirdDateConstraint;\r\n    myCompletionPercentage = copy.myCompletionPercentage;\r\n    myLength = copy.myLength;\r\n    myShape = copy.myShape;\r\n    myColor = copy.myColor;\r\n    myNotes = copy.myNotes;\r\n    bExpand = copy.bExpand;\r\n    // \r\n    myDependencySlice = new TaskDependencySliceImpl(this, myManager.getDependencyCollection());\r\n    myDependencySliceAsDependant = new TaskDependencySliceAsDependant(this, myManager.getDependencyCollection());\r\n    myDependencySliceAsDependee = new TaskDependencySliceAsDependee(this, myManager.getDependencyCollection());\r\n    customValues = ((CustomColumnsValues) (copy.getCustomValues().clone()));\r\n    recalculateActivities();\r\n}"},
 {"id":4280, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.-init-()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"2() {\r\n}"},
 {"id":4281, "name":"addNotes(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.addNotes(java.lang.String)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void addNotes(String notes) {\r\n    myNotes += notes;\r\n}"},
 {"id":4282, "name":"adjustNestedTasks()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.adjustNestedTasks()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"private void adjustNestedTasks() {\r\n    try {\r\n        assert (myManager) != null;\r\n        AlgorithmCollection algorithmCollection = myManager.getAlgorithmCollection();\r\n        if (algorithmCollection != null) {\r\n            algorithmCollection.getAdjustTaskBoundsAlgorithm().adjustNestedTasks(this);\r\n        }\r\n    } catch (TaskDependencyException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n}"},
 {"id":4283, "name":"applyThirdDateConstraint()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.applyThirdDateConstraint()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"// TODO: implementation of this method has no correlation with algorithms\r\n// recalculating schedules,\r\n// doesnt affect subtasks and supertasks. It is necessary to call this\r\n// method explicitly from other\r\n// parts of code to be sure that constraint fulfils\r\n// \r\n// Method GanttCalendar.newAdd() assumes that time unit is day\r\npublic void applyThirdDateConstraint() {\r\n    TaskLength length = getDuration();\r\n    if ((getThird()) != null)\r\n        switch (getThirdDateConstraint()) {\r\n            case TaskImpl.EARLIESTBEGIN :\r\n                // TODO: TIME UNIT (assumption about days)\r\n                if (getThird().after(getStart())) {\r\n                    int difference = getThird().diff(getStart());\r\n                    GanttCalendar _start = getStart().newAdd(difference);\r\n                    GanttCalendar _end = getEnd().newAdd(difference);\r\n                    setEnd(_end);\r\n                    setStart(_start);\r\n                    setDuration(length);\r\n                }\r\n                break;\r\n        }\r\n\r\n}"},
 {"id":4284, "name":"areEventsEnabled()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.areEventsEnabled()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"protected boolean areEventsEnabled() {\r\n    return myEventsEnabled;\r\n}"},
 {"id":4285, "name":"calculateEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.calculateEnd()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"GanttCalendar calculateEnd() {\r\n    GanttCalendar result = getStart().Clone();\r\n    Date newEnd = shiftDate(result.getTime(), getDuration());\r\n    result.setTime(newEnd);\r\n    return result;\r\n}"},
 {"id":4286, "name":"colorDefined()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.colorDefined()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"/**\r\n * Allows to determine, if a special color is defined for this task.\r\n *\r\n * @return true, if this task has its own color defined.\r\n */\r\npublic boolean colorDefined() {\r\n    return (myColor) != null;\r\n}"},
 {"id":4287, "name":"createMutator()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.createMutator()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskMutator createMutator() {\r\n    if ((myMutator) != null) {\r\n        throw new RuntimeException((\"Two mutators have been requested for task=\" + (getName())), myException);\r\n    }\r\n    myMutator = new TaskImpl.MutatorImpl();\r\n    myException = new Exception();\r\n    return myMutator;\r\n}"},
 {"id":4288, "name":"createMutatorFixingDuration()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.createMutatorFixingDuration()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskMutator createMutatorFixingDuration() {\r\n    if ((myMutator) != null) {\r\n        throw new RuntimeException((\"Two mutators have been requested for task=\" + (getName())), myException);\r\n    }\r\n    myMutator = new TaskImpl.MutatorImpl() {\r\n        public void setStart(GanttCalendar start) {\r\n            super.setStart(start);\r\n            TaskImpl.this.myEnd = null;\r\n        }\r\n    };\r\n    myException = new Exception();\r\n    return myMutator;\r\n}"},
 {"id":4289, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.delete()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void delete() {\r\n    getDependencies().clear();\r\n    getAssignmentCollection().clear();\r\n}"},
 {"id":4290, "name":"enableEvents(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.enableEvents(boolean)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"protected void enableEvents(boolean enabled) {\r\n    myEventsEnabled = enabled;\r\n}"},
 {"id":4291, "name":"getActivities()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getActivities()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskActivity[] getActivities() {\r\n    List activities = ((myMutator) == null) ? null : myMutator.getActivities();\r\n    if (activities == null) {\r\n        activities = myActivities;\r\n    }\r\n    return ((TaskActivity[]) (activities.toArray(new TaskActivity[activities.size()])));\r\n}"},
 {"id":4292, "name":"getAssignmentCollection()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getAssignmentCollection()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public ResourceAssignmentCollection getAssignmentCollection() {\r\n    return myAssignments;\r\n}"},
 {"id":4293, "name":"getAssignments()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getAssignments()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public ResourceAssignment[] getAssignments() {\r\n    return myAssignments.getAssignments();\r\n}"},
 {"id":4294, "name":"getAttachments()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getAttachments()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"/* <Document> */\r\npublic List getAttachments() {\r\n    if (((getWebLink()) != null) && (!(\"\".equals(getWebLink())))) {\r\n        return Collections.singletonList(new AbstractURLDocument() {\r\n            public boolean canRead() {\r\n                return true;\r\n            }\r\n\r\n            public boolean canWrite() {\r\n                return false;\r\n            }\r\n\r\n            public String getDescription() {\r\n                return null;\r\n            }\r\n\r\n            public InputStream getInputStream() throws IOException {\r\n                return null;\r\n            }\r\n\r\n            public OutputStream getOutputStream() throws IOException {\r\n                return null;\r\n            }\r\n\r\n            public String getPath() {\r\n                return null;\r\n            }\r\n\r\n            public URI getURI() {\r\n                try {\r\n                    return new URI(new URL(getWebLink()).toString());\r\n                } catch (URISyntaxException e) {\r\n                } catch (MalformedURLException e) {\r\n                    File f = new File(getWebLink());\r\n                    if (f.exists()) {\r\n                        return f.toURI();\r\n                    }\r\n                }\r\n                try {\r\n                    URL context = myManager.getProjectDocument();\r\n                    if (context == null) {\r\n                        return null;\r\n                    }\r\n                    URL relative = new URL(context, getWebLink());\r\n                    return new URI(URLEncoder.encode(relative.toString(), \"utf-8\"));\r\n                } catch (URISyntaxException e) {\r\n                } catch (MalformedURLException e) {\r\n                } catch (UnsupportedEncodingException e) {\r\n                }\r\n                return null;\r\n            }\r\n\r\n            public boolean isLocal() {\r\n                return false;\r\n            }\r\n\r\n            public boolean isValidForMRU() {\r\n                return false;\r\n            }\r\n\r\n            public void write() throws IOException {\r\n            }\r\n        });\r\n    } else {\r\n        return Collections.EMPTY_LIST;\r\n    }\r\n}"},
 {"id":4295, "name":"getColor()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getColor()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public Color getColor() {\r\n    Color result = myColor;\r\n    if (result == null) {\r\n        if ((isMilestone()) || ((getNestedTasks().length) > 0)) {\r\n            result = Color.BLACK;\r\n        } else {\r\n            result = myManager.getConfig().getDefaultColor();\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":4296, "name":"getCompletionPercentage()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getCompletionPercentage()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public int getCompletionPercentage() {\r\n    return ((myMutator) != null) && ((myMutator.myIsolationLevel) == (TaskMutator.READ_UNCOMMITED)) ? myMutator.getCompletionPercentage() : myCompletionPercentage;\r\n}"},
 {"id":4297, "name":"getCustomValues()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getCustomValues()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"/**\r\n * Returns the CustomColumnValues.\r\n *\r\n * @return The CustomColumnValues.\r\n */\r\npublic CustomColumnsValues getCustomValues() {\r\n    return customValues;\r\n}"},
 {"id":4298, "name":"getDependencies()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getDependencies()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskDependencySlice getDependencies() {\r\n    return myDependencySlice;\r\n}"},
 {"id":4299, "name":"getDependenciesAsDependant()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getDependenciesAsDependant()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskDependencySlice getDependenciesAsDependant() {\r\n    return myDependencySliceAsDependant;\r\n}"},
 {"id":4300, "name":"getDependenciesAsDependee()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getDependenciesAsDependee()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskDependencySlice getDependenciesAsDependee() {\r\n    return myDependencySliceAsDependee;\r\n}"},
 {"id":4301, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getDuration()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskLength getDuration() {\r\n    return ((myMutator) != null) && ((myMutator.myIsolationLevel) == (TaskMutator.READ_UNCOMMITED)) ? myMutator.getDuration() : myLength;\r\n}"},
 {"id":4302, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getEnd()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public GanttCalendar getEnd() {\r\n    GanttCalendar result = null;\r\n    if (((myMutator) != null) && ((myMutator.myIsolationLevel) == (TaskMutator.READ_UNCOMMITED))) {\r\n        result = myMutator.getEnd();\r\n    }\r\n    if (result == null) {\r\n        if ((myEnd) == null) {\r\n            myEnd = calculateEnd();\r\n        }\r\n        result = myEnd;\r\n    }\r\n    return result;\r\n}"},
 {"id":4303, "name":"getExpand()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getExpand()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public boolean getExpand() {\r\n    return bExpand;\r\n}"},
 {"id":4304, "name":"getManager()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getManager()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskManager getManager() {\r\n    return myManager;\r\n}"},
 {"id":4305, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getName()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public String getName() {\r\n    return myName;\r\n}"},
 {"id":4306, "name":"getNestedTasks()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getNestedTasks()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public Task[] getNestedTasks() {\r\n    TaskHierarchyItem[] nestedItems = myTaskHierarchyItem.getNestedItems();\r\n    Task[] result = new Task[nestedItems.length];\r\n    for (int i = 0; i < (nestedItems.length); i++) {\r\n        result[i] = nestedItems[i].getTask();\r\n    }\r\n    return result;\r\n}"},
 {"id":4307, "name":"getNotes()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getNotes()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public String getNotes() {\r\n    return myNotes;\r\n}"},
 {"id":4308, "name":"getPredecessors()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getPredecessors()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public GanttTaskRelationship[] getPredecessors() {\r\n    return new GanttTaskRelationship[0];// To change body of implemented\r\n\r\n    // methods use Options | File\r\n    // Templates.\r\n}"},
 {"id":4309, "name":"getPriority()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getPriority()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public int getPriority() {\r\n    return myPriority;\r\n}"},
 {"id":4310, "name":"getShape()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getShape()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public ShapePaint getShape() {\r\n    return myShape;\r\n}"},
 {"id":4311, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getStart()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public GanttCalendar getStart() {\r\n    if (((myMutator) != null) && ((myMutator.myIsolationLevel) == (TaskMutator.READ_UNCOMMITED))) {\r\n        return myMutator.getStart();\r\n    } else {\r\n        return myStart;\r\n    }\r\n}"},
 {"id":4312, "name":"getSuccessors()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getSuccessors()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public GanttTaskRelationship[] getSuccessors() {\r\n    return new GanttTaskRelationship[0];// To change body of implemented\r\n\r\n    // methods use Options | File\r\n    // Templates.\r\n}"},
 {"id":4313, "name":"getSupertask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getSupertask()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"// \r\npublic Task getSupertask() {\r\n    TaskHierarchyItem container = myTaskHierarchyItem.getContainerItem();\r\n    return container.getTask();\r\n}"},
 {"id":4314, "name":"getTaskID()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getTaskID()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"// main properties\r\npublic int getTaskID() {\r\n    return myID;\r\n}"},
 {"id":4315, "name":"getTaskInfo()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getTaskInfo()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskInfo getTaskInfo() {\r\n    return myTaskInfo;\r\n}"},
 {"id":4316, "name":"getThird()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getThird()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public GanttCalendar getThird() {\r\n    if (((myMutator) != null) && ((myMutator.myIsolationLevel) == (TaskMutator.READ_UNCOMMITED))) {\r\n        return myMutator.getThird();\r\n    } else {\r\n        return myThird;\r\n    }\r\n}"},
 {"id":4317, "name":"getThirdDateConstraint()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getThirdDateConstraint()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public int getThirdDateConstraint() {\r\n    return myThirdDateConstraint;\r\n}"},
 {"id":4318, "name":"getWebLink()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.getWebLink()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public String getWebLink() {\r\n    return myWebLink;\r\n}"},
 {"id":4319, "name":"isCritical()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.isCritical()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic boolean isCritical() {\r\n    return this.critical;\r\n}"},
 {"id":4320, "name":"isMilestone()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.isMilestone()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public boolean isMilestone() {\r\n    return isMilestone;\r\n}"},
 {"id":4321, "name":"isProjectTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.isProjectTask()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public boolean isProjectTask() {\r\n    return isProjectTask;\r\n}"},
 {"id":4322, "name":"isSupertask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.isSupertask()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public boolean isSupertask() {\r\n    return myManager.getTaskHierarchy().hasNestedTasks(this);\r\n}"},
 {"id":4323, "name":"isUnplugged()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.isUnplugged()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public boolean isUnplugged() {\r\n    return (myTaskHierarchyItem) == null;\r\n}"},
 {"id":4324, "name":"move(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.move(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void move(Task targetSupertask) {\r\n    TaskImpl supertaskImpl = ((TaskImpl) (targetSupertask));\r\n    TaskHierarchyItem targetItem = supertaskImpl.myTaskHierarchyItem;\r\n    myTaskHierarchyItem.delete();\r\n    targetItem.addNestedItem(myTaskHierarchyItem);\r\n    myManager.onTaskMoved(this);\r\n}"},
 {"id":4325, "name":"recalculateActivities()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.recalculateActivities()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"private void recalculateActivities() {\r\n    if (((myLength) == null) || ((myManager) == null)) {\r\n        return;\r\n    }\r\n    recalculateActivities(myActivities, myStart.getTime(), getEnd().getTime());\r\n    int length = 0;\r\n    for (int i = 0; i < (myActivities.size()); i++) {\r\n        TaskActivity next = ((TaskActivity) (myActivities.get(i)));\r\n        if ((next.getIntensity()) > 0) {\r\n            length += next.getDuration().getLength(getDuration().getTimeUnit());\r\n        }\r\n    }\r\n    myLength = getManager().createLength(myLength.getTimeUnit(), length);\r\n}"},
 {"id":4326, "name":"recalculateActivities(java.util.List,java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.recalculateActivities(java.util.List,java.util.Date,java.util.Date)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"private void recalculateActivities(List output, Date startDate, Date endDate) {\r\n    GPCalendar calendar = myManager.getConfig().getCalendar();\r\n    List activities = calendar.getActivities(startDate, endDate);\r\n    output.clear();\r\n    for (int i = 0; i < (activities.size()); i++) {\r\n        GPCalendarActivity nextCalendarActivity = ((GPCalendarActivity) (activities.get(i)));\r\n        TaskActivityImpl nextTaskActivity;\r\n        if (nextCalendarActivity.isWorkingTime()) {\r\n            nextTaskActivity = new TaskActivityImpl(this, nextCalendarActivity.getStart(), nextCalendarActivity.getEnd());\r\n        } else\r\n            if ((i > 0) && ((i + 1) < (activities.size()))) {\r\n                nextTaskActivity = new TaskActivityImpl(this, nextCalendarActivity.getStart(), nextCalendarActivity.getEnd(), 0);\r\n            } else {\r\n                continue;\r\n            }\r\n\r\n        output.add(nextTaskActivity);\r\n    }\r\n}"},
 {"id":4327, "name":"setColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setColor(java.awt.Color)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setColor(Color color) {\r\n    myColor = color;\r\n}"},
 {"id":4328, "name":"setCompletionPercentage(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setCompletionPercentage(int)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setCompletionPercentage(int percentage) {\r\n    int oldPercentage = myCompletionPercentage;\r\n    myCompletionPercentage = percentage;\r\n    if (oldPercentage != (myCompletionPercentage)) {\r\n        TaskImpl.EventSender progressEventSender = new TaskImpl.ProgressEventSender();\r\n        progressEventSender.enable();\r\n        progressEventSender.fireEvent();\r\n    }\r\n}"},
 {"id":4329, "name":"setCritical(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setCritical(boolean)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void setCritical(boolean critical) {\r\n    this.critical = critical;\r\n}"},
 {"id":4330, "name":"setDuration(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setDuration(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setDuration(TaskLength length) {\r\n    assert (length.getLength()) > 0;\r\n    // GanttCalendar oldFinish = myEnd == null ? null : myEnd.Clone();\r\n    myLength = length;\r\n    myEnd = null;\r\n    // Date newEndDate = shiftDate(myStart.getTime(),\r\n    // length.getTimeUnit(), length.getLength());\r\n    // myEnd = new GanttCalendar(newEndDate);\r\n    // myEnd = myStart.newAdd((int) length.getLength());\r\n    recalculateActivities();\r\n    // if (areEventsEnabled()) {\r\n    // myManager.fireTaskScheduleChanged(this, myStart.Clone(),\r\n    // oldFinish);\r\n    // }\r\n}"},
 {"id":4331, "name":"setEnd(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setEnd(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setEnd(GanttCalendar end) {\r\n    GanttCalendar oldFinish = ((myEnd) == null) ? null : myEnd.Clone();\r\n    myEnd = end;\r\n    recalculateActivities();\r\n    // System.err.println(\"we have \"+myActivities.size()+\" activities\");\r\n    // if (areEventsEnabled()) {\r\n    // myManager.fireTaskScheduleChanged(this, myStart.Clone(), oldFinish);\r\n    // }\r\n}"},
 {"id":4332, "name":"setExpand(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setExpand(boolean)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setExpand(boolean expand) {\r\n    bExpand = expand;\r\n}"},
 {"id":4333, "name":"setMilestone(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setMilestone(boolean)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setMilestone(boolean milestone) {\r\n    isMilestone = milestone;\r\n}"},
 {"id":4334, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setName(java.lang.String)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setName(String name) {\r\n    myName = name;\r\n}"},
 {"id":4335, "name":"setNotes(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setNotes(java.lang.String)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setNotes(String notes) {\r\n    myNotes = notes;\r\n}"},
 {"id":4336, "name":"setPriority(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setPriority(int)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setPriority(int priority) {\r\n    myPriority = priority;\r\n}"},
 {"id":4337, "name":"setProjectTask(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setProjectTask(boolean)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setProjectTask(boolean projectTask) {\r\n    isProjectTask = projectTask;\r\n}"},
 {"id":4338, "name":"setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"// public void setStartFixed(boolean isFixed) {\r\n// isStartFixed = isFixed;\r\n// }\r\n// public void setFinishFixed(boolean isFixed) {\r\n// isFinishFixed = isFixed;\r\n// }\r\npublic void setShape(ShapePaint shape) {\r\n    myShape = shape;\r\n}"},
 {"id":4339, "name":"setStart(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setStart(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setStart(GanttCalendar start) {\r\n    Date closestWorkingStart = myManager.findClosestWorkingTime(start.getTime());\r\n    start.setTime(closestWorkingStart);\r\n    GanttCalendar oldStart = ((myStart) == null) ? null : myStart.Clone();\r\n    myStart = start;\r\n    GanttCalendar oldEnd = getEnd();\r\n    // if (myID>=0) {\r\n    recalculateActivities();\r\n    // }\r\n}"},
 {"id":4340, "name":"setTaskIDHack(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setTaskIDHack(int)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"// TODO: remove this hack. ID must never be changed\r\nprotected void setTaskIDHack(int taskID) {\r\n    myID = taskID;\r\n}"},
 {"id":4341, "name":"setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setTaskInfo(TaskInfo taskInfo) {\r\n    myTaskInfo = taskInfo;\r\n}"},
 {"id":4342, "name":"setThirdDate(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setThirdDate(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setThirdDate(GanttCalendar third) {\r\n    GanttCalendar oldThird = ((myThird) == null) ? null : myThird.Clone();\r\n    myThird = third;\r\n    // recalculateActivities();\r\n    // if (areEventsEnabled()) {\r\n    // myManager.fireTaskScheduleChanged(this, myThird.Clone(), oldThird);\r\n    // }\r\n}"},
 {"id":4343, "name":"setThirdDateConstraint(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setThirdDateConstraint(int)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setThirdDateConstraint(int thirdDateConstraint) {\r\n    myThirdDateConstraint = thirdDateConstraint;\r\n}"},
 {"id":4344, "name":"setWebLink(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.setWebLink(java.lang.String)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void setWebLink(String webLink) {\r\n    myWebLink = webLink;\r\n}"},
 {"id":4345, "name":"shapeDefined()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.shapeDefined()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"/**\r\n * Allows to determine, if a special shape is defined for this task.\r\n *\r\n * @return true, if this task has its own shape defined.\r\n */\r\npublic boolean shapeDefined() {\r\n    return (myShape) != null;\r\n}"},
 {"id":4346, "name":"shift(float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.shift(float)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public Task shift(float unitCount) {\r\n    Task clone = unpluggedClone();\r\n    if (unitCount > 0) {\r\n        TaskLength length = myManager.createLength(myLength.getTimeUnit(), unitCount);\r\n        // clone.setDuration(length);\r\n        Date shiftedDate = TaskImpl.RESTLESS_CALENDAR.shiftDate(myStart.getTime(), length);\r\n        clone.setStart(new GanttCalendar(shiftedDate));\r\n        clone.setDuration(myLength);\r\n    } else {\r\n        Date newStart = shiftDate(clone.getStart().getTime(), getManager().createLength(clone.getDuration().getTimeUnit(), ((long) (unitCount))));\r\n        clone.setStart(new GanttCalendar(newStart));\r\n        clone.setDuration(myLength);\r\n    }\r\n    return clone;\r\n}"},
 {"id":4347, "name":"shift(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.shift(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public void shift(TaskLength shift) {\r\n    float unitCount = shift.getLength(myLength.getTimeUnit());\r\n    if (unitCount != 0.0F) {\r\n        Task resultTask = shift(unitCount);\r\n        GanttCalendar oldStart = myStart;\r\n        GanttCalendar oldEnd = myEnd;\r\n        myStart = resultTask.getStart();\r\n        myLength = resultTask.getDuration();\r\n        myEnd = resultTask.getEnd();\r\n        if (areEventsEnabled()) {\r\n            myManager.fireTaskScheduleChanged(this, oldStart, oldEnd);\r\n        }\r\n        recalculateActivities();\r\n    }\r\n}"},
 {"id":4348, "name":"shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"private Date shiftDate(Date input, TaskLength duration) {\r\n    return myManager.getConfig().getCalendar().shiftDate(input, duration);\r\n}"},
 {"id":4349, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.toString()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public String toString() {\r\n    // return myID + \": \" + myStart.getTime() + \"-\" + myLength;\r\n    return getName();\r\n}"},
 {"id":4350, "name":"translateDuration(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.translateDuration(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public TaskLength translateDuration(TaskLength duration) {\r\n    return myManager.createLength(myLength.getTimeUnit(), translateDurationValue(duration));\r\n}"},
 {"id":4351, "name":"translateDurationValue(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.translateDurationValue(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"private float translateDurationValue(TaskLength duration) {\r\n    if (myLength.getTimeUnit().equals(duration.getTimeUnit())) {\r\n        return duration.getValue();\r\n    }\r\n    if (myLength.getTimeUnit().isConstructedFrom(duration.getTimeUnit())) {\r\n        return (duration.getValue()) / (myLength.getTimeUnit().getAtomCount(duration.getTimeUnit()));\r\n    }\r\n    if (duration.getTimeUnit().isConstructedFrom(myLength.getTimeUnit())) {\r\n        return (duration.getValue()) * (duration.getTimeUnit().getAtomCount(myLength.getTimeUnit()));\r\n    }\r\n    throw new RuntimeException((((\"Cant transalte duration=\" + duration) + \" into units=\") + (myLength.getTimeUnit())));\r\n}"},
 {"id":4352, "name":"unpluggedClone()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl.unpluggedClone()", "ownerclassid":"560", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl", "sourcecode":"public Task unpluggedClone() {\r\n    TaskImpl result = new TaskImpl(this, true) {\r\n        public boolean isSupertask() {\r\n            return false;\r\n        }\r\n    };\r\n    return result;\r\n}"},
 {"id":4353, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$DurationChange.-init-()", "ownerclassid":"554", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$DurationChange", "sourcecode":"DurationChange() {\r\n}"},
 {"id":4354, "name":"cacheDate(java.util.Date,int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$DurationChange.cacheDate(java.util.Date,int)", "ownerclassid":"554", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$DurationChange", "sourcecode":"void cacheDate(Date date, int length) {\r\n    if ((myDates) == null) {\r\n        myDates = new ArrayList();\r\n    }\r\n    int index = length - (myMinLength);\r\n    while (index <= (-1)) {\r\n        myDates.add(0, null);\r\n        index++;\r\n    } \r\n    while (index > (myDates.size())) {\r\n        myDates.add(null);\r\n    } \r\n    if (index == (-1)) {\r\n        myDates.add(0, date);\r\n    } else\r\n        if (index == (myDates.size())) {\r\n            myDates.add(date);\r\n        } else {\r\n            myDates.set(index, date);\r\n        }\r\n\r\n}"},
 {"id":4355, "name":"getCachedDate(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$DurationChange.getCachedDate(int)", "ownerclassid":"554", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$DurationChange", "sourcecode":"Date getCachedDate(int length) {\r\n    if ((myDates) == null) {\r\n        return null;\r\n    }\r\n    int index = length - (myMinLength);\r\n    if ((index < 0) || (index >= (myDates.size()))) {\r\n        return null;\r\n    }\r\n    return ((Date) (myDates.get(index)));\r\n}"},
 {"id":4356, "name":"enable()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$EventSender.enable()", "ownerclassid":"555", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$EventSender", "sourcecode":"void enable();"},
 {"id":4357, "name":"fireEvent()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$EventSender.fireEvent()", "ownerclassid":"555", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$EventSender", "sourcecode":"void fireEvent();"},
 {"id":4358, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$FieldChange.-init-()", "ownerclassid":"556", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$FieldChange", "sourcecode":"FieldChange() {\r\n}"},
 {"id":4359, "name":"setOldValue(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$FieldChange.setOldValue(java.lang.Object)", "ownerclassid":"556", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$FieldChange", "sourcecode":"public void setOldValue(Object oldValue) {\r\n    myOldValue = oldValue;\r\n}"},
 {"id":4360, "name":"setValue(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$FieldChange.setValue(java.lang.Object)", "ownerclassid":"556", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$FieldChange", "sourcecode":"void setValue(Object newValue) {\r\n    myFieldValue = newValue;\r\n    myEventSender.enable();\r\n}"},
 {"id":4361, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.-init-()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"MutatorImpl() {\r\n}"},
 {"id":4362, "name":"addNotes(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.addNotes(java.lang.String)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void addNotes(final String notes) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.addNotes(notes);\r\n        }\r\n    });\r\n}"},
 {"id":4363, "name":"cachePrecomputedShift(net.sourceforge.ganttproject.task.Task,float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.cachePrecomputedShift(net.sourceforge.ganttproject.task.Task,float)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"private void cachePrecomputedShift(Task result, float unitCount) {\r\n}"},
 {"id":4364, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.commit()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void commit() {\r\n    try {\r\n        boolean fireChanges = false;\r\n        if ((myStartChange) != null) {\r\n            GanttCalendar start = getStart();\r\n            this.setStart(start);\r\n        }\r\n        if ((myDurationChange) != null) {\r\n            TaskLength duration = getDuration();\r\n            this.setDuration(duration);\r\n            myEndChange = null;\r\n        }\r\n        if ((myCompletionPercentageChange) != null) {\r\n            int newValue = getCompletionPercentage();\r\n            this.setCompletionPercentage(newValue);\r\n        }\r\n        if ((myEndChange) != null) {\r\n            GanttCalendar end = getEnd();\r\n            if ((end.getTime().compareTo(this.getStart().getTime())) > 0) {\r\n                this.setEnd(end);\r\n            }\r\n        }\r\n        if ((myThirdChange) != null) {\r\n            GanttCalendar third = getThird();\r\n            this.setThirdDate(third);\r\n        }\r\n        for (int i = 0; i < (myCommands.size()); i++) {\r\n            Runnable next = ((Runnable) (myCommands.get(i)));\r\n            next.run();\r\n        }\r\n        myCommands.clear();\r\n        myPropertiesEventSender.fireEvent();\r\n        myProgressEventSender.fireEvent();\r\n    } finally {\r\n        this.myMutator = null;\r\n    }\r\n    if (((myStartChange) != null) && (this.isSupertask())) {\r\n        this.adjustNestedTasks();\r\n    }\r\n    if (((((myStartChange) != null) || ((myEndChange) != null)) || ((myDurationChange) != null)) && (areEventsEnabled())) {\r\n        GanttCalendar oldStart = ((GanttCalendar) (((myStartChange) == null) ? this.getStart() : myStartChange.myOldValue));\r\n        GanttCalendar oldEnd = ((GanttCalendar) (((myEndChange) == null) ? this.getEnd() : myEndChange.myOldValue));\r\n        myManager.fireTaskScheduleChanged(this, oldStart, oldEnd);\r\n    }\r\n}"},
 {"id":4365, "name":"getActivities()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.getActivities()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public List getActivities() {\r\n    if ((((myActivities) == null) && ((myStartChange) != null)) || ((myDurationChange) != null)) {\r\n        myActivities = new ArrayList();\r\n        this.recalculateActivities(myActivities, getStart().getTime(), this.getEnd().getTime());\r\n    }\r\n    return myActivities;\r\n}"},
 {"id":4366, "name":"getCompletionPercentage()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.getCompletionPercentage()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public int getCompletionPercentage() {\r\n    return (myCompletionPercentageChange) == null ? this.myCompletionPercentage : ((Integer) (myCompletionPercentageChange.myFieldValue)).intValue();\r\n}"},
 {"id":4367, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.getDuration()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"TaskLength getDuration() {\r\n    return (myDurationChange) == null ? this.myLength : ((TaskLength) (myDurationChange.myFieldValue));\r\n}"},
 {"id":4368, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.getEnd()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"GanttCalendar getEnd() {\r\n    return (myEndChange) == null ? null : ((GanttCalendar) (myEndChange.myFieldValue));\r\n}"},
 {"id":4369, "name":"getPrecomputedShift(float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.getPrecomputedShift(float)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"private Task getPrecomputedShift(float unitCount) {\r\n    return null;\r\n}"},
 {"id":4370, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.getStart()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"GanttCalendar getStart() {\r\n    return (myStartChange) == null ? this.myStart : ((GanttCalendar) (myStartChange.myFieldValue));\r\n}"},
 {"id":4371, "name":"getTaskInfo()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.getTaskInfo()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public TaskInfo getTaskInfo() {\r\n    return myTaskInfo;\r\n}"},
 {"id":4372, "name":"getThird()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.getThird()", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public GanttCalendar getThird() {\r\n    return (myThirdChange) == null ? this.myThird : ((GanttCalendar) (myThirdChange.myFieldValue));\r\n}"},
 {"id":4373, "name":"setColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setColor(java.awt.Color)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setColor(final Color color) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setColor(color);\r\n        }\r\n    });\r\n}"},
 {"id":4374, "name":"setCompletionPercentage(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setCompletionPercentage(int)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setCompletionPercentage(final int percentage) {\r\n    if ((myCompletionPercentageChange) == null) {\r\n        myCompletionPercentageChange = new TaskImpl.FieldChange();\r\n        myCompletionPercentageChange.myEventSender = myProgressEventSender;\r\n    }\r\n    myCompletionPercentageChange.setValue(new Integer(percentage));\r\n}"},
 {"id":4375, "name":"setCritical(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setCritical(boolean)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"// public void setStartFixed(final boolean isFixed) {\r\n// myCommands.add(new Runnable() {\r\n// public void run() {\r\n// TaskImpl.this.setStartFixed(isFixed);\r\n// }\r\n// });\r\n// }\r\n// \r\n// public void setFinishFixed(final boolean isFixed) {\r\n// myCommands.add(new Runnable() {\r\n// public void run() {\r\n// TaskImpl.this.setFinishFixed(isFixed);\r\n// }\r\n// });\r\n// \r\n// }\r\npublic void setCritical(final boolean critical) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setCritical(critical);\r\n        }\r\n    });\r\n}"},
 {"id":4376, "name":"setDuration(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setDuration(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setDuration(final TaskLength length) {\r\n    // If duration of task was set to 0 or less do not change it\r\n    if ((length.getLength()) <= 0) {\r\n        return;\r\n    }\r\n    if ((myDurationChange) == null) {\r\n        myDurationChange = new TaskImpl.DurationChange();\r\n        myDurationChange.myEventSender = myPropertiesEventSender;\r\n        myDurationChange.setValue(length);\r\n    } else {\r\n        TaskLength currentLength = ((TaskLength) (myDurationChange.myFieldValue));\r\n        if (((currentLength.getLength()) - (length.getLength())) == 0) {\r\n            return;\r\n        }\r\n    }\r\n    TaskLength prevLength = ((TaskLength) (myDurationChange.myFieldValue));\r\n    // System.err.println(\"new duration=\"+length+\"\r\n    // previous=\"+prevLength);\r\n    // Date prevEnd =\r\n    // myDurationChange.getCachedDate((int)prevLength.getLength());\r\n    Date prevEnd = null;\r\n    // System.err.println(\"previously cached shift=\"+prevEnd);\r\n    myDurationChange.setValue(length);\r\n    GanttCalendar newEnd;\r\n    Date shifted;\r\n    if (prevEnd == null) {\r\n        // System.err.println(\"no prev, length=\"+length.getLength());\r\n        shifted = this.shiftDate(getStart().getTime(), length);\r\n    } else {\r\n        // System.err.println(\"yes prev,\r\n        // length=\"+(length.getLength()-prevLength.getLength()));\r\n        shifted = this.shiftDate(prevEnd, getManager().createLength(length.getTimeUnit(), ((length.getLength()) - (prevLength.getLength()))));\r\n    }\r\n    // System.err.println(\"caching shift=\"+shifted+\" for\r\n    // duration=\"+length);\r\n    // myDurationChange.cacheDate(shifted, (int)length.getLength());\r\n    newEnd = new GanttCalendar(shifted);\r\n    setEnd(newEnd);\r\n    myActivities = null;\r\n}"},
 {"id":4377, "name":"setEnd(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setEnd(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setEnd(final GanttCalendar end) {\r\n    if ((myEndChange) == null) {\r\n        myEndChange = new TaskImpl.FieldChange();\r\n        myEndChange.myEventSender = myPropertiesEventSender;\r\n    }\r\n    myEndChange.setOldValue(this.myEnd);\r\n    myEndChange.setValue(end);\r\n    myActivities = null;\r\n}"},
 {"id":4378, "name":"setExpand(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setExpand(boolean)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setExpand(final boolean expand) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setExpand(expand);\r\n        }\r\n    });\r\n}"},
 {"id":4379, "name":"setIsolationLevel(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setIsolationLevel(int)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setIsolationLevel(int level) {\r\n    myIsolationLevel = level;\r\n}"},
 {"id":4380, "name":"setMilestone(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setMilestone(boolean)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setMilestone(final boolean milestone) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setMilestone(milestone);\r\n        }\r\n    });\r\n}"},
 {"id":4381, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setName(java.lang.String)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setName(final String name) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setName(name);\r\n        }\r\n    });\r\n}"},
 {"id":4382, "name":"setNotes(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setNotes(java.lang.String)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setNotes(final String notes) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setNotes(notes);\r\n        }\r\n    });\r\n}"},
 {"id":4383, "name":"setPriority(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setPriority(int)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setPriority(final int priority) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setPriority(priority);\r\n        }\r\n    });\r\n}"},
 {"id":4384, "name":"setProjectTask(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setProjectTask(boolean)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setProjectTask(final boolean projectTask) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setProjectTask(projectTask);\r\n        }\r\n    });\r\n}"},
 {"id":4385, "name":"setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setShape(final ShapePaint shape) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setShape(shape);\r\n        }\r\n    });\r\n}"},
 {"id":4386, "name":"setStart(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setStart(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setStart(final GanttCalendar start) {\r\n    assert start != null;\r\n    GanttCalendar currentStart = getStart();\r\n    if ((currentStart != null) && (start.equals(currentStart))) {\r\n        return;\r\n    }\r\n    if ((myStartChange) == null) {\r\n        myStartChange = new TaskImpl.FieldChange();\r\n        myStartChange.myEventSender = myPropertiesEventSender;\r\n    }\r\n    myStartChange.setOldValue(this.myStart);\r\n    myStartChange.setValue(start);\r\n    myActivities = null;\r\n}"},
 {"id":4387, "name":"setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setTaskInfo(TaskInfo taskInfo) {\r\n    myTaskInfo = taskInfo;\r\n}"},
 {"id":4388, "name":"setThird(net.sourceforge.ganttproject.GanttCalendar,int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setThird(net.sourceforge.ganttproject.GanttCalendar,int)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void setThird(final GanttCalendar third, final int thirdDateConstraint) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setThirdDateConstraint(thirdDateConstraint);\r\n        }\r\n    });\r\n    if ((myThirdChange) == null) {\r\n        myThirdChange = new TaskImpl.FieldChange();\r\n        myThirdChange.myEventSender = myPropertiesEventSender;\r\n    }\r\n    myThirdChange.setValue(third);\r\n    myActivities = null;\r\n}"},
 {"id":4389, "name":"shift(float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.shift(float)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void shift(float unitCount) {\r\n    Task result = getPrecomputedShift(unitCount);\r\n    if (result == null) {\r\n        result = this.shift(unitCount);\r\n        cachePrecomputedShift(result, unitCount);\r\n    }\r\n    // System.err.println(\"[MutatorImpl] shift(): result=\"+result);\r\n    setStart(result.getStart());\r\n    setDuration(result.getDuration());\r\n    setEnd(result.getEnd());\r\n}"},
 {"id":4390, "name":"shift(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.shift(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"557", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "sourcecode":"public void shift(TaskLength shift) {\r\n    this.shift(shift);\r\n}"},
 {"id":4391, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$ProgressEventSender.-init-()", "ownerclassid":"558", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$ProgressEventSender", "sourcecode":"ProgressEventSender() {\r\n}"},
 {"id":4392, "name":"enable()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$ProgressEventSender.enable()", "ownerclassid":"558", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$ProgressEventSender", "sourcecode":"public void enable() {\r\n    myEnabled = true;\r\n}"},
 {"id":4393, "name":"fireEvent()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$ProgressEventSender.fireEvent()", "ownerclassid":"558", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$ProgressEventSender", "sourcecode":"public void fireEvent() {\r\n    if (myEnabled) {\r\n        myManager.fireTaskProgressChanged(this);\r\n    }\r\n    myEnabled = false;\r\n}"},
 {"id":4394, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$PropertiesEventSender.-init-()", "ownerclassid":"559", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$PropertiesEventSender", "sourcecode":"PropertiesEventSender() {\r\n}"},
 {"id":4395, "name":"enable()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$PropertiesEventSender.enable()", "ownerclassid":"559", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$PropertiesEventSender", "sourcecode":"public void enable() {\r\n    myEnabled = true;\r\n}"},
 {"id":4396, "name":"fireEvent()", "fullmethod":"net.sourceforge.ganttproject.task.TaskImpl$PropertiesEventSender.fireEvent()", "ownerclassid":"559", "ownerclassname":"net.sourceforge.ganttproject.task.TaskImpl$PropertiesEventSender", "sourcecode":"public void fireEvent() {\r\n    if (myEnabled) {\r\n        myManager.fireTaskPropertiesChanged(this);\r\n    }\r\n    myEnabled = false;\r\n}"},
 {"id":4397, "name":"getLength()", "fullmethod":"net.sourceforge.ganttproject.task.TaskLength.getLength()", "ownerclassid":"562", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLength", "sourcecode":"long getLength();"},
 {"id":4398, "name":"getLength(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.task.TaskLength.getLength(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"562", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLength", "sourcecode":"float getLength(TimeUnit unit);"},
 {"id":4399, "name":"getTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.task.TaskLength.getTimeUnit()", "ownerclassid":"562", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLength", "sourcecode":"TimeUnit getTimeUnit();"},
 {"id":4400, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.task.TaskLength.getValue()", "ownerclassid":"562", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLength", "sourcecode":"float getValue();"},
 {"id":4401, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.task.TaskLengthImpl.-init-(net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"563", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "sourcecode":"public TaskLengthImpl(TimeUnit unit, long count) {\r\n    myUnit = unit;\r\n    myCount = count;\r\n}"},
 {"id":4402, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskLengthImpl.-init-(net.sourceforge.ganttproject.time.TimeUnit,float)", "ownerclassid":"563", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "sourcecode":"/**\r\n *\r\n *\r\n * @param unit\r\n * \t\t\r\n * @param length\r\n * \t\t\r\n */\r\npublic TaskLengthImpl(TimeUnit unit, float length) {\r\n    myUnit = unit;\r\n    myCount = length;\r\n}"},
 {"id":4403, "name":"getLength()", "fullmethod":"net.sourceforge.ganttproject.task.TaskLengthImpl.getLength()", "ownerclassid":"563", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "sourcecode":"public long getLength() {\r\n    return ((long) (myCount));\r\n}"},
 {"id":4404, "name":"getLength(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.task.TaskLengthImpl.getLength(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"563", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "sourcecode":"public float getLength(TimeUnit unit) {\r\n    if (myUnit.isConstructedFrom(unit)) {\r\n        return ((float) (myCount)) * (myUnit.getAtomCount(unit));\r\n    } else\r\n        if (unit.isConstructedFrom(myUnit)) {\r\n            return ((float) (myCount)) / (unit.getAtomCount(myUnit));\r\n        } else\r\n            if (!(unit.equals(myUnit))) {\r\n                throw new IllegalArgumentException((((\"Cant convert unit=\" + unit) + \" to my unit=\") + (myUnit)));\r\n            }\r\n\r\n\r\n    return myCount;\r\n}"},
 {"id":4405, "name":"getTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.task.TaskLengthImpl.getTimeUnit()", "ownerclassid":"563", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "sourcecode":"public TimeUnit getTimeUnit() {\r\n    return myUnit;\r\n}"},
 {"id":4406, "name":"getValue()", "fullmethod":"net.sourceforge.ganttproject.task.TaskLengthImpl.getValue()", "ownerclassid":"563", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "sourcecode":"public float getValue() {\r\n    return myCount;\r\n}"},
 {"id":4407, "name":"setLength(net.sourceforge.ganttproject.time.TimeUnit,long)", "fullmethod":"net.sourceforge.ganttproject.task.TaskLengthImpl.setLength(net.sourceforge.ganttproject.time.TimeUnit,long)", "ownerclassid":"563", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "sourcecode":"public void setLength(TimeUnit unit, long length) {\r\n    if (!(unit.equals(myUnit))) {\r\n        throw new IllegalArgumentException((((\"Cant convert unit=\" + unit) + \" to my unit=\") + (myUnit)));\r\n    }\r\n    myCount = length;\r\n}"},
 {"id":4408, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.TaskLengthImpl.toString()", "ownerclassid":"563", "ownerclassname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "sourcecode":"public String toString() {\r\n    return ((\"\" + (myCount)) + \" \") + (myUnit.getName());\r\n}"},
 {"id":4409, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.-init-()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"Access() {\r\n}"},
 {"id":4410, "name":"addTaskListener(net.sourceforge.ganttproject.task.event.TaskListener)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.addTaskListener(net.sourceforge.ganttproject.task.event.TaskListener)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"void addTaskListener(TaskListener listener);"},
 {"id":4411, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.clear()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public void clear();"},
 {"id":4412, "name":"createConstraint(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.createConstraint(int)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"TaskDependencyConstraint createConstraint(int constraintID);"},
 {"id":4413, "name":"createLength(long)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.createLength(long)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public TaskLength createLength(long length);"},
 {"id":4414, "name":"createLength(net.sourceforge.ganttproject.time.TimeUnit,float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.createLength(net.sourceforge.ganttproject.time.TimeUnit,float)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"TaskLength createLength(TimeUnit unit, float length);"},
 {"id":4415, "name":"createLength(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.createLength(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public TaskLength createLength(TimeUnit timeUnit, Date startDate, Date endDate);"},
 {"id":4416, "name":"createTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.createTask()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public GanttTask createTask();"},
 {"id":4417, "name":"createTask(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.createTask(int)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public GanttTask createTask(int taskId);"},
 {"id":4418, "name":"deleteTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.deleteTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"// /**\r\n// * Resets the critical path, i.e. reset all critical tasks to normal\r\n// tasks.\r\n// * @param root The root of the tasks to consider.\r\n// */\r\n// public void resetCriticalPath(TaskNode root);\r\npublic void deleteTask(Task tasktoRemove);"},
 {"id":4419, "name":"emptyClone()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.emptyClone()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public TaskManager emptyClone();"},
 {"id":4420, "name":"getAlgorithmCollection()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getAlgorithmCollection()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"AlgorithmCollection getAlgorithmCollection();"},
 {"id":4421, "name":"getCalendar()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getCalendar()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"GPCalendar getCalendar();"},
 {"id":4422, "name":"getCustomColumnStorage()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getCustomColumnStorage()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"CustomColumnsStorage getCustomColumnStorage();"},
 {"id":4423, "name":"getDependencyCollection()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getDependencyCollection()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"TaskDependencyCollection getDependencyCollection();"},
 {"id":4424, "name":"getProjectEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getProjectEnd()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public Date getProjectEnd();"},
 {"id":4425, "name":"getProjectLength()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getProjectLength()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public TaskLength getProjectLength();"},
 {"id":4426, "name":"getProjectStart()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getProjectStart()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public Date getProjectStart();"},
 {"id":4427, "name":"getRootTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getRootTask()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public Task getRootTask();"},
 {"id":4428, "name":"getTask(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getTask(int)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public GanttTask getTask(int taskId);"},
 {"id":4429, "name":"getTaskCount()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getTaskCount()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public int getTaskCount();"},
 {"id":4430, "name":"getTaskHierarchy()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getTaskHierarchy()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"TaskContainmentHierarchyFacade getTaskHierarchy();"},
 {"id":4431, "name":"getTasks()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.getTasks()", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"Task[] getTasks();"},
 {"id":4432, "name":"importAssignments(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.ResourceManager,java.util.Map,java.util.Map)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.importAssignments(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.ResourceManager,java.util.Map,java.util.Map)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public void importAssignments(TaskManager importedTaskManager, ResourceManager hrManager, Map original2importedTask, Map original2importedResource);"},
 {"id":4433, "name":"importData(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.importData(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public Map importData(TaskManager taskManager);"},
 {"id":4434, "name":"processCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.processCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"/**\r\n * Processes the critical path findind on <code>root</code> tasks.\r\n *\r\n * @param root\r\n * \t\tThe root of the tasks to consider in the critical path\r\n * \t\tfinding.\r\n */\r\npublic void processCriticalPath(TaskNode root);"},
 {"id":4435, "name":"registerTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager.registerTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"565", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager", "sourcecode":"public void registerTask(Task task);"},
 {"id":4436, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager$Access.-init-()", "ownerclassid":"564", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager$Access", "sourcecode":"Access() {\r\n}"},
 {"id":4437, "name":"newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig)", "ownerclassid":"564", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager$Access", "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory containmentFacadeFactory, TaskManagerConfig config) {\r\n    return new TaskManagerImpl(containmentFacadeFactory, config, null);\r\n}"},
 {"id":4438, "name":"newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"564", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManager$Access", "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory factory, TaskManagerConfig taskConfig, CustomColumnsStorage customColumnsStorage) {\r\n    return new TaskManagerImpl(factory, taskConfig, customColumnsStorage);\r\n}"},
 {"id":4439, "name":"getCalendar()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerConfig.getCalendar()", "ownerclassid":"566", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerConfig", "sourcecode":"GPCalendar getCalendar();"},
 {"id":4440, "name":"getDefaultColor()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerConfig.getDefaultColor()", "ownerclassid":"566", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerConfig", "sourcecode":"Color getDefaultColor();"},
 {"id":4441, "name":"getProjectDocumentURL()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerConfig.getProjectDocumentURL()", "ownerclassid":"566", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerConfig", "sourcecode":"URL getProjectDocumentURL();"},
 {"id":4442, "name":"getResourceManager()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerConfig.getResourceManager()", "ownerclassid":"566", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerConfig", "sourcecode":"ResourceManager getResourceManager();"},
 {"id":4443, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerConfig.getTimeUnitStack()", "ownerclassid":"566", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerConfig", "sourcecode":"TimeUnitStack getTimeUnitStack();"},
 {"id":4444, "name":"-init-(net.sourceforge.ganttproject.task.TaskManagerImpl)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.-init-(net.sourceforge.ganttproject.task.TaskManagerImpl)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"TaskMap(TaskManagerImpl taskManager) {\r\n    myComparator = new TaskDocumentOrderComparator(taskManager);\r\n    myManager = taskManager;\r\n}"},
 {"id":4445, "name":"-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"TaskManagerImpl(TaskContainmentHierarchyFacade.Factory containmentFacadeFactory, TaskManagerConfig config, CustomColumnsStorage columnStorage) {\r\n    myCustomColumnStorage = (columnStorage == null) ? new CustomColumnsStorage() : columnStorage;\r\n    myConfig = config;\r\n    myHierarchyManager = new TaskHierarchyManagerImpl();\r\n    EventDispatcher dispatcher = new EventDispatcher() {\r\n        public void fireDependencyAdded(TaskDependency dep) {\r\n            TaskManagerImpl.this.fireDependencyAdded(dep);\r\n        }\r\n\r\n        public void fireDependencyRemoved(TaskDependency dep) {\r\n            TaskManagerImpl.this.fireDependencyRemoved(dep);\r\n        }\r\n    };\r\n    myDependencyCollection = new TaskDependencyCollectionImpl(containmentFacadeFactory, dispatcher) {\r\n        private TaskContainmentHierarchyFacade myTaskHierarchy;\r\n\r\n        protected TaskContainmentHierarchyFacade getTaskHierarchy() {\r\n            if ((myTaskHierarchy) == null) {\r\n                myTaskHierarchy = TaskManagerImpl.this.getTaskHierarchy();\r\n            }\r\n            return myTaskHierarchy;\r\n        }\r\n    };\r\n    myFacadeFactory = (containmentFacadeFactory == null) ? new TaskManagerImpl.FacadeFactoryImpl() : containmentFacadeFactory;\r\n    // clear();\r\n    {\r\n        Calendar c = CalendarFactory.newCalendar();\r\n        Date today = c.getTime();\r\n        myRoot = new GanttTask(null, new GanttCalendar(today), 1, this, (-1));\r\n        myRoot.setStart(new GanttCalendar(today));\r\n        myRoot.setDuration(createLength(getConfig().getTimeUnitStack().getDefaultTimeUnit(), 1));\r\n        myRoot.setExpand(true);\r\n    }\r\n    FindPossibleDependeesAlgorithm alg1 = new FindPossibleDependeesAlgorithmImpl() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    AdjustTaskBoundsAlgorithm alg3 = new AdjustTaskBoundsAlgorithm() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    RecalculateTaskScheduleAlgorithm alg2 = new RecalculateTaskScheduleAlgorithm(alg3) {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    RecalculateTaskCompletionPercentageAlgorithm alg4 = new RecalculateTaskCompletionPercentageAlgorithm() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    ProjectBoundsAlgorithm alg5 = new ProjectBoundsAlgorithm();\r\n    myAlgorithmCollection = new AlgorithmCollection(alg1, alg2, alg3, alg4, alg5);\r\n}"},
 {"id":4446, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.-init-()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"1() {\r\n}"},
 {"id":4447, "name":"-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.dependency.EventDispatcher)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.dependency.EventDispatcher)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"2( $anonymous0,  $anonymous1) {\r\n}"},
 {"id":4448, "name":"-init-(net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.-init-(net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"5( $anonymous0) {\r\n}"},
 {"id":4449, "name":"addTaskListener(net.sourceforge.ganttproject.task.event.TaskListener)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.addTaskListener(net.sourceforge.ganttproject.task.event.TaskListener)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public void addTaskListener(TaskListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":4450, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.clear()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.task.TaskManager#clear()\n */\r\npublic void clear() {\r\n    myTaskMap.clear();\r\n    setMaxID((-1));\r\n    myDependencyCollection.clear();\r\n    {\r\n        Calendar c = CalendarFactory.newCalendar();\r\n        Date today = c.getTime();\r\n        myRoot = new GanttTask(null, new GanttCalendar(today), 1, this, (-1));\r\n        myRoot.setStart(new GanttCalendar(today));\r\n        myRoot.setDuration(createLength(getConfig().getTimeUnitStack().getDefaultTimeUnit(), 1));\r\n        myRoot.setExpand(true);\r\n    }\r\n}"},
 {"id":4451, "name":"createConstraint(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.createConstraint(int)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskDependencyConstraint createConstraint(final int constraintID) {\r\n    TaskDependencyConstraint result;\r\n    switch (constraintID) {\r\n        case GanttTaskRelationship.FS :\r\n            {\r\n                result = new FinishStartConstraintImpl();\r\n                break;\r\n            }\r\n        case GanttTaskRelationship.FF :\r\n            {\r\n                result = new FinishFinishConstraintImpl();\r\n                break;\r\n            }\r\n        case GanttTaskRelationship.SF :\r\n            {\r\n                result = new StartFinishConstraintImpl();\r\n                break;\r\n            }\r\n        case GanttTaskRelationship.SS :\r\n            {\r\n                result = new StartStartConstraintImpl();\r\n                break;\r\n            }\r\n        default :\r\n            {\r\n                throw new IllegalArgumentException((\"Unknown constraint ID=\" + constraintID));\r\n            }\r\n    }\r\n    return result;\r\n}"},
 {"id":4452, "name":"createLength(long)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.createLength(long)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskLength createLength(long count) {\r\n    return new TaskLengthImpl(getConfig().getTimeUnitStack().getDefaultTimeUnit(), count);\r\n}"},
 {"id":4453, "name":"createLength(net.sourceforge.ganttproject.time.TimeUnit,float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.createLength(net.sourceforge.ganttproject.time.TimeUnit,float)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskLength createLength(TimeUnit unit, float length) {\r\n    return new TaskLengthImpl(unit, length);\r\n}"},
 {"id":4454, "name":"createLength(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.createLength(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskLength createLength(TimeUnit timeUnit, Date startDate, Date endDate) {\r\n    TaskLength result;\r\n    int sign = 1;\r\n    if (endDate.before(startDate)) {\r\n        sign = -1;\r\n        Date temp = endDate;\r\n        endDate = startDate;\r\n        startDate = temp;\r\n    }\r\n    if (timeUnit instanceof DateFrameable) {\r\n        DateFrameable df = ((DateFrameable) (timeUnit));\r\n        int unitCount = 0;\r\n        for (; startDate.before(endDate); unitCount++) {\r\n            startDate = df.adjustRight(startDate);\r\n        }\r\n        result = new TaskLengthImpl(timeUnit, (unitCount * sign));\r\n    } else {\r\n        throw new IllegalArgumentException(((\"Time unit=\" + timeUnit) + \" is not date frameable\"));\r\n    }\r\n    return result;\r\n}"},
 {"id":4455, "name":"createTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.createTask()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public GanttTask createTask() {\r\n    GanttTask result = createTask((-1));\r\n    return result;\r\n}"},
 {"id":4456, "name":"createTask(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.createTask(int)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.task.TaskManager#createTask(int)\n */\r\npublic GanttTask createTask(int taskID) {\r\n    GanttTask result = new GanttTask(\"\", new GanttCalendar(), 1, this, taskID);\r\n    if ((result.getTaskID()) >= (getMaxID())) {\r\n        setMaxID(((result.getTaskID()) + 1));\r\n    }\r\n    // result.setTaskID(taskID);\r\n    // getTaskHierarchy().move(result, getRootTask());\r\n    // result.move(getRootTask());\r\n    fireTaskAdded(result);\r\n    return result;\r\n}"},
 {"id":4457, "name":"deleteTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.deleteTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public void deleteTask(Task tasktoRemove) {\r\n    myTaskMap.removeTask(tasktoRemove);\r\n    // TaskDependency[] dep =\r\n    // myDependencyCollection.getDependencies(tasktoRemove);\r\n    // for(int i=0;i<dep.length; i++){\r\n    // dep[i].delete();\r\n    // }\r\n    // todo REMOVE TASK FROM TASKHIERARCHY\r\n    // fireTaskRemoved(tasktoRemove,myTaskContainment.getContainer(tasktoRemove));\r\n}"},
 {"id":4458, "name":"emptyClone()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.emptyClone()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskManager emptyClone() {\r\n    return new TaskManagerImpl(null, myConfig, null);\r\n}"},
 {"id":4459, "name":"findClosestWorkingTime(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.findClosestWorkingTime(java.util.Date)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public Date findClosestWorkingTime(Date time) {\r\n    return getCalendar().findClosestWorkingTime(time);\r\n}"},
 {"id":4460, "name":"fireDependencyAdded(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireDependencyAdded(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"private void fireDependencyAdded(TaskDependency newDependency) {\r\n    if (areEventsEnabled) {\r\n        TaskDependencyEvent e = new TaskDependencyEvent(getDependencyCollection(), newDependency);\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.dependencyAdded(e);\r\n        }\r\n    }\r\n}"},
 {"id":4461, "name":"fireDependencyRemoved(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireDependencyRemoved(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"private void fireDependencyRemoved(TaskDependency dep) {\r\n    TaskDependencyEvent e = new TaskDependencyEvent(getDependencyCollection(), dep);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n        next.dependencyRemoved(e);\r\n    }\r\n}"},
 {"id":4462, "name":"fireTaskAdded(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskAdded(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"private void fireTaskAdded(Task task) {\r\n    if (areEventsEnabled) {\r\n        TaskHierarchyEvent e = new TaskHierarchyEvent(this, task, null, getTaskHierarchy().getContainer(task));\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskAdded(e);\r\n        }\r\n    }\r\n}"},
 {"id":4463, "name":"fireTaskProgressChanged(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskProgressChanged(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public void fireTaskProgressChanged(Task changedTask) {\r\n    if (areEventsEnabled) {\r\n        TaskPropertyEvent e = new TaskPropertyEvent(changedTask);\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskProgressChanged(e);\r\n        }\r\n    }\r\n}"},
 {"id":4464, "name":"fireTaskPropertiesChanged(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskPropertiesChanged(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"void fireTaskPropertiesChanged(Task task) {\r\n    if (areEventsEnabled) {\r\n        TaskPropertyEvent e = new TaskPropertyEvent(task);\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskPropertiesChanged(e);\r\n        }\r\n    }\r\n}"},
 {"id":4465, "name":"fireTaskRemoved(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskRemoved(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"private void fireTaskRemoved(Task task, Task oldSupertask) {\r\n    TaskHierarchyEvent e = new TaskHierarchyEvent(this, task, oldSupertask, null);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n        next.taskRemoved(e);\r\n    }\r\n}"},
 {"id":4466, "name":"fireTaskScheduleChanged(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskScheduleChanged(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"void fireTaskScheduleChanged(Task changedTask, GanttCalendar oldStartDate, GanttCalendar oldFinishDate) {\r\n    if (areEventsEnabled) {\r\n        TaskScheduleEvent e = new TaskScheduleEvent(changedTask, oldStartDate, oldFinishDate, changedTask.getStart(), changedTask.getEnd());\r\n        // List copy = new ArrayList(myListeners);\r\n        // myListeners.clear();\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskScheduleChanged(e);\r\n        }\r\n    }\r\n}"},
 {"id":4467, "name":"getAlgorithmCollection()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getAlgorithmCollection()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public AlgorithmCollection getAlgorithmCollection() {\r\n    return myAlgorithmCollection;\r\n}"},
 {"id":4468, "name":"getCalendar()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getCalendar()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public GPCalendar getCalendar() {\r\n    return getConfig().getCalendar();\r\n}"},
 {"id":4469, "name":"getConfig()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getConfig()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskManagerConfig getConfig() {\r\n    return myConfig;\r\n}"},
 {"id":4470, "name":"getCustomColumnStorage()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getCustomColumnStorage()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public CustomColumnsStorage getCustomColumnStorage() {\r\n    return myCustomColumnStorage;\r\n}"},
 {"id":4471, "name":"getDependencyCollection()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getDependencyCollection()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskDependencyCollection getDependencyCollection() {\r\n    return myDependencyCollection;\r\n}"},
 {"id":4472, "name":"getHierarchyManager()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getHierarchyManager()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskHierarchyManagerImpl getHierarchyManager() {\r\n    return myHierarchyManager;\r\n}"},
 {"id":4473, "name":"getMaxID()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getMaxID()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public int getMaxID() {\r\n    return myMaxID;\r\n}"},
 {"id":4474, "name":"getProjectDocument()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getProjectDocument()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public URL getProjectDocument() {\r\n    return myConfig.getProjectDocumentURL();\r\n}"},
 {"id":4475, "name":"getProjectEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getProjectEnd()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public Date getProjectEnd() {\r\n    if (myTaskMap.isEmpty()) {\r\n        return myRoot.getStart().getTime();\r\n    }\r\n    ProjectBoundsAlgorithm.Result result = getAlgorithmCollection().getProjectBoundsAlgorithm().getBounds(Arrays.asList(myTaskMap.getTasks()));\r\n    return result.upperBound;\r\n}"},
 {"id":4476, "name":"getProjectLength()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getProjectLength()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskLength getProjectLength() {\r\n    if (myTaskMap.isEmpty()) {\r\n        return createLength(getConfig().getTimeUnitStack().getDefaultTimeUnit(), 0);\r\n    }\r\n    ProjectBoundsAlgorithm.Result result = getAlgorithmCollection().getProjectBoundsAlgorithm().getBounds(Arrays.asList(myTaskMap.getTasks()));\r\n    return createLength(getConfig().getTimeUnitStack().getDefaultTimeUnit(), result.lowerBound, result.upperBound);\r\n}"},
 {"id":4477, "name":"getProjectStart()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getProjectStart()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public Date getProjectStart() {\r\n    if (myTaskMap.isEmpty()) {\r\n        return myRoot.getStart().getTime();\r\n    }\r\n    ProjectBoundsAlgorithm.Result result = getAlgorithmCollection().getProjectBoundsAlgorithm().getBounds(Arrays.asList(myTaskMap.getTasks()));\r\n    return result.lowerBound;\r\n}"},
 {"id":4478, "name":"getRootTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getRootTask()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public Task getRootTask() {\r\n    if ((myRoot) == null) {\r\n    }\r\n    return myRoot;\r\n}"},
 {"id":4479, "name":"getTask(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getTask(int)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.task.TaskManager#getTask(int)\n */\r\npublic GanttTask getTask(int taskId) {\r\n    return ((GanttTask) (myTaskMap.getTask(taskId)));\r\n}"},
 {"id":4480, "name":"getTaskCount()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getTaskCount()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public int getTaskCount() {\r\n    return myTaskMap.size();\r\n}"},
 {"id":4481, "name":"getTaskHierarchy()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getTaskHierarchy()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public TaskContainmentHierarchyFacade getTaskHierarchy() {\r\n    // if (myTaskContainment==null) {\r\n    return myFacadeFactory.createFacede();\r\n    // }\r\n    // return myTaskContainment;\r\n}"},
 {"id":4482, "name":"getTasks()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.getTasks()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public Task[] getTasks() {\r\n    return myTaskMap.getTasks();\r\n    // return (Task[]) myId2task.values().toArray(new Task[myId2task.size()]);\r\n}"},
 {"id":4483, "name":"importAssignments(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.ResourceManager,java.util.Map,java.util.Map)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.importAssignments(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.ResourceManager,java.util.Map,java.util.Map)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public void importAssignments(TaskManager importedTaskManager, ResourceManager hrManager, Map original2importedTask, Map original2importedResource) {\r\n    Task[] tasks = importedTaskManager.getTasks();\r\n    for (int i = 0; i < (tasks.length); i++) {\r\n        ResourceAssignment[] assignments = tasks[i].getAssignments();\r\n        for (int j = 0; j < (assignments.length); j++) {\r\n            Task task = getTask(((Task) (original2importedTask.get(tasks[i]))).getTaskID());\r\n            ResourceAssignment assignment = task.getAssignmentCollection().addAssignment(((HumanResource) (original2importedResource.get(assignments[j].getResource()))));\r\n            assignment.setLoad(assignments[j].getLoad());\r\n            assignment.setCoordinator(assignments[j].isCoordinator());\r\n        }\r\n    }\r\n}"},
 {"id":4484, "name":"importData(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,java.util.Map)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.importData(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,java.util.Map)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"private void importData(Task importRoot, Task root, Map original2imported) {\r\n    Task[] nested = importRoot.getManager().getTaskHierarchy().getNestedTasks(importRoot);\r\n    for (int i = (nested.length) - 1; i >= 0; i--) {\r\n        Task nextImported = createTask();\r\n        registerTask(nextImported);\r\n        nextImported.setName(nested[i].getName());\r\n        nextImported.setStart(nested[i].getStart().Clone());\r\n        nextImported.setDuration(nested[i].getDuration());\r\n        nextImported.setMilestone(nested[i].isMilestone());\r\n        nextImported.setColor(nested[i].getColor());\r\n        nextImported.setShape(nested[i].getShape());\r\n        nextImported.setCompletionPercentage(nested[i].getCompletionPercentage());\r\n        nextImported.setNotes(nested[i].getNotes());\r\n        nextImported.setTaskInfo(nested[i].getTaskInfo());\r\n        nextImported.setExpand(nested[i].getExpand());\r\n        if ((nested[i].getThird()) != null) {\r\n            nextImported.setThirdDate(nested[i].getThird().Clone());\r\n            nextImported.setThirdDateConstraint(nested[i].getThirdDateConstraint());\r\n        }\r\n        myCustomColumnStorage.processNewTask(nextImported);\r\n        CustomColumnsValues customValues = nested[i].getCustomValues();\r\n        Collection customColums = myCustomColumnStorage.getCustomColums();\r\n        for (Iterator it = customColums.iterator(); it.hasNext();) {\r\n            CustomColumn nextColumn = ((CustomColumn) (it.next()));\r\n            Object value = customValues.getValue(nextColumn.getName());\r\n            if (value != null) {\r\n                try {\r\n                    nextImported.getCustomValues().setValue(nextColumn.getName(), value);\r\n                } catch (CustomColumnsException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // System.out.println (\"Import : \" + nextImported.getTaskID() + \"\r\n        // -->> \" + nextImported.getName());\r\n        original2imported.put(nested[i], nextImported);\r\n        // nextImported.move(root);\r\n        getTaskHierarchy().move(nextImported, root);\r\n        importData(nested[i], nextImported, original2imported);\r\n    }\r\n}"},
 {"id":4485, "name":"importData(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.importData(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public Map importData(TaskManager taskManager) {\r\n    Task importRoot = taskManager.getRootTask();\r\n    Map original2imported = new HashMap();\r\n    importData(importRoot, getRootTask(), original2imported);\r\n    TaskDependency[] deps = taskManager.getDependencyCollection().getDependencies();\r\n    for (int i = 0; i < (deps.length); i++) {\r\n        Task nextDependant = deps[i].getDependant();\r\n        Task nextDependee = deps[i].getDependee();\r\n        Task importedDependant = ((Task) (original2imported.get(nextDependant)));\r\n        Task importedDependee = ((Task) (original2imported.get(nextDependee)));\r\n        try {\r\n            TaskDependency dependency = getDependencyCollection().createDependency(importedDependant, importedDependee, new FinishStartConstraintImpl());\r\n            dependency.setConstraint(deps[i].getConstraint());\r\n            dependency.setDifference(deps[i].getDifference());\r\n            dependency.setHardness(deps[i].getHardness());\r\n        } catch (TaskDependencyException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    }\r\n    return original2imported;\r\n}"},
 {"id":4486, "name":"increaseMaxID()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.increaseMaxID()", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"void increaseMaxID() {\r\n    (myMaxID)++;\r\n}"},
 {"id":4487, "name":"isRegistered(net.sourceforge.ganttproject.task.TaskImpl)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.isRegistered(net.sourceforge.ganttproject.task.TaskImpl)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"boolean isRegistered(TaskImpl task) {\r\n    return (myTaskMap.getTask(task.getTaskID())) != null;\r\n}"},
 {"id":4488, "name":"onTaskMoved(net.sourceforge.ganttproject.task.TaskImpl)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.onTaskMoved(net.sourceforge.ganttproject.task.TaskImpl)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"void onTaskMoved(TaskImpl task) {\r\n    if (!(isRegistered(task))) {\r\n        registerTask(task);\r\n    }\r\n    myTaskMap.setDirty();\r\n}"},
 {"id":4489, "name":"processCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.processCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public void processCriticalPath(TaskNode root) {\r\n    try {\r\n        myAlgorithmCollection.getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n    CriticalPathAlgorithm criticAlgo = new CriticalPathAlgorithmImpl(root, getCalendar());\r\n    Task[] tasks = criticAlgo.getCriticalTasks();\r\n    resetCriticalPath(root);\r\n    for (int i = 0; i < (tasks.length); i++)\r\n        tasks[i].setCritical(true);\r\n\r\n}"},
 {"id":4490, "name":"registerTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.registerTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.task.TaskManager#registerTask(net.sourceforge.ganttproject.GanttTask)\n */\r\npublic void registerTask(Task task) {\r\n    int taskID = task.getTaskID();\r\n    if ((myTaskMap.getTask(taskID)) == null) {\r\n        // if the taskID is\r\n        // not in the map\r\n        myTaskMap.addTask(task);\r\n        if ((getMaxID()) < taskID) {\r\n            setMaxID((taskID + 1));\r\n        }\r\n    } else {\r\n        // taskID has been in the map. the newTask will not be added\r\n        throw new RuntimeException((\"There is a task that already has the ID \" + taskID));\r\n    }\r\n}"},
 {"id":4491, "name":"resetCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.resetCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"private void resetCriticalPath(TaskNode root) {\r\n    Enumeration en = root.preorderEnumeration();\r\n    while (en.hasMoreElements()) {\r\n        Object next = en.nextElement();\r\n        if (!(next instanceof TaskNode))\r\n            continue;\r\n\r\n        Task t = ((Task) (((TaskNode) (next)).getUserObject()));\r\n        t.setCritical(false);\r\n    } \r\n}"},
 {"id":4492, "name":"setEventsEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.setEventsEnabled(boolean)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"public void setEventsEnabled(boolean enabled) {\r\n    areEventsEnabled = enabled;\r\n}"},
 {"id":4493, "name":"setMaxID(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl.setMaxID(int)", "ownerclassid":"570", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "sourcecode":"private void setMaxID(int id) {\r\n    myMaxID = id;\r\n}"},
 {"id":4494, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeFactoryImpl.-init-()", "ownerclassid":"567", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeFactoryImpl", "sourcecode":"FacadeFactoryImpl() {\r\n}"},
 {"id":4495, "name":"createFacede()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeFactoryImpl.createFacede()", "ownerclassid":"567", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeFactoryImpl", "sourcecode":"// private final Task myRoot;\r\n// \r\n// FacadeFactoryImpl(Task root) {\r\n// myRoot = root;\r\n// }\r\npublic TaskContainmentHierarchyFacade createFacede() {\r\n    return new TaskManagerImpl.FacadeImpl();\r\n}"},
 {"id":4496, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.-init-()", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"FacadeImpl() {\r\n}"},
 {"id":4497, "name":"areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"public boolean areUnrelated(Task first, Task second) {\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(first); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(second)) {\r\n        return false;\r\n    }\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(second); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(first)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":4498, "name":"compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"public int compareDocumentOrder(Task task1, Task task2) {\r\n    if (task1 == task2) {\r\n        return 0;\r\n    }\r\n    List buffer1 = new ArrayList();\r\n    for (Task container = task1; container != null; container = getContainer(container)) {\r\n        buffer1.add(0, container);\r\n    }\r\n    List buffer2 = new ArrayList();\r\n    for (Task container = task2; container != null; container = getContainer(container)) {\r\n        buffer2.add(0, container);\r\n    }\r\n    if (((buffer1.get(0)) != (getRootTask())) && ((buffer2.get(0)) == (getRootTask()))) {\r\n        return -1;\r\n    }\r\n    if (((buffer1.get(0)) == (getRootTask())) && ((buffer2.get(0)) != (getRootTask()))) {\r\n        return 1;\r\n    }\r\n    int result = 0;\r\n    int i = 0;\r\n    Task commonRoot = null;\r\n    while (true) {\r\n        if (i == (buffer1.size())) {\r\n            return -1;\r\n        }\r\n        if (i == (buffer2.size())) {\r\n            return 1;\r\n        }\r\n        Task root1 = ((Task) (buffer1.get(i)));\r\n        Task root2 = ((Task) (buffer2.get(i)));\r\n        if (root1 != root2) {\r\n            assert commonRoot != null : ((((((\"Failure comparing task=\" + task1) + \" and task=\") + task2) + \"\n. Path1=\") + buffer1) + \"\nPath2=\") + buffer2;\r\n            Task[] nestedTasks = commonRoot.getNestedTasks();\r\n            for (int j = 0; j < (nestedTasks.length); j++) {\r\n                if ((nestedTasks[j]) == root1) {\r\n                    return -1;\r\n                }\r\n                if ((nestedTasks[j]) == root2) {\r\n                    return 1;\r\n                }\r\n            }\r\n            throw new IllegalStateException(\"We should not be here\");\r\n        }\r\n        i++;\r\n        commonRoot = root1;\r\n    } \r\n}"},
 {"id":4499, "name":"contains(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.contains(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"public boolean contains(Task task) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":4500, "name":"getContainer(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.getContainer(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"public Task getContainer(Task nestedTask) {\r\n    return nestedTask.getSupertask();\r\n}"},
 {"id":4501, "name":"getDepth(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.getDepth(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"public int getDepth(Task task) {\r\n    int depth = 0;\r\n    while (task != (myRoot)) {\r\n        task = task.getSupertask();\r\n        depth++;\r\n    } \r\n    return depth;\r\n}"},
 {"id":4502, "name":"getNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.getNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"// public FacadeImpl(Task root) {\r\n// myRoot = root;\r\n// }\r\npublic Task[] getNestedTasks(Task container) {\r\n    return container.getNestedTasks();\r\n}"},
 {"id":4503, "name":"getRootTask()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.getRootTask()", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"public Task getRootTask() {\r\n    return this.getRootTask();\r\n}"},
 {"id":4504, "name":"hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"public boolean hasNestedTasks(Task container) {\r\n    return (myRoot) == null ? false : myRoot.isMilestone();\r\n}"},
 {"id":4505, "name":"move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"568", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "sourcecode":"public void move(Task whatMove, Task whereMove) {\r\n    whatMove.move(whereMove);\r\n}"},
 {"id":4506, "name":"-init-(net.sourceforge.ganttproject.task.TaskManagerImpl)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.-init-(net.sourceforge.ganttproject.task.TaskManagerImpl)", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"TaskMap(TaskManagerImpl taskManager) {\r\n    myComparator = new TaskDocumentOrderComparator(taskManager);\r\n    myManager = taskManager;\r\n}"},
 {"id":4507, "name":"addTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.addTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"void addTask(Task task) {\r\n    myId2task.put(new Integer(task.getTaskID()), task);\r\n    isModified = true;\r\n}"},
 {"id":4508, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.clear()", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"public void clear() {\r\n    myId2task.clear();\r\n    isModified = true;\r\n}"},
 {"id":4509, "name":"getTask(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.getTask(int)", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"Task getTask(int id) {\r\n    return ((Task) (myId2task.get(new Integer(id))));\r\n}"},
 {"id":4510, "name":"getTasks()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.getTasks()", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"public Task[] getTasks() {\r\n    if (isModified) {\r\n        myArray = ((Task[]) (myId2task.values().toArray(new Task[myId2task.size()])));\r\n        Arrays.sort(myArray, myComparator);\r\n        isModified = false;\r\n    }\r\n    return myArray;\r\n}"},
 {"id":4511, "name":"isEmpty()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.isEmpty()", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"public boolean isEmpty() {\r\n    return myId2task.isEmpty();\r\n}"},
 {"id":4512, "name":"removeTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.removeTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"public void removeTask(Task task) {\r\n    myId2task.remove(new Integer(task.getTaskID()));\r\n    Task[] nestedTasks = myManager.getTaskHierarchy().getNestedTasks(task);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        removeTask(nestedTasks[i]);\r\n    }\r\n    isModified = true;\r\n}"},
 {"id":4513, "name":"setDirty()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.setDirty()", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"void setDirty() {\r\n    isModified = true;\r\n}"},
 {"id":4514, "name":"size()", "fullmethod":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.size()", "ownerclassid":"569", "ownerclassname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "sourcecode":"public int size() {\r\n    return myId2task.size();\r\n}"},
 {"id":4515, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.task.TaskMutator.commit()", "ownerclassid":"571", "ownerclassname":"net.sourceforge.ganttproject.task.TaskMutator", "sourcecode":"void commit();"},
 {"id":4516, "name":"getCompletionPercentage()", "fullmethod":"net.sourceforge.ganttproject.task.TaskMutator.getCompletionPercentage()", "ownerclassid":"571", "ownerclassname":"net.sourceforge.ganttproject.task.TaskMutator", "sourcecode":"int getCompletionPercentage();"},
 {"id":4517, "name":"setIsolationLevel(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskMutator.setIsolationLevel(int)", "ownerclassid":"571", "ownerclassname":"net.sourceforge.ganttproject.task.TaskMutator", "sourcecode":"void setIsolationLevel(int level);"},
 {"id":4518, "name":"setThird(net.sourceforge.ganttproject.GanttCalendar,int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskMutator.setThird(net.sourceforge.ganttproject.GanttCalendar,int)", "ownerclassid":"571", "ownerclassname":"net.sourceforge.ganttproject.task.TaskMutator", "sourcecode":"void setThird(GanttCalendar third, int thirdDateConstraint);"},
 {"id":4519, "name":"shift(float)", "fullmethod":"net.sourceforge.ganttproject.task.TaskMutator.shift(float)", "ownerclassid":"571", "ownerclassname":"net.sourceforge.ganttproject.task.TaskMutator", "sourcecode":"void shift(float unitCount);"},
 {"id":4520, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Creates an instance of TaskNode with the given task as reference.\r\n *\r\n * @param t\r\n * \t\tTask of reference.\r\n */\r\npublic TaskNode(Task t) {\r\n    super(t);\r\n    task = t;\r\n}"},
 {"id":4521, "name":"applyThirdDateConstraint()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.applyThirdDateConstraint()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"public void applyThirdDateConstraint() {\r\n    if ((task.getThird()) != null)\r\n        switch (task.getThirdDateConstraint()) {\r\n            case TaskImpl.EARLIESTBEGIN :\r\n                if (task.getThird().after(getStart())) {\r\n                    task.setStart(task.getThird().newAdd(0));\r\n                }\r\n        }\r\n\r\n}"},
 {"id":4522, "name":"getCompletionPercentage()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.getCompletionPercentage()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Returns the completion percentage of the task.\r\n *\r\n * @return The completion percentage of the task.\r\n */\r\npublic int getCompletionPercentage() {\r\n    return task.getCompletionPercentage();\r\n}"},
 {"id":4523, "name":"getDuration()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.getDuration()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Returns the duration of the task.\r\n *\r\n * @return The duration of the task.\r\n */\r\npublic int getDuration() {\r\n    return ((int) (task.getDuration().getValue()));\r\n}"},
 {"id":4524, "name":"getEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.getEnd()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Returns the end date of the task.\r\n *\r\n * @return The end date of the task.\r\n */\r\npublic GanttCalendar getEnd() {\r\n    return task.getEnd();\r\n}"},
 {"id":4525, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.getName()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Returns the name of the task.\r\n *\r\n * @return The name of the task.\r\n */\r\npublic String getName() {\r\n    return task.getName();\r\n}"},
 {"id":4526, "name":"getPriority()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.getPriority()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Returns the priority of the task.\r\n *\r\n * @return The priority of the task.\r\n */\r\npublic int getPriority() {\r\n    return task.getPriority();\r\n}"},
 {"id":4527, "name":"getStart()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.getStart()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Returns the start date of the task.\r\n *\r\n * @return The start date of the task.\r\n */\r\npublic GanttCalendar getStart() {\r\n    return task.getStart();\r\n}"},
 {"id":4528, "name":"getTaskInfo()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.getTaskInfo()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"public TaskInfo getTaskInfo() {\r\n    return task.getTaskInfo();\r\n}"},
 {"id":4529, "name":"getUserObject()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.getUserObject()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic Object getUserObject() {\r\n    return task;\r\n}"},
 {"id":4530, "name":"setCompletionPercentage(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.setCompletionPercentage(int)", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Sets the completion percentage of the task.\r\n *\r\n * @param percentage\r\n * \t\tThe percentage to be set.\r\n */\r\npublic void setCompletionPercentage(int percentage) {\r\n    task.setCompletionPercentage(percentage);\r\n}"},
 {"id":4531, "name":"setDuration(net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.setDuration(net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Sets the duration of the task.\r\n *\r\n * @param length\r\n * \t\tThe duration to be set.\r\n */\r\npublic void setDuration(TaskLength length) {\r\n    TaskMutator mutator = task.createMutator();\r\n    mutator.setDuration(length);\r\n    mutator.commit();\r\n}"},
 {"id":4532, "name":"setEnd(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.setEnd(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Sets the end date of the task.\r\n *\r\n * @param endDate\r\n * \t\tThe end date of the task to be set.\r\n */\r\npublic void setEnd(GanttCalendar endDate) {\r\n    TaskMutator mutator = task.createMutator();\r\n    mutator.setEnd(endDate);\r\n    mutator.commit();\r\n}"},
 {"id":4533, "name":"setName(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.setName(java.lang.String)", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Sets the name of the task.\r\n *\r\n * @param newName\r\n * \t\tThe name to be set.\r\n */\r\npublic void setName(String newName) {\r\n    task.setName(newName);\r\n}"},
 {"id":4534, "name":"setPriority(int)", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.setPriority(int)", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Sets the priority of the task.\r\n *\r\n * @param priority\r\n * \t\tThe priority to be set.\r\n */\r\npublic void setPriority(int priority) {\r\n    task.setPriority(priority);\r\n}"},
 {"id":4535, "name":"setStart(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.setStart(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n * Sets the start date of the task.\r\n *\r\n * @param startDate\r\n * \t\tThe start date of the task to be set.\r\n */\r\npublic void setStart(GanttCalendar startDate) {\r\n    TaskMutator mutator = task.createMutatorFixingDuration();\r\n    mutator.setStart(startDate);\r\n    mutator.commit();\r\n}"},
 {"id":4536, "name":"setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"public void setTaskInfo(TaskInfo info) {\r\n    task.setTaskInfo(info);\r\n}"},
 {"id":4537, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.TaskNode.toString()", "ownerclassid":"572", "ownerclassname":"net.sourceforge.ganttproject.task.TaskNode", "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic String toString() {\r\n    return task.getName();\r\n}"},
 {"id":4538, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskProperties.-init-()", "ownerclassid":"573", "ownerclassname":"net.sourceforge.ganttproject.task.TaskProperties", "sourcecode":"TaskProperties() {\r\n}"},
 {"id":4539, "name":"getProperty(net.sourceforge.ganttproject.task.Task,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.TaskProperties.getProperty(net.sourceforge.ganttproject.task.Task,java.lang.String)", "ownerclassid":"573", "ownerclassname":"net.sourceforge.ganttproject.task.TaskProperties", "sourcecode":"/**\r\n * Returns the task property specified by <code>propertyID</code>.\r\n *\r\n * @param task\r\n * \t\tThe task from which we want the property.\r\n * @param propertyID\r\n * \t\tThe property ID which could be <code>ID_TASK_DATES</code>,\r\n * \t\t<code>ID_TASK_NAME</code>, ... or a custom column name.\r\n * @return the task property specified by <code>propertyID</code>. The\r\nresult may be <code>null</code>.\r\n */\r\npublic static Object getProperty(Task task, String propertyID) {\r\n    Object res = null;\r\n    StringBuffer sb = new StringBuffer();\r\n    if (propertyID != null) {\r\n        if (propertyID.equals(TaskProperties.ID_TASK_DATES)) {\r\n            sb.append(\" [ \");\r\n            sb.append((((task.getStart()) + \" - \") + (task.getEnd())));\r\n            sb.append(\" ] \");\r\n            res = sb.toString();\r\n        } else\r\n            if (propertyID.equals(TaskProperties.ID_TASK_NAME)) {\r\n                sb.append(((\" \" + (task.getName())) + \" \"));\r\n                res = sb.toString();\r\n            } else\r\n                if (propertyID.equals(TaskProperties.ID_TASK_LENGTH)) {\r\n                    sb.append(\" [ \");\r\n                    sb.append(((((int) (task.getDuration().getLength())) + \" \") + (GanttLanguage.getInstance().getText(\"days\"))));\r\n                    sb.append(\" ] \");\r\n                    res = sb.toString();\r\n                } else\r\n                    if (propertyID.equals(TaskProperties.ID_TASK_ADVANCEMENT)) {\r\n                        sb.append(\" [ \");\r\n                        sb.append(((task.getCompletionPercentage()) + \"%\"));\r\n                        sb.append(\" ] \");\r\n                        res = sb.toString();\r\n                    } else\r\n                        if (propertyID.equals(TaskProperties.ID_TASK_COORDINATOR)) {\r\n                            ResourceAssignment[] assignments = task.getAssignments();\r\n                            if ((assignments.length) > 0) {\r\n                                boolean first = true;\r\n                                boolean close = false;\r\n                                int j = 0;\r\n                                for (int i = 0; i < (assignments.length); i++) {\r\n                                    if (assignments[i].isCoordinator()) {\r\n                                        j++;\r\n                                        if (first) {\r\n                                            close = true;\r\n                                            first = false;\r\n                                            sb.append(\"{\");\r\n                                        }\r\n                                        if (j > 1) {\r\n                                            sb.append(\", \");\r\n                                        }\r\n                                        sb.append(assignments[i].getResource().getName());\r\n                                    }\r\n                                }\r\n                                if (close)\r\n                                    sb.append(\"}\");\r\n\r\n                            }\r\n                            res = sb.toString();\r\n                        } else\r\n                            if (propertyID.equals(TaskProperties.ID_TASK_RESOURCES)) {\r\n                                ResourceAssignment[] assignments = task.getAssignments();\r\n                                if ((assignments.length) > 0) {\r\n                                    sb.append(\" \");\r\n                                    /* Keep coordinators and other resources separate */\r\n                                    StringBuffer resources = new StringBuffer();\r\n                                    StringBuffer coordinators = new StringBuffer();\r\n                                    for (int i = 0; i < (assignments.length); i++) {\r\n                                        /* Creates list of resources in format {coordinators},resources */\r\n                                        if (assignments[i].isCoordinator()) {\r\n                                            if ((coordinators.length()) > 0) {\r\n                                                coordinators.append(\",\");\r\n                                            }\r\n                                            coordinators.append(assignments[i].getResource().getName());\r\n                                        } else {\r\n                                            if ((resources.length()) > 0) {\r\n                                                resources.append(\",\");\r\n                                            }\r\n                                            resources.append(assignments[i].getResource().getName());\r\n                                        }\r\n                                    }\r\n                                    if ((coordinators.length()) > 0) {\r\n                                        sb.append(\"{\");\r\n                                        sb.append(coordinators);\r\n                                        sb.append(\"}\");\r\n                                        if ((resources.length()) > 0) {\r\n                                            sb.append(\",\");\r\n                                        }\r\n                                    }\r\n                                    if ((resources.length()) > 0) {\r\n                                        sb.append(resources);\r\n                                    }\r\n                                    sb.append(\" \");\r\n                                }\r\n                                res = sb.toString();\r\n                            } else\r\n                                if (propertyID.equals(TaskProperties.ID_TASK_ID)) {\r\n                                    sb.append(\"# \").append(task.getTaskID());\r\n                                    res = sb.toString();\r\n                                } else\r\n                                    if (propertyID.equals(TaskProperties.ID_TASK_PREDECESSORS)) {\r\n                                        TaskDependency[] dep = task.getDependenciesAsDependant().toArray();\r\n                                        int i = 0;\r\n                                        if ((dep != null) && ((dep.length) > 0)) {\r\n                                            for (i = 0; i < ((dep.length) - 1); i++)\r\n                                                sb.append(((dep[i].getDependee().getTaskID()) + \", \"));\r\n\r\n                                            sb.append(dep[i].getDependee().getTaskID());\r\n                                        }\r\n                                        res = sb.toString();\r\n                                    } else {\r\n                                        res = task.getCustomValues().getValue(propertyID);\r\n                                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    return res;\r\n}"},
 {"id":4540, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.-init-()", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"/**\r\n * Creates an instance of TaskSelectionManager\r\n */\r\npublic TaskSelectionManager() {\r\n}"},
 {"id":4541, "name":"addSelectionListener(net.sourceforge.ganttproject.task.TaskSelectionManager$Listener)", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.addSelectionListener(net.sourceforge.ganttproject.task.TaskSelectionManager$Listener)", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"public void addSelectionListener(TaskSelectionManager.Listener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":4542, "name":"addTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.addTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"/**\r\n * Adds <code>task</code> to the selected tasks.\r\n *\r\n * @param task\r\n * \t\tA task to add to the selected tasks.\r\n */\r\npublic void addTask(Task task) {\r\n    if (!(selectedTasks.contains(task))) {\r\n        selectedTasks.add(task);\r\n        fireSelectionChanged();\r\n    }\r\n}"},
 {"id":4543, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.clear()", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"/**\r\n * Clears the selected tasks list.\r\n */\r\npublic void clear() {\r\n    selectedTasks.clear();\r\n    fireSelectionChanged();\r\n}"},
 {"id":4544, "name":"fireSelectionChanged()", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.fireSelectionChanged()", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"private void fireSelectionChanged() {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        TaskSelectionManager.Listener next = ((TaskSelectionManager.Listener) (myListeners.get(i)));\r\n        next.selectionChanged(Collections.unmodifiableList(selectedTasks));\r\n    }\r\n}"},
 {"id":4545, "name":"fireUserInputConsumerChanged()", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.fireUserInputConsumerChanged()", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"private void fireUserInputConsumerChanged() {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        TaskSelectionManager.Listener next = ((TaskSelectionManager.Listener) (myListeners.get(i)));\r\n        next.userInputConsumerChanged(myUserInputConsumer);\r\n    }\r\n}"},
 {"id":4546, "name":"getEarliestStart()", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.getEarliestStart()", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"/**\r\n * Returns the earliest start date.\r\n *\r\n * @return The earliest start date.\r\n */\r\npublic Date getEarliestStart() {\r\n    Date res = null;\r\n    Iterator it = selectedTasks.iterator();\r\n    while (it.hasNext()) {\r\n        Task task = ((Task) (it.next()));\r\n        Date d = task.getStart().getTime();\r\n        if (res == null) {\r\n            res = d;\r\n            continue;\r\n        }\r\n        if (d.before(res))\r\n            res = d;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":4547, "name":"getLatestEnd()", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.getLatestEnd()", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"/**\r\n * Returns the latest end date.\r\n *\r\n * @return The latest end date.\r\n */\r\npublic Date getLatestEnd() {\r\n    Date res = null;\r\n    Iterator it = selectedTasks.iterator();\r\n    while (it.hasNext()) {\r\n        Task task = ((Task) (it.next()));\r\n        Date d = task.getEnd().getTime();\r\n        if (res == null) {\r\n            res = d;\r\n            continue;\r\n        }\r\n        if (d.after(res))\r\n            res = d;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":4548, "name":"getSelectedTasks()", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.getSelectedTasks()", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"/**\r\n * Returns the selected tasks list.\r\n *\r\n * @return The selected tasks list.\r\n */\r\npublic List getSelectedTasks() {\r\n    return Collections.unmodifiableList(selectedTasks);\r\n}"},
 {"id":4549, "name":"isTaskSelected(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.isTaskSelected(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"/**\r\n * Returns <code>true</code> if <code>task</code> is selected,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param task\r\n * \t\tThe task to test.\r\n * @return <code>true</code> if <code>task</code> is selected,\r\n<code>false</code> otherwise.\r\n */\r\npublic boolean isTaskSelected(Task task) {\r\n    return selectedTasks.contains(task);\r\n}"},
 {"id":4550, "name":"removeSelectionListener(net.sourceforge.ganttproject.task.TaskSelectionManager$Listener)", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.removeSelectionListener(net.sourceforge.ganttproject.task.TaskSelectionManager$Listener)", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"public void removeSelectionListener(TaskSelectionManager.Listener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":4551, "name":"removeTask(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.removeTask(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"/**\r\n * Removes <code>task</code> from the selected tasks;\r\n *\r\n * @param task\r\n * \t\tA task to remove from the selected tasks.\r\n */\r\npublic void removeTask(Task task) {\r\n    if (selectedTasks.contains(task)) {\r\n        selectedTasks.remove(task);\r\n        fireSelectionChanged();\r\n    }\r\n}"},
 {"id":4552, "name":"setUserInputConsumer(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager.setUserInputConsumer(java.lang.Object)", "ownerclassid":"575", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "sourcecode":"public void setUserInputConsumer(Object consumer) {\r\n    if (consumer != (myUserInputConsumer)) {\r\n        fireUserInputConsumerChanged();\r\n    }\r\n    myUserInputConsumer = consumer;\r\n}"},
 {"id":4553, "name":"selectionChanged(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager$Listener.selectionChanged(java.util.List)", "ownerclassid":"574", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager$Listener", "sourcecode":"void selectionChanged(List currentSelection);"},
 {"id":4554, "name":"userInputConsumerChanged(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.TaskSelectionManager$Listener.userInputConsumerChanged(java.lang.Object)", "ownerclassid":"574", "ownerclassname":"net.sourceforge.ganttproject.task.TaskSelectionManager$Listener", "sourcecode":"void userInputConsumerChanged(Object newConsumer);"},
 {"id":4555, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm.-init-()", "ownerclassid":"577", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "sourcecode":"AdjustTaskBoundsAlgorithm() {\r\n}"},
 {"id":4556, "name":"-init-(net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm.-init-(net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm)", "ownerclassid":"577", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":4557, "name":"adjustNestedTasks(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm.adjustNestedTasks(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"577", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "sourcecode":"public void adjustNestedTasks(Task supertask) throws TaskDependencyException {\r\n    TaskContainmentHierarchyFacade containmentFacade = createContainmentFacade();\r\n    /* <Task> */\r\n    List nestedTasks = new ArrayList(Arrays.asList(containmentFacade.getNestedTasks(supertask)));\r\n    if ((nestedTasks.size()) == 0) {\r\n        return;\r\n    }\r\n    SortTasksAlgorithm sortAlgorithm = new SortTasksAlgorithm();\r\n    sortAlgorithm.sortTasksByStartDate(nestedTasks);\r\n    Set modifiedTasks = new HashSet();\r\n    for (int i = 0; i < (nestedTasks.size()); i++) {\r\n        Task nextNested = ((Task) (nestedTasks.get(i)));\r\n        if (nextNested.getStart().getTime().before(supertask.getStart().getTime())) {\r\n            TaskMutator mutator = nextNested.createMutatorFixingDuration();\r\n            mutator.setStart(supertask.getStart());\r\n            mutator.commit();\r\n            // \r\n            modifiedTasks.add(nextNested);\r\n        }\r\n        if (nextNested.getEnd().getTime().after(supertask.getEnd().getTime())) {\r\n            TaskMutator mutator = nextNested.createMutatorFixingDuration();\r\n            mutator.shift(supertask.getManager().createLength(supertask.getDuration().getTimeUnit(), nextNested.getEnd().getTime(), supertask.getEnd().getTime()));\r\n            mutator.commit();\r\n            // \r\n            modifiedTasks.add(nextNested);\r\n        }\r\n    }\r\n    run(((Task[]) (modifiedTasks.toArray(new Task[0]))));\r\n    RecalculateTaskScheduleAlgorithm alg = new RecalculateTaskScheduleAlgorithm(this) {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return AdjustTaskBoundsAlgorithm.this.createContainmentFacade();\r\n        }\r\n    };\r\n    alg.run(modifiedTasks);\r\n}"},
 {"id":4558, "name":"createContainmentFacade()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm.createContainmentFacade()", "ownerclassid":"577", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "sourcecode":"protected abstract TaskContainmentHierarchyFacade createContainmentFacade();"},
 {"id":4559, "name":"run(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm.run(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"577", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "sourcecode":"public void run(Task task) {\r\n    run(new Task[]{ task });\r\n}"},
 {"id":4560, "name":"run(net.sourceforge.ganttproject.task.Task[])", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm.run(net.sourceforge.ganttproject.task.Task[])", "ownerclassid":"577", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "sourcecode":"public void run(Task[] tasks) {\r\n    if (!(isEnabled())) {\r\n        return;\r\n    }\r\n    AdjustTaskBoundsAlgorithm.AlgorithmImpl algorithmImpl = new AdjustTaskBoundsAlgorithm.AlgorithmImpl();\r\n    algorithmImpl.run(tasks);\r\n}"},
 {"id":4561, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl.-init-()", "ownerclassid":"576", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl", "sourcecode":"AlgorithmImpl() {\r\n}"},
 {"id":4562, "name":"recalculateSupertaskSchedule(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl.recalculateSupertaskSchedule(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "ownerclassid":"576", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl", "sourcecode":"private void recalculateSupertaskSchedule(final Task supertask, final TaskContainmentHierarchyFacade containmentFacade) {\r\n    Task[] nested = containmentFacade.getNestedTasks(supertask);\r\n    if ((nested.length) == 0) {\r\n        return;\r\n    }\r\n    GanttCalendar maxEnd = null;\r\n    GanttCalendar minStart = null;\r\n    for (int i = 0; i < (nested.length); i++) {\r\n        Task nextNested = nested[i];\r\n        GanttCalendar nextStart = nextNested.getStart();\r\n        if ((minStart == null) || ((nextStart.compareTo(minStart)) < 0)) {\r\n            minStart = nextStart;\r\n        }\r\n        GanttCalendar nextEnd = nextNested.getEnd();\r\n        if ((maxEnd == null) || ((nextEnd.compareTo(maxEnd)) > 0)) {\r\n            maxEnd = nextEnd;\r\n        }\r\n    }\r\n    TaskMutator mutator = supertask.createMutator();\r\n    if ((minStart.compareTo(supertask.getStart())) != 0) {\r\n        // System.err.println(\"recalculating supertask=\"+supertask.getTaskID()+\" start=\"+minStart);\r\n        // modifyTaskStart(supertask, minStart);\r\n        mutator.setStart(minStart);\r\n        myModifiedTasks.add(supertask);\r\n    }\r\n    if ((maxEnd.compareTo(supertask.getEnd())) != 0) {\r\n        // modifyTaskEnd(supertask, maxEnd);\r\n        mutator.setEnd(maxEnd);\r\n        myModifiedTasks.add(supertask);\r\n    }\r\n    mutator.commit();\r\n}"},
 {"id":4563, "name":"recalculateSupertaskScheduleBottomUp(java.util.Set,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl.recalculateSupertaskScheduleBottomUp(java.util.Set,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "ownerclassid":"576", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl", "sourcecode":"private void recalculateSupertaskScheduleBottomUp(Set supertasks, TaskContainmentHierarchyFacade containmentFacade) {\r\n    for (Iterator it = supertasks.iterator(); it.hasNext();) {\r\n        Task nextSupertask = ((Task) (it.next()));\r\n        recalculateSupertaskSchedule(nextSupertask, containmentFacade);\r\n    }\r\n}"},
 {"id":4564, "name":"run(net.sourceforge.ganttproject.task.Task[])", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl.run(net.sourceforge.ganttproject.task.Task[])", "ownerclassid":"576", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl", "sourcecode":"public void run(Task[] tasks) {\r\n    HashSet taskSet = new HashSet(Arrays.asList(tasks));\r\n    myModifiedTasks.addAll(taskSet);\r\n    TaskContainmentHierarchyFacade containmentFacade = createContainmentFacade();\r\n    while (!(taskSet.isEmpty())) {\r\n        recalculateSupertaskScheduleBottomUp(taskSet, containmentFacade);\r\n        taskSet.clear();\r\n        for (Iterator modified = myModifiedTasks.iterator(); modified.hasNext();) {\r\n            Task nextTask = ((Task) (modified.next()));\r\n            Task supertask = containmentFacade.getContainer(nextTask);\r\n            if (supertask != null) {\r\n                taskSet.add(supertask);\r\n            }\r\n        }\r\n        myModifiedTasks.clear();\r\n    } \r\n    myModifiedTasks.clear();\r\n}"},
 {"id":4565, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmBase.-init-()", "ownerclassid":"578", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmBase", "sourcecode":"AlgorithmBase() {\r\n}"},
 {"id":4566, "name":"isEnabled()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmBase.isEnabled()", "ownerclassid":"578", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmBase", "sourcecode":"protected boolean isEnabled() {\r\n    return isEnabled;\r\n}"},
 {"id":4567, "name":"setEnabled(boolean)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmBase.setEnabled(boolean)", "ownerclassid":"578", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmBase", "sourcecode":"public void setEnabled(boolean enabled) {\r\n    isEnabled = enabled;\r\n}"},
 {"id":4568, "name":"-init-(net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm,net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm,net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.-init-(net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm,net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm,net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm)", "ownerclassid":"579", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "sourcecode":"public AlgorithmCollection(FindPossibleDependeesAlgorithm myFindPossibleDependeesAlgorithm, RecalculateTaskScheduleAlgorithm recalculateTaskScheduleAlgorithm, AdjustTaskBoundsAlgorithm adjustTaskBoundsAlgorithm, RecalculateTaskCompletionPercentageAlgorithm completionPercentageAlgorithm, ProjectBoundsAlgorithm projectBoundsAlgorithm) {\r\n    this.myFindPossibleDependeesAlgorithm = myFindPossibleDependeesAlgorithm;\r\n    myRecalculateTaskScheduleAlgorithm = recalculateTaskScheduleAlgorithm;\r\n    myAdjustTaskBoundsAlgorithm = adjustTaskBoundsAlgorithm;\r\n    myCompletionPercentageAlgorithm = completionPercentageAlgorithm;\r\n    myProjectBoundsAlgorithm = projectBoundsAlgorithm;\r\n    myShiftTaskTreeAlgorithm = new ShiftTaskTreeAlgorithm();\r\n}"},
 {"id":4569, "name":"getAdjustTaskBoundsAlgorithm()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.getAdjustTaskBoundsAlgorithm()", "ownerclassid":"579", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "sourcecode":"public AdjustTaskBoundsAlgorithm getAdjustTaskBoundsAlgorithm() {\r\n    return myAdjustTaskBoundsAlgorithm;\r\n}"},
 {"id":4570, "name":"getFindPossibleDependeesAlgorithm()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.getFindPossibleDependeesAlgorithm()", "ownerclassid":"579", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "sourcecode":"public FindPossibleDependeesAlgorithm getFindPossibleDependeesAlgorithm() {\r\n    return myFindPossibleDependeesAlgorithm;\r\n}"},
 {"id":4571, "name":"getProjectBoundsAlgorithm()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.getProjectBoundsAlgorithm()", "ownerclassid":"579", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "sourcecode":"public ProjectBoundsAlgorithm getProjectBoundsAlgorithm() {\r\n    return myProjectBoundsAlgorithm;\r\n}"},
 {"id":4572, "name":"getRecalculateTaskCompletionPercentageAlgorithm()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.getRecalculateTaskCompletionPercentageAlgorithm()", "ownerclassid":"579", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "sourcecode":"public RecalculateTaskCompletionPercentageAlgorithm getRecalculateTaskCompletionPercentageAlgorithm() {\r\n    return myCompletionPercentageAlgorithm;\r\n}"},
 {"id":4573, "name":"getRecalculateTaskScheduleAlgorithm()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.getRecalculateTaskScheduleAlgorithm()", "ownerclassid":"579", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "sourcecode":"public RecalculateTaskScheduleAlgorithm getRecalculateTaskScheduleAlgorithm() {\r\n    return myRecalculateTaskScheduleAlgorithm;\r\n}"},
 {"id":4574, "name":"getShiftTaskTreeAlgorithm()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.getShiftTaskTreeAlgorithm()", "ownerclassid":"579", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "sourcecode":"public ShiftTaskTreeAlgorithm getShiftTaskTreeAlgorithm() {\r\n    return myShiftTaskTreeAlgorithm;\r\n}"},
 {"id":4575, "name":"getCriticalTasks()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithm.getCriticalTasks()", "ownerclassid":"580", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithm", "sourcecode":"public Task[] getCriticalTasks();"},
 {"id":4576, "name":"-init-(net.sourceforge.ganttproject.task.TaskNode,net.sourceforge.ganttproject.calendar.GPCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.-init-(net.sourceforge.ganttproject.task.TaskNode,net.sourceforge.ganttproject.calendar.GPCalendar)", "ownerclassid":"581", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "sourcecode":"public CriticalPathAlgorithmImpl(TaskNode root, GPCalendar cal) {\r\n    this.root = root;\r\n    this.calendar = cal;\r\n}"},
 {"id":4577, "name":"checkCriticalTasks(net.sourceforge.ganttproject.task.Task,java.util.List)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.checkCriticalTasks(net.sourceforge.ganttproject.task.Task,java.util.List)", "ownerclassid":"581", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "sourcecode":"/**\r\n * Recursive method that adds critical task among predecessors of\r\n * <code>successor</code> in <code>criticalTasksList</code>\r\n *\r\n * @param successor\r\n * \t\tThe start task.\r\n * @param criticalTasksList\r\n * \t\tThe list in which critical tasks should be added.\r\n */\r\nprivate void checkCriticalTasks(Task successor, List criticalTasksList) {\r\n    TaskDependency[] rel = successor.getDependenciesAsDependant().toArray();\r\n    for (int i = 0; i < (rel.length); i++) {\r\n        Task t = rel[i].getDependee();\r\n        if (((t.getEnd().compareTo(successor.getStart())) == 0) || (CriticalPathAlgorithmImpl.isIntervalNonWorking(t.getEnd(), successor.getStart(), calendar))) {\r\n            criticalTasksList.add(t);\r\n            checkCriticalTasks(t, criticalTasksList);\r\n            // System.out.println(\"critical \" + t);\r\n        }\r\n        // else\r\n        // System.out.println(\"non critical \" + t);\r\n    }\r\n}"},
 {"id":4578, "name":"getCriticalTasks()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.getCriticalTasks()", "ownerclassid":"581", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "sourcecode":"/**\r\n * Returns an array containing the critical tasks.\r\n *\r\n * @return An array containing the critical tasks.\r\n */\r\npublic Task[] getCriticalTasks() {\r\n    // System.out.println(\"getCriticalTasks\");\r\n    List lastTasks = getLastTasks();\r\n    List res = new ArrayList(lastTasks);\r\n    // System.out.println(\"lastTasks \" + lastTasks);;\r\n    Iterator it = lastTasks.iterator();\r\n    while (it.hasNext()) {\r\n        Task t = ((Task) (it.next()));\r\n        res.add(t);\r\n        checkCriticalTasks(t, res);\r\n    } \r\n    Task[] r = new Task[res.size()];\r\n    res.toArray(r);\r\n    return r;\r\n}"},
 {"id":4579, "name":"getLastTasks()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.getLastTasks()", "ownerclassid":"581", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "sourcecode":"/**\r\n * Returns a list of the last-ended tasks.\r\n *\r\n * @return A list of the last-ended tasks.\r\n */\r\nprivate List getLastTasks() {\r\n    List res = new ArrayList();\r\n    Enumeration en = this.root.preorderEnumeration();\r\n    GanttCalendar end = null;\r\n    while (en.hasMoreElements()) {\r\n        Object next = en.nextElement();\r\n        if (!(next instanceof TaskNode))\r\n            continue;\r\n\r\n        TaskNode tn = ((TaskNode) (next));\r\n        if (tn.isRoot())\r\n            continue;\r\n\r\n        GanttCalendar tnEnd = tn.getEnd();\r\n        if ((end == null) || (end.before(tnEnd))) {\r\n            res.clear();\r\n            end = tnEnd.Clone();\r\n            res.add(tn.getUserObject());\r\n        } else\r\n            if ((end.compareTo(tnEnd)) == 0)\r\n                res.add(tn.getUserObject());\r\n\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":4580, "name":"isIntervalNonWorking(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.calendar.GPCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.isIntervalNonWorking(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.calendar.GPCalendar)", "ownerclassid":"581", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "sourcecode":"private static boolean isIntervalNonWorking(GanttCalendar d1, GanttCalendar d2, GPCalendar cal) {\r\n    while ((d1.before(d2)) && ((cal.getWeekDayType(d1.getDayWeek())) != (GPCalendar.DayType.WORKING)))\r\n        d1.add(1);\r\n\r\n    return d1.equals(d2);\r\n}"},
 {"id":4581, "name":"run(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm.run(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"582", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm", "sourcecode":"Task[] run(Task dependant);"},
 {"id":4582, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl.-init-()", "ownerclassid":"583", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl", "sourcecode":"public FindPossibleDependeesAlgorithmImpl() {\r\n}"},
 {"id":4583, "name":"createContainmentFacade()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl.createContainmentFacade()", "ownerclassid":"583", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl", "sourcecode":"protected abstract TaskContainmentHierarchyFacade createContainmentFacade();"},
 {"id":4584, "name":"processTask(net.sourceforge.ganttproject.task.Task[],net.sourceforge.ganttproject.task.Task,java.util.ArrayList)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl.processTask(net.sourceforge.ganttproject.task.Task[],net.sourceforge.ganttproject.task.Task,java.util.ArrayList)", "ownerclassid":"583", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl", "sourcecode":"private void processTask(Task[] taskList, Task dependant, ArrayList result) {\r\n    for (int i = 0; i < (taskList.length); i++) {\r\n        Task next = taskList[i];\r\n        if (!(next.equals(dependant))) {\r\n            Task[] nested = myContainmentFacade.getNestedTasks(next);\r\n            // if (nested.length==0) {\r\n            result.add(next);\r\n            // }\r\n            // else {\r\n            processTask(nested, dependant, result);\r\n            // }\r\n        }\r\n    }\r\n}"},
 {"id":4585, "name":"run(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl.run(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"583", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl", "sourcecode":"public Task[] run(Task dependant) {\r\n    myContainmentFacade = createContainmentFacade();\r\n    ArrayList result = new ArrayList();\r\n    Task root = myContainmentFacade.getRootTask();\r\n    Task[] nestedTasks = myContainmentFacade.getNestedTasks(root);\r\n    processTask(nestedTasks, dependant, result);\r\n    return ((Task[]) (result.toArray(new Task[0])));\r\n}"},
 {"id":4586, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm.-init-()", "ownerclassid":"585", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm", "sourcecode":"ProjectBoundsAlgorithm() {\r\n}"},
 {"id":4587, "name":"-init-(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm.-init-(java.util.Date,java.util.Date)", "ownerclassid":"585", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm", "sourcecode":"private Result(Date lowerBound, Date upperBound) {\r\n    this.lowerBound = lowerBound;\r\n    this.upperBound = upperBound;\r\n}"},
 {"id":4588, "name":"getBounds(java.util.Collection)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm.getBounds(java.util.Collection)", "ownerclassid":"585", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm", "sourcecode":"public ProjectBoundsAlgorithm.Result getBounds(/* <Task> */\r\nCollection tasks) {\r\n    Date lowerBound = null;\r\n    Date upperBound = null;\r\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n        Task next = ((Task) (it.next()));\r\n        Date start = next.getStart().getTime();\r\n        Date end = next.getEnd().getTime();\r\n        if ((lowerBound == null) || (lowerBound.after(start))) {\r\n            lowerBound = start;\r\n        }\r\n        if ((upperBound == null) || (upperBound.before(end))) {\r\n            upperBound = end;\r\n        }\r\n    }\r\n    return new ProjectBoundsAlgorithm.Result(lowerBound, upperBound);\r\n}"},
 {"id":4589, "name":"-init-(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm$Result.-init-(java.util.Date,java.util.Date)", "ownerclassid":"584", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm$Result", "sourcecode":"private Result(Date lowerBound, Date upperBound) {\r\n    this.lowerBound = lowerBound;\r\n    this.upperBound = upperBound;\r\n}"},
 {"id":4590, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.-init-()", "ownerclassid":"586", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "sourcecode":"RecalculateTaskCompletionPercentageAlgorithm() {\r\n}"},
 {"id":4591, "name":"createContainmentFacade()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.createContainmentFacade()", "ownerclassid":"586", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "sourcecode":"protected abstract TaskContainmentHierarchyFacade createContainmentFacade();"},
 {"id":4592, "name":"recalculateSupertaskCompletionPercentage(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.recalculateSupertaskCompletionPercentage(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "ownerclassid":"586", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "sourcecode":"private void recalculateSupertaskCompletionPercentage(Task task, TaskContainmentHierarchyFacade facade) {\r\n    Task[] nestedTasks = facade.getNestedTasks(task);\r\n    if ((nestedTasks.length) > 0) {\r\n        int completedDays = 0;\r\n        long plannedDays = 0;\r\n        for (int i = 0; i < (nestedTasks.length); i++) {\r\n            Task next = nestedTasks[i];\r\n            long nextDuration = next.getDuration().getLength();\r\n            completedDays += nextDuration * (next.getCompletionPercentage());\r\n            plannedDays += nextDuration;\r\n        }\r\n        int completionPercentage = ((int) (completedDays / plannedDays));\r\n        task.setCompletionPercentage(completionPercentage);\r\n    }\r\n}"},
 {"id":4593, "name":"recalculateSupertaskCompletionPercentageBottomUp(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.recalculateSupertaskCompletionPercentageBottomUp(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "ownerclassid":"586", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "sourcecode":"private void recalculateSupertaskCompletionPercentageBottomUp(Task task, TaskContainmentHierarchyFacade facade) {\r\n    while (task != null) {\r\n        recalculateSupertaskCompletionPercentage(task, facade);\r\n        task = facade.getContainer(task);\r\n    } \r\n}"},
 {"id":4594, "name":"run(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.run(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"586", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "sourcecode":"public void run(Task task) {\r\n    TaskContainmentHierarchyFacade facade = createContainmentFacade();\r\n    recalculateSupertaskCompletionPercentageBottomUp(task, facade);\r\n}"},
 {"id":4595, "name":"-init-(net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.-init-(net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm)", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"public RecalculateTaskScheduleAlgorithm(AdjustTaskBoundsAlgorithm adjuster) {\r\n    myAdjuster = adjuster;\r\n}"},
 {"id":4596, "name":"buildDistanceGraph(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.buildDistanceGraph(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"private void buildDistanceGraph(Task changedTask) {\r\n    TaskDependency[] depsAsDependee = changedTask.getDependenciesAsDependee().toArray();\r\n    buildDistanceGraph(depsAsDependee, 1);\r\n}"},
 {"id":4597, "name":"buildDistanceGraph(net.sourceforge.ganttproject.task.dependency.TaskDependency[],int)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.buildDistanceGraph(net.sourceforge.ganttproject.task.dependency.TaskDependency[],int)", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"private void buildDistanceGraph(TaskDependency[] deps, int distance) {\r\n    if ((deps.length) == 0) {\r\n        return;\r\n    }\r\n    Integer key = new Integer(distance);\r\n    List depsList = ((List) (myDistance2dependencyList.get(key)));\r\n    if (depsList == null) {\r\n        depsList = new ArrayList();\r\n        myDistance2dependencyList.put(key, depsList);\r\n    }\r\n    depsList.addAll(Arrays.asList(deps));\r\n    for (int i = 0; i < (deps.length); i++) {\r\n        Task dependant = deps[i].getDependant();\r\n        TaskDependency[] nextStepDeps = dependant.getDependenciesAsDependee().toArray();\r\n        buildDistanceGraph(nextStepDeps, (++distance));\r\n    }\r\n}"},
 {"id":4598, "name":"createContainmentFacade()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.createContainmentFacade()", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"protected abstract TaskContainmentHierarchyFacade createContainmentFacade();"},
 {"id":4599, "name":"fulfilConstraints(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.fulfilConstraints(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"private void fulfilConstraints(TaskDependency dependency) throws TaskDependencyException {\r\n    Task dependant = dependency.getDependant();\r\n    TaskDependency[] depsAsDependant = dependant.getDependenciesAsDependant().toArray();\r\n    if ((depsAsDependant.length) > 0) {\r\n        ArrayList startLaterVariations = new ArrayList();\r\n        ArrayList startEarlierVariations = new ArrayList();\r\n        ArrayList noVariations = new ArrayList();\r\n        // \r\n        for (int i = 0; i < (depsAsDependant.length); i++) {\r\n            TaskDependency next = depsAsDependant[i];\r\n            TaskDependencyConstraint.Collision nextCollision = next.getConstraint().getCollision();\r\n            GanttCalendar acceptableStart = nextCollision.getAcceptableStart();\r\n            switch (nextCollision.getVariation()) {\r\n                case TaskDependencyConstraint.Collision.START_EARLIER_VARIATION :\r\n                    {\r\n                        startEarlierVariations.add(acceptableStart);\r\n                        break;\r\n                    }\r\n                case TaskDependencyConstraint.Collision.START_LATER_VARIATION :\r\n                    {\r\n                        startLaterVariations.add(acceptableStart);\r\n                        break;\r\n                    }\r\n                case TaskDependencyConstraint.Collision.NO_VARIATION :\r\n                    {\r\n                        noVariations.add(acceptableStart);\r\n                        break;\r\n                    }\r\n            }\r\n        }\r\n        if ((noVariations.size()) > 1) {\r\n            throw new TaskDependencyException(((((\"Failed to fulfill constraints of task=\" + dependant) + \". There are \") + (noVariations.size())) + \" constraints which dont allow for task start variation\"));\r\n        }\r\n        // \r\n        Collections.sort(startEarlierVariations);\r\n        Collections.sort(startLaterVariations);\r\n        // \r\n        GanttCalendar solution;\r\n        GanttCalendar earliestStart = ((GanttCalendar) (((startEarlierVariations.size()) == 0) ? null : startEarlierVariations.get(0)));\r\n        GanttCalendar latestStart = ((GanttCalendar) (((startLaterVariations.size()) >= 0) ? startLaterVariations.get(((startLaterVariations.size()) - 1)) : null));\r\n        if ((earliestStart == null) && (latestStart == null)) {\r\n            solution = dependant.getStart();\r\n        } else {\r\n            if ((earliestStart == null) && (latestStart != null)) {\r\n                earliestStart = latestStart;\r\n            } else\r\n                if ((earliestStart != null) && (latestStart == null)) {\r\n                    latestStart = earliestStart;\r\n                }\r\n\r\n            if ((earliestStart.compareTo(latestStart)) < 0) {\r\n                throw new TaskDependencyException((\"Failed to fulfill constraints of task=\" + dependant));\r\n            }\r\n        }\r\n        if ((noVariations.size()) > 0) {\r\n            GanttCalendar notVariableStart = ((GanttCalendar) (noVariations.get(0)));\r\n            if (((notVariableStart.compareTo(earliestStart)) < 0) || ((notVariableStart.compareTo(latestStart)) > 0)) {\r\n                throw new TaskDependencyException((\"Failed to fulfill constraints of task=\" + dependant));\r\n            }\r\n            solution = notVariableStart;\r\n        } else {\r\n            solution = latestStart;\r\n        }\r\n        // \r\n        modifyTaskStart(dependant, solution);\r\n    }\r\n}"},
 {"id":4600, "name":"fulfilDependencies()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.fulfilDependencies()", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"private void fulfilDependencies() throws TaskDependencyException {\r\n    // System.err.println(\"[RecalculateTaskSchedule]\r\n    // >>>fulfilDependencies()\");\r\n    for (Iterator distances = myDistance2dependencyList.entrySet().iterator(); distances.hasNext();) {\r\n        Map.Entry nextEntry = ((Map.Entry) (distances.next()));\r\n        List nextDependenciesList = ((List) (nextEntry.getValue()));\r\n        for (int i = 0; i < (nextDependenciesList.size()); i++) {\r\n            TaskDependency nextDependency = ((TaskDependency) (nextDependenciesList.get(i)));\r\n            TaskDependencyConstraint nextConstraint = nextDependency.getConstraint();\r\n            TaskDependencyConstraint.Collision collision = nextConstraint.getCollision();\r\n            if (collision.isActive()) {\r\n                fulfilConstraints(nextDependency);\r\n                nextDependency.getDependant().applyThirdDateConstraint();\r\n            }\r\n        }\r\n    }\r\n    // System.err.println(\"[RecalculateTaskSchedule]\r\n    // <<<fulfilDependencies()\");\r\n}"},
 {"id":4601, "name":"isRunning()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.isRunning()", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"public boolean isRunning() {\r\n    return isRunning;\r\n}"},
 {"id":4602, "name":"modifyTaskStart(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.modifyTaskStart(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"private void modifyTaskStart(Task task, GanttCalendar newStart) {\r\n    TaskMutator mutator = task.createMutatorFixingDuration();\r\n    mutator.setStart(newStart);\r\n    mutator.commit();\r\n    myModifiedTasks.add(task);\r\n}"},
 {"id":4603, "name":"run()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.run()", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"public void run() throws TaskDependencyException {\r\n    if (!(isEnabled())) {\r\n        return;\r\n    }\r\n    myDistance2dependencyList.clear();\r\n    isRunning = true;\r\n    TaskContainmentHierarchyFacade facade = createContainmentFacade();\r\n    Set independentTasks = new HashSet();\r\n    traverse(facade, facade.getRootTask(), independentTasks);\r\n    for (Iterator it = independentTasks.iterator(); it.hasNext();) {\r\n        Task next = ((Task) (it.next()));\r\n        buildDistanceGraph(next);\r\n    }\r\n    fulfilDependencies();\r\n    myDistance2dependencyList.clear();\r\n    isRunning = false;\r\n}"},
 {"id":4604, "name":"run(java.util.Set)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.run(java.util.Set)", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"public void run(Set taskSet) throws TaskDependencyException {\r\n    if (!(isEnabled())) {\r\n        return;\r\n    }\r\n    isRunning = true;\r\n    (myEntranceCounter)++;\r\n    myMarkedTasks.clear();\r\n    for (Iterator tasks = taskSet.iterator(); tasks.hasNext();) {\r\n        Task nextTask = ((Task) (tasks.next()));\r\n        buildDistanceGraph(nextTask);\r\n        fulfilDependencies();\r\n        myDistance2dependencyList.clear();\r\n        myModifiedTasks.add(nextTask);\r\n    }\r\n    myAdjuster.run(((Task[]) (myModifiedTasks.toArray(new Task[0]))));\r\n    myDistance2dependencyList.clear();\r\n    myModifiedTasks.clear();\r\n    (myEntranceCounter)--;\r\n    isRunning = false;\r\n}"},
 {"id":4605, "name":"run(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.run(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"public void run(Task changedTask) throws TaskDependencyException {\r\n    if (!(isEnabled())) {\r\n        return;\r\n    }\r\n    isRunning = true;\r\n    (myEntranceCounter)++;\r\n    myMarkedTasks.clear();\r\n    buildDistanceGraph(changedTask);\r\n    fulfilDependencies();\r\n    myDistance2dependencyList.clear();\r\n    myModifiedTasks.add(changedTask);\r\n    myAdjuster.run(((Task[]) (myModifiedTasks.toArray(new Task[0]))));\r\n    myDistance2dependencyList.clear();\r\n    myModifiedTasks.clear();\r\n    (myEntranceCounter)--;\r\n    isRunning = false;\r\n}"},
 {"id":4606, "name":"traverse(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.util.Set)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.traverse(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.util.Set)", "ownerclassid":"587", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "sourcecode":"private void traverse(TaskContainmentHierarchyFacade facade, Task root, Set independentTasks) {\r\n    TaskDependency[] asDependant = root.getDependenciesAsDependant().toArray();\r\n    if ((asDependant.length) == 0) {\r\n        independentTasks.add(root);\r\n    }\r\n    Task[] nestedTasks = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        traverse(facade, nestedTasks[i], independentTasks);\r\n    }\r\n}"},
 {"id":4607, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm.-init-()", "ownerclassid":"588", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm", "sourcecode":"ShiftTaskTreeAlgorithm() {\r\n}"},
 {"id":4608, "name":"run(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm.run(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"588", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm", "sourcecode":"public void run(Task rootTask, TaskLength shift) {\r\n    shiftTask(rootTask, shift);\r\n}"},
 {"id":4609, "name":"shiftTask(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskLength)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm.shiftTask(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskLength)", "ownerclassid":"588", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm", "sourcecode":"private void shiftTask(Task rootTask, TaskLength shift) {\r\n    rootTask.shift(shift);\r\n    Task[] nestedTasks = rootTask.getManager().getTaskHierarchy().getNestedTasks(rootTask);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        Task next = nestedTasks[i];\r\n        shiftTask(next, shift);\r\n    }\r\n}"},
 {"id":4610, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.SortTasksAlgorithm.-init-()", "ownerclassid":"589", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.SortTasksAlgorithm", "sourcecode":"SortTasksAlgorithm() {\r\n}"},
 {"id":4611, "name":"sortByStartDate(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.SortTasksAlgorithm.sortByStartDate(java.util.List)", "ownerclassid":"589", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.SortTasksAlgorithm", "sourcecode":"public void sortByStartDate(/* <TaskActivity> */\r\nList tasks) {\r\n    Collections.sort(tasks, mySortActivitiesByStartDateComparator);\r\n}"},
 {"id":4612, "name":"sortTasksByStartDate(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.task.algorithm.SortTasksAlgorithm.sortTasksByStartDate(java.util.List)", "ownerclassid":"589", "ownerclassname":"net.sourceforge.ganttproject.task.algorithm.SortTasksAlgorithm", "sourcecode":"public void sortTasksByStartDate(/* <Task> */\r\nList tasks) {\r\n    Collections.sort(tasks, mySortTasksByStartDateComparator);\r\n}"},
 {"id":4613, "name":"fireDependencyAdded(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.EventDispatcher.fireDependencyAdded(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"590", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.EventDispatcher", "sourcecode":"void fireDependencyAdded(TaskDependency dep);"},
 {"id":4614, "name":"fireDependencyRemoved(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.EventDispatcher.fireDependencyRemoved(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"590", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.EventDispatcher", "sourcecode":"void fireDependencyRemoved(TaskDependency dep);"},
 {"id":4615, "name":"-init-(net.sourceforge.ganttproject.task.TaskManager)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.LoopDetector.-init-(net.sourceforge.ganttproject.task.TaskManager)", "ownerclassid":"591", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.LoopDetector", "sourcecode":"public LoopDetector(TaskManager taskManager) {\r\n    myTaskManager = taskManager;\r\n}"},
 {"id":4616, "name":"isLooping(java.util.Set,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.LoopDetector.isLooping(java.util.Set,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"591", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.LoopDetector", "sourcecode":"private boolean isLooping(Set checked, Task incoming) {\r\n    boolean result = false;\r\n    Set newChecked = new LinkedHashSet(checked);\r\n    newChecked.add(incoming);\r\n    TaskDependency[] nextDeps = incoming.getDependenciesAsDependee().toArray();\r\n    for (int i = 0; (!result) && (i < (nextDeps.length)); i++) {\r\n        if (!(newChecked.contains(nextDeps[i].getDependant()))) {\r\n            result = isLooping(newChecked, nextDeps[i].getDependant());\r\n        } else {\r\n            result = true;\r\n        }\r\n    }\r\n    if (!result) {\r\n        Task supertask = myTaskManager.getTaskHierarchy().getContainer(incoming);\r\n        if ((supertask != null) && ((myTaskManager.getTaskHierarchy().getRootTask()) != supertask)) {\r\n            result = isLooping(newChecked, supertask);\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":4617, "name":"isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.LoopDetector.isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"591", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.LoopDetector", "sourcecode":"public boolean isLooping(TaskDependency dep) {\r\n    Set checked = new LinkedHashSet();\r\n    checked.add(dep.getDependee());\r\n    return isLooping(checked, dep.getDependant());\r\n}"},
 {"id":4618, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.clear()", "ownerclassid":"592", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "sourcecode":"void clear();"},
 {"id":4619, "name":"createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"592", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException;"},
 {"id":4620, "name":"createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "ownerclassid":"592", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException;"},
 {"id":4621, "name":"deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"592", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "sourcecode":"void deleteDependency(TaskDependency dependency);"},
 {"id":4622, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.RangeSearchFromKey.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"593", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.RangeSearchFromKey", "sourcecode":"public RangeSearchFromKey(Task task) {\r\n    super((-1), task.getTaskID(), 0);\r\n}"},
 {"id":4623, "name":"-init-(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.RangeSearchToKey.-init-(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"594", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.RangeSearchToKey", "sourcecode":"public RangeSearchToKey(Task task) {\r\n    super(3, task.getTaskID(), 0);\r\n}"},
 {"id":4624, "name":"-init-(int,net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.SearchKey.-init-(int,net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl)", "ownerclassid":"595", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.SearchKey", "sourcecode":"public SearchKey(int type, TaskDependencyImpl taskDependency) {\r\n    myType = type;\r\n    Task firstTask;\r\n    Task secondTask;\r\n    switch (type) {\r\n        case SearchKey.DEPENDANT :\r\n            {\r\n                firstTask = taskDependency.getDependant();\r\n                secondTask = taskDependency.getDependee();\r\n                break;\r\n            }\r\n        case SearchKey.DEPENDEE :\r\n            {\r\n                firstTask = taskDependency.getDependee();\r\n                secondTask = taskDependency.getDependant();\r\n                break;\r\n            }\r\n        default :\r\n            {\r\n                throw new RuntimeException((\"Invalid type=\" + type));\r\n            }\r\n    }\r\n    myFirstTaskID = firstTask.getTaskID();\r\n    mySecondTaskID = secondTask.getTaskID();\r\n}"},
 {"id":4625, "name":"-init-(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.SearchKey.-init-(int,int,int)", "ownerclassid":"595", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.SearchKey", "sourcecode":"protected SearchKey(int type, int firstTaskID, int secondTaskID) {\r\n    myType = type;\r\n    myFirstTaskID = firstTaskID;\r\n    mySecondTaskID = secondTaskID;\r\n}"},
 {"id":4626, "name":"compareTo(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.SearchKey.compareTo(java.lang.Object)", "ownerclassid":"595", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.SearchKey", "sourcecode":"public int compareTo(Object o) {\r\n    SearchKey rvalue = ((SearchKey) (o));\r\n    int result = (myFirstTaskID) - (rvalue.myFirstTaskID);\r\n    if (result == 0) {\r\n        result = (myType) - (rvalue.myType);\r\n    }\r\n    if (result == 0) {\r\n        result = (mySecondTaskID) - (rvalue.mySecondTaskID);\r\n    }\r\n    return result;\r\n}"},
 {"id":4627, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.SearchKey.equals(java.lang.Object)", "ownerclassid":"595", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.SearchKey", "sourcecode":"public boolean equals(Object obj) {\r\n    SearchKey rvalue = ((SearchKey) (obj));\r\n    return (((myFirstTaskID) == (rvalue.myFirstTaskID)) && ((myType) == (rvalue.myType))) && ((mySecondTaskID) == (rvalue.mySecondTaskID));\r\n}"},
 {"id":4628, "name":"hashCode()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.SearchKey.hashCode()", "ownerclassid":"595", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.SearchKey", "sourcecode":"public int hashCode() {\r\n    return ((7 * (myFirstTaskID)) + (11 * (myType))) + (13 * (mySecondTaskID));\r\n}"},
 {"id":4629, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.-init-(java.lang.String)", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":4630, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.delete()", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"void delete();"},
 {"id":4631, "name":"getActivityBinding()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.getActivityBinding()", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"TaskDependency.ActivityBinding getActivityBinding();"},
 {"id":4632, "name":"getConstraint()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.getConstraint()", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"TaskDependencyConstraint getConstraint();"},
 {"id":4633, "name":"getDependant()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.getDependant()", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"Task getDependant();"},
 {"id":4634, "name":"getDependee()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.getDependee()", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"Task getDependee();"},
 {"id":4635, "name":"getDifference()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.getDifference()", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"int getDifference();"},
 {"id":4636, "name":"getHardness()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.getHardness()", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"TaskDependency.Hardness getHardness();"},
 {"id":4637, "name":"setConstraint(net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.setConstraint(net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"void setConstraint(TaskDependencyConstraint constraint);"},
 {"id":4638, "name":"setDifference(int)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.setDifference(int)", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"void setDifference(int difference);"},
 {"id":4639, "name":"setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency.setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "ownerclassid":"598", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "sourcecode":"void setHardness(TaskDependency.Hardness hardness);"},
 {"id":4640, "name":"getAlignedBounds()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency$ActivityBinding.getAlignedBounds()", "ownerclassid":"596", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency$ActivityBinding", "sourcecode":"Date[] getAlignedBounds();"},
 {"id":4641, "name":"getDependantActivity()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency$ActivityBinding.getDependantActivity()", "ownerclassid":"596", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency$ActivityBinding", "sourcecode":"TaskActivity getDependantActivity();"},
 {"id":4642, "name":"getDependeeActivity()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency$ActivityBinding.getDependeeActivity()", "ownerclassid":"596", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency$ActivityBinding", "sourcecode":"TaskActivity getDependeeActivity();"},
 {"id":4643, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness.-init-(java.lang.String)", "ownerclassid":"597", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness", "sourcecode":"1( $anonymous0) {\r\n}"},
 {"id":4644, "name":"getIdentifier()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness.getIdentifier()", "ownerclassid":"597", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness", "sourcecode":"public String getIdentifier() {\r\n    return myID;\r\n}"},
 {"id":4645, "name":"parse(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness.parse(java.lang.String)", "ownerclassid":"597", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness", "sourcecode":"public static TaskDependency.Hardness parse(String hardnessAsString) {\r\n    if (hardnessAsString == null) {\r\n        throw new IllegalArgumentException(\"Null value is not allowed as hardness\");\r\n    }\r\n    if (\"Rubber\".equals(hardnessAsString.trim())) {\r\n        return TaskDependency.Hardness.RUBBER;\r\n    }\r\n    if (\"Strong\".equals(hardnessAsString.trim())) {\r\n        return TaskDependency.Hardness.STRONG;\r\n    }\r\n    throw new IllegalArgumentException((\"Unexpected hardness string value=\" + hardnessAsString));\r\n}"},
 {"id":4646, "name":"canCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.canCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"599", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "sourcecode":"boolean canCreateDependency(Task myDependant, Task dependee);"},
 {"id":4647, "name":"createMutator()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.createMutator()", "ownerclassid":"599", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "sourcecode":"TaskDependencyCollectionMutator createMutator();"},
 {"id":4648, "name":"getDependencies()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.getDependencies()", "ownerclassid":"599", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "sourcecode":"// void addDependency(TaskDependency dep) throws TaskDependencyException;\r\n// void removeDependency(TaskDependency dep);\r\nTaskDependency[] getDependencies();"},
 {"id":4649, "name":"getDependencies(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.getDependencies(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"599", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "sourcecode":"TaskDependency[] getDependencies(Task task);"},
 {"id":4650, "name":"getDependenciesAsDependant(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.getDependenciesAsDependant(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"599", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "sourcecode":"TaskDependency[] getDependenciesAsDependant(Task dependant);"},
 {"id":4651, "name":"getDependenciesAsDependee(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.getDependenciesAsDependee(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"599", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "sourcecode":"TaskDependency[] getDependenciesAsDependee(Task dependee);"},
 {"id":4652, "name":"-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.dependency.EventDispatcher)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.dependency.EventDispatcher)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public TaskDependencyCollectionImpl(TaskContainmentHierarchyFacade.Factory taskHierarchyFactory, EventDispatcher myEventDispatcher) {\r\n    this.myEventDispatcher = myEventDispatcher;\r\n    myTaskHierarchyFactory = taskHierarchyFactory;\r\n}"},
 {"id":4653, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.-init-()", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"MutatorImpl() {\r\n}"},
 {"id":4654, "name":"-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,int)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,int)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public MutationInfo(TaskDependency myDependency, int myOperation) {\r\n    this.myDependency = myDependency;\r\n    this.myOperation = myOperation;\r\n}"},
 {"id":4655, "name":"_isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl._isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"boolean _isLooping(TaskDependency dep) {\r\n    Set tasksInvolved = new HashSet();\r\n    tasksInvolved.add(dep.getDependee());\r\n    return _isLooping(dep, tasksInvolved);\r\n}"},
 {"id":4656, "name":"_isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency,java.util.Set)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl._isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency,java.util.Set)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"private boolean _isLooping(TaskDependency dep, Set tasksInvolved) {\r\n    Task dependant = dep.getDependant();\r\n    if (tasksInvolved.contains(dependant)) {\r\n        return true;\r\n    }\r\n    for (Iterator tasks = tasksInvolved.iterator(); tasks.hasNext();) {\r\n        Task nextInvolved = ((Task) (tasks.next()));\r\n        if (false == (getTaskHierarchy().areUnrelated(nextInvolved, dependant))) {\r\n            return true;\r\n        }\r\n    }\r\n    tasksInvolved.add(dependant);\r\n    {\r\n        TaskDependency[] nextDeps = dependant.getDependenciesAsDependee().toArray();\r\n        for (int i = 0; i < (nextDeps.length); i++) {\r\n            if (_isLooping(nextDeps[i], tasksInvolved)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    Task[] nestedTasks = getTaskHierarchy().getNestedTasks(dependant);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        tasksInvolved.add(nestedTasks[i]);\r\n        TaskDependency[] nextDeps = nestedTasks[i].getDependenciesAsDependee().toArray();\r\n        for (int j = 0; j < (nextDeps.length); j++) {\r\n            if (_isLooping(nextDeps[j], tasksInvolved)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    tasksInvolved.remove(dependant);\r\n    return false;\r\n}"},
 {"id":4657, "name":"addDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.addDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"void addDependency(TaskDependency dep) throws TaskDependencyException {\r\n    if (myDependencies.contains(dep)) {\r\n        throw new TaskDependencyException(((\"Dependency=\" + dep) + \" already exists\"));\r\n    }\r\n    if (this.isLooping(dep)) {\r\n        throw new TaskDependencyException(((\"Dependency=\" + dep) + \" is looping\"));\r\n    }\r\n    if (false == (getTaskHierarchy().areUnrelated(dep.getDependant(), dep.getDependee()))) {\r\n        throw new TaskDependencyException(((\"In dependency=\" + dep) + \" one of participants is a supertask of another\"));\r\n    }\r\n    myDependencies.add(dep);\r\n    // \r\n    mySearchKey2dependency.put(new SearchKey(SearchKey.DEPENDANT, ((TaskDependencyImpl) (dep))), dep);\r\n    mySearchKey2dependency.put(new SearchKey(SearchKey.DEPENDEE, ((TaskDependencyImpl) (dep))), dep);\r\n    myEventDispatcher.fireDependencyAdded(dep);\r\n}"},
 {"id":4658, "name":"auxCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.auxCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"private TaskDependency auxCreateDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) {\r\n    TaskDependency result = new TaskDependencyImpl(dependant, dependee, this);\r\n    result.setConstraint(constraint);\r\n    result.setDifference(0);\r\n    return result;\r\n}"},
 {"id":4659, "name":"canCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.canCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public boolean canCreateDependency(Task dependant, Task dependee) {\r\n    if (dependant == dependee) {\r\n        return false;\r\n    }\r\n    if (false == (getTaskHierarchy().areUnrelated(dependant, dependee))) {\r\n        return false;\r\n    }\r\n    SearchKey key = new SearchKey(SearchKey.DEPENDANT, dependant.getTaskID(), dependee.getTaskID());\r\n    if (mySearchKey2dependency.containsKey(key)) {\r\n        return false;\r\n    }\r\n    TaskDependency testDep = new TaskDependencyImpl(dependant, dependee, this);\r\n    if (isLooping(testDep)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":4660, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.clear()", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public void clear() {\r\n    doClear();\r\n}"},
 {"id":4661, "name":"createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException {\r\n    return createDependency(dependant, dependee, new FinishStartConstraintImpl());\r\n}"},
 {"id":4662, "name":"createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    addDependency(result);\r\n    return result;\r\n}"},
 {"id":4663, "name":"createMutator()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createMutator()", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public TaskDependencyCollectionMutator createMutator() {\r\n    return new TaskDependencyCollectionImpl.MutatorImpl();\r\n}"},
 {"id":4664, "name":"delete(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.delete(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"void delete(TaskDependency dep) {\r\n    myDependencies.remove(dep);\r\n    SearchKey key1 = new SearchKey(SearchKey.DEPENDANT, dep.getDependant().getTaskID(), dep.getDependee().getTaskID());\r\n    SearchKey key2 = new SearchKey(SearchKey.DEPENDEE, dep.getDependee().getTaskID(), dep.getDependant().getTaskID());\r\n    mySearchKey2dependency.remove(key1);\r\n    mySearchKey2dependency.remove(key2);\r\n    myEventDispatcher.fireDependencyRemoved(dep);\r\n    // SearchKey fromKey = new RangeSearchFromKey(dep.getDependant());\r\n    // SearchKey toKey = new RangeSearchToKey(dep.getDependant());\r\n    // mySearchKey2dependency.subMap(fromKey, toKey).clear();\r\n    // fromKey = new RangeSearchFromKey(dep.getDependee());\r\n    // toKey = new RangeSearchToKey(dep.getDependee());\r\n    // mySearchKey2dependency.subMap(fromKey, toKey).clear();\r\n}"},
 {"id":4665, "name":"deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public void deleteDependency(TaskDependency dependency) {\r\n    delete(dependency);\r\n}"},
 {"id":4666, "name":"doClear()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.doClear()", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public void doClear() {\r\n    myDependencies.clear();\r\n    mySearchKey2dependency.clear();\r\n}"},
 {"id":4667, "name":"fireChanged(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.fireChanged(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"void fireChanged(TaskDependency dependency) {\r\n    myEventDispatcher.fireDependencyRemoved(dependency);\r\n    myEventDispatcher.fireDependencyAdded(dependency);\r\n}"},
 {"id":4668, "name":"getDependencies()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.getDependencies()", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public TaskDependency[] getDependencies() {\r\n    return ((TaskDependency[]) (myDependencies.toArray(new TaskDependency[0])));\r\n}"},
 {"id":4669, "name":"getDependencies(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.getDependencies(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public TaskDependency[] getDependencies(Task task) {\r\n    SearchKey fromKey = new RangeSearchFromKey(task);\r\n    SearchKey toKey = new RangeSearchToKey(task);\r\n    SortedMap submap = mySearchKey2dependency.subMap(fromKey, toKey);\r\n    return ((TaskDependency[]) (submap.values().toArray(new TaskDependency[0])));\r\n}"},
 {"id":4670, "name":"getDependenciesAsDependant(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.getDependenciesAsDependant(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public TaskDependency[] getDependenciesAsDependant(Task dependant) {\r\n    SearchKey fromKey = new SearchKey(SearchKey.DEPENDANT, dependant.getTaskID(), (-1));\r\n    SearchKey toKey = new SearchKey(SearchKey.DEPENDEE, dependant.getTaskID(), (-1));\r\n    SortedMap submap = mySearchKey2dependency.subMap(fromKey, toKey);\r\n    return ((TaskDependency[]) (submap.values().toArray(new TaskDependency[0])));\r\n}"},
 {"id":4671, "name":"getDependenciesAsDependee(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.getDependenciesAsDependee(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"public TaskDependency[] getDependenciesAsDependee(Task dependee) {\r\n    SearchKey fromKey = new SearchKey(SearchKey.DEPENDEE, dependee.getTaskID(), (-1));\r\n    SearchKey toKey = new SearchKey(Integer.MAX_VALUE, dependee.getTaskID(), (-1));\r\n    SortedMap submap = mySearchKey2dependency.subMap(fromKey, toKey);\r\n    return ((TaskDependency[]) (submap.values().toArray(new TaskDependency[0])));\r\n}"},
 {"id":4672, "name":"getTaskHierarchy()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.getTaskHierarchy()", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"protected TaskContainmentHierarchyFacade getTaskHierarchy() {\r\n    return myTaskHierarchyFactory.createFacede();\r\n}"},
 {"id":4673, "name":"isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"602", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "sourcecode":"boolean isLooping(TaskDependency dep) {\r\n    LoopDetector detector = new LoopDetector(dep.getDependant().getManager());\r\n    return detector.isLooping(dep);\r\n}"},
 {"id":4674, "name":"-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,int)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutationInfo.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,int)", "ownerclassid":"600", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutationInfo", "sourcecode":"public MutationInfo(TaskDependency myDependency, int myOperation) {\r\n    this.myDependency = myDependency;\r\n    this.myOperation = myOperation;\r\n}"},
 {"id":4675, "name":"compareTo(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutationInfo.compareTo(java.lang.Object)", "ownerclassid":"600", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutationInfo", "sourcecode":"public int compareTo(Object o) {\r\n    TaskDependencyCollectionImpl.MutationInfo rvalue = ((TaskDependencyCollectionImpl.MutationInfo) (o));\r\n    return (myOrder) - (rvalue.myOrder);\r\n}"},
 {"id":4676, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.-init-()", "ownerclassid":"601", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "sourcecode":"MutatorImpl() {\r\n}"},
 {"id":4677, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.clear()", "ownerclassid":"601", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "sourcecode":"public void clear() {\r\n    myQueue.clear();\r\n    myCleanupMutation = new TaskDependencyCollectionImpl.MutationInfo(null, TaskDependencyCollectionImpl.MutationInfo.CLEAR);\r\n}"},
 {"id":4678, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.commit()", "ownerclassid":"601", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "sourcecode":"public void commit() {\r\n    List mutations = new ArrayList(myQueue.values());\r\n    if ((myCleanupMutation) != null) {\r\n        mutations.add(myCleanupMutation);\r\n    }\r\n    Collections.sort(mutations);\r\n    for (int i = 0; i < (mutations.size()); i++) {\r\n        TaskDependencyCollectionImpl.MutationInfo next = ((TaskDependencyCollectionImpl.MutationInfo) (mutations.get(i)));\r\n        switch (next.myOperation) {\r\n            case TaskDependencyCollectionImpl.MutationInfo.ADD :\r\n                {\r\n                    try {\r\n                        addDependency(next.myDependency);\r\n                    } catch (TaskDependencyException e) {\r\n                        if (!(GPLogger.log(e))) {\r\n                            e.printStackTrace(System.err);\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            case TaskDependencyCollectionImpl.MutationInfo.DELETE :\r\n                {\r\n                    delete(next.myDependency);\r\n                    break;\r\n                }\r\n            case TaskDependencyCollectionImpl.MutationInfo.CLEAR :\r\n                {\r\n                    doClear();\r\n                    break;\r\n                }\r\n        }\r\n    }\r\n}"},
 {"id":4679, "name":"createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"601", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException {\r\n    return createDependency(dependant, dependee, new FinishFinishConstraintImpl());\r\n}"},
 {"id":4680, "name":"createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "ownerclassid":"601", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    myQueue.put(result, new TaskDependencyCollectionImpl.MutationInfo(result, TaskDependencyCollectionImpl.MutationInfo.ADD));\r\n    return result;\r\n}"},
 {"id":4681, "name":"deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"601", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "sourcecode":"public void deleteDependency(TaskDependency dependency) {\r\n    TaskDependencyCollectionImpl.MutationInfo info = ((TaskDependencyCollectionImpl.MutationInfo) (myQueue.get(dependency)));\r\n    if (info == null) {\r\n        myQueue.put(dependency, new TaskDependencyCollectionImpl.MutationInfo(dependency, TaskDependencyCollectionImpl.MutationInfo.DELETE));\r\n    } else\r\n        if ((info.myOperation) == (TaskDependencyCollectionImpl.MutationInfo.ADD)) {\r\n            myQueue.remove(dependency);\r\n        }\r\n\r\n}"},
 {"id":4682, "name":"commit()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionMutator.commit()", "ownerclassid":"603", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionMutator", "sourcecode":"void commit();"},
 {"id":4683, "name":"-init-(net.sourceforge.ganttproject.GanttCalendar,int,boolean)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint.-init-(net.sourceforge.ganttproject.GanttCalendar,int,boolean)", "ownerclassid":"606", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "sourcecode":"public DefaultCollision(GanttCalendar myAcceptableStart, int myVariation, boolean isActive) {\r\n    this.myAcceptableStart = myAcceptableStart;\r\n    this.myVariation = myVariation;\r\n    this.isActive = isActive;\r\n}"},
 {"id":4684, "name":"getActivityBinding()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint.getActivityBinding()", "ownerclassid":"606", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "sourcecode":"TaskDependency.ActivityBinding getActivityBinding();"},
 {"id":4685, "name":"getCollision()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint.getCollision()", "ownerclassid":"606", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "sourcecode":"// boolean isFulfilled();\r\n// void fulfil();\r\nTaskDependencyConstraint.Collision getCollision();"},
 {"id":4686, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint.getID()", "ownerclassid":"606", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "sourcecode":"int getID();"},
 {"id":4687, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint.getName()", "ownerclassid":"606", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "sourcecode":"String getName();"},
 {"id":4688, "name":"setTaskDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint.setTaskDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"606", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "sourcecode":"void setTaskDependency(TaskDependency dependency);"},
 {"id":4689, "name":"getAcceptableStart()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$Collision.getAcceptableStart()", "ownerclassid":"604", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$Collision", "sourcecode":"GanttCalendar getAcceptableStart();"},
 {"id":4690, "name":"getVariation()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$Collision.getVariation()", "ownerclassid":"604", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$Collision", "sourcecode":"int getVariation();"},
 {"id":4691, "name":"isActive()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$Collision.isActive()", "ownerclassid":"604", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$Collision", "sourcecode":"boolean isActive();"},
 {"id":4692, "name":"-init-(net.sourceforge.ganttproject.GanttCalendar,int,boolean)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision.-init-(net.sourceforge.ganttproject.GanttCalendar,int,boolean)", "ownerclassid":"605", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision", "sourcecode":"public DefaultCollision(GanttCalendar myAcceptableStart, int myVariation, boolean isActive) {\r\n    this.myAcceptableStart = myAcceptableStart;\r\n    this.myVariation = myVariation;\r\n    this.isActive = isActive;\r\n}"},
 {"id":4693, "name":"getAcceptableStart()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision.getAcceptableStart()", "ownerclassid":"605", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision", "sourcecode":"public GanttCalendar getAcceptableStart() {\r\n    return myAcceptableStart;\r\n}"},
 {"id":4694, "name":"getVariation()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision.getVariation()", "ownerclassid":"605", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision", "sourcecode":"public int getVariation() {\r\n    return myVariation;\r\n}"},
 {"id":4695, "name":"isActive()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision.isActive()", "ownerclassid":"605", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision", "sourcecode":"public boolean isActive() {\r\n    return isActive;\r\n}"},
 {"id":4696, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyException.-init-()", "ownerclassid":"607", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyException", "sourcecode":"public TaskDependencyException() {\r\n}"},
 {"id":4697, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyException.-init-(java.lang.String)", "ownerclassid":"607", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyException", "sourcecode":"public TaskDependencyException(String message) {\r\n    super(message);\r\n}"},
 {"id":4698, "name":"-init-(java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyException.-init-(java.lang.Throwable)", "ownerclassid":"607", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyException", "sourcecode":"public TaskDependencyException(Throwable cause) {\r\n    super(cause);\r\n}"},
 {"id":4699, "name":"-init-(java.lang.String,java.lang.Throwable)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyException.-init-(java.lang.String,java.lang.Throwable)", "ownerclassid":"607", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyException", "sourcecode":"public TaskDependencyException(String message, Throwable cause) {\r\n    super(message, cause);\r\n}"},
 {"id":4700, "name":"-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl)", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public TaskDependencyImpl(Task dependant, Task dependee, TaskDependencyCollectionImpl collection) {\r\n    myDependant = dependant;\r\n    myDependee = dependee;\r\n    myCollection = collection;\r\n    if ((dependee == null) || (dependant == null)) {\r\n        throw new IllegalArgumentException((((\"invalid participants of dependency: dependee=\" + dependee) + \" dependant=\") + dependant));\r\n    }\r\n    myHardness = TaskDependency.Hardness.STRONG;\r\n}"},
 {"id":4701, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.delete()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public void delete() {\r\n    myCollection.delete(this);\r\n}"},
 {"id":4702, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.equals(java.lang.Object)", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public boolean equals(Object obj) {\r\n    boolean result = obj instanceof TaskDependency;\r\n    if (result) {\r\n        TaskDependency rvalue = ((TaskDependency) (obj));\r\n        result = (myDependant.equals(rvalue.getDependant())) && (myDependee.equals(rvalue.getDependee()));\r\n    }\r\n    return result;\r\n}"},
 {"id":4703, "name":"getActivityBinding()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.getActivityBinding()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public TaskDependency.ActivityBinding getActivityBinding() {\r\n    return getConstraint().getActivityBinding();\r\n}"},
 {"id":4704, "name":"getConstraint()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.getConstraint()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public TaskDependencyConstraint getConstraint() {\r\n    return myConstraint;\r\n}"},
 {"id":4705, "name":"getDependant()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.getDependant()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public Task getDependant() {\r\n    return myDependant;\r\n}"},
 {"id":4706, "name":"getDependee()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.getDependee()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public Task getDependee() {\r\n    return myDependee;\r\n}"},
 {"id":4707, "name":"getDifference()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.getDifference()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public int getDifference() {\r\n    return myDifference;\r\n}"},
 {"id":4708, "name":"getHardness()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.getHardness()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public TaskDependency.Hardness getHardness() {\r\n    return myHardness;\r\n}"},
 {"id":4709, "name":"hashCode()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.hashCode()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public int hashCode() {\r\n    return (7 * (myDependant.hashCode())) + (9 * (myDependee.hashCode()));\r\n}"},
 {"id":4710, "name":"setConstraint(net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.setConstraint(net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public void setConstraint(TaskDependencyConstraint constraint) {\r\n    myConstraint = constraint;\r\n    constraint.setTaskDependency(this);\r\n    myCollection.fireChanged(this);\r\n}"},
 {"id":4711, "name":"setDifference(int)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.setDifference(int)", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public void setDifference(int difference) {\r\n    myDifference = difference;\r\n}"},
 {"id":4712, "name":"setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public void setHardness(TaskDependency.Hardness hardness) {\r\n    myHardness = hardness;\r\n}"},
 {"id":4713, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.toString()", "ownerclassid":"608", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "sourcecode":"public String toString() {\r\n    return ((myDependant) + \"->\") + (myDependee);\r\n}"},
 {"id":4714, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySlice.clear()", "ownerclassid":"609", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySlice", "sourcecode":"void clear();"},
 {"id":4715, "name":"clear(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySlice.clear(java.util.List)", "ownerclassid":"609", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySlice", "sourcecode":"void clear(List selection);"},
 {"id":4716, "name":"toArray()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySlice.toArray()", "ownerclassid":"609", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySlice", "sourcecode":"TaskDependency[] toArray();"},
 {"id":4717, "name":"-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependant.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "ownerclassid":"610", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependant", "sourcecode":"public TaskDependencySliceAsDependant(Task task, TaskDependencyCollection dependencyCollection) {\r\n    super(task, dependencyCollection);\r\n}"},
 {"id":4718, "name":"toArray()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependant.toArray()", "ownerclassid":"610", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependant", "sourcecode":"public TaskDependency[] toArray() {\r\n    return getDependencyCollection().getDependenciesAsDependant(getTask());\r\n}"},
 {"id":4719, "name":"-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependee.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "ownerclassid":"611", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependee", "sourcecode":"public TaskDependencySliceAsDependee(Task task, TaskDependencyCollection dependencyCollection) {\r\n    super(task, dependencyCollection);\r\n}"},
 {"id":4720, "name":"toArray()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependee.toArray()", "ownerclassid":"611", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependee", "sourcecode":"public TaskDependency[] toArray() {\r\n    return getDependencyCollection().getDependenciesAsDependee(getTask());\r\n}"},
 {"id":4721, "name":"-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "ownerclassid":"612", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl", "sourcecode":"public TaskDependencySliceImpl(Task task, TaskDependencyCollection dependencyCollection) {\r\n    myTask = task;\r\n    myDependencyCollection = dependencyCollection;\r\n}"},
 {"id":4722, "name":"clear()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl.clear()", "ownerclassid":"612", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl", "sourcecode":"public void clear() {\r\n    TaskDependency[] deps = toArray();\r\n    for (int i = 0; i < (deps.length); i++) {\r\n        deps[i].delete();\r\n    }\r\n}"},
 {"id":4723, "name":"clear(java.util.List)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl.clear(java.util.List)", "ownerclassid":"612", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl", "sourcecode":"// This function unlinks only tasks that are selected and leaves links to not selected tasks.\r\npublic void clear(List selection) {\r\n    TaskDependency[] deps = toArray();\r\n    for (int i = 0; i < (deps.length); i++) {\r\n        if ((selection.contains(deps[i].getDependant())) && (selection.contains(deps[i].getDependee()))) {\r\n            deps[i].delete();\r\n        }\r\n    }\r\n}"},
 {"id":4724, "name":"getDependencyCollection()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl.getDependencyCollection()", "ownerclassid":"612", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl", "sourcecode":"protected TaskDependencyCollection getDependencyCollection() {\r\n    return myDependencyCollection;\r\n}"},
 {"id":4725, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl.getTask()", "ownerclassid":"612", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl", "sourcecode":"protected Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":4726, "name":"toArray()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl.toArray()", "ownerclassid":"612", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl", "sourcecode":"public TaskDependency[] toArray() {\r\n    return myDependencyCollection.getDependencies(myTask);\r\n}"},
 {"id":4727, "name":"-init-(int,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.-init-(int,java.lang.String)", "ownerclassid":"613", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "sourcecode":"public ConstraintImpl(int myID, String myName) {\r\n    this.myID = myID;\r\n    this.myName = myName;\r\n}"},
 {"id":4728, "name":"addDelay(net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.addDelay(net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"613", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "sourcecode":"public void addDelay(GanttCalendar calendar) {\r\n    int difference = myDependency.getDifference();\r\n    calendar.add(difference);\r\n    GanttCalendar solutionStart = calendar.Clone();\r\n    solutionStart.add(((-1) * (myDependency.getDifference())));\r\n    for (int i = 0; i <= difference; i++) {\r\n        if (myDependency.getDependant().getManager().getCalendar().isNonWorkingDay(solutionStart.getTime())) {\r\n            calendar.add(1);\r\n            difference++;\r\n        }\r\n        solutionStart.add(1);\r\n    }\r\n}"},
 {"id":4729, "name":"clone()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.clone()", "ownerclassid":"613", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "sourcecode":"public Object clone() throws CloneNotSupportedException {\r\n    return super.clone();\r\n}"},
 {"id":4730, "name":"getDependency()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.getDependency()", "ownerclassid":"613", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "sourcecode":"protected TaskDependency getDependency() {\r\n    return myDependency;\r\n}"},
 {"id":4731, "name":"getID()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.getID()", "ownerclassid":"613", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "sourcecode":"public int getID() {\r\n    return myID;\r\n}"},
 {"id":4732, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.getName()", "ownerclassid":"613", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "sourcecode":"public String getName() {\r\n    return myName;\r\n}"},
 {"id":4733, "name":"setTaskDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.setTaskDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"613", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "sourcecode":"public void setTaskDependency(TaskDependency dependency) {\r\n    myDependency = dependency;\r\n}"},
 {"id":4734, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.toString()", "ownerclassid":"613", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "sourcecode":"public String toString() {\r\n    return getName();\r\n}"},
 {"id":4735, "name":"-init-(net.sourceforge.ganttproject.task.TaskActivity,net.sourceforge.ganttproject.task.TaskActivity,java.util.Date[])", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl.-init-(net.sourceforge.ganttproject.task.TaskActivity,net.sourceforge.ganttproject.task.TaskActivity,java.util.Date[])", "ownerclassid":"614", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl", "sourcecode":"DependencyActivityBindingImpl(TaskActivity dependantActivity, TaskActivity dependeeActivity, Date[] alignedBounds) {\r\n    myDependantActivity = dependantActivity;\r\n    myDependeeActivity = dependeeActivity;\r\n    myAlignedBounds = alignedBounds;\r\n}"},
 {"id":4736, "name":"getAlignedBounds()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl.getAlignedBounds()", "ownerclassid":"614", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl", "sourcecode":"public Date[] getAlignedBounds() {\r\n    return myAlignedBounds;\r\n}"},
 {"id":4737, "name":"getDependantActivity()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl.getDependantActivity()", "ownerclassid":"614", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl", "sourcecode":"public TaskActivity getDependantActivity() {\r\n    return myDependantActivity;\r\n}"},
 {"id":4738, "name":"getDependeeActivity()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl.getDependeeActivity()", "ownerclassid":"614", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl", "sourcecode":"public TaskActivity getDependeeActivity() {\r\n    return myDependeeActivity;\r\n}"},
 {"id":4739, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.FinishFinishConstraintImpl.-init-()", "ownerclassid":"615", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.FinishFinishConstraintImpl", "sourcecode":"public FinishFinishConstraintImpl() {\r\n    super(GanttTaskRelationship.FF, GanttLanguage.getInstance().getText(\"finishfinish\"));\r\n}"},
 {"id":4740, "name":"getActivityBinding()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.FinishFinishConstraintImpl.getActivityBinding()", "ownerclassid":"615", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.FinishFinishConstraintImpl", "sourcecode":"public TaskDependency.ActivityBinding getActivityBinding() {\r\n    TaskActivity[] dependantActivities = getDependency().getDependant().getActivities();\r\n    TaskActivity[] dependeeActivities = getDependency().getDependee().getActivities();\r\n    TaskActivity theDependant = dependantActivities[((dependantActivities.length) - 1)];\r\n    TaskActivity theDependee = dependeeActivities[((dependeeActivities.length) - 1)];\r\n    return new DependencyActivityBindingImpl(theDependant, theDependee, new Date[]{ theDependant.getEnd(), theDependee.getEnd() });\r\n}"},
 {"id":4741, "name":"getCollision()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.FinishFinishConstraintImpl.getCollision()", "ownerclassid":"615", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.FinishFinishConstraintImpl", "sourcecode":"public TaskDependencyConstraint.Collision getCollision() {\r\n    TaskDependencyConstraint.Collision result = null;\r\n    Task dependee = getDependency().getDependee();\r\n    Task dependant = getDependency().getDependant();\r\n    GanttCalendar dependeeEnd = dependee.getEnd();\r\n    GanttCalendar dependantEnd = dependant.getEnd();\r\n    // \r\n    int difference = getDependency().getDifference();\r\n    GanttCalendar comparisonDate = dependeeEnd.Clone();\r\n    comparisonDate.add(difference);\r\n    boolean isActive = ((getDependency().getHardness()) == (TaskDependency.Hardness.RUBBER)) ? (dependantEnd.compareTo(comparisonDate)) < 0 : (dependantEnd.compareTo(comparisonDate)) != 0;\r\n    GanttCalendar acceptableStart = dependant.getStart().Clone();\r\n    // GanttCalendar acceptableStart = dependant.getStart();\r\n    if (isActive) {\r\n        Task clone = dependee.unpluggedClone();\r\n        TaskMutator mutator = clone.createMutator();\r\n        mutator.shift((-(dependant.getDuration().getLength())));\r\n        acceptableStart = clone.getEnd();\r\n    }\r\n    addDelay(acceptableStart);\r\n    result = new TaskDependencyConstraint.DefaultCollision(acceptableStart, TaskDependencyConstraint.Collision.START_LATER_VARIATION, isActive);\r\n    return result;\r\n}"},
 {"id":4742, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.FinishStartConstraintImpl.-init-()", "ownerclassid":"616", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.FinishStartConstraintImpl", "sourcecode":"public FinishStartConstraintImpl() {\r\n    super(GanttTaskRelationship.FS, GanttLanguage.getInstance().getText(\"finishstart\"));\r\n}"},
 {"id":4743, "name":"getActivityBinding()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.FinishStartConstraintImpl.getActivityBinding()", "ownerclassid":"616", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.FinishStartConstraintImpl", "sourcecode":"public TaskDependency.ActivityBinding getActivityBinding() {\r\n    TaskActivity[] dependantActivities = getDependency().getDependant().getActivities();\r\n    TaskActivity[] dependeeActivities = getDependency().getDependee().getActivities();\r\n    TaskActivity theDependant = dependantActivities[0];\r\n    TaskActivity theDependee = dependeeActivities[((dependeeActivities.length) - 1)];\r\n    return new DependencyActivityBindingImpl(theDependant, theDependee, new Date[]{ theDependant.getStart(), theDependee.getEnd() });\r\n}"},
 {"id":4744, "name":"getCollision()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.FinishStartConstraintImpl.getCollision()", "ownerclassid":"616", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.FinishStartConstraintImpl", "sourcecode":"public TaskDependencyConstraint.Collision getCollision() {\r\n    TaskDependencyConstraint.Collision result = null;\r\n    Task dependee = getDependency().getDependee();\r\n    Task dependant = getDependency().getDependant();\r\n    GanttCalendar dependeeEnd = dependee.getEnd().Clone();\r\n    // GanttCalendar dependeeEnd = dependee.getEnd();\r\n    GanttCalendar dependantStart = dependant.getStart();\r\n    int difference = getDependency().getDifference();\r\n    GanttCalendar comparisonDate = dependantStart.Clone();\r\n    comparisonDate.add(difference);\r\n    boolean isActive = ((getDependency().getHardness()) == (TaskDependency.Hardness.RUBBER)) ? (dependeeEnd.compareTo(comparisonDate)) > 0 : (dependeeEnd.compareTo(comparisonDate)) != 0;\r\n    // new Exception(\"[FinishStartConstraint] isActive=\"+isActive+\"\r\n    // dependdee=\"+dependee+\" end=\"+dependeeEnd+\"\r\n    // start=\"+dependantStart).printStackTrace();\r\n    addDelay(dependeeEnd);\r\n    result = new TaskDependencyConstraint.DefaultCollision(dependeeEnd, TaskDependencyConstraint.Collision.START_LATER_VARIATION, isActive);\r\n    return result;\r\n}"},
 {"id":4745, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.StartFinishConstraintImpl.-init-()", "ownerclassid":"617", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.StartFinishConstraintImpl", "sourcecode":"public StartFinishConstraintImpl() {\r\n    super(GanttTaskRelationship.SF, GanttLanguage.getInstance().getText(\"startfinish\"));\r\n}"},
 {"id":4746, "name":"getActivityBinding()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.StartFinishConstraintImpl.getActivityBinding()", "ownerclassid":"617", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.StartFinishConstraintImpl", "sourcecode":"public TaskDependency.ActivityBinding getActivityBinding() {\r\n    TaskActivity[] dependantActivities = getDependency().getDependant().getActivities();\r\n    TaskActivity[] dependeeActivities = getDependency().getDependee().getActivities();\r\n    TaskActivity theDependant = dependantActivities[((dependantActivities.length) - 1)];\r\n    TaskActivity theDependee = dependeeActivities[0];\r\n    return new DependencyActivityBindingImpl(theDependant, theDependee, new Date[]{ theDependant.getEnd(), theDependee.getStart() });\r\n}"},
 {"id":4747, "name":"getCollision()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.StartFinishConstraintImpl.getCollision()", "ownerclassid":"617", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.StartFinishConstraintImpl", "sourcecode":"public TaskDependencyConstraint.Collision getCollision() {\r\n    TaskDependencyConstraint.Collision result = null;\r\n    Task dependee = getDependency().getDependee();\r\n    Task dependant = getDependency().getDependant();\r\n    GanttCalendar dependeeStart = dependee.getStart();\r\n    GanttCalendar dependantEnd = dependant.getEnd();\r\n    // \r\n    int difference = getDependency().getDifference();\r\n    GanttCalendar comparisonDate = dependeeStart.Clone();\r\n    comparisonDate.add(difference);\r\n    boolean isActive = ((getDependency().getHardness()) == (TaskDependency.Hardness.RUBBER)) ? (dependantEnd.compareTo(comparisonDate)) < 0 : (dependantEnd.compareTo(comparisonDate)) != 0;\r\n    // GanttCalendar acceptableStart = dependant.getStart();\r\n    GanttCalendar acceptableStart = dependee.getStart().Clone();\r\n    if (isActive) {\r\n        Task clone = dependee.unpluggedClone();\r\n        TaskMutator mutator = clone.createMutator();\r\n        mutator.shift((-(dependant.getDuration().getLength())));\r\n        acceptableStart = clone.getStart();\r\n    }\r\n    addDelay(acceptableStart);\r\n    result = new TaskDependencyConstraint.DefaultCollision(acceptableStart, TaskDependencyConstraint.Collision.START_LATER_VARIATION, isActive);\r\n    return result;\r\n}"},
 {"id":4748, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.StartStartConstraintImpl.-init-()", "ownerclassid":"618", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.StartStartConstraintImpl", "sourcecode":"public StartStartConstraintImpl() {\r\n    super(GanttTaskRelationship.SS, GanttLanguage.getInstance().getText(\"startstart\"));\r\n}"},
 {"id":4749, "name":"getActivityBinding()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.StartStartConstraintImpl.getActivityBinding()", "ownerclassid":"618", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.StartStartConstraintImpl", "sourcecode":"public TaskDependency.ActivityBinding getActivityBinding() {\r\n    TaskActivity[] dependantActivities = getDependency().getDependant().getActivities();\r\n    TaskActivity[] dependeeActivities = getDependency().getDependee().getActivities();\r\n    TaskActivity theDependant = dependantActivities[0];\r\n    TaskActivity theDependee = dependeeActivities[0];\r\n    return new DependencyActivityBindingImpl(theDependant, theDependee, new Date[]{ theDependant.getStart(), theDependee.getStart() });\r\n}"},
 {"id":4750, "name":"getCollision()", "fullmethod":"net.sourceforge.ganttproject.task.dependency.constraint.StartStartConstraintImpl.getCollision()", "ownerclassid":"618", "ownerclassname":"net.sourceforge.ganttproject.task.dependency.constraint.StartStartConstraintImpl", "sourcecode":"public TaskDependencyConstraint.Collision getCollision() {\r\n    TaskDependencyConstraint.Collision result = null;\r\n    Task dependee = getDependency().getDependee();\r\n    Task dependant = getDependency().getDependant();\r\n    GanttCalendar dependeeStart = dependee.getStart();\r\n    GanttCalendar dependantStart = dependant.getStart();\r\n    // \r\n    int difference = getDependency().getDifference();\r\n    GanttCalendar comparisonDate = dependeeStart.Clone();\r\n    comparisonDate.add(difference);\r\n    boolean isActive = ((getDependency().getHardness()) == (TaskDependency.Hardness.RUBBER)) ? (dependantStart.compareTo(comparisonDate)) < 0 : (dependantStart.compareTo(comparisonDate)) != 0;\r\n    // GanttCalendar acceptableStart = dependee.getStart();\r\n    GanttCalendar acceptableStart = dependee.getStart().Clone();\r\n    addDelay(acceptableStart);\r\n    result = new TaskDependencyConstraint.DefaultCollision(acceptableStart, TaskDependencyConstraint.Collision.START_LATER_VARIATION, isActive);\r\n    return result;\r\n}"},
 {"id":4751, "name":"-init-(net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection,net.sourceforge.ganttproject.task.dependency.TaskDependency)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection,net.sourceforge.ganttproject.task.dependency.TaskDependency)", "ownerclassid":"619", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "sourcecode":"public TaskDependencyEvent(TaskDependencyCollection source, TaskDependency dependency) {\r\n    super(source);\r\n    myDependency = dependency;\r\n}"},
 {"id":4752, "name":"getDependency()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent.getDependency()", "ownerclassid":"619", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "sourcecode":"public TaskDependency getDependency() {\r\n    return myDependency;\r\n}"},
 {"id":4753, "name":"-init-(java.lang.Object,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent.-init-(java.lang.Object,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "ownerclassid":"620", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "sourcecode":"public TaskHierarchyEvent(Object source, Task myTask, Task myOldContainer, Task myNewContainer) {\r\n    super(source);\r\n    this.myNewContainer = myNewContainer;\r\n    this.myTask = myTask;\r\n    this.myOldContainer = myOldContainer;\r\n}"},
 {"id":4754, "name":"getNewContainer()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent.getNewContainer()", "ownerclassid":"620", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "sourcecode":"public Task getNewContainer() {\r\n    return myNewContainer;\r\n}"},
 {"id":4755, "name":"getOldContainer()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent.getOldContainer()", "ownerclassid":"620", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "sourcecode":"public Task getOldContainer() {\r\n    return myOldContainer;\r\n}"},
 {"id":4756, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent.getTask()", "ownerclassid":"620", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "sourcecode":"public Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":4757, "name":"dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListener.dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "ownerclassid":"621", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListener", "sourcecode":"void dependencyAdded(TaskDependencyEvent e);"},
 {"id":4758, "name":"dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListener.dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "ownerclassid":"621", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListener", "sourcecode":"void dependencyRemoved(TaskDependencyEvent e);"},
 {"id":4759, "name":"taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListener.taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"621", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListener", "sourcecode":"void taskAdded(TaskHierarchyEvent e);"},
 {"id":4760, "name":"taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListener.taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"621", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListener", "sourcecode":"void taskMoved(TaskHierarchyEvent e);"},
 {"id":4761, "name":"taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListener.taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "ownerclassid":"621", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListener", "sourcecode":"void taskProgressChanged(TaskPropertyEvent e);"},
 {"id":4762, "name":"taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListener.taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "ownerclassid":"621", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListener", "sourcecode":"void taskPropertiesChanged(TaskPropertyEvent e);"},
 {"id":4763, "name":"taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListener.taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"621", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListener", "sourcecode":"void taskRemoved(TaskHierarchyEvent e);"},
 {"id":4764, "name":"taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListener.taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "ownerclassid":"621", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListener", "sourcecode":"void taskScheduleChanged(TaskScheduleEvent e);"},
 {"id":4765, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.-init-()", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"TaskListenerAdapter() {\r\n}"},
 {"id":4766, "name":"dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"public void dependencyAdded(TaskDependencyEvent e) {\r\n}"},
 {"id":4767, "name":"dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"public void dependencyRemoved(TaskDependencyEvent e) {\r\n}"},
 {"id":4768, "name":"taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"public void taskAdded(TaskHierarchyEvent e) {\r\n}"},
 {"id":4769, "name":"taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"public void taskMoved(TaskHierarchyEvent e) {\r\n}"},
 {"id":4770, "name":"taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"public void taskProgressChanged(TaskPropertyEvent e) {\r\n}"},
 {"id":4771, "name":"taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"public void taskPropertiesChanged(TaskPropertyEvent e) {\r\n}"},
 {"id":4772, "name":"taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"public void taskRemoved(TaskHierarchyEvent e) {\r\n}"},
 {"id":4773, "name":"taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "ownerclassid":"622", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "sourcecode":"public void taskScheduleChanged(TaskScheduleEvent e) {\r\n}"},
 {"id":4774, "name":"-init-(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent.-init-(java.lang.Object)", "ownerclassid":"623", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "sourcecode":"public TaskPropertyEvent(Object source) {\r\n    super(source);\r\n    myTask = ((Task) (source));\r\n}"},
 {"id":4775, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent.getTask()", "ownerclassid":"623", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "sourcecode":"public Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":4776, "name":"-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "ownerclassid":"624", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "sourcecode":"public TaskScheduleEvent(Task source, GanttCalendar oldStartDate, GanttCalendar oldFinishDate, GanttCalendar newStartDate, GanttCalendar newFinishDate) {\r\n    super(source);\r\n    myOldStartDate = oldStartDate;\r\n    myOldFinishDate = oldFinishDate;\r\n    myNewStartDate = newStartDate;\r\n    myNewFinishDate = newFinishDate;\r\n}"},
 {"id":4777, "name":"getNewFinishDate()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.getNewFinishDate()", "ownerclassid":"624", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "sourcecode":"public GanttCalendar getNewFinishDate() {\r\n    return myNewFinishDate;\r\n}"},
 {"id":4778, "name":"getNewStartDate()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.getNewStartDate()", "ownerclassid":"624", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "sourcecode":"public GanttCalendar getNewStartDate() {\r\n    return myNewStartDate;\r\n}"},
 {"id":4779, "name":"getOldFinishDate()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.getOldFinishDate()", "ownerclassid":"624", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "sourcecode":"public GanttCalendar getOldFinishDate() {\r\n    return myOldFinishDate;\r\n}"},
 {"id":4780, "name":"getOldStartDate()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.getOldStartDate()", "ownerclassid":"624", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "sourcecode":"public GanttCalendar getOldStartDate() {\r\n    return myOldStartDate;\r\n}"},
 {"id":4781, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.getTask()", "ownerclassid":"624", "ownerclassname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "sourcecode":"public Task getTask() {\r\n    return ((Task) (getSource()));\r\n}"},
 {"id":4782, "name":"-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem)", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem)", "ownerclassid":"625", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "sourcecode":"public TaskHierarchyItem(Task myTask, TaskHierarchyItem containerItem) {\r\n    this.myTask = myTask;\r\n    this.myContainerItem = containerItem;\r\n    if ((myContainerItem) != null) {\r\n        myContainerItem.addNestedItem(this);\r\n    }\r\n}"},
 {"id":4783, "name":"addNestedItem(net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem)", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.addNestedItem(net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem)", "ownerclassid":"625", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "sourcecode":"public void addNestedItem(TaskHierarchyItem nested) {\r\n    nested.myNextSiblingItem = myFirstNestedItem;\r\n    nested.myContainerItem = this;\r\n    myFirstNestedItem = nested;\r\n}"},
 {"id":4784, "name":"delete()", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.delete()", "ownerclassid":"625", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "sourcecode":"public void delete() {\r\n    if ((myContainerItem) != null) {\r\n        TaskHierarchyItem previousSibling = myContainerItem.myFirstNestedItem;\r\n        if ((this) == previousSibling) {\r\n            myContainerItem.myFirstNestedItem = myNextSiblingItem;\r\n        } else {\r\n            for (; (previousSibling.myNextSiblingItem) != (this); previousSibling = previousSibling.myNextSiblingItem);\r\n            previousSibling.myNextSiblingItem = myNextSiblingItem;\r\n        }\r\n        myContainerItem = null;\r\n    }\r\n    myNextSiblingItem = null;\r\n}"},
 {"id":4785, "name":"getContainerItem()", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.getContainerItem()", "ownerclassid":"625", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "sourcecode":"public TaskHierarchyItem getContainerItem() {\r\n    return myContainerItem;\r\n}"},
 {"id":4786, "name":"getNestedItems()", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.getNestedItems()", "ownerclassid":"625", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "sourcecode":"public TaskHierarchyItem[] getNestedItems() {\r\n    TaskHierarchyItem[] result;\r\n    if ((myFirstNestedItem) == null) {\r\n        result = TaskHierarchyItem.EMPTY_ARRAY;\r\n    } else {\r\n        ArrayList tempList = new ArrayList();\r\n        for (TaskHierarchyItem nested = myFirstNestedItem; nested != null; nested = nested.myNextSiblingItem) {\r\n            tempList.add(nested);\r\n        }\r\n        result = ((TaskHierarchyItem[]) (tempList.toArray(TaskHierarchyItem.EMPTY_ARRAY)));\r\n    }\r\n    return result;\r\n}"},
 {"id":4787, "name":"getTask()", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.getTask()", "ownerclassid":"625", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "sourcecode":"public Task getTask() {\r\n    return myTask;\r\n}"},
 {"id":4788, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl.-init-()", "ownerclassid":"626", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl", "sourcecode":"TaskHierarchyManagerImpl() {\r\n}"},
 {"id":4789, "name":"createItem(net.sourceforge.ganttproject.task.Task)", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl.createItem(net.sourceforge.ganttproject.task.Task)", "ownerclassid":"626", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl", "sourcecode":"public TaskHierarchyItem createItem(Task task) {\r\n    TaskHierarchyItem result = new TaskHierarchyItem(task, myRootItem);\r\n    return result;\r\n}"},
 {"id":4790, "name":"getRootItem()", "fullmethod":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl.getRootItem()", "ownerclassid":"626", "ownerclassname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl", "sourcecode":"public TaskHierarchyItem getRootItem() {\r\n    return myRootItem;\r\n}"},
 {"id":4791, "name":"adjustLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.DateFrameable.adjustLeft(java.util.Date)", "ownerclassid":"627", "ownerclassname":"net.sourceforge.ganttproject.time.DateFrameable", "sourcecode":"Date adjustLeft(Date baseDate);"},
 {"id":4792, "name":"adjustRight(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.DateFrameable.adjustRight(java.util.Date)", "ownerclassid":"627", "ownerclassname":"net.sourceforge.ganttproject.time.DateFrameable", "sourcecode":"Date adjustRight(Date baseDate);"},
 {"id":4793, "name":"jumpLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.DateFrameable.jumpLeft(java.util.Date)", "ownerclassid":"627", "ownerclassname":"net.sourceforge.ganttproject.time.DateFrameable", "sourcecode":"Date jumpLeft(Date baseDate);"},
 {"id":4794, "name":"format(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TextFormatter.format(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "ownerclassid":"628", "ownerclassname":"net.sourceforge.ganttproject.time.TextFormatter", "sourcecode":"public TimeUnitText format(TimeUnit timeUnit, Date baseDate);"},
 {"id":4795, "name":"getBottomUnit()", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.getBottomUnit()", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"TimeUnit getBottomUnit();"},
 {"id":4796, "name":"getFinishDate()", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.getFinishDate()", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"Date getFinishDate();"},
 {"id":4797, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.getStartDate()", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"Date getStartDate();"},
 {"id":4798, "name":"getTopUnit()", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.getTopUnit()", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"TimeUnit getTopUnit();"},
 {"id":4799, "name":"getUnitCount(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.getUnitCount(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"int getUnitCount(TimeUnit unitLine);"},
 {"id":4800, "name":"getUnitFinish(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.getUnitFinish(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"Date getUnitFinish(TimeUnit unitLine, int position);"},
 {"id":4801, "name":"getUnitStart(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.getUnitStart(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"Date getUnitStart(TimeUnit unitLine, int position);"},
 {"id":4802, "name":"getUnitText(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"TimeUnitText getUnitText(TimeUnit unitLine, int position);"},
 {"id":4803, "name":"trimLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeFrame.trimLeft(java.util.Date)", "ownerclassid":"629", "ownerclassname":"net.sourceforge.ganttproject.time.TimeFrame", "sourcecode":"void trimLeft(Date exactDate);"},
 {"id":4804, "name":"format(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnit.format(java.util.Date)", "ownerclassid":"630", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnit", "sourcecode":"public TimeUnitText format(Date baseDate);"},
 {"id":4805, "name":"getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnit.getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"630", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnit", "sourcecode":"public int getAtomCount(TimeUnit atomUnit);"},
 {"id":4806, "name":"getDirectAtomUnit()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnit.getDirectAtomUnit()", "ownerclassid":"630", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnit", "sourcecode":"public TimeUnit getDirectAtomUnit();"},
 {"id":4807, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnit.getName()", "ownerclassid":"630", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnit", "sourcecode":"public String getName();"},
 {"id":4808, "name":"isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnit.isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"630", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnit", "sourcecode":"public boolean isConstructedFrom(TimeUnit unit);"},
 {"id":4809, "name":"setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnit.setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "ownerclassid":"630", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnit", "sourcecode":"// \r\npublic void setTextFormatter(TextFormatter formatter);"},
 {"id":4810, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "ownerclassid":"631", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl", "sourcecode":"public TimeUnitDateFrameableImpl(String name, TimeUnitGraph timeUnitGraph, TimeUnit atomUnit, DateFrameable framer) {\r\n    super(name, timeUnitGraph, atomUnit);\r\n    myFramer = framer;\r\n}"},
 {"id":4811, "name":"adjustLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl.adjustLeft(java.util.Date)", "ownerclassid":"631", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl", "sourcecode":"public Date adjustLeft(Date baseDate) {\r\n    return myFramer.adjustLeft(baseDate);\r\n}"},
 {"id":4812, "name":"adjustRight(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl.adjustRight(java.util.Date)", "ownerclassid":"631", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl", "sourcecode":"public Date adjustRight(Date baseDate) {\r\n    return myFramer.adjustRight(baseDate);\r\n}"},
 {"id":4813, "name":"jumpLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl.jumpLeft(java.util.Date)", "ownerclassid":"631", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl", "sourcecode":"public Date jumpLeft(Date baseDate) {\r\n    return myFramer.jumpLeft(baseDate);\r\n}"},
 {"id":4814, "name":"createTimeUnit(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDate.createTimeUnit(java.util.Date)", "ownerclassid":"632", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDate", "sourcecode":"public TimeUnit createTimeUnit(Date date);"},
 {"id":4815, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "ownerclassid":"634", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl", "sourcecode":"public TimeUnitFunctionOfDateImpl(String name, TimeUnitGraph graph, TimeUnit directAtomUnit, DateFrameable framer) {\r\n    super(name, graph, directAtomUnit, framer);\r\n    if (!(directAtomUnit instanceof DateFrameable)) {\r\n        throw new IllegalArgumentException(\"Only date frameable time units may be used as atoms for functions of date\");\r\n    }\r\n    myDirectFrameable = ((DateFrameable) (directAtomUnit));\r\n}"},
 {"id":4816, "name":"-init-(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl.-init-(java.util.Date)", "ownerclassid":"634", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl", "sourcecode":"public ParameterizedTimeUnitImpl(Date myBaseDate) {\r\n    this.myBaseDate = myBaseDate;\r\n    this.myRightDate = this.adjustRight(myBaseDate);\r\n    this.myLeftDate = this.adjustLeft(myBaseDate);\r\n}"},
 {"id":4817, "name":"createTimeUnit(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl.createTimeUnit(java.util.Date)", "ownerclassid":"634", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl", "sourcecode":"public TimeUnit createTimeUnit(Date date) {\r\n    return new TimeUnitFunctionOfDateImpl.ParameterizedTimeUnitImpl(date);\r\n}"},
 {"id":4818, "name":"getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl.getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"634", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl", "sourcecode":"public int getAtomCount(TimeUnit atomUnit) {\r\n    throw new UnsupportedOperationException(\"This time unit is function of date. Use method createTimeUnit() to create a parameterized instance.\");\r\n}"},
 {"id":4819, "name":"-init-(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.-init-(java.util.Date)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public ParameterizedTimeUnitImpl(Date myBaseDate) {\r\n    this.myBaseDate = myBaseDate;\r\n    this.myRightDate = this.adjustRight(myBaseDate);\r\n    this.myLeftDate = this.adjustLeft(myBaseDate);\r\n}"},
 {"id":4820, "name":"adjustLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.adjustLeft(java.util.Date)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public Date adjustLeft(Date baseDate) {\r\n    return this.adjustLeft(baseDate);\r\n}"},
 {"id":4821, "name":"adjustRight(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.adjustRight(java.util.Date)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public Date adjustRight(Date baseDate) {\r\n    return this.adjustRight(baseDate);\r\n}"},
 {"id":4822, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.equals(java.lang.Object)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public boolean equals(Object o) {\r\n    return this.equals(o);\r\n}"},
 {"id":4823, "name":"format(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.format(java.util.Date)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public TimeUnitText format(Date baseDate) {\r\n    TextFormatter formatter = this.getTextFormatter();\r\n    return formatter == null ? new TimeUnitText(\"\") : formatter.format(this, baseDate);\r\n}"},
 {"id":4824, "name":"getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public int getAtomCount(TimeUnit atomUnit) {\r\n    if ((atomUnit == (this)) || (atomUnit == (this))) {\r\n        return 1;\r\n    }\r\n    int directAtomCount = getDirectAtomCount();\r\n    return directAtomCount * (getDirectAtomUnit().getAtomCount(atomUnit));\r\n}"},
 {"id":4825, "name":"getDirectAtomCount()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.getDirectAtomCount()", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"private int getDirectAtomCount() {\r\n    if ((myAtomCount) == (-1)) {\r\n        myAtomCount = 0;\r\n        for (Date leftDate = this.myDirectFrameable.jumpLeft(myRightDate); (leftDate.compareTo(myLeftDate)) >= 0; (myAtomCount)++) {\r\n            leftDate = this.myDirectFrameable.jumpLeft(leftDate);\r\n        }\r\n    }\r\n    return myAtomCount;\r\n}"},
 {"id":4826, "name":"getDirectAtomUnit()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.getDirectAtomUnit()", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public TimeUnit getDirectAtomUnit() {\r\n    return this.getDirectAtomUnit();\r\n}"},
 {"id":4827, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.getName()", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public String getName() {\r\n    return this.getName();\r\n}"},
 {"id":4828, "name":"isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public boolean isConstructedFrom(TimeUnit unit) {\r\n    return this.isConstructedFrom(unit);\r\n}"},
 {"id":4829, "name":"jumpLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.jumpLeft(java.util.Date)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public Date jumpLeft(Date baseDate) {\r\n    return this.jumpLeft(baseDate);\r\n}"},
 {"id":4830, "name":"setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "ownerclassid":"633", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "sourcecode":"public void setTextFormatter(TextFormatter formatter) {\r\n    this.setTextFormatter(formatter);\r\n}"},
 {"id":4831, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.-init-()", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"TimeUnitGraph() {\r\n}"},
 {"id":4832, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.-init-(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"Composition(TimeUnit atomUnit, int atomCount) {\r\n    myAtom = atomUnit;\r\n    myAtomCount = atomCount;\r\n}"},
 {"id":4833, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitGraph$Composition,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.-init-(net.sourceforge.ganttproject.time.TimeUnitGraph$Composition,int)", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"Composition(TimeUnitGraph.Composition transitiveComposition, int atomCount) {\r\n    myAtomCount = atomCount * (transitiveComposition.myAtomCount);\r\n    myAtom = transitiveComposition.myAtom;\r\n}"},
 {"id":4834, "name":"createAtomTimeUnit(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.createAtomTimeUnit(java.lang.String)", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"public TimeUnit createAtomTimeUnit(String name) {\r\n    TimeUnit result = new TimeUnitImpl(name, this, null);\r\n    List compositions = new ArrayList();\r\n    compositions.add(new TimeUnitGraph.Composition(result, 1));\r\n    myUnit2compositions.put(result, compositions);\r\n    return result;\r\n}"},
 {"id":4835, "name":"createDateFrameableTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int,net.sourceforge.ganttproject.time.DateFrameable)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.createDateFrameableTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int,net.sourceforge.ganttproject.time.DateFrameable)", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"public TimeUnit createDateFrameableTimeUnit(String name, TimeUnit atomUnit, int atomCount, DateFrameable framer) {\r\n    TimeUnit result = new TimeUnitDateFrameableImpl(name, this, atomUnit, framer);\r\n    registerTimeUnit(result, atomCount);\r\n    return result;\r\n}"},
 {"id":4836, "name":"createTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.createTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"TimeUnit createTimeUnit(String name, TimeUnit atomUnit, int count) {\r\n    TimeUnit result = new TimeUnitImpl(name, this, atomUnit);\r\n    registerTimeUnit(result, count);\r\n    return result;\r\n}"},
 {"id":4837, "name":"createTimeUnitFunctionOfDate(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.createTimeUnitFunctionOfDate(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"public TimeUnitFunctionOfDate createTimeUnitFunctionOfDate(String name, TimeUnit atomUnit, DateFrameable framer) {\r\n    TimeUnitFunctionOfDate result;\r\n    result = new TimeUnitFunctionOfDateImpl(name, this, atomUnit, framer);\r\n    registerTimeUnit(result, (-1));\r\n    return result;\r\n}"},
 {"id":4838, "name":"getComposition(net.sourceforge.ganttproject.time.TimeUnitImpl,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.getComposition(net.sourceforge.ganttproject.time.TimeUnitImpl,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"public TimeUnitGraph.Composition getComposition(TimeUnitImpl timeUnit, TimeUnit atomUnit) {\r\n    TimeUnitGraph.Composition result = null;\r\n    List compositions = ((List) (myUnit2compositions.get(timeUnit)));\r\n    if (compositions == null) {\r\n        throw new RuntimeException(((\"Unit=\" + timeUnit) + \" has no compositions\"));\r\n    }\r\n    for (int i = 0; i < (compositions.size()); i++) {\r\n        TimeUnitGraph.Composition next = ((TimeUnitGraph.Composition) (compositions.get(i)));\r\n        if (next.myAtom.equals(atomUnit)) {\r\n            result = next;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":4839, "name":"registerTimeUnit(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph.registerTimeUnit(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"636", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "sourcecode":"private void registerTimeUnit(TimeUnit unit, int atomCount) {\r\n    TimeUnit atomUnit = unit.getDirectAtomUnit();\r\n    List transitiveCompositions = ((List) (myUnit2compositions.get(atomUnit)));\r\n    if (transitiveCompositions == null) {\r\n        throw new RuntimeException(((\"Atom unit=\" + atomUnit) + \" is unknown\"));\r\n    }\r\n    List compositions = new ArrayList(((transitiveCompositions.size()) + 1));\r\n    compositions.add(new TimeUnitGraph.Composition(unit, 1));\r\n    for (int i = 0; i < (transitiveCompositions.size()); i++) {\r\n        TimeUnitGraph.Composition nextTransitive = ((TimeUnitGraph.Composition) (transitiveCompositions.get(i)));\r\n        compositions.add(new TimeUnitGraph.Composition(nextTransitive, atomCount));\r\n    }\r\n    myUnit2compositions.put(unit, compositions);\r\n}"},
 {"id":4840, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition.-init-(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"635", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition", "sourcecode":"Composition(TimeUnit atomUnit, int atomCount) {\r\n    myAtom = atomUnit;\r\n    myAtomCount = atomCount;\r\n}"},
 {"id":4841, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnitGraph$Composition,int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition.-init-(net.sourceforge.ganttproject.time.TimeUnitGraph$Composition,int)", "ownerclassid":"635", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition", "sourcecode":"Composition(TimeUnitGraph.Composition transitiveComposition, int atomCount) {\r\n    myAtomCount = atomCount * (transitiveComposition.myAtomCount);\r\n    myAtom = transitiveComposition.myAtom;\r\n}"},
 {"id":4842, "name":"getAtomCount()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition.getAtomCount()", "ownerclassid":"635", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition", "sourcecode":"int getAtomCount() {\r\n    return myAtomCount;\r\n}"},
 {"id":4843, "name":"-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public TimeUnitImpl(String name, TimeUnitGraph graph, TimeUnit directAtomUnit) {\r\n    myName = name;\r\n    myGraph = graph;\r\n    myDirectAtomUnit = directAtomUnit;\r\n}"},
 {"id":4844, "name":"adjustLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.adjustLeft(java.util.Date)", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public Date adjustLeft(Date baseDate) {\r\n    throw new UnsupportedOperationException(((\"Time unit=\" + (this)) + \" doesnt support this operation\"));\r\n}"},
 {"id":4845, "name":"adjustRight(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.adjustRight(java.util.Date)", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public Date adjustRight(Date baseDate) {\r\n    throw new UnsupportedOperationException(((\"Time unit=\" + (this)) + \" doesnt support this operation\"));\r\n}"},
 {"id":4846, "name":"format(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.format(java.util.Date)", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public TimeUnitText format(Date baseDate) {\r\n    return (myTextFormatter) == null ? new TimeUnitText(\"\") : myTextFormatter.format(this, baseDate);\r\n}"},
 {"id":4847, "name":"getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public int getAtomCount(TimeUnit atomUnit) {\r\n    TimeUnitGraph.Composition composition = myGraph.getComposition(this, atomUnit);\r\n    if (composition == null) {\r\n        throw new RuntimeException((((\"Failed to find a composition of time unit=\" + (this)) + \" from time unit=\") + atomUnit));\r\n    }\r\n    return composition.getAtomCount();\r\n}"},
 {"id":4848, "name":"getDirectAtomUnit()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.getDirectAtomUnit()", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public TimeUnit getDirectAtomUnit() {\r\n    return myDirectAtomUnit;\r\n}"},
 {"id":4849, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.getName()", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public String getName() {\r\n    return myName;\r\n}"},
 {"id":4850, "name":"getTextFormatter()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.getTextFormatter()", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"protected TextFormatter getTextFormatter() {\r\n    return myTextFormatter;\r\n}"},
 {"id":4851, "name":"isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public boolean isConstructedFrom(TimeUnit atomUnit) {\r\n    return (myGraph.getComposition(this, atomUnit)) != null;\r\n}"},
 {"id":4852, "name":"jumpLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.jumpLeft(java.util.Date)", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public Date jumpLeft(Date baseDate) {\r\n    throw new UnsupportedOperationException(((\"Time unit=\" + (this)) + \" doesnt support this operation\"));\r\n}"},
 {"id":4853, "name":"setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public void setTextFormatter(TextFormatter formatter) {\r\n    myTextFormatter = formatter;\r\n}"},
 {"id":4854, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitImpl.toString()", "ownerclassid":"637", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "sourcecode":"public String toString() {\r\n    return ((getName()) + \" hash=\") + (hashCode());\r\n}"},
 {"id":4855, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnitStack)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnitStack)", "ownerclassid":"638", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitPair", "sourcecode":"protected TimeUnitPair(TimeUnit topUnit, TimeUnit bottomUnit, TimeUnitStack timeUnitStack) {\r\n    myTopTimeUnit = topUnit;\r\n    myBottomTimeUnit = bottomUnit;\r\n    myTimeUnitStack = timeUnitStack;\r\n}"},
 {"id":4856, "name":"getBottomTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitPair.getBottomTimeUnit()", "ownerclassid":"638", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitPair", "sourcecode":"public TimeUnit getBottomTimeUnit() {\r\n    return myBottomTimeUnit;\r\n}"},
 {"id":4857, "name":"getTimeUnitStack()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitPair.getTimeUnitStack()", "ownerclassid":"638", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitPair", "sourcecode":"public TimeUnitStack getTimeUnitStack() {\r\n    return myTimeUnitStack;\r\n}"},
 {"id":4858, "name":"getTopTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitPair.getTopTimeUnit()", "ownerclassid":"638", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitPair", "sourcecode":"public TimeUnit getTopTimeUnit() {\r\n    return myTopTimeUnit;\r\n}"},
 {"id":4859, "name":"createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"639", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitStack", "sourcecode":"TimeFrame createTimeFrame(Date startDate, TimeUnit topUnit, TimeUnit bottomUnit);"},
 {"id":4860, "name":"getDefaultTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitStack.getDefaultTimeUnit()", "ownerclassid":"639", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitStack", "sourcecode":"TimeUnit getDefaultTimeUnit();"},
 {"id":4861, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitStack.getName()", "ownerclassid":"639", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitStack", "sourcecode":"String getName();"},
 {"id":4862, "name":"getTimeUnitPairs()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitStack.getTimeUnitPairs()", "ownerclassid":"639", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitStack", "sourcecode":"TimeUnitPair[] getTimeUnitPairs();"},
 {"id":4863, "name":"-init-(java.lang.String,java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitText.-init-(java.lang.String,java.lang.String,java.lang.String)", "ownerclassid":"640", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitText", "sourcecode":"public TimeUnitText(String longText, String mediumText, String shortText) {\r\n    myLongText = longText;\r\n    myMediumText = mediumText;\r\n    myShortText = shortText;\r\n}"},
 {"id":4864, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitText.-init-(java.lang.String)", "ownerclassid":"640", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitText", "sourcecode":"public TimeUnitText(String mediumText) {\r\n    myMediumText = mediumText;\r\n    myLongText = mediumText;\r\n    myShortText = mediumText;\r\n}"},
 {"id":4865, "name":"getCachedText(int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitText.getCachedText(int)", "ownerclassid":"640", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitText", "sourcecode":"private String getCachedText(int maxLength) {\r\n    if (((myMinimaxLong) >= 0) && ((myMinimaxLong) <= maxLength)) {\r\n        return myLongText;\r\n    }\r\n    if (((myMinimaxMedium) >= 0) && ((myMinimaxMedium) <= maxLength)) {\r\n        return myMediumText;\r\n    }\r\n    if (((myMinimaxShort) >= 0) && ((myMinimaxShort) <= maxLength)) {\r\n        return myShortText;\r\n    }\r\n    return null;\r\n}"},
 {"id":4866, "name":"getText(int)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitText.getText(int)", "ownerclassid":"640", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitText", "sourcecode":"public String getText(int maxLength) {\r\n    return myMediumText;\r\n}"},
 {"id":4867, "name":"getText(int,net.sourceforge.ganttproject.util.TextLengthCalculator)", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitText.getText(int,net.sourceforge.ganttproject.util.TextLengthCalculator)", "ownerclassid":"640", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitText", "sourcecode":"public String getText(int requestedMaxLength, TextLengthCalculator calculator) {\r\n    String result = null;\r\n    if (!(calculator.getState().equals(myCalculatorState))) {\r\n        myCalculatorState = calculator.getState();\r\n        myMinimaxLong = calculator.getTextLength(myLongText);\r\n        myMinimaxMedium = calculator.getTextLength(myMediumText);\r\n        myMinimaxShort = calculator.getTextLength(myShortText);\r\n    }\r\n    result = getCachedText(requestedMaxLength);\r\n    return result == null ? \"\" : result;\r\n}"},
 {"id":4868, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.time.TimeUnitText.toString()", "ownerclassid":"640", "ownerclassname":"net.sourceforge.ganttproject.time.TimeUnitText", "sourcecode":"public String toString() {\r\n    return ((((\"long=\" + (myLongText)) + \", medium=\") + (myMediumText)) + \", short=\") + (myShortText);\r\n}"},
 {"id":4869, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter.-init-()", "ownerclassid":"641", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter", "sourcecode":"protected CachingTextFormatter() {\r\n    GanttLanguage.getInstance().addListener(this);\r\n}"},
 {"id":4870, "name":"createTimeUnitText(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter.createTimeUnitText(java.util.Date)", "ownerclassid":"641", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter", "sourcecode":"protected abstract TimeUnitText createTimeUnitText(Date adjustedLeft);"},
 {"id":4871, "name":"format(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter.format(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "ownerclassid":"641", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter", "sourcecode":"public TimeUnitText format(TimeUnit timeUnit, Date baseDate) {\r\n    TimeUnitText result = null;\r\n    Date adjustedLeft = ((DateFrameable) (timeUnit)).adjustLeft(baseDate);\r\n    result = getCachedText(adjustedLeft);\r\n    if (result == null) {\r\n        result = createTimeUnitText(adjustedLeft);\r\n        myTextCache.put(adjustedLeft, result);\r\n    }\r\n    return result;\r\n}"},
 {"id":4872, "name":"getCachedText(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter.getCachedText(java.util.Date)", "ownerclassid":"641", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter", "sourcecode":"protected TimeUnitText getCachedText(Date startDate) {\r\n    return ((TimeUnitText) (myTextCache.get(startDate)));\r\n}"},
 {"id":4873, "name":"languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "ownerclassid":"641", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter", "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    myTextCache.clear();\r\n}"},
 {"id":4874, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.DayTextFormatter.-init-()", "ownerclassid":"642", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.DayTextFormatter", "sourcecode":"DayTextFormatter() {\r\n}"},
 {"id":4875, "name":"createTimeUnitText(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.DayTextFormatter.createTimeUnitText(java.util.Date)", "ownerclassid":"642", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.DayTextFormatter", "sourcecode":"protected TimeUnitText createTimeUnitText(Date adjustedLeft) {\r\n    return new TimeUnitText(MessageFormat.format(\"{0}\", new Object[]{ \"\" + (adjustedLeft.getDate()) }));\r\n}"},
 {"id":4876, "name":"-init-(int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.FramerImpl.-init-(int)", "ownerclassid":"643", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.FramerImpl", "sourcecode":"public FramerImpl(int calendarField) {\r\n    myCalendarField = calendarField;\r\n}"},
 {"id":4877, "name":"adjustLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.FramerImpl.adjustLeft(java.util.Date)", "ownerclassid":"643", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.FramerImpl", "sourcecode":"public Date adjustLeft(Date baseDate) {\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(baseDate);\r\n    Date beforeClear = c.getTime();\r\n    clearFields(c);\r\n    // if (beforeClear.compareTo(c.getTime())==0) {\r\n    // c.add(Calendar.MILLISECOND, -1);\r\n    // }\r\n    Date result = c.getTime();\r\n    return result;\r\n}"},
 {"id":4878, "name":"adjustRight(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.FramerImpl.adjustRight(java.util.Date)", "ownerclassid":"643", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.FramerImpl", "sourcecode":"public Date adjustRight(Date baseDate) {\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(baseDate);\r\n    clearFields(c);\r\n    c.add(myCalendarField, 1);\r\n    return c.getTime();\r\n}"},
 {"id":4879, "name":"clearFields(java.util.Calendar)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.FramerImpl.clearFields(java.util.Calendar)", "ownerclassid":"643", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.FramerImpl", "sourcecode":"private void clearFields(Calendar c) {\r\n    for (int i = (myCalendarField) + 1; i <= (Calendar.MILLISECOND); i++) {\r\n        c.clear(i);\r\n    }\r\n}"},
 {"id":4880, "name":"jumpLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.FramerImpl.jumpLeft(java.util.Date)", "ownerclassid":"643", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.FramerImpl", "sourcecode":"public Date jumpLeft(Date baseDate) {\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(baseDate);\r\n    c.add(myCalendarField, (-1));\r\n    return c.getTime();\r\n}"},
 {"id":4881, "name":"main(java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.FramerImpl.main(java.lang.String[])", "ownerclassid":"643", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.FramerImpl", "sourcecode":"public static void main(String[] args) {\r\n    GanttLanguage.getInstance().setLocale(null);\r\n    Calendar c = ((Calendar) (GanttLanguage.getInstance().newCalendar()));\r\n    Date now = GregorianCalendar.getInstance().getTime();\r\n    c.setTime(now);\r\n    for (int i = (Calendar.DAY_OF_MONTH) + 1; i <= (Calendar.MILLISECOND); i++) {\r\n        c.clear(i);\r\n    }\r\n    Date result = c.getTime();\r\n    System.err.println(result);\r\n}"},
 {"id":4882, "name":"-init-(net.sourceforge.ganttproject.language.GanttLanguage)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.-init-(net.sourceforge.ganttproject.language.GanttLanguage)", "ownerclassid":"645", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "sourcecode":"/**\r\n *\r\n */\r\npublic GPTimeUnitStack(GanttLanguage i18n) {\r\n    TimeUnit atom = ourGraph.createAtomTimeUnit(\"atom\");\r\n    DAY = ourGraph.createDateFrameableTimeUnit(\"day\", atom, 1, new FramerImpl(Calendar.DATE));\r\n    DAY.setTextFormatter(new DayTextFormatter());\r\n    MONTH = ourGraph.createTimeUnitFunctionOfDate(\"month\", DAY, new FramerImpl(Calendar.MONTH));\r\n    MONTH.setTextFormatter(new MonthTextFormatter());\r\n    WEEK = ourGraph.createDateFrameableTimeUnit(\"week\", DAY, 7, new WeekFramerImpl());\r\n    MONTH_FROM_WEEKS = ourGraph.createTimeUnitFunctionOfDate(\"month_from_weeks\", WEEK, new FramerImpl(Calendar.MONTH));\r\n    WEEK.setTextFormatter(new WeekTextFormatter(((i18n.getText(\"week\")) + \" {0}\")));\r\n    WEEK_AS_BOTTOM_UNIT = ourGraph.createDateFrameableTimeUnit(\"week\", DAY, 7, new WeekFramerImpl());\r\n    WEEK_AS_BOTTOM_UNIT.setTextFormatter(new WeekTextFormatter(\"{0}\"));\r\n    YEAR = ourGraph.createTimeUnitFunctionOfDate(\"year\", DAY, new FramerImpl(Calendar.YEAR));\r\n    YEAR.setTextFormatter(new YearTextFormatter());\r\n    myPairs = new TimeUnitPair[]{ new GPTimeUnitStack.MyTimeUnitPair(WEEK, DAY), new GPTimeUnitStack.MyTimeUnitPair(WEEK, DAY), new GPTimeUnitStack.MyTimeUnitPair(MONTH, DAY), new GPTimeUnitStack.MyTimeUnitPair(MONTH, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(MONTH, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(MONTH, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(MONTH, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(YEAR, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(YEAR, WEEK_AS_BOTTOM_UNIT) };\r\n}"},
 {"id":4883, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"645", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "sourcecode":"MyTimeUnitPair(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    super(topUnit, bottomUnit, this);\r\n}"},
 {"id":4884, "name":"createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"645", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "sourcecode":"public TimeFrame createTimeFrame(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n    // topUnit = ((TimeUnitFunctionOfDate)topUnit).createTimeUnit(baseDate);\r\n    // }\r\n    return new TimeFrameImpl(baseDate, topUnit, bottomUnit);\r\n}"},
 {"id":4885, "name":"getDefaultTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.getDefaultTimeUnit()", "ownerclassid":"645", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "sourcecode":"public TimeUnit getDefaultTimeUnit() {\r\n    return DAY;\r\n}"},
 {"id":4886, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.getName()", "ownerclassid":"645", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "sourcecode":"public String getName() {\r\n    return \"default\";\r\n}"},
 {"id":4887, "name":"getTimeUnitPairs()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.getTimeUnitPairs()", "ownerclassid":"645", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "sourcecode":"public TimeUnitPair[] getTimeUnitPairs() {\r\n    return myPairs;\r\n}"},
 {"id":4888, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack$MyTimeUnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"644", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack$MyTimeUnitPair", "sourcecode":"MyTimeUnitPair(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    super(topUnit, bottomUnit, this);\r\n}"},
 {"id":4889, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar.-init-()", "ownerclassid":"646", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "sourcecode":"/**\r\n * From super\r\n */\r\npublic GregorianCalendar() {\r\n    super();\r\n}"},
 {"id":4890, "name":"-init-(int,int,int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar.-init-(int,int,int)", "ownerclassid":"646", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "sourcecode":"/**\r\n * From super\r\n *\r\n * @param year\r\n * \t\t\r\n * @param month\r\n * \t\t\r\n * @param date\r\n * \t\t\r\n */\r\npublic GregorianCalendar(int year, int month, int date) {\r\n    super(year, month, date);\r\n}"},
 {"id":4891, "name":"-init-(int,int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar.-init-(int,int,int,int,int)", "ownerclassid":"646", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "sourcecode":"/**\r\n * From super\r\n *\r\n * @param year\r\n * \t\t\r\n * @param month\r\n * \t\t\r\n * @param date\r\n * \t\t\r\n * @param hour\r\n * \t\t\r\n * @param minute\r\n * \t\t\r\n */\r\npublic GregorianCalendar(int year, int month, int date, int hour, int minute) {\r\n    super(year, month, date, hour, minute);\r\n}"},
 {"id":4892, "name":"-init-(int,int,int,int,int,int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar.-init-(int,int,int,int,int,int)", "ownerclassid":"646", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "sourcecode":"/**\r\n * From super\r\n *\r\n * @param year\r\n * \t\t\r\n * @param month\r\n * \t\t\r\n * @param date\r\n * \t\t\r\n * @param hour\r\n * \t\t\r\n * @param minute\r\n * \t\t\r\n * @param second\r\n * \t\t\r\n */\r\npublic GregorianCalendar(int year, int month, int date, int hour, int minute, int second) {\r\n    super(year, month, date, hour, minute, second);\r\n}"},
 {"id":4893, "name":"-init-(java.util.Locale)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar.-init-(java.util.Locale)", "ownerclassid":"646", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "sourcecode":"/**\r\n * From super\r\n *\r\n * @param aLocale\r\n * \t\t\r\n */\r\npublic GregorianCalendar(Locale aLocale) {\r\n    super(aLocale);\r\n}"},
 {"id":4894, "name":"-init-(java.util.TimeZone)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar.-init-(java.util.TimeZone)", "ownerclassid":"646", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "sourcecode":"/**\r\n * From super\r\n *\r\n * @param zone\r\n * \t\t\r\n */\r\npublic GregorianCalendar(TimeZone zone) {\r\n    super(zone);\r\n}"},
 {"id":4895, "name":"-init-(java.util.TimeZone,java.util.Locale)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar.-init-(java.util.TimeZone,java.util.Locale)", "ownerclassid":"646", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "sourcecode":"/**\r\n * From super\r\n *\r\n * @param zone\r\n * \t\t\r\n * @param aLocale\r\n * \t\t\r\n */\r\npublic GregorianCalendar(TimeZone zone, Locale aLocale) {\r\n    super(zone, aLocale);\r\n}"},
 {"id":4896, "name":"add(int,int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar.add(int,int)", "ownerclassid":"646", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "sourcecode":"/**\r\n * Overrides the original, to solve the october duplicated day bug\r\n */\r\npublic void add(int field, int value) {\r\n    if (field == (Calendar.DATE))\r\n        this.add(Calendar.HOUR, (value * 24));\r\n    else\r\n        super.add(field, value);\r\n\r\n}"},
 {"id":4897, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack.-init-()", "ownerclassid":"647", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack", "sourcecode":"public GregorianTimeUnitStack() {\r\n}"},
 {"id":4898, "name":"createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"647", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack", "sourcecode":"public TimeFrame createTimeFrame(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n        topUnit = ((TimeUnitFunctionOfDate) (topUnit)).createTimeUnit(baseDate);\r\n    }\r\n    return new TimeFrameImpl(baseDate, topUnit, bottomUnit);\r\n}"},
 {"id":4899, "name":"getDefaultTimeUnit()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack.getDefaultTimeUnit()", "ownerclassid":"647", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack", "sourcecode":"public TimeUnit getDefaultTimeUnit() {\r\n    return GregorianTimeUnitStack.DAY;\r\n}"},
 {"id":4900, "name":"getName()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack.getName()", "ownerclassid":"647", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack", "sourcecode":"public String getName() {\r\n    return null;\r\n}"},
 {"id":4901, "name":"getTimeUnitPairs()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack.getTimeUnitPairs()", "ownerclassid":"647", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack", "sourcecode":"public TimeUnitPair[] getTimeUnitPairs() {\r\n    return null;\r\n}"},
 {"id":4902, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter.-init-()", "ownerclassid":"648", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter", "sourcecode":"public MonthTextFormatter() {\r\n    initFormats();\r\n}"},
 {"id":4903, "name":"createTimeUnitText(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter.createTimeUnitText(java.util.Date)", "ownerclassid":"648", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter", "sourcecode":"protected TimeUnitText createTimeUnitText(Date adjustedLeft) {\r\n    TimeUnitText result;\r\n    String longText = MessageFormat.format(\"{0}\", new Object[]{ myLongFormat.format(adjustedLeft) });\r\n    String mediumText = MessageFormat.format(\"{0}\", new Object[]{ myMediumFormat.format(adjustedLeft) });\r\n    String shortText = MessageFormat.format(\"{0}\", new Object[]{ myShortFormat.format(adjustedLeft) });\r\n    result = new TimeUnitText(longText, mediumText, shortText);\r\n    return result;\r\n}"},
 {"id":4904, "name":"initFormats()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter.initFormats()", "ownerclassid":"648", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter", "sourcecode":"private void initFormats() {\r\n    myLongFormat = GanttLanguage.getInstance().createDateFormat(\"MMMM yyyy\");\r\n    myMediumFormat = GanttLanguage.getInstance().createDateFormat(\"MMM - yy\");\r\n    myShortFormat = GanttLanguage.getInstance().createDateFormat(\"MM - yy\");\r\n}"},
 {"id":4905, "name":"languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "ownerclassid":"648", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter", "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    super.languageChanged(event);\r\n    initFormats();\r\n}"},
 {"id":4906, "name":"-init-(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.-init-(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"TimeFrameImpl(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // if (!topUnit.isConstructedFrom(bottomUnit)) {\r\n    // throw new RuntimeException(\"Top unit=\"+topUnit+\" is not constructed\r\n    // from bottom unit=\"+bottomUnit);\r\n    // }\r\n    if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n        topUnit = ((TimeUnitFunctionOfDate) (topUnit)).createTimeUnit(baseDate);\r\n    }\r\n    myBaseDate = baseDate;\r\n    myHighestFrameable = calculateHighestFrameableUnit(topUnit, bottomUnit);\r\n    myLowestFrameable = calculateLowestFrameableUnit(topUnit, bottomUnit);\r\n    // if (myHighestFrameable!=topUnit || myLowestFrameable!=bottomUnit) {\r\n    // throw new RuntimeException(\"Current implementation requires all units\r\n    // to be frameable. myHighestFrameable=\"+myHighestFrameable+\"\r\n    // myLowestFrameable=\"+myLowestFrameable);\r\n    // }\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myCalendar = CalendarFactory.newCalendar();\r\n    myCalendar.setTime(myBaseDate);\r\n    if ((myLowestFrameable) == null) {\r\n        throw new RuntimeException(\"Failed to find any time frameable unit :(\");\r\n    }\r\n    myStartDate = myLowestFrameable.adjustLeft(myBaseDate);\r\n    if (myStartDate.after(myBaseDate)) {\r\n        throw new IllegalStateException(\"Start date is after base date\");\r\n    }\r\n    // System.err.println(\"TimeFrame.init: myStartDate=\"+myStartDate+\"\r\n    // myBaseDate=\"+myBaseDate);\r\n    // myEndDate = calculateEndDate();\r\n    // myNextFrameStartDate = shiftDate(myBaseDate, myTopUnit, 1);\r\n}"},
 {"id":4907, "name":"-init-(int,int,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.-init-(int,int,java.util.Date)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public UnitInfo(int myTruncatedCount, int myRoundedCount, Date lastDate) {\r\n    this.myTruncatedCount = myTruncatedCount;\r\n    this.myRoundedCount = myRoundedCount;\r\n    this.lastDate = lastDate;\r\n}"},
 {"id":4908, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.-init-(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public LineHeader(TimeUnit myUnit) {\r\n    this.myUnit = myUnit;\r\n}"},
 {"id":4909, "name":"-init-(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.-init-(java.util.Date,java.util.Date)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public LineItem(Date myStartDate, Date myEndDate) {\r\n    this.myStartDate = myStartDate;\r\n    this.myEndDate = myEndDate;\r\n}"},
 {"id":4910, "name":"calculateEndDate()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateEndDate()", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private Date calculateEndDate() {\r\n    // int countFrameable =\r\n    // myTopUnit.getAtomCount((TimeUnit)myHighestFrameable);\r\n    Date date = myTopUnit.adjustRight(myBaseDate);\r\n    if (date.before(myStartDate)) {\r\n        throw new IllegalStateException((((((\"End date=\" + date) + \" start=\") + (myStartDate)) + \" base=\") + (myBaseDate)));\r\n    }\r\n    // for (int i=0; i<countFrameable; i++) {\r\n    // date = myHighestFrameable.adjustRight(date);\r\n    // }\r\n    return date;\r\n}"},
 {"id":4911, "name":"calculateHighestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateHighestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private DateFrameable calculateHighestFrameableUnit(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // DateFrameable highestFrameable = null;\r\n    // for (TimeUnit timeUnit = topUnit; timeUnit!=null; timeUnit =\r\n    // timeUnit.getDirectAtomUnit()) {\r\n    // System.err.println(\"next time unit=\"+timeUnit);\r\n    // if (timeUnit instanceof DateFrameable) {\r\n    // highestFrameable = (DateFrameable)timeUnit;\r\n    // break;\r\n    // }\r\n    // if (timeUnit==bottomUnit) {\r\n    // break;\r\n    // }\r\n    // }\r\n    // return highestFrameable;\r\n    return topUnit;\r\n}"},
 {"id":4912, "name":"calculateLines(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateLines(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private TimeFrameImpl.LineHeader calculateLines(TimeFrameImpl.LineHeader lastHeader) {\r\n    TimeUnit curUnit = (lastHeader == null) ? myTopUnit : lastHeader.myUnit.getDirectAtomUnit();\r\n    TimeFrameImpl.LineHeader curHeader = createHeader(curUnit);\r\n    fillLine(lastHeader, curHeader);\r\n    if (lastHeader != null) {\r\n        lastHeader.append(curHeader);\r\n    }\r\n    if (curUnit != (myBottomUnit)) {\r\n        calculateLines(curHeader);\r\n    }\r\n    return curHeader;\r\n}"},
 {"id":4913, "name":"calculateLowestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateLowestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private DateFrameable calculateLowestFrameableUnit(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // DateFrameable lowestFrameable = null;\r\n    // for (TimeUnit timeUnit = topUnit; timeUnit!=null; timeUnit =\r\n    // timeUnit.getDirectAtomUnit()) {\r\n    // if (timeUnit instanceof DateFrameable) {\r\n    // lowestFrameable = (DateFrameable)timeUnit;\r\n    // }\r\n    // if (bottomUnit.equals(timeUnit)) {\r\n    // break;\r\n    // }\r\n    // }\r\n    // return lowestFrameable;\r\n    return bottomUnit;\r\n}"},
 {"id":4914, "name":"createHeader(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.createHeader(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private TimeFrameImpl.LineHeader createHeader(TimeUnit unit) {\r\n    return new TimeFrameImpl.LineHeader(unit);\r\n}"},
 {"id":4915, "name":"createLineItem(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.createLineItem(java.util.Date,java.util.Date)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private TimeFrameImpl.LineItem createLineItem(Date startDate, Date endDate) {\r\n    return new TimeFrameImpl.LineItem(startDate, endDate);\r\n}"},
 {"id":4916, "name":"fillLine(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.fillLine(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private void fillLine(TimeFrameImpl.LineHeader higherHeader, TimeFrameImpl.LineHeader header) {\r\n    if (higherHeader == null) {\r\n        Date startDate = myStartDate;\r\n        Date endDate = ((DateFrameable) (myTopUnit)).adjustRight(myBaseDate);\r\n        // System.err.println(\"filling line=\"+header+\" endDate=\"+endDate);\r\n        TimeFrameImpl.LineItem item = createLineItem(startDate, endDate);\r\n        header.myFirstItem = item;\r\n    } else {\r\n        // System.err.println(\"filling line=\"+header);\r\n        for (TimeFrameImpl.LineItem higherItem = higherHeader.myFirstItem; higherItem != null; higherItem = higherItem.myNextItem) {\r\n            int unitCount = getUnitCount(higherHeader, header, higherItem);\r\n            Date curStartDate = higherItem.myStartDate;\r\n            TimeFrameImpl.LineItem curItem = null;\r\n            // System.err.println(\"unit count=\"+unitCount+\"\r\n            // startDate=\"+curStartDate);\r\n            for (int i = 0; (i < unitCount) && ((curStartDate.compareTo(higherItem.myEndDate)) < 0); i++) {\r\n                Date nextEndDate = ((DateFrameable) (header.myUnit)).adjustRight(curStartDate);\r\n                TimeFrameImpl.LineItem newItem = createLineItem(curStartDate, nextEndDate);\r\n                if (curItem == null) {\r\n                    header.myFirstItem = newItem;\r\n                } else {\r\n                    curItem.myNextItem = newItem;\r\n                }\r\n                curItem = newItem;\r\n                curStartDate = nextEndDate;\r\n            }\r\n            // System.err.println(\"result: \"+header.fullDump());\r\n        }\r\n    }\r\n}"},
 {"id":4917, "name":"getBottomUnit()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getBottomUnit()", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public TimeUnit getBottomUnit() {\r\n    return myBottomUnit;\r\n}"},
 {"id":4918, "name":"getFinishDate()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getFinishDate()", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public Date getFinishDate() {\r\n    if ((myEndDate) == null) {\r\n        myEndDate = calculateEndDate();\r\n        // System.err.println(\"getFinishDate(): startDate=\"+myStartDate+\"\r\n        // finish=\"+myEndDate);\r\n    }\r\n    return myEndDate;\r\n}"},
 {"id":4919, "name":"getLineHeader()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getLineHeader()", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private TimeFrameImpl.LineHeader getLineHeader() {\r\n    if ((myLineHeader) == null) {\r\n        myLineHeader = calculateLines(null);\r\n    }\r\n    return myLineHeader;\r\n}"},
 {"id":4920, "name":"getLineHeader(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getLineHeader(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private TimeFrameImpl.LineHeader getLineHeader(TimeUnit timeUnit) {\r\n    TimeFrameImpl.LineHeader result = getLineHeader();\r\n    for (; result != null; result = result.next()) {\r\n        if ((result.myUnit) == timeUnit) {\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":4921, "name":"getStartDate()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getStartDate()", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"// public int _getUnitCount(TimeUnit unit) {\r\n// if (unit.isConstructedFrom((TimeUnit)myLowestFrameable)) {\r\n// UnitInfo info = calculateInfo(myHighestFrameable, myEndDate);\r\n// if (unit==myHighestFrameable) {\r\n// return info.myRoundedCount;\r\n// }\r\n// else if (unit.isConstructedFrom((TimeUnit)myHighestFrameable)) {\r\n// int atomCount = unit.getAtomCount((TimeUnit)myHighestFrameable);\r\n// return (info.myRoundedCount/atomCount) +\r\n// (info.myRoundedCount%atomCount==0 ? 0 : 1);\r\n// }\r\n// else {\r\n// int atomCount1 = ((TimeUnit)myHighestFrameable).getAtomCount(unit);\r\n// int count = info.myTruncatedCount*atomCount1;\r\n// if (info.myRoundedCount>info.myTruncatedCount) {\r\n// UnitInfo lowestInfo = calculateInfo(myLowestFrameable, info.lastDate);\r\n// int atomCount2 = unit.getAtomCount((TimeUnit)myLowestFrameable);\r\n// count += lowestInfo.myRoundedCount/atomCount2 +\r\n// (lowestInfo.myRoundedCount%atomCount2==0 ? 0 : 1);\r\n// }\r\n// return count;\r\n// }\r\n// }\r\n// else {\r\n// UnitInfo lowestInfo = calculateInfo(myLowestFrameable, myEndDate);\r\n// int atomCount = ((TimeUnit)myLowestFrameable).getAtomCount(unit);\r\n// return atomCount*lowestInfo.myRoundedCount;\r\n// }\r\n// }\r\n// \r\n// private UnitInfo calculateInfo(DateFrameable frameable, Date date) {\r\n// Date lastDate = date;\r\n// int count = 0;\r\n// for (;date.compareTo(myStartDate)>0; count++) {\r\n// lastDate = date;\r\n// date = frameable.jumpLeft(date);\r\n// }\r\n// int truncatedCount = date.compareTo(myStartDate)<0 ? count-1 : count;\r\n// return new UnitInfo(truncatedCount, count, lastDate);\r\n// }\r\n// private Date shiftDate(Date currentDate, TimeUnit timeUnit, int\r\n// unitCount) {\r\n// Calendar c = (Calendar) myCalendar.clone();\r\n// c.setTime(currentDate);\r\n// int calendarField = getCalendarField(timeUnit);\r\n// int currentValue = c.get(calendarField);\r\n// clearFields(c, timeUnit);\r\n// c.add(calendarField, unitCount);\r\n// return c.getTime();\r\n// }\r\n// \r\n// private void clearFields(Calendar c, TimeUnit topUnit) {\r\n// for (TimeUnit currentUnit = topUnit; currentUnit!=null; currentUnit =\r\n// currentUnit.getDirectAtomUnit()) {\r\n// int calendarField = getCalendarField(currentUnit);\r\n// c.clear(calendarField);\r\n// c.getTime();\r\n// }\r\n// }\r\n// \r\n// private int getCalendarField(TimeUnit timeUnit) {\r\n// Integer field = (Integer) ourUnit2field.get(timeUnit);\r\n// return field.intValue();\r\n// }\r\npublic Date getStartDate() {\r\n    return myStartDate;\r\n}"},
 {"id":4922, "name":"getTopUnit()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getTopUnit()", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public TimeUnit getTopUnit() {\r\n    return myTopUnit;\r\n}"},
 {"id":4923, "name":"getUnitCount(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitCount(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public int getUnitCount(TimeUnit unit) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unit);\r\n    if (lineHeader == null) {\r\n        lineHeader = new TimeFrameImpl.LineHeader(unit);\r\n        // return getUnitCount(getLineHeader(), lineHeader,\r\n        // getLineHeader().myFirstItem);\r\n        fillLine(getLineHeader(), lineHeader);\r\n        return lineHeader.getItemCount();\r\n    }\r\n    int result = (lineHeader == null) ? -1 : lineHeader.getItemCount();\r\n    if (result == (-1)) {\r\n        throw new RuntimeException(((\"There is not time unit=\" + unit) + \" in this time frame\"));\r\n    }\r\n    return result;\r\n}"},
 {"id":4924, "name":"getUnitCount(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitCount(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private int getUnitCount(TimeFrameImpl.LineHeader higherHeader, TimeFrameImpl.LineHeader header, TimeFrameImpl.LineItem higherItem) {\r\n    TimeUnit higherUnit = ((higherHeader.myUnit) instanceof TimeUnitFunctionOfDate) ? ((TimeUnitFunctionOfDate) (higherHeader.myUnit)).createTimeUnit(higherItem.myStartDate) : higherHeader.myUnit;\r\n    TimeUnit lowerUnit = header.myUnit;\r\n    int result = higherUnit.getAtomCount(lowerUnit);\r\n    return result;\r\n}"},
 {"id":4925, "name":"getUnitFinish(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitFinish(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public Date getUnitFinish(TimeUnit unitLine, int position) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unitLine);\r\n    TimeFrameImpl.LineItem lineItem = (lineHeader == null) ? null : lineHeader.getLineItem(position);\r\n    Date result = (lineItem == null) ? null : lineItem.myEndDate;\r\n    return result;\r\n}"},
 {"id":4926, "name":"getUnitStart(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitStart(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public Date getUnitStart(TimeUnit unitLine, int position) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unitLine);\r\n    TimeFrameImpl.LineItem lineItem = (lineHeader == null) ? null : lineHeader.getLineItem(position);\r\n    Date result = (lineItem == null) ? null : lineItem.myStartDate;\r\n    return result;\r\n}"},
 {"id":4927, "name":"getUnitText(net.sourceforge.ganttproject.time.TimeUnit,int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,int)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"// public int getUnitCount(TimeUnit unitLine) {\r\n// int counter = 0;\r\n// for (Date nextUnitStart = shiftDate(myStartDate, unitLine, counter);\r\n// nextUnitStart.before(myNextFrameStartDate);\r\n// nextUnitStart = shiftDate(myStartDate, unitLine, ++counter)) {\r\n// //System.err.println(\"myStart=\"+myStartDate+\"\r\n// nextFrame=\"+myNextFrameStartDate+\" nextUnitStart=\"+nextUnitStart);\r\n// }\r\n// return counter;\r\n// }\r\npublic TimeUnitText getUnitText(TimeUnit unitLine, int position) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unitLine);\r\n    TimeFrameImpl.LineItem lineItem = (lineHeader == null) ? null : lineHeader.getLineItem(position);\r\n    Date startDate = (lineItem == null) ? null : lineItem.myStartDate;\r\n    TimeUnitText result = (startDate == null) ? null : getUnitText(unitLine, startDate);\r\n    // if (\"31\".equals(result)) {\r\n    // System.err.println(\"unit line=\"+unitLine+\" position=\"+position);\r\n    // }\r\n    return result;\r\n}"},
 {"id":4928, "name":"getUnitText(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"private TimeUnitText getUnitText(TimeUnit unitLine, Date startDate) {\r\n    String result = null;\r\n    return unitLine.format(startDate);\r\n    // if (unitLine.equals(GregorianTimeUnitStack.DAY)) {\r\n    // result = \"\"+startDate.getDate();\r\n    // }\r\n    // return result;\r\n}"},
 {"id":4929, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.toString()", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public String toString() {\r\n    return ((((((\"Time frame start=\" + (getStartDate())) + \" end=\") + (getFinishDate())) + \"\n top unit=\") + (getTopUnit())) + \"\n bottom unit=\") + (getBottomUnit());\r\n}"},
 {"id":4930, "name":"trimLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.trimLeft(java.util.Date)", "ownerclassid":"652", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "sourcecode":"public void trimLeft(Date exactDate) {\r\n    myStartDate = exactDate;\r\n    myLineHeader = null;\r\n}"},
 {"id":4931, "name":"-init-(net.sourceforge.ganttproject.time.TimeUnit)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.-init-(net.sourceforge.ganttproject.time.TimeUnit)", "ownerclassid":"649", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "sourcecode":"public LineHeader(TimeUnit myUnit) {\r\n    this.myUnit = myUnit;\r\n}"},
 {"id":4932, "name":"append(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.append(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "ownerclassid":"649", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "sourcecode":"void append(TimeFrameImpl.LineHeader next) {\r\n    myNextHeader = next;\r\n}"},
 {"id":4933, "name":"fullDump()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.fullDump()", "ownerclassid":"649", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "sourcecode":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String fullDump() {\r\n    StringBuffer result = new StringBuffer(toString());\r\n    for (int i = 0; i < (getItemCount()); i++) {\r\n        TimeFrameImpl.LineItem next = getLineItem(i);\r\n        result.append((\"\n\" + next));\r\n    }\r\n    return result.toString();\r\n}"},
 {"id":4934, "name":"getItemCount()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.getItemCount()", "ownerclassid":"649", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "sourcecode":"public int getItemCount() {\r\n    if ((myItemCount) == (-1)) {\r\n        myItemCount = 0;\r\n        for (TimeFrameImpl.LineItem item = myFirstItem; item != null; item = item.myNextItem) {\r\n            (myItemCount)++;\r\n        }\r\n    }\r\n    return myItemCount;\r\n}"},
 {"id":4935, "name":"getLineItem(int)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.getLineItem(int)", "ownerclassid":"649", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "sourcecode":"TimeFrameImpl.LineItem getLineItem(int position) {\r\n    TimeFrameImpl.LineItem result = myFirstItem;\r\n    for (; (result != null) && ((position--) > 0); result = result.myNextItem) {\r\n        // position--;\r\n    }\r\n    return result;\r\n}"},
 {"id":4936, "name":"next()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.next()", "ownerclassid":"649", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "sourcecode":"TimeFrameImpl.LineHeader next() {\r\n    return myNextHeader;\r\n}"},
 {"id":4937, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.toString()", "ownerclassid":"649", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "sourcecode":"public String toString() {\r\n    return myUnit.toString();\r\n}"},
 {"id":4938, "name":"-init-(java.util.Date,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem.-init-(java.util.Date,java.util.Date)", "ownerclassid":"650", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem", "sourcecode":"public LineItem(Date myStartDate, Date myEndDate) {\r\n    this.myStartDate = myStartDate;\r\n    this.myEndDate = myEndDate;\r\n}"},
 {"id":4939, "name":"toString()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem.toString()", "ownerclassid":"650", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem", "sourcecode":"public String toString() {\r\n    return ((myStartDate.toString()) + \" - \") + (myEndDate.toString());\r\n}"},
 {"id":4940, "name":"-init-(int,int,java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$UnitInfo.-init-(int,int,java.util.Date)", "ownerclassid":"651", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$UnitInfo", "sourcecode":"public UnitInfo(int myTruncatedCount, int myRoundedCount, Date lastDate) {\r\n    this.myTruncatedCount = myTruncatedCount;\r\n    this.myRoundedCount = myRoundedCount;\r\n    this.lastDate = lastDate;\r\n}"},
 {"id":4941, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.WeekFramerImpl.-init-()", "ownerclassid":"653", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.WeekFramerImpl", "sourcecode":"WeekFramerImpl() {\r\n}"},
 {"id":4942, "name":"adjustLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.WeekFramerImpl.adjustLeft(java.util.Date)", "ownerclassid":"653", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.WeekFramerImpl", "sourcecode":"public Date adjustLeft(Date baseDate) {\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(myDayFramer.adjustLeft(baseDate));\r\n    while ((c.get(Calendar.DAY_OF_WEEK)) != (c.getFirstDayOfWeek())) {\r\n        c.setTime(myDayFramer.adjustLeft(myDayFramer.jumpLeft(c.getTime())));\r\n    } \r\n    return c.getTime();\r\n}"},
 {"id":4943, "name":"adjustRight(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.WeekFramerImpl.adjustRight(java.util.Date)", "ownerclassid":"653", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.WeekFramerImpl", "sourcecode":"public Date adjustRight(Date baseDate) {\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    do {\r\n        baseDate = myDayFramer.adjustRight(baseDate);\r\n        c.setTime(baseDate);\r\n    } while ((c.get(Calendar.DAY_OF_WEEK)) != (c.getFirstDayOfWeek()) );\r\n    return c.getTime();\r\n}"},
 {"id":4944, "name":"jumpLeft(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.WeekFramerImpl.jumpLeft(java.util.Date)", "ownerclassid":"653", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.WeekFramerImpl", "sourcecode":"public Date jumpLeft(Date baseDate) {\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(myDayFramer.adjustLeft(baseDate));\r\n    int dayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n    do {\r\n        baseDate = myDayFramer.jumpLeft(baseDate);\r\n        c.setTime(baseDate);\r\n    } while ((c.get(Calendar.DAY_OF_WEEK)) != dayOfWeek );\r\n    return c.getTime();\r\n}"},
 {"id":4945, "name":"-init-(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.WeekTextFormatter.-init-(java.lang.String)", "ownerclassid":"654", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.WeekTextFormatter", "sourcecode":"WeekTextFormatter(String formatString) {\r\n    myCalendar = CalendarFactory.newCalendar();\r\n}"},
 {"id":4946, "name":"createTimeUnitText(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.WeekTextFormatter.createTimeUnitText(java.util.Date)", "ownerclassid":"654", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.WeekTextFormatter", "sourcecode":"protected TimeUnitText createTimeUnitText(Date startDate) {\r\n    myCalendar.setTime(startDate);\r\n    myCalendar.setMinimalDaysInFirstWeek(4);\r\n    Integer weekNo = new Integer(myCalendar.get(Calendar.WEEK_OF_YEAR));\r\n    String shortText = MessageFormat.format(\"{0}\", new Object[]{ weekNo });\r\n    String middleText = MessageFormat.format(((GanttLanguage.getInstance().getText(\"week\")) + \" {0}\"), new Object[]{ weekNo });\r\n    return new TimeUnitText(middleText, middleText, shortText);\r\n}"},
 {"id":4947, "name":"languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.WeekTextFormatter.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "ownerclassid":"654", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.WeekTextFormatter", "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    super.languageChanged(event);\r\n    myCalendar = CalendarFactory.newCalendar();\r\n}"},
 {"id":4948, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.YearTextFormatter.-init-()", "ownerclassid":"655", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.YearTextFormatter", "sourcecode":"YearTextFormatter() {\r\n    myCalendar = CalendarFactory.newCalendar();\r\n}"},
 {"id":4949, "name":"createTimeUnitText(java.util.Date)", "fullmethod":"net.sourceforge.ganttproject.time.gregorian.YearTextFormatter.createTimeUnitText(java.util.Date)", "ownerclassid":"655", "ownerclassname":"net.sourceforge.ganttproject.time.gregorian.YearTextFormatter", "sourcecode":"protected TimeUnitText createTimeUnitText(Date startDate) {\r\n    myCalendar.setTime(startDate);\r\n    // Integer yearNo = new Integer(myCalendar.get(Calendar.YEAR));\r\n    // String shortText = MessageFormat.format(\"{0}\", new Object[]\r\n    // {yearNo});\r\n    String shortText = MessageFormat.format(\"{0,date,yyyy}\", new Object[]{ myCalendar.getTime() });\r\n    return new TimeUnitText(shortText);\r\n}"},
 {"id":4950, "name":"undoOrRedoHappened()", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoListener.undoOrRedoHappened()", "ownerclassid":"656", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoListener", "sourcecode":"void undoOrRedoHappened();"},
 {"id":4951, "name":"addUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.addUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"void addUndoableEditListener(GPUndoListener listener);"},
 {"id":4952, "name":"canRedo()", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.canRedo()", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"boolean canRedo();"},
 {"id":4953, "name":"canUndo()", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.canUndo()", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"boolean canUndo();"},
 {"id":4954, "name":"die()", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.die()", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"void die();"},
 {"id":4955, "name":"getRedoPresentationName()", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.getRedoPresentationName()", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"String getRedoPresentationName();"},
 {"id":4956, "name":"getUndoPresentationName()", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.getUndoPresentationName()", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"String getUndoPresentationName();"},
 {"id":4957, "name":"redo()", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.redo()", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"void redo() throws CannotRedoException;"},
 {"id":4958, "name":"removeUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.removeUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"void removeUndoableEditListener(GPUndoListener listener);"},
 {"id":4959, "name":"undo()", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.undo()", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"void undo() throws CannotUndoException;"},
 {"id":4960, "name":"undoableEdit(java.lang.String,java.lang.Runnable)", "fullmethod":"net.sourceforge.ganttproject.undo.GPUndoManager.undoableEdit(java.lang.String,java.lang.Runnable)", "ownerclassid":"657", "ownerclassname":"net.sourceforge.ganttproject.undo.GPUndoManager", "sourcecode":"void undoableEdit(String localizedName, Runnable runnableEdit);"},
 {"id":4961, "name":"-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.parser.ParserFactory,net.sourceforge.ganttproject.document.DocumentManager)", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.parser.ParserFactory,net.sourceforge.ganttproject.document.DocumentManager)", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public UndoManagerImpl(IGanttProject project, ParserFactory parserFactory, DocumentManager documentManager) {\r\n    myProject = project;\r\n    myParserFactory = parserFactory;\r\n    myDocumentManager = documentManager;\r\n    mySwingUndoManager = new UndoManager();\r\n    myUndoEventDispatcher = new UndoableEditSupport();\r\n}"},
 {"id":4962, "name":"addUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.addUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public void addUndoableEditListener(GPUndoListener listener) {\r\n    myUndoEventDispatcher.addUndoableEditListener(listener);\r\n}"},
 {"id":4963, "name":"canRedo()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.canRedo()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public boolean canRedo() {\r\n    return mySwingUndoManager.canRedo();\r\n}"},
 {"id":4964, "name":"canUndo()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.canUndo()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public boolean canUndo() {\r\n    return mySwingUndoManager.canUndo();\r\n}"},
 {"id":4965, "name":"die()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.die()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public void die() {\r\n    if ((swingEditImpl) != null)\r\n        swingEditImpl.die();\r\n\r\n    if ((mySwingUndoManager) != null)\r\n        mySwingUndoManager.discardAllEdits();\r\n\r\n}"},
 {"id":4966, "name":"fireUndoOrRedoHappened()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.fireUndoOrRedoHappened()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"private void fireUndoOrRedoHappened() {\r\n    UndoableEditListener[] listeners = myUndoEventDispatcher.getUndoableEditListeners();\r\n    for (int i = 0; i < (listeners.length); i++) {\r\n        ((GPUndoListener) (listeners[i])).undoOrRedoHappened();\r\n    }\r\n}"},
 {"id":4967, "name":"fireUndoableEditHappened(net.sourceforge.ganttproject.undo.UndoableEditImpl)", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.fireUndoableEditHappened(net.sourceforge.ganttproject.undo.UndoableEditImpl)", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"private void fireUndoableEditHappened(UndoableEditImpl swingEditImpl) {\r\n    myUndoEventDispatcher.postEdit(swingEditImpl);\r\n}"},
 {"id":4968, "name":"getDocumentManager()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.getDocumentManager()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"DocumentManager getDocumentManager() {\r\n    return myDocumentManager;\r\n}"},
 {"id":4969, "name":"getParserFactory()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.getParserFactory()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"protected ParserFactory getParserFactory() {\r\n    return myParserFactory;\r\n}"},
 {"id":4970, "name":"getProject()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.getProject()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"IGanttProject getProject() {\r\n    return myProject;\r\n}"},
 {"id":4971, "name":"getRedoPresentationName()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.getRedoPresentationName()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public String getRedoPresentationName() {\r\n    return mySwingUndoManager.getRedoPresentationName();\r\n}"},
 {"id":4972, "name":"getUndoPresentationName()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.getUndoPresentationName()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public String getUndoPresentationName() {\r\n    return mySwingUndoManager.getUndoPresentationName();\r\n}"},
 {"id":4973, "name":"redo()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.redo()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public void redo() throws CannotRedoException {\r\n    mySwingUndoManager.redo();\r\n    fireUndoOrRedoHappened();\r\n}"},
 {"id":4974, "name":"removeUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.removeUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public void removeUndoableEditListener(GPUndoListener listener) {\r\n    myUndoEventDispatcher.removeUndoableEditListener(listener);\r\n}"},
 {"id":4975, "name":"undo()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.undo()", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public void undo() throws CannotUndoException {\r\n    mySwingUndoManager.undo();\r\n    fireUndoOrRedoHappened();\r\n}"},
 {"id":4976, "name":"undoableEdit(java.lang.String,java.lang.Runnable)", "fullmethod":"net.sourceforge.ganttproject.undo.UndoManagerImpl.undoableEdit(java.lang.String,java.lang.Runnable)", "ownerclassid":"658", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "sourcecode":"public void undoableEdit(String localizedName, Runnable editImpl) {\r\n    try {\r\n        swingEditImpl = new UndoableEditImpl(localizedName, editImpl, this);\r\n        mySwingUndoManager.addEdit(swingEditImpl);\r\n        fireUndoableEditHappened(swingEditImpl);\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n}"},
 {"id":4977, "name":"-init-(java.lang.String,java.lang.Runnable,net.sourceforge.ganttproject.undo.UndoManagerImpl)", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.-init-(java.lang.String,java.lang.Runnable,net.sourceforge.ganttproject.undo.UndoManagerImpl)", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"UndoableEditImpl(String localizedName, Runnable editImpl, UndoManagerImpl manager) throws IOException {\r\n    // System.out.println (\"UndoableEditImpl : \" + localizedName);\r\n    myManager = manager;\r\n    myPresentationName = localizedName;\r\n    myEditImpl = editImpl;\r\n    myDocumentBefore = saveFile();\r\n    editImpl.run();\r\n    myDocumentAfter = saveFile();\r\n}"},
 {"id":4978, "name":"canRedo()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.canRedo()", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"public boolean canRedo() {\r\n    return myDocumentAfter.canRead();\r\n}"},
 {"id":4979, "name":"canUndo()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.canUndo()", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"public boolean canUndo() {\r\n    return myDocumentBefore.canRead();\r\n}"},
 {"id":4980, "name":"createTemporaryFile()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.createTemporaryFile()", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"File createTemporaryFile() throws IOException {\r\n    return File.createTempFile(\"_GanttProject_qSave\", \".gan\");\r\n}"},
 {"id":4981, "name":"getPresentationName()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.getPresentationName()", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"public String getPresentationName() {\r\n    return myPresentationName;\r\n}"},
 {"id":4982, "name":"redo()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.redo()", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"public void redo() throws CannotRedoException {\r\n    try {\r\n        restoreDocument(myDocumentAfter);\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        throw new CannotRedoException();\r\n    }\r\n}"},
 {"id":4983, "name":"restoreDocument(net.sourceforge.ganttproject.document.Document)", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.restoreDocument(net.sourceforge.ganttproject.document.Document)", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"private void restoreDocument(Document document) throws IOException {\r\n    Document projectDocument = myManager.getProject().getDocument();\r\n    myManager.getProject().close();\r\n    document.read();\r\n    myManager.getProject().setDocument(projectDocument);\r\n}"},
 {"id":4984, "name":"saveFile()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.saveFile()", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"private Document saveFile() throws IOException {\r\n    File tempFile = createTemporaryFile();\r\n    tempFile.deleteOnExit();\r\n    Document doc = myManager.getDocumentManager().getDocument(tempFile.getAbsolutePath());\r\n    doc.write();\r\n    // GPSaver saver = myManager.getParserFactory().newSaver();\r\n    // saver.save(doc.getOutputStream());\r\n    return doc;\r\n}"},
 {"id":4985, "name":"undo()", "fullmethod":"net.sourceforge.ganttproject.undo.UndoableEditImpl.undo()", "ownerclassid":"659", "ownerclassname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "sourcecode":"public void undo() throws CannotUndoException {\r\n    try {\r\n        restoreDocument(myDocumentBefore);\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        throw new CannotRedoException();\r\n    }\r\n}"},
 {"id":4986, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.util.BrowserControl.-init-()", "ownerclassid":"660", "ownerclassname":"net.sourceforge.ganttproject.util.BrowserControl", "sourcecode":"BrowserControl() {\r\n}"},
 {"id":4987, "name":"connectStringArray(java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.util.BrowserControl.connectStringArray(java.lang.String[])", "ownerclassid":"660", "ownerclassname":"net.sourceforge.ganttproject.util.BrowserControl", "sourcecode":"private static String connectStringArray(String[] a) {\r\n    if (a == null)\r\n        return null;\r\n\r\n    String s = \"\";\r\n    for (int i = 0; i < (a.length); i++) {\r\n        if (i > 0)\r\n            s += \" \";\r\n\r\n        s += a[i];\r\n    }\r\n    return s;\r\n}"},
 {"id":4988, "name":"displayURL(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.BrowserControl.displayURL(java.lang.String)", "ownerclassid":"660", "ownerclassname":"net.sourceforge.ganttproject.util.BrowserControl", "sourcecode":"/**\r\n * Display an URL in the system browser. If you want to display a file, you\r\n * must include the absolute path name.\r\n *\r\n * @param url\r\n * \t\tthe documents url (the url must start with either \"http://\"\r\n * \t\tor \"file://\").\r\n */\r\npublic static boolean displayURL(String url) {\r\n    // Opening a browser, even when running sandbox-restricted\r\n    // in JavaWebStart.\r\n    try {\r\n        Class serManClass = Class.forName(\"javax.jnlp.ServiceManager\");\r\n        Class basSerClass = Class.forName(\"javax.jnlp.BasicService\");\r\n        Class[] stringParam = new Class[]{ String.class };\r\n        Class[] urlParam = new Class[]{ URL.class };\r\n        Object basicService = serManClass.getMethod(\"lookup\", stringParam).invoke(serManClass, new Object[]{ \"javax.jnlp.BasicService\" });\r\n        basSerClass.getMethod(\"showDocument\", urlParam).invoke(basicService, new Object[]{ new URL(url) });\r\n        return true;\r\n    } catch (Exception e) {\r\n        // Not running in JavaWebStart or service is not supported.\r\n        // We continue with the methods below ...\r\n    }\r\n    String[] cmd = null;\r\n    switch (BrowserControl.getPlatform()) {\r\n        case BrowserControl.WIN_ID :\r\n            return BrowserControl.runCmdLine(BrowserControl.replaceToken(BrowserControl.WIN_CMDLINE, BrowserControl.URLTOKEN, url));\r\n        case BrowserControl.MAC_ID :\r\n            return BrowserControl.runCmdLine(BrowserControl.replaceToken(BrowserControl.MAC_CMDLINE, BrowserControl.URLTOKEN, url));\r\n        default :\r\n            for (int i = 0; i < (BrowserControl.OTHER_CMDLINES.length); i++) {\r\n                if (BrowserControl.runCmdLine(BrowserControl.replaceToken(BrowserControl.OTHER_CMDLINES[i], BrowserControl.URLTOKEN, url), BrowserControl.replaceToken(BrowserControl.OTHER_FALLBACKS[i], BrowserControl.URLTOKEN, url)))\r\n                    return true;\r\n\r\n            }\r\n    }\r\n    return false;\r\n}"},
 {"id":4989, "name":"getPlatform()", "fullmethod":"net.sourceforge.ganttproject.util.BrowserControl.getPlatform()", "ownerclassid":"660", "ownerclassname":"net.sourceforge.ganttproject.util.BrowserControl", "sourcecode":"/**\r\n * Try to determine whether this application is running under Windows or\r\n * some other platform by examing the \"os.name\" property.\r\n *\r\n * @return the ID of the platform\r\n */\r\nprivate static int getPlatform() {\r\n    String os = System.getProperty(\"os.name\");\r\n    if ((os != null) && (os.startsWith(BrowserControl.WIN_PREFIX)))\r\n        return BrowserControl.WIN_ID;\r\n\r\n    if ((os != null) && (os.startsWith(BrowserControl.MAC_PREFIX)))\r\n        return BrowserControl.MAC_ID;\r\n\r\n    return BrowserControl.OTHER_ID;\r\n}"},
 {"id":4990, "name":"replaceToken(java.lang.String[],java.lang.String,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.BrowserControl.replaceToken(java.lang.String[],java.lang.String,java.lang.String)", "ownerclassid":"660", "ownerclassname":"net.sourceforge.ganttproject.util.BrowserControl", "sourcecode":"private static String[] replaceToken(String[] target, String token, String replacement) {\r\n    if (null == target)\r\n        return null;\r\n\r\n    String[] result = new String[target.length];\r\n    for (int i = 0; i < (target.length); i++)\r\n        result[i] = target[i].replaceAll(token, replacement);\r\n\r\n    return result;\r\n}"},
 {"id":4991, "name":"runCmdLine(java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.util.BrowserControl.runCmdLine(java.lang.String[])", "ownerclassid":"660", "ownerclassname":"net.sourceforge.ganttproject.util.BrowserControl", "sourcecode":"private static boolean runCmdLine(String[] cmdLine) {\r\n    return BrowserControl.runCmdLine(cmdLine, null);\r\n}"},
 {"id":4992, "name":"runCmdLine(java.lang.String[],java.lang.String[])", "fullmethod":"net.sourceforge.ganttproject.util.BrowserControl.runCmdLine(java.lang.String[],java.lang.String[])", "ownerclassid":"660", "ownerclassname":"net.sourceforge.ganttproject.util.BrowserControl", "sourcecode":"private static boolean runCmdLine(String[] cmdLine, String[] fallBackCmdLine) {\r\n    try {\r\n        System.err.println(((\"Trying to invoke browser, cmd=\" + (BrowserControl.connectStringArray(cmdLine))) + \" ... \"));\r\n        Process p = Runtime.getRuntime().exec(cmdLine);\r\n        if (null != fallBackCmdLine) {\r\n            // wait for exit code -- if its 0, command worked,\r\n            // otherwise we need to start fallBackCmdLine.\r\n            int exitCode = p.waitFor();\r\n            if (exitCode != 0) {\r\n                System.err.println(exitCode);\r\n                System.err.println();\r\n                System.err.println(((\"Trying to invoke browser, cmd=\" + (BrowserControl.connectStringArray(fallBackCmdLine))) + \" ...\"));\r\n                Runtime.getRuntime().exec(fallBackCmdLine);\r\n            }\r\n        }\r\n        System.err.println();\r\n        return true;\r\n    } catch (InterruptedException e) {\r\n        System.err.println((\"Caught: \" + e));\r\n    } catch (IOException e) {\r\n        System.err.println((\"Caught: \" + e));\r\n    }\r\n    System.err.println();\r\n    return false;\r\n}"},
 {"id":4993, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.util.ColorConvertion.-init-()", "ownerclassid":"661", "ownerclassname":"net.sourceforge.ganttproject.util.ColorConvertion", "sourcecode":"ColorConvertion() {\r\n}"},
 {"id":4994, "name":"determineColor(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.ColorConvertion.determineColor(java.lang.String)", "ownerclassid":"661", "ownerclassname":"net.sourceforge.ganttproject.util.ColorConvertion", "sourcecode":"/**\r\n * parse a string as hew and return the corresponding color.\r\n */\r\npublic static Color determineColor(String hexString) {\r\n    if (!(Pattern.matches(\"#[0-9abcdefABCDEF]{6}+\", hexString))) {\r\n        return GanttGraphicArea.taskDefaultColor;\r\n    }\r\n    int r;\r\n    int g;\r\n    int b;\r\n    r = Integer.valueOf(hexString.substring(1, 3), 16).intValue();\r\n    g = Integer.valueOf(hexString.substring(3, 5), 16).intValue();\r\n    b = Integer.valueOf(hexString.substring(5, 7), 16).intValue();\r\n    return new Color(r, g, b);\r\n}"},
 {"id":4995, "name":"getColor(java.awt.Color)", "fullmethod":"net.sourceforge.ganttproject.util.ColorConvertion.getColor(java.awt.Color)", "ownerclassid":"661", "ownerclassname":"net.sourceforge.ganttproject.util.ColorConvertion", "sourcecode":"/**\r\n *\r\n *\r\n * @return the color as hexadecimal version like #RRGGBB\r\n */\r\npublic static String getColor(Color color) {\r\n    String res = \"#\";\r\n    if ((color.getRed()) <= 15)\r\n        res += \"0\";\r\n\r\n    res += Integer.toHexString(color.getRed());\r\n    if ((color.getGreen()) <= 15)\r\n        res += \"0\";\r\n\r\n    res += Integer.toHexString(color.getGreen());\r\n    if ((color.getBlue()) <= 15)\r\n        res += \"0\";\r\n\r\n    res += Integer.toHexString(color.getBlue());\r\n    return res;\r\n}"},
 {"id":4996, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.util.DateUtils.-init-()", "ownerclassid":"662", "ownerclassname":"net.sourceforge.ganttproject.util.DateUtils", "sourcecode":"DateUtils() {\r\n}"},
 {"id":4997, "name":"parseDate(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.DateUtils.parseDate(java.lang.String)", "ownerclassid":"662", "ownerclassname":"net.sourceforge.ganttproject.util.DateUtils", "sourcecode":"/**\r\n * This method tries to parse the given date according to the given locale.\r\n * Actually, this method tries to parse the given string with several\r\n * DateFormat : Short, Medium, Long and Full. Normally if you give an\r\n * appropriate locale in relation with the string, this method will return\r\n * the correct date.\r\n *\r\n * @param date\r\n * \t\tString representation of a date.\r\n * @param locale\r\n * \t\tLocale use to parse the date with.\r\n * @return A date object.\r\n * @throws ParseException\r\n * \t\tException thrown if parsing is fruitless.\r\n */\r\npublic static Date parseDate(String date) throws ParseException {\r\n    DateFormat[] formats = new DateFormat[]{ GanttLanguage.getInstance().getShortDateFormat(), GanttLanguage.getInstance().getMediumDateFormat(), GanttLanguage.getInstance().getLongDateFormat() };\r\n    // DateFormat dfFull = DateFormat.getDateInstance(DateFormat.FULL, locale);\r\n    for (int i = 0; i < (formats.length); i++) {\r\n        try {\r\n            return formats[i].parse(date);\r\n        } catch (ParseException e) {\r\n            if ((i + 1) == (formats.length)) {\r\n                throw e;\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            if ((i + 1) == (formats.length)) {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    throw new ParseException((\"Failed to parse date=\" + date), 0);\r\n}"},
 {"id":4998, "name":"-init-()", "fullmethod":"net.sourceforge.ganttproject.util.FileUtil.-init-()", "ownerclassid":"663", "ownerclassname":"net.sourceforge.ganttproject.util.FileUtil", "sourcecode":"FileUtil() {\r\n}"},
 {"id":4999, "name":"appendSuffixBeforeExtension(java.io.File,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.FileUtil.appendSuffixBeforeExtension(java.io.File,java.lang.String)", "ownerclassid":"663", "ownerclassname":"net.sourceforge.ganttproject.util.FileUtil", "sourcecode":"public static File appendSuffixBeforeExtension(File f, String suffix) throws IOException {\r\n    String filename = f.getName();\r\n    int i = filename.lastIndexOf(FileUtil.FILE_EXTENSION_SEPARATOR);\r\n    File containingFolder = f.getParentFile();\r\n    File result;\r\n    if ((i > 0) && (i < ((filename.length()) - 1))) {\r\n        String withoutExtension = filename.substring(0, i);\r\n        String extension = filename.substring(i);\r\n        result = new File(containingFolder, ((withoutExtension + suffix) + extension));\r\n    } else {\r\n        result = new File(containingFolder, (filename + suffix));\r\n    }\r\n    if (!(result.exists())) {\r\n        result.createNewFile();\r\n    }\r\n    return result;\r\n}"},
 {"id":5000, "name":"getExtension(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.util.FileUtil.getExtension(java.io.File)", "ownerclassid":"663", "ownerclassname":"net.sourceforge.ganttproject.util.FileUtil", "sourcecode":"public static String getExtension(File file) {\r\n    int lastDot = file.getName().lastIndexOf(FileUtil.FILE_EXTENSION_SEPARATOR);\r\n    return lastDot >= 0 ? file.getName().substring((lastDot + 1)) : file.getName();\r\n}"},
 {"id":5001, "name":"getFilenameWithoutExtension(java.io.File)", "fullmethod":"net.sourceforge.ganttproject.util.FileUtil.getFilenameWithoutExtension(java.io.File)", "ownerclassid":"663", "ownerclassname":"net.sourceforge.ganttproject.util.FileUtil", "sourcecode":"public static String getFilenameWithoutExtension(File f) {\r\n    String filename = f.getName();\r\n    int i = filename.lastIndexOf(FileUtil.FILE_EXTENSION_SEPARATOR);\r\n    return i >= 0 ? filename.substring(0, i) : filename;\r\n}"},
 {"id":5002, "name":"replaceExtension(java.io.File,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.FileUtil.replaceExtension(java.io.File,java.lang.String)", "ownerclassid":"663", "ownerclassname":"net.sourceforge.ganttproject.util.FileUtil", "sourcecode":"public static File replaceExtension(File f, String newExtension) throws IOException {\r\n    String filename = f.getName();\r\n    int i = filename.lastIndexOf(FileUtil.FILE_EXTENSION_SEPARATOR);\r\n    File containingFolder = f.getParentFile();\r\n    File result;\r\n    if ((i > 0) && (i < ((filename.length()) - 1))) {\r\n        String withoutExtension = filename.substring(0, i);\r\n        result = new File(containingFolder, ((withoutExtension + (FileUtil.FILE_EXTENSION_SEPARATOR)) + newExtension));\r\n    } else {\r\n        result = new File(containingFolder, ((filename + (FileUtil.FILE_EXTENSION_SEPARATOR)) + newExtension));\r\n    }\r\n    return result;\r\n}"},
 {"id":5003, "name":"getState()", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculator.getState()", "ownerclassid":"664", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculator", "sourcecode":"Object getState();"},
 {"id":5004, "name":"getTextLength(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculator.getTextLength(java.lang.String)", "ownerclassid":"664", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculator", "sourcecode":"int getTextLength(String text);"},
 {"id":5005, "name":"-init-(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl.-init-(java.awt.Graphics)", "ownerclassid":"666", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl", "sourcecode":"public TextLengthCalculatorImpl(Graphics g) {\r\n    if (g != null) {\r\n        setGraphics(g);\r\n    }\r\n}"},
 {"id":5006, "name":"-init-(java.lang.Object,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl.-init-(java.lang.Object,java.lang.Object)", "ownerclassid":"666", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl", "sourcecode":"State(Object context, Object font) {\r\n    this.context = context;\r\n    this.font = font;\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (font == null) {\r\n        throw new NullPointerException();\r\n    }\r\n}"},
 {"id":5007, "name":"getState()", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl.getState()", "ownerclassid":"666", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl", "sourcecode":"public Object getState() {\r\n    if ((myState) == null) {\r\n        myState = new TextLengthCalculatorImpl.State(myGraphics.getFontRenderContext(), myGraphics.getFont());\r\n    }\r\n    return myState;\r\n}"},
 {"id":5008, "name":"getTextLength(java.awt.Graphics,java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl.getTextLength(java.awt.Graphics,java.lang.String)", "ownerclassid":"666", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl", "sourcecode":"public static int getTextLength(Graphics g, String text) {\r\n    if ((text.length()) == 0)\r\n        return 0;\r\n\r\n    Graphics2D g2 = ((Graphics2D) (g));\r\n    FontRenderContext frc = g2.getFontRenderContext();\r\n    Font font = g.getFont();\r\n    TextLayout layout = new TextLayout(text, font, frc);\r\n    Rectangle2D bounds = layout.getBounds();\r\n    return ((int) (bounds.getWidth())) + 1;\r\n}"},
 {"id":5009, "name":"getTextLength(java.lang.String)", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl.getTextLength(java.lang.String)", "ownerclassid":"666", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl", "sourcecode":"public int getTextLength(String text) {\r\n    return TextLengthCalculatorImpl.getTextLength(myGraphics, text);\r\n}"},
 {"id":5010, "name":"setGraphics(java.awt.Graphics)", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl.setGraphics(java.awt.Graphics)", "ownerclassid":"666", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl", "sourcecode":"public void setGraphics(Graphics g) {\r\n    Graphics2D g2 = ((Graphics2D) (g));\r\n    myGraphics = g2;\r\n    myState = null;\r\n}"},
 {"id":5011, "name":"-init-(java.lang.Object,java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl$State.-init-(java.lang.Object,java.lang.Object)", "ownerclassid":"665", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl$State", "sourcecode":"State(Object context, Object font) {\r\n    this.context = context;\r\n    this.font = font;\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (font == null) {\r\n        throw new NullPointerException();\r\n    }\r\n}"},
 {"id":5012, "name":"equals(java.lang.Object)", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl$State.equals(java.lang.Object)", "ownerclassid":"665", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl$State", "sourcecode":"public boolean equals(Object o) {\r\n    TextLengthCalculatorImpl.State rvalue = ((TextLengthCalculatorImpl.State) (o));\r\n    if (rvalue == null) {\r\n        return false;\r\n    }\r\n    return (rvalue.context.equals(this.context)) && (rvalue.font.equals(this.font));\r\n}"},
 {"id":5013, "name":"hashCode()", "fullmethod":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl$State.hashCode()", "ownerclassid":"665", "ownerclassname":"net.sourceforge.ganttproject.util.TextLengthCalculatorImpl$State", "sourcecode":"public int hashCode() {\r\n    return font.hashCode();\r\n}"}]